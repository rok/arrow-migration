{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13200876",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200876",
    "key": "ARROW-3893",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344316",
                "id": "12344316",
                "name": "0.11.1",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-23"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3893/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 17,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200876/worklog/169810",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #3040: ARROW-3893: [C++] Improve adaptive int builder performance\nURL: https://github.com/apache/arrow/pull/3040\n \n \n   The strategy is two-pronged:\r\n   - scalar append to int builder appends to a small uint64_t scratch space, deferring width detection and conversion until the scratch space is full\r\n   - bulk int width detection is much improved\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-27T15:16:23.844+0000",
                    "updated": "2018-11-27T15:16:23.844+0000",
                    "started": "2018-11-27T15:16:23.844+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "169810",
                    "issueId": "13200876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200876/worklog/169812",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #3040: ARROW-3893: [C++] Improve adaptive int builder performance\nURL: https://github.com/apache/arrow/pull/3040#issuecomment-442095446\n \n \n   Benchmark of int width detection (AMD Ryzen 7, gcc 7.3.0):\r\n   ```\r\n   --------------------------------------------------------------------------------\r\n   Benchmark                                         Time           CPU Iterations\r\n   --------------------------------------------------------------------------------\r\n   BM_DetectUIntWidthNoNulls/min_time:1.000         15 us         15 us      94140    38.057GB/s\r\n   BM_DetectUIntWidthNulls/min_time:1.000           36 us         36 us      38588   15.3941GB/s\r\n   BM_DetectIntWidthNoNulls/min_time:1.000          18 us         18 us      79188    31.413GB/s\r\n   BM_DetectIntWidthNulls/min_time:1.000            41 us         41 us      34523   13.6286GB/s\r\n   ```\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-27T15:16:56.715+0000",
                    "updated": "2018-11-27T15:16:56.715+0000",
                    "started": "2018-11-27T15:16:56.713+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "169812",
                    "issueId": "13200876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200876/worklog/169818",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #3040: ARROW-3893: [C++] Improve adaptive int builder performance\nURL: https://github.com/apache/arrow/pull/3040#issuecomment-442096978\n \n \n   Adaptive int builder benchmarks:\r\n   * before:\r\n   ```\r\n   ------------------------------------------------------------------------------------------------\r\n   Benchmark                                                         Time           CPU Iterations\r\n   ------------------------------------------------------------------------------------------------\r\n   BM_BuildAdaptiveIntNoNulls/repeats:2                          12244 us      12234 us         54   5.10847GB/s\r\n   BM_BuildAdaptiveIntNoNulls/repeats:2                          12293 us      12284 us         54   5.08758GB/s\r\n   BM_BuildAdaptiveIntNoNulls/repeats:2_mean                     12269 us      12259 us         54   5.09803GB/s\r\n   BM_BuildAdaptiveIntNoNulls/repeats:2_median                   12269 us      12259 us         54   5.09803GB/s\r\n   BM_BuildAdaptiveIntNoNulls/repeats:2_stddev                      35 us         36 us         54   15.1272MB/s\r\n   BM_BuildAdaptiveIntNoNullsScalarAppend/repeats:3              45940 us      45914 us         15   1.36121GB/s\r\n   BM_BuildAdaptiveIntNoNullsScalarAppend/repeats:3              44678 us      44653 us         15   1.39963GB/s\r\n   BM_BuildAdaptiveIntNoNullsScalarAppend/repeats:3              45632 us      45603 us         15   1.37047GB/s\r\n   BM_BuildAdaptiveIntNoNullsScalarAppend/repeats:3_mean         45417 us      45390 us         15    1.3771GB/s\r\n   BM_BuildAdaptiveIntNoNullsScalarAppend/repeats:3_median       45632 us      45603 us         15   1.37047GB/s\r\n   BM_BuildAdaptiveIntNoNullsScalarAppend/repeats:3_stddev         658 us        657 us         15   20.5352MB/s\r\n   BM_BuildAdaptiveUIntNoNulls/repeats:2                         23285 us      23269 us         30   5.37198GB/s\r\n   BM_BuildAdaptiveUIntNoNulls/repeats:2                         23287 us      23272 us         30   5.37118GB/s\r\n   BM_BuildAdaptiveUIntNoNulls/repeats:2_mean                    23286 us      23270 us         30   5.37158GB/s\r\n   BM_BuildAdaptiveUIntNoNulls/repeats:2_median                  23286 us      23270 us         30   5.37158GB/s\r\n   BM_BuildAdaptiveUIntNoNulls/repeats:2_stddev                      2 us          2 us         30   597.548kB/s\r\n   BM_BuildAdaptiveUIntNoNullsScalarAppend/repeats:2             46421 us      46396 us         14   1.34707GB/s\r\n   BM_BuildAdaptiveUIntNoNullsScalarAppend/repeats:2             46596 us      46571 us         14     1.342GB/s\r\n   BM_BuildAdaptiveUIntNoNullsScalarAppend/repeats:2_mean        46508 us      46483 us         14   1.34453GB/s\r\n   BM_BuildAdaptiveUIntNoNullsScalarAppend/repeats:2_median      46508 us      46483 us         14   1.34453GB/s\r\n   BM_BuildAdaptiveUIntNoNullsScalarAppend/repeats:2_stddev        124 us        124 us         14   3.66811MB/s\r\n   ```\r\n   \r\n   * after:\r\n   ```\r\n   ------------------------------------------------------------------------------------------------\r\n   Benchmark                                                         Time           CPU Iterations\r\n   ------------------------------------------------------------------------------------------------\r\n   BM_BuildAdaptiveIntNoNulls/repeats:2                           9506 us       9495 us         74   6.58249GB/s\r\n   BM_BuildAdaptiveIntNoNulls/repeats:2                           9527 us       9520 us         74   6.56462GB/s\r\n   BM_BuildAdaptiveIntNoNulls/repeats:2_mean                      9517 us       9508 us         74   6.57355GB/s\r\n   BM_BuildAdaptiveIntNoNulls/repeats:2_median                    9517 us       9508 us         74   6.57355GB/s\r\n   BM_BuildAdaptiveIntNoNulls/repeats:2_stddev                      15 us         18 us         74   12.9434MB/s\r\n   BM_BuildAdaptiveIntNoNullsScalarAppend/repeats:3              29520 us      29499 us         24   2.11864GB/s\r\n   BM_BuildAdaptiveIntNoNullsScalarAppend/repeats:3              30365 us      30345 us         24    2.0596GB/s\r\n   BM_BuildAdaptiveIntNoNullsScalarAppend/repeats:3              29487 us      29470 us         24   2.12075GB/s\r\n   BM_BuildAdaptiveIntNoNullsScalarAppend/repeats:3_mean         29791 us      29771 us         24   2.09966GB/s\r\n   BM_BuildAdaptiveIntNoNullsScalarAppend/repeats:3_median       29520 us      29499 us         24   2.11864GB/s\r\n   BM_BuildAdaptiveIntNoNullsScalarAppend/repeats:3_stddev         498 us        497 us         24   35.5477MB/s\r\n   BM_BuildAdaptiveUIntNoNulls/repeats:2                         18526 us      18513 us         37   6.75184GB/s\r\n   BM_BuildAdaptiveUIntNoNulls/repeats:2                         18647 us      18635 us         37   6.70782GB/s\r\n   BM_BuildAdaptiveUIntNoNulls/repeats:2_mean                    18586 us      18574 us         37   6.72983GB/s\r\n   BM_BuildAdaptiveUIntNoNulls/repeats:2_median                  18586 us      18574 us         37   6.72983GB/s\r\n   BM_BuildAdaptiveUIntNoNulls/repeats:2_stddev                     86 us         86 us         37   31.8727MB/s\r\n   BM_BuildAdaptiveUIntNoNullsScalarAppend/repeats:2             29618 us      29600 us         24   2.11141GB/s\r\n   BM_BuildAdaptiveUIntNoNullsScalarAppend/repeats:2             29992 us      29975 us         24   2.08503GB/s\r\n   BM_BuildAdaptiveUIntNoNullsScalarAppend/repeats:2_mean        29805 us      29787 us         24   2.09822GB/s\r\n   BM_BuildAdaptiveUIntNoNullsScalarAppend/repeats:2_median      29805 us      29787 us         24   2.09822GB/s\r\n   BM_BuildAdaptiveUIntNoNullsScalarAppend/repeats:2_stddev        264 us        265 us         24   19.1034MB/s\r\n   ```\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-27T15:20:40.786+0000",
                    "updated": "2018-11-27T15:20:40.786+0000",
                    "started": "2018-11-27T15:20:40.786+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "169818",
                    "issueId": "13200876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200876/worklog/169819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #3040: ARROW-3893: [C++] Improve adaptive int builder performance\nURL: https://github.com/apache/arrow/pull/3040#issuecomment-442097606\n \n \n   Dictionary builder benchmarks:\r\n   * before:\r\n   ```\r\n   -----------------------------------------------------------------------------------------------\r\n   Benchmark                                                        Time           CPU Iterations\r\n   -----------------------------------------------------------------------------------------------\r\n   BM_BuildInt64DictionaryArrayRandom/repeats:2                   165 us        165 us       4178   462.219MB/s\r\n   BM_BuildInt64DictionaryArrayRandom/repeats:2                   165 us        165 us       4178   463.788MB/s\r\n   BM_BuildInt64DictionaryArrayRandom/repeats:2_mean              165 us        165 us       4178   463.003MB/s\r\n   BM_BuildInt64DictionaryArrayRandom/repeats:2_median            165 us        165 us       4178   463.003MB/s\r\n   BM_BuildInt64DictionaryArrayRandom/repeats:2_stddev              0 us          0 us       4178   1.10959MB/s\r\n   BM_BuildInt64DictionaryArraySequential/repeats:2               154 us        154 us       4365   495.413MB/s\r\n   BM_BuildInt64DictionaryArraySequential/repeats:2               158 us        158 us       4365   484.158MB/s\r\n   BM_BuildInt64DictionaryArraySequential/repeats:2_mean          156 us        156 us       4365   489.786MB/s\r\n   BM_BuildInt64DictionaryArraySequential/repeats:2_median        156 us        156 us       4365   489.786MB/s\r\n   BM_BuildInt64DictionaryArraySequential/repeats:2_stddev          3 us          3 us       4365   7.95881MB/s\r\n   BM_BuildInt64DictionaryArraySimilar/repeats:2                  158 us        157 us       4451   484.478MB/s\r\n   BM_BuildInt64DictionaryArraySimilar/repeats:2                  157 us        157 us       4451   486.471MB/s\r\n   BM_BuildInt64DictionaryArraySimilar/repeats:2_mean             157 us        157 us       4451   485.475MB/s\r\n   BM_BuildInt64DictionaryArraySimilar/repeats:2_median           157 us        157 us       4451   485.475MB/s\r\n   BM_BuildInt64DictionaryArraySimilar/repeats:2_stddev             0 us          0 us       4451   1.40936MB/s\r\n   BM_BuildStringDictionaryArray/repeats:2                        388 us        388 us       1819   257.354MB/s\r\n   BM_BuildStringDictionaryArray/repeats:2                        388 us        388 us       1819   257.319MB/s\r\n   BM_BuildStringDictionaryArray/repeats:2_mean                   388 us        388 us       1819   257.337MB/s\r\n   BM_BuildStringDictionaryArray/repeats:2_median                 388 us        388 us       1819   257.337MB/s\r\n   BM_BuildStringDictionaryArray/repeats:2_stddev                   0 us          0 us       1819   25.7869kB/s\r\n   ```\r\n   \r\n   * after:\r\n   ```\r\n   -----------------------------------------------------------------------------------------------\r\n   Benchmark                                                        Time           CPU Iterations\r\n   -----------------------------------------------------------------------------------------------\r\n   BM_BuildInt64DictionaryArrayRandom/repeats:2                   107 us        106 us       6431   716.536MB/s\r\n   BM_BuildInt64DictionaryArrayRandom/repeats:2                   105 us        105 us       6431   725.463MB/s\r\n   BM_BuildInt64DictionaryArrayRandom/repeats:2_mean              106 us        106 us       6431   720.999MB/s\r\n   BM_BuildInt64DictionaryArrayRandom/repeats:2_median            106 us        106 us       6431   720.999MB/s\r\n   BM_BuildInt64DictionaryArrayRandom/repeats:2_stddev              1 us          1 us       6431   6.31234MB/s\r\n   BM_BuildInt64DictionaryArraySequential/repeats:2                99 us         98 us       6953   775.034MB/s\r\n   BM_BuildInt64DictionaryArraySequential/repeats:2                98 us         98 us       6953   781.114MB/s\r\n   BM_BuildInt64DictionaryArraySequential/repeats:2_mean           98 us         98 us       6953   778.074MB/s\r\n   BM_BuildInt64DictionaryArraySequential/repeats:2_median         98 us         98 us       6953   778.074MB/s\r\n   BM_BuildInt64DictionaryArraySequential/repeats:2_stddev          1 us          1 us       6953   4.29916MB/s\r\n   BM_BuildInt64DictionaryArraySimilar/repeats:2                   98 us         98 us       6837   781.993MB/s\r\n   BM_BuildInt64DictionaryArraySimilar/repeats:2                   98 us         98 us       6837   775.452MB/s\r\n   BM_BuildInt64DictionaryArraySimilar/repeats:2_mean              98 us         98 us       6837   778.723MB/s\r\n   BM_BuildInt64DictionaryArraySimilar/repeats:2_median            98 us         98 us       6837   778.723MB/s\r\n   BM_BuildInt64DictionaryArraySimilar/repeats:2_stddev             1 us          1 us       6837   4.62541MB/s\r\n   BM_BuildStringDictionaryArray/repeats:2                        276 us        276 us       2531    362.76MB/s\r\n   BM_BuildStringDictionaryArray/repeats:2                        275 us        275 us       2531   363.518MB/s\r\n   BM_BuildStringDictionaryArray/repeats:2_mean                   276 us        275 us       2531   363.139MB/s\r\n   BM_BuildStringDictionaryArray/repeats:2_median                 276 us        275 us       2531   363.139MB/s\r\n   BM_BuildStringDictionaryArray/repeats:2_stddev                   0 us          0 us       2531   549.271kB/s\r\n   ```\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-27T15:22:15.464+0000",
                    "updated": "2018-11-27T15:22:15.464+0000",
                    "started": "2018-11-27T15:22:15.463+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "169819",
                    "issueId": "13200876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200876/worklog/169848",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on a change in pull request #3040: ARROW-3893: [C++] Improve adaptive int builder performance\nURL: https://github.com/apache/arrow/pull/3040#discussion_r236735266\n \n \n\n ##########\n File path: cpp/src/arrow/builder.cc\n ##########\n @@ -499,62 +541,63 @@ Status AdaptiveUIntBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n   return Status::OK();\n }\n \n-Status AdaptiveUIntBuilder::AppendValues(const uint64_t* values, int64_t length,\n-                                         const uint8_t* valid_bytes) {\n-  RETURN_NOT_OK(Reserve(length));\n+Status AdaptiveUIntBuilder::AppendValuesInternal(const uint64_t* values, int64_t length,\n+                                                 const uint8_t* valid_bytes) {\n+  // See AdaptiveIntBuilder::AppendValuesInternal\n+  constexpr int64_t max_chunk_size = 8192;\n \n Review comment:\n   Is this something that we should define somewhere as a global constant? \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-27T16:12:35.375+0000",
                    "updated": "2018-11-27T16:12:35.375+0000",
                    "started": "2018-11-27T16:12:35.374+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "169848",
                    "issueId": "13200876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200876/worklog/169852",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #3040: ARROW-3893: [C++] Improve adaptive int builder performance\nURL: https://github.com/apache/arrow/pull/3040#issuecomment-442118781\n \n \n   > Not sure whether a different max_chunk_size might make a difference depending on the underlying CPU architecture but I guess it will only be very minor.\r\n   \r\n   On my CPU it doesn't make much of a difference as long as it remains \"reasonable\" (not too small, not too large).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-27T16:16:16.338+0000",
                    "updated": "2018-11-27T16:16:16.338+0000",
                    "started": "2018-11-27T16:16:16.337+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "169852",
                    "issueId": "13200876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200876/worklog/169944",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3040: ARROW-3893: [C++] Improve adaptive int builder performance\nURL: https://github.com/apache/arrow/pull/3040#discussion_r236795250\n \n \n\n ##########\n File path: cpp/src/arrow/builder.cc\n ##########\n @@ -499,62 +541,63 @@ Status AdaptiveUIntBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n   return Status::OK();\n }\n \n-Status AdaptiveUIntBuilder::AppendValues(const uint64_t* values, int64_t length,\n-                                         const uint8_t* valid_bytes) {\n-  RETURN_NOT_OK(Reserve(length));\n+Status AdaptiveUIntBuilder::AppendValuesInternal(const uint64_t* values, int64_t length,\n+                                                 const uint8_t* valid_bytes) {\n+  // See AdaptiveIntBuilder::AppendValuesInternal\n+  constexpr int64_t max_chunk_size = 8192;\n \n Review comment:\n   Yes, will do.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-27T18:41:26.766+0000",
                    "updated": "2018-11-27T18:41:26.766+0000",
                    "started": "2018-11-27T18:41:26.765+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "169944",
                    "issueId": "13200876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200876/worklog/169949",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3040: ARROW-3893: [C++] Improve adaptive int builder performance\nURL: https://github.com/apache/arrow/pull/3040#issuecomment-442170961\n \n \n   I would like to review before merging (so I can familiarize myself with this code more, since @xhochy last worked on it). I'm moving apartments this week so off-and-on the computer\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-27T18:43:35.937+0000",
                    "updated": "2018-11-27T18:43:35.937+0000",
                    "started": "2018-11-27T18:43:35.936+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "169949",
                    "issueId": "13200876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200876/worklog/169976",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3040: ARROW-3893: [C++] Improve adaptive int builder performance\nURL: https://github.com/apache/arrow/pull/3040#issuecomment-442187095\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3040?src=pr&el=h1) Report\n   > Merging [#3040](https://codecov.io/gh/apache/arrow/pull/3040?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/5a001e0270bc888484e967a9462c76cbe217d42f?src=pr&el=desc) will **increase** coverage by `1.14%`.\n   > The diff coverage is `99.37%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3040/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3040?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #3040      +/-   ##\n   ==========================================\n   + Coverage   87.02%   88.16%   +1.14%     \n   ==========================================\n     Files         496      427      -69     \n     Lines       70615    65417    -5198     \n   ==========================================\n   - Hits        61451    57677    -3774     \n   + Misses       9067     7740    -1327     \n   + Partials       97        0      -97\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3040?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/array-test.cc](https://codecov.io/gh/apache/arrow/pull/3040/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS10ZXN0LmNj) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/int-util-test.cc](https://codecov.io/gh/apache/arrow/pull/3040/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2ludC11dGlsLXRlc3QuY2M=) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/builder.h](https://codecov.io/gh/apache/arrow/pull/3040/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9idWlsZGVyLmg=) | `96.47% <88.88%> (-0.6%)` | :arrow_down: |\n   | [cpp/src/arrow/builder.cc](https://codecov.io/gh/apache/arrow/pull/3040/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9idWlsZGVyLmNj) | `81.68% <98.66%> (+3.37%)` | :arrow_up: |\n   | [cpp/src/arrow/util/int-util.cc](https://codecov.io/gh/apache/arrow/pull/3040/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2ludC11dGlsLmNj) | `99.57% <99.57%> (\u00f8)` | |\n   | [rust/src/record\\_batch.rs](https://codecov.io/gh/apache/arrow/pull/3040/diff?src=pr&el=tree#diff-cnVzdC9zcmMvcmVjb3JkX2JhdGNoLnJz) | | |\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/3040/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | | |\n   | [rust/src/array.rs](https://codecov.io/gh/apache/arrow/pull/3040/diff?src=pr&el=tree#diff-cnVzdC9zcmMvYXJyYXkucnM=) | | |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3040/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [go/arrow/internal/testing/tools/bool.go](https://codecov.io/gh/apache/arrow/pull/3040/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvdGVzdGluZy90b29scy9ib29sLmdv) | | |\n   | ... and [69 more](https://codecov.io/gh/apache/arrow/pull/3040/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3040?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3040?src=pr&el=footer). Last update [5a001e0...5e871ee](https://codecov.io/gh/apache/arrow/pull/3040?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-27T19:32:06.336+0000",
                    "updated": "2018-11-27T19:32:06.336+0000",
                    "started": "2018-11-27T19:32:06.335+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "169976",
                    "issueId": "13200876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200876/worklog/171094",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3040: ARROW-3893: [C++] Improve adaptive int builder performance\nURL: https://github.com/apache/arrow/pull/3040#issuecomment-443223193\n \n \n   Will review this today. Can you rebase?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-30T14:40:07.477+0000",
                    "updated": "2018-11-30T14:40:07.477+0000",
                    "started": "2018-11-30T14:40:07.476+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171094",
                    "issueId": "13200876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200876/worklog/171105",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #3040: ARROW-3893: [C++] Improve adaptive int builder performance\nURL: https://github.com/apache/arrow/pull/3040#issuecomment-443239620\n \n \n   Rebased.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-30T15:30:57.561+0000",
                    "updated": "2018-11-30T15:30:57.561+0000",
                    "started": "2018-11-30T15:30:57.560+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171105",
                    "issueId": "13200876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200876/worklog/171153",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #3040: ARROW-3893: [C++] Improve adaptive int builder performance\nURL: https://github.com/apache/arrow/pull/3040#discussion_r237955037\n \n \n\n ##########\n File path: cpp/src/arrow/util/int-util.cc\n ##########\n @@ -0,0 +1,406 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n \n Review comment:\n   This appears to have been an enjoyable exercise =) \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-30T18:25:09.149+0000",
                    "updated": "2018-11-30T18:25:09.149+0000",
                    "started": "2018-11-30T18:25:09.148+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171153",
                    "issueId": "13200876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200876/worklog/171154",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #3040: ARROW-3893: [C++] Improve adaptive int builder performance\nURL: https://github.com/apache/arrow/pull/3040#discussion_r237954145\n \n \n\n ##########\n File path: cpp/src/arrow/util/int-util.cc\n ##########\n @@ -0,0 +1,406 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/int-util.h\"\n+\n+#include <algorithm>\n+#include <cstring>\n+#include <limits>\n+\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+static constexpr uint64_t max_uint8 =\n+    static_cast<uint64_t>(std::numeric_limits<uint8_t>::max());\n+static constexpr uint64_t max_uint16 =\n+    static_cast<uint64_t>(std::numeric_limits<uint16_t>::max());\n+static constexpr uint64_t max_uint32 =\n+    static_cast<uint64_t>(std::numeric_limits<uint32_t>::max());\n+static constexpr uint64_t max_uint64 = std::numeric_limits<uint64_t>::max();\n+\n+static constexpr uint64_t mask_uint8 = ~0xffULL;\n+static constexpr uint64_t mask_uint16 = ~0xffffULL;\n+static constexpr uint64_t mask_uint32 = ~0xffffffffULL;\n \n Review comment:\n   Ordinarily it would improve readability to use `kMaskUInt8` style naming\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-30T18:25:09.155+0000",
                    "updated": "2018-11-30T18:25:09.155+0000",
                    "started": "2018-11-30T18:25:09.154+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171154",
                    "issueId": "13200876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200876/worklog/171155",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3040: ARROW-3893: [C++] Improve adaptive int builder performance\nURL: https://github.com/apache/arrow/pull/3040#discussion_r237956500\n \n \n\n ##########\n File path: cpp/src/arrow/util/int-util.cc\n ##########\n @@ -0,0 +1,406 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/int-util.h\"\n+\n+#include <algorithm>\n+#include <cstring>\n+#include <limits>\n+\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+static constexpr uint64_t max_uint8 =\n+    static_cast<uint64_t>(std::numeric_limits<uint8_t>::max());\n+static constexpr uint64_t max_uint16 =\n+    static_cast<uint64_t>(std::numeric_limits<uint16_t>::max());\n+static constexpr uint64_t max_uint32 =\n+    static_cast<uint64_t>(std::numeric_limits<uint32_t>::max());\n+static constexpr uint64_t max_uint64 = std::numeric_limits<uint64_t>::max();\n+\n+static constexpr uint64_t mask_uint8 = ~0xffULL;\n+static constexpr uint64_t mask_uint16 = ~0xffffULL;\n+static constexpr uint64_t mask_uint32 = ~0xffffffffULL;\n \n Review comment:\n   Will do!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-30T18:25:59.417+0000",
                    "updated": "2018-11-30T18:25:59.417+0000",
                    "started": "2018-11-30T18:25:59.416+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171155",
                    "issueId": "13200876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200876/worklog/171156",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3040: ARROW-3893: [C++] Improve adaptive int builder performance\nURL: https://github.com/apache/arrow/pull/3040#issuecomment-443294699\n \n \n   conda appears to have had an internal error in the Appveyor build. Merging\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-30T18:26:32.307+0000",
                    "updated": "2018-11-30T18:26:32.307+0000",
                    "started": "2018-11-30T18:26:32.306+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171156",
                    "issueId": "13200876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200876/worklog/171158",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3040: ARROW-3893: [C++] Improve adaptive int builder performance\nURL: https://github.com/apache/arrow/pull/3040#discussion_r237956783\n \n \n\n ##########\n File path: cpp/src/arrow/util/int-util.cc\n ##########\n @@ -0,0 +1,406 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n \n Review comment:\n   I'm sure people who like writing SIMD code would find an enjoyable exercise here as well ;-)\r\n   (@fsaintjacques perhaps?)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-30T18:26:55.301+0000",
                    "updated": "2018-11-30T18:26:55.301+0000",
                    "started": "2018-11-30T18:26:55.300+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171158",
                    "issueId": "13200876"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200876/worklog/171162",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #3040: ARROW-3893: [C++] Improve adaptive int builder performance\nURL: https://github.com/apache/arrow/pull/3040\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/CMakeLists.txt b/cpp/src/arrow/CMakeLists.txt\nindex 8ff17a279c..a56079fb2a 100644\n--- a/cpp/src/arrow/CMakeLists.txt\n+++ b/cpp/src/arrow/CMakeLists.txt\n@@ -48,6 +48,7 @@ set(ARROW_SRCS\n   util/compression.cc\n   util/cpu-info.cc\n   util/decimal.cc\n+  util/int-util.cc\n   util/io-util.cc\n   util/logging.cc\n   util/key_value_metadata.cc\ndiff --git a/cpp/src/arrow/array-test.cc b/cpp/src/arrow/array-test.cc\nindex ab03cede69..586605831b 100644\n--- a/cpp/src/arrow/array-test.cc\n+++ b/cpp/src/arrow/array-test.cc\n@@ -1199,7 +1199,7 @@ TEST_F(TestAdaptiveIntBuilder, TestInt8) {\n \n   std::vector<int8_t> expected_values({0, 127, -128});\n   ArrayFromVector<Int8Type, int8_t>(expected_values, &expected_);\n-  ASSERT_TRUE(expected_->Equals(result_));\n+  AssertArraysEqual(*expected_, *result_);\n }\n \n TEST_F(TestAdaptiveIntBuilder, TestInt16) {\n@@ -1209,7 +1209,7 @@ TEST_F(TestAdaptiveIntBuilder, TestInt16) {\n \n   std::vector<int16_t> expected_values({0, 128});\n   ArrayFromVector<Int16Type, int16_t>(expected_values, &expected_);\n-  ASSERT_TRUE(expected_->Equals(result_));\n+  AssertArraysEqual(*expected_, *result_);\n \n   SetUp();\n   ASSERT_OK(builder_->Append(-129));\n@@ -1217,7 +1217,7 @@ TEST_F(TestAdaptiveIntBuilder, TestInt16) {\n   Done();\n \n   ArrayFromVector<Int16Type, int16_t>(expected_values, &expected_);\n-  ASSERT_TRUE(expected_->Equals(result_));\n+  AssertArraysEqual(*expected_, *result_);\n \n   SetUp();\n   ASSERT_OK(builder_->Append(std::numeric_limits<int16_t>::max()));\n@@ -1227,7 +1227,7 @@ TEST_F(TestAdaptiveIntBuilder, TestInt16) {\n   Done();\n \n   ArrayFromVector<Int16Type, int16_t>(expected_values, &expected_);\n-  ASSERT_TRUE(expected_->Equals(result_));\n+  AssertArraysEqual(*expected_, *result_);\n }\n \n TEST_F(TestAdaptiveIntBuilder, TestInt32) {\n@@ -1239,7 +1239,7 @@ TEST_F(TestAdaptiveIntBuilder, TestInt32) {\n   std::vector<int32_t> expected_values(\n       {0, static_cast<int32_t>(std::numeric_limits<int16_t>::max()) + 1});\n   ArrayFromVector<Int32Type, int32_t>(expected_values, &expected_);\n-  ASSERT_TRUE(expected_->Equals(result_));\n+  AssertArraysEqual(*expected_, *result_);\n \n   SetUp();\n   ASSERT_OK(\n@@ -1248,7 +1248,7 @@ TEST_F(TestAdaptiveIntBuilder, TestInt32) {\n   Done();\n \n   ArrayFromVector<Int32Type, int32_t>(expected_values, &expected_);\n-  ASSERT_TRUE(expected_->Equals(result_));\n+  AssertArraysEqual(*expected_, *result_);\n \n   SetUp();\n   ASSERT_OK(builder_->Append(std::numeric_limits<int32_t>::max()));\n@@ -1258,7 +1258,7 @@ TEST_F(TestAdaptiveIntBuilder, TestInt32) {\n   Done();\n \n   ArrayFromVector<Int32Type, int32_t>(expected_values, &expected_);\n-  ASSERT_TRUE(expected_->Equals(result_));\n+  AssertArraysEqual(*expected_, *result_);\n }\n \n TEST_F(TestAdaptiveIntBuilder, TestInt64) {\n@@ -1270,7 +1270,7 @@ TEST_F(TestAdaptiveIntBuilder, TestInt64) {\n   std::vector<int64_t> expected_values(\n       {0, static_cast<int64_t>(std::numeric_limits<int32_t>::max()) + 1});\n   ArrayFromVector<Int64Type, int64_t>(expected_values, &expected_);\n-  ASSERT_TRUE(expected_->Equals(result_));\n+  AssertArraysEqual(*expected_, *result_);\n \n   SetUp();\n   ASSERT_OK(\n@@ -1279,7 +1279,7 @@ TEST_F(TestAdaptiveIntBuilder, TestInt64) {\n   Done();\n \n   ArrayFromVector<Int64Type, int64_t>(expected_values, &expected_);\n-  ASSERT_TRUE(expected_->Equals(result_));\n+  AssertArraysEqual(*expected_, *result_);\n \n   SetUp();\n   ASSERT_OK(builder_->Append(std::numeric_limits<int64_t>::max()));\n@@ -1289,17 +1289,58 @@ TEST_F(TestAdaptiveIntBuilder, TestInt64) {\n   Done();\n \n   ArrayFromVector<Int64Type, int64_t>(expected_values, &expected_);\n-  ASSERT_TRUE(expected_->Equals(result_));\n+  AssertArraysEqual(*expected_, *result_);\n }\n \n TEST_F(TestAdaptiveIntBuilder, TestAppendValues) {\n-  std::vector<int64_t> expected_values(\n-      {0, static_cast<int64_t>(std::numeric_limits<int32_t>::max()) + 1});\n-  ASSERT_OK(builder_->AppendValues(expected_values.data(), expected_values.size()));\n-  Done();\n-\n-  ArrayFromVector<Int64Type, int64_t>(expected_values, &expected_);\n-  ASSERT_TRUE(expected_->Equals(result_));\n+  {\n+    std::vector<int64_t> expected_values(\n+        {0, static_cast<int64_t>(std::numeric_limits<int32_t>::max()) + 1});\n+    ASSERT_OK(builder_->AppendValues(expected_values.data(), expected_values.size()));\n+    Done();\n+\n+    ArrayFromVector<Int64Type, int64_t>(expected_values, &expected_);\n+    AssertArraysEqual(*expected_, *result_);\n+  }\n+  {\n+    SetUp();\n+    std::vector<int64_t> values(\n+        {0, std::numeric_limits<int32_t>::min(), std::numeric_limits<int32_t>::max()});\n+    ASSERT_OK(builder_->AppendValues(values.data(), values.size()));\n+    Done();\n+\n+    std::vector<int32_t> expected_values(\n+        {0, std::numeric_limits<int32_t>::min(), std::numeric_limits<int32_t>::max()});\n+\n+    ArrayFromVector<Int32Type, int32_t>(expected_values, &expected_);\n+    AssertArraysEqual(*expected_, *result_);\n+  }\n+  {\n+    SetUp();\n+    std::vector<int64_t> values(\n+        {0, std::numeric_limits<int16_t>::min(), std::numeric_limits<int16_t>::max()});\n+    ASSERT_OK(builder_->AppendValues(values.data(), values.size()));\n+    Done();\n+\n+    std::vector<int16_t> expected_values(\n+        {0, std::numeric_limits<int16_t>::min(), std::numeric_limits<int16_t>::max()});\n+\n+    ArrayFromVector<Int16Type, int16_t>(expected_values, &expected_);\n+    AssertArraysEqual(*expected_, *result_);\n+  }\n+  {\n+    SetUp();\n+    std::vector<int64_t> values(\n+        {0, std::numeric_limits<int8_t>::min(), std::numeric_limits<int8_t>::max()});\n+    ASSERT_OK(builder_->AppendValues(values.data(), values.size()));\n+    Done();\n+\n+    std::vector<int8_t> expected_values(\n+        {0, std::numeric_limits<int8_t>::min(), std::numeric_limits<int8_t>::max()});\n+\n+    ArrayFromVector<Int8Type, int8_t>(expected_values, &expected_);\n+    AssertArraysEqual(*expected_, *result_);\n+  }\n }\n \n TEST_F(TestAdaptiveIntBuilder, TestAssertZeroPadded) {\n@@ -1311,15 +1352,23 @@ TEST_F(TestAdaptiveIntBuilder, TestAssertZeroPadded) {\n \n TEST_F(TestAdaptiveIntBuilder, TestAppendNull) {\n   int64_t size = 1000;\n-  for (unsigned index = 0; index < size; ++index) {\n+  ASSERT_OK(builder_->Append(127));\n+  for (unsigned index = 1; index < size - 1; ++index) {\n     ASSERT_OK(builder_->AppendNull());\n   }\n+  ASSERT_OK(builder_->Append(-128));\n \n   Done();\n \n-  for (unsigned index = 0; index < size; ++index) {\n-    ASSERT_TRUE(result_->IsNull(index));\n-  }\n+  std::vector<bool> expected_valid(size, false);\n+  expected_valid[0] = true;\n+  expected_valid[size - 1] = true;\n+  std::vector<int8_t> expected_values(size);\n+  expected_values[0] = 127;\n+  expected_values[size - 1] = -128;\n+  std::shared_ptr<Array> expected;\n+  ArrayFromVector<Int8Type, int8_t>(expected_valid, expected_values, &expected_);\n+  AssertArraysEqual(*expected_, *result_);\n }\n \n TEST_F(TestAdaptiveIntBuilder, TestAppendNulls) {\n@@ -1438,15 +1487,23 @@ TEST_F(TestAdaptiveUIntBuilder, TestAssertZeroPadded) {\n \n TEST_F(TestAdaptiveUIntBuilder, TestAppendNull) {\n   int64_t size = 1000;\n-  for (unsigned index = 0; index < size; ++index) {\n+  ASSERT_OK(builder_->Append(254));\n+  for (unsigned index = 1; index < size - 1; ++index) {\n     ASSERT_OK(builder_->AppendNull());\n   }\n+  ASSERT_OK(builder_->Append(255));\n \n   Done();\n \n-  for (unsigned index = 0; index < size; ++index) {\n-    ASSERT_TRUE(result_->IsNull(index));\n-  }\n+  std::vector<bool> expected_valid(size, false);\n+  expected_valid[0] = true;\n+  expected_valid[size - 1] = true;\n+  std::vector<uint8_t> expected_values(size);\n+  expected_values[0] = 254;\n+  expected_values[size - 1] = 255;\n+  std::shared_ptr<Array> expected;\n+  ArrayFromVector<UInt8Type, uint8_t>(expected_valid, expected_values, &expected_);\n+  AssertArraysEqual(*expected_, *result_);\n }\n \n TEST_F(TestAdaptiveUIntBuilder, TestAppendNulls) {\ndiff --git a/cpp/src/arrow/builder-benchmark.cc b/cpp/src/arrow/builder-benchmark.cc\nindex 4acede1ccd..f96728dcd4 100644\n--- a/cpp/src/arrow/builder-benchmark.cc\n+++ b/cpp/src/arrow/builder-benchmark.cc\n@@ -69,14 +69,14 @@ static void BM_BuildAdaptiveIntNoNulls(\n     benchmark::State& state) {  // NOLINT non-const reference\n   int64_t size = static_cast<int64_t>(std::numeric_limits<int16_t>::max()) * 256;\n   int64_t chunk_size = size / 8;\n-  std::vector<int64_t> data;\n+  std::vector<int64_t> data(size);\n   for (int64_t i = 0; i < size; i++) {\n-    data.push_back(i);\n+    data[i] = i;\n   }\n   while (state.KeepRunning()) {\n     AdaptiveIntBuilder builder;\n     for (int64_t i = 0; i < size; i += chunk_size) {\n-      // Build up an array of 512 MiB in size\n+      // Build up an array of 128 MiB in size\n       ABORT_NOT_OK(builder.AppendValues(data.data() + i, chunk_size, nullptr));\n     }\n     std::shared_ptr<Array> out;\n@@ -88,9 +88,9 @@ static void BM_BuildAdaptiveIntNoNulls(\n static void BM_BuildAdaptiveIntNoNullsScalarAppend(\n     benchmark::State& state) {  // NOLINT non-const reference\n   int64_t size = static_cast<int64_t>(std::numeric_limits<int16_t>::max()) * 256;\n-  std::vector<int64_t> data;\n+  std::vector<int64_t> data(size);\n   for (int64_t i = 0; i < size; i++) {\n-    data.push_back(i);\n+    data[i] = i;\n   }\n   while (state.KeepRunning()) {\n     AdaptiveIntBuilder builder;\n@@ -107,14 +107,14 @@ static void BM_BuildAdaptiveUIntNoNulls(\n     benchmark::State& state) {  // NOLINT non-const reference\n   int64_t size = static_cast<int64_t>(std::numeric_limits<uint16_t>::max()) * 256;\n   int64_t chunk_size = size / 8;\n-  std::vector<uint64_t> data;\n+  std::vector<uint64_t> data(size);\n   for (uint64_t i = 0; i < static_cast<uint64_t>(size); i++) {\n-    data.push_back(i);\n+    data[i] = i;\n   }\n   while (state.KeepRunning()) {\n     AdaptiveUIntBuilder builder;\n     for (int64_t i = 0; i < size; i += chunk_size) {\n-      // Build up an array of 512 MiB in size\n+      // Build up an array of 128 MiB in size\n       ABORT_NOT_OK(builder.AppendValues(data.data() + i, chunk_size, nullptr));\n     }\n     std::shared_ptr<Array> out;\n@@ -123,6 +123,24 @@ static void BM_BuildAdaptiveUIntNoNulls(\n   state.SetBytesProcessed(state.iterations() * data.size() * sizeof(int64_t));\n }\n \n+static void BM_BuildAdaptiveUIntNoNullsScalarAppend(\n+    benchmark::State& state) {  // NOLINT non-const reference\n+  int64_t size = static_cast<int64_t>(std::numeric_limits<int16_t>::max()) * 256;\n+  std::vector<uint64_t> data(size);\n+  for (uint64_t i = 0; i < static_cast<uint64_t>(size); i++) {\n+    data[i] = i;\n+  }\n+  while (state.KeepRunning()) {\n+    AdaptiveUIntBuilder builder;\n+    for (int64_t i = 0; i < size; i++) {\n+      ABORT_NOT_OK(builder.Append(data[i]));\n+    }\n+    std::shared_ptr<Array> out;\n+    ABORT_NOT_OK(builder.Finish(&out));\n+  }\n+  state.SetBytesProcessed(state.iterations() * data.size() * sizeof(int64_t));\n+}\n+\n static void BM_BuildBooleanArrayNoNulls(\n     benchmark::State& state) {  // NOLINT non-const reference\n   // 2 MiB block\n@@ -349,6 +367,9 @@ BENCHMARK(BM_BuildAdaptiveIntNoNullsScalarAppend)\n BENCHMARK(BM_BuildAdaptiveUIntNoNulls)\n     ->Repetitions(kRepetitions)\n     ->Unit(benchmark::kMicrosecond);\n+BENCHMARK(BM_BuildAdaptiveUIntNoNullsScalarAppend)\n+    ->Repetitions(kRepetitions)\n+    ->Unit(benchmark::kMicrosecond);\n \n BENCHMARK(BM_BuildBinaryArray)->Repetitions(kRepetitions)->Unit(benchmark::kMicrosecond);\n BENCHMARK(BM_BuildFixedSizeBinaryArray)\ndiff --git a/cpp/src/arrow/builder.cc b/cpp/src/arrow/builder.cc\nindex 0d9e0e0e62..0e10be7ff4 100644\n--- a/cpp/src/arrow/builder.cc\n+++ b/cpp/src/arrow/builder.cc\n@@ -34,6 +34,7 @@\n #include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/decimal.h\"\n #include \"arrow/util/hashing.h\"\n+#include \"arrow/util/int-util.h\"\n #include \"arrow/util/logging.h\"\n \n namespace arrow {\n@@ -295,12 +296,19 @@ template class PrimitiveBuilder<FloatType>;\n template class PrimitiveBuilder<DoubleType>;\n \n AdaptiveIntBuilderBase::AdaptiveIntBuilderBase(MemoryPool* pool)\n-    : ArrayBuilder(int64(), pool), data_(nullptr), raw_data_(nullptr), int_size_(1) {}\n+    : ArrayBuilder(int64(), pool),\n+      data_(nullptr),\n+      raw_data_(nullptr),\n+      int_size_(1),\n+      pending_pos_(0),\n+      pending_has_nulls_(false) {}\n \n void AdaptiveIntBuilderBase::Reset() {\n   ArrayBuilder::Reset();\n   data_.reset();\n   raw_data_ = nullptr;\n+  pending_pos_ = 0;\n+  pending_has_nulls_ = false;\n }\n \n Status AdaptiveIntBuilderBase::Resize(int64_t capacity) {\n@@ -321,6 +329,8 @@ Status AdaptiveIntBuilderBase::Resize(int64_t capacity) {\n AdaptiveIntBuilder::AdaptiveIntBuilder(MemoryPool* pool) : AdaptiveIntBuilderBase(pool) {}\n \n Status AdaptiveIntBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n+  RETURN_NOT_OK(CommitPendingData());\n+\n   std::shared_ptr<DataType> output_type;\n   switch (int_size_) {\n     case 1:\n@@ -350,62 +360,91 @@ Status AdaptiveIntBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n   return Status::OK();\n }\n \n-Status AdaptiveIntBuilder::AppendValues(const int64_t* values, int64_t length,\n-                                        const uint8_t* valid_bytes) {\n-  RETURN_NOT_OK(Reserve(length));\n+Status AdaptiveIntBuilder::CommitPendingData() {\n+  if (pending_pos_ == 0) {\n+    return Status::OK();\n+  }\n+  RETURN_NOT_OK(Reserve(pending_pos_));\n+  const uint8_t* valid_bytes = pending_has_nulls_ ? pending_valid_ : nullptr;\n+  RETURN_NOT_OK(AppendValuesInternal(reinterpret_cast<const int64_t*>(pending_data_),\n+                                     pending_pos_, valid_bytes));\n+  pending_has_nulls_ = false;\n+  pending_pos_ = 0;\n+  return Status::OK();\n+}\n \n-  if (length > 0) {\n-    if (int_size_ < 8) {\n-      uint8_t new_int_size = int_size_;\n-      for (int64_t i = 0; i < length; i++) {\n-        if (valid_bytes == nullptr || valid_bytes[i]) {\n-          new_int_size = internal::ExpandedIntSize(values[i], new_int_size);\n-        }\n-      }\n-      if (new_int_size != int_size_) {\n-        RETURN_NOT_OK(ExpandIntSize(new_int_size));\n-      }\n+static constexpr int64_t kAdaptiveIntChunkSize = 8192;\n+\n+Status AdaptiveIntBuilder::AppendValuesInternal(const int64_t* values, int64_t length,\n+                                                const uint8_t* valid_bytes) {\n+  while (length > 0) {\n+    // In case `length` is very large, we don't want to trash the cache by\n+    // scanning it twice (first to detect int width, second to copy the data).\n+    // Instead, process data in L2-cacheable chunks.\n+    const int64_t chunk_size = std::min(length, kAdaptiveIntChunkSize);\n+\n+    uint8_t new_int_size;\n+    new_int_size = internal::DetectIntWidth(values, valid_bytes, chunk_size, int_size_);\n+\n+    DCHECK_GE(new_int_size, int_size_);\n+    if (new_int_size > int_size_) {\n+      // This updates int_size_\n+      RETURN_NOT_OK(ExpandIntSize(new_int_size));\n     }\n-  }\n \n-  if (int_size_ == 8) {\n-    std::memcpy(reinterpret_cast<int64_t*>(raw_data_) + length_, values,\n-                sizeof(int64_t) * length);\n-  } else {\n-#ifdef _MSC_VER\n-#pragma warning(push)\n-#pragma warning(disable : 4996)\n-#endif\n-    // int_size_ may have changed, so we need to recheck\n     switch (int_size_) {\n-      case 1: {\n-        int8_t* data_ptr = reinterpret_cast<int8_t*>(raw_data_) + length_;\n-        std::transform(values, values + length, data_ptr,\n-                       [](int64_t x) { return static_cast<int8_t>(x); });\n-      } break;\n-      case 2: {\n-        int16_t* data_ptr = reinterpret_cast<int16_t*>(raw_data_) + length_;\n-        std::transform(values, values + length, data_ptr,\n-                       [](int64_t x) { return static_cast<int16_t>(x); });\n-      } break;\n-      case 4: {\n-        int32_t* data_ptr = reinterpret_cast<int32_t*>(raw_data_) + length_;\n-        std::transform(values, values + length, data_ptr,\n-                       [](int64_t x) { return static_cast<int32_t>(x); });\n-      } break;\n+      case 1:\n+        internal::DowncastInts(values, reinterpret_cast<int8_t*>(raw_data_) + length_,\n+                               chunk_size);\n+        break;\n+      case 2:\n+        internal::DowncastInts(values, reinterpret_cast<int16_t*>(raw_data_) + length_,\n+                               chunk_size);\n+        break;\n+      case 4:\n+        internal::DowncastInts(values, reinterpret_cast<int32_t*>(raw_data_) + length_,\n+                               chunk_size);\n+        break;\n+      case 8:\n+        internal::DowncastInts(values, reinterpret_cast<int64_t*>(raw_data_) + length_,\n+                               chunk_size);\n+        break;\n       default:\n         DCHECK(false);\n     }\n-#ifdef _MSC_VER\n-#pragma warning(pop)\n-#endif\n+\n+    // This updates length_\n+    ArrayBuilder::UnsafeAppendToBitmap(valid_bytes, chunk_size);\n+    values += chunk_size;\n+    if (valid_bytes != nullptr) {\n+      valid_bytes += chunk_size;\n+    }\n+    length -= chunk_size;\n   }\n \n-  // length_ is update by these\n-  ArrayBuilder::UnsafeAppendToBitmap(valid_bytes, length);\n   return Status::OK();\n }\n \n+Status AdaptiveUIntBuilder::CommitPendingData() {\n+  if (pending_pos_ == 0) {\n+    return Status::OK();\n+  }\n+  RETURN_NOT_OK(Reserve(pending_pos_));\n+  const uint8_t* valid_bytes = pending_has_nulls_ ? pending_valid_ : nullptr;\n+  RETURN_NOT_OK(AppendValuesInternal(pending_data_, pending_pos_, valid_bytes));\n+  pending_has_nulls_ = false;\n+  pending_pos_ = 0;\n+  return Status::OK();\n+}\n+\n+Status AdaptiveIntBuilder::AppendValues(const int64_t* values, int64_t length,\n+                                        const uint8_t* valid_bytes) {\n+  RETURN_NOT_OK(CommitPendingData());\n+  RETURN_NOT_OK(Reserve(length));\n+\n+  return AppendValuesInternal(values, length, valid_bytes);\n+}\n+\n template <typename new_type, typename old_type>\n typename std::enable_if<sizeof(old_type) >= sizeof(new_type), Status>::type\n AdaptiveIntBuilder::ExpandIntSizeInternal() {\n@@ -418,9 +457,10 @@ typename std::enable_if<__LESS(sizeof(old_type), sizeof(new_type)), Status>::typ\n AdaptiveIntBuilder::ExpandIntSizeInternal() {\n   int_size_ = sizeof(new_type);\n   RETURN_NOT_OK(Resize(data_->size() / sizeof(old_type)));\n-\n-  old_type* src = reinterpret_cast<old_type*>(raw_data_);\n+  raw_data_ = reinterpret_cast<uint8_t*>(data_->mutable_data());\n+  const old_type* src = reinterpret_cast<old_type*>(raw_data_);\n   new_type* dst = reinterpret_cast<new_type*>(raw_data_);\n+\n   // By doing the backward copy, we ensure that no element is overriden during\n   // the copy process and the copy stays in-place.\n   std::copy_backward(src, src + length_, dst + length_);\n@@ -474,6 +514,8 @@ AdaptiveUIntBuilder::AdaptiveUIntBuilder(MemoryPool* pool)\n     : AdaptiveIntBuilderBase(pool) {}\n \n Status AdaptiveUIntBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n+  RETURN_NOT_OK(CommitPendingData());\n+\n   std::shared_ptr<DataType> output_type;\n   switch (int_size_) {\n     case 1:\n@@ -503,62 +545,61 @@ Status AdaptiveUIntBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n   return Status::OK();\n }\n \n-Status AdaptiveUIntBuilder::AppendValues(const uint64_t* values, int64_t length,\n-                                         const uint8_t* valid_bytes) {\n-  RETURN_NOT_OK(Reserve(length));\n+Status AdaptiveUIntBuilder::AppendValuesInternal(const uint64_t* values, int64_t length,\n+                                                 const uint8_t* valid_bytes) {\n+  while (length > 0) {\n+    // See AdaptiveIntBuilder::AppendValuesInternal\n+    const int64_t chunk_size = std::min(length, kAdaptiveIntChunkSize);\n \n-  if (length > 0) {\n-    if (int_size_ < 8) {\n-      uint8_t new_int_size = int_size_;\n-      for (int64_t i = 0; i < length; i++) {\n-        if (valid_bytes == nullptr || valid_bytes[i]) {\n-          new_int_size = internal::ExpandedUIntSize(values[i], new_int_size);\n-        }\n-      }\n-      if (new_int_size != int_size_) {\n-        RETURN_NOT_OK(ExpandIntSize(new_int_size));\n-      }\n+    uint8_t new_int_size;\n+    new_int_size = internal::DetectUIntWidth(values, valid_bytes, chunk_size, int_size_);\n+\n+    DCHECK_GE(new_int_size, int_size_);\n+    if (new_int_size > int_size_) {\n+      // This updates int_size_\n+      RETURN_NOT_OK(ExpandIntSize(new_int_size));\n     }\n-  }\n \n-  if (int_size_ == 8) {\n-    std::memcpy(reinterpret_cast<uint64_t*>(raw_data_) + length_, values,\n-                sizeof(uint64_t) * length);\n-  } else {\n-#ifdef _MSC_VER\n-#pragma warning(push)\n-#pragma warning(disable : 4996)\n-#endif\n-    // int_size_ may have changed, so we need to recheck\n     switch (int_size_) {\n-      case 1: {\n-        uint8_t* data_ptr = reinterpret_cast<uint8_t*>(raw_data_) + length_;\n-        std::transform(values, values + length, data_ptr,\n-                       [](uint64_t x) { return static_cast<uint8_t>(x); });\n-      } break;\n-      case 2: {\n-        uint16_t* data_ptr = reinterpret_cast<uint16_t*>(raw_data_) + length_;\n-        std::transform(values, values + length, data_ptr,\n-                       [](uint64_t x) { return static_cast<uint16_t>(x); });\n-      } break;\n-      case 4: {\n-        uint32_t* data_ptr = reinterpret_cast<uint32_t*>(raw_data_) + length_;\n-        std::transform(values, values + length, data_ptr,\n-                       [](uint64_t x) { return static_cast<uint32_t>(x); });\n-      } break;\n+      case 1:\n+        internal::DowncastUInts(values, reinterpret_cast<uint8_t*>(raw_data_) + length_,\n+                                chunk_size);\n+        break;\n+      case 2:\n+        internal::DowncastUInts(values, reinterpret_cast<uint16_t*>(raw_data_) + length_,\n+                                chunk_size);\n+        break;\n+      case 4:\n+        internal::DowncastUInts(values, reinterpret_cast<uint32_t*>(raw_data_) + length_,\n+                                chunk_size);\n+        break;\n+      case 8:\n+        internal::DowncastUInts(values, reinterpret_cast<uint64_t*>(raw_data_) + length_,\n+                                chunk_size);\n+        break;\n       default:\n         DCHECK(false);\n     }\n-#ifdef _MSC_VER\n-#pragma warning(pop)\n-#endif\n+\n+    // This updates length_\n+    ArrayBuilder::UnsafeAppendToBitmap(valid_bytes, chunk_size);\n+    values += chunk_size;\n+    if (valid_bytes != nullptr) {\n+      valid_bytes += chunk_size;\n+    }\n+    length -= chunk_size;\n   }\n \n-  // length_ is update by these\n-  ArrayBuilder::UnsafeAppendToBitmap(valid_bytes, length);\n   return Status::OK();\n }\n \n+Status AdaptiveUIntBuilder::AppendValues(const uint64_t* values, int64_t length,\n+                                         const uint8_t* valid_bytes) {\n+  RETURN_NOT_OK(Reserve(length));\n+\n+  return AppendValuesInternal(values, length, valid_bytes);\n+}\n+\n template <typename new_type, typename old_type>\n typename std::enable_if<sizeof(old_type) >= sizeof(new_type), Status>::type\n AdaptiveUIntBuilder::ExpandIntSizeInternal() {\ndiff --git a/cpp/src/arrow/builder.h b/cpp/src/arrow/builder.h\nindex 183e7e9d9b..34cac55202 100644\n--- a/cpp/src/arrow/builder.h\n+++ b/cpp/src/arrow/builder.h\n@@ -432,6 +432,7 @@ class ARROW_EXPORT AdaptiveIntBuilderBase : public ArrayBuilder {\n \n   /// Write nulls as uint8_t* (0 value indicates null) into pre-allocated memory\n   Status AppendNulls(const uint8_t* valid_bytes, int64_t length) {\n+    ARROW_RETURN_NOT_OK(CommitPendingData());\n     ARROW_RETURN_NOT_OK(Reserve(length));\n     memset(data_->mutable_data() + length_ * int_size_, 0, int_size_ * length);\n     UnsafeAppendToBitmap(valid_bytes, length);\n@@ -439,9 +440,14 @@ class ARROW_EXPORT AdaptiveIntBuilderBase : public ArrayBuilder {\n   }\n \n   Status AppendNull() {\n-    ARROW_RETURN_NOT_OK(Reserve(1));\n-    memset(data_->mutable_data() + length_ * int_size_, 0, int_size_);\n-    UnsafeAppendToBitmap(false);\n+    pending_data_[pending_pos_] = 0;\n+    pending_valid_[pending_pos_] = 0;\n+    pending_has_nulls_ = true;\n+    ++pending_pos_;\n+\n+    if (ARROW_PREDICT_FALSE(pending_pos_ >= pending_size_)) {\n+      return CommitPendingData();\n+    }\n     return Status::OK();\n   }\n \n@@ -449,54 +455,18 @@ class ARROW_EXPORT AdaptiveIntBuilderBase : public ArrayBuilder {\n   Status Resize(int64_t capacity) override;\n \n  protected:\n+  virtual Status CommitPendingData() = 0;\n+\n   std::shared_ptr<ResizableBuffer> data_;\n   uint8_t* raw_data_;\n-\n   uint8_t int_size_;\n-};\n \n-// TODO investigate AdaptiveIntBuilder / AdaptiveUIntBuilder performance\n-\n-// Check if we would need to expand the underlying storage type\n-inline uint8_t ExpandedIntSize(int64_t val, uint8_t current_int_size) {\n-  if (current_int_size == 8 ||\n-      (current_int_size < 8 &&\n-       (val > static_cast<int64_t>(std::numeric_limits<int32_t>::max()) ||\n-        val < static_cast<int64_t>(std::numeric_limits<int32_t>::min())))) {\n-    return 8;\n-  } else if (current_int_size == 4 ||\n-             (current_int_size < 4 &&\n-              (val > static_cast<int64_t>(std::numeric_limits<int16_t>::max()) ||\n-               val < static_cast<int64_t>(std::numeric_limits<int16_t>::min())))) {\n-    return 4;\n-  } else if (current_int_size == 2 ||\n-             (current_int_size == 1 &&\n-              (val > static_cast<int64_t>(std::numeric_limits<int8_t>::max()) ||\n-               val < static_cast<int64_t>(std::numeric_limits<int8_t>::min())))) {\n-    return 2;\n-  } else {\n-    return 1;\n-  }\n-}\n-\n-// Check if we would need to expand the underlying storage type\n-inline uint8_t ExpandedUIntSize(uint64_t val, uint8_t current_int_size) {\n-  if (current_int_size == 8 ||\n-      (current_int_size < 8 &&\n-       (val > static_cast<uint64_t>(std::numeric_limits<uint32_t>::max())))) {\n-    return 8;\n-  } else if (current_int_size == 4 ||\n-             (current_int_size < 4 &&\n-              (val > static_cast<uint64_t>(std::numeric_limits<uint16_t>::max())))) {\n-    return 4;\n-  } else if (current_int_size == 2 ||\n-             (current_int_size == 1 &&\n-              (val > static_cast<uint64_t>(std::numeric_limits<uint8_t>::max())))) {\n-    return 2;\n-  } else {\n-    return 1;\n-  }\n-}\n+  static constexpr int32_t pending_size_ = 1024;\n+  uint8_t pending_valid_[pending_size_];\n+  uint64_t pending_data_[pending_size_];\n+  int32_t pending_pos_;\n+  bool pending_has_nulls_;\n+};\n \n }  // namespace internal\n \n@@ -509,29 +479,12 @@ class ARROW_EXPORT AdaptiveUIntBuilder : public internal::AdaptiveIntBuilderBase\n \n   /// Scalar append\n   Status Append(const uint64_t val) {\n-    ARROW_RETURN_NOT_OK(Reserve(1));\n-    BitUtil::SetBit(null_bitmap_data_, length_);\n+    pending_data_[pending_pos_] = val;\n+    pending_valid_[pending_pos_] = 1;\n+    ++pending_pos_;\n \n-    uint8_t new_int_size = internal::ExpandedUIntSize(val, int_size_);\n-    if (new_int_size != int_size_) {\n-      ARROW_RETURN_NOT_OK(ExpandIntSize(new_int_size));\n-    }\n-\n-    switch (int_size_) {\n-      case 1:\n-        reinterpret_cast<uint8_t*>(raw_data_)[length_++] = static_cast<uint8_t>(val);\n-        break;\n-      case 2:\n-        reinterpret_cast<uint16_t*>(raw_data_)[length_++] = static_cast<uint16_t>(val);\n-        break;\n-      case 4:\n-        reinterpret_cast<uint32_t*>(raw_data_)[length_++] = static_cast<uint32_t>(val);\n-        break;\n-      case 8:\n-        reinterpret_cast<uint64_t*>(raw_data_)[length_++] = val;\n-        break;\n-      default:\n-        return Status::NotImplemented(\"This code shall never be reached\");\n+    if (ARROW_PREDICT_FALSE(pending_pos_ >= pending_size_)) {\n+      return CommitPendingData();\n     }\n     return Status::OK();\n   }\n@@ -548,8 +501,12 @@ class ARROW_EXPORT AdaptiveUIntBuilder : public internal::AdaptiveIntBuilderBase\n   Status FinishInternal(std::shared_ptr<ArrayData>* out) override;\n \n  protected:\n+  Status CommitPendingData() override;\n   Status ExpandIntSize(uint8_t new_int_size);\n \n+  Status AppendValuesInternal(const uint64_t* values, int64_t length,\n+                              const uint8_t* valid_bytes);\n+\n   template <typename new_type, typename old_type>\n   typename std::enable_if<sizeof(old_type) >= sizeof(new_type), Status>::type\n   ExpandIntSizeInternal();\n@@ -572,29 +529,14 @@ class ARROW_EXPORT AdaptiveIntBuilder : public internal::AdaptiveIntBuilderBase\n \n   /// Scalar append\n   Status Append(const int64_t val) {\n-    ARROW_RETURN_NOT_OK(Reserve(1));\n-    BitUtil::SetBit(null_bitmap_data_, length_);\n+    auto v = static_cast<uint64_t>(val);\n \n-    uint8_t new_int_size = internal::ExpandedIntSize(val, int_size_);\n-    if (new_int_size != int_size_) {\n-      ARROW_RETURN_NOT_OK(ExpandIntSize(new_int_size));\n-    }\n+    pending_data_[pending_pos_] = v;\n+    pending_valid_[pending_pos_] = 1;\n+    ++pending_pos_;\n \n-    switch (int_size_) {\n-      case 1:\n-        reinterpret_cast<int8_t*>(raw_data_)[length_++] = static_cast<int8_t>(val);\n-        break;\n-      case 2:\n-        reinterpret_cast<int16_t*>(raw_data_)[length_++] = static_cast<int16_t>(val);\n-        break;\n-      case 4:\n-        reinterpret_cast<int32_t*>(raw_data_)[length_++] = static_cast<int32_t>(val);\n-        break;\n-      case 8:\n-        reinterpret_cast<int64_t*>(raw_data_)[length_++] = val;\n-        break;\n-      default:\n-        return Status::NotImplemented(\"This code shall never be reached\");\n+    if (ARROW_PREDICT_FALSE(pending_pos_ >= pending_size_)) {\n+      return CommitPendingData();\n     }\n     return Status::OK();\n   }\n@@ -611,8 +553,12 @@ class ARROW_EXPORT AdaptiveIntBuilder : public internal::AdaptiveIntBuilderBase\n   Status FinishInternal(std::shared_ptr<ArrayData>* out) override;\n \n  protected:\n+  Status CommitPendingData() override;\n   Status ExpandIntSize(uint8_t new_int_size);\n \n+  Status AppendValuesInternal(const int64_t* values, int64_t length,\n+                              const uint8_t* valid_bytes);\n+\n   template <typename new_type, typename old_type>\n   typename std::enable_if<sizeof(old_type) >= sizeof(new_type), Status>::type\n   ExpandIntSizeInternal();\ndiff --git a/cpp/src/arrow/util/CMakeLists.txt b/cpp/src/arrow/util/CMakeLists.txt\nindex d785eeeaae..6b9c3590b4 100644\n--- a/cpp/src/arrow/util/CMakeLists.txt\n+++ b/cpp/src/arrow/util/CMakeLists.txt\n@@ -91,6 +91,7 @@ ADD_ARROW_TEST(checked-cast-test)\n ADD_ARROW_TEST(compression-test)\n ADD_ARROW_TEST(decimal-test)\n ADD_ARROW_TEST(hashing-test)\n+ADD_ARROW_TEST(int-util-test)\n ADD_ARROW_TEST(key-value-metadata-test)\n ADD_ARROW_TEST(lazy-test)\n ADD_ARROW_TEST(logging-test)\n@@ -105,6 +106,7 @@ ADD_ARROW_BENCHMARK(bit-util-benchmark)\n ADD_ARROW_BENCHMARK(compression-benchmark)\n ADD_ARROW_BENCHMARK(decimal-benchmark)\n ADD_ARROW_BENCHMARK(hashing-benchmark)\n+ADD_ARROW_BENCHMARK(int-util-benchmark)\n ADD_ARROW_BENCHMARK(lazy-benchmark)\n ADD_ARROW_BENCHMARK(number-parsing-benchmark)\n ADD_ARROW_BENCHMARK(utf8-util-benchmark)\ndiff --git a/cpp/src/arrow/util/int-util-benchmark.cc b/cpp/src/arrow/util/int-util-benchmark.cc\nnew file mode 100644\nindex 0000000000..3feb2eeafe\n--- /dev/null\n+++ b/cpp/src/arrow/util/int-util-benchmark.cc\n@@ -0,0 +1,109 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include <cstdint>\n+#include <vector>\n+\n+#include \"arrow/util/int-util.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+std::vector<uint64_t> GetUIntSequence(int n_values, uint64_t addend = 0) {\n+  std::vector<uint64_t> values(n_values);\n+  for (int i = 0; i < n_values; ++i) {\n+    values[i] = static_cast<uint64_t>(i) + addend;\n+  }\n+  return values;\n+}\n+\n+std::vector<int64_t> GetIntSequence(int n_values, uint64_t addend = 0) {\n+  std::vector<int64_t> values(n_values);\n+  for (int i = 0; i < n_values; ++i) {\n+    values[i] = static_cast<int64_t>(i) + addend;\n+  }\n+  return values;\n+}\n+\n+std::vector<uint8_t> GetValidBytes(int n_values) {\n+  std::vector<uint8_t> valid_bytes(n_values);\n+  for (int i = 0; i < n_values; ++i) {\n+    valid_bytes[i] = (i % 3 == 0) ? 1 : 0;\n+  }\n+  return valid_bytes;\n+}\n+\n+static void BM_DetectUIntWidthNoNulls(\n+    benchmark::State& state) {  // NOLINT non-const reference\n+  const auto values = GetUIntSequence(0x12345);\n+\n+  while (state.KeepRunning()) {\n+    auto result = DetectUIntWidth(values.data(), static_cast<int64_t>(values.size()));\n+    benchmark::DoNotOptimize(result);\n+  }\n+  state.SetBytesProcessed(state.iterations() * values.size() * sizeof(uint64_t));\n+}\n+\n+static void BM_DetectUIntWidthNulls(\n+    benchmark::State& state) {  // NOLINT non-const reference\n+  const auto values = GetUIntSequence(0x12345);\n+  const auto valid_bytes = GetValidBytes(0x12345);\n+\n+  while (state.KeepRunning()) {\n+    auto result = DetectUIntWidth(values.data(), valid_bytes.data(),\n+                                  static_cast<int64_t>(values.size()));\n+    benchmark::DoNotOptimize(result);\n+  }\n+  state.SetBytesProcessed(state.iterations() * values.size() * sizeof(uint64_t));\n+}\n+\n+static void BM_DetectIntWidthNoNulls(\n+    benchmark::State& state) {  // NOLINT non-const reference\n+  const auto values = GetIntSequence(0x12345, -0x1234);\n+\n+  while (state.KeepRunning()) {\n+    auto result = DetectIntWidth(values.data(), static_cast<int64_t>(values.size()));\n+    benchmark::DoNotOptimize(result);\n+  }\n+  state.SetBytesProcessed(state.iterations() * values.size() * sizeof(uint64_t));\n+}\n+\n+static void BM_DetectIntWidthNulls(\n+    benchmark::State& state) {  // NOLINT non-const reference\n+  const auto values = GetIntSequence(0x12345, -0x1234);\n+  const auto valid_bytes = GetValidBytes(0x12345);\n+\n+  while (state.KeepRunning()) {\n+    auto result = DetectIntWidth(values.data(), valid_bytes.data(),\n+                                 static_cast<int64_t>(values.size()));\n+    benchmark::DoNotOptimize(result);\n+  }\n+  state.SetBytesProcessed(state.iterations() * values.size() * sizeof(uint64_t));\n+}\n+\n+BENCHMARK(BM_DetectUIntWidthNoNulls)->MinTime(1.0)->Unit(benchmark::kMicrosecond);\n+\n+BENCHMARK(BM_DetectUIntWidthNulls)->MinTime(1.0)->Unit(benchmark::kMicrosecond);\n+\n+BENCHMARK(BM_DetectIntWidthNoNulls)->MinTime(1.0)->Unit(benchmark::kMicrosecond);\n+\n+BENCHMARK(BM_DetectIntWidthNulls)->MinTime(1.0)->Unit(benchmark::kMicrosecond);\n+\n+}  // namespace internal\n+}  // namespace arrow\ndiff --git a/cpp/src/arrow/util/int-util-test.cc b/cpp/src/arrow/util/int-util-test.cc\nnew file mode 100644\nindex 0000000000..51fd96e4ea\n--- /dev/null\n+++ b/cpp/src/arrow/util/int-util-test.cc\n@@ -0,0 +1,379 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <memory>\n+#include <random>\n+#include <utility>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/test-util.h\"\n+#include \"arrow/util/int-util.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+static std::vector<uint8_t> all_widths = {1, 2, 4, 8};\n+\n+template <typename T>\n+void CheckUIntWidth(const std::vector<T>& values, uint8_t expected_width) {\n+  for (const uint8_t min_width : all_widths) {\n+    uint8_t width =\n+        DetectUIntWidth(values.data(), static_cast<int64_t>(values.size()), min_width);\n+    ASSERT_EQ(width, std::max(min_width, expected_width));\n+    width = DetectUIntWidth(values.data(), nullptr, static_cast<int64_t>(values.size()),\n+                            min_width);\n+    ASSERT_EQ(width, std::max(min_width, expected_width));\n+  }\n+}\n+\n+template <typename T>\n+void CheckUIntWidth(const std::vector<T>& values, const std::vector<uint8_t>& valid_bytes,\n+                    uint8_t expected_width) {\n+  for (const uint8_t min_width : all_widths) {\n+    uint8_t width = DetectUIntWidth(values.data(), valid_bytes.data(),\n+                                    static_cast<int64_t>(values.size()), min_width);\n+    ASSERT_EQ(width, std::max(min_width, expected_width));\n+  }\n+}\n+\n+template <typename T>\n+void CheckIntWidth(const std::vector<T>& values, uint8_t expected_width) {\n+  for (const uint8_t min_width : all_widths) {\n+    uint8_t width =\n+        DetectIntWidth(values.data(), static_cast<int64_t>(values.size()), min_width);\n+    ASSERT_EQ(width, std::max(min_width, expected_width));\n+    width = DetectIntWidth(values.data(), nullptr, static_cast<int64_t>(values.size()),\n+                           min_width);\n+    ASSERT_EQ(width, std::max(min_width, expected_width));\n+  }\n+}\n+\n+template <typename T>\n+void CheckIntWidth(const std::vector<T>& values, const std::vector<uint8_t>& valid_bytes,\n+                   uint8_t expected_width) {\n+  for (const uint8_t min_width : all_widths) {\n+    uint8_t width = DetectIntWidth(values.data(), valid_bytes.data(),\n+                                   static_cast<int64_t>(values.size()), min_width);\n+    ASSERT_EQ(width, std::max(min_width, expected_width));\n+  }\n+}\n+\n+template <typename T>\n+std::vector<T> MakeRandomVector(const std::vector<T>& base_values, int n_values) {\n+  std::default_random_engine gen(42);\n+  std::uniform_int_distribution<int> index_dist(0,\n+                                                static_cast<int>(base_values.size() - 1));\n+\n+  std::vector<T> values(n_values);\n+  for (int i = 0; i < n_values; ++i) {\n+    values[i] = base_values[index_dist(gen)];\n+  }\n+  return values;\n+}\n+\n+template <typename T>\n+std::vector<std::pair<std::vector<T>, std::vector<uint8_t>>> AlmostAllNullValues(\n+    int n_values, T null_value, T non_null_value) {\n+  std::vector<std::pair<std::vector<T>, std::vector<uint8_t>>> vectors;\n+  vectors.reserve(n_values);\n+  for (int i = 0; i < n_values; ++i) {\n+    std::vector<T> values(n_values, null_value);\n+    std::vector<uint8_t> valid_bytes(n_values, 0);\n+    values[i] = non_null_value;\n+    valid_bytes[i] = 1;\n+    vectors.push_back({std::move(values), std::move(valid_bytes)});\n+  }\n+  return vectors;\n+}\n+\n+template <typename T>\n+std::vector<std::vector<T>> AlmostAllZeros(int n_values, T nonzero_value) {\n+  std::vector<std::vector<T>> vectors;\n+  vectors.reserve(n_values);\n+  for (int i = 0; i < n_values; ++i) {\n+    std::vector<T> values(n_values, 0);\n+    values[i] = nonzero_value;\n+    vectors.push_back(std::move(values));\n+  }\n+  return vectors;\n+}\n+\n+std::vector<uint64_t> valid_uint8 = {0, 0x7f, 0xff};\n+std::vector<uint64_t> valid_uint16 = {0, 0x7f, 0xff, 0x1000, 0xffff};\n+std::vector<uint64_t> valid_uint32 = {0, 0x7f, 0xff, 0x10000, 0xffffffffULL};\n+std::vector<uint64_t> valid_uint64 = {0, 0x100000000ULL, 0xffffffffffffffffULL};\n+\n+TEST(UIntWidth, NoNulls) {\n+  std::vector<uint64_t> values{0, 0x7f, 0xff};\n+  CheckUIntWidth(values, 1);\n+\n+  values = {0, 0x100};\n+  CheckUIntWidth(values, 2);\n+\n+  values = {0, 0xffff};\n+  CheckUIntWidth(values, 2);\n+\n+  values = {0, 0x10000};\n+  CheckUIntWidth(values, 4);\n+\n+  values = {0, 0xffffffffULL};\n+  CheckUIntWidth(values, 4);\n+\n+  values = {0, 0x100000000ULL};\n+  CheckUIntWidth(values, 8);\n+\n+  values = {0, 0xffffffffffffffffULL};\n+  CheckUIntWidth(values, 8);\n+}\n+\n+TEST(UIntWidth, Nulls) {\n+  std::vector<uint8_t> valid10{true, false};\n+  std::vector<uint8_t> valid01{false, true};\n+\n+  std::vector<uint64_t> values{0, 0xff};\n+  CheckUIntWidth(values, valid01, 1);\n+  CheckUIntWidth(values, valid10, 1);\n+\n+  values = {0, 0x100};\n+  CheckUIntWidth(values, valid01, 2);\n+  CheckUIntWidth(values, valid10, 1);\n+\n+  values = {0, 0xffff};\n+  CheckUIntWidth(values, valid01, 2);\n+  CheckUIntWidth(values, valid10, 1);\n+\n+  values = {0, 0x10000};\n+  CheckUIntWidth(values, valid01, 4);\n+  CheckUIntWidth(values, valid10, 1);\n+\n+  values = {0, 0xffffffffULL};\n+  CheckUIntWidth(values, valid01, 4);\n+  CheckUIntWidth(values, valid10, 1);\n+\n+  values = {0, 0x100000000ULL};\n+  CheckUIntWidth(values, valid01, 8);\n+  CheckUIntWidth(values, valid10, 1);\n+\n+  values = {0, 0xffffffffffffffffULL};\n+  CheckUIntWidth(values, valid01, 8);\n+  CheckUIntWidth(values, valid10, 1);\n+}\n+\n+TEST(UIntWidth, NoNullsMany) {\n+  constexpr int N = 40;\n+  for (const auto& values : AlmostAllZeros<uint64_t>(N, 0xff)) {\n+    CheckUIntWidth(values, 1);\n+  }\n+  for (const auto& values : AlmostAllZeros<uint64_t>(N, 0xffff)) {\n+    CheckUIntWidth(values, 2);\n+  }\n+  for (const auto& values : AlmostAllZeros<uint64_t>(N, 0xffffffffULL)) {\n+    CheckUIntWidth(values, 4);\n+  }\n+  for (const auto& values : AlmostAllZeros<uint64_t>(N, 0xffffffffffffffffULL)) {\n+    CheckUIntWidth(values, 8);\n+  }\n+  auto values = MakeRandomVector(valid_uint8, N);\n+  CheckUIntWidth(values, 1);\n+\n+  values = MakeRandomVector(valid_uint16, N);\n+  CheckUIntWidth(values, 2);\n+\n+  values = MakeRandomVector(valid_uint32, N);\n+  CheckUIntWidth(values, 4);\n+\n+  values = MakeRandomVector(valid_uint64, N);\n+  CheckUIntWidth(values, 8);\n+}\n+\n+TEST(UIntWidth, NullsMany) {\n+  constexpr uint64_t huge = 0x123456789abcdefULL;\n+  constexpr int N = 40;\n+  for (const auto& p : AlmostAllNullValues<uint64_t>(N, 0, 0xff)) {\n+    CheckUIntWidth(p.first, p.second, 1);\n+  }\n+  for (const auto& p : AlmostAllNullValues<uint64_t>(N, huge, 0xff)) {\n+    CheckUIntWidth(p.first, p.second, 1);\n+  }\n+  for (const auto& p : AlmostAllNullValues<uint64_t>(N, 0, 0xffff)) {\n+    CheckUIntWidth(p.first, p.second, 2);\n+  }\n+  for (const auto& p : AlmostAllNullValues<uint64_t>(N, huge, 0xffff)) {\n+    CheckUIntWidth(p.first, p.second, 2);\n+  }\n+  for (const auto& p : AlmostAllNullValues<uint64_t>(N, 0, 0xffffffffULL)) {\n+    CheckUIntWidth(p.first, p.second, 4);\n+  }\n+  for (const auto& p : AlmostAllNullValues<uint64_t>(N, huge, 0xffffffffULL)) {\n+    CheckUIntWidth(p.first, p.second, 4);\n+  }\n+  for (const auto& p : AlmostAllNullValues<uint64_t>(N, 0, 0xffffffffffffffffULL)) {\n+    CheckUIntWidth(p.first, p.second, 8);\n+  }\n+  for (const auto& p : AlmostAllNullValues<uint64_t>(N, huge, 0xffffffffffffffffULL)) {\n+    CheckUIntWidth(p.first, p.second, 8);\n+  }\n+}\n+\n+TEST(IntWidth, NoNulls) {\n+  std::vector<int64_t> values{0, 0x7f, -0x80};\n+  CheckIntWidth(values, 1);\n+\n+  values = {0, 0x80};\n+  CheckIntWidth(values, 2);\n+\n+  values = {0, -0x81};\n+  CheckIntWidth(values, 2);\n+\n+  values = {0, 0x7fff, -0x8000};\n+  CheckIntWidth(values, 2);\n+\n+  values = {0, 0x8000};\n+  CheckIntWidth(values, 4);\n+\n+  values = {0, -0x8001};\n+  CheckIntWidth(values, 4);\n+\n+  values = {0, 0x7fffffffLL, -0x80000000LL};\n+  CheckIntWidth(values, 4);\n+\n+  values = {0, 0x80000000LL};\n+  CheckIntWidth(values, 8);\n+\n+  values = {0, -0x80000001LL};\n+  CheckIntWidth(values, 8);\n+\n+  values = {0, 0x7fffffffffffffffLL, -0x7fffffffffffffffLL - 1};\n+  CheckIntWidth(values, 8);\n+}\n+\n+TEST(IntWidth, Nulls) {\n+  std::vector<uint8_t> valid100{true, false, false};\n+  std::vector<uint8_t> valid010{false, true, false};\n+  std::vector<uint8_t> valid001{false, false, true};\n+\n+  std::vector<int64_t> values{0, 0x7f, -0x80};\n+  CheckIntWidth(values, valid100, 1);\n+  CheckIntWidth(values, valid010, 1);\n+  CheckIntWidth(values, valid001, 1);\n+\n+  values = {0, 0x80, -0x81};\n+  CheckIntWidth(values, valid100, 1);\n+  CheckIntWidth(values, valid010, 2);\n+  CheckIntWidth(values, valid001, 2);\n+\n+  values = {0, 0x7fff, -0x8000};\n+  CheckIntWidth(values, valid100, 1);\n+  CheckIntWidth(values, valid010, 2);\n+  CheckIntWidth(values, valid001, 2);\n+\n+  values = {0, 0x8000, -0x8001};\n+  CheckIntWidth(values, valid100, 1);\n+  CheckIntWidth(values, valid010, 4);\n+  CheckIntWidth(values, valid001, 4);\n+\n+  values = {0, 0x7fffffffLL, -0x80000000LL};\n+  CheckIntWidth(values, valid100, 1);\n+  CheckIntWidth(values, valid010, 4);\n+  CheckIntWidth(values, valid001, 4);\n+\n+  values = {0, 0x80000000LL, -0x80000001LL};\n+  CheckIntWidth(values, valid100, 1);\n+  CheckIntWidth(values, valid010, 8);\n+  CheckIntWidth(values, valid001, 8);\n+\n+  values = {0, 0x7fffffffffffffffLL, -0x7fffffffffffffffLL - 1};\n+  CheckIntWidth(values, valid100, 1);\n+  CheckIntWidth(values, valid010, 8);\n+  CheckIntWidth(values, valid001, 8);\n+}\n+\n+TEST(IntWidth, NoNullsMany) {\n+  constexpr int N = 40;\n+  // 1 byte wide\n+  for (const int64_t value : {0x7f, -0x80}) {\n+    for (const auto& values : AlmostAllZeros<int64_t>(N, value)) {\n+      CheckIntWidth(values, 1);\n+    }\n+  }\n+  // 2 bytes wide\n+  for (const int64_t value : {0x80, -0x81, 0x7fff, -0x8000}) {\n+    for (const auto& values : AlmostAllZeros<int64_t>(N, value)) {\n+      CheckIntWidth(values, 2);\n+    }\n+  }\n+  // 4 bytes wide\n+  for (const int64_t value : {0x8000LL, -0x8001LL, 0x7fffffffLL, -0x80000000LL}) {\n+    for (const auto& values : AlmostAllZeros<int64_t>(N, value)) {\n+      CheckIntWidth(values, 4);\n+    }\n+  }\n+  // 8 bytes wide\n+  for (const int64_t value : {0x80000000LL, -0x80000001LL, 0x7fffffffffffffffLL}) {\n+    for (const auto& values : AlmostAllZeros<int64_t>(N, value)) {\n+      CheckIntWidth(values, 8);\n+    }\n+  }\n+}\n+\n+TEST(IntWidth, NullsMany) {\n+  constexpr int64_t huge = 0x123456789abcdefLL;\n+  constexpr int N = 40;\n+  // 1 byte wide\n+  for (const int64_t value : {0x7f, -0x80}) {\n+    for (const auto& p : AlmostAllNullValues<int64_t>(N, 0, value)) {\n+      CheckIntWidth(p.first, p.second, 1);\n+    }\n+    for (const auto& p : AlmostAllNullValues<int64_t>(N, huge, value)) {\n+      CheckIntWidth(p.first, p.second, 1);\n+    }\n+  }\n+  // 2 bytes wide\n+  for (const int64_t value : {0x80, -0x81, 0x7fff, -0x8000}) {\n+    for (const auto& p : AlmostAllNullValues<int64_t>(N, 0, value)) {\n+      CheckIntWidth(p.first, p.second, 2);\n+    }\n+    for (const auto& p : AlmostAllNullValues<int64_t>(N, huge, value)) {\n+      CheckIntWidth(p.first, p.second, 2);\n+    }\n+  }\n+  // 4 bytes wide\n+  for (const int64_t value : {0x8000LL, -0x8001LL, 0x7fffffffLL, -0x80000000LL}) {\n+    for (const auto& p : AlmostAllNullValues<int64_t>(N, 0, value)) {\n+      CheckIntWidth(p.first, p.second, 4);\n+    }\n+    for (const auto& p : AlmostAllNullValues<int64_t>(N, huge, value)) {\n+      CheckIntWidth(p.first, p.second, 4);\n+    }\n+  }\n+  // 8 bytes wide\n+  for (const int64_t value : {0x80000000LL, -0x80000001LL, 0x7fffffffffffffffLL}) {\n+    for (const auto& p : AlmostAllNullValues<int64_t>(N, 0, value)) {\n+      CheckIntWidth(p.first, p.second, 8);\n+    }\n+    for (const auto& p : AlmostAllNullValues<int64_t>(N, huge, value)) {\n+      CheckIntWidth(p.first, p.second, 8);\n+    }\n+  }\n+}\n+\n+}  // namespace internal\n+}  // namespace arrow\ndiff --git a/cpp/src/arrow/util/int-util.cc b/cpp/src/arrow/util/int-util.cc\nnew file mode 100644\nindex 0000000000..ced1cd1c20\n--- /dev/null\n+++ b/cpp/src/arrow/util/int-util.cc\n@@ -0,0 +1,406 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/int-util.h\"\n+\n+#include <algorithm>\n+#include <cstring>\n+#include <limits>\n+\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+static constexpr uint64_t max_uint8 =\n+    static_cast<uint64_t>(std::numeric_limits<uint8_t>::max());\n+static constexpr uint64_t max_uint16 =\n+    static_cast<uint64_t>(std::numeric_limits<uint16_t>::max());\n+static constexpr uint64_t max_uint32 =\n+    static_cast<uint64_t>(std::numeric_limits<uint32_t>::max());\n+static constexpr uint64_t max_uint64 = std::numeric_limits<uint64_t>::max();\n+\n+static constexpr uint64_t mask_uint8 = ~0xffULL;\n+static constexpr uint64_t mask_uint16 = ~0xffffULL;\n+static constexpr uint64_t mask_uint32 = ~0xffffffffULL;\n+\n+//\n+// Unsigned integer width detection\n+//\n+\n+static const uint64_t max_uints[] = {0, max_uint8, max_uint16, 0,         max_uint32,\n+                                     0, 0,         0,          max_uint64};\n+\n+// Check if we would need to expand the underlying storage type\n+inline uint8_t ExpandedUIntWidth(uint64_t val, uint8_t current_width) {\n+  // Optimize for the common case where width doesn't change\n+  if (ARROW_PREDICT_TRUE(val <= max_uints[current_width])) {\n+    return current_width;\n+  }\n+  if (current_width == 1 && val <= max_uint8) {\n+    return 1;\n+  } else if (current_width <= 2 && val <= max_uint16) {\n+    return 2;\n+  } else if (current_width <= 4 && val <= max_uint32) {\n+    return 4;\n+  } else {\n+    return 8;\n+  }\n+}\n+\n+uint8_t DetectUIntWidth(const uint64_t* values, int64_t length, uint8_t min_width) {\n+  uint8_t width = min_width;\n+  if (min_width < 8) {\n+    auto p = values;\n+    const auto end = p + length;\n+    while (p <= end - 16) {\n+      // This is probably SIMD-izable\n+      auto u = p[0];\n+      auto v = p[1];\n+      auto w = p[2];\n+      auto x = p[3];\n+      u |= p[4];\n+      v |= p[5];\n+      w |= p[6];\n+      x |= p[7];\n+      u |= p[8];\n+      v |= p[9];\n+      w |= p[10];\n+      x |= p[11];\n+      u |= p[12];\n+      v |= p[13];\n+      w |= p[14];\n+      x |= p[15];\n+      p += 16;\n+      width = ExpandedUIntWidth(u | v | w | x, width);\n+      if (ARROW_PREDICT_FALSE(width == 8)) {\n+        break;\n+      }\n+    }\n+    if (p <= end - 8) {\n+      auto u = p[0];\n+      auto v = p[1];\n+      auto w = p[2];\n+      auto x = p[3];\n+      u |= p[4];\n+      v |= p[5];\n+      w |= p[6];\n+      x |= p[7];\n+      p += 8;\n+      width = ExpandedUIntWidth(u | v | w | x, width);\n+    }\n+    while (p < end) {\n+      width = ExpandedUIntWidth(*p++, width);\n+    }\n+  }\n+  return width;\n+}\n+\n+uint8_t DetectUIntWidth(const uint64_t* values, const uint8_t* valid_bytes,\n+                        int64_t length, uint8_t min_width) {\n+  if (valid_bytes == nullptr) {\n+    return DetectUIntWidth(values, length, min_width);\n+  }\n+  uint8_t width = min_width;\n+  if (min_width < 8) {\n+    auto p = values;\n+    const auto end = p + length;\n+    auto b = valid_bytes;\n+\n+#define MASK(p, b, i) p[i] * (b[i] != 0)\n+\n+    while (p <= end - 8) {\n+      // This is probably be SIMD-izable\n+      auto u = MASK(p, b, 0);\n+      auto v = MASK(p, b, 1);\n+      auto w = MASK(p, b, 2);\n+      auto x = MASK(p, b, 3);\n+      u |= MASK(p, b, 4);\n+      v |= MASK(p, b, 5);\n+      w |= MASK(p, b, 6);\n+      x |= MASK(p, b, 7);\n+      b += 8;\n+      p += 8;\n+      width = ExpandedUIntWidth(u | v | w | x, width);\n+      if (ARROW_PREDICT_FALSE(width == 8)) {\n+        break;\n+      }\n+    }\n+    uint64_t mask = 0;\n+    while (p < end) {\n+      mask |= MASK(p, b, 0);\n+      ++b;\n+      ++p;\n+    }\n+    width = ExpandedUIntWidth(mask, width);\n+\n+#undef MASK\n+  }\n+  return width;\n+}\n+\n+//\n+// Signed integer width detection\n+//\n+\n+uint8_t DetectIntWidth(const int64_t* values, int64_t length, uint8_t min_width) {\n+  if (min_width == 8) {\n+    return min_width;\n+  }\n+  uint8_t width = min_width;\n+\n+  auto p = values;\n+  const auto end = p + length;\n+  // Strategy: to determine whether `x` is between -0x80 and 0x7f,\n+  // we determine whether `x + 0x80` is between 0x00 and 0xff.  The\n+  // latter can be done with a simple AND mask with ~0xff and, more\n+  // importantly, can be computed in a single step over multiple ORed\n+  // values (so we can branch once every N items instead of once every item).\n+  // This strategy could probably lend itself to explicit SIMD-ization,\n+  // if more performance is needed.\n+  constexpr uint64_t addend8 = 0x80ULL;\n+  constexpr uint64_t addend16 = 0x8000ULL;\n+  constexpr uint64_t addend32 = 0x80000000ULL;\n+\n+  auto test_one_item = [&](uint64_t addend, uint64_t test_mask) -> bool {\n+    auto v = *p++;\n+    if (ARROW_PREDICT_FALSE(((v + addend) & test_mask) != 0)) {\n+      --p;\n+      return false;\n+    } else {\n+      return true;\n+    }\n+  };\n+\n+  auto test_four_items = [&](uint64_t addend, uint64_t test_mask) -> bool {\n+    auto mask = (p[0] + addend) | (p[1] + addend) | (p[2] + addend) | (p[3] + addend);\n+    p += 4;\n+    if (ARROW_PREDICT_FALSE((mask & test_mask) != 0)) {\n+      p -= 4;\n+      return false;\n+    } else {\n+      return true;\n+    }\n+  };\n+\n+  if (width == 1) {\n+    while (p <= end - 4) {\n+      if (!test_four_items(addend8, mask_uint8)) {\n+        width = 2;\n+        goto width2;\n+      }\n+    }\n+    while (p < end) {\n+      if (!test_one_item(addend8, mask_uint8)) {\n+        width = 2;\n+        goto width2;\n+      }\n+    }\n+    return 1;\n+  }\n+width2:\n+  if (width == 2) {\n+    while (p <= end - 4) {\n+      if (!test_four_items(addend16, mask_uint16)) {\n+        width = 4;\n+        goto width4;\n+      }\n+    }\n+    while (p < end) {\n+      if (!test_one_item(addend16, mask_uint16)) {\n+        width = 4;\n+        goto width4;\n+      }\n+    }\n+    return 2;\n+  }\n+width4:\n+  if (width == 4) {\n+    while (p <= end - 4) {\n+      if (!test_four_items(addend32, mask_uint32)) {\n+        width = 8;\n+        goto width8;\n+      }\n+    }\n+    while (p < end) {\n+      if (!test_one_item(addend32, mask_uint32)) {\n+        width = 8;\n+        goto width8;\n+      }\n+    }\n+    return 4;\n+  }\n+width8:\n+  return 8;\n+}\n+\n+uint8_t DetectIntWidth(const int64_t* values, const uint8_t* valid_bytes, int64_t length,\n+                       uint8_t min_width) {\n+  if (valid_bytes == nullptr) {\n+    return DetectIntWidth(values, length, min_width);\n+  }\n+\n+  if (min_width == 8) {\n+    return min_width;\n+  }\n+  uint8_t width = min_width;\n+\n+  auto p = values;\n+  const auto end = p + length;\n+  auto b = valid_bytes;\n+  // Strategy is similar to the no-nulls case above, but we also\n+  // have to zero any incoming items that have a zero validity byte.\n+  constexpr uint64_t addend8 = 0x80ULL;\n+  constexpr uint64_t addend16 = 0x8000ULL;\n+  constexpr uint64_t addend32 = 0x80000000ULL;\n+\n+#define MASK(p, b, addend, i) (p[i] + addend) * (b[i] != 0)\n+\n+  auto test_one_item = [&](uint64_t addend, uint64_t test_mask) -> bool {\n+    auto v = MASK(p, b, addend, 0);\n+    ++b;\n+    ++p;\n+    if (ARROW_PREDICT_FALSE((v & test_mask) != 0)) {\n+      --b;\n+      --p;\n+      return false;\n+    } else {\n+      return true;\n+    }\n+  };\n+\n+  auto test_eight_items = [&](uint64_t addend, uint64_t test_mask) -> bool {\n+    auto mask1 = MASK(p, b, addend, 0) | MASK(p, b, addend, 1) | MASK(p, b, addend, 2) |\n+                 MASK(p, b, addend, 3);\n+    auto mask2 = MASK(p, b, addend, 4) | MASK(p, b, addend, 5) | MASK(p, b, addend, 6) |\n+                 MASK(p, b, addend, 7);\n+    b += 8;\n+    p += 8;\n+    if (ARROW_PREDICT_FALSE(((mask1 | mask2) & test_mask) != 0)) {\n+      b -= 8;\n+      p -= 8;\n+      return false;\n+    } else {\n+      return true;\n+    }\n+  };\n+\n+#undef MASK\n+\n+  if (width == 1) {\n+    while (p <= end - 8) {\n+      if (!test_eight_items(addend8, mask_uint8)) {\n+        width = 2;\n+        goto width2;\n+      }\n+    }\n+    while (p < end) {\n+      if (!test_one_item(addend8, mask_uint8)) {\n+        width = 2;\n+        goto width2;\n+      }\n+    }\n+    return 1;\n+  }\n+width2:\n+  if (width == 2) {\n+    while (p <= end - 8) {\n+      if (!test_eight_items(addend16, mask_uint16)) {\n+        width = 4;\n+        goto width4;\n+      }\n+    }\n+    while (p < end) {\n+      if (!test_one_item(addend16, mask_uint16)) {\n+        width = 4;\n+        goto width4;\n+      }\n+    }\n+    return 2;\n+  }\n+width4:\n+  if (width == 4) {\n+    while (p <= end - 8) {\n+      if (!test_eight_items(addend32, mask_uint32)) {\n+        width = 8;\n+        goto width8;\n+      }\n+    }\n+    while (p < end) {\n+      if (!test_one_item(addend32, mask_uint32)) {\n+        width = 8;\n+        goto width8;\n+      }\n+    }\n+    return 4;\n+  }\n+width8:\n+  return 8;\n+}\n+\n+template <typename Source, typename Dest>\n+inline void DowncastIntsInternal(const Source* src, Dest* dest, int64_t length) {\n+  while (length >= 4) {\n+    dest[0] = static_cast<Dest>(src[0]);\n+    dest[1] = static_cast<Dest>(src[1]);\n+    dest[2] = static_cast<Dest>(src[2]);\n+    dest[3] = static_cast<Dest>(src[3]);\n+    length -= 4;\n+    src += 4;\n+    dest += 4;\n+  }\n+  while (length > 0) {\n+    *dest++ = static_cast<Dest>(*src++);\n+    --length;\n+  }\n+}\n+\n+void DowncastInts(const int64_t* source, int8_t* dest, int64_t length) {\n+  DowncastIntsInternal(source, dest, length);\n+}\n+\n+void DowncastInts(const int64_t* source, int16_t* dest, int64_t length) {\n+  DowncastIntsInternal(source, dest, length);\n+}\n+\n+void DowncastInts(const int64_t* source, int32_t* dest, int64_t length) {\n+  DowncastIntsInternal(source, dest, length);\n+}\n+\n+void DowncastInts(const int64_t* source, int64_t* dest, int64_t length) {\n+  memcpy(dest, source, length * sizeof(int64_t));\n+}\n+\n+void DowncastUInts(const uint64_t* source, uint8_t* dest, int64_t length) {\n+  DowncastIntsInternal(source, dest, length);\n+}\n+\n+void DowncastUInts(const uint64_t* source, uint16_t* dest, int64_t length) {\n+  DowncastIntsInternal(source, dest, length);\n+}\n+\n+void DowncastUInts(const uint64_t* source, uint32_t* dest, int64_t length) {\n+  DowncastIntsInternal(source, dest, length);\n+}\n+\n+void DowncastUInts(const uint64_t* source, uint64_t* dest, int64_t length) {\n+  memcpy(dest, source, length * sizeof(int64_t));\n+}\n+\n+}  // namespace internal\n+}  // namespace arrow\ndiff --git a/cpp/src/arrow/util/int-util.h b/cpp/src/arrow/util/int-util.h\nnew file mode 100644\nindex 0000000000..68355d3454\n--- /dev/null\n+++ b/cpp/src/arrow/util/int-util.h\n@@ -0,0 +1,69 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_UTIL_INT_UTIL_H\n+#define ARROW_UTIL_INT_UTIL_H\n+\n+#include <cstdint>\n+\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+ARROW_EXPORT\n+uint8_t DetectUIntWidth(const uint64_t* values, int64_t length, uint8_t min_width = 1);\n+\n+ARROW_EXPORT\n+uint8_t DetectUIntWidth(const uint64_t* values, const uint8_t* valid_bytes,\n+                        int64_t length, uint8_t min_width = 1);\n+\n+ARROW_EXPORT\n+uint8_t DetectIntWidth(const int64_t* values, int64_t length, uint8_t min_width = 1);\n+\n+ARROW_EXPORT\n+uint8_t DetectIntWidth(const int64_t* values, const uint8_t* valid_bytes, int64_t length,\n+                       uint8_t min_width = 1);\n+\n+ARROW_EXPORT\n+void DowncastInts(const int64_t* source, int8_t* dest, int64_t length);\n+\n+ARROW_EXPORT\n+void DowncastInts(const int64_t* source, int16_t* dest, int64_t length);\n+\n+ARROW_EXPORT\n+void DowncastInts(const int64_t* source, int32_t* dest, int64_t length);\n+\n+ARROW_EXPORT\n+void DowncastInts(const int64_t* source, int64_t* dest, int64_t length);\n+\n+ARROW_EXPORT\n+void DowncastUInts(const uint64_t* source, uint8_t* dest, int64_t length);\n+\n+ARROW_EXPORT\n+void DowncastUInts(const uint64_t* source, uint16_t* dest, int64_t length);\n+\n+ARROW_EXPORT\n+void DowncastUInts(const uint64_t* source, uint32_t* dest, int64_t length);\n+\n+ARROW_EXPORT\n+void DowncastUInts(const uint64_t* source, uint64_t* dest, int64_t length);\n+\n+}  // namespace internal\n+}  // namespace arrow\n+\n+#endif  // ARROW_UTIL_INT_UTIL_H\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-30T18:31:29.628+0000",
                    "updated": "2018-11-30T18:31:29.628+0000",
                    "started": "2018-11-30T18:31:29.627+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171162",
                    "issueId": "13200876"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 9600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3f882fe7[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f2a16e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5c30bead[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4f5a8d94[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3bdac52d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@53dba1c6[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@a47a8c6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@11eaa237[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7cf4fe8a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@722fa543[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@45992258[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@126cbc6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9600,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Nov 30 18:31:19 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-30T18:31:19.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3893/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-11-27T14:56:03.000+0000",
        "updated": "2018-11-30T18:31:29.000+0000",
        "timeoriginalestimate": null,
        "description": "This should also improve dictionary builder performance.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Improve adaptive int builder performance",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200876/comment/16705122",
                    "id": "16705122",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3040\n[https://github.com/apache/arrow/pull/3040]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-30T18:31:19.526+0000",
                    "updated": "2018-11-30T18:31:19.526+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|s00wy0:",
        "customfield_12314139": null
    }
}