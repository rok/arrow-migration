{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13415849",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415849",
    "key": "ARROW-15008",
    "fields": {
        "fixVersions": [],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/3",
            "id": "3",
            "description": "The problem is a duplicate of an existing issue.",
            "name": "Duplicate"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
            "name": "paleolimbot",
            "key": "paleolimbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
            },
            "displayName": "Dewey Dunnington",
            "active": true,
            "timeZone": "America/Halifax"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
            "name": "paleolimbot",
            "key": "paleolimbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
            },
            "displayName": "Dewey Dunnington",
            "active": true,
            "timeZone": "America/Halifax"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15008/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@a7afcfe[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24aa43a0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d7608e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@75169417[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@201239a3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4131e515[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@795a2ead[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@382dabbd[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@9c3523a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4714075a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f137653[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3a36584f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Dec 07 17:24:47 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-12-07T17:25:21.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15008/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-12-07T15:15:15.000+0000",
        "updated": "2021-12-07T17:25:21.000+0000",
        "timeoriginalestimate": null,
        "description": "When trying to do some math with decimal types, I noticed that a lot of the group generic functions are not implemented. Many users will use the dplyr bindings (where these are accessible), but it's useful to do this on Arrays and Scalars, too, particularly for decimal types whose math isn't accessible anywhere else in R.\r\n\r\nSome template code that might be helpful from carrow:\r\n\r\n\r\n{code:R}\r\n#' @export\r\nMath.carrow_vctr <- function(x, ...) {\r\n  switch(\r\n    .Generic,\r\n    abs =, sign =, sqrt =,\r\n    floor =, ceiling =, trunc =,\r\n    round =, signif =,\r\n    exp =, log =, expm1 =, log1p =,\r\n    cos =, sin =, tan =,\r\n    cospi =, sinpi =, tanpi =,\r\n    acos =, asin =, atan =,\r\n    cosh =, sinh =, tanh =,\r\n    acosh =, asinh =, atanh =,\r\n    lgamma =, gamma =, digamma =, trigamma =,\r\n    cumsum =, cumprod =, cummax =, cumin = {\r\n      assert_arrow(\"Math group generics\")\r\n      array <- as_arrow_array(x)\r\n      arrow_array <- from_carrow_array(array, arrow::Array)\r\n      getNamespace(\"base\")[[.Generic]](arrow_array)\r\n    },\r\n    stop(sprintf(\"Math generic '%s' not supported for carrow_vctr()\", .Generic)) # nocov\r\n  )\r\n}\r\n\r\n#' @export\r\nOps.carrow_vctr <- function(e1, e2) {\r\n  if (missing(e2)) {\r\n    switch(\r\n      .Generic,\r\n      \"!\" =, \"+\" =, \"-\" = {\r\n        assert_arrow(\"Unary Ops group generics\")\r\n        array <- as_carrow_array(e1)\r\n        arrow_array <- from_carrow_array(array, arrow::Array)\r\n        result <- getNamespace(\"base\")[[.Generic]](arrow_array)\r\n        return(as_carrow_vctr(result))\r\n      },\r\n      # R catches these before we do with 'invalid unary operator'\r\n      stop(sprintf(\"Unary '%s' not supported for carrow_vctr()\", .Generic)) # nocov\r\n    )\r\n  }\r\n\r\n  switch(\r\n    .Generic,\r\n    \"+\" =, \"-\" =, \"*\" =, \"/\" =, \"^\" =, \"%%\" =, \"%/%\" =,\r\n    \"&\" =, \"|\" =, \"!\" =,\r\n    \"==\" =, \"!=\" =, \"<\" =, \"<=\" =, \">=\" =, \">\" = {\r\n      assert_arrow(\"Ops group generics\")\r\n      vctr1 <- as_carrow_vctr(e1)\r\n      vctr2 <- as_carrow_vctr(e2)\r\n      array1 <- as_carrow_array(vctr1)\r\n      array2 <- as_carrow_array(vctr2)\r\n      arrow_array1 <- from_carrow_array(array1, arrow::Array)\r\n      arrow_array2 <- from_carrow_array(array2, arrow::Array)\r\n\r\n      result <- getNamespace(\"base\")[[.Generic]](arrow_array1, arrow_array2)\r\n      as_carrow_vctr(result)\r\n    },\r\n    stop(sprintf(\"Ops generic '%s' not supported for carrow_vctr()\", .Generic)) # nocov\r\n  )\r\n}\r\n\r\n#' @export\r\nSummary.carrow_vctr <- function(x, ..., na.rm = FALSE) {\r\n  assert_arrow(\"Math group generics\")\r\n  switch(\r\n    .Generic,\r\n    all =, any =,\r\n    sum =, prod =,\r\n    min =, max =,\r\n    range = {\r\n      # make sure dots are empty because we ignore them\r\n      stopifnot(...length() == 0L)\r\n\r\n      array <- as_carrow_array(x)\r\n      arrow_array <- from_carrow_array(array, arrow::Array)\r\n      getNamespace(\"base\")[[.Generic]](arrow_array, na.rm = na.rm)\r\n    },\r\n    stop(sprintf(\"Summary generic '%s' not supported for carrow_vctr()\", .Generic)) # nocov\r\n  )\r\n}\r\n\r\n#' @export\r\nComplex.carrow_vctr <- function(z) {\r\n  stop(\"Complex group generics are not supported for carrow_vctr\", call. = FALSE)\r\n}\r\n{code}\r\n\r\nAnd some tests that might be useful to copy:\r\n\r\n\r\n{code:R}\r\n\r\ntest_that(\"Math generics work\", {\r\n  # none of these are implemented in Arrow, so none are here either\r\n})\r\n\r\ntest_that(\"Ops numeric generics work\", {\r\n  skip_if_not_installed(\"arrow\")\r\n\r\n  v1 <- c(1:5, NA)\r\n  v2 <- 6:11\r\n  vctr1 <- as_carrow_vctr(v1)\r\n  vctr2 <- as_carrow_vctr(v2)\r\n\r\n  # unary expressions are broken in Arrow so these don't work\r\n  # expect_identical(\r\n  #   from_carrow_array(as_carrow_array(+vctr1)),\r\n  #   +v1\r\n  # )\r\n  #\r\n  # expect_identical(\r\n  #   from_carrow_array(as_carrow_array(-vctr1)),\r\n  #   -v1\r\n  # )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 + vctr2)),\r\n    v1 + v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 - vctr2)),\r\n    v1 - v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 * vctr2)),\r\n    v1 * v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 / vctr2)),\r\n    v1 / v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 ^ vctr2)),\r\n    as.integer(v1 ^ v2)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 %% vctr2)),\r\n    v1 %% v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 %/% vctr2)),\r\n    v1 %/% v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 + vctr2)),\r\n    v1 + v2\r\n  )\r\n})\r\n\r\ntest_that(\"Ops logical generics work\", {\r\n  skip_if_not_installed(\"arrow\")\r\n  skip(\"until logical conversion is improved\")\r\n\r\n  v1 <- c(TRUE, TRUE, FALSE, FALSE, NA, NA, NA)\r\n  v2 <- c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, NA)\r\n  vctr1 <- as_carrow_vctr(v1)\r\n  vctr2 <- as_carrow_vctr(v2)\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(!vctr1)),\r\n    !v1\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 & vctr2)),\r\n    v1 & v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 & vctr2)),\r\n    v1 | v2\r\n  )\r\n})\r\n\r\ntest_that(\"Ops comparison generics work\", {\r\n  skip_if_not_installed(\"arrow\")\r\n  skip(\"until logical conversion is improved\")\r\n\r\n  v1 <- c(1, 2, 3, 4, 5, 1, NA, 3, NA, 5, NA)\r\n  v2 <- c(5, 4, 3, 2, 1, NA, 4, NA, 2, 1, NA)\r\n  vctr1 <- as_carrow_vctr(v1)\r\n  vctr2 <- as_carrow_vctr(v2)\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 == vctr2)),\r\n    v1 == v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 != vctr2)),\r\n    v1 != v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 < vctr2)),\r\n    v1 < v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 <= vctr2)),\r\n    v1 <= v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 >= vctr2)),\r\n    v1 >= v2\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(vctr1 > vctr2)),\r\n    v1 > v2\r\n  )\r\n})\r\n\r\ntest_that(\"Summary numeric generics work\", {\r\n  skip_if_not_installed(\"arrow\")\r\n\r\n  v1 <- c(1:5, NA)\r\n  vctr1 <- as_carrow_vctr(v1)\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(sum(vctr1, na.rm = TRUE))),\r\n    as.double(sum(v1, na.rm = TRUE))\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(sum(vctr1, na.rm = FALSE))),\r\n    as.double(sum(v1, na.rm = FALSE))\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(min(vctr1, na.rm = TRUE))),\r\n    min(v1, na.rm = TRUE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(min(vctr1, na.rm = FALSE))),\r\n    min(v1, na.rm = FALSE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(max(vctr1, na.rm = TRUE))),\r\n    max(v1, na.rm = TRUE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(max(vctr1, na.rm = FALSE))),\r\n    max(v1, na.rm = FALSE)\r\n  )\r\n\r\n  skip(\"not all Summary generics are implemented in Arrow\")\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(range(vctr1, na.rm = TRUE))),\r\n    range(v1, na.rm = TRUE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(range(vctr1, na.rm = FALSE))),\r\n    range(v1, na.rm = FALSE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(prod(vctr1, na.rm = TRUE))),\r\n    prod(v1, na.rm = TRUE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(prod(vctr1, na.rm = FALSE))),\r\n    prod(v1, na.rm = FALSE)\r\n  )\r\n})\r\n\r\ntest_that(\"Summary logical generics work\", {\r\n  skip_if_not_installed(\"arrow\")\r\n  skip(\"until logical conversion is fixed\")\r\n\r\n  v1 <- c(FALSE, FALSE, NA)\r\n  v2 <- c(TRUE, TRUE, NA)\r\n  vctr1 <- as_carrow_vctr(v1)\r\n  vctr2 <- as_carrow_vctr(v2)\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(any(vctr1, na.rm = TRUE))),\r\n    any(v1, na.rm = TRUE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(any(vctr1, na.rm = FALSE))),\r\n    any(v1, na.rm = FALSE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(any(vctr2, na.rm = TRUE))),\r\n    any(v2, na.rm = TRUE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(any(vctr2, na.rm = FALSE))),\r\n    any(v2, na.rm = FALSE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(all(vctr1, na.rm = TRUE))),\r\n    all(v1, na.rm = TRUE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(all(vctr1, na.rm = FALSE))),\r\n    all(v1, na.rm = FALSE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(all(vctr2, na.rm = TRUE))),\r\n    all(v2, na.rm = TRUE)\r\n  )\r\n\r\n  expect_identical(\r\n    from_carrow_array(as_carrow_array(all(vctr2, na.rm = FALSE))),\r\n    all(v2, na.rm = FALSE)\r\n  )\r\n})\r\n{code}\r\n",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Not all group generic functions are supported for Arrays",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415849/comment/17454705",
                    "id": "17454705",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Duplicate of ARROW-13337?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-12-07T15:17:25.808+0000",
                    "updated": "2021-12-07T15:17:25.808+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415849/comment/17454768",
                    "id": "17454768",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "body": "Closing this as duplicate (added the info to the other ticket!)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "created": "2021-12-07T17:24:47.610+0000",
                    "updated": "2021-12-07T17:24:47.610+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0xfko:",
        "customfield_12314139": null
    }
}