{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13367300",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367300",
    "key": "ARROW-12074",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12615465",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12615465",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13377986",
                    "key": "ARROW-12748",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377986",
                    "fields": {
                        "summary": "[C++] Arithmetic kernels for numeric arrays",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12620475",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12620475",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "outwardIssue": {
                    "id": "13115468",
                    "key": "ARROW-1761",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13115468",
                    "fields": {
                        "summary": "[C++] Multi argument operator kernel behavior for decimal columns",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 24000,
            "total": 24000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 24000,
            "total": 24000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12074/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 40,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367300/worklog/599691",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 opened a new pull request #10364:\nURL: https://github.com/apache/arrow/pull/10364\n\n\n   TODOs:\r\n   \r\n   - [ ] Subtract, Divide\r\n   - [ ] Overflow check\r\n   - [ ] Consolidate tests\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-20T09:30:49.365+0000",
                    "updated": "2021-05-20T09:30:49.365+0000",
                    "started": "2021-05-20T09:30:49.365+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "599691",
                    "issueId": "13367300"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367300/worklog/599692",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10364:\nURL: https://github.com/apache/arrow/pull/10364#issuecomment-844912219\n\n\n   https://issues.apache.org/jira/browse/ARROW-12074\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-20T09:31:13.698+0000",
                    "updated": "2021-05-20T09:31:13.698+0000",
                    "started": "2021-05-20T09:31:13.698+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "599692",
                    "issueId": "13367300"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367300/worklog/603367",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10364:\nURL: https://github.com/apache/arrow/pull/10364#discussion_r641132241\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -516,6 +520,141 @@ std::shared_ptr<ScalarFunction> MakeUnarySignedArithmeticFunctionNotNull(\n   return func;\n }\n \n+// Decimal arithmetics\n+struct BinaryDecimal : public KernelState {\n+  const std::shared_ptr<DecimalType> left_type, right_type;\n+  std::shared_ptr<DataType> out_type;\n+\n+  explicit BinaryDecimal(const KernelInitArgs& args)\n+      : left_type(checked_pointer_cast<DecimalType>(args.inputs[0].type)),\n+        right_type(checked_pointer_cast<DecimalType>(args.inputs[1].type)) {\n+    DCHECK_EQ(left_type->id(), right_type->id());\n+  }\n+\n+  // create instance of derived class T\n+  template <typename T>\n+  static Result<std::unique_ptr<KernelState>> Make(const KernelInitArgs& args) {\n+    auto op = ::arrow::internal::make_unique<T>(args);\n+    if (op->left_type->scale() < 0 || op->right_type->scale() < 0) {\n+      return Status::Invalid(\"Decimals with negative scales not supported\");\n+    }\n+    RETURN_NOT_OK(op->Init(op->left_type->precision(), op->left_type->scale(),\n+                           op->right_type->precision(), op->right_type->scale()));\n+    return std::move(op);\n+  }\n+\n+  // return error and stop kernel execution if output precision is out of bound\n+  Status Init(int32_t out_prec, int32_t out_scale) {\n+    if (left_type->id() == Type::DECIMAL128) {\n+      ARROW_ASSIGN_OR_RAISE(out_type, Decimal128Type::Make(out_prec, out_scale));\n+    } else {\n+      ARROW_ASSIGN_OR_RAISE(out_type, Decimal256Type::Make(out_prec, out_scale));\n+    }\n+    return Status::OK();\n+  }\n+\n+  Result<std::shared_ptr<DataType>> ResolveOutput(const std::vector<ValueDescr>&) const {\n+    return out_type;\n+  }\n+};\n+\n+template <bool IsSubtract>\n+struct AddOrSubtractDecimal : public BinaryDecimal {\n+  using BinaryDecimal::BinaryDecimal;\n+\n+  int32_t left_scaleup, right_scaleup;\n+\n+  // called by kernel::init()\n+  static Result<std::unique_ptr<KernelState>> Make(KernelContext*,\n+                                                   const KernelInitArgs& args) {\n+    return BinaryDecimal::Make<AddOrSubtractDecimal<IsSubtract>>(args);\n+  }\n+\n+  // figure out output type and arg scaling, called by Make()\n+  Status Init(int32_t p1, int32_t s1, int32_t p2, int32_t s2) {\n+    const int32_t out_scale = std::max(s1, s2);\n+    const int32_t out_prec = std::max(p1 - s1, p2 - s2) + 1 + out_scale;\n+    left_scaleup = out_scale - s1;\n+    right_scaleup = out_scale - s2;\n+    return BinaryDecimal::Init(out_prec, out_scale);\n+  }\n+\n+  // called by kerne::exec() for each value pair\n+  // TODO(yibo): avoid repeat rescaling of scalar arg\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 left, Arg1 right, Status*) const {\n+    if (left_scaleup > 0) left = left.IncreaseScaleBy(left_scaleup);\n+    if (right_scaleup > 0) right = right.IncreaseScaleBy(right_scaleup);\n+    if (IsSubtract) right = -right;\n+    return left + right;\n+  }\n+};\n+\n+using AddDecimal = AddOrSubtractDecimal</*IsSubtract=*/false>;\n+using SubtractDecimal = AddOrSubtractDecimal</*IsSubtract=*/true>;\n+\n+struct MultiplyDecimal : public BinaryDecimal {\n+  using BinaryDecimal::BinaryDecimal;\n+\n+  static Result<std::unique_ptr<KernelState>> Make(KernelContext*,\n+                                                   const KernelInitArgs& args) {\n+    return BinaryDecimal::Make<MultiplyDecimal>(args);\n+  }\n+\n+  Status Init(int32_t p1, int32_t s1, int32_t p2, int32_t s2) {\n+    return BinaryDecimal::Init(p1 + p2 + 1, s1 + s2);\n+  }\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 left, Arg1 right, Status*) const {\n+    return left * right;\n+  }\n+};\n+\n+struct DivideDecimal : public BinaryDecimal {\n+  using BinaryDecimal::BinaryDecimal;\n+\n+  int32_t left_scaleup;\n+\n+  static Result<std::unique_ptr<KernelState>> Make(KernelContext*,\n+                                                   const KernelInitArgs& args) {\n+    return BinaryDecimal::Make<DivideDecimal>(args);\n+  }\n+\n+  Status Init(int32_t p1, int32_t s1, int32_t p2, int32_t s2) {\n+    // https://docs.aws.amazon.com/redshift/latest/dg/r_numeric_computations201.html\n\nReview comment:\n       Please write out an explanation of the upscaling behavior either as a comment or in compute.rst\n\n##########\nFile path: cpp/src/arrow/compute/kernels/test_util.h\n##########\n@@ -113,6 +113,9 @@ void CheckScalarBinary(std::string func_name, std::shared_ptr<Array> left_input,\n                        std::shared_ptr<Array> expected,\n                        const FunctionOptions* options = nullptr);\n \n+void CheckScalarGeneral(std::string func_name, const std::vector<Datum>& inputs,\n\nReview comment:\n       Why not CheckScalar()?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -1161,5 +1161,312 @@ TYPED_TEST(TestUnaryArithmeticFloating, AbsoluteValue) {\n   }\n }\n \n+class TestBinaryArithmeticDecimal : public TestBase {\n+ protected:\n+  struct Arg {\n+    std::shared_ptr<DataType> type;\n+    std::string value;\n+  };\n+\n+  std::shared_ptr<DataType> GetOutType(const std::string& op,\n+                                       const std::shared_ptr<DataType>& left_type,\n+                                       const std::shared_ptr<DataType>& right_type) {\n+    auto left_decimal_type = std::static_pointer_cast<DecimalType>(left_type);\n+    auto right_decimal_type = std::static_pointer_cast<DecimalType>(right_type);\n+\n+    const int32_t p1 = left_decimal_type->precision(), s1 = left_decimal_type->scale();\n+    const int32_t p2 = right_decimal_type->precision(), s2 = right_decimal_type->scale();\n+\n+    // https://docs.aws.amazon.com/redshift/latest/dg/r_numeric_computations201.html\n+    int32_t precision, scale;\n+    if (op == \"add\" || op == \"subtract\") {\n+      scale = std::max(s1, s2);\n+      precision = std::max(p1 - s1, p2 - s2) + 1 + scale;\n+    } else if (op == \"multiply\") {\n+      scale = s1 + s2;\n+      precision = p1 + p2 + 1;\n+    } else if (op == \"divide\") {\n+      scale = std::max(4, s1 + p2 - s2 + 1);\n+      precision = p1 - s1 + s2 + scale;\n+    } else {\n+      ABORT_NOT_OK(Status::Invalid(\"invalid binary operator: \", op));\n+    }\n+\n+    std::shared_ptr<DataType> type;\n+    if (left_type->id() == Type::DECIMAL128) {\n+      ASSIGN_OR_ABORT(type, Decimal128Type::Make(precision, scale));\n+    } else {\n+      ASSIGN_OR_ABORT(type, Decimal256Type::Make(precision, scale));\n+    }\n+    return type;\n+  }\n+\n+  std::shared_ptr<Scalar> MakeScalar(const std::shared_ptr<DataType>& type,\n+                                     const std::string& str) {\n+    std::shared_ptr<Scalar> scalar;\n+    if (type->id() == Type::DECIMAL128) {\n+      Decimal128 value;\n+      int32_t dummy;\n+      ABORT_NOT_OK(Decimal128::FromString(str, &value, &dummy));\n+      ASSIGN_OR_ABORT(scalar, arrow::MakeScalar(type, value));\n+    } else {\n+      Decimal256 value;\n+      int32_t dummy;\n+      ABORT_NOT_OK(Decimal256::FromString(str, &value, &dummy));\n+      ASSIGN_OR_ABORT(scalar, arrow::MakeScalar(type, value));\n+    }\n+    return scalar;\n+  }\n+\n+  Datum ToDatum(const std::shared_ptr<DataType>& type, const std::string& value) {\n+    if (value.find(\"[\") == std::string::npos) {\n+      return Datum(MakeScalar(type, value));\n+    } else {\n+      return Datum(ArrayFromJSON(type, value));\n+    }\n+  }\n+\n+  void Assert(const std::string& op, const Arg& left, const Arg& right,\n+              const std::string& expected) {\n+    const Datum arg0 = ToDatum(left.type, left.value);\n+    const Datum arg1 = ToDatum(right.type, right.value);\n+\n+    auto out_type = GetOutType(op, left.type, right.type);\n+    CheckScalarGeneral(op, {arg0, arg1}, ToDatum(out_type, expected), &options_);\n+\n+    // commutative operations\n+    if (op == \"add\" || op == \"multiply\") {\n+      CheckScalarGeneral(op, {arg1, arg0}, ToDatum(out_type, expected), &options_);\n+    }\n+  }\n+\n+  void AssertFail(const std::string& op, const Arg& left, const Arg& right) {\n+    const Datum arg0 = ToDatum(left.type, left.value);\n+    const Datum arg1 = ToDatum(right.type, right.value);\n+\n+    ASSERT_NOT_OK(CallFunction(op, {arg0, arg1}, &options_));\n+    if (op == \"add\" || op == \"multiply\") {\n+      ASSERT_NOT_OK(CallFunction(op, {arg1, arg0}, &options_));\n+    }\n+  }\n+\n+  ArithmeticOptions options_ = ArithmeticOptions();\n+};\n+\n+// reference result from bc (precsion=100, scale=40)\n+TEST_F(TestBinaryArithmeticDecimal, AddSubtract) {\n+  Arg left, right;\n+  std::string added, subtracted;\n+\n+  // array array, decimal128\n+  // clang-format off\n+  left = {\n+    decimal128(30, 3),\n+    R\"([\n+      \"1.000\",\n+      \"-123456789012345678901234567.890\",\n+      \"98765432109876543210.987\",\n+      \"-999999999999999999999999999.999\"\n+    ])\",\n+  };\n+  right = {\n+    decimal128(20, 9),\n+    R\"([\n+      \"-1.000000000\",\n+      \"12345678901.234567890\",\n+      \"98765.432101234\",\n+      \"-99999999999.999999999\"\n+    ])\",\n+  };\n+  added = R\"([\n+    \"0.000000000\",\n+    \"-123456789012345666555555666.655432110\",\n+    \"98765432109876641976.419101234\",\n+    \"-1000000000000000099999999999.998999999\"\n+  ])\";\n+  subtracted = R\"([\n+    \"2.000000000\",\n+    \"-123456789012345691246913469.124567890\",\n+    \"98765432109876444445.554898766\",\n+    \"-999999999999999899999999999.999000001\"\n+  ])\";\n+  this->Assert(\"add\", left, right, added);\n+  this->Assert(\"subtract\", left, right, subtracted);\n+\n+  // array array, decimal256\n+  left = {\n+    decimal256(30, 20),\n+    R\"([\n+      \"-1.00000000000000000001\",\n+      \"1234567890.12345678900000000000\",\n+      \"-9876543210.09876543210987654321\",\n+      \"9999999999.99999999999999999999\"\n+    ])\",\n+  };\n+  right = {\n+    decimal256(30, 10),\n+    R\"([\n+      \"1.0000000000\",\n+      \"-1234567890.1234567890\",\n+      \"6789.5432101234\",\n+      \"99999999999999999999.9999999999\"\n+    ])\",\n+  };\n+  added = R\"([\n+    \"-0.00000000000000000001\",\n+    \"0.00000000000000000000\",\n+    \"-9876536420.55555530870987654321\",\n+    \"100000000009999999999.99999999989999999999\"\n+  ])\";\n+  subtracted = R\"([\n+    \"-2.00000000000000000001\",\n+    \"2469135780.24691357800000000000\",\n+    \"-9876549999.64197555550987654321\",\n+    \"-99999999989999999999.99999999990000000001\"\n+  ])\";\n+  this->Assert(\"add\", left, right, added);\n+  this->Assert(\"subtract\", left, right, subtracted);\n+  // clang-format on\n+\n+  // scalar array\n+  left = {decimal128(6, 1), \"12345.6\"};\n+  right = {decimal128(10, 3), R\"([\"1.234\", \"1234.000\", \"-9876.543\", \"666.888\"])\"};\n+  added = R\"([\"12346.834\", \"13579.600\", \"2469.057\", \"13012.488\"])\";\n+  subtracted = R\"([\"12344.366\", \"11111.600\", \"22222.143\", \"11678.712\"])\";\n+  this->Assert(\"add\", left, right, added);\n+  this->Assert(\"subtract\", left, right, subtracted);\n+  // right - left\n+  subtracted = R\"([\"-12344.366\", \"-11111.600\", \"-22222.143\", \"-11678.712\"])\";\n+  this->Assert(\"subtract\", right, left, subtracted);\n+\n+  // scalar scalar\n+  left = {decimal256(3, 0), \"666\"};\n+  right = {decimal256(3, 0), \"888\"};\n+  this->Assert(\"add\", left, right, \"1554\");\n+  this->Assert(\"subtract\", left, right, \"-222\");\n+\n+  // failed case: result *maybe* overflow\n+  left = {decimal128(21, 20), \"0.12345678901234567890\"};\n+  right = {decimal128(21, 1), \"1.0\"};\n+  this->AssertFail(\"add\", left, right);\n+  this->AssertFail(\"subtract\", left, right);\n+\n+  left = {decimal256(75, 0), \"0\"};\n+  right = {decimal256(2, 1), \"0.0\"};\n+  this->AssertFail(\"add\", left, right);\n+  this->AssertFail(\"subtract\", left, right);\n+}\n+\n+TEST_F(TestBinaryArithmeticDecimal, Multiply) {\n+  Arg left, right;\n+  std::string expected;\n+\n+  // array array\n+  // clang-format off\n+  left = {\n+    decimal128(20, 10),\n+    R\"([\n+      \"1234567890.1234567890\",\n+      \"-0.0000000001\",\n+      \"-9999999999.9999999999\"\n+    ])\",\n+  };\n+  right = {\n+    decimal128(13, 3),\n+    R\"([\n+      \"1234567890.123\",\n+      \"0.001\",\n+      \"-9999999999.999\"\n+    ])\",\n+  };\n+  expected = R\"([\n+    \"1524157875323319737.9870903950470\",\n+    \"-0.0000000000001\",\n+    \"99999999999989999999.0000000000001\"\n+  ])\";\n+  this->Assert(\"multiply\", left, right, expected);\n+\n+  left = {\n+    decimal256(30, 3),\n+    R\"([\n+      \"123456789012345678901234567.890\",\n+      \"0.000\"\n+    ])\",\n+  };\n+  right = {\n+    decimal256(20, 9),\n+    R\"([\n+      \"-12345678901.234567890\",\n+      \"99999999999.999999999\"\n+    ])\",\n+  };\n+  expected = R\"([\n+    \"-1524157875323883675034293577501905199.875019052100\",\n+    \"0.000000000000\"\n+  ])\";\n+  this->Assert(\"multiply\", left, right, expected);\n+  // clang-format on\n+\n+  // scalar array\n+  left = {decimal128(3, 2), \"3.14\"};\n+  right = {decimal128(1, 0), R\"([\"1\", \"2\", \"3\", \"4\", \"5\"])\"};\n+  expected = R\"([\"3.14\", \"6.28\", \"9.42\", \"12.56\", \"15.70\"])\";\n+  this->Assert(\"multiply\", left, right, expected);\n+\n+  // scalar scalar\n+  left = {decimal128(1, 0), \"1\"};\n+  right = {decimal128(1, 0), \"1\"};\n+  this->Assert(\"multiply\", left, right, \"1\");\n+\n+  // failed case: result *maybe* overflow\n+  left = {decimal128(20, 0), \"1\"};\n+  right = {decimal128(18, 1), \"1.0\"};\n+  this->AssertFail(\"multiply\", left, right);\n+}\n+\n+TEST_F(TestBinaryArithmeticDecimal, Divide) {\n+  Arg left, right;\n+  std::string expected;\n+\n+  // array array\n+  // clang-format off\n+  left = {decimal128(13, 3), R\"([\"1234567890.123\", \"0.001\"])\"};\n+  right = {decimal128(3, 0), R\"([\"-987\", \"999\"])\"};\n+  // scale = 7\n+  expected = R\"([\"-1250828.6627386\", \"0.0000010\"])\";\n+  this->Assert(\"divide\", left, right, expected);\n+\n+  left = {decimal256(20, 10), R\"([\"1234567890.1234567890\", \"9999999999.9999999999\"])\"};\n+  right = {decimal256(13, 3), R\"([\"1234567890.123\", \"0.001\"])\"};\n+  // scale = 21\n+  expected = R\"([\"1.000000000000369999093\", \"9999999999999.999999900000000000000\"])\";\n+  this->Assert(\"divide\", left, right, expected);\n+  // clang-format on\n\nReview comment:\n       Please don't disable clang format so frequently\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-28T02:01:07.221+0000",
                    "updated": "2021-05-28T02:01:07.221+0000",
                    "started": "2021-05-28T02:01:07.220+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "603367",
                    "issueId": "13367300"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367300/worklog/604319",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #10364:\nURL: https://github.com/apache/arrow/pull/10364#issuecomment-851806478\n\n\n   > Please extract the decimal upscaling from the addition kernel into an implicit cast. This will simplify the addition kernel to stateless addition (IIUC) and give callers control over how to handle upscaling. \r\n   \r\n   Thanks @bkietz , casting args (rescaling decimal inputs) implicitly before exec looks much better than my current implementation. Will try the approach.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-01T05:03:31.834+0000",
                    "updated": "2021-06-01T05:03:31.834+0000",
                    "started": "2021-06-01T05:03:31.834+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "604319",
                    "issueId": "13367300"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367300/worklog/604939",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #10364:\nURL: https://github.com/apache/arrow/pull/10364#issuecomment-852709410\n\n\n   @bkietz , met with one problem, would like to hear your comments. Thanks.\r\n   \r\n   Decimal upscaling is operation dependent. E.g., `+,-` will upscale arg with small scale to align digit, `*` needn't scaling, `/` is more complicated.\r\n   \r\n   Implicit args casting happens before kernel is created. `DispatchBest` only knows arg types, no operation type (kernel dependent) is available. So we cannot figure out the \"to be casted\" arg type (new precision, scale).\r\n   https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/function.cc#L175\r\n   \r\n   Maybe add another callback `kernel->explicit_cast()` and call it after or inside `DispatchBest`? Or one `ScalarFunction` struct (and DispatchBest) per binary decimal operation?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-02T04:22:46.473+0000",
                    "updated": "2021-06-02T04:22:46.473+0000",
                    "started": "2021-06-02T04:22:46.473+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "604939",
                    "issueId": "13367300"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367300/worklog/604941",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 edited a comment on pull request #10364:\nURL: https://github.com/apache/arrow/pull/10364#issuecomment-852709410\n\n\n   @bkietz , met with one problem, would like to hear your comments. Thanks.\r\n   \r\n   Decimal upscaling is operation dependent. E.g., `+,-` will upscale arg with smaller scale to align digit, `*` needn't scaling, `/` is more complicated.\r\n   \r\n   Implicit args casting happens before kernel is created. `DispatchBest` only knows arg types, no operation type (kernel dependent) is available. So we cannot figure out the \"to be casted\" arg type (new precision, scale).\r\n   https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/function.cc#L175\r\n   \r\n   Maybe add another callback `kernel->explicit_cast()` and call it after or inside `DispatchBest`? Or  create different `ScalarFunction` struct (and DispatchBest) for each decimal operation?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-02T04:25:37.075+0000",
                    "updated": "2021-06-02T04:25:37.075+0000",
                    "started": "2021-06-02T04:25:37.075+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "604941",
                    "issueId": "13367300"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367300/worklog/605468",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #10364:\nURL: https://github.com/apache/arrow/pull/10364#issuecomment-853329894\n\n\n   `DispatchBest` is aware of the operation; it has access to the function's name. You could write a `CommonDecimal()` function which returns differing scales/precisions for \"add\"/\"subtract\", \"divide\", and \"multiply\":\r\n   \r\n   ```c++\r\n   if (auto type = CommonNumeric(*values)) {\r\n     ReplaceTypes(type, values);\r\n   } else if (auto type = CommonDecimal(name_, *values)) {\r\n     ReplaceTypes(type, values);\r\n   }\r\n   ```\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-02T19:35:28.093+0000",
                    "updated": "2021-06-02T19:35:28.093+0000",
                    "started": "2021-06-02T19:35:28.093+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "605468",
                    "issueId": "13367300"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367300/worklog/606362",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #10364:\nURL: https://github.com/apache/arrow/pull/10364#issuecomment-854364569\n\n\n   Thanks @bkietz , it's almost done except one last catch.\r\n   \r\n   As the output type (precision, scale) is dependent on the inputs, I have a resolver object to calculate output type. The resolver is called with the *casted* input type, not the original type. It causes problem to division, as the output precision and scale should be calculated from original inputs. No trouble for add/subtract as the output precision/scale is the same for original and casted inputs (digit aligned). Multiply doesn't need cast.\r\n   \r\n   Does it make sense to pass both original input types and the casted types to the resolver [1][2]? We will have to update all existing custom resolver codes.\r\n   Or there are better ways to handle this?\r\n   \r\n   [1] https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/function.cc#L196\r\n   [2] https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/exec.cc#L495\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-04T05:15:39.955+0000",
                    "updated": "2021-06-04T05:15:39.955+0000",
                    "started": "2021-06-04T05:15:39.954+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "606362",
                    "issueId": "13367300"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367300/worklog/606370",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 edited a comment on pull request #10364:\nURL: https://github.com/apache/arrow/pull/10364#issuecomment-854364569\n\n\n   Thanks @bkietz , it's almost done except one last catch.\r\n   \r\n   As the output type (precision, scale) is dependent on the inputs, I have a resolver object to calculate output type. The resolver is called with the *casted* input type, not the original type. It causes problem to division, as the output precision and scale should be calculated from original inputs. No trouble for add/subtract as the output precision/scale is the same for original and casted inputs (digit aligned). Multiply doesn't need cast.\r\n   \r\n   Does it make sense to pass both original input types and the casted types to the resolver [1][2]? We will have to update all existing custom resolver codes.\r\n   Maybe add a kernel flag to select original or casted input?\r\n   Or there are better ways to handle this?\r\n   \r\n   [1] https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/function.cc#L196\r\n   [2] https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/exec.cc#L495\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-04T05:34:54.306+0000",
                    "updated": "2021-06-04T05:34:54.306+0000",
                    "started": "2021-06-04T05:34:54.306+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "606370",
                    "issueId": "13367300"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367300/worklog/606372",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 edited a comment on pull request #10364:\nURL: https://github.com/apache/arrow/pull/10364#issuecomment-854364569\n\n\n   Thanks @bkietz , it's almost done except one last catch.\r\n   \r\n   As the output type (precision, scale) is dependent on the inputs, I have a resolver object to calculate output type. The resolver is called with the *casted* input type, not the original type. It causes problem to division, as the output precision and scale should be calculated from original inputs. No trouble for add/subtract as the output precision/scale is the same for original and casted inputs (digit aligned). Multiply doesn't need cast.\r\n   \r\n   Does it make sense to pass both original input types and the casted types to the resolver [1][2]? We will have to update all existing custom resolver codes.\r\n   Maybe add a kernel flag to select original or casted input types?\r\n   Or there are better ways to handle this?\r\n   \r\n   [1] https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/function.cc#L196\r\n   [2] https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/exec.cc#L495\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-04T05:35:19.022+0000",
                    "updated": "2021-06-04T05:35:19.022+0000",
                    "started": "2021-06-04T05:35:19.022+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "606372",
                    "issueId": "13367300"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367300/worklog/606906",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #10364:\nURL: https://github.com/apache/arrow/pull/10364#issuecomment-854364569\n\n\n   Thanks @bkietz , it's almost done except one last catch.\r\n   \r\n   As the output type (precision, scale) is dependent on the inputs, I have a resolver object to calculate output type. The resolver is called with the *casted* input type, not the original type. It causes problem to division, as the output precision and scale should be calculated from original inputs. No trouble for add/subtract as the output precision/scale is the same for original and casted inputs (digit aligned). Multiply doesn't need cast.\r\n   \r\n   Does it make sense to pass both original input types and the casted types to the resolver [1][2]? We will have to update all existing custom resolver codes.\r\n   Or there are better ways to handle this?\r\n   \r\n   [1] https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/function.cc#L196\r\n   [2] https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/exec.cc#L495\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-04T08:37:11.596+0000",
                    "updated": "2021-06-04T08:37:11.596+0000",
                    "started": "2021-06-04T08:37:11.596+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "606906",
                    "issueId": "13367300"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367300/worklog/606914",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 edited a comment on pull request #10364:\nURL: https://github.com/apache/arrow/pull/10364#issuecomment-854364569\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-04T08:37:58.849+0000",
                    "updated": "2021-06-04T08:37:58.849+0000",
                    "started": "2021-06-04T08:37:58.849+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "606914",
                    "issueId": "13367300"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367300/worklog/606954",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 edited a comment on pull request #10364:\nURL: https://github.com/apache/arrow/pull/10364#issuecomment-854364569\n\n\n   Thanks @bkietz , it's almost done except one last catch.\r\n   \r\n   As the output type (precision, scale) is dependent on the inputs, I have a resolver object to calculate output type. The resolver is called with the *casted* input type, not the original type. It causes problem to division, as the output precision and scale should be calculated from original inputs. No trouble for add/subtract as the output precision/scale is the same for original and casted inputs (digit aligned). Multiply doesn't need cast.\r\n   \r\n   Does it make sense to pass both original input types and the casted types to the resolver [1][2]? We will have to update all existing custom resolver codes.\r\n   Maybe add a kernel flag to select passing original or casted input types to the resolver?\r\n   Or there are better ways to handle this?\r\n   \r\n   [1] https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/function.cc#L196\r\n   [2] https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/exec.cc#L495\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-04T09:30:30.405+0000",
                    "updated": "2021-06-04T09:30:30.405+0000",
                    "started": "2021-06-04T09:30:30.405+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "606954",
                    "issueId": "13367300"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367300/worklog/606989",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 edited a comment on pull request #10364:\nURL: https://github.com/apache/arrow/pull/10364#issuecomment-854364569\n\n\n   Thanks @bkietz , it's almost done except one last catch.\r\n   \r\n   As the output type (precision, scale) is dependent on the inputs, I have a resolver object to calculate output type. The resolver is called with the *casted* input type, not the original type. It causes problem to division, as the output precision and scale should be calculated from original inputs. No trouble for add/subtract as the output precision/scale is the same for original and casted inputs (digit aligned). Multiply doesn't need cast.\r\n   \r\n   Does it make sense to pass both original input types and the casted types to the resolver [1][2]? We will have to update all existing custom resolver codes.\r\n   Maybe add a kernel flag to select passing original or casted input types to the resolver?\r\n   Or there are better ways to handle this?\r\n   \r\n   [1] https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/function.cc#L196\r\n   [2] https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/exec.cc#L495\r\n   \r\n   **EDIT:** Pushed latest code to ease reviewing. Unit test fails due to this issue.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-04T10:31:46.888+0000",
                    "updated": "2021-06-04T10:31:46.888+0000",
                    "started": "2021-06-04T10:31:46.887+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "606989",
                    "issueId": "13367300"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367300/worklog/606990",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #10364:\nURL: https://github.com/apache/arrow/pull/10364#discussion_r645468186\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/test_util.h\n##########\n@@ -113,6 +113,9 @@ void CheckScalarBinary(std::string func_name, std::shared_ptr<Array> left_input,\n                        std::shared_ptr<Array> expected,\n                        const FunctionOptions* options = nullptr);\n \n+void CheckScalarGeneral(std::string func_name, const std::vector<Datum>& inputs,\n\nReview comment:\n       Done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-04T10:32:20.089+0000",
                    "updated": "2021-06-04T10:32:20.089+0000",
                    "started": "2021-06-04T10:32:20.089+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "606990",
                    "issueId": "13367300"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367300/worklog/606991",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #10364:\nURL: https://github.com/apache/arrow/pull/10364#discussion_r645468811\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -1161,5 +1161,312 @@ TYPED_TEST(TestUnaryArithmeticFloating, AbsoluteValue) {\n   }\n }\n \n+class TestBinaryArithmeticDecimal : public TestBase {\n+ protected:\n+  struct Arg {\n+    std::shared_ptr<DataType> type;\n+    std::string value;\n+  };\n+\n+  std::shared_ptr<DataType> GetOutType(const std::string& op,\n+                                       const std::shared_ptr<DataType>& left_type,\n+                                       const std::shared_ptr<DataType>& right_type) {\n+    auto left_decimal_type = std::static_pointer_cast<DecimalType>(left_type);\n+    auto right_decimal_type = std::static_pointer_cast<DecimalType>(right_type);\n+\n+    const int32_t p1 = left_decimal_type->precision(), s1 = left_decimal_type->scale();\n+    const int32_t p2 = right_decimal_type->precision(), s2 = right_decimal_type->scale();\n+\n+    // https://docs.aws.amazon.com/redshift/latest/dg/r_numeric_computations201.html\n+    int32_t precision, scale;\n+    if (op == \"add\" || op == \"subtract\") {\n+      scale = std::max(s1, s2);\n+      precision = std::max(p1 - s1, p2 - s2) + 1 + scale;\n+    } else if (op == \"multiply\") {\n+      scale = s1 + s2;\n+      precision = p1 + p2 + 1;\n+    } else if (op == \"divide\") {\n+      scale = std::max(4, s1 + p2 - s2 + 1);\n+      precision = p1 - s1 + s2 + scale;\n+    } else {\n+      ABORT_NOT_OK(Status::Invalid(\"invalid binary operator: \", op));\n+    }\n+\n+    std::shared_ptr<DataType> type;\n+    if (left_type->id() == Type::DECIMAL128) {\n+      ASSIGN_OR_ABORT(type, Decimal128Type::Make(precision, scale));\n+    } else {\n+      ASSIGN_OR_ABORT(type, Decimal256Type::Make(precision, scale));\n+    }\n+    return type;\n+  }\n+\n+  std::shared_ptr<Scalar> MakeScalar(const std::shared_ptr<DataType>& type,\n+                                     const std::string& str) {\n+    std::shared_ptr<Scalar> scalar;\n+    if (type->id() == Type::DECIMAL128) {\n+      Decimal128 value;\n+      int32_t dummy;\n+      ABORT_NOT_OK(Decimal128::FromString(str, &value, &dummy));\n+      ASSIGN_OR_ABORT(scalar, arrow::MakeScalar(type, value));\n+    } else {\n+      Decimal256 value;\n+      int32_t dummy;\n+      ABORT_NOT_OK(Decimal256::FromString(str, &value, &dummy));\n+      ASSIGN_OR_ABORT(scalar, arrow::MakeScalar(type, value));\n+    }\n+    return scalar;\n+  }\n+\n+  Datum ToDatum(const std::shared_ptr<DataType>& type, const std::string& value) {\n+    if (value.find(\"[\") == std::string::npos) {\n+      return Datum(MakeScalar(type, value));\n+    } else {\n+      return Datum(ArrayFromJSON(type, value));\n+    }\n+  }\n+\n+  void Assert(const std::string& op, const Arg& left, const Arg& right,\n+              const std::string& expected) {\n+    const Datum arg0 = ToDatum(left.type, left.value);\n+    const Datum arg1 = ToDatum(right.type, right.value);\n+\n+    auto out_type = GetOutType(op, left.type, right.type);\n+    CheckScalarGeneral(op, {arg0, arg1}, ToDatum(out_type, expected), &options_);\n+\n+    // commutative operations\n+    if (op == \"add\" || op == \"multiply\") {\n+      CheckScalarGeneral(op, {arg1, arg0}, ToDatum(out_type, expected), &options_);\n+    }\n+  }\n+\n+  void AssertFail(const std::string& op, const Arg& left, const Arg& right) {\n+    const Datum arg0 = ToDatum(left.type, left.value);\n+    const Datum arg1 = ToDatum(right.type, right.value);\n+\n+    ASSERT_NOT_OK(CallFunction(op, {arg0, arg1}, &options_));\n+    if (op == \"add\" || op == \"multiply\") {\n+      ASSERT_NOT_OK(CallFunction(op, {arg1, arg0}, &options_));\n+    }\n+  }\n+\n+  ArithmeticOptions options_ = ArithmeticOptions();\n+};\n+\n+// reference result from bc (precsion=100, scale=40)\n+TEST_F(TestBinaryArithmeticDecimal, AddSubtract) {\n+  Arg left, right;\n+  std::string added, subtracted;\n+\n+  // array array, decimal128\n+  // clang-format off\n+  left = {\n+    decimal128(30, 3),\n+    R\"([\n+      \"1.000\",\n+      \"-123456789012345678901234567.890\",\n+      \"98765432109876543210.987\",\n+      \"-999999999999999999999999999.999\"\n+    ])\",\n+  };\n+  right = {\n+    decimal128(20, 9),\n+    R\"([\n+      \"-1.000000000\",\n+      \"12345678901.234567890\",\n+      \"98765.432101234\",\n+      \"-99999999999.999999999\"\n+    ])\",\n+  };\n+  added = R\"([\n+    \"0.000000000\",\n+    \"-123456789012345666555555666.655432110\",\n+    \"98765432109876641976.419101234\",\n+    \"-1000000000000000099999999999.998999999\"\n+  ])\";\n+  subtracted = R\"([\n+    \"2.000000000\",\n+    \"-123456789012345691246913469.124567890\",\n+    \"98765432109876444445.554898766\",\n+    \"-999999999999999899999999999.999000001\"\n+  ])\";\n+  this->Assert(\"add\", left, right, added);\n+  this->Assert(\"subtract\", left, right, subtracted);\n+\n+  // array array, decimal256\n+  left = {\n+    decimal256(30, 20),\n+    R\"([\n+      \"-1.00000000000000000001\",\n+      \"1234567890.12345678900000000000\",\n+      \"-9876543210.09876543210987654321\",\n+      \"9999999999.99999999999999999999\"\n+    ])\",\n+  };\n+  right = {\n+    decimal256(30, 10),\n+    R\"([\n+      \"1.0000000000\",\n+      \"-1234567890.1234567890\",\n+      \"6789.5432101234\",\n+      \"99999999999999999999.9999999999\"\n+    ])\",\n+  };\n+  added = R\"([\n+    \"-0.00000000000000000001\",\n+    \"0.00000000000000000000\",\n+    \"-9876536420.55555530870987654321\",\n+    \"100000000009999999999.99999999989999999999\"\n+  ])\";\n+  subtracted = R\"([\n+    \"-2.00000000000000000001\",\n+    \"2469135780.24691357800000000000\",\n+    \"-9876549999.64197555550987654321\",\n+    \"-99999999989999999999.99999999990000000001\"\n+  ])\";\n+  this->Assert(\"add\", left, right, added);\n+  this->Assert(\"subtract\", left, right, subtracted);\n+  // clang-format on\n+\n+  // scalar array\n+  left = {decimal128(6, 1), \"12345.6\"};\n+  right = {decimal128(10, 3), R\"([\"1.234\", \"1234.000\", \"-9876.543\", \"666.888\"])\"};\n+  added = R\"([\"12346.834\", \"13579.600\", \"2469.057\", \"13012.488\"])\";\n+  subtracted = R\"([\"12344.366\", \"11111.600\", \"22222.143\", \"11678.712\"])\";\n+  this->Assert(\"add\", left, right, added);\n+  this->Assert(\"subtract\", left, right, subtracted);\n+  // right - left\n+  subtracted = R\"([\"-12344.366\", \"-11111.600\", \"-22222.143\", \"-11678.712\"])\";\n+  this->Assert(\"subtract\", right, left, subtracted);\n+\n+  // scalar scalar\n+  left = {decimal256(3, 0), \"666\"};\n+  right = {decimal256(3, 0), \"888\"};\n+  this->Assert(\"add\", left, right, \"1554\");\n+  this->Assert(\"subtract\", left, right, \"-222\");\n+\n+  // failed case: result *maybe* overflow\n+  left = {decimal128(21, 20), \"0.12345678901234567890\"};\n+  right = {decimal128(21, 1), \"1.0\"};\n+  this->AssertFail(\"add\", left, right);\n+  this->AssertFail(\"subtract\", left, right);\n+\n+  left = {decimal256(75, 0), \"0\"};\n+  right = {decimal256(2, 1), \"0.0\"};\n+  this->AssertFail(\"add\", left, right);\n+  this->AssertFail(\"subtract\", left, right);\n+}\n+\n+TEST_F(TestBinaryArithmeticDecimal, Multiply) {\n+  Arg left, right;\n+  std::string expected;\n+\n+  // array array\n+  // clang-format off\n+  left = {\n+    decimal128(20, 10),\n+    R\"([\n+      \"1234567890.1234567890\",\n+      \"-0.0000000001\",\n+      \"-9999999999.9999999999\"\n+    ])\",\n+  };\n+  right = {\n+    decimal128(13, 3),\n+    R\"([\n+      \"1234567890.123\",\n+      \"0.001\",\n+      \"-9999999999.999\"\n+    ])\",\n+  };\n+  expected = R\"([\n+    \"1524157875323319737.9870903950470\",\n+    \"-0.0000000000001\",\n+    \"99999999999989999999.0000000000001\"\n+  ])\";\n+  this->Assert(\"multiply\", left, right, expected);\n+\n+  left = {\n+    decimal256(30, 3),\n+    R\"([\n+      \"123456789012345678901234567.890\",\n+      \"0.000\"\n+    ])\",\n+  };\n+  right = {\n+    decimal256(20, 9),\n+    R\"([\n+      \"-12345678901.234567890\",\n+      \"99999999999.999999999\"\n+    ])\",\n+  };\n+  expected = R\"([\n+    \"-1524157875323883675034293577501905199.875019052100\",\n+    \"0.000000000000\"\n+  ])\";\n+  this->Assert(\"multiply\", left, right, expected);\n+  // clang-format on\n+\n+  // scalar array\n+  left = {decimal128(3, 2), \"3.14\"};\n+  right = {decimal128(1, 0), R\"([\"1\", \"2\", \"3\", \"4\", \"5\"])\"};\n+  expected = R\"([\"3.14\", \"6.28\", \"9.42\", \"12.56\", \"15.70\"])\";\n+  this->Assert(\"multiply\", left, right, expected);\n+\n+  // scalar scalar\n+  left = {decimal128(1, 0), \"1\"};\n+  right = {decimal128(1, 0), \"1\"};\n+  this->Assert(\"multiply\", left, right, \"1\");\n+\n+  // failed case: result *maybe* overflow\n+  left = {decimal128(20, 0), \"1\"};\n+  right = {decimal128(18, 1), \"1.0\"};\n+  this->AssertFail(\"multiply\", left, right);\n+}\n+\n+TEST_F(TestBinaryArithmeticDecimal, Divide) {\n+  Arg left, right;\n+  std::string expected;\n+\n+  // array array\n+  // clang-format off\n+  left = {decimal128(13, 3), R\"([\"1234567890.123\", \"0.001\"])\"};\n+  right = {decimal128(3, 0), R\"([\"-987\", \"999\"])\"};\n+  // scale = 7\n+  expected = R\"([\"-1250828.6627386\", \"0.0000010\"])\";\n+  this->Assert(\"divide\", left, right, expected);\n+\n+  left = {decimal256(20, 10), R\"([\"1234567890.1234567890\", \"9999999999.9999999999\"])\"};\n+  right = {decimal256(13, 3), R\"([\"1234567890.123\", \"0.001\"])\"};\n+  // scale = 21\n+  expected = R\"([\"1.000000000000369999093\", \"9999999999999.999999900000000000000\"])\";\n+  this->Assert(\"divide\", left, right, expected);\n+  // clang-format on\n\nReview comment:\n       Done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-04T10:33:23.626+0000",
                    "updated": "2021-06-04T10:33:23.626+0000",
                    "started": "2021-06-04T10:33:23.626+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "606991",
                    "issueId": "13367300"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367300/worklog/606992",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #10364:\nURL: https://github.com/apache/arrow/pull/10364#discussion_r645469007\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -516,6 +520,141 @@ std::shared_ptr<ScalarFunction> MakeUnarySignedArithmeticFunctionNotNull(\n   return func;\n }\n \n+// Decimal arithmetics\n+struct BinaryDecimal : public KernelState {\n+  const std::shared_ptr<DecimalType> left_type, right_type;\n+  std::shared_ptr<DataType> out_type;\n+\n+  explicit BinaryDecimal(const KernelInitArgs& args)\n+      : left_type(checked_pointer_cast<DecimalType>(args.inputs[0].type)),\n+        right_type(checked_pointer_cast<DecimalType>(args.inputs[1].type)) {\n+    DCHECK_EQ(left_type->id(), right_type->id());\n+  }\n+\n+  // create instance of derived class T\n+  template <typename T>\n+  static Result<std::unique_ptr<KernelState>> Make(const KernelInitArgs& args) {\n+    auto op = ::arrow::internal::make_unique<T>(args);\n+    if (op->left_type->scale() < 0 || op->right_type->scale() < 0) {\n+      return Status::Invalid(\"Decimals with negative scales not supported\");\n+    }\n+    RETURN_NOT_OK(op->Init(op->left_type->precision(), op->left_type->scale(),\n+                           op->right_type->precision(), op->right_type->scale()));\n+    return std::move(op);\n+  }\n+\n+  // return error and stop kernel execution if output precision is out of bound\n+  Status Init(int32_t out_prec, int32_t out_scale) {\n+    if (left_type->id() == Type::DECIMAL128) {\n+      ARROW_ASSIGN_OR_RAISE(out_type, Decimal128Type::Make(out_prec, out_scale));\n+    } else {\n+      ARROW_ASSIGN_OR_RAISE(out_type, Decimal256Type::Make(out_prec, out_scale));\n+    }\n+    return Status::OK();\n+  }\n+\n+  Result<std::shared_ptr<DataType>> ResolveOutput(const std::vector<ValueDescr>&) const {\n+    return out_type;\n+  }\n+};\n+\n+template <bool IsSubtract>\n+struct AddOrSubtractDecimal : public BinaryDecimal {\n+  using BinaryDecimal::BinaryDecimal;\n+\n+  int32_t left_scaleup, right_scaleup;\n+\n+  // called by kernel::init()\n+  static Result<std::unique_ptr<KernelState>> Make(KernelContext*,\n+                                                   const KernelInitArgs& args) {\n+    return BinaryDecimal::Make<AddOrSubtractDecimal<IsSubtract>>(args);\n+  }\n+\n+  // figure out output type and arg scaling, called by Make()\n+  Status Init(int32_t p1, int32_t s1, int32_t p2, int32_t s2) {\n+    const int32_t out_scale = std::max(s1, s2);\n+    const int32_t out_prec = std::max(p1 - s1, p2 - s2) + 1 + out_scale;\n+    left_scaleup = out_scale - s1;\n+    right_scaleup = out_scale - s2;\n+    return BinaryDecimal::Init(out_prec, out_scale);\n+  }\n+\n+  // called by kerne::exec() for each value pair\n+  // TODO(yibo): avoid repeat rescaling of scalar arg\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 left, Arg1 right, Status*) const {\n+    if (left_scaleup > 0) left = left.IncreaseScaleBy(left_scaleup);\n+    if (right_scaleup > 0) right = right.IncreaseScaleBy(right_scaleup);\n+    if (IsSubtract) right = -right;\n+    return left + right;\n+  }\n+};\n+\n+using AddDecimal = AddOrSubtractDecimal</*IsSubtract=*/false>;\n+using SubtractDecimal = AddOrSubtractDecimal</*IsSubtract=*/true>;\n+\n+struct MultiplyDecimal : public BinaryDecimal {\n+  using BinaryDecimal::BinaryDecimal;\n+\n+  static Result<std::unique_ptr<KernelState>> Make(KernelContext*,\n+                                                   const KernelInitArgs& args) {\n+    return BinaryDecimal::Make<MultiplyDecimal>(args);\n+  }\n+\n+  Status Init(int32_t p1, int32_t s1, int32_t p2, int32_t s2) {\n+    return BinaryDecimal::Init(p1 + p2 + 1, s1 + s2);\n+  }\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 left, Arg1 right, Status*) const {\n+    return left * right;\n+  }\n+};\n+\n+struct DivideDecimal : public BinaryDecimal {\n+  using BinaryDecimal::BinaryDecimal;\n+\n+  int32_t left_scaleup;\n+\n+  static Result<std::unique_ptr<KernelState>> Make(KernelContext*,\n+                                                   const KernelInitArgs& args) {\n+    return BinaryDecimal::Make<DivideDecimal>(args);\n+  }\n+\n+  Status Init(int32_t p1, int32_t s1, int32_t p2, int32_t s2) {\n+    // https://docs.aws.amazon.com/redshift/latest/dg/r_numeric_computations201.html\n\nReview comment:\n       Added explanation to compute.rst\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-04T10:33:39.049+0000",
                    "updated": "2021-06-04T10:33:39.049+0000",
                    "started": "2021-06-04T10:33:39.049+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "606992",
                    "issueId": "13367300"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367300/worklog/607106",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10364:\nURL: https://github.com/apache/arrow/pull/10364#discussion_r645570717\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.h\n##########\n@@ -537,6 +569,20 @@ struct OutputAdapter<Type, enable_if_base_binary<Type>> {\n   }\n };\n \n+template <typename Type>\n+struct OutputAdapter<Type, enable_if_decimal<Type>> {\n+  using T = typename TypeTraits<Type>::ScalarType::ValueType;\n+  template <typename Generator>\n+  static Status Write(KernelContext*, Datum* out, Generator&& generator) {\n+    ArrayData* out_arr = out->mutable_array();\n+    T* out_data = out_arr->GetMutableValues<T>(1);\n\nReview comment:\n       I don't think this is safe for big endian architectures, see definition of `endian_agnostic`\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -1161,5 +1161,306 @@ TYPED_TEST(TestUnaryArithmeticFloating, AbsoluteValue) {\n   }\n }\n \n+class TestBinaryArithmeticDecimal : public TestBase {\n+ protected:\n+  struct Arg {\n+    std::shared_ptr<DataType> type;\n+    std::string value;\n+  };\n+\n+  std::shared_ptr<DataType> GetOutType(const std::string& op,\n\nReview comment:\n       Instead of repeating this logic here, please write some tests exercising just the implicit casts. You can use the `CheckDispatchBest()` helper\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -428,12 +524,69 @@ ArrayKernelExec ArithmeticExecFromOp(detail::GetTypeId get_id) {\n   }\n }\n \n+// calculate output precision/scale and args rescaling per operation type\n+Result<std::shared_ptr<DataType>> GetDecimalBinaryOutput(\n+    const std::string& op, const std::vector<ValueDescr>& values,\n+    std::vector<std::shared_ptr<DataType>>* replaced = nullptr) {\n+  const auto& left_type = checked_pointer_cast<DecimalType>(values[0].type);\n+  const auto& right_type = checked_pointer_cast<DecimalType>(values[1].type);\n+\n+  const int32_t p1 = left_type->precision(), s1 = left_type->scale();\n+  const int32_t p2 = right_type->precision(), s2 = right_type->scale();\n+  if (s1 < 0 || s2 < 0) {\n+    return Status::NotImplemented(\"Decimals with negative scales not supported\");\n+  }\n+\n+  int32_t out_prec, out_scale;\n+  int32_t left_scaleup = 0, right_scaleup = 0;\n+\n+  // decimal upscaling behaviour references amazon redshift\n+  // https://docs.aws.amazon.com/redshift/latest/dg/r_numeric_computations201.html\n+  if (op.find(\"add\") == 0 || op.find(\"subtract\") == 0) {\n+    out_scale = std::max(s1, s2);\n+    out_prec = std::max(p1 - s1, p2 - s2) + 1 + out_scale;\n+    left_scaleup = out_scale - s1;\n+    right_scaleup = out_scale - s2;\n+  } else if (op.find(\"multiply\") == 0) {\n+    out_scale = s1 + s2;\n+    out_prec = p1 + p2 + 1;\n+  } else if (op.find(\"divide\") == 0) {\n+    out_scale = std::max(4, s1 + p2 - s2 + 1);\n+    out_prec = p1 - s1 + s2 + out_scale;  // >= p1 + p2 + 1\n+    left_scaleup = out_prec - p1;\n+  } else {\n+    return Status::Invalid(\"Invalid decimal operation: \", op);\n+  }\n+\n+  const auto id = left_type->id();\n\nReview comment:\n       if we add decimal128 + decimal256, shouldn't the output type be decimal256 instead of simply taking the LHS' width?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -428,12 +524,69 @@ ArrayKernelExec ArithmeticExecFromOp(detail::GetTypeId get_id) {\n   }\n }\n \n+// calculate output precision/scale and args rescaling per operation type\n+Result<std::shared_ptr<DataType>> GetDecimalBinaryOutput(\n+    const std::string& op, const std::vector<ValueDescr>& values,\n+    std::vector<std::shared_ptr<DataType>>* replaced = nullptr) {\n+  const auto& left_type = checked_pointer_cast<DecimalType>(values[0].type);\n+  const auto& right_type = checked_pointer_cast<DecimalType>(values[1].type);\n+\n+  const int32_t p1 = left_type->precision(), s1 = left_type->scale();\n+  const int32_t p2 = right_type->precision(), s2 = right_type->scale();\n+  if (s1 < 0 || s2 < 0) {\n+    return Status::NotImplemented(\"Decimals with negative scales not supported\");\n+  }\n+\n+  int32_t out_prec, out_scale;\n+  int32_t left_scaleup = 0, right_scaleup = 0;\n+\n+  // decimal upscaling behaviour references amazon redshift\n+  // https://docs.aws.amazon.com/redshift/latest/dg/r_numeric_computations201.html\n+  if (op.find(\"add\") == 0 || op.find(\"subtract\") == 0) {\n+    out_scale = std::max(s1, s2);\n+    out_prec = std::max(p1 - s1, p2 - s2) + 1 + out_scale;\n+    left_scaleup = out_scale - s1;\n+    right_scaleup = out_scale - s2;\n\nReview comment:\n       I think this could be the default case; it's what would be used for any comparison kernel, for example\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -451,8 +604,45 @@ struct ArithmeticFunction : ScalarFunction {\n     if (auto kernel = DispatchExactImpl(this, *values)) return kernel;\n     return arrow::compute::detail::NoMatchingKernel(this, *values);\n   }\n+\n+  Result<const Kernel*> DispatchDecimal(std::vector<ValueDescr>* values) const {\n+    if (values->size() == 2) {\n+      std::vector<std::shared_ptr<DataType>> replaced;\n+      RETURN_NOT_OK(GetDecimalBinaryOutput(name(), *values, &replaced));\n+      (*values)[0].type = std::move(replaced[0]);\n+      (*values)[1].type = std::move(replaced[1]);\n+    }\n+\n+    using arrow::compute::detail::DispatchExactImpl;\n+    if (auto kernel = DispatchExactImpl(this, *values)) return kernel;\n+    return arrow::compute::detail::NoMatchingKernel(this, *values);\n+  }\n+};\n+\n+// resolve decimal operation output type\n+struct DecimalBinaryOutputResolver {\n+  std::string func_name;\n+\n+  DecimalBinaryOutputResolver(std::string func_name) : func_name(std::move(func_name)) {}\n+\n+  Result<ValueDescr> operator()(KernelContext*, const std::vector<ValueDescr>& args) {\n+    ARROW_ASSIGN_OR_RAISE(auto out_type, GetDecimalBinaryOutput(func_name, args));\n+    return ValueDescr(std::move(out_type));\n\nReview comment:\n       ```suggestion\r\n       return ValueDescr(std::move(out_type), GetBroadcastShape(args));\r\n   ```\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -286,11 +286,29 @@ an ``Invalid`` :class:`Status` when overflow is detected.\n +--------------------------+------------+--------------------+---------------------+\n | power_checked            | Binary     | Numeric            | Numeric             |\n +--------------------------+------------+--------------------+---------------------+\n-| subtract                 | Binary     | Numeric            | Numeric             |\n+| subtract                 | Binary     | Numeric            | Numeric (1)         |\n +--------------------------+------------+--------------------+---------------------+\n-| subtract_checked         | Binary     | Numeric            | Numeric             |\n+| subtract_checked         | Binary     | Numeric            | Numeric (1)         |\n +--------------------------+------------+--------------------+---------------------+\n \n+* \\(1) Precision and scale of computed DECIMAL results\n+\n++------------+---------------------------------------------+\n+| Operation  | Result precision and scale                  |\n++============+=============================================+\n+| | add      | | scale = max(s1, s2)                       |\n+| | subtract | | precision = max(p1-s1, p2-s2) + 1 + scale |\n++------------+---------------------------------------------+\n+| multiply   | | scale = s1 + s2                           |\n+|            | | precision = p1 + p2 + 1                   |\n++------------+---------------------------------------------+\n+| divide     | | scale = max(4, s1 + p2 - s2 + 1)          |\n+|            | | precision = p1 - s1 + s2 + scale          |\n\nReview comment:\n       ```suggestion\r\n   | add        | scale = max(s1, s2)                         |\r\n   | subtract   | precision = max(p1-s1, p2-s2) + 1 + scale   |\r\n   +------------+---------------------------------------------+\r\n   | multiply   | scale = s1 + s2                             |\r\n   |            | precision = p1 + p2 + 1                     |\r\n   +------------+---------------------------------------------+\r\n   | divide     | scale = max(4, s1 + p2 - s2 + 1)            |\r\n   |            | precision = p1 - s1 + s2 + scale            |\r\n   ```\r\n   \r\n   Please mention that this is compatible with Redshift's decimal promotion rules.\r\n   Additionally, please include an explanation of why this is reasonable.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -428,12 +524,69 @@ ArrayKernelExec ArithmeticExecFromOp(detail::GetTypeId get_id) {\n   }\n }\n \n+// calculate output precision/scale and args rescaling per operation type\n+Result<std::shared_ptr<DataType>> GetDecimalBinaryOutput(\n+    const std::string& op, const std::vector<ValueDescr>& values,\n+    std::vector<std::shared_ptr<DataType>>* replaced = nullptr) {\n+  const auto& left_type = checked_pointer_cast<DecimalType>(values[0].type);\n+  const auto& right_type = checked_pointer_cast<DecimalType>(values[1].type);\n\nReview comment:\n       ```suggestion\r\n     auto left_type = checked_cast<const DecimalType*>(values[0].type.get());\r\n     auto right_type = checked_cast<const DecimalType*>(values[1].type.get());\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -428,12 +524,69 @@ ArrayKernelExec ArithmeticExecFromOp(detail::GetTypeId get_id) {\n   }\n }\n \n+// calculate output precision/scale and args rescaling per operation type\n+Result<std::shared_ptr<DataType>> GetDecimalBinaryOutput(\n+    const std::string& op, const std::vector<ValueDescr>& values,\n+    std::vector<std::shared_ptr<DataType>>* replaced = nullptr) {\n+  const auto& left_type = checked_pointer_cast<DecimalType>(values[0].type);\n+  const auto& right_type = checked_pointer_cast<DecimalType>(values[1].type);\n+\n+  const int32_t p1 = left_type->precision(), s1 = left_type->scale();\n+  const int32_t p2 = right_type->precision(), s2 = right_type->scale();\n+  if (s1 < 0 || s2 < 0) {\n+    return Status::NotImplemented(\"Decimals with negative scales not supported\");\n+  }\n+\n+  int32_t out_prec, out_scale;\n+  int32_t left_scaleup = 0, right_scaleup = 0;\n+\n+  // decimal upscaling behaviour references amazon redshift\n+  // https://docs.aws.amazon.com/redshift/latest/dg/r_numeric_computations201.html\n+  if (op.find(\"add\") == 0 || op.find(\"subtract\") == 0) {\n+    out_scale = std::max(s1, s2);\n+    out_prec = std::max(p1 - s1, p2 - s2) + 1 + out_scale;\n+    left_scaleup = out_scale - s1;\n+    right_scaleup = out_scale - s2;\n+  } else if (op.find(\"multiply\") == 0) {\n+    out_scale = s1 + s2;\n+    out_prec = p1 + p2 + 1;\n+  } else if (op.find(\"divide\") == 0) {\n+    out_scale = std::max(4, s1 + p2 - s2 + 1);\n+    out_prec = p1 - s1 + s2 + out_scale;  // >= p1 + p2 + 1\n+    left_scaleup = out_prec - p1;\n+  } else {\n+    return Status::Invalid(\"Invalid decimal operation: \", op);\n+  }\n+\n+  const auto id = left_type->id();\n+  auto make = [id](int32_t precision, int32_t scale) {\n\nReview comment:\n       This seems reusable, could you expose it as `DecimalType::Make(width/id, precision, scale)`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -1161,5 +1161,306 @@ TYPED_TEST(TestUnaryArithmeticFloating, AbsoluteValue) {\n   }\n }\n \n+class TestBinaryArithmeticDecimal : public TestBase {\n+ protected:\n+  struct Arg {\n+    std::shared_ptr<DataType> type;\n+    std::string value;\n+  };\n+\n+  std::shared_ptr<DataType> GetOutType(const std::string& op,\n+                                       const std::shared_ptr<DataType>& left_type,\n+                                       const std::shared_ptr<DataType>& right_type) {\n+    auto left_decimal_type = std::static_pointer_cast<DecimalType>(left_type);\n+    auto right_decimal_type = std::static_pointer_cast<DecimalType>(right_type);\n+\n+    const int32_t p1 = left_decimal_type->precision(), s1 = left_decimal_type->scale();\n+    const int32_t p2 = right_decimal_type->precision(), s2 = right_decimal_type->scale();\n+\n+    // https://docs.aws.amazon.com/redshift/latest/dg/r_numeric_computations201.html\n+    int32_t precision, scale;\n+    if (op == \"add\" || op == \"subtract\") {\n+      scale = std::max(s1, s2);\n+      precision = std::max(p1 - s1, p2 - s2) + 1 + scale;\n+    } else if (op == \"multiply\") {\n+      scale = s1 + s2;\n+      precision = p1 + p2 + 1;\n+    } else if (op == \"divide\") {\n+      scale = std::max(4, s1 + p2 - s2 + 1);\n+      precision = p1 - s1 + s2 + scale;\n+    } else {\n+      ABORT_NOT_OK(Status::Invalid(\"invalid binary operator: \", op));\n+    }\n+\n+    std::shared_ptr<DataType> type;\n+    if (left_type->id() == Type::DECIMAL128) {\n+      ASSIGN_OR_ABORT(type, Decimal128Type::Make(precision, scale));\n+    } else {\n+      ASSIGN_OR_ABORT(type, Decimal256Type::Make(precision, scale));\n+    }\n+    return type;\n+  }\n+\n+  std::shared_ptr<Scalar> MakeScalar(const std::shared_ptr<DataType>& type,\n+                                     const std::string& str) {\n+    std::shared_ptr<Scalar> scalar;\n+    if (type->id() == Type::DECIMAL128) {\n+      Decimal128 value;\n+      int32_t dummy;\n+      ABORT_NOT_OK(Decimal128::FromString(str, &value, &dummy));\n+      ASSIGN_OR_ABORT(scalar, arrow::MakeScalar(type, value));\n+    } else {\n+      Decimal256 value;\n+      int32_t dummy;\n+      ABORT_NOT_OK(Decimal256::FromString(str, &value, &dummy));\n+      ASSIGN_OR_ABORT(scalar, arrow::MakeScalar(type, value));\n+    }\n+    return scalar;\n+  }\n+\n+  Datum ToDatum(const std::shared_ptr<DataType>& type, const std::string& value) {\n+    if (value.find(\"[\") == std::string::npos) {\n+      return Datum(MakeScalar(type, value));\n+    } else {\n+      return Datum(ArrayFromJSON(type, value));\n+    }\n+  }\n+\n+  void Assert(const std::string& op, const Arg& left, const Arg& right,\n\nReview comment:\n       This is confusingly indirect. Could you instead directly call CheckScalar in the test cases?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -428,12 +524,69 @@ ArrayKernelExec ArithmeticExecFromOp(detail::GetTypeId get_id) {\n   }\n }\n \n+// calculate output precision/scale and args rescaling per operation type\n+Result<std::shared_ptr<DataType>> GetDecimalBinaryOutput(\n\nReview comment:\n       Please open a follow up JIRA to make this public so it can be reused (for example in the comparison functions)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -451,8 +604,45 @@ struct ArithmeticFunction : ScalarFunction {\n     if (auto kernel = DispatchExactImpl(this, *values)) return kernel;\n     return arrow::compute::detail::NoMatchingKernel(this, *values);\n   }\n+\n+  Result<const Kernel*> DispatchDecimal(std::vector<ValueDescr>* values) const {\n+    if (values->size() == 2) {\n+      std::vector<std::shared_ptr<DataType>> replaced;\n+      RETURN_NOT_OK(GetDecimalBinaryOutput(name(), *values, &replaced));\n+      (*values)[0].type = std::move(replaced[0]);\n+      (*values)[1].type = std::move(replaced[1]);\n+    }\n+\n+    using arrow::compute::detail::DispatchExactImpl;\n+    if (auto kernel = DispatchExactImpl(this, *values)) return kernel;\n+    return arrow::compute::detail::NoMatchingKernel(this, *values);\n+  }\n+};\n+\n+// resolve decimal operation output type\n+struct DecimalBinaryOutputResolver {\n+  std::string func_name;\n+\n+  DecimalBinaryOutputResolver(std::string func_name) : func_name(std::move(func_name)) {}\n+\n+  Result<ValueDescr> operator()(KernelContext*, const std::vector<ValueDescr>& args) {\n+    ARROW_ASSIGN_OR_RAISE(auto out_type, GetDecimalBinaryOutput(func_name, args));\n\nReview comment:\n       GetDecimalBinaryOutput can't be reused here since the output resolver receives post-implicit-cast argument types. For example, in the case of `decimal(13, 3) / decimal(3, 0)`: we expect to cast the left to `decimal(20, 10)`, leave the right uncasted, and output to `decimal(20, 7)` (IIUC). So the output resolver needs to compute `decimal(20, 7)` given `decimal(20, 10)` and `decimal(3, 0)`\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -428,12 +524,69 @@ ArrayKernelExec ArithmeticExecFromOp(detail::GetTypeId get_id) {\n   }\n }\n \n+// calculate output precision/scale and args rescaling per operation type\n+Result<std::shared_ptr<DataType>> GetDecimalBinaryOutput(\n+    const std::string& op, const std::vector<ValueDescr>& values,\n+    std::vector<std::shared_ptr<DataType>>* replaced = nullptr) {\n+  const auto& left_type = checked_pointer_cast<DecimalType>(values[0].type);\n+  const auto& right_type = checked_pointer_cast<DecimalType>(values[1].type);\n+\n+  const int32_t p1 = left_type->precision(), s1 = left_type->scale();\n+  const int32_t p2 = right_type->precision(), s2 = right_type->scale();\n+  if (s1 < 0 || s2 < 0) {\n+    return Status::NotImplemented(\"Decimals with negative scales not supported\");\n+  }\n+\n+  int32_t out_prec, out_scale;\n+  int32_t left_scaleup = 0, right_scaleup = 0;\n+\n+  // decimal upscaling behaviour references amazon redshift\n+  // https://docs.aws.amazon.com/redshift/latest/dg/r_numeric_computations201.html\n+  if (op.find(\"add\") == 0 || op.find(\"subtract\") == 0) {\n+    out_scale = std::max(s1, s2);\n+    out_prec = std::max(p1 - s1, p2 - s2) + 1 + out_scale;\n+    left_scaleup = out_scale - s1;\n+    right_scaleup = out_scale - s2;\n+  } else if (op.find(\"multiply\") == 0) {\n+    out_scale = s1 + s2;\n+    out_prec = p1 + p2 + 1;\n+  } else if (op.find(\"divide\") == 0) {\n+    out_scale = std::max(4, s1 + p2 - s2 + 1);\n+    out_prec = p1 - s1 + s2 + out_scale;  // >= p1 + p2 + 1\n+    left_scaleup = out_prec - p1;\n+  } else {\n+    return Status::Invalid(\"Invalid decimal operation: \", op);\n+  }\n+\n+  const auto id = left_type->id();\n+  auto make = [id](int32_t precision, int32_t scale) {\n+    if (id == Type::DECIMAL128) {\n+      return Decimal128Type::Make(precision, scale);\n+    } else {\n+      return Decimal256Type::Make(precision, scale);\n+    }\n+  };\n+\n+  if (replaced) {\n+    replaced->resize(2);\n+    ARROW_ASSIGN_OR_RAISE((*replaced)[0], make(p1 + left_scaleup, s1 + left_scaleup));\n+    ARROW_ASSIGN_OR_RAISE((*replaced)[1], make(p2 + right_scaleup, s2 + right_scaleup));\n+  }\n+\n+  return make(out_prec, out_scale);\n+}\n+\n struct ArithmeticFunction : ScalarFunction {\n   using ScalarFunction::ScalarFunction;\n \n   Result<const Kernel*> DispatchBest(std::vector<ValueDescr>* values) const override {\n     RETURN_NOT_OK(CheckArity(*values));\n \n+    const auto type_id = (*values)[0].type->id();\n\nReview comment:\n       This will currently fail for decimal + float and float + decimal. Please add tests for these cases (`CheckDispatchBest` again)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -428,12 +524,69 @@ ArrayKernelExec ArithmeticExecFromOp(detail::GetTypeId get_id) {\n   }\n }\n \n+// calculate output precision/scale and args rescaling per operation type\n+Result<std::shared_ptr<DataType>> GetDecimalBinaryOutput(\n+    const std::string& op, const std::vector<ValueDescr>& values,\n+    std::vector<std::shared_ptr<DataType>>* replaced = nullptr) {\n+  const auto& left_type = checked_pointer_cast<DecimalType>(values[0].type);\n+  const auto& right_type = checked_pointer_cast<DecimalType>(values[1].type);\n+\n+  const int32_t p1 = left_type->precision(), s1 = left_type->scale();\n+  const int32_t p2 = right_type->precision(), s2 = right_type->scale();\n+  if (s1 < 0 || s2 < 0) {\n+    return Status::NotImplemented(\"Decimals with negative scales not supported\");\n+  }\n+\n+  int32_t out_prec, out_scale;\n+  int32_t left_scaleup = 0, right_scaleup = 0;\n+\n+  // decimal upscaling behaviour references amazon redshift\n+  // https://docs.aws.amazon.com/redshift/latest/dg/r_numeric_computations201.html\n+  if (op.find(\"add\") == 0 || op.find(\"subtract\") == 0) {\n+    out_scale = std::max(s1, s2);\n+    out_prec = std::max(p1 - s1, p2 - s2) + 1 + out_scale;\n+    left_scaleup = out_scale - s1;\n+    right_scaleup = out_scale - s2;\n\nReview comment:\n       Additionally, I think this could be defined for the varargs case (so it could be used in elementwise_min/elementwise_max/...)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -1161,5 +1161,306 @@ TYPED_TEST(TestUnaryArithmeticFloating, AbsoluteValue) {\n   }\n }\n \n+class TestBinaryArithmeticDecimal : public TestBase {\n+ protected:\n+  struct Arg {\n+    std::shared_ptr<DataType> type;\n+    std::string value;\n+  };\n+\n+  std::shared_ptr<DataType> GetOutType(const std::string& op,\n\nReview comment:\n       Also, please make the expected output type explicit instead of computed in the test cases below\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-04T14:20:53.746+0000",
                    "updated": "2021-06-04T14:20:53.746+0000",
                    "started": "2021-06-04T14:20:53.746+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "607106",
                    "issueId": "13367300"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367300/worklog/607115",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #10364:\nURL: https://github.com/apache/arrow/pull/10364#discussion_r645625763\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -286,11 +286,29 @@ an ``Invalid`` :class:`Status` when overflow is detected.\n +--------------------------+------------+--------------------+---------------------+\n | power_checked            | Binary     | Numeric            | Numeric             |\n +--------------------------+------------+--------------------+---------------------+\n-| subtract                 | Binary     | Numeric            | Numeric             |\n+| subtract                 | Binary     | Numeric            | Numeric (1)         |\n +--------------------------+------------+--------------------+---------------------+\n-| subtract_checked         | Binary     | Numeric            | Numeric             |\n+| subtract_checked         | Binary     | Numeric            | Numeric (1)         |\n +--------------------------+------------+--------------------+---------------------+\n \n+* \\(1) Precision and scale of computed DECIMAL results\n+\n++------------+---------------------------------------------+\n+| Operation  | Result precision and scale                  |\n++============+=============================================+\n+| | add      | | scale = max(s1, s2)                       |\n+| | subtract | | precision = max(p1-s1, p2-s2) + 1 + scale |\n++------------+---------------------------------------------+\n+| multiply   | | scale = s1 + s2                           |\n+|            | | precision = p1 + p2 + 1                   |\n++------------+---------------------------------------------+\n+| divide     | | scale = max(4, s1 + p2 - s2 + 1)          |\n+|            | | precision = p1 - s1 + s2 + scale          |\n\nReview comment:\n       The extra `|` are added delibrately to show multiple lines in the table.\r\n   Otherwise, the two lines in a table cell will be shown in one line in the browser.\r\n   I checked the rst output in an [online rst editor](http://rst.ninjs.org/#Ky0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rCnwgT3BlcmF0aW9uICB8IFJlc3VsdCBwcmVjaXNpb24gYW5kIHNjYWxlICAgICAgICAgICAgICAgICAgfAorPT09PT09PT09PT09Kz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSsKfCB8IGFkZCAgICAgIHwgfCBzY2FsZSA9IG1heChzMSwgczIpICAgICAgICAgICAgICAgICAgICAgICB8CnwgfCBzdWJ0cmFjdCB8IHwgcHJlY2lzaW9uID0gbWF4KHAxLXMxLCBwMi1zMikgKyAxICsgc2NhbGUgfAorLS0tLS0tLS0tLS0tKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsKCgorLS0tLS0tLS0tLS0tKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsKfCBPcGVyYXRpb24gIHwgUmVzdWx0IHByZWNpc2lvbiBhbmQgc2NhbGUgICAgICAgICAgICAgICAgICB8Cis9PT09PT09PT09PT0rPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Kwp8IGFkZCAgICAgICAgfCBzY2FsZSA9IG1heChzMSwgczIpICAgICAgICAgICAgICAgICAgICAgICAgIHwKfCBzdWJ0cmFjdCAgIHwgcHJlY2lzaW9uID0gbWF4KHAxLXMxLCBwMi1zMikgKyAxICsgc2NhbGUgICB8CistLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKw==).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-04T14:41:18.717+0000",
                    "updated": "2021-06-04T14:41:18.717+0000",
                    "started": "2021-06-04T14:41:18.717+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "607115",
                    "issueId": "13367300"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367300/worklog/607117",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #10364:\nURL: https://github.com/apache/arrow/pull/10364#discussion_r645630243\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.h\n##########\n@@ -537,6 +569,20 @@ struct OutputAdapter<Type, enable_if_base_binary<Type>> {\n   }\n };\n \n+template <typename Type>\n+struct OutputAdapter<Type, enable_if_decimal<Type>> {\n+  using T = typename TypeTraits<Type>::ScalarType::ValueType;\n+  template <typename Generator>\n+  static Status Write(KernelContext*, Datum* out, Generator&& generator) {\n+    ArrayData* out_arr = out->mutable_array();\n+    T* out_data = out_arr->GetMutableValues<T>(1);\n\nReview comment:\n       I used `endian_agnostic` trick in `OutputArrayWriter`.\r\n   Looks this function is safe (s390 ci did pass). Will double check.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-04T14:47:27.592+0000",
                    "updated": "2021-06-04T14:47:27.592+0000",
                    "started": "2021-06-04T14:47:27.592+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "607117",
                    "issueId": "13367300"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 24000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5fb35d4[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@36c3d799[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42909690[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6a47fe44[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@312d832b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@654861c9[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@23aa5fe6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@76ca2009[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2ba3c120[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@dc3abb4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7c679085[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5b8a2d68[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 24000,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Jun 18 18:21:18 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-06-18T18:21:18.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12074/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2021-03-24T16:50:44.000+0000",
        "updated": "2021-08-04T08:51:03.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 24000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Compute] Add scalar arithmetic kernels for decimal inputs",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367300/comment/17365652",
                    "id": "17365652",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 10364\n[https://github.com/apache/arrow/pull/10364]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-06-18T18:21:18.964+0000",
                    "updated": "2021-06-18T18:21:18.964+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0p568:",
        "customfield_12314139": null
    }
}