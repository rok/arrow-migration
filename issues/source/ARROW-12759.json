{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13378153",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378153",
    "key": "ARROW-12759",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "query-engine"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12615487",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12615487",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13376404",
                    "key": "ARROW-12633",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13376404",
                    "fields": {
                        "summary": "[C++] Query engine umbrella issue",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12619956",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12619956",
                "type": {
                    "id": "12310660",
                    "name": "Completes",
                    "inward": "is fixed by",
                    "outward": "fixes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310660"
                },
                "outwardIssue": {
                    "id": "13361916",
                    "key": "ARROW-11840",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361916",
                    "fields": {
                        "summary": "[C++][Compute] Support merging GroupByState for multithreaded aggregation",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12620432",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12620432",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13223616",
                    "key": "ARROW-5002",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13223616",
                    "fields": {
                        "summary": "[C++] Implement Hash Aggregation query execution node",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=michalno",
            "name": "michalno",
            "key": "michalno",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Michal Nowakiewicz",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12759/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 9,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378153/worklog/618888",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "michalursa opened a new pull request #10660:\nURL: https://github.com/apache/arrow/pull/10660\n\n\n   Adding ExecNode for grouped aggregation.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-06T06:27:35.435+0000",
                    "updated": "2021-07-06T06:27:35.435+0000",
                    "started": "2021-07-06T06:27:35.434+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "618888",
                    "issueId": "13378153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378153/worklog/618889",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10660:\nURL: https://github.com/apache/arrow/pull/10660#issuecomment-874495739\n\n\n   https://issues.apache.org/jira/browse/ARROW-12759\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-06T06:27:49.024+0000",
                    "updated": "2021-07-06T06:27:49.024+0000",
                    "started": "2021-07-06T06:27:49.024+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "618889",
                    "issueId": "13378153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378153/worklog/619272",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "michalursa opened a new pull request #10660:\nURL: https://github.com/apache/arrow/pull/10660\n\n\n   Adding ExecNode for grouped aggregation.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-06T11:40:30.769+0000",
                    "updated": "2021-07-06T11:40:30.769+0000",
                    "started": "2021-07-06T11:40:30.769+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "619272",
                    "issueId": "13378153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378153/worklog/619290",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10660:\nURL: https://github.com/apache/arrow/pull/10660#issuecomment-874495739\n\n\n   https://issues.apache.org/jira/browse/ARROW-12759\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-06T11:43:57.012+0000",
                    "updated": "2021-07-06T11:43:57.012+0000",
                    "started": "2021-07-06T11:43:57.012+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "619290",
                    "issueId": "13378153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378153/worklog/619367",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10660:\nURL: https://github.com/apache/arrow/pull/10660#discussion_r664575727\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/exec_plan.cc\n##########\n@@ -565,5 +565,253 @@ AsyncGenerator<util::optional<ExecBatch>> MakeSinkNode(ExecNode* input,\n   return out;\n }\n \n+struct GroupByNode : ExecNode {\n+  GroupByNode(ExecNode* input, std::string label, std::shared_ptr<Schema> output_schema,\n+              ExecContext* ctx, const std::vector<int>&& key_field_ids,\n+              std::unique_ptr<internal::Grouper>&& grouper,\n+              const std::vector<int>&& agg_src_field_ids,\n+              const std::vector<const HashAggregateKernel*>&& agg_kernels,\n+              std::vector<std::unique_ptr<KernelState>>&& agg_states)\n+      : ExecNode(input->plan(), std::move(label), {input}, {\"groupby\"},\n+                 std::move(output_schema), /*num_outputs=*/1),\n+        ctx_(ctx),\n+        key_field_ids_(std::move(key_field_ids)),\n+        grouper_(std::move(grouper)),\n+        agg_src_field_ids_(std::move(agg_src_field_ids)),\n+        agg_kernels_(std::move(agg_kernels)),\n+        agg_states_(std::move(agg_states)) {}\n+\n+  const char* kind_name() override { return \"GroupByNode\"; }\n+\n+  Status ProcessInputBatch(const ExecBatch& batch) {\n+    // Create a batch with key columns\n+    std::vector<Datum> keys(key_field_ids_.size());\n+    for (size_t i = 0; i < key_field_ids_.size(); ++i) {\n+      keys[i] = batch.values[key_field_ids_[i]];\n+    }\n+    ARROW_ASSIGN_OR_RAISE(ExecBatch key_batch, ExecBatch::Make(keys));\n+\n+    // Create a batch with group ids\n+    ARROW_ASSIGN_OR_RAISE(Datum id_batch, grouper_->Consume(key_batch));\n+\n+    // Execute aggregate kernels\n+    auto num_groups = grouper_->num_groups();\n+    for (size_t i = 0; i < agg_kernels_.size(); ++i) {\n+      KernelContext kernel_ctx{ctx_};\n+      kernel_ctx.SetState(agg_states_[i].get());\n+      ARROW_ASSIGN_OR_RAISE(\n+          auto agg_batch, ExecBatch::Make({batch.values[agg_src_field_ids_[i]], id_batch,\n+                                           Datum(num_groups)}));\n+      RETURN_NOT_OK(agg_kernels_[i]->consume(&kernel_ctx, agg_batch));\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status OutputResult() {\n+    // Finalize output\n+    ArrayDataVector out_data(agg_kernels_.size() + key_field_ids_.size());\n+    auto it = out_data.begin();\n+\n+    for (size_t i = 0; i < agg_kernels_.size(); ++i) {\n+      KernelContext batch_ctx{ctx_};\n+      batch_ctx.SetState(agg_states_[i].get());\n+      Datum out;\n+      RETURN_NOT_OK(agg_kernels_[i]->finalize(&batch_ctx, &out));\n+      *it++ = out.array();\n+    }\n+\n+    ARROW_ASSIGN_OR_RAISE(ExecBatch out_keys, grouper_->GetUniques());\n+    for (const auto& key : out_keys.values) {\n+      *it++ = key.array();\n+    }\n+\n+    uint32_t num_groups = grouper_->num_groups();\n+    int num_result_batches = (num_groups + output_batch_size_ - 1) / output_batch_size_;\n+    outputs_[0]->InputFinished(this, num_result_batches);\n+\n+    for (int i = 0; i < num_result_batches; ++i) {\n+      // Check finished flag\n+      if (finished_) {\n\nReview comment:\n       ```suggestion\r\n         if (stop_requested_) {\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/exec/exec_plan.cc\n##########\n@@ -565,5 +565,253 @@ AsyncGenerator<util::optional<ExecBatch>> MakeSinkNode(ExecNode* input,\n   return out;\n }\n \n+struct GroupByNode : ExecNode {\n+  GroupByNode(ExecNode* input, std::string label, std::shared_ptr<Schema> output_schema,\n+              ExecContext* ctx, const std::vector<int>&& key_field_ids,\n+              std::unique_ptr<internal::Grouper>&& grouper,\n+              const std::vector<int>&& agg_src_field_ids,\n+              const std::vector<const HashAggregateKernel*>&& agg_kernels,\n+              std::vector<std::unique_ptr<KernelState>>&& agg_states)\n+      : ExecNode(input->plan(), std::move(label), {input}, {\"groupby\"},\n+                 std::move(output_schema), /*num_outputs=*/1),\n+        ctx_(ctx),\n+        key_field_ids_(std::move(key_field_ids)),\n+        grouper_(std::move(grouper)),\n+        agg_src_field_ids_(std::move(agg_src_field_ids)),\n+        agg_kernels_(std::move(agg_kernels)),\n+        agg_states_(std::move(agg_states)) {}\n+\n+  const char* kind_name() override { return \"GroupByNode\"; }\n+\n+  Status ProcessInputBatch(const ExecBatch& batch) {\n+    // Create a batch with key columns\n+    std::vector<Datum> keys(key_field_ids_.size());\n+    for (size_t i = 0; i < key_field_ids_.size(); ++i) {\n+      keys[i] = batch.values[key_field_ids_[i]];\n+    }\n+    ARROW_ASSIGN_OR_RAISE(ExecBatch key_batch, ExecBatch::Make(keys));\n+\n+    // Create a batch with group ids\n+    ARROW_ASSIGN_OR_RAISE(Datum id_batch, grouper_->Consume(key_batch));\n+\n+    // Execute aggregate kernels\n+    auto num_groups = grouper_->num_groups();\n+    for (size_t i = 0; i < agg_kernels_.size(); ++i) {\n+      KernelContext kernel_ctx{ctx_};\n+      kernel_ctx.SetState(agg_states_[i].get());\n+      ARROW_ASSIGN_OR_RAISE(\n+          auto agg_batch, ExecBatch::Make({batch.values[agg_src_field_ids_[i]], id_batch,\n+                                           Datum(num_groups)}));\n+      RETURN_NOT_OK(agg_kernels_[i]->consume(&kernel_ctx, agg_batch));\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status OutputResult() {\n+    // Finalize output\n+    ArrayDataVector out_data(agg_kernels_.size() + key_field_ids_.size());\n+    auto it = out_data.begin();\n+\n+    for (size_t i = 0; i < agg_kernels_.size(); ++i) {\n+      KernelContext batch_ctx{ctx_};\n+      batch_ctx.SetState(agg_states_[i].get());\n+      Datum out;\n+      RETURN_NOT_OK(agg_kernels_[i]->finalize(&batch_ctx, &out));\n+      *it++ = out.array();\n+    }\n+\n+    ARROW_ASSIGN_OR_RAISE(ExecBatch out_keys, grouper_->GetUniques());\n+    for (const auto& key : out_keys.values) {\n+      *it++ = key.array();\n+    }\n+\n+    uint32_t num_groups = grouper_->num_groups();\n+    int num_result_batches = (num_groups + output_batch_size_ - 1) / output_batch_size_;\n+    outputs_[0]->InputFinished(this, num_result_batches);\n+\n+    for (int i = 0; i < num_result_batches; ++i) {\n\nReview comment:\n       Eventually this will need to re-seed parallelism by sumbitting the calls to `outputs_[0]->InputReceived` to the Executor\n\n##########\nFile path: cpp/src/arrow/compute/exec/exec_plan.cc\n##########\n@@ -565,5 +565,253 @@ AsyncGenerator<util::optional<ExecBatch>> MakeSinkNode(ExecNode* input,\n   return out;\n }\n \n+struct GroupByNode : ExecNode {\n+  GroupByNode(ExecNode* input, std::string label, std::shared_ptr<Schema> output_schema,\n+              ExecContext* ctx, const std::vector<int>&& key_field_ids,\n+              std::unique_ptr<internal::Grouper>&& grouper,\n+              const std::vector<int>&& agg_src_field_ids,\n+              const std::vector<const HashAggregateKernel*>&& agg_kernels,\n+              std::vector<std::unique_ptr<KernelState>>&& agg_states)\n+      : ExecNode(input->plan(), std::move(label), {input}, {\"groupby\"},\n+                 std::move(output_schema), /*num_outputs=*/1),\n+        ctx_(ctx),\n+        key_field_ids_(std::move(key_field_ids)),\n+        grouper_(std::move(grouper)),\n+        agg_src_field_ids_(std::move(agg_src_field_ids)),\n+        agg_kernels_(std::move(agg_kernels)),\n+        agg_states_(std::move(agg_states)) {}\n+\n+  const char* kind_name() override { return \"GroupByNode\"; }\n+\n+  Status ProcessInputBatch(const ExecBatch& batch) {\n+    // Create a batch with key columns\n+    std::vector<Datum> keys(key_field_ids_.size());\n+    for (size_t i = 0; i < key_field_ids_.size(); ++i) {\n+      keys[i] = batch.values[key_field_ids_[i]];\n+    }\n+    ARROW_ASSIGN_OR_RAISE(ExecBatch key_batch, ExecBatch::Make(keys));\n+\n+    // Create a batch with group ids\n+    ARROW_ASSIGN_OR_RAISE(Datum id_batch, grouper_->Consume(key_batch));\n+\n+    // Execute aggregate kernels\n+    auto num_groups = grouper_->num_groups();\n+    for (size_t i = 0; i < agg_kernels_.size(); ++i) {\n+      KernelContext kernel_ctx{ctx_};\n+      kernel_ctx.SetState(agg_states_[i].get());\n+      ARROW_ASSIGN_OR_RAISE(\n+          auto agg_batch, ExecBatch::Make({batch.values[agg_src_field_ids_[i]], id_batch,\n+                                           Datum(num_groups)}));\n+      RETURN_NOT_OK(agg_kernels_[i]->consume(&kernel_ctx, agg_batch));\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status OutputResult() {\n+    // Finalize output\n+    ArrayDataVector out_data(agg_kernels_.size() + key_field_ids_.size());\n+    auto it = out_data.begin();\n+\n+    for (size_t i = 0; i < agg_kernels_.size(); ++i) {\n+      KernelContext batch_ctx{ctx_};\n+      batch_ctx.SetState(agg_states_[i].get());\n+      Datum out;\n+      RETURN_NOT_OK(agg_kernels_[i]->finalize(&batch_ctx, &out));\n+      *it++ = out.array();\n+    }\n+\n+    ARROW_ASSIGN_OR_RAISE(ExecBatch out_keys, grouper_->GetUniques());\n+    for (const auto& key : out_keys.values) {\n+      *it++ = key.array();\n+    }\n+\n+    uint32_t num_groups = grouper_->num_groups();\n+    int num_result_batches = (num_groups + output_batch_size_ - 1) / output_batch_size_;\n+    outputs_[0]->InputFinished(this, num_result_batches);\n+\n+    for (int i = 0; i < num_result_batches; ++i) {\n+      // Check finished flag\n+      if (finished_) {\n+        break;\n+      }\n+\n+      // Slice arrays\n+      int64_t batch_start = i * output_batch_size_;\n+      int64_t batch_length =\n+          std::min(output_batch_size_, static_cast<int>(num_groups - batch_start));\n+      std::vector<Datum> output_slices(out_data.size());\n+      for (size_t out_field_id = 0; out_field_id < out_data.size(); ++out_field_id) {\n+        output_slices[out_field_id] =\n+            out_data[out_field_id]->Slice(batch_start, batch_length);\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(ExecBatch output_batch, ExecBatch::Make(output_slices));\n+      outputs_[0]->InputReceived(this, i, output_batch);\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  void InputReceived(ExecNode* input, int seq, ExecBatch batch) override {\n+    DCHECK_EQ(input, inputs_[0]);\n+\n+    std::unique_lock<std::mutex> lock(mutex_);\n\nReview comment:\n       ```suggestion\r\n       std::unique_lock<std::mutex> lock(mutex_);\r\n   \r\n       if (stop_requested_) {\r\n         return;\r\n       }\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/exec/exec_plan.h\n##########\n@@ -264,5 +265,13 @@ ARROW_EXPORT\n Result<ExecNode*> MakeProjectNode(ExecNode* input, std::string label,\n                                   std::vector<Expression> exprs);\n \n+/// \\brief Make a node which groups input rows based on key fields and computes\n+/// aggregates for each group\n+Result<ExecNode*> MakeGroupByNode(ExecNode* input, std::string label,\n+                                  std::vector<std::string> keys,\n\nReview comment:\n       ```suggestion\r\n                                     std::vector<FieldRef> keys,\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-06T13:57:00.268+0000",
                    "updated": "2021-07-06T13:57:00.268+0000",
                    "started": "2021-07-06T13:57:00.268+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "619367",
                    "issueId": "13378153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378153/worklog/621534",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10660:\nURL: https://github.com/apache/arrow/pull/10660#discussion_r667957128\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate.cc\n##########\n@@ -748,67 +752,128 @@ struct GrouperFastImpl : Grouper {\n /// Implementations should be default constructible and perform initialization in\n /// Init().\n struct GroupedAggregator : KernelState {\n-  virtual Status Init(ExecContext*, const FunctionOptions*,\n-                      const std::shared_ptr<DataType>&) = 0;\n+  virtual Status Init(ExecContext*, const FunctionOptions*) = 0;\n+\n+  virtual Status Resize(int64_t new_num_groups) = 0;\n \n   virtual Status Consume(const ExecBatch& batch) = 0;\n \n-  virtual Result<Datum> Finalize() = 0;\n+  virtual Status Merge(GroupedAggregator&& other, const ArrayData& group_id_mapping) = 0;\n \n-  template <typename Reserve>\n-  Status MaybeReserve(int64_t old_num_groups, const ExecBatch& batch,\n-                      const Reserve& reserve) {\n-    int64_t new_num_groups = batch[2].scalar_as<UInt32Scalar>().value;\n-    if (new_num_groups <= old_num_groups) {\n-      return Status::OK();\n-    }\n-    return reserve(new_num_groups - old_num_groups);\n-  }\n+  virtual Result<Datum> Finalize() = 0;\n \n   virtual std::shared_ptr<DataType> out_type() const = 0;\n };\n \n+template <typename Impl>\n+Result<std::unique_ptr<KernelState>> HashAggregateInit(KernelContext* ctx,\n+                                                       const KernelInitArgs& args) {\n+  auto impl = ::arrow::internal::make_unique<Impl>();\n+  RETURN_NOT_OK(impl->Init(ctx->exec_context(), args.options));\n+  return std::move(impl);\n+}\n+\n+HashAggregateKernel MakeKernel(InputType argument_type, KernelInit init) {\n+  HashAggregateKernel kernel;\n+\n+  kernel.init = std::move(init);\n+\n+  kernel.signature = KernelSignature::Make(\n+      {std::move(argument_type), InputType::Array(Type::UINT32)},\n+      OutputType(\n+          [](KernelContext* ctx, const std::vector<ValueDescr>&) -> Result<ValueDescr> {\n+            return checked_cast<GroupedAggregator*>(ctx->state())->out_type();\n+          }));\n+\n+  kernel.resize = [](KernelContext* ctx, int64_t num_groups) {\n+    return checked_cast<GroupedAggregator*>(ctx->state())->Resize(num_groups);\n+  };\n+\n+  kernel.consume = [](KernelContext* ctx, const ExecBatch& batch) {\n+    return checked_cast<GroupedAggregator*>(ctx->state())->Consume(batch);\n+  };\n+\n+  kernel.merge = [](KernelContext* ctx, KernelState&& other,\n+                    const ArrayData& group_id_mapping) {\n+    return checked_cast<GroupedAggregator*>(ctx->state())\n+        ->Merge(checked_cast<GroupedAggregator&&>(other), group_id_mapping);\n+  };\n+\n+  kernel.finalize = [](KernelContext* ctx, Datum* out) {\n+    ARROW_ASSIGN_OR_RAISE(*out,\n+                          checked_cast<GroupedAggregator*>(ctx->state())->Finalize());\n+    return Status::OK();\n+  };\n+\n+  return kernel;\n+}\n+\n+Status AddHashAggKernels(\n+    const std::vector<std::shared_ptr<DataType>>& types,\n+    Result<HashAggregateKernel> make_kernel(const std::shared_ptr<DataType>&),\n+    HashAggregateFunction* function) {\n+  for (const auto& ty : types) {\n+    ARROW_ASSIGN_OR_RAISE(auto kernel, make_kernel(ty));\n+    RETURN_NOT_OK(function->AddKernel(std::move(kernel)));\n+  }\n+  return Status::OK();\n+}\n+\n // ----------------------------------------------------------------------\n // Count implementation\n \n struct GroupedCountImpl : public GroupedAggregator {\n-  Status Init(ExecContext* ctx, const FunctionOptions* options,\n-              const std::shared_ptr<DataType>&) override {\n+  Status Init(ExecContext* ctx, const FunctionOptions* options) override {\n     options_ = checked_cast<const ScalarAggregateOptions&>(*options);\n     counts_ = BufferBuilder(ctx->memory_pool());\n     return Status::OK();\n   }\n \n-  Status Consume(const ExecBatch& batch) override {\n-    RETURN_NOT_OK(MaybeReserve(num_groups_, batch, [&](int64_t added_groups) {\n-      num_groups_ += added_groups;\n-      return counts_.Append(added_groups * sizeof(int64_t), 0);\n-    }));\n+  Status Resize(int64_t new_num_groups) override {\n+    auto added_groups = new_num_groups - num_groups_;\n+    num_groups_ = new_num_groups;\n+    return counts_.Append(added_groups * sizeof(int64_t), 0);\n+  }\n+\n+  Status Merge(GroupedAggregator&& raw_other,\n+               const ArrayData& group_id_mapping) override {\n+    auto other = checked_cast<GroupedCountImpl*>(&raw_other);\n \n-    auto group_ids = batch[1].array()->GetValues<uint32_t>(1);\n-    auto raw_counts = reinterpret_cast<int64_t*>(counts_.mutable_data());\n+    auto counts = reinterpret_cast<int64_t*>(counts_.mutable_data());\n+    auto other_counts = reinterpret_cast<const int64_t*>(other->counts_.mutable_data());\n+\n+    auto g = group_id_mapping.GetValues<uint32_t>(1);\n+    for (int64_t other_g = 0; other_g < group_id_mapping.length; ++other_g, ++g) {\n+      counts[*g] += other_counts[other_g];\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Consume(const ExecBatch& batch) override {\n+    auto counts = reinterpret_cast<int64_t*>(counts_.mutable_data());\n \n     const auto& input = batch[0].array();\n \n-    if (!options_.skip_nulls) {\n-      if (input->GetNullCount() != 0) {\n-        for (int64_t i = 0, input_i = input->offset; i < input->length; ++i, ++input_i) {\n-          auto g = group_ids[i];\n-          raw_counts[g] += !BitUtil::GetBit(input->buffers[0]->data(), input_i);\n-        }\n+    if (options_.skip_nulls) {\n+      auto g_begin =\n+          reinterpret_cast<const uint32_t*>(batch[1].array()->buffers[1]->data());\n+\n+      arrow::internal::VisitSetBitRunsVoid(input->buffers[0], input->offset,\n+                                           input->length,\n+                                           [&](int64_t offset, int64_t length) {\n+                                             auto g = g_begin + offset;\n+                                             for (int64_t i = 0; i < length; ++i, ++g) {\n+                                               counts[*g] += 1;\n+                                             }\n+                                           });\n+    } else if (input->MayHaveNulls()) {\n\nReview comment:\n       Doesn't this fail to count if !skip_nulls && !MayHaveNulls?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate.cc\n##########\n@@ -748,67 +752,128 @@ struct GrouperFastImpl : Grouper {\n /// Implementations should be default constructible and perform initialization in\n /// Init().\n struct GroupedAggregator : KernelState {\n-  virtual Status Init(ExecContext*, const FunctionOptions*,\n-                      const std::shared_ptr<DataType>&) = 0;\n+  virtual Status Init(ExecContext*, const FunctionOptions*) = 0;\n+\n+  virtual Status Resize(int64_t new_num_groups) = 0;\n \n   virtual Status Consume(const ExecBatch& batch) = 0;\n \n-  virtual Result<Datum> Finalize() = 0;\n+  virtual Status Merge(GroupedAggregator&& other, const ArrayData& group_id_mapping) = 0;\n \n-  template <typename Reserve>\n-  Status MaybeReserve(int64_t old_num_groups, const ExecBatch& batch,\n-                      const Reserve& reserve) {\n-    int64_t new_num_groups = batch[2].scalar_as<UInt32Scalar>().value;\n-    if (new_num_groups <= old_num_groups) {\n-      return Status::OK();\n-    }\n-    return reserve(new_num_groups - old_num_groups);\n-  }\n+  virtual Result<Datum> Finalize() = 0;\n \n   virtual std::shared_ptr<DataType> out_type() const = 0;\n };\n \n+template <typename Impl>\n+Result<std::unique_ptr<KernelState>> HashAggregateInit(KernelContext* ctx,\n+                                                       const KernelInitArgs& args) {\n+  auto impl = ::arrow::internal::make_unique<Impl>();\n+  RETURN_NOT_OK(impl->Init(ctx->exec_context(), args.options));\n+  return std::move(impl);\n+}\n+\n+HashAggregateKernel MakeKernel(InputType argument_type, KernelInit init) {\n+  HashAggregateKernel kernel;\n+\n+  kernel.init = std::move(init);\n+\n+  kernel.signature = KernelSignature::Make(\n+      {std::move(argument_type), InputType::Array(Type::UINT32)},\n+      OutputType(\n+          [](KernelContext* ctx, const std::vector<ValueDescr>&) -> Result<ValueDescr> {\n+            return checked_cast<GroupedAggregator*>(ctx->state())->out_type();\n+          }));\n+\n+  kernel.resize = [](KernelContext* ctx, int64_t num_groups) {\n+    return checked_cast<GroupedAggregator*>(ctx->state())->Resize(num_groups);\n+  };\n+\n+  kernel.consume = [](KernelContext* ctx, const ExecBatch& batch) {\n+    return checked_cast<GroupedAggregator*>(ctx->state())->Consume(batch);\n+  };\n+\n+  kernel.merge = [](KernelContext* ctx, KernelState&& other,\n+                    const ArrayData& group_id_mapping) {\n+    return checked_cast<GroupedAggregator*>(ctx->state())\n+        ->Merge(checked_cast<GroupedAggregator&&>(other), group_id_mapping);\n+  };\n+\n+  kernel.finalize = [](KernelContext* ctx, Datum* out) {\n+    ARROW_ASSIGN_OR_RAISE(*out,\n+                          checked_cast<GroupedAggregator*>(ctx->state())->Finalize());\n+    return Status::OK();\n+  };\n+\n+  return kernel;\n+}\n+\n+Status AddHashAggKernels(\n+    const std::vector<std::shared_ptr<DataType>>& types,\n+    Result<HashAggregateKernel> make_kernel(const std::shared_ptr<DataType>&),\n+    HashAggregateFunction* function) {\n+  for (const auto& ty : types) {\n+    ARROW_ASSIGN_OR_RAISE(auto kernel, make_kernel(ty));\n+    RETURN_NOT_OK(function->AddKernel(std::move(kernel)));\n+  }\n+  return Status::OK();\n+}\n+\n // ----------------------------------------------------------------------\n // Count implementation\n \n struct GroupedCountImpl : public GroupedAggregator {\n-  Status Init(ExecContext* ctx, const FunctionOptions* options,\n-              const std::shared_ptr<DataType>&) override {\n+  Status Init(ExecContext* ctx, const FunctionOptions* options) override {\n     options_ = checked_cast<const ScalarAggregateOptions&>(*options);\n     counts_ = BufferBuilder(ctx->memory_pool());\n     return Status::OK();\n   }\n \n-  Status Consume(const ExecBatch& batch) override {\n-    RETURN_NOT_OK(MaybeReserve(num_groups_, batch, [&](int64_t added_groups) {\n-      num_groups_ += added_groups;\n-      return counts_.Append(added_groups * sizeof(int64_t), 0);\n-    }));\n+  Status Resize(int64_t new_num_groups) override {\n+    auto added_groups = new_num_groups - num_groups_;\n+    num_groups_ = new_num_groups;\n+    return counts_.Append(added_groups * sizeof(int64_t), 0);\n+  }\n+\n+  Status Merge(GroupedAggregator&& raw_other,\n+               const ArrayData& group_id_mapping) override {\n+    auto other = checked_cast<GroupedCountImpl*>(&raw_other);\n \n-    auto group_ids = batch[1].array()->GetValues<uint32_t>(1);\n-    auto raw_counts = reinterpret_cast<int64_t*>(counts_.mutable_data());\n+    auto counts = reinterpret_cast<int64_t*>(counts_.mutable_data());\n+    auto other_counts = reinterpret_cast<const int64_t*>(other->counts_.mutable_data());\n+\n+    auto g = group_id_mapping.GetValues<uint32_t>(1);\n+    for (int64_t other_g = 0; other_g < group_id_mapping.length; ++other_g, ++g) {\n+      counts[*g] += other_counts[other_g];\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Consume(const ExecBatch& batch) override {\n+    auto counts = reinterpret_cast<int64_t*>(counts_.mutable_data());\n \n     const auto& input = batch[0].array();\n \n-    if (!options_.skip_nulls) {\n-      if (input->GetNullCount() != 0) {\n-        for (int64_t i = 0, input_i = input->offset; i < input->length; ++i, ++input_i) {\n-          auto g = group_ids[i];\n-          raw_counts[g] += !BitUtil::GetBit(input->buffers[0]->data(), input_i);\n-        }\n+    if (options_.skip_nulls) {\n+      auto g_begin =\n+          reinterpret_cast<const uint32_t*>(batch[1].array()->buffers[1]->data());\n+\n+      arrow::internal::VisitSetBitRunsVoid(input->buffers[0], input->offset,\n+                                           input->length,\n+                                           [&](int64_t offset, int64_t length) {\n+                                             auto g = g_begin + offset;\n+                                             for (int64_t i = 0; i < length; ++i, ++g) {\n+                                               counts[*g] += 1;\n+                                             }\n+                                           });\n+    } else if (input->MayHaveNulls()) {\n\nReview comment:\n       Ah, sorry, I misunderstood what skip_nulls means. Thanks.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-12T19:49:20.877+0000",
                    "updated": "2021-07-12T19:49:20.877+0000",
                    "started": "2021-07-12T19:49:20.877+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621534",
                    "issueId": "13378153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378153/worklog/621689",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10660:\nURL: https://github.com/apache/arrow/pull/10660#discussion_r668001720\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate.cc\n##########\n@@ -748,67 +752,128 @@ struct GrouperFastImpl : Grouper {\n /// Implementations should be default constructible and perform initialization in\n /// Init().\n struct GroupedAggregator : KernelState {\n-  virtual Status Init(ExecContext*, const FunctionOptions*,\n-                      const std::shared_ptr<DataType>&) = 0;\n+  virtual Status Init(ExecContext*, const FunctionOptions*) = 0;\n+\n+  virtual Status Resize(int64_t new_num_groups) = 0;\n \n   virtual Status Consume(const ExecBatch& batch) = 0;\n \n-  virtual Result<Datum> Finalize() = 0;\n+  virtual Status Merge(GroupedAggregator&& other, const ArrayData& group_id_mapping) = 0;\n \n-  template <typename Reserve>\n-  Status MaybeReserve(int64_t old_num_groups, const ExecBatch& batch,\n-                      const Reserve& reserve) {\n-    int64_t new_num_groups = batch[2].scalar_as<UInt32Scalar>().value;\n-    if (new_num_groups <= old_num_groups) {\n-      return Status::OK();\n-    }\n-    return reserve(new_num_groups - old_num_groups);\n-  }\n+  virtual Result<Datum> Finalize() = 0;\n \n   virtual std::shared_ptr<DataType> out_type() const = 0;\n };\n \n+template <typename Impl>\n+Result<std::unique_ptr<KernelState>> HashAggregateInit(KernelContext* ctx,\n+                                                       const KernelInitArgs& args) {\n+  auto impl = ::arrow::internal::make_unique<Impl>();\n+  RETURN_NOT_OK(impl->Init(ctx->exec_context(), args.options));\n+  return std::move(impl);\n+}\n+\n+HashAggregateKernel MakeKernel(InputType argument_type, KernelInit init) {\n+  HashAggregateKernel kernel;\n+\n+  kernel.init = std::move(init);\n+\n+  kernel.signature = KernelSignature::Make(\n+      {std::move(argument_type), InputType::Array(Type::UINT32)},\n+      OutputType(\n+          [](KernelContext* ctx, const std::vector<ValueDescr>&) -> Result<ValueDescr> {\n+            return checked_cast<GroupedAggregator*>(ctx->state())->out_type();\n+          }));\n+\n+  kernel.resize = [](KernelContext* ctx, int64_t num_groups) {\n+    return checked_cast<GroupedAggregator*>(ctx->state())->Resize(num_groups);\n+  };\n+\n+  kernel.consume = [](KernelContext* ctx, const ExecBatch& batch) {\n+    return checked_cast<GroupedAggregator*>(ctx->state())->Consume(batch);\n+  };\n+\n+  kernel.merge = [](KernelContext* ctx, KernelState&& other,\n+                    const ArrayData& group_id_mapping) {\n+    return checked_cast<GroupedAggregator*>(ctx->state())\n+        ->Merge(checked_cast<GroupedAggregator&&>(other), group_id_mapping);\n+  };\n+\n+  kernel.finalize = [](KernelContext* ctx, Datum* out) {\n+    ARROW_ASSIGN_OR_RAISE(*out,\n+                          checked_cast<GroupedAggregator*>(ctx->state())->Finalize());\n+    return Status::OK();\n+  };\n+\n+  return kernel;\n+}\n+\n+Status AddHashAggKernels(\n+    const std::vector<std::shared_ptr<DataType>>& types,\n+    Result<HashAggregateKernel> make_kernel(const std::shared_ptr<DataType>&),\n+    HashAggregateFunction* function) {\n+  for (const auto& ty : types) {\n+    ARROW_ASSIGN_OR_RAISE(auto kernel, make_kernel(ty));\n+    RETURN_NOT_OK(function->AddKernel(std::move(kernel)));\n+  }\n+  return Status::OK();\n+}\n+\n // ----------------------------------------------------------------------\n // Count implementation\n \n struct GroupedCountImpl : public GroupedAggregator {\n-  Status Init(ExecContext* ctx, const FunctionOptions* options,\n-              const std::shared_ptr<DataType>&) override {\n+  Status Init(ExecContext* ctx, const FunctionOptions* options) override {\n     options_ = checked_cast<const ScalarAggregateOptions&>(*options);\n     counts_ = BufferBuilder(ctx->memory_pool());\n     return Status::OK();\n   }\n \n-  Status Consume(const ExecBatch& batch) override {\n-    RETURN_NOT_OK(MaybeReserve(num_groups_, batch, [&](int64_t added_groups) {\n-      num_groups_ += added_groups;\n-      return counts_.Append(added_groups * sizeof(int64_t), 0);\n-    }));\n+  Status Resize(int64_t new_num_groups) override {\n+    auto added_groups = new_num_groups - num_groups_;\n+    num_groups_ = new_num_groups;\n+    return counts_.Append(added_groups * sizeof(int64_t), 0);\n+  }\n+\n+  Status Merge(GroupedAggregator&& raw_other,\n+               const ArrayData& group_id_mapping) override {\n+    auto other = checked_cast<GroupedCountImpl*>(&raw_other);\n \n-    auto group_ids = batch[1].array()->GetValues<uint32_t>(1);\n-    auto raw_counts = reinterpret_cast<int64_t*>(counts_.mutable_data());\n+    auto counts = reinterpret_cast<int64_t*>(counts_.mutable_data());\n+    auto other_counts = reinterpret_cast<const int64_t*>(other->counts_.mutable_data());\n+\n+    auto g = group_id_mapping.GetValues<uint32_t>(1);\n+    for (int64_t other_g = 0; other_g < group_id_mapping.length; ++other_g, ++g) {\n+      counts[*g] += other_counts[other_g];\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Consume(const ExecBatch& batch) override {\n+    auto counts = reinterpret_cast<int64_t*>(counts_.mutable_data());\n \n     const auto& input = batch[0].array();\n \n-    if (!options_.skip_nulls) {\n-      if (input->GetNullCount() != 0) {\n-        for (int64_t i = 0, input_i = input->offset; i < input->length; ++i, ++input_i) {\n-          auto g = group_ids[i];\n-          raw_counts[g] += !BitUtil::GetBit(input->buffers[0]->data(), input_i);\n-        }\n+    if (options_.skip_nulls) {\n+      auto g_begin =\n+          reinterpret_cast<const uint32_t*>(batch[1].array()->buffers[1]->data());\n+\n+      arrow::internal::VisitSetBitRunsVoid(input->buffers[0], input->offset,\n+                                           input->length,\n+                                           [&](int64_t offset, int64_t length) {\n+                                             auto g = g_begin + offset;\n+                                             for (int64_t i = 0; i < length; ++i, ++g) {\n+                                               counts[*g] += 1;\n+                                             }\n+                                           });\n+    } else if (input->MayHaveNulls()) {\n\nReview comment:\n       If `skip_nulls`, we want to count only valid slots. If `!skip_nulls`, we want to count only null slots- in that case if `!MayHaveNulls` then no counts will be incremented\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-12T20:06:52.487+0000",
                    "updated": "2021-07-12T20:06:52.487+0000",
                    "started": "2021-07-12T20:06:52.487+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621689",
                    "issueId": "13378153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378153/worklog/626958",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #10660:\nURL: https://github.com/apache/arrow/pull/10660#issuecomment-885331436\n\n\n   @pitrou care to take a look?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-23T00:54:41.263+0000",
                    "updated": "2021-07-23T00:54:41.263+0000",
                    "started": "2021-07-23T00:54:41.262+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "626958",
                    "issueId": "13378153"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378153/worklog/627166",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz closed pull request #10660:\nURL: https://github.com/apache/arrow/pull/10660\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-23T13:01:23.924+0000",
                    "updated": "2021-07-23T13:01:23.924+0000",
                    "started": "2021-07-23T13:01:23.924+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "627166",
                    "issueId": "13378153"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 5400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7f8cf68e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2ce95322[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3eec2548[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@587a01f4[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a33be9d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@78c1de85[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@27d872b0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2f25b21e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@8452631[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7e06f44a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a2f54c8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1898b0d1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 5400,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Jul 23 15:43:51 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-07-23T13:01:14.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12759/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2021-05-12T18:16:18.000+0000",
        "updated": "2021-10-18T14:34:01.000+0000",
        "timeoriginalestimate": null,
        "description": "ARROW-11928 adds ExecNodes, to which GroupByNode should be added so that a dataset scan can terminate in a grouped aggregation",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 5400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Compute] Wrap grouped aggregation in an ExecNode",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378153/comment/17386222",
                    "id": "17386222",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 10660\n[https://github.com/apache/arrow/pull/10660]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-07-23T13:01:14.074+0000",
                    "updated": "2021-07-23T13:01:14.074+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378153/comment/17386316",
                    "id": "17386316",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Should this have Fix Version: 6.0.0?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-07-23T15:37:35.498+0000",
                    "updated": "2021-07-23T15:37:35.498+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378153/comment/17386328",
                    "id": "17386328",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Yes (cc [~kszucs], there's probably a few others to fix)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-07-23T15:43:51.635+0000",
                    "updated": "2021-07-23T15:43:51.635+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0qzd4:",
        "customfield_12314139": null
    }
}