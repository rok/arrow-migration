{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13315931",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315931",
    "key": "ARROW-9387",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9387/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 8,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315931/worklog/479633",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois opened a new pull request #8125:\nURL: https://github.com/apache/arrow/pull/8125\n\n\n   R follow up from #7272\r\n   \r\n   The current `$select()` uses a more familiar (though more expensive) tidyselect interface: \r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   \r\n   tab <- Table$create(x1 = 1:2, x2 = 3:4, y = 5:6)\r\n   # lower level 0-based indices\r\n   tab$SelectColumns(0:1)\r\n   #> Table\r\n   #> 2 rows x 2 columns\r\n   #> $x1 <int32>\r\n   #> $x2 <int32>\r\n   \r\n   # higher level tidyselect based\r\n   tab$select(starts_with(\"x\"))\r\n   #> Table\r\n   #> 2 rows x 2 columns\r\n   #> $x1 <int32>\r\n   #> $x2 <int32>\r\n   ```\r\n   \r\n   <sup>Created on 2020-09-07 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0.9001)</sup>\r\n   \r\n   Do we want both ? `$select()` is used e.g. by the `read_csv(col_select=)` argument. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-07T13:19:48.958+0000",
                    "updated": "2020-09-07T13:19:48.958+0000",
                    "started": "2020-09-07T13:19:48.958+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479633",
                    "issueId": "13315931"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315931/worklog/479635",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8125:\nURL: https://github.com/apache/arrow/pull/8125#issuecomment-688322569\n\n\n   https://issues.apache.org/jira/browse/ARROW-9387\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-07T13:21:52.331+0000",
                    "updated": "2020-09-07T13:21:52.331+0000",
                    "started": "2020-09-07T13:21:52.331+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479635",
                    "issueId": "13315931"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315931/worklog/482126",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #8125:\nURL: https://github.com/apache/arrow/pull/8125#discussion_r487105657\n\n\n\n##########\nFile path: r/tests/testthat/test-Table.R\n##########\n@@ -130,16 +130,16 @@ test_that(\"[, [[, $ for Table\", {\n   expect_null(tab[[\"asdf\"]])\n   # List-like column slicing\n   expect_data_frame(tab[2:4], tbl[2:4])\n-  expect_data_frame(tab[c(1, 0)], tbl[c(1, 0)])\n+  expect_data_frame(tab[c(2, 1)], tbl[c(2, 1)])\n\nReview comment:\n       Should we maintain the base R behavior for subsetting on column 0 (it is ignored)? I can't imagine why someone would do such a thing on purpose.\n\n##########\nFile path: r/R/record-batch.R\n##########\n@@ -218,7 +207,12 @@ names.RecordBatch <- function(x) x$names()\n   if (!missing(j)) {\n     # Selecting columns is cheaper than filtering rows, so do it first.\n     # That way, if we're filtering too, we have fewer arrays to filter/slice/take\n-    x <- x$select(j)\n+    if (is_integerish(j)) {\n+      x <- x$SelectColumns(as.integer(j) - 1L)\n\nReview comment:\n       Judging from the tests, I think we want to add something like this (adapted from filter_rows in array.R):\r\n   \r\n   ```suggestion\r\n         if (all(j < 0)) {\r\n           # in R, negative j means \"everything but j\"\r\n           j <- setdiff(seq_len(x$num_columns), -1 * j)\r\n         }\r\n         x <- x$SelectColumns(as.integer(j) - 1L)\r\n   ```\n\n##########\nFile path: r/tests/testthat/test-Table.R\n##########\n@@ -130,16 +130,16 @@ test_that(\"[, [[, $ for Table\", {\n   expect_null(tab[[\"asdf\"]])\n   # List-like column slicing\n   expect_data_frame(tab[2:4], tbl[2:4])\n-  expect_data_frame(tab[c(1, 0)], tbl[c(1, 0)])\n+  expect_data_frame(tab[c(2, 1)], tbl[c(2, 1)])\n \n   expect_error(tab[[c(4, 3)]])\n   expect_error(tab[[NA]], \"'i' must be character or numeric, not logical\")\n   expect_error(tab[[NULL]], \"'i' must be character or numeric, not NULL\")\n   expect_error(tab[[c(\"asdf\", \"jkl;\")]], 'length(name) not equal to 1', fixed = TRUE)\n-  expect_error(tab[-3], \"Selections can't have negative value\") # From tidyselect\n-  expect_error(tab[-3:3], \"Selections can't have negative value\") # From tidyselect\n-  expect_error(tab[1000]) # This is caught in vctrs, assert more specifically when it stabilizes\n-  expect_error(tab[1:1000]) # same as ^\n+  expect_error(tab[-3], \"Invalid column index\")\n\nReview comment:\n       This may not be allowed in tidyselect but `[` supports this to drop a column, so I don't think this one should error. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T15:16:18.577+0000",
                    "updated": "2020-09-11T15:16:18.577+0000",
                    "started": "2020-09-11T15:16:18.576+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482126",
                    "issueId": "13315931"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315931/worklog/482359",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson closed pull request #8125:\nURL: https://github.com/apache/arrow/pull/8125\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T22:50:56.606+0000",
                    "updated": "2020-09-11T22:50:56.606+0000",
                    "started": "2020-09-11T22:50:56.605+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482359",
                    "issueId": "13315931"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315931/worklog/482788",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #8125:\nURL: https://github.com/apache/arrow/pull/8125#discussion_r487105657\n\n\n\n##########\nFile path: r/tests/testthat/test-Table.R\n##########\n@@ -130,16 +130,16 @@ test_that(\"[, [[, $ for Table\", {\n   expect_null(tab[[\"asdf\"]])\n   # List-like column slicing\n   expect_data_frame(tab[2:4], tbl[2:4])\n-  expect_data_frame(tab[c(1, 0)], tbl[c(1, 0)])\n+  expect_data_frame(tab[c(2, 1)], tbl[c(2, 1)])\n\nReview comment:\n       Should we maintain the base R behavior for subsetting on column 0 (it is ignored)? I can't imagine why someone would do such a thing on purpose.\n\n##########\nFile path: r/R/record-batch.R\n##########\n@@ -218,7 +207,12 @@ names.RecordBatch <- function(x) x$names()\n   if (!missing(j)) {\n     # Selecting columns is cheaper than filtering rows, so do it first.\n     # That way, if we're filtering too, we have fewer arrays to filter/slice/take\n-    x <- x$select(j)\n+    if (is_integerish(j)) {\n+      x <- x$SelectColumns(as.integer(j) - 1L)\n\nReview comment:\n       Judging from the tests, I think we want to add something like this (adapted from filter_rows in array.R):\r\n   \r\n   ```suggestion\r\n         if (all(j < 0)) {\r\n           # in R, negative j means \"everything but j\"\r\n           j <- setdiff(seq_len(x$num_columns), -1 * j)\r\n         }\r\n         x <- x$SelectColumns(as.integer(j) - 1L)\r\n   ```\n\n##########\nFile path: r/tests/testthat/test-Table.R\n##########\n@@ -130,16 +130,16 @@ test_that(\"[, [[, $ for Table\", {\n   expect_null(tab[[\"asdf\"]])\n   # List-like column slicing\n   expect_data_frame(tab[2:4], tbl[2:4])\n-  expect_data_frame(tab[c(1, 0)], tbl[c(1, 0)])\n+  expect_data_frame(tab[c(2, 1)], tbl[c(2, 1)])\n \n   expect_error(tab[[c(4, 3)]])\n   expect_error(tab[[NA]], \"'i' must be character or numeric, not logical\")\n   expect_error(tab[[NULL]], \"'i' must be character or numeric, not NULL\")\n   expect_error(tab[[c(\"asdf\", \"jkl;\")]], 'length(name) not equal to 1', fixed = TRUE)\n-  expect_error(tab[-3], \"Selections can't have negative value\") # From tidyselect\n-  expect_error(tab[-3:3], \"Selections can't have negative value\") # From tidyselect\n-  expect_error(tab[1000]) # This is caught in vctrs, assert more specifically when it stabilizes\n-  expect_error(tab[1:1000]) # same as ^\n+  expect_error(tab[-3], \"Invalid column index\")\n\nReview comment:\n       This may not be allowed in tidyselect but `[` supports this to drop a column, so I don't think this one should error. \n\n##########\nFile path: r/tests/testthat/test-Table.R\n##########\n@@ -130,16 +130,16 @@ test_that(\"[, [[, $ for Table\", {\n   expect_null(tab[[\"asdf\"]])\n   # List-like column slicing\n   expect_data_frame(tab[2:4], tbl[2:4])\n-  expect_data_frame(tab[c(1, 0)], tbl[c(1, 0)])\n+  expect_data_frame(tab[c(2, 1)], tbl[c(2, 1)])\n\nReview comment:\n       Should we maintain the base R behavior for subsetting on column 0 (it is ignored)? I can't imagine why someone would do such a thing on purpose.\n\n##########\nFile path: r/R/record-batch.R\n##########\n@@ -218,7 +207,12 @@ names.RecordBatch <- function(x) x$names()\n   if (!missing(j)) {\n     # Selecting columns is cheaper than filtering rows, so do it first.\n     # That way, if we're filtering too, we have fewer arrays to filter/slice/take\n-    x <- x$select(j)\n+    if (is_integerish(j)) {\n+      x <- x$SelectColumns(as.integer(j) - 1L)\n\nReview comment:\n       Judging from the tests, I think we want to add something like this (adapted from filter_rows in array.R):\r\n   \r\n   ```suggestion\r\n         if (all(j < 0)) {\r\n           # in R, negative j means \"everything but j\"\r\n           j <- setdiff(seq_len(x$num_columns), -1 * j)\r\n         }\r\n         x <- x$SelectColumns(as.integer(j) - 1L)\r\n   ```\n\n##########\nFile path: r/tests/testthat/test-Table.R\n##########\n@@ -130,16 +130,16 @@ test_that(\"[, [[, $ for Table\", {\n   expect_null(tab[[\"asdf\"]])\n   # List-like column slicing\n   expect_data_frame(tab[2:4], tbl[2:4])\n-  expect_data_frame(tab[c(1, 0)], tbl[c(1, 0)])\n+  expect_data_frame(tab[c(2, 1)], tbl[c(2, 1)])\n \n   expect_error(tab[[c(4, 3)]])\n   expect_error(tab[[NA]], \"'i' must be character or numeric, not logical\")\n   expect_error(tab[[NULL]], \"'i' must be character or numeric, not NULL\")\n   expect_error(tab[[c(\"asdf\", \"jkl;\")]], 'length(name) not equal to 1', fixed = TRUE)\n-  expect_error(tab[-3], \"Selections can't have negative value\") # From tidyselect\n-  expect_error(tab[-3:3], \"Selections can't have negative value\") # From tidyselect\n-  expect_error(tab[1000]) # This is caught in vctrs, assert more specifically when it stabilizes\n-  expect_error(tab[1:1000]) # same as ^\n+  expect_error(tab[-3], \"Invalid column index\")\n\nReview comment:\n       This may not be allowed in tidyselect but `[` supports this to drop a column, so I don't think this one should error. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T20:22:05.719+0000",
                    "updated": "2020-09-12T20:22:05.719+0000",
                    "started": "2020-09-12T20:22:05.719+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482788",
                    "issueId": "13315931"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315931/worklog/482808",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson closed pull request #8125:\nURL: https://github.com/apache/arrow/pull/8125\n\n\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T20:23:29.342+0000",
                    "updated": "2020-09-12T20:23:29.342+0000",
                    "started": "2020-09-12T20:23:29.342+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482808",
                    "issueId": "13315931"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315931/worklog/483196",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #8125:\nURL: https://github.com/apache/arrow/pull/8125#discussion_r487105657\n\n\n\n##########\nFile path: r/tests/testthat/test-Table.R\n##########\n@@ -130,16 +130,16 @@ test_that(\"[, [[, $ for Table\", {\n   expect_null(tab[[\"asdf\"]])\n   # List-like column slicing\n   expect_data_frame(tab[2:4], tbl[2:4])\n-  expect_data_frame(tab[c(1, 0)], tbl[c(1, 0)])\n+  expect_data_frame(tab[c(2, 1)], tbl[c(2, 1)])\n\nReview comment:\n       Should we maintain the base R behavior for subsetting on column 0 (it is ignored)? I can't imagine why someone would do such a thing on purpose.\n\n##########\nFile path: r/R/record-batch.R\n##########\n@@ -218,7 +207,12 @@ names.RecordBatch <- function(x) x$names()\n   if (!missing(j)) {\n     # Selecting columns is cheaper than filtering rows, so do it first.\n     # That way, if we're filtering too, we have fewer arrays to filter/slice/take\n-    x <- x$select(j)\n+    if (is_integerish(j)) {\n+      x <- x$SelectColumns(as.integer(j) - 1L)\n\nReview comment:\n       Judging from the tests, I think we want to add something like this (adapted from filter_rows in array.R):\r\n   \r\n   ```suggestion\r\n         if (all(j < 0)) {\r\n           # in R, negative j means \"everything but j\"\r\n           j <- setdiff(seq_len(x$num_columns), -1 * j)\r\n         }\r\n         x <- x$SelectColumns(as.integer(j) - 1L)\r\n   ```\n\n##########\nFile path: r/tests/testthat/test-Table.R\n##########\n@@ -130,16 +130,16 @@ test_that(\"[, [[, $ for Table\", {\n   expect_null(tab[[\"asdf\"]])\n   # List-like column slicing\n   expect_data_frame(tab[2:4], tbl[2:4])\n-  expect_data_frame(tab[c(1, 0)], tbl[c(1, 0)])\n+  expect_data_frame(tab[c(2, 1)], tbl[c(2, 1)])\n \n   expect_error(tab[[c(4, 3)]])\n   expect_error(tab[[NA]], \"'i' must be character or numeric, not logical\")\n   expect_error(tab[[NULL]], \"'i' must be character or numeric, not NULL\")\n   expect_error(tab[[c(\"asdf\", \"jkl;\")]], 'length(name) not equal to 1', fixed = TRUE)\n-  expect_error(tab[-3], \"Selections can't have negative value\") # From tidyselect\n-  expect_error(tab[-3:3], \"Selections can't have negative value\") # From tidyselect\n-  expect_error(tab[1000]) # This is caught in vctrs, assert more specifically when it stabilizes\n-  expect_error(tab[1:1000]) # same as ^\n+  expect_error(tab[-3], \"Invalid column index\")\n\nReview comment:\n       This may not be allowed in tidyselect but `[` supports this to drop a column, so I don't think this one should error. \n\n##########\nFile path: r/tests/testthat/test-Table.R\n##########\n@@ -130,16 +130,16 @@ test_that(\"[, [[, $ for Table\", {\n   expect_null(tab[[\"asdf\"]])\n   # List-like column slicing\n   expect_data_frame(tab[2:4], tbl[2:4])\n-  expect_data_frame(tab[c(1, 0)], tbl[c(1, 0)])\n+  expect_data_frame(tab[c(2, 1)], tbl[c(2, 1)])\n\nReview comment:\n       Should we maintain the base R behavior for subsetting on column 0 (it is ignored)? I can't imagine why someone would do such a thing on purpose.\n\n##########\nFile path: r/R/record-batch.R\n##########\n@@ -218,7 +207,12 @@ names.RecordBatch <- function(x) x$names()\n   if (!missing(j)) {\n     # Selecting columns is cheaper than filtering rows, so do it first.\n     # That way, if we're filtering too, we have fewer arrays to filter/slice/take\n-    x <- x$select(j)\n+    if (is_integerish(j)) {\n+      x <- x$SelectColumns(as.integer(j) - 1L)\n\nReview comment:\n       Judging from the tests, I think we want to add something like this (adapted from filter_rows in array.R):\r\n   \r\n   ```suggestion\r\n         if (all(j < 0)) {\r\n           # in R, negative j means \"everything but j\"\r\n           j <- setdiff(seq_len(x$num_columns), -1 * j)\r\n         }\r\n         x <- x$SelectColumns(as.integer(j) - 1L)\r\n   ```\n\n##########\nFile path: r/tests/testthat/test-Table.R\n##########\n@@ -130,16 +130,16 @@ test_that(\"[, [[, $ for Table\", {\n   expect_null(tab[[\"asdf\"]])\n   # List-like column slicing\n   expect_data_frame(tab[2:4], tbl[2:4])\n-  expect_data_frame(tab[c(1, 0)], tbl[c(1, 0)])\n+  expect_data_frame(tab[c(2, 1)], tbl[c(2, 1)])\n \n   expect_error(tab[[c(4, 3)]])\n   expect_error(tab[[NA]], \"'i' must be character or numeric, not logical\")\n   expect_error(tab[[NULL]], \"'i' must be character or numeric, not NULL\")\n   expect_error(tab[[c(\"asdf\", \"jkl;\")]], 'length(name) not equal to 1', fixed = TRUE)\n-  expect_error(tab[-3], \"Selections can't have negative value\") # From tidyselect\n-  expect_error(tab[-3:3], \"Selections can't have negative value\") # From tidyselect\n-  expect_error(tab[1000]) # This is caught in vctrs, assert more specifically when it stabilizes\n-  expect_error(tab[1:1000]) # same as ^\n+  expect_error(tab[-3], \"Invalid column index\")\n\nReview comment:\n       This may not be allowed in tidyselect but `[` supports this to drop a column, so I don't think this one should error. \n\n##########\nFile path: r/tests/testthat/test-Table.R\n##########\n@@ -130,16 +130,16 @@ test_that(\"[, [[, $ for Table\", {\n   expect_null(tab[[\"asdf\"]])\n   # List-like column slicing\n   expect_data_frame(tab[2:4], tbl[2:4])\n-  expect_data_frame(tab[c(1, 0)], tbl[c(1, 0)])\n+  expect_data_frame(tab[c(2, 1)], tbl[c(2, 1)])\n\nReview comment:\n       Should we maintain the base R behavior for subsetting on column 0 (it is ignored)? I can't imagine why someone would do such a thing on purpose.\n\n##########\nFile path: r/R/record-batch.R\n##########\n@@ -218,7 +207,12 @@ names.RecordBatch <- function(x) x$names()\n   if (!missing(j)) {\n     # Selecting columns is cheaper than filtering rows, so do it first.\n     # That way, if we're filtering too, we have fewer arrays to filter/slice/take\n-    x <- x$select(j)\n+    if (is_integerish(j)) {\n+      x <- x$SelectColumns(as.integer(j) - 1L)\n\nReview comment:\n       Judging from the tests, I think we want to add something like this (adapted from filter_rows in array.R):\r\n   \r\n   ```suggestion\r\n         if (all(j < 0)) {\r\n           # in R, negative j means \"everything but j\"\r\n           j <- setdiff(seq_len(x$num_columns), -1 * j)\r\n         }\r\n         x <- x$SelectColumns(as.integer(j) - 1L)\r\n   ```\n\n##########\nFile path: r/tests/testthat/test-Table.R\n##########\n@@ -130,16 +130,16 @@ test_that(\"[, [[, $ for Table\", {\n   expect_null(tab[[\"asdf\"]])\n   # List-like column slicing\n   expect_data_frame(tab[2:4], tbl[2:4])\n-  expect_data_frame(tab[c(1, 0)], tbl[c(1, 0)])\n+  expect_data_frame(tab[c(2, 1)], tbl[c(2, 1)])\n \n   expect_error(tab[[c(4, 3)]])\n   expect_error(tab[[NA]], \"'i' must be character or numeric, not logical\")\n   expect_error(tab[[NULL]], \"'i' must be character or numeric, not NULL\")\n   expect_error(tab[[c(\"asdf\", \"jkl;\")]], 'length(name) not equal to 1', fixed = TRUE)\n-  expect_error(tab[-3], \"Selections can't have negative value\") # From tidyselect\n-  expect_error(tab[-3:3], \"Selections can't have negative value\") # From tidyselect\n-  expect_error(tab[1000]) # This is caught in vctrs, assert more specifically when it stabilizes\n-  expect_error(tab[1:1000]) # same as ^\n+  expect_error(tab[-3], \"Invalid column index\")\n\nReview comment:\n       This may not be allowed in tidyselect but `[` supports this to drop a column, so I don't think this one should error. \n\n##########\nFile path: r/tests/testthat/test-Table.R\n##########\n@@ -130,16 +130,16 @@ test_that(\"[, [[, $ for Table\", {\n   expect_null(tab[[\"asdf\"]])\n   # List-like column slicing\n   expect_data_frame(tab[2:4], tbl[2:4])\n-  expect_data_frame(tab[c(1, 0)], tbl[c(1, 0)])\n+  expect_data_frame(tab[c(2, 1)], tbl[c(2, 1)])\n\nReview comment:\n       Should we maintain the base R behavior for subsetting on column 0 (it is ignored)? I can't imagine why someone would do such a thing on purpose.\n\n##########\nFile path: r/R/record-batch.R\n##########\n@@ -218,7 +207,12 @@ names.RecordBatch <- function(x) x$names()\n   if (!missing(j)) {\n     # Selecting columns is cheaper than filtering rows, so do it first.\n     # That way, if we're filtering too, we have fewer arrays to filter/slice/take\n-    x <- x$select(j)\n+    if (is_integerish(j)) {\n+      x <- x$SelectColumns(as.integer(j) - 1L)\n\nReview comment:\n       Judging from the tests, I think we want to add something like this (adapted from filter_rows in array.R):\r\n   \r\n   ```suggestion\r\n         if (all(j < 0)) {\r\n           # in R, negative j means \"everything but j\"\r\n           j <- setdiff(seq_len(x$num_columns), -1 * j)\r\n         }\r\n         x <- x$SelectColumns(as.integer(j) - 1L)\r\n   ```\n\n##########\nFile path: r/tests/testthat/test-Table.R\n##########\n@@ -130,16 +130,16 @@ test_that(\"[, [[, $ for Table\", {\n   expect_null(tab[[\"asdf\"]])\n   # List-like column slicing\n   expect_data_frame(tab[2:4], tbl[2:4])\n-  expect_data_frame(tab[c(1, 0)], tbl[c(1, 0)])\n+  expect_data_frame(tab[c(2, 1)], tbl[c(2, 1)])\n \n   expect_error(tab[[c(4, 3)]])\n   expect_error(tab[[NA]], \"'i' must be character or numeric, not logical\")\n   expect_error(tab[[NULL]], \"'i' must be character or numeric, not NULL\")\n   expect_error(tab[[c(\"asdf\", \"jkl;\")]], 'length(name) not equal to 1', fixed = TRUE)\n-  expect_error(tab[-3], \"Selections can't have negative value\") # From tidyselect\n-  expect_error(tab[-3:3], \"Selections can't have negative value\") # From tidyselect\n-  expect_error(tab[1000]) # This is caught in vctrs, assert more specifically when it stabilizes\n-  expect_error(tab[1:1000]) # same as ^\n+  expect_error(tab[-3], \"Invalid column index\")\n\nReview comment:\n       This may not be allowed in tidyselect but `[` supports this to drop a column, so I don't think this one should error. \n\n##########\nFile path: r/tests/testthat/test-Table.R\n##########\n@@ -130,16 +130,16 @@ test_that(\"[, [[, $ for Table\", {\n   expect_null(tab[[\"asdf\"]])\n   # List-like column slicing\n   expect_data_frame(tab[2:4], tbl[2:4])\n-  expect_data_frame(tab[c(1, 0)], tbl[c(1, 0)])\n+  expect_data_frame(tab[c(2, 1)], tbl[c(2, 1)])\n\nReview comment:\n       Should we maintain the base R behavior for subsetting on column 0 (it is ignored)? I can't imagine why someone would do such a thing on purpose.\n\n##########\nFile path: r/R/record-batch.R\n##########\n@@ -218,7 +207,12 @@ names.RecordBatch <- function(x) x$names()\n   if (!missing(j)) {\n     # Selecting columns is cheaper than filtering rows, so do it first.\n     # That way, if we're filtering too, we have fewer arrays to filter/slice/take\n-    x <- x$select(j)\n+    if (is_integerish(j)) {\n+      x <- x$SelectColumns(as.integer(j) - 1L)\n\nReview comment:\n       Judging from the tests, I think we want to add something like this (adapted from filter_rows in array.R):\r\n   \r\n   ```suggestion\r\n         if (all(j < 0)) {\r\n           # in R, negative j means \"everything but j\"\r\n           j <- setdiff(seq_len(x$num_columns), -1 * j)\r\n         }\r\n         x <- x$SelectColumns(as.integer(j) - 1L)\r\n   ```\n\n##########\nFile path: r/tests/testthat/test-Table.R\n##########\n@@ -130,16 +130,16 @@ test_that(\"[, [[, $ for Table\", {\n   expect_null(tab[[\"asdf\"]])\n   # List-like column slicing\n   expect_data_frame(tab[2:4], tbl[2:4])\n-  expect_data_frame(tab[c(1, 0)], tbl[c(1, 0)])\n+  expect_data_frame(tab[c(2, 1)], tbl[c(2, 1)])\n \n   expect_error(tab[[c(4, 3)]])\n   expect_error(tab[[NA]], \"'i' must be character or numeric, not logical\")\n   expect_error(tab[[NULL]], \"'i' must be character or numeric, not NULL\")\n   expect_error(tab[[c(\"asdf\", \"jkl;\")]], 'length(name) not equal to 1', fixed = TRUE)\n-  expect_error(tab[-3], \"Selections can't have negative value\") # From tidyselect\n-  expect_error(tab[-3:3], \"Selections can't have negative value\") # From tidyselect\n-  expect_error(tab[1000]) # This is caught in vctrs, assert more specifically when it stabilizes\n-  expect_error(tab[1:1000]) # same as ^\n+  expect_error(tab[-3], \"Invalid column index\")\n\nReview comment:\n       This may not be allowed in tidyselect but `[` supports this to drop a column, so I don't think this one should error. \n\n##########\nFile path: r/tests/testthat/test-Table.R\n##########\n@@ -130,16 +130,16 @@ test_that(\"[, [[, $ for Table\", {\n   expect_null(tab[[\"asdf\"]])\n   # List-like column slicing\n   expect_data_frame(tab[2:4], tbl[2:4])\n-  expect_data_frame(tab[c(1, 0)], tbl[c(1, 0)])\n+  expect_data_frame(tab[c(2, 1)], tbl[c(2, 1)])\n\nReview comment:\n       Should we maintain the base R behavior for subsetting on column 0 (it is ignored)? I can't imagine why someone would do such a thing on purpose.\n\n##########\nFile path: r/R/record-batch.R\n##########\n@@ -218,7 +207,12 @@ names.RecordBatch <- function(x) x$names()\n   if (!missing(j)) {\n     # Selecting columns is cheaper than filtering rows, so do it first.\n     # That way, if we're filtering too, we have fewer arrays to filter/slice/take\n-    x <- x$select(j)\n+    if (is_integerish(j)) {\n+      x <- x$SelectColumns(as.integer(j) - 1L)\n\nReview comment:\n       Judging from the tests, I think we want to add something like this (adapted from filter_rows in array.R):\r\n   \r\n   ```suggestion\r\n         if (all(j < 0)) {\r\n           # in R, negative j means \"everything but j\"\r\n           j <- setdiff(seq_len(x$num_columns), -1 * j)\r\n         }\r\n         x <- x$SelectColumns(as.integer(j) - 1L)\r\n   ```\n\n##########\nFile path: r/tests/testthat/test-Table.R\n##########\n@@ -130,16 +130,16 @@ test_that(\"[, [[, $ for Table\", {\n   expect_null(tab[[\"asdf\"]])\n   # List-like column slicing\n   expect_data_frame(tab[2:4], tbl[2:4])\n-  expect_data_frame(tab[c(1, 0)], tbl[c(1, 0)])\n+  expect_data_frame(tab[c(2, 1)], tbl[c(2, 1)])\n \n   expect_error(tab[[c(4, 3)]])\n   expect_error(tab[[NA]], \"'i' must be character or numeric, not logical\")\n   expect_error(tab[[NULL]], \"'i' must be character or numeric, not NULL\")\n   expect_error(tab[[c(\"asdf\", \"jkl;\")]], 'length(name) not equal to 1', fixed = TRUE)\n-  expect_error(tab[-3], \"Selections can't have negative value\") # From tidyselect\n-  expect_error(tab[-3:3], \"Selections can't have negative value\") # From tidyselect\n-  expect_error(tab[1000]) # This is caught in vctrs, assert more specifically when it stabilizes\n-  expect_error(tab[1:1000]) # same as ^\n+  expect_error(tab[-3], \"Invalid column index\")\n\nReview comment:\n       This may not be allowed in tidyselect but `[` supports this to drop a column, so I don't think this one should error. \n\n##########\nFile path: r/tests/testthat/test-Table.R\n##########\n@@ -130,16 +130,16 @@ test_that(\"[, [[, $ for Table\", {\n   expect_null(tab[[\"asdf\"]])\n   # List-like column slicing\n   expect_data_frame(tab[2:4], tbl[2:4])\n-  expect_data_frame(tab[c(1, 0)], tbl[c(1, 0)])\n+  expect_data_frame(tab[c(2, 1)], tbl[c(2, 1)])\n\nReview comment:\n       Should we maintain the base R behavior for subsetting on column 0 (it is ignored)? I can't imagine why someone would do such a thing on purpose.\n\n##########\nFile path: r/R/record-batch.R\n##########\n@@ -218,7 +207,12 @@ names.RecordBatch <- function(x) x$names()\n   if (!missing(j)) {\n     # Selecting columns is cheaper than filtering rows, so do it first.\n     # That way, if we're filtering too, we have fewer arrays to filter/slice/take\n-    x <- x$select(j)\n+    if (is_integerish(j)) {\n+      x <- x$SelectColumns(as.integer(j) - 1L)\n\nReview comment:\n       Judging from the tests, I think we want to add something like this (adapted from filter_rows in array.R):\r\n   \r\n   ```suggestion\r\n         if (all(j < 0)) {\r\n           # in R, negative j means \"everything but j\"\r\n           j <- setdiff(seq_len(x$num_columns), -1 * j)\r\n         }\r\n         x <- x$SelectColumns(as.integer(j) - 1L)\r\n   ```\n\n##########\nFile path: r/tests/testthat/test-Table.R\n##########\n@@ -130,16 +130,16 @@ test_that(\"[, [[, $ for Table\", {\n   expect_null(tab[[\"asdf\"]])\n   # List-like column slicing\n   expect_data_frame(tab[2:4], tbl[2:4])\n-  expect_data_frame(tab[c(1, 0)], tbl[c(1, 0)])\n+  expect_data_frame(tab[c(2, 1)], tbl[c(2, 1)])\n \n   expect_error(tab[[c(4, 3)]])\n   expect_error(tab[[NA]], \"'i' must be character or numeric, not logical\")\n   expect_error(tab[[NULL]], \"'i' must be character or numeric, not NULL\")\n   expect_error(tab[[c(\"asdf\", \"jkl;\")]], 'length(name) not equal to 1', fixed = TRUE)\n-  expect_error(tab[-3], \"Selections can't have negative value\") # From tidyselect\n-  expect_error(tab[-3:3], \"Selections can't have negative value\") # From tidyselect\n-  expect_error(tab[1000]) # This is caught in vctrs, assert more specifically when it stabilizes\n-  expect_error(tab[1:1000]) # same as ^\n+  expect_error(tab[-3], \"Invalid column index\")\n\nReview comment:\n       This may not be allowed in tidyselect but `[` supports this to drop a column, so I don't think this one should error. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T21:31:44.523+0000",
                    "updated": "2020-09-12T21:31:44.523+0000",
                    "started": "2020-09-12T21:31:44.523+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "483196",
                    "issueId": "13315931"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315931/worklog/483214",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson closed pull request #8125:\nURL: https://github.com/apache/arrow/pull/8125\n\n\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T21:33:35.775+0000",
                    "updated": "2020-09-12T21:33:35.775+0000",
                    "started": "2020-09-12T21:33:35.775+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "483214",
                    "issueId": "13315931"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 4800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@493db758[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a190027[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d80c9b4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4feafe1b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b9b0e3e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5b6da120[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@601b1e90[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@78992eae[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7bf0257d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4d22ef82[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@75758728[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@44a83b76[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4800,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Sep 11 22:50:43 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-09-11T22:50:43.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9387/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-07-09T15:39:56.000+0000",
        "updated": "2020-09-12T21:33:40.000+0000",
        "timeoriginalestimate": null,
        "description": "ARROW-8314 adds it so we can use it instead of the one we wrote in the R package.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Use new C++ table select method",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315931/comment/17194554",
                    "id": "17194554",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 8125\n[https://github.com/apache/arrow/pull/8125]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2020-09-11T22:50:43.137+0000",
                    "updated": "2020-09-11T22:50:43.137+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0gm3k:",
        "customfield_12314139": null
    }
}