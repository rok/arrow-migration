{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13181084",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181084",
    "key": "ARROW-3116",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
            "name": "pcmoritz",
            "key": "pcmoritz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Philipp Moritz",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
            "name": "pcmoritz",
            "key": "pcmoritz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Philipp Moritz",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
            "name": "pcmoritz",
            "key": "pcmoritz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Philipp Moritz",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3116/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 6,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181084/worklog/138075",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz opened a new pull request #2470: ARROW-3116: [Plasma] Add \"ls\" to object store\nURL: https://github.com/apache/arrow/pull/2470\n \n \n   This adds plasma_client.list to the plasma client API.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-25T07:34:41.567+0000",
                    "updated": "2018-08-25T07:34:41.567+0000",
                    "started": "2018-08-25T07:34:41.566+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "138075",
                    "issueId": "13181084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181084/worklog/138141",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz commented on issue #2470: ARROW-3116: [Plasma] Add \"ls\" to object store\nURL: https://github.com/apache/arrow/pull/2470#issuecomment-415991698\n \n \n   This is now ready to give feedback or merge (I marked it as experimental so it can be evolved).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-25T19:34:41.048+0000",
                    "updated": "2018-08-25T19:34:41.048+0000",
                    "started": "2018-08-25T19:34:41.048+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "138141",
                    "issueId": "13181084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181084/worklog/138143",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2470: ARROW-3116: [Plasma] Add \"ls\" to object store\nURL: https://github.com/apache/arrow/pull/2470#issuecomment-415993695\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2470?src=pr&el=h1) Report\n   > :exclamation: No coverage uploaded for pull request base (`master@06e7a1b`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).\n   > The diff coverage is `82.35%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2470/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2470?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##             master    #2470   +/-   ##\n   =========================================\n     Coverage          ?   87.47%           \n   =========================================\n     Files             ?      246           \n     Lines             ?    43412           \n     Branches          ?        0           \n   =========================================\n     Hits              ?    37975           \n     Misses            ?     5437           \n     Partials          ?        0\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2470?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/plasma/client.h](https://codecov.io/gh/apache/arrow/pull/2470/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvY2xpZW50Lmg=) | `100% <\u00f8> (\u00f8)` | |\n   | [cpp/src/plasma/protocol.h](https://codecov.io/gh/apache/arrow/pull/2470/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvcHJvdG9jb2wuaA==) | `100% <\u00f8> (\u00f8)` | |\n   | [cpp/src/plasma/common.h](https://codecov.io/gh/apache/arrow/pull/2470/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvY29tbW9uLmg=) | `100% <\u00f8> (\u00f8)` | |\n   | [cpp/src/plasma/plasma.h](https://codecov.io/gh/apache/arrow/pull/2470/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvcGxhc21hLmg=) | `100% <\u00f8> (\u00f8)` | |\n   | [cpp/src/plasma/client.cc](https://codecov.io/gh/apache/arrow/pull/2470/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvY2xpZW50LmNj) | `84.43% <100%> (\u00f8)` | |\n   | [python/pyarrow/tests/test\\_plasma.py](https://codecov.io/gh/apache/arrow/pull/2470/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9wbGFzbWEucHk=) | `96.6% <100%> (\u00f8)` | |\n   | [cpp/src/plasma/store.cc](https://codecov.io/gh/apache/arrow/pull/2470/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvc3RvcmUuY2M=) | `89.14% <50%> (\u00f8)` | |\n   | [cpp/src/plasma/protocol.cc](https://codecov.io/gh/apache/arrow/pull/2470/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvcHJvdG9jb2wuY2M=) | `95.36% <60%> (\u00f8)` | |\n   | [python/pyarrow/\\_plasma.pyx](https://codecov.io/gh/apache/arrow/pull/2470/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvX3BsYXNtYS5weXg=) | `61.57% <95%> (\u00f8)` | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2470?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2470?src=pr&el=footer). Last update [06e7a1b...5ff4e35](https://codecov.io/gh/apache/arrow/pull/2470?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-25T20:12:08.628+0000",
                    "updated": "2018-08-25T20:12:08.628+0000",
                    "started": "2018-08-25T20:12:08.627+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "138143",
                    "issueId": "13181084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181084/worklog/138148",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "robertnishihara commented on a change in pull request #2470: ARROW-3116: [Plasma] Add \"ls\" to object store\nURL: https://github.com/apache/arrow/pull/2470#discussion_r212808632\n \n \n\n ##########\n File path: python/pyarrow/tests/test_plasma.py\n ##########\n @@ -793,6 +795,54 @@ def test_plasma_client_sharing():\n         del buf  # This segfaulted pre ARROW-2448.\n \n \n+@pytest.mark.plasma\n+def test_plasma_list():\n+    import pyarrow.plasma as plasma\n+\n+    with plasma.start_plasma_store(\n+            plasma_store_memory=DEFAULT_PLASMA_STORE_MEMORY) \\\n+            as (plasma_store_name, p):\n+        plasma_client = plasma.connect(plasma_store_name, \"\", 0)\n+\n+        # Test sizes\n+        u, _, _ = create_object(plasma_client, 11, metadata_size=7, seal=False)\n+        l1 = plasma_client.list()\n+        assert l1[u][\"data_size\"] == 11\n+        assert l1[u][\"metadata_size\"] == 7\n+\n+        # Test ref_count\n+        v = plasma_client.put(np.zeros(3))\n+        l2 = plasma_client.list()\n+        # Ref count has already been released\n+        assert l2[v][\"ref_count\"] == 0\n+        a = plasma_client.get(v)\n+        l3 = plasma_client.list()\n+        assert l3[v][\"ref_count\"] == 1\n+        del a\n+\n+        # Test state\n+        w, _, _ = create_object(plasma_client, 3, metadata_size=0, seal=False)\n+        l4 = plasma_client.list()\n+        assert l4[w][\"state\"] == \"created\"\n+        plasma_client.seal(w)\n+        l5 = plasma_client.list()\n+        assert l5[w][\"state\"] == \"sealed\"\n+\n+        # Test timestamps\n+        t1 = time.time()\n+        x, _, _ = create_object(plasma_client, 3, metadata_size=0, seal=False)\n+        t2 = time.time()\n+        l6 = plasma_client.list()\n+        assert math.floor(t1) <= l6[x][\"create_time\"] <= math.ceil(t2)\n \n Review comment:\n   There's some chance this could be flaky due to non-monotonic clocks.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-25T20:50:07.495+0000",
                    "updated": "2018-08-25T20:50:07.495+0000",
                    "started": "2018-08-25T20:50:07.494+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "138148",
                    "issueId": "13181084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181084/worklog/138251",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz commented on a change in pull request #2470: ARROW-3116: [Plasma] Add \"ls\" to object store\nURL: https://github.com/apache/arrow/pull/2470#discussion_r212837884\n \n \n\n ##########\n File path: python/pyarrow/tests/test_plasma.py\n ##########\n @@ -793,6 +795,54 @@ def test_plasma_client_sharing():\n         del buf  # This segfaulted pre ARROW-2448.\n \n \n+@pytest.mark.plasma\n+def test_plasma_list():\n+    import pyarrow.plasma as plasma\n+\n+    with plasma.start_plasma_store(\n+            plasma_store_memory=DEFAULT_PLASMA_STORE_MEMORY) \\\n+            as (plasma_store_name, p):\n+        plasma_client = plasma.connect(plasma_store_name, \"\", 0)\n+\n+        # Test sizes\n+        u, _, _ = create_object(plasma_client, 11, metadata_size=7, seal=False)\n+        l1 = plasma_client.list()\n+        assert l1[u][\"data_size\"] == 11\n+        assert l1[u][\"metadata_size\"] == 7\n+\n+        # Test ref_count\n+        v = plasma_client.put(np.zeros(3))\n+        l2 = plasma_client.list()\n+        # Ref count has already been released\n+        assert l2[v][\"ref_count\"] == 0\n+        a = plasma_client.get(v)\n+        l3 = plasma_client.list()\n+        assert l3[v][\"ref_count\"] == 1\n+        del a\n+\n+        # Test state\n+        w, _, _ = create_object(plasma_client, 3, metadata_size=0, seal=False)\n+        l4 = plasma_client.list()\n+        assert l4[w][\"state\"] == \"created\"\n+        plasma_client.seal(w)\n+        l5 = plasma_client.list()\n+        assert l5[w][\"state\"] == \"sealed\"\n+\n+        # Test timestamps\n+        t1 = time.time()\n+        x, _, _ = create_object(plasma_client, 3, metadata_size=0, seal=False)\n+        t2 = time.time()\n+        l6 = plasma_client.list()\n+        assert math.floor(t1) <= l6[x][\"create_time\"] <= math.ceil(t2)\n \n Review comment:\n   Yeah, I'd say let's keep this clock for now, since it needs to be consistent with the timestamp from the store, where it makes more sense to use the system time than a monotonic clock. If it turns out to be flaky, we can find a different solution.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-26T20:23:02.176+0000",
                    "updated": "2018-08-26T20:23:02.176+0000",
                    "started": "2018-08-26T20:23:02.176+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "138251",
                    "issueId": "13181084"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181084/worklog/138252",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz closed pull request #2470: ARROW-3116: [Plasma] Add \"ls\" to object store\nURL: https://github.com/apache/arrow/pull/2470\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/plasma/client.cc b/cpp/src/plasma/client.cc\nindex 3c30f3e3af..c5f372f0f9 100644\n--- a/cpp/src/plasma/client.cc\n+++ b/cpp/src/plasma/client.cc\n@@ -184,6 +184,8 @@ class PlasmaClient::Impl : public std::enable_shared_from_this<PlasmaClient::Imp\n \n   Status Contains(const ObjectID& object_id, bool* has_object);\n \n+  Status List(ObjectTable* objects);\n+\n   Status Abort(const ObjectID& object_id);\n \n   Status Seal(const ObjectID& object_id);\n@@ -705,6 +707,13 @@ Status PlasmaClient::Impl::Contains(const ObjectID& object_id, bool* has_object)\n   return Status::OK();\n }\n \n+Status PlasmaClient::Impl::List(ObjectTable* objects) {\n+  RETURN_NOT_OK(SendListRequest(store_conn_));\n+  std::vector<uint8_t> buffer;\n+  RETURN_NOT_OK(PlasmaReceive(store_conn_, MessageType::PlasmaListReply, &buffer));\n+  return ReadListReply(buffer.data(), buffer.size(), objects);\n+}\n+\n static void ComputeBlockHash(const unsigned char* data, int64_t nbytes, uint64_t* hash) {\n   XXH64_state_t hash_state;\n   XXH64_reset(&hash_state, XXH64_DEFAULT_SEED);\n@@ -1057,6 +1066,8 @@ Status PlasmaClient::Contains(const ObjectID& object_id, bool* has_object) {\n   return impl_->Contains(object_id, has_object);\n }\n \n+Status PlasmaClient::List(ObjectTable* objects) { return impl_->List(objects); }\n+\n Status PlasmaClient::Abort(const ObjectID& object_id) { return impl_->Abort(object_id); }\n \n Status PlasmaClient::Seal(const ObjectID& object_id) { return impl_->Seal(object_id); }\ndiff --git a/cpp/src/plasma/client.h b/cpp/src/plasma/client.h\nindex fe0019363e..a95b992a19 100644\n--- a/cpp/src/plasma/client.h\n+++ b/cpp/src/plasma/client.h\n@@ -151,6 +151,21 @@ class ARROW_EXPORT PlasmaClient {\n   /// \\return The return status.\n   Status Contains(const ObjectID& object_id, bool* has_object);\n \n+  /// List all the objects in the object store.\n+  ///\n+  /// This API is experimental and might change in the future.\n+  ///\n+  /// \\param[out] objects ObjectTable of objects in the store. For each entry\n+  ///             in the map, the following fields are available:\n+  ///             - metadata_size: Size of the object metadata in bytes\n+  ///             - data_size: Size of the object data in bytes\n+  ///             - ref_count: Number of clients referencing the object buffer\n+  ///             - create_time: Unix timestamp of the object creation\n+  ///             - construct_duration: Object creation time in seconds\n+  ///             - state: Is the object still being created or already sealed?\n+  /// \\return The return status.\n+  Status List(ObjectTable* objects);\n+\n   /// Abort an unsealed object in the object store. If the abort succeeds, then\n   /// it will be as if the object was never created at all. The unsealed object\n   /// must have only a single reference (the one that would have been removed by\ndiff --git a/cpp/src/plasma/common.h b/cpp/src/plasma/common.h\nindex a8cb931872..9c3c0c918f 100644\n--- a/cpp/src/plasma/common.h\n+++ b/cpp/src/plasma/common.h\n@@ -18,13 +18,17 @@\n #ifndef PLASMA_COMMON_H\n #define PLASMA_COMMON_H\n \n+#include <stddef.h>\n+\n #include <cstring>\n+#include <memory>\n #include <string>\n // TODO(pcm): Convert getopt and sscanf in the store to use more idiomatic C++\n // and get rid of the next three lines:\n #ifndef __STDC_FORMAT_MACROS\n #define __STDC_FORMAT_MACROS\n #endif\n+#include <unordered_map>\n \n #include \"plasma/compat.h\"\n \n@@ -83,6 +87,54 @@ struct ObjectRequest {\n   ObjectLocation location;\n };\n \n+enum class ObjectState : int {\n+  /// Object was created but not sealed in the local Plasma Store.\n+  PLASMA_CREATED = 1,\n+  /// Object is sealed and stored in the local Plasma Store.\n+  PLASMA_SEALED\n+};\n+\n+/// This type is used by the Plasma store. It is here because it is exposed to\n+/// the eviction policy.\n+struct ObjectTableEntry {\n+  ObjectTableEntry();\n+\n+  ~ObjectTableEntry();\n+\n+  /// Memory mapped file containing the object.\n+  int fd;\n+  /// Device number.\n+  int device_num;\n+  /// Size of the underlying map.\n+  int64_t map_size;\n+  /// Offset from the base of the mmap.\n+  ptrdiff_t offset;\n+  /// Pointer to the object data. Needed to free the object.\n+  uint8_t* pointer;\n+  /// Size of the object in bytes.\n+  int64_t data_size;\n+  /// Size of the object metadata in bytes.\n+  int64_t metadata_size;\n+#ifdef PLASMA_GPU\n+  /// IPC GPU handle to share with clients.\n+  std::shared_ptr<CudaIpcMemHandle> ipc_handle;\n+#endif\n+  /// Number of clients currently using this object.\n+  int ref_count;\n+  /// Unix epoch of when this object was created.\n+  int64_t create_time;\n+  /// How long creation of this object took.\n+  int64_t construct_duration;\n+\n+  /// The state of the object, e.g., whether it is open or sealed.\n+  ObjectState state;\n+  /// The digest of the object. Used to see if two objects are the same.\n+  unsigned char digest[kDigestSize];\n+};\n+\n+/// Mapping from ObjectIDs to information about the object.\n+typedef std::unordered_map<ObjectID, std::unique_ptr<ObjectTableEntry>> ObjectTable;\n+\n /// Globally accessible reference to plasma store configuration.\n /// TODO(pcm): This can be avoided with some refactoring of existing code\n /// by making it possible to pass a context object through dlmalloc.\ndiff --git a/cpp/src/plasma/format/common.fbs b/cpp/src/plasma/format/common.fbs\nindex 7f66bf6551..818827a7e0 100644\n--- a/cpp/src/plasma/format/common.fbs\n+++ b/cpp/src/plasma/format/common.fbs\n@@ -25,11 +25,14 @@ table ObjectInfo {\n   data_size: long;\n   // Number of bytes the metadata of this object occupies in memory.\n   metadata_size: long;\n+  // Number of clients using the objects.\n+  ref_count: int;\n   // Unix epoch of when this object was created.\n   create_time: long;\n   // How long creation of this object took.\n   construct_duration: long;\n-  // Hash of the object content.\n+  // Hash of the object content. If the object is not sealed yet this is\n+  // an empty string.\n   digest: string;\n   // Specifies if this object was deleted or added.\n   is_deletion: bool;\ndiff --git a/cpp/src/plasma/format/plasma.fbs b/cpp/src/plasma/format/plasma.fbs\nindex 082ae9cdc0..ded714a384 100644\n--- a/cpp/src/plasma/format/plasma.fbs\n+++ b/cpp/src/plasma/format/plasma.fbs\n@@ -15,6 +15,8 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+include \"common.fbs\";\n+\n // Plasma protocol specification\n namespace plasma.flatbuf;\n \n@@ -44,6 +46,9 @@ enum MessageType:long {\n   // See if the store contains an object (will be deprecated).\n   PlasmaContainsRequest,\n   PlasmaContainsReply,\n+  // List all objects in the store.\n+  PlasmaListRequest,\n+  PlasmaListReply,\n   // Get information for a newly connecting client.\n   PlasmaConnectRequest,\n   PlasmaConnectReply,\n@@ -257,6 +262,13 @@ table PlasmaContainsReply {\n   has_object: int;\n }\n \n+table PlasmaListRequest {\n+}\n+\n+table PlasmaListReply {\n+  objects: [ObjectInfo];\n+}\n+\n // PlasmaConnect is used by a plasma client the first time it connects with the\n // store. This is not really necessary, but is used to get some information\n // about the store such as its memory capacity.\ndiff --git a/cpp/src/plasma/plasma.h b/cpp/src/plasma/plasma.h\nindex 57ba882d38..b4760fc731 100644\n--- a/cpp/src/plasma/plasma.h\n+++ b/cpp/src/plasma/plasma.h\n@@ -95,13 +95,6 @@ struct PlasmaObject {\n   int device_num;\n };\n \n-enum class ObjectState : int {\n-  /// Object was created but not sealed in the local Plasma Store.\n-  PLASMA_CREATED = 1,\n-  /// Object is sealed and stored in the local Plasma Store.\n-  PLASMA_SEALED\n-};\n-\n enum class ObjectStatus : int {\n   /// The object was not found.\n   OBJECT_NOT_FOUND = 0,\n@@ -109,44 +102,10 @@ enum class ObjectStatus : int {\n   OBJECT_FOUND = 1\n };\n \n-/// This type is used by the Plasma store. It is here because it is exposed to\n-/// the eviction policy.\n-struct ObjectTableEntry {\n-  ObjectTableEntry();\n-\n-  ~ObjectTableEntry();\n-\n-  /// Memory mapped file containing the object.\n-  int fd;\n-  /// Device number.\n-  int device_num;\n-  /// Size of the underlying map.\n-  int64_t map_size;\n-  /// Offset from the base of the mmap.\n-  ptrdiff_t offset;\n-  /// Pointer to the object data. Needed to free the object.\n-  uint8_t* pointer;\n-  /// Size of the object in bytes.\n-  int64_t data_size;\n-  /// Size of the object metadata in bytes.\n-  int64_t metadata_size;\n-#ifdef PLASMA_GPU\n-  /// IPC GPU handle to share with clients.\n-  std::shared_ptr<CudaIpcMemHandle> ipc_handle;\n-#endif\n-  /// Number of clients currently using this object.\n-  int ref_count;\n-\n-  /// The state of the object, e.g., whether it is open or sealed.\n-  ObjectState state;\n-  /// The digest of the object. Used to see if two objects are the same.\n-  unsigned char digest[kDigestSize];\n-};\n-\n /// The plasma store information that is exposed to the eviction policy.\n struct PlasmaStoreInfo {\n   /// Objects that are in the Plasma store.\n-  std::unordered_map<ObjectID, std::unique_ptr<ObjectTableEntry>> objects;\n+  ObjectTable objects;\n   /// The amount of memory (in bytes) that we allow to be allocated in the\n   /// store.\n   int64_t memory_capacity;\ndiff --git a/cpp/src/plasma/protocol.cc b/cpp/src/plasma/protocol.cc\nindex da5624971b..5b93b65e10 100644\n--- a/cpp/src/plasma/protocol.cc\n+++ b/cpp/src/plasma/protocol.cc\n@@ -17,6 +17,8 @@\n \n #include \"plasma/protocol.h\"\n \n+#include <utility>\n+\n #include \"flatbuffers/flatbuffers.h\"\n #include \"plasma/plasma_generated.h\"\n \n@@ -410,6 +412,53 @@ Status ReadContainsReply(uint8_t* data, size_t size, ObjectID* object_id,\n   return Status::OK();\n }\n \n+// List messages.\n+\n+Status SendListRequest(int sock) {\n+  flatbuffers::FlatBufferBuilder fbb;\n+  auto message = fb::CreatePlasmaListRequest(fbb);\n+  return PlasmaSend(sock, MessageType::PlasmaListRequest, &fbb, message);\n+}\n+\n+Status ReadListRequest(uint8_t* data, size_t size) { return Status::OK(); }\n+\n+Status SendListReply(int sock, const ObjectTable& objects) {\n+  flatbuffers::FlatBufferBuilder fbb;\n+  std::vector<flatbuffers::Offset<fb::ObjectInfo>> object_infos;\n+  for (auto const& entry : objects) {\n+    auto digest = entry.second->state == ObjectState::PLASMA_CREATED\n+                      ? fbb.CreateString(\"\")\n+                      : fbb.CreateString(reinterpret_cast<char*>(entry.second->digest),\n+                                         kDigestSize);\n+    auto info = fb::CreateObjectInfo(fbb, fbb.CreateString(entry.first.binary()),\n+                                     entry.second->data_size, entry.second->metadata_size,\n+                                     entry.second->ref_count, entry.second->create_time,\n+                                     entry.second->construct_duration, digest);\n+    object_infos.push_back(info);\n+  }\n+  auto message = fb::CreatePlasmaListReply(fbb, fbb.CreateVector(object_infos));\n+  return PlasmaSend(sock, MessageType::PlasmaListReply, &fbb, message);\n+}\n+\n+Status ReadListReply(uint8_t* data, size_t size, ObjectTable* objects) {\n+  DCHECK(data);\n+  auto message = flatbuffers::GetRoot<fb::PlasmaListReply>(data);\n+  DCHECK(VerifyFlatbuffer(message, data, size));\n+  for (auto const& object : *message->objects()) {\n+    ObjectID object_id = ObjectID::from_binary(object->object_id()->str());\n+    auto entry = std::unique_ptr<ObjectTableEntry>(new ObjectTableEntry());\n+    entry->data_size = object->data_size();\n+    entry->metadata_size = object->metadata_size();\n+    entry->ref_count = object->ref_count();\n+    entry->create_time = object->create_time();\n+    entry->construct_duration = object->construct_duration();\n+    entry->state = object->digest()->size() == 0 ? ObjectState::PLASMA_CREATED\n+                                                 : ObjectState::PLASMA_SEALED;\n+    (*objects)[object_id] = std::move(entry);\n+  }\n+  return Status::OK();\n+}\n+\n // Connect messages.\n \n Status SendConnectRequest(int sock) {\ndiff --git a/cpp/src/plasma/protocol.h b/cpp/src/plasma/protocol.h\nindex 1665f0c757..057ba1cede 100644\n--- a/cpp/src/plasma/protocol.h\n+++ b/cpp/src/plasma/protocol.h\n@@ -141,6 +141,16 @@ Status SendContainsReply(int sock, ObjectID object_id, bool has_object);\n Status ReadContainsReply(uint8_t* data, size_t size, ObjectID* object_id,\n                          bool* has_object);\n \n+/* Plasma List message functions. */\n+\n+Status SendListRequest(int sock);\n+\n+Status ReadListRequest(uint8_t* data, size_t size);\n+\n+Status SendListReply(int sock, const ObjectTable& objects);\n+\n+Status ReadListReply(uint8_t* data, size_t size, ObjectTable* objects);\n+\n /* Plasma Connect message functions. */\n \n Status SendConnectRequest(int sock);\ndiff --git a/cpp/src/plasma/store.cc b/cpp/src/plasma/store.cc\nindex 8cef3e3f79..58f8d0193c 100644\n--- a/cpp/src/plasma/store.cc\n+++ b/cpp/src/plasma/store.cc\n@@ -43,6 +43,7 @@\n #include <sys/un.h>\n #include <unistd.h>\n \n+#include <ctime>\n #include <deque>\n #include <memory>\n #include <string>\n@@ -214,6 +215,8 @@ PlasmaError PlasmaStore::CreateObject(const ObjectID& object_id, int64_t data_si\n   entry->offset = offset;\n   entry->state = ObjectState::PLASMA_CREATED;\n   entry->device_num = device_num;\n+  entry->create_time = std::time(nullptr);\n+  entry->construct_duration = -1;\n #ifdef PLASMA_GPU\n   if (device_num != 0) {\n     DCHECK_OK(gpu_handle->ExportForIpc(&entry->ipc_handle));\n@@ -445,6 +448,8 @@ void PlasmaStore::SealObject(const ObjectID& object_id, unsigned char digest[])\n   entry->state = ObjectState::PLASMA_SEALED;\n   // Set the object digest.\n   std::memcpy(&entry->digest[0], &digest[0], kDigestSize);\n+  // Set object construction duration.\n+  entry->construct_duration = std::time(nullptr) - entry->create_time;\n   // Inform all subscribers that a new object has been sealed.\n   ObjectInfoT info;\n   info.object_id = object_id.binary();\n@@ -784,6 +789,10 @@ Status PlasmaStore::ProcessMessage(Client* client) {\n         HANDLE_SIGPIPE(SendContainsReply(client->fd, object_id, 0), client->fd);\n       }\n     } break;\n+    case fb::MessageType::PlasmaListRequest: {\n+      RETURN_NOT_OK(ReadListRequest(input, input_size));\n+      HANDLE_SIGPIPE(SendListReply(client->fd, store_info_.objects), client->fd);\n+    } break;\n     case fb::MessageType::PlasmaSealRequest: {\n       unsigned char digest[kDigestSize];\n       RETURN_NOT_OK(ReadSealRequest(input, input_size, &object_id, &digest[0]));\ndiff --git a/python/doc/source/plasma.rst b/python/doc/source/plasma.rst\nindex 6adc470e74..09837cf6e9 100644\n--- a/python/doc/source/plasma.rst\n+++ b/python/doc/source/plasma.rst\n@@ -209,6 +209,49 @@ milliseconds). After the timeout, the interpreter will yield control back.\n   b'\\x01\\x02\\x03'\n \n \n+Listing objects in the store\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+The objects in the store can be listed in the following way (note that\n+this functionality is currently experimental and the concrete representation\n+of the object info might change in the future):\n+\n+.. code-block:: python\n+\n+  import pyarrow.plasma as plasma\n+  import time\n+\n+  client = plasma.connect(\"/tmp/plasma\", \"\", 0)\n+\n+  client.put(\"hello, world\")\n+  # Sleep a little so we get different creation times\n+  time.sleep(2)\n+  client.put(\"another object\")\n+  # Create an object that is not sealed yet\n+  object_id = plasma.ObjectID.from_random()\n+  client.create(object_id, 100)\n+  print(client.list())\n+\n+  >>> {ObjectID(4cba8f80c54c6d265b46c2cdfcee6e32348b12be): {'construct_duration': 0,\n+  >>>  'create_time': 1535223642,\n+  >>>  'data_size': 460,\n+  >>>  'metadata_size': 0,\n+  >>>  'ref_count': 0,\n+  >>>  'state': 'sealed'},\n+  >>> ObjectID(a7598230b0c26464c9d9c99ae14773ee81485428): {'construct_duration': 0,\n+  >>>  'create_time': 1535223644,\n+  >>>  'data_size': 460,\n+  >>>  'metadata_size': 0,\n+  >>>  'ref_count': 0,\n+  >>>  'state': 'sealed'},\n+  >>> ObjectID(e603ab0c92098ebf08f90bfcea33ff98f6476870): {'construct_duration': -1,\n+  >>>  'create_time': 1535223644,\n+  >>>  'data_size': 100,\n+  >>>  'metadata_size': 0,\n+  >>>  'ref_count': 1,\n+  >>>  'state': 'created'}}\n+\n+\n Using Arrow and Pandas with Plasma\n ----------------------------------\n \ndiff --git a/python/pyarrow/_plasma.pyx b/python/pyarrow/_plasma.pyx\nindex 86a6232d3e..783fbcb5c2 100644\n--- a/python/pyarrow/_plasma.pyx\n+++ b/python/pyarrow/_plasma.pyx\n@@ -23,7 +23,9 @@ from libcpp cimport bool as c_bool, nullptr\n from libcpp.memory cimport shared_ptr, unique_ptr, make_shared\n from libcpp.string cimport string as c_string\n from libcpp.vector cimport vector as c_vector\n+from libcpp.unordered_map cimport unordered_map\n from libc.stdint cimport int64_t, uint8_t, uintptr_t\n+from cython.operator cimport dereference as deref, preincrement as inc\n from cpython.pycapsule cimport *\n \n import collections\n@@ -62,6 +64,26 @@ cdef extern from \"plasma/common.h\" nogil:\n         int type\n         int location\n \n+    cdef enum CObjectState\" plasma::ObjectState\":\n+        PLASMA_CREATED\" plasma::ObjectState::PLASMA_CREATED\"\n+        PLASMA_SEALED\" plasma::ObjectState::PLASMA_SEALED\"\n+\n+    cdef struct CObjectTableEntry\" plasma::ObjectTableEntry\":\n+        int fd\n+        int device_num\n+        int64_t map_size\n+        ptrdiff_t offset\n+        uint8_t* pointer\n+        int64_t data_size\n+        int64_t metadata_size\n+        int ref_count\n+        int64_t create_time\n+        int64_t construct_duration\n+        CObjectState state\n+\n+    ctypedef unordered_map[CUniqueID, unique_ptr[CObjectTableEntry]] \\\n+        CObjectTable\" plasma::ObjectTable\"\n+\n \n cdef extern from \"plasma/common.h\":\n     cdef int64_t kDigestSize\" plasma::kDigestSize\"\n@@ -101,6 +123,8 @@ cdef extern from \"plasma/client.h\" nogil:\n \n         CStatus Contains(const CUniqueID& object_id, c_bool* has_object)\n \n+        CStatus List(CObjectTable* objects)\n+\n         CStatus Subscribe(int* fd)\n \n         CStatus GetNotification(int fd, CUniqueID* object_id,\n@@ -678,6 +702,60 @@ cdef class PlasmaClient:\n         with nogil:\n             check_status(self.client.get().Delete(ids))\n \n+    def list(self):\n+        \"\"\"\n+        Experimental: List the objects in the store.\n+\n+        Returns\n+        -------\n+        dict\n+            Dictionary from ObjectIDs to an \"info\" dictionary describing the\n+            object. The \"info\" dictionary has the following entries:\n+\n+            data_size\n+              size of the object in bytes\n+\n+            metadata_size\n+              size of the object metadata in bytes\n+\n+            ref_count\n+              Number of clients referencing the object buffer\n+\n+            create_time\n+              Unix timestamp of the creation of the object\n+\n+            construct_duration\n+              Time the creation of the object took in seconds\n+\n+            state\n+              \"created\" if the object is still being created and\n+              \"sealed\" if it is already sealed\n+        \"\"\"\n+        cdef CObjectTable objects\n+        with nogil:\n+            check_status(self.client.get().List(&objects))\n+        result = dict()\n+        cdef ObjectID object_id\n+        cdef CObjectTableEntry entry\n+        it = objects.begin()\n+        while it != objects.end():\n+            object_id = ObjectID(deref(it).first.binary())\n+            entry = deref(deref(it).second)\n+            if entry.state == CObjectState.PLASMA_CREATED:\n+                state = \"created\"\n+            else:\n+                state = \"sealed\"\n+            result[object_id] = {\n+                \"data_size\": entry.data_size,\n+                \"metadata_size\": entry.metadata_size,\n+                \"ref_count\": entry.ref_count,\n+                \"create_time\": entry.create_time,\n+                \"construct_duration\": entry.construct_duration,\n+                \"state\": state\n+            }\n+            inc(it)\n+        return result\n+\n \n def connect(store_socket_name, manager_socket_name, int release_delay,\n             int num_retries=-1):\ndiff --git a/python/pyarrow/tests/test_plasma.py b/python/pyarrow/tests/test_plasma.py\nindex 7cb1c0e809..25102984e2 100644\n--- a/python/pyarrow/tests/test_plasma.py\n+++ b/python/pyarrow/tests/test_plasma.py\n@@ -19,12 +19,14 @@\n from __future__ import division\n from __future__ import print_function\n \n+import math\n import os\n import pytest\n import random\n import signal\n import subprocess\n import sys\n+import time\n \n import numpy as np\n import pyarrow as pa\n@@ -793,6 +795,54 @@ def test_plasma_client_sharing():\n         del buf  # This segfaulted pre ARROW-2448.\n \n \n+@pytest.mark.plasma\n+def test_plasma_list():\n+    import pyarrow.plasma as plasma\n+\n+    with plasma.start_plasma_store(\n+            plasma_store_memory=DEFAULT_PLASMA_STORE_MEMORY) \\\n+            as (plasma_store_name, p):\n+        plasma_client = plasma.connect(plasma_store_name, \"\", 0)\n+\n+        # Test sizes\n+        u, _, _ = create_object(plasma_client, 11, metadata_size=7, seal=False)\n+        l1 = plasma_client.list()\n+        assert l1[u][\"data_size\"] == 11\n+        assert l1[u][\"metadata_size\"] == 7\n+\n+        # Test ref_count\n+        v = plasma_client.put(np.zeros(3))\n+        l2 = plasma_client.list()\n+        # Ref count has already been released\n+        assert l2[v][\"ref_count\"] == 0\n+        a = plasma_client.get(v)\n+        l3 = plasma_client.list()\n+        assert l3[v][\"ref_count\"] == 1\n+        del a\n+\n+        # Test state\n+        w, _, _ = create_object(plasma_client, 3, metadata_size=0, seal=False)\n+        l4 = plasma_client.list()\n+        assert l4[w][\"state\"] == \"created\"\n+        plasma_client.seal(w)\n+        l5 = plasma_client.list()\n+        assert l5[w][\"state\"] == \"sealed\"\n+\n+        # Test timestamps\n+        t1 = time.time()\n+        x, _, _ = create_object(plasma_client, 3, metadata_size=0, seal=False)\n+        t2 = time.time()\n+        l6 = plasma_client.list()\n+        assert math.floor(t1) <= l6[x][\"create_time\"] <= math.ceil(t2)\n+        time.sleep(2.0)\n+        t3 = time.time()\n+        plasma_client.seal(x)\n+        t4 = time.time()\n+        l7 = plasma_client.list()\n+        assert math.floor(t3 - t2) <= l7[x][\"construct_duration\"]\n+        assert l7[x][\"construct_duration\"] <= math.ceil(t4 - t1)\n+\n+\n @pytest.mark.plasma\n def test_object_id_randomness():\n     cmd = \"from pyarrow import plasma; print(plasma.ObjectID.from_random())\"\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-26T20:24:19.864+0000",
                    "updated": "2018-08-26T20:24:19.864+0000",
                    "started": "2018-08-26T20:24:19.864+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "138252",
                    "issueId": "13181084"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 3600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4f2b7102[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1b9d3da[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5d34d560[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@125cfa1f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@48ecc5ed[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@194fa8c5[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@622bf159[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@17527301[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@39bf0fab[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5d5291d9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@60ce0213[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6400bf70[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 3600,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Aug 26 20:24:22 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-08-26T20:24:22.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3116/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-08-24T23:37:01.000+0000",
        "updated": "2018-08-26T20:24:22.000+0000",
        "timeoriginalestimate": null,
        "description": "Add a facility to list all the objects in the store and information about them (object ids, sizes, number of clients using them, status i.e. \"sealed\" or \"unsealed\", creating date, time it took to create). This is very useful for debugging applications.\r\n\r\nThis will be exposed by having client.list() in the python client, which will return a dict mapping object ids to the information.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 3600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Plasma] Add \"ls\" to object store",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181084/comment/16593018",
                    "id": "16593018",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
                        "name": "pcmoritz",
                        "key": "pcmoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Philipp Moritz",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 2470\n[https://github.com/apache/arrow/pull/2470]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
                        "name": "pcmoritz",
                        "key": "pcmoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Philipp Moritz",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-08-26T20:24:22.731+0000",
                    "updated": "2018-08-26T20:24:22.731+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3xetz:",
        "customfield_12314139": null
    }
}