{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13177523",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523",
    "key": "ARROW-3016",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12632497",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12632497",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13425865",
                    "key": "ARROW-15512",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13425865",
                    "fields": {
                        "summary": "[C++] OT logging for memory pool allocations",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12631775",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12631775",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13424088",
                    "key": "ARROW-15408",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424088",
                    "fields": {
                        "summary": "[C++] Environment variable to turn on memory allocation logging",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
            "name": "willjones127",
            "key": "willjones127",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Will Jones",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3016/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 14,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523/worklog/718260",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 opened a new pull request #12307:\nURL: https://github.com/apache/arrow/pull/12307\n\n\n   Put together some scripts and an example for using perf to understand memory allocations in an Arrow C++ program.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-31T22:13:03.074+0000",
                    "updated": "2022-01-31T22:13:03.074+0000",
                    "started": "2022-01-31T22:13:03.074+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718260",
                    "issueId": "13177523"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523/worklog/718261",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12307:\nURL: https://github.com/apache/arrow/pull/12307#issuecomment-1026264361\n\n\n   https://issues.apache.org/jira/browse/ARROW-3016\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-31T22:13:15.715+0000",
                    "updated": "2022-01-31T22:13:15.715+0000",
                    "started": "2022-01-31T22:13:15.714+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718261",
                    "issueId": "13177523"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523/worklog/718645",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12307:\nURL: https://github.com/apache/arrow/pull/12307#discussion_r796570839\n\n\n\n##########\nFile path: docs/source/cpp/memory.rst\n##########\n@@ -201,3 +201,261 @@ simply do::\n    std::shared_ptr<arrow::Buffer> arbitrary_buffer = ... ;\n    std::shared_ptr<arrow::Buffer> cpu_buffer = arrow::Buffer::ViewOrCopy(\n       arbitrary_buffer, arrow::default_cpu_memory_manager());\n+\n+\n+Memory Profiling\n+================\n+\n+On Linux, detailed profiles of memory allocations can be generated using perf record,\n+without any need to modify the binaries. These profiles can show the\n+traceback in addition to allocation parameters (like size).\n+\n+.. TODO: This requires a debug build, right? Or maybe not if symbols in header file\n\nReview comment:\n       I _think_ you just need symbols - I was testing on the release build from conda-forge. But a debug build will let you set more fine-grained probes (e.g. on a specific line), though that's not really relevant here I guess.\n\n##########\nFile path: docs/source/cpp/memory.rst\n##########\n@@ -201,3 +201,261 @@ simply do::\n    std::shared_ptr<arrow::Buffer> arbitrary_buffer = ... ;\n    std::shared_ptr<arrow::Buffer> cpu_buffer = arrow::Buffer::ViewOrCopy(\n       arbitrary_buffer, arrow::default_cpu_memory_manager());\n+\n+\n+Memory Profiling\n+================\n+\n+On Linux, detailed profiles of memory allocations can be generated using perf record,\n+without any need to modify the binaries. These profiles can show the\n+traceback in addition to allocation parameters (like size).\n+\n+.. TODO: This requires a debug build, right? Or maybe not if symbols in header file\n+\n+\n+.. note::\n+   If you profiling Arrow's tests on another platform, you can run the following docker container\n+   using archery:::\n+\n+      archery docker run ubuntu-cpp bash\n+      /arrow/ci/scripts/cpp_build.sh /arrow /build\n+      cd build/cpp/debug\n+      ./arrow-array-test # Run a test\n+      apt-get update\n+      apt-get install -y linux-tools-generic\n+      alias perf=/usr/lib/linux-tools/<something>/perf\n+\n+\n+To track allocations, create probe points on each of the jemalloc methods used.\n+Collecting ``'$params'`` allows us to record the size of the allocations requested,\n+while collecting ``$retval`` allows us to record the address of recorded allocations,\n+so we can correlate them with the call to free/dealloc.\n+\n+:: \n+\n+   perf probe -x libarrow.so je_arrow_mallocx '$params' \n+   perf probe -x libarrow.so je_arrow_mallocx%return '$retval' \n+   perf probe -x libarrow.so je_arrow_rallocx '$params' \n+   perf probe -x libarrow.so je_arrow_rallocx%return '$retval' \n+   perf probe -x libarrow.so je_arrow_dallocx '$params' \n+\n+Then you can record calls with associated tracebacks using ``perf record``. In this \n+example, we are running the StructArray unit tests in Arrow::\n+   \n+   perf record -g --call-graph dwarf \\\n+    -e probe_libarrow:je_arrow_mallocx \\\n+    -e probe_libarrow:je_arrow_mallocx__return \\\n+    -e probe_libarrow:je_arrow_rallocx \\\n+    -e probe_libarrow:je_arrow_rallocx__return \\\n+    -e probe_libarrow:je_arrow_dallocx \\\n+    ./arrow-array-test --gtest_filter=StructArray*\n+\n+.. TODO: What are the equivalent probe calls for mimalloc and system allocator?\n\nReview comment:\n       They should all be in https://github.com/apache/arrow/blob/master/cpp/src/arrow/memory_pool.cc\n\n##########\nFile path: docs/source/cpp/memory.rst\n##########\n@@ -201,3 +201,261 @@ simply do::\n    std::shared_ptr<arrow::Buffer> arbitrary_buffer = ... ;\n    std::shared_ptr<arrow::Buffer> cpu_buffer = arrow::Buffer::ViewOrCopy(\n       arbitrary_buffer, arrow::default_cpu_memory_manager());\n+\n+\n+Memory Profiling\n+================\n+\n+On Linux, detailed profiles of memory allocations can be generated using perf record,\n+without any need to modify the binaries. These profiles can show the\n+traceback in addition to allocation parameters (like size).\n+\n+.. TODO: This requires a debug build, right? Or maybe not if symbols in header file\n+\n+\n+.. note::\n+   If you profiling Arrow's tests on another platform, you can run the following docker container\n+   using archery:::\n+\n+      archery docker run ubuntu-cpp bash\n+      /arrow/ci/scripts/cpp_build.sh /arrow /build\n+      cd build/cpp/debug\n+      ./arrow-array-test # Run a test\n+      apt-get update\n+      apt-get install -y linux-tools-generic\n+      alias perf=/usr/lib/linux-tools/<something>/perf\n+\n+\n+To track allocations, create probe points on each of the jemalloc methods used.\n+Collecting ``'$params'`` allows us to record the size of the allocations requested,\n+while collecting ``$retval`` allows us to record the address of recorded allocations,\n+so we can correlate them with the call to free/dealloc.\n+\n+:: \n+\n+   perf probe -x libarrow.so je_arrow_mallocx '$params' \n+   perf probe -x libarrow.so je_arrow_mallocx%return '$retval' \n+   perf probe -x libarrow.so je_arrow_rallocx '$params' \n+   perf probe -x libarrow.so je_arrow_rallocx%return '$retval' \n+   perf probe -x libarrow.so je_arrow_dallocx '$params' \n+\n+Then you can record calls with associated tracebacks using ``perf record``. In this \n+example, we are running the StructArray unit tests in Arrow::\n+   \n+   perf record -g --call-graph dwarf \\\n+    -e probe_libarrow:je_arrow_mallocx \\\n+    -e probe_libarrow:je_arrow_mallocx__return \\\n+    -e probe_libarrow:je_arrow_rallocx \\\n+    -e probe_libarrow:je_arrow_rallocx__return \\\n+    -e probe_libarrow:je_arrow_dallocx \\\n+    ./arrow-array-test --gtest_filter=StructArray*\n+\n+.. TODO: What are the equivalent probe calls for mimalloc and system allocator?\n+\n+\n+.. code-block:: python\n+\n+   import sys\n+   import re\n+   import json\n+\n+   # Example non-traceback line\n+   # arrow-array-tes 14344 [003]  7501.073802: probe_libarrow:je_arrow_mallocx: (7fbcd20bb640) size=0x80 flags=6\n+\n+   current = {}\n+   current_traceback = ''\n+\n+   def new_row():\n+       global current_traceback\n+       current['traceback'] = current_traceback\n+       print(json.dumps(current))\n+       current_traceback = ''\n+\n+   for line in sys.stdin:\n+       if line == '\\n':\n+           continue\n+       elif line[0] == '\\t':\n+           # traceback line\n+           current_traceback += line.strip(\"\\t\")\n+       else:\n+           line = line.rstrip('\\n')\n+           if not len(current) == 0:\n+               new_row()\n+           parts = re.sub(' +', ' ', line).split(' ')\n+\n+           parts.reverse()\n+           parts.pop() # file\n+           parts.pop() # \"14344\"\n+           parts.pop() # \"[003]\"\n+\n+           current['time'] = float(parts.pop().rstrip(\":\"))\n+           current['event'] = parts.pop().rstrip(\":\")\n+\n+           parts.pop() # (7fbcd20bddf0)\n+           if parts[-1] == \"<-\":\n+               parts.pop()\n+               parts.pop()\n+\n+           params = {}\n+\n+           for pair in parts:\n+               key, value = pair.split(\"=\")\n+               params[key] = value\n+\n+           current['params'] = params\n+\n+\n+Running the above script gives us JSON lines file with all the events parsed::\n+\n+   > perf script | python3 /arrow/process_perf_events.py > processed_events.jsonl\n+   > head head processed_events.jsonl | cut -c -120\n+   {\"time\": 14814.954378, \"event\": \"probe_libarrow:je_arrow_mallocx\", \"params\": {\"flags\": \"6\", \"size\": \"0x80\"}, \"traceback\"\n+   {\"time\": 14814.95443, \"event\": \"probe_libarrow:je_arrow_mallocx__return\", \"params\": {\"arg1\": \"0x7f4a97e09000\"}, \"traceba\n+   {\"time\": 14814.95448, \"event\": \"probe_libarrow:je_arrow_mallocx\", \"params\": {\"flags\": \"6\", \"size\": \"0x40\"}, \"traceback\":\n+   {\"time\": 14814.954486, \"event\": \"probe_libarrow:je_arrow_mallocx__return\", \"params\": {\"arg1\": \"0x7f4a97e0a000\"}, \"traceb\n+   {\"time\": 14814.954502, \"event\": \"probe_libarrow:je_arrow_rallocx\", \"params\": {\"flags\": \"6\", \"size\": \"0x40\", \"ptr\": \"0x7f\n+   {\"time\": 14814.954507, \"event\": \"probe_libarrow:je_arrow_rallocx__return\", \"params\": {\"arg1\": \"0x7f4a97e0a040\"}, \"traceb\n+   {\"time\": 14814.954796, \"event\": \"probe_libarrow:je_arrow_mallocx\", \"params\": {\"flags\": \"6\", \"size\": \"0x40\"}, \"traceback\"\n+   {\"time\": 14814.954805, \"event\": \"probe_libarrow:je_arrow_mallocx__return\", \"params\": {\"arg1\": \"0x7f4a97e0a080\"}, \"traceb\n+   {\"time\": 14814.954817, \"event\": \"probe_libarrow:je_arrow_mallocx\", \"params\": {\"flags\": \"6\", \"size\": \"0x40\"}, \"traceback\"\n+   {\"time\": 14814.95482, \"event\": \"probe_libarrow:je_arrow_mallocx__return\", \"params\": {\"arg1\": \"0x7f4a97e0a0c0\"}, \"traceba\n+\n+\n+From there one can answer a number of questions. For example, the following script will\n+find which allocations were never freed, and print the associated tracebacks along with\n+the count of dangling allocations:\n+\n+.. code-block:: python\n+\n+   '''Find tracebacks of allocations with no corresponding free'''\n+   import sys\n+   import json\n+   from collections import defaultdict\n+\n+   allocated = dict()\n+\n+   for line in sys.stdin:\n+       line = line.rstrip('\\n')\n+       data = json.loads(line)\n+\n+       if data['event'] == \"probe_libarrow:je_arrow_mallocx__return\":\n+           address = data['params']['arg1']\n+           allocated[address] = data['traceback']\n+       if data['event'] == \"probe_libarrow:je_arrow_rallocx__return\":\n+           address = data['params']['arg1']\n+           allocated[address] = data['traceback']\n+       elif data['event'] == \"probe_libarrow:je_arrow_dallocx\":\n+           address = data['params']['ptr']\n+           del allocated[address]\n+\n+   traceback_counts = defaultdict(int)\n+\n+   for traceback in allocated.values():\n+       traceback_counts[traceback] += 1\n+\n+   for traceback, count in sorted(traceback_counts.items(), key=lambda x: -x[1]):\n+       print(\"Num of dangling allocations:\", count)\n+       print(traceback)\n+\n+\n+::\n+\n+   > cat processed_events.jsonl | python3 /arrow/count_tracebacks.py\n+   Num of dangling allocations: 1\n+       7f4a9b4f7e3b arrow::(anonymous namespace)::JemallocAllocator::AllocateAligned+0x63 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4fac3c arrow::BaseMemoryPoolImpl<arrow::(anonymous namespace)::JemallocAllocator>::Allocate+0x8e (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4fc75a arrow::PoolBuffer::Reserve+0x16e (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4fc99a arrow::PoolBuffer::Resize+0x190 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4f988a arrow::(anonymous namespace)::ResizePoolBuffer<std::unique_ptr<arrow::ResizableBuffer, std::default_delete<arrow::ResizableBuffer> >, std::unique_ptr<arrow::PoolBuffer, std::default_delete<arrow::PoolBuffer> > >+0x47 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4f9229 arrow::AllocateResizableBuffer+0x51 (/build/cpp/debug/libarrow.so.700.0.0)\n+       564fb42a178c arrow::BufferBuilder::Resize+0x60 (/build/cpp/debug/arrow-array-test)\n+       564fb4406d81 arrow::TypedBufferBuilder<int, void>::Resize+0x4f (/build/cpp/debug/arrow-array-test)\n+       564fb43fa751 arrow::NumericBuilder<arrow::Int32Type>::Resize+0xe7 (/build/cpp/debug/arrow-array-test)\n+       564fb42a26e0 arrow::ArrayBuilder::Reserve+0xaa (/build/cpp/debug/arrow-array-test)\n+       564fb42afc5a arrow::NumericBuilder<arrow::Int32Type>::Append+0x3e (/build/cpp/debug/arrow-array-test)\n+       7f4a9ca3c6c0 arrow::ipc::internal::json::(anonymous namespace)::IntegerConverter<arrow::Int32Type, arrow::NumericBuilder<arrow::Int32Type> >::AppendValue+0x10c (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9ca3c791 arrow::ipc::internal::json::(anonymous namespace)::ConcreteConverter<arrow::ipc::internal::json::(anonymous namespace)::IntegerConverter<arrow::Int32Type, arrow::NumericBuilder<arrow::Int32Type> > >::AppendValues+0xb1 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9ca0f1be arrow::ipc::internal::json::ArrayFromJSON+0x1e9 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9e533858 arrow::ArrayFromJSON+0x64 (/build/cpp/debug/libarrow_testing.so.700.0.0)\n+       564fb47b53f3 arrow::StructArray_FlattenOfSlice_Test::TestBody+0x79 (/build/cpp/debug/arrow-array-test)\n+       7f4a99d24633 testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>+0x68 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d1c32a testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>+0x5d (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cf05eb testing::Test::Run+0xf1 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cf102d testing::TestInfo::Run+0x13f (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cf1947 testing::TestSuite::Run+0x14b (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d013f5 testing::internal::UnitTestImpl::RunAllTests+0x433 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d25b61 testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>+0x68 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d1d568 testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>+0x5d (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cffb0c testing::UnitTest::Run+0xcc (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d6b299 RUN_ALL_TESTS+0x14 (/build/cpp/googletest_ep-prefix/lib/libgtest_maind.so.1.11.0)\n+       7f4a99d6b21b main+0x42 (/build/cpp/googletest_ep-prefix/lib/libgtest_maind.so.1.11.0)\n+       7f4a998820b2 __libc_start_main+0xf2 (/usr/lib/x86_64-linux-gnu/libc-2.31.so)\n+       564fb424850d _start+0x2d (/build/cpp/debug/arrow-array-test)\n+\n+   Num of dangling allocations: 1\n+       7f4a9b4f7e3b arrow::(anonymous namespace)::JemallocAllocator::AllocateAligned+0x63 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4fac3c arrow::BaseMemoryPoolImpl<arrow::(anonymous namespace)::JemallocAllocator>::Allocate+0x8e (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4fc75a arrow::PoolBuffer::Reserve+0x16e (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4fc99a arrow::PoolBuffer::Resize+0x190 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4f988a arrow::(anonymous namespace)::ResizePoolBuffer<std::unique_ptr<arrow::ResizableBuffer, std::default_delete<arrow::ResizableBuffer> >, std::unique_ptr<arrow::PoolBuffer, std::default_delete<arrow::PoolBuffer> > >+0x47 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4f9229 arrow::AllocateResizableBuffer+0x51 (/build/cpp/debug/libarrow.so.700.0.0)\n+       564fb42a178c arrow::BufferBuilder::Resize+0x60 (/build/cpp/debug/arrow-array-test)\n+       564fb4402803 arrow::TypedBufferBuilder<long, void>::Resize+0x4f (/build/cpp/debug/arrow-array-test)\n+       564fb43f6a3f arrow::NumericBuilder<arrow::Int64Type>::Resize+0xe7 (/build/cpp/debug/arrow-array-test)\n+       564fb42a26e0 arrow::ArrayBuilder::Reserve+0xaa (/build/cpp/debug/arrow-array-test)\n+       564fb42b5141 arrow::NumericBuilder<arrow::Int64Type>::Append+0x3f (/build/cpp/debug/arrow-array-test)\n+       7f4a9ca3c3b7 arrow::ipc::internal::json::(anonymous namespace)::IntegerConverter<arrow::Int64Type, arrow::NumericBuilder<arrow::Int64Type> >::AppendValue+0x10d (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9ca3c489 arrow::ipc::internal::json::(anonymous namespace)::ConcreteConverter<arrow::ipc::internal::json::(anonymous namespace)::IntegerConverter<arrow::Int64Type, arrow::NumericBuilder<arrow::Int64Type> > >::AppendValues+0xb1 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9ca0f1be arrow::ipc::internal::json::ArrayFromJSON+0x1e9 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9e533858 arrow::ArrayFromJSON+0x64 (/build/cpp/debug/libarrow_testing.so.700.0.0)\n+       564fb47afdf7 arrow::StructArray_FromFields_Test::TestBody+0x985 (/build/cpp/debug/arrow-array-test)\n+       7f4a99d24633 testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>+0x68 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d1c32a testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>+0x5d (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cf05eb testing::Test::Run+0xf1 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cf102d testing::TestInfo::Run+0x13f (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cf1947 testing::TestSuite::Run+0x14b (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d013f5 testing::internal::UnitTestImpl::RunAllTests+0x433 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d25b61 testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>+0x68 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d1d568 testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>+0x5d (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cffb0c testing::UnitTest::Run+0xcc (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d6b299 RUN_ALL_TESTS+0x14 (/build/cpp/googletest_ep-prefix/lib/libgtest_maind.so.1.11.0)\n+       7f4a99d6b21b main+0x42 (/build/cpp/googletest_ep-prefix/lib/libgtest_maind.so.1.11.0)\n+       7f4a998820b2 __libc_start_main+0xf2 (/usr/lib/x86_64-linux-gnu/libc-2.31.so)\n+       564fb424850d _start+0x2d (/build/cpp/debug/arrow-array-test)\n+\n+   Num of dangling allocations: 1\n+       7f4a9b4f7fd2 arrow::(anonymous namespace)::JemallocAllocator::ReallocateAligned+0x13b (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4fae4f arrow::BaseMemoryPoolImpl<arrow::(anonymous namespace)::JemallocAllocator>::Reallocate+0x93 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4fc8f7 arrow::PoolBuffer::Resize+0xed (/build/cpp/debug/libarrow.so.700.0.0)\n+       564fb42a1859 arrow::BufferBuilder::Resize+0x12d (/build/cpp/debug/arrow-array-test)\n+       564fb42a1bbe arrow::BufferBuilder::Finish+0x48 (/build/cpp/debug/arrow-array-test)\n+       564fb42a1e3a arrow::BufferBuilder::Finish+0x50 (/build/cpp/debug/arrow-array-test)\n+       564fb42a1f90 arrow::BufferBuilder::FinishWithLength+0x4e (/build/cpp/debug/arrow-array-test)\n+       564fb4406fa7 arrow::TypedBufferBuilder<int, void>::FinishWithLength+0x4f (/build/cpp/debug/arrow-array-test)\n+       564fb43face7 arrow::NumericBuilder<arrow::Int32Type>::FinishInternal+0x107 (/build/cpp/debug/arrow-array-test)\n+       7f4a9b2a15ae arrow::ArrayBuilder::Finish+0x5a (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9ca09d41 arrow::ipc::internal::json::(anonymous namespace)::Converter::Finish+0x123 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9ca0f26e arrow::ipc::internal::json::ArrayFromJSON+0x299 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9e533858 arrow::ArrayFromJSON+0x64 (/build/cpp/debug/libarrow_testing.so.700.0.0)\n+       564fb47b53f3 arrow::StructArray_FlattenOfSlice_Test::TestBody+0x79 (/build/cpp/debug/arrow-array-test)\n+       7f4a99d24633 testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>+0x68 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d1c32a testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>+0x5d (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cf05eb testing::Test::Run+0xf1 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cf102d testing::TestInfo::Run+0x13f (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cf1947 testing::TestSuite::Run+0x14b (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d013f5 testing::internal::UnitTestImpl::RunAllTests+0x433 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d25b61 testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>+0x68 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d1d568 testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>+0x5d (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cffb0c testing::UnitTest::Run+0xcc (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d6b299 RUN_ALL_TESTS+0x14 (/build/cpp/googletest_ep-prefix/lib/libgtest_maind.so.1.11.0)\n+       7f4a99d6b21b main+0x42 (/build/cpp/googletest_ep-prefix/lib/libgtest_maind.so.1.11.0)\n+       7f4a998820b2 __libc_start_main+0xf2 (/usr/lib/x86_64-linux-gnu/libc-2.31.so)\n+       564fb424850d _start+0x2d (/build/cpp/debug/arrow-array-test)\n+\n+\n+Some other resources with tracing:\n+\n+https://www.maartenbreddels.com/perf/jupyter/python/tracing/gil/2021/01/14/Tracing-the-Python-GIL.html\n+https://jvns.ca/linux-tracing-zine.pdf\n+https://jvns.ca/perf-zine.pdf\n+https://www.brendangregg.com/blog/2015-06-28/linux-ftrace-uprobe.html\n\nReview comment:\n       nit: maybe put these in a bulleted list? (I think these render as just a paragraph right now)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-01T12:59:35.052+0000",
                    "updated": "2022-02-01T12:59:35.052+0000",
                    "started": "2022-02-01T12:59:35.052+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718645",
                    "issueId": "13177523"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523/worklog/719088",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on a change in pull request #12307:\nURL: https://github.com/apache/arrow/pull/12307#discussion_r797151260\n\n\n\n##########\nFile path: docs/source/cpp/memory.rst\n##########\n@@ -201,3 +201,261 @@ simply do::\n    std::shared_ptr<arrow::Buffer> arbitrary_buffer = ... ;\n    std::shared_ptr<arrow::Buffer> cpu_buffer = arrow::Buffer::ViewOrCopy(\n       arbitrary_buffer, arrow::default_cpu_memory_manager());\n+\n+\n+Memory Profiling\n+================\n+\n+On Linux, detailed profiles of memory allocations can be generated using perf record,\n+without any need to modify the binaries. These profiles can show the\n+traceback in addition to allocation parameters (like size).\n+\n+.. TODO: This requires a debug build, right? Or maybe not if symbols in header file\n+\n+\n+.. note::\n+   If you profiling Arrow's tests on another platform, you can run the following docker container\n+   using archery:::\n+\n+      archery docker run ubuntu-cpp bash\n+      /arrow/ci/scripts/cpp_build.sh /arrow /build\n+      cd build/cpp/debug\n+      ./arrow-array-test # Run a test\n+      apt-get update\n+      apt-get install -y linux-tools-generic\n+      alias perf=/usr/lib/linux-tools/<something>/perf\n+\n+\n+To track allocations, create probe points on each of the jemalloc methods used.\n+Collecting ``'$params'`` allows us to record the size of the allocations requested,\n+while collecting ``$retval`` allows us to record the address of recorded allocations,\n+so we can correlate them with the call to free/dealloc.\n+\n+:: \n+\n+   perf probe -x libarrow.so je_arrow_mallocx '$params' \n+   perf probe -x libarrow.so je_arrow_mallocx%return '$retval' \n+   perf probe -x libarrow.so je_arrow_rallocx '$params' \n+   perf probe -x libarrow.so je_arrow_rallocx%return '$retval' \n+   perf probe -x libarrow.so je_arrow_dallocx '$params' \n+\n+Then you can record calls with associated tracebacks using ``perf record``. In this \n+example, we are running the StructArray unit tests in Arrow::\n+   \n+   perf record -g --call-graph dwarf \\\n+    -e probe_libarrow:je_arrow_mallocx \\\n+    -e probe_libarrow:je_arrow_mallocx__return \\\n+    -e probe_libarrow:je_arrow_rallocx \\\n+    -e probe_libarrow:je_arrow_rallocx__return \\\n+    -e probe_libarrow:je_arrow_dallocx \\\n+    ./arrow-array-test --gtest_filter=StructArray*\n+\n+.. TODO: What are the equivalent probe calls for mimalloc and system allocator?\n+\n+\n+.. code-block:: python\n+\n+   import sys\n+   import re\n+   import json\n+\n+   # Example non-traceback line\n+   # arrow-array-tes 14344 [003]  7501.073802: probe_libarrow:je_arrow_mallocx: (7fbcd20bb640) size=0x80 flags=6\n+\n+   current = {}\n+   current_traceback = ''\n+\n+   def new_row():\n+       global current_traceback\n+       current['traceback'] = current_traceback\n+       print(json.dumps(current))\n+       current_traceback = ''\n+\n+   for line in sys.stdin:\n+       if line == '\\n':\n+           continue\n+       elif line[0] == '\\t':\n+           # traceback line\n+           current_traceback += line.strip(\"\\t\")\n+       else:\n+           line = line.rstrip('\\n')\n+           if not len(current) == 0:\n+               new_row()\n+           parts = re.sub(' +', ' ', line).split(' ')\n+\n+           parts.reverse()\n+           parts.pop() # file\n+           parts.pop() # \"14344\"\n+           parts.pop() # \"[003]\"\n+\n+           current['time'] = float(parts.pop().rstrip(\":\"))\n+           current['event'] = parts.pop().rstrip(\":\")\n+\n+           parts.pop() # (7fbcd20bddf0)\n+           if parts[-1] == \"<-\":\n+               parts.pop()\n+               parts.pop()\n+\n+           params = {}\n+\n+           for pair in parts:\n+               key, value = pair.split(\"=\")\n+               params[key] = value\n+\n+           current['params'] = params\n+\n+\n+Running the above script gives us JSON lines file with all the events parsed::\n+\n+   > perf script | python3 /arrow/process_perf_events.py > processed_events.jsonl\n+   > head head processed_events.jsonl | cut -c -120\n+   {\"time\": 14814.954378, \"event\": \"probe_libarrow:je_arrow_mallocx\", \"params\": {\"flags\": \"6\", \"size\": \"0x80\"}, \"traceback\"\n+   {\"time\": 14814.95443, \"event\": \"probe_libarrow:je_arrow_mallocx__return\", \"params\": {\"arg1\": \"0x7f4a97e09000\"}, \"traceba\n+   {\"time\": 14814.95448, \"event\": \"probe_libarrow:je_arrow_mallocx\", \"params\": {\"flags\": \"6\", \"size\": \"0x40\"}, \"traceback\":\n+   {\"time\": 14814.954486, \"event\": \"probe_libarrow:je_arrow_mallocx__return\", \"params\": {\"arg1\": \"0x7f4a97e0a000\"}, \"traceb\n+   {\"time\": 14814.954502, \"event\": \"probe_libarrow:je_arrow_rallocx\", \"params\": {\"flags\": \"6\", \"size\": \"0x40\", \"ptr\": \"0x7f\n+   {\"time\": 14814.954507, \"event\": \"probe_libarrow:je_arrow_rallocx__return\", \"params\": {\"arg1\": \"0x7f4a97e0a040\"}, \"traceb\n+   {\"time\": 14814.954796, \"event\": \"probe_libarrow:je_arrow_mallocx\", \"params\": {\"flags\": \"6\", \"size\": \"0x40\"}, \"traceback\"\n+   {\"time\": 14814.954805, \"event\": \"probe_libarrow:je_arrow_mallocx__return\", \"params\": {\"arg1\": \"0x7f4a97e0a080\"}, \"traceb\n+   {\"time\": 14814.954817, \"event\": \"probe_libarrow:je_arrow_mallocx\", \"params\": {\"flags\": \"6\", \"size\": \"0x40\"}, \"traceback\"\n+   {\"time\": 14814.95482, \"event\": \"probe_libarrow:je_arrow_mallocx__return\", \"params\": {\"arg1\": \"0x7f4a97e0a0c0\"}, \"traceba\n+\n+\n+From there one can answer a number of questions. For example, the following script will\n+find which allocations were never freed, and print the associated tracebacks along with\n+the count of dangling allocations:\n+\n+.. code-block:: python\n+\n+   '''Find tracebacks of allocations with no corresponding free'''\n+   import sys\n+   import json\n+   from collections import defaultdict\n+\n+   allocated = dict()\n+\n+   for line in sys.stdin:\n+       line = line.rstrip('\\n')\n+       data = json.loads(line)\n+\n+       if data['event'] == \"probe_libarrow:je_arrow_mallocx__return\":\n+           address = data['params']['arg1']\n+           allocated[address] = data['traceback']\n+       if data['event'] == \"probe_libarrow:je_arrow_rallocx__return\":\n+           address = data['params']['arg1']\n+           allocated[address] = data['traceback']\n+       elif data['event'] == \"probe_libarrow:je_arrow_dallocx\":\n+           address = data['params']['ptr']\n+           del allocated[address]\n+\n+   traceback_counts = defaultdict(int)\n+\n+   for traceback in allocated.values():\n+       traceback_counts[traceback] += 1\n+\n+   for traceback, count in sorted(traceback_counts.items(), key=lambda x: -x[1]):\n+       print(\"Num of dangling allocations:\", count)\n+       print(traceback)\n+\n+\n+::\n+\n+   > cat processed_events.jsonl | python3 /arrow/count_tracebacks.py\n+   Num of dangling allocations: 1\n+       7f4a9b4f7e3b arrow::(anonymous namespace)::JemallocAllocator::AllocateAligned+0x63 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4fac3c arrow::BaseMemoryPoolImpl<arrow::(anonymous namespace)::JemallocAllocator>::Allocate+0x8e (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4fc75a arrow::PoolBuffer::Reserve+0x16e (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4fc99a arrow::PoolBuffer::Resize+0x190 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4f988a arrow::(anonymous namespace)::ResizePoolBuffer<std::unique_ptr<arrow::ResizableBuffer, std::default_delete<arrow::ResizableBuffer> >, std::unique_ptr<arrow::PoolBuffer, std::default_delete<arrow::PoolBuffer> > >+0x47 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4f9229 arrow::AllocateResizableBuffer+0x51 (/build/cpp/debug/libarrow.so.700.0.0)\n+       564fb42a178c arrow::BufferBuilder::Resize+0x60 (/build/cpp/debug/arrow-array-test)\n+       564fb4406d81 arrow::TypedBufferBuilder<int, void>::Resize+0x4f (/build/cpp/debug/arrow-array-test)\n+       564fb43fa751 arrow::NumericBuilder<arrow::Int32Type>::Resize+0xe7 (/build/cpp/debug/arrow-array-test)\n+       564fb42a26e0 arrow::ArrayBuilder::Reserve+0xaa (/build/cpp/debug/arrow-array-test)\n+       564fb42afc5a arrow::NumericBuilder<arrow::Int32Type>::Append+0x3e (/build/cpp/debug/arrow-array-test)\n+       7f4a9ca3c6c0 arrow::ipc::internal::json::(anonymous namespace)::IntegerConverter<arrow::Int32Type, arrow::NumericBuilder<arrow::Int32Type> >::AppendValue+0x10c (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9ca3c791 arrow::ipc::internal::json::(anonymous namespace)::ConcreteConverter<arrow::ipc::internal::json::(anonymous namespace)::IntegerConverter<arrow::Int32Type, arrow::NumericBuilder<arrow::Int32Type> > >::AppendValues+0xb1 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9ca0f1be arrow::ipc::internal::json::ArrayFromJSON+0x1e9 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9e533858 arrow::ArrayFromJSON+0x64 (/build/cpp/debug/libarrow_testing.so.700.0.0)\n+       564fb47b53f3 arrow::StructArray_FlattenOfSlice_Test::TestBody+0x79 (/build/cpp/debug/arrow-array-test)\n+       7f4a99d24633 testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>+0x68 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d1c32a testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>+0x5d (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cf05eb testing::Test::Run+0xf1 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cf102d testing::TestInfo::Run+0x13f (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cf1947 testing::TestSuite::Run+0x14b (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d013f5 testing::internal::UnitTestImpl::RunAllTests+0x433 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d25b61 testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>+0x68 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d1d568 testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>+0x5d (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cffb0c testing::UnitTest::Run+0xcc (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d6b299 RUN_ALL_TESTS+0x14 (/build/cpp/googletest_ep-prefix/lib/libgtest_maind.so.1.11.0)\n+       7f4a99d6b21b main+0x42 (/build/cpp/googletest_ep-prefix/lib/libgtest_maind.so.1.11.0)\n+       7f4a998820b2 __libc_start_main+0xf2 (/usr/lib/x86_64-linux-gnu/libc-2.31.so)\n+       564fb424850d _start+0x2d (/build/cpp/debug/arrow-array-test)\n+\n+   Num of dangling allocations: 1\n+       7f4a9b4f7e3b arrow::(anonymous namespace)::JemallocAllocator::AllocateAligned+0x63 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4fac3c arrow::BaseMemoryPoolImpl<arrow::(anonymous namespace)::JemallocAllocator>::Allocate+0x8e (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4fc75a arrow::PoolBuffer::Reserve+0x16e (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4fc99a arrow::PoolBuffer::Resize+0x190 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4f988a arrow::(anonymous namespace)::ResizePoolBuffer<std::unique_ptr<arrow::ResizableBuffer, std::default_delete<arrow::ResizableBuffer> >, std::unique_ptr<arrow::PoolBuffer, std::default_delete<arrow::PoolBuffer> > >+0x47 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4f9229 arrow::AllocateResizableBuffer+0x51 (/build/cpp/debug/libarrow.so.700.0.0)\n+       564fb42a178c arrow::BufferBuilder::Resize+0x60 (/build/cpp/debug/arrow-array-test)\n+       564fb4402803 arrow::TypedBufferBuilder<long, void>::Resize+0x4f (/build/cpp/debug/arrow-array-test)\n+       564fb43f6a3f arrow::NumericBuilder<arrow::Int64Type>::Resize+0xe7 (/build/cpp/debug/arrow-array-test)\n+       564fb42a26e0 arrow::ArrayBuilder::Reserve+0xaa (/build/cpp/debug/arrow-array-test)\n+       564fb42b5141 arrow::NumericBuilder<arrow::Int64Type>::Append+0x3f (/build/cpp/debug/arrow-array-test)\n+       7f4a9ca3c3b7 arrow::ipc::internal::json::(anonymous namespace)::IntegerConverter<arrow::Int64Type, arrow::NumericBuilder<arrow::Int64Type> >::AppendValue+0x10d (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9ca3c489 arrow::ipc::internal::json::(anonymous namespace)::ConcreteConverter<arrow::ipc::internal::json::(anonymous namespace)::IntegerConverter<arrow::Int64Type, arrow::NumericBuilder<arrow::Int64Type> > >::AppendValues+0xb1 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9ca0f1be arrow::ipc::internal::json::ArrayFromJSON+0x1e9 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9e533858 arrow::ArrayFromJSON+0x64 (/build/cpp/debug/libarrow_testing.so.700.0.0)\n+       564fb47afdf7 arrow::StructArray_FromFields_Test::TestBody+0x985 (/build/cpp/debug/arrow-array-test)\n+       7f4a99d24633 testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>+0x68 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d1c32a testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>+0x5d (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cf05eb testing::Test::Run+0xf1 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cf102d testing::TestInfo::Run+0x13f (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cf1947 testing::TestSuite::Run+0x14b (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d013f5 testing::internal::UnitTestImpl::RunAllTests+0x433 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d25b61 testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>+0x68 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d1d568 testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>+0x5d (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cffb0c testing::UnitTest::Run+0xcc (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d6b299 RUN_ALL_TESTS+0x14 (/build/cpp/googletest_ep-prefix/lib/libgtest_maind.so.1.11.0)\n+       7f4a99d6b21b main+0x42 (/build/cpp/googletest_ep-prefix/lib/libgtest_maind.so.1.11.0)\n+       7f4a998820b2 __libc_start_main+0xf2 (/usr/lib/x86_64-linux-gnu/libc-2.31.so)\n+       564fb424850d _start+0x2d (/build/cpp/debug/arrow-array-test)\n+\n+   Num of dangling allocations: 1\n+       7f4a9b4f7fd2 arrow::(anonymous namespace)::JemallocAllocator::ReallocateAligned+0x13b (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4fae4f arrow::BaseMemoryPoolImpl<arrow::(anonymous namespace)::JemallocAllocator>::Reallocate+0x93 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9b4fc8f7 arrow::PoolBuffer::Resize+0xed (/build/cpp/debug/libarrow.so.700.0.0)\n+       564fb42a1859 arrow::BufferBuilder::Resize+0x12d (/build/cpp/debug/arrow-array-test)\n+       564fb42a1bbe arrow::BufferBuilder::Finish+0x48 (/build/cpp/debug/arrow-array-test)\n+       564fb42a1e3a arrow::BufferBuilder::Finish+0x50 (/build/cpp/debug/arrow-array-test)\n+       564fb42a1f90 arrow::BufferBuilder::FinishWithLength+0x4e (/build/cpp/debug/arrow-array-test)\n+       564fb4406fa7 arrow::TypedBufferBuilder<int, void>::FinishWithLength+0x4f (/build/cpp/debug/arrow-array-test)\n+       564fb43face7 arrow::NumericBuilder<arrow::Int32Type>::FinishInternal+0x107 (/build/cpp/debug/arrow-array-test)\n+       7f4a9b2a15ae arrow::ArrayBuilder::Finish+0x5a (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9ca09d41 arrow::ipc::internal::json::(anonymous namespace)::Converter::Finish+0x123 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9ca0f26e arrow::ipc::internal::json::ArrayFromJSON+0x299 (/build/cpp/debug/libarrow.so.700.0.0)\n+       7f4a9e533858 arrow::ArrayFromJSON+0x64 (/build/cpp/debug/libarrow_testing.so.700.0.0)\n+       564fb47b53f3 arrow::StructArray_FlattenOfSlice_Test::TestBody+0x79 (/build/cpp/debug/arrow-array-test)\n+       7f4a99d24633 testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>+0x68 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d1c32a testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>+0x5d (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cf05eb testing::Test::Run+0xf1 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cf102d testing::TestInfo::Run+0x13f (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cf1947 testing::TestSuite::Run+0x14b (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d013f5 testing::internal::UnitTestImpl::RunAllTests+0x433 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d25b61 testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>+0x68 (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d1d568 testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>+0x5d (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99cffb0c testing::UnitTest::Run+0xcc (/build/cpp/googletest_ep-prefix/lib/libgtestd.so.1.11.0)\n+       7f4a99d6b299 RUN_ALL_TESTS+0x14 (/build/cpp/googletest_ep-prefix/lib/libgtest_maind.so.1.11.0)\n+       7f4a99d6b21b main+0x42 (/build/cpp/googletest_ep-prefix/lib/libgtest_maind.so.1.11.0)\n+       7f4a998820b2 __libc_start_main+0xf2 (/usr/lib/x86_64-linux-gnu/libc-2.31.so)\n+       564fb424850d _start+0x2d (/build/cpp/debug/arrow-array-test)\n+\n+\n+Some other resources with tracing:\n+\n+https://www.maartenbreddels.com/perf/jupyter/python/tracing/gil/2021/01/14/Tracing-the-Python-GIL.html\n+https://jvns.ca/linux-tracing-zine.pdf\n+https://jvns.ca/perf-zine.pdf\n+https://www.brendangregg.com/blog/2015-06-28/linux-ftrace-uprobe.html\n\nReview comment:\n       I think I'm just dropping these since this isn't meant to be a perf tutorial.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-01T23:39:39.475+0000",
                    "updated": "2022-02-01T23:39:39.475+0000",
                    "started": "2022-02-01T23:39:39.475+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "719088",
                    "issueId": "13177523"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523/worklog/719699",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12307:\nURL: https://github.com/apache/arrow/pull/12307#discussion_r798026407\n\n\n\n##########\nFile path: docs/source/cpp/memory.rst\n##########\n@@ -201,3 +201,239 @@ simply do::\n    std::shared_ptr<arrow::Buffer> arbitrary_buffer = ... ;\n    std::shared_ptr<arrow::Buffer> cpu_buffer = arrow::Buffer::ViewOrCopy(\n       arbitrary_buffer, arrow::default_cpu_memory_manager());\n+\n+\n+Memory Profiling\n+================\n+\n+On Linux, detailed profiles of memory allocations can be generated using \n+``perf record``, without any need to modify the binaries. These profiles can\n+show the traceback in addition to allocation size. This does require debug\n+symbols, from either a debug build or a release with debug symbols build.\n+\n+.. note::\n+   If you profiling Arrow's tests on another platform, you can run the following\n+   docker container using archery to access a Linux environment:::\n+\n+      archery docker run ubuntu-cpp bash\n+      /arrow/ci/scripts/cpp_build.sh /arrow /build\n+      cd build/cpp/debug\n+      ./arrow-array-test # Run a test\n+      apt-get update\n+      apt-get install -y linux-tools-generic\n+      alias perf=/usr/lib/linux-tools/<version-path>/perf\n+\n+\n+To track allocations, create probe points on each of the jemalloc methods used.\n\nReview comment:\n       jemalloc -> allocator?\n\n##########\nFile path: docs/source/cpp/memory.rst\n##########\n@@ -201,3 +201,239 @@ simply do::\n    std::shared_ptr<arrow::Buffer> arbitrary_buffer = ... ;\n    std::shared_ptr<arrow::Buffer> cpu_buffer = arrow::Buffer::ViewOrCopy(\n       arbitrary_buffer, arrow::default_cpu_memory_manager());\n+\n+\n+Memory Profiling\n+================\n+\n+On Linux, detailed profiles of memory allocations can be generated using \n+``perf record``, without any need to modify the binaries. These profiles can\n+show the traceback in addition to allocation size. This does require debug\n+symbols, from either a debug build or a release with debug symbols build.\n+\n+.. note::\n+   If you profiling Arrow's tests on another platform, you can run the following\n+   docker container using archery to access a Linux environment:::\n+\n+      archery docker run ubuntu-cpp bash\n+      /arrow/ci/scripts/cpp_build.sh /arrow /build\n+      cd build/cpp/debug\n+      ./arrow-array-test # Run a test\n+      apt-get update\n+      apt-get install -y linux-tools-generic\n+      alias perf=/usr/lib/linux-tools/<version-path>/perf\n+\n+\n+To track allocations, create probe points on each of the jemalloc methods used.\n+Collecting ``$params`` allows us to record the size of the allocations\n+requested, while collecting ``$retval`` allows us to record the address of\n+recorded allocations, so we can correlate them with the call to free/deallocate.\n+\n+.. tabs::\n+\n+   .. tab:: jemalloc\n+      \n+      :: \n+      \n+         perf probe -x libarrow.so je_arrow_mallocx '$params' \n+         perf probe -x libarrow.so je_arrow_mallocx%return '$retval' \n+         perf probe -x libarrow.so je_arrow_rallocx '$params' \n+         perf probe -x libarrow.so je_arrow_rallocx%return '$retval' \n+         perf probe -x libarrow.so je_arrow_dallocx '$params' \n+         PROBE_ARGS=\"-e probe_libarrow:je_arrow_mallocx \\\n+            -e probe_libarrow:je_arrow_mallocx__return \\\n+            -e probe_libarrow:je_arrow_rallocx \\\n+            -e probe_libarrow:je_arrow_rallocx__return \\\n+            -e probe_libarrow:je_arrow_dallocx\"\n+\n+   .. tab:: mimalloc\n+      \n+      ::\n+\n+         perf probe -x libarrow.so mi_malloc_aligned '$params' \n+         perf probe -x libarrow.so mi_malloc_aligned%return '$retval' \n+         perf probe -x libarrow.so mi_realloc_aligned '$params' \n+         perf probe -x libarrow.so mi_realloc_aligned%return '$retval' \n+         perf probe -x libarrow.so mi_free '$params'\n+         PROBE_ARGS=\"-e probe_libarrow:mi_malloc_aligned \\\n+            -e probe_libarrow:mi_malloc_aligned__return \\\n+            -e probe_libarrow:mi_realloc_aligned \\\n+            -e probe_libarrow:mi_realloc_aligned__return \\\n+            -e probe_libarrow:mi_free\"\n+\n+Once probes have been set, you can record calls with associated tracebacks using\n+``perf record``. In this example, we are running the StructArray unit tests in\n+Arrow::\n+   \n+   perf record -g --call-graph dwarf \\\n+     $PROBE_ARGS \\\n+     ./arrow-array-test --gtest_filter=StructArray*\n+\n+If you want to profile a running process, you can run ``perf record -p <PID>``\n+and it will record until you interrupt with CTRL+C. Alternatively, you can do\n+``perf record -P <PID> sleep 10`` to record for 10 seconds.\n+\n+The resulting data can be processed with standard tools to work with perf or \n+``perf script`` can be used to pipe a text format of the data to custom scripts.\n+The following script parses ``perf script`` output and prints the output in \n+new lines delimited JSON for easier processing.\n+\n+.. code-block:: python\n+   :caption: process_perf_events.py\n+\n+   import sys\n+   import re\n+   import json\n+\n+   # Example non-traceback line\n+   # arrow-array-tes 14344 [003]  7501.073802: probe_libarrow:je_arrow_mallocx: (7fbcd20bb640) size=0x80 flags=6\n+\n+   current = {}\n+   current_traceback = ''\n+\n+   def new_row():\n+       global current_traceback\n+       current['traceback'] = current_traceback\n+       print(json.dumps(current))\n+       current_traceback = ''\n+\n+   for line in sys.stdin:\n+       if line == '\\n':\n+           continue\n+       elif line[0] == '\\t':\n+           # traceback line\n+           current_traceback += line.strip(\"\\t\")\n+       else:\n+           line = line.rstrip('\\n')\n+           if not len(current) == 0:\n+               new_row()\n+           parts = re.sub(' +', ' ', line).split(' ')\n+\n+           parts.reverse()\n+           parts.pop() # file\n+           parts.pop() # \"14344\"\n+           parts.pop() # \"[003]\"\n+\n+           current['time'] = float(parts.pop().rstrip(\":\"))\n+           current['event'] = parts.pop().rstrip(\":\")\n+\n+           parts.pop() # (7fbcd20bddf0)\n+           if parts[-1] == \"<-\":\n+               parts.pop()\n+               parts.pop()\n+\n+           params = {}\n+\n+           for pair in parts:\n+               key, value = pair.split(\"=\")\n+               params[key] = value\n+\n+           current['params'] = params\n+\n+\n+Here's an example invocation of that script, with a preview of output data::\n+\n+   > perf script | python3 /arrow/process_perf_events.py > processed_events.jsonl\n+   > head head processed_events.jsonl | cut -c -120\n+   {\"time\": 14814.954378, \"event\": \"probe_libarrow:je_arrow_mallocx\", \"params\": {\"flags\": \"6\", \"size\": \"0x80\"}, \"traceback\"\n+   {\"time\": 14814.95443, \"event\": \"probe_libarrow:je_arrow_mallocx__return\", \"params\": {\"arg1\": \"0x7f4a97e09000\"}, \"traceba\n+   {\"time\": 14814.95448, \"event\": \"probe_libarrow:je_arrow_mallocx\", \"params\": {\"flags\": \"6\", \"size\": \"0x40\"}, \"traceback\":\n+   {\"time\": 14814.954486, \"event\": \"probe_libarrow:je_arrow_mallocx__return\", \"params\": {\"arg1\": \"0x7f4a97e0a000\"}, \"traceb\n+   {\"time\": 14814.954502, \"event\": \"probe_libarrow:je_arrow_rallocx\", \"params\": {\"flags\": \"6\", \"size\": \"0x40\", \"ptr\": \"0x7f\n+   {\"time\": 14814.954507, \"event\": \"probe_libarrow:je_arrow_rallocx__return\", \"params\": {\"arg1\": \"0x7f4a97e0a040\"}, \"traceb\n+   {\"time\": 14814.954796, \"event\": \"probe_libarrow:je_arrow_mallocx\", \"params\": {\"flags\": \"6\", \"size\": \"0x40\"}, \"traceback\"\n+   {\"time\": 14814.954805, \"event\": \"probe_libarrow:je_arrow_mallocx__return\", \"params\": {\"arg1\": \"0x7f4a97e0a080\"}, \"traceb\n+   {\"time\": 14814.954817, \"event\": \"probe_libarrow:je_arrow_mallocx\", \"params\": {\"flags\": \"6\", \"size\": \"0x40\"}, \"traceback\"\n+   {\"time\": 14814.95482, \"event\": \"probe_libarrow:je_arrow_mallocx__return\", \"params\": {\"arg1\": \"0x7f4a97e0a0c0\"}, \"traceba\n+\n+\n+From there one can answer a number of questions. For example, the following\n+script will find which allocations were never freed, and print the associated \n+tracebacks along with the count of dangling allocations:\n+\n+.. code-block:: python\n+   :caption: count_tracebacks.py\n+\n+   '''Find tracebacks of allocations with no corresponding free'''\n+   import sys\n+   import json\n+   from collections import defaultdict\n+\n+   allocated = dict()\n+\n+   for line in sys.stdin:\n+       line = line.rstrip('\\n')\n+       data = json.loads(line)\n+\n\nReview comment:\n       nit: remove the blank lines?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-02T21:28:31.959+0000",
                    "updated": "2022-02-02T21:28:31.959+0000",
                    "started": "2022-02-02T21:28:31.959+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "719699",
                    "issueId": "13177523"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523/worklog/719710",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on pull request #12307:\nURL: https://github.com/apache/arrow/pull/12307#issuecomment-1028383488\n\n\n   > Thanks, this is pretty slick. Just two nits.\r\n   \r\n   Well the commands you provided earlier help me get unstuck on learning how to use perf probes, so thank you @lidavidm! \ud83d\ude4f \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-02T21:40:43.757+0000",
                    "updated": "2022-02-02T21:40:43.757+0000",
                    "started": "2022-02-02T21:40:43.756+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "719710",
                    "issueId": "13177523"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523/worklog/720136",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm closed pull request #12307:\nURL: https://github.com/apache/arrow/pull/12307\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-03T13:37:02.401+0000",
                    "updated": "2022-02-03T13:37:02.401+0000",
                    "started": "2022-02-03T13:37:02.401+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "720136",
                    "issueId": "13177523"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523/worklog/720143",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #12307:\nURL: https://github.com/apache/arrow/pull/12307#issuecomment-1029002921\n\n\n   Benchmark runs are scheduled for baseline = 7d34a7cad4ed11642641c4eca9d32e0724cd245c and contender = 5ab41120378d1944cfb607ad745cd3c6e6e4f71a. 5ab41120378d1944cfb607ad745cd3c6e6e4f71a is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Scheduled] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/fa793d990b4a42ab87a1ff813475e710...c10b3e36e6dc44aaaf81af34c58a5152/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/ab07e005b43d4821a4b228818bfe0146...c79411b590b84744bfad1f17c5ac2969/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/ec29c66cfce149dbb083c695d95b0ad5...47bddeafc87049328d264dc17faaaf45/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-03T13:41:42.058+0000",
                    "updated": "2022-02-03T13:41:42.058+0000",
                    "started": "2022-02-03T13:41:42.057+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "720143",
                    "issueId": "13177523"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523/worklog/720151",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #12307:\nURL: https://github.com/apache/arrow/pull/12307#issuecomment-1029002921\n\n\n   Benchmark runs are scheduled for baseline = 7d34a7cad4ed11642641c4eca9d32e0724cd245c and contender = 5ab41120378d1944cfb607ad745cd3c6e6e4f71a. 5ab41120378d1944cfb607ad745cd3c6e6e4f71a is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Failed] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/fa793d990b4a42ab87a1ff813475e710...c10b3e36e6dc44aaaf81af34c58a5152/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/ab07e005b43d4821a4b228818bfe0146...c79411b590b84744bfad1f17c5ac2969/)\n   [Failed] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/ec29c66cfce149dbb083c695d95b0ad5...47bddeafc87049328d264dc17faaaf45/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-03T13:51:27.802+0000",
                    "updated": "2022-02-03T13:51:27.802+0000",
                    "started": "2022-02-03T13:51:27.802+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "720151",
                    "issueId": "13177523"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523/worklog/720225",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #12307:\nURL: https://github.com/apache/arrow/pull/12307#issuecomment-1029002921\n\n\n   Benchmark runs are scheduled for baseline = 7d34a7cad4ed11642641c4eca9d32e0724cd245c and contender = 5ab41120378d1944cfb607ad745cd3c6e6e4f71a. 5ab41120378d1944cfb607ad745cd3c6e6e4f71a is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Failed] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/fa793d990b4a42ab87a1ff813475e710...c10b3e36e6dc44aaaf81af34c58a5152/)\n   [Failed] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/ab07e005b43d4821a4b228818bfe0146...c79411b590b84744bfad1f17c5ac2969/)\n   [Failed] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/ec29c66cfce149dbb083c695d95b0ad5...47bddeafc87049328d264dc17faaaf45/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-03T15:31:26.953+0000",
                    "updated": "2022-02-03T15:31:26.953+0000",
                    "started": "2022-02-03T15:31:26.952+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "720225",
                    "issueId": "13177523"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523/worklog/720445",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #12307:\nURL: https://github.com/apache/arrow/pull/12307#issuecomment-1029002921\n\n\n   Benchmark runs are scheduled for baseline = 7d34a7cad4ed11642641c4eca9d32e0724cd245c and contender = 5ab41120378d1944cfb607ad745cd3c6e6e4f71a. 5ab41120378d1944cfb607ad745cd3c6e6e4f71a is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Scheduled] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/fa793d990b4a42ab87a1ff813475e710...c10b3e36e6dc44aaaf81af34c58a5152/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/ab07e005b43d4821a4b228818bfe0146...c79411b590b84744bfad1f17c5ac2969/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/ec29c66cfce149dbb083c695d95b0ad5...47bddeafc87049328d264dc17faaaf45/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-03T22:02:29.896+0000",
                    "updated": "2022-02-03T22:02:29.896+0000",
                    "started": "2022-02-03T22:02:29.896+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "720445",
                    "issueId": "13177523"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523/worklog/720478",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #12307:\nURL: https://github.com/apache/arrow/pull/12307#issuecomment-1029002921\n\n\n   Benchmark runs are scheduled for baseline = 7d34a7cad4ed11642641c4eca9d32e0724cd245c and contender = 5ab41120378d1944cfb607ad745cd3c6e6e4f71a. 5ab41120378d1944cfb607ad745cd3c6e6e4f71a is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/fa793d990b4a42ab87a1ff813475e710...c10b3e36e6dc44aaaf81af34c58a5152/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/ab07e005b43d4821a4b228818bfe0146...c79411b590b84744bfad1f17c5ac2969/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/ec29c66cfce149dbb083c695d95b0ad5...47bddeafc87049328d264dc17faaaf45/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-03T22:32:00.292+0000",
                    "updated": "2022-02-03T22:32:00.292+0000",
                    "started": "2022-02-03T22:32:00.292+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "720478",
                    "issueId": "13177523"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523/worklog/720599",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #12307:\nURL: https://github.com/apache/arrow/pull/12307#issuecomment-1029002921\n\n\n   Benchmark runs are scheduled for baseline = 7d34a7cad4ed11642641c4eca9d32e0724cd245c and contender = 5ab41120378d1944cfb607ad745cd3c6e6e4f71a. 5ab41120378d1944cfb607ad745cd3c6e6e4f71a is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/fa793d990b4a42ab87a1ff813475e710...c10b3e36e6dc44aaaf81af34c58a5152/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/ab07e005b43d4821a4b228818bfe0146...c79411b590b84744bfad1f17c5ac2969/)\n   [Finished :arrow_down:0.3% :arrow_up:0.61%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/ec29c66cfce149dbb083c695d95b0ad5...47bddeafc87049328d264dc17faaaf45/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-04T01:42:00.400+0000",
                    "updated": "2022-02-04T01:42:00.400+0000",
                    "started": "2022-02-04T01:42:00.400+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "720599",
                    "issueId": "13177523"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523/worklog/720836",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #12307:\nURL: https://github.com/apache/arrow/pull/12307#issuecomment-1029002921\n\n\n   Benchmark runs are scheduled for baseline = 7d34a7cad4ed11642641c4eca9d32e0724cd245c and contender = 5ab41120378d1944cfb607ad745cd3c6e6e4f71a. 5ab41120378d1944cfb607ad745cd3c6e6e4f71a is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/fa793d990b4a42ab87a1ff813475e710...c10b3e36e6dc44aaaf81af34c58a5152/)\n   [Failed :arrow_down:0.36% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/ab07e005b43d4821a4b228818bfe0146...c79411b590b84744bfad1f17c5ac2969/)\n   [Finished :arrow_down:0.3% :arrow_up:0.61%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/ec29c66cfce149dbb083c695d95b0ad5...47bddeafc87049328d264dc17faaaf45/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-04T12:31:22.770+0000",
                    "updated": "2022-02-04T12:31:22.770+0000",
                    "started": "2022-02-04T12:31:22.769+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "720836",
                    "issueId": "13177523"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 8400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@26c335fe[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3bd764bf[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@67f3a910[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6781cbcd[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@382ec492[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@600f59db[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a4ed7e3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7378a8c4[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d3ce86d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2767bf90[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4bfa8550[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7df23a63[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 8400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Feb 03 13:36:50 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-02-03T13:36:50.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3016/watchers",
            "watchCount": 7,
            "isWatching": false
        },
        "created": "2018-08-07T21:17:37.000+0000",
        "updated": "2022-02-04T12:31:23.000+0000",
        "timeoriginalestimate": null,
        "description": "It is possible to gain programmatic access to the call stack in C/C++, e.g.\r\n\r\nhttps://eli.thegreenplace.net/2015/programmatic-access-to-the-call-stack-in-c/\r\n\r\nIt would be valuable to have a debugging option to log the sizes of memory allocations as well as showing the call stack where that allocation is performed. In complex programs, this could help determine the origin of a memory leak",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 8400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add ability to enable call stack logging for each memory allocation",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523/comment/16575636",
                    "id": "16575636",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "You can already achieve this on linux with perf and uprobe, see [http://www.brendangregg.com/blog/2015-06-28/linux-ftrace-uprobe.html].\u00a0All you need is debug symbols. I tend to prefer the non-intrusive runtime approach instead of adding one more library as a dependency.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-08-10T01:12:44.592+0000",
                    "updated": "2018-08-10T01:13:22.867+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523/comment/16575653",
                    "id": "16575653",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Sorry, I meant logging in calls to {{arrow::MemoryPool::Allocate}}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-08-10T01:41:56.799+0000",
                    "updated": "2018-08-10T01:41:56.799+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523/comment/16575673",
                    "id": "16575673",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "My comment still stands, with perf-record (and the proper flag, i.e. --call-graph=$unwinder_type), you can set a trigger on uprobes (a userland function) and it'll sample invocations to this function with the full callstack (plus some function parameters if you want, e.g. the size). All of this info is saved in the perf.data file for later post-processing with perf-script.\r\n\r\nNo need to add any code in the library.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-08-10T01:58:09.572+0000",
                    "updated": "2018-08-10T01:58:09.572+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523/comment/16579905",
                    "id": "16579905",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Cool. Well, let's add some documentation about this to show a reusable recipe for developers to be able to do allocation tracing",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-08-14T14:49:13.575+0000",
                    "updated": "2018-08-14T14:49:13.575+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523/comment/16912553",
                    "id": "16912553",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I'm still frequently interested to log memory allocations. It's been a year since the last discussion and there's still no developer documentation about best practices for doing this",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-08-21T17:43:33.597+0000",
                    "updated": "2019-08-21T17:43:33.597+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523/comment/17285938",
                    "id": "17285938",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "I know [~maartenbreddels] has been experimenting with low-level profiling, perhaps he would like to take a look at this.\r\nhttps://www.maartenbreddels.com/perf/jupyter/python/tracing/gil/2021/01/14/Tracing-the-Python-GIL.html\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-02-17T16:08:01.723+0000",
                    "updated": "2021-02-17T16:08:01.723+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523/comment/17286400",
                    "id": "17286400",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=maartenbreddels",
                        "name": "maartenbreddels",
                        "key": "maartenbreddels",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Maarten Breddels",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "I'd also recommend using perf with uprobes for this, especially for non-Python programs this should work well, but might require the `-fno-omit-frame-pointer` for compilation, or passing `--call-graph dwarf` to perf as mentioned above.\u00a0The output of perf-script is easy to parse and finding leaks should be possible this way, but I wouldn't be surprised if there are a ton of tools out there already (I know they exist for finding deadlocks).\r\n\r\nFor combining with Python, it could be useful to add support for mem allocations in the `per4m` package so the leak information can be merged info with VizTracer's output. Collecting Python stack traces of mem leaks should be possible (i.e. not a visualization as with VizTracer), but would require some extra steps/work.\r\n\r\nI think in general, tooling like this should not be done in userland, because you become blind to what is happening in the kernel. Getting deep stack traces from perf that go into the kernel can be useful, especially with memory allocations.\u00a0One can even see the time spend on setting up pages and all and this has given me ideas on looking into using huge pages.\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=maartenbreddels",
                        "name": "maartenbreddels",
                        "key": "maartenbreddels",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Maarten Breddels",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2021-02-18T10:09:37.040+0000",
                    "updated": "2021-02-18T10:09:37.040+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13177523/comment/17486482",
                    "id": "17486482",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 12307\n[https://github.com/apache/arrow/pull/12307]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-02-03T13:36:50.397+0000",
                    "updated": "2022-02-03T13:36:50.397+0000"
                }
            ],
            "maxResults": 8,
            "total": 8,
            "startAt": 0
        },
        "customfield_12311820": "0|i3wswv:",
        "customfield_12314139": null
    }
}