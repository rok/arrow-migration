{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13341198",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198",
    "key": "ARROW-10636",
    "fields": {
        "parent": {
            "id": "13259152",
            "key": "ARROW-6717",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13259152",
            "fields": {
                "summary": "[Rust] Support stable Rust",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                    "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                    "name": "Closed",
                    "id": "6",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "parquet",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12603333",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12603333",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13259152",
                    "key": "ARROW-6717",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259152",
                    "fields": {
                        "summary": "[Rust] Support stable Rust",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12604965",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12604965",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13346195",
                    "key": "ARROW-10931",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346195",
                    "fields": {
                        "summary": "[Rust] [Parquet] Improve performance of the parquet compressors",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=gbowyer%40fastmail.co.uk",
            "name": "gbowyer@fastmail.co.uk",
            "key": "gbowyer@fastmail.co.uk",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=gbowyer%40fastmail.co.uk&avatarId=10420",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=gbowyer%40fastmail.co.uk&avatarId=10420",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=gbowyer%40fastmail.co.uk&avatarId=10420",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=gbowyer%40fastmail.co.uk&avatarId=10420"
            },
            "displayName": "Greg Bowyer",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=gbowyer%40fastmail.co.uk",
            "name": "gbowyer@fastmail.co.uk",
            "key": "gbowyer@fastmail.co.uk",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=gbowyer%40fastmail.co.uk&avatarId=10420",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=gbowyer%40fastmail.co.uk&avatarId=10420",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=gbowyer%40fastmail.co.uk&avatarId=10420",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=gbowyer%40fastmail.co.uk&avatarId=10420"
            },
            "displayName": "Greg Bowyer",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=gbowyer%40fastmail.co.uk",
            "name": "gbowyer@fastmail.co.uk",
            "key": "gbowyer@fastmail.co.uk",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=gbowyer%40fastmail.co.uk&avatarId=10420",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=gbowyer%40fastmail.co.uk&avatarId=10420",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=gbowyer%40fastmail.co.uk&avatarId=10420",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=gbowyer%40fastmail.co.uk&avatarId=10420"
            },
            "displayName": "Greg Bowyer",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 31800,
            "total": 31800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 31800,
            "total": 31800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10636/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 53,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/worklog/513326",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8698:\nURL: https://github.com/apache/arrow/pull/8698#issuecomment-729388560\n\n\n   https://issues.apache.org/jira/browse/ARROW-10636\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-18T03:56:39.144+0000",
                    "updated": "2020-11-18T03:56:39.144+0000",
                    "started": "2020-11-18T03:56:39.144+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "513326",
                    "issueId": "13341198"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/worklog/513337",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "GregBowyer commented on pull request #8698:\nURL: https://github.com/apache/arrow/pull/8698#issuecomment-729397709\n\n\n   I think I have a solution with `std::any::Any` for most of the transmutes\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-18T04:27:41.724+0000",
                    "updated": "2020-11-18T04:27:41.724+0000",
                    "started": "2020-11-18T04:27:41.724+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "513337",
                    "issueId": "13341198"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/worklog/513373",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #8698:\nURL: https://github.com/apache/arrow/pull/8698#issuecomment-729451511\n\n\n   Thanks @GregBowyer for the PR. It's will be awesome if we can get this done. I think before merging this we should get some benchmark results showing the diff before & after. We use to have [some benchmark in the old repo](https://github.com/sunchao/parquet-rs/tree/master/benches) but haven't port them to arrow yet.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-18T06:04:32.422+0000",
                    "updated": "2020-11-18T06:04:32.422+0000",
                    "started": "2020-11-18T06:04:32.422+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "513373",
                    "issueId": "13341198"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/worklog/513394",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "GregBowyer commented on pull request #8698:\nURL: https://github.com/apache/arrow/pull/8698#issuecomment-729478929\n\n\n   I think I pulled all the transmutes out so thats good\r\n   \r\n   > Thanks @GregBowyer for the PR. It's will be awesome if we can get this done. I think before merging this we should get some benchmark results showing the diff before & after. We use to have [some benchmark in the old repo](https://github.com/sunchao/parquet-rs/tree/master/benches) but haven't port them to arrow yet.\r\n   \r\n   I will just pull them in tomorrow and get some baselines, I dont think it will be that hard.\r\n   \r\n   I _doubt_ there will be anything here for performance. I mean there are some more branches now, but I suspect the predict effortlessly, and on the flip side we are not chasing things around the I-Cache so I suspect its a wash in the end. However better checked than assumed.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-18T07:02:31.612+0000",
                    "updated": "2020-11-18T07:02:31.612+0000",
                    "started": "2020-11-18T07:02:31.611+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "513394",
                    "issueId": "13341198"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/worklog/513613",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8698:\nURL: https://github.com/apache/arrow/pull/8698#discussion_r526207035\n\n\n\n##########\nFile path: rust/parquet/src/column/writer.rs\n##########\n@@ -955,81 +963,31 @@ impl<T: DataType> ColumnWriterImpl<T> {\n /// Trait to define default encoding for types, including whether or not the type\n /// supports dictionary encoding.\n trait EncodingWriteSupport {\n-    /// Returns encoding for a column when no other encoding is provided in writer\n-    /// properties.\n-    fn fallback_encoding(props: &WriterProperties) -> Encoding;\n-\n     /// Returns true if dictionary is supported for column writer, false otherwise.\n     fn has_dictionary_support(props: &WriterProperties) -> bool;\n }\n \n-// Basic implementation, always falls back to PLAIN and supports dictionary.\n-impl<T: DataType> EncodingWriteSupport for ColumnWriterImpl<T> {\n-    default fn fallback_encoding(_props: &WriterProperties) -> Encoding {\n-        Encoding::PLAIN\n-    }\n-\n-    default fn has_dictionary_support(_props: &WriterProperties) -> bool {\n-        true\n-    }\n-}\n-\n-impl EncodingWriteSupport for ColumnWriterImpl<BoolType> {\n-    fn fallback_encoding(props: &WriterProperties) -> Encoding {\n-        match props.writer_version() {\n-            WriterVersion::PARQUET_1_0 => Encoding::PLAIN,\n-            WriterVersion::PARQUET_2_0 => Encoding::RLE,\n-        }\n-    }\n-\n-    // Boolean column does not support dictionary encoding and should fall back to\n-    // whatever fallback encoding is defined.\n-    fn has_dictionary_support(_props: &WriterProperties) -> bool {\n-        false\n-    }\n-}\n-\n-impl EncodingWriteSupport for ColumnWriterImpl<Int32Type> {\n-    fn fallback_encoding(props: &WriterProperties) -> Encoding {\n-        match props.writer_version() {\n-            WriterVersion::PARQUET_1_0 => Encoding::PLAIN,\n-            WriterVersion::PARQUET_2_0 => Encoding::DELTA_BINARY_PACKED,\n-        }\n+/// Returns encoding for a column when no other encoding is provided in writer properties.\n+fn fallback_encoding(kind: Type, props: &WriterProperties) -> Encoding {\n+    match (kind, props.writer_version()) {\n+        (Type::BOOLEAN, WriterVersion::PARQUET_2_0) => Encoding::RLE,\n+        (Type::INT32, WriterVersion::PARQUET_2_0) => Encoding::DELTA_BINARY_PACKED,\n+        (Type::INT64, WriterVersion::PARQUET_2_0) => Encoding::DELTA_BINARY_PACKED,\n+        (Type::BYTE_ARRAY, WriterVersion::PARQUET_2_0) => Encoding::DELTA_BYTE_ARRAY,\n+        (Type::FIXED_LEN_BYTE_ARRAY, WriterVersion::PARQUET_2_0) => Encoding::DELTA_BYTE_ARRAY,\n+        _ => Encoding::PLAIN,\n     }\n }\n \n-impl EncodingWriteSupport for ColumnWriterImpl<Int64Type> {\n-    fn fallback_encoding(props: &WriterProperties) -> Encoding {\n-        match props.writer_version() {\n-            WriterVersion::PARQUET_1_0 => Encoding::PLAIN,\n-            WriterVersion::PARQUET_2_0 => Encoding::DELTA_BINARY_PACKED,\n-        }\n-    }\n-}\n-\n-impl EncodingWriteSupport for ColumnWriterImpl<ByteArrayType> {\n-    fn fallback_encoding(props: &WriterProperties) -> Encoding {\n-        match props.writer_version() {\n-            WriterVersion::PARQUET_1_0 => Encoding::PLAIN,\n-            WriterVersion::PARQUET_2_0 => Encoding::DELTA_BYTE_ARRAY,\n-        }\n-    }\n-}\n-\n-impl EncodingWriteSupport for ColumnWriterImpl<FixedLenByteArrayType> {\n-    fn fallback_encoding(props: &WriterProperties) -> Encoding {\n-        match props.writer_version() {\n-            WriterVersion::PARQUET_1_0 => Encoding::PLAIN,\n-            WriterVersion::PARQUET_2_0 => Encoding::DELTA_BYTE_ARRAY,\n-        }\n-    }\n-\n-    fn has_dictionary_support(props: &WriterProperties) -> bool {\n-        match props.writer_version() {\n-            // Dictionary encoding was not enabled in PARQUET 1.0\n-            WriterVersion::PARQUET_1_0 => false,\n-            WriterVersion::PARQUET_2_0 => true,\n-        }\n+/// Returns true if dictionary is supported for column writer, false otherwise.\n\nReview comment:\n       I carefully checked the logic in this file and I believe it matches the original without the need for specialization. \ud83d\udc4d \n\n##########\nFile path: rust/parquet/src/data_type.rs\n##########\n@@ -424,16 +460,165 @@ impl AsBytes for str {\n     }\n }\n \n-/// Contains the Parquet physical type information as well as the Rust primitive type\n-/// presentation.\n-pub trait DataType: 'static {\n-    type T: std::cmp::PartialEq\n+pub(crate) mod private {\n+    use super::{AsBytes, Result, ParquetError};\n+\n+    pub type BitIndex = u64;\n+\n+    #[derive(Copy, Clone)]\n+    pub enum EncodedValue<'a> {\n+        /// The value can be encoded from the following bytes\n+        Bytes {\n+            data: &'a [u8]\n+        },\n+        /// The value encodes as a specific set bit at a given index\n+        Bits{\n+            index: BitIndex\n+        },\n+    }\n+\n+    /// Sealed trait to start to remove specialisation from implementations\n+    ///\n+    /// This is done to force the associated value type to be unimplementable outside of this\n+    /// crate, and thus hint to the type system (and end user) traits are public for the contract\n+    /// and not for extension.\n+    pub trait ParquetValueType : std::cmp::PartialEq\n         + std::fmt::Debug\n+        + std::fmt::Display\n         + std::default::Default\n         + std::clone::Clone\n-        + AsBytes\n-        + FromBytes\n-        + PartialOrd;\n+        + super::AsBytes\n+        + super::FromBytes\n+        + super::SliceAsBytes\n+        + PartialOrd\n+    {\n+        /// Return the most primitive version of encoding a given type\n+        fn encoded(&self) -> EncodedValue<'_>;\n+\n+        /// Return the encoded size for a type\n+        fn dict_encoding_size(&self) -> (usize, usize) {\n+            (std::mem::size_of::<Self>(), 1)\n+        }\n+\n+        /// Return the value as i64 if possible\n+        ///\n+        /// This is essentially the same as `std::convert::TryInto<i64>` but can\n+        /// implemented for `f32` and `f64`, types that would fail orphan rules\n+        fn as_i64(&self) -> Result<i64> {\n+            Err(general_err!(\"Type cannot be converted to i64\"))\n+        }\n+\n+        /// Return the value as u64 if possible\n+        ///\n+        /// This is essentially the same as `std::convert::TryInto<u64>` but can\n+        /// implemented for `f32` and `f64`, types that would fail orphan rules\n+        fn as_u64(&self) -> Result<u64> {\n+            self.as_i64()\n+                .map_err(|_| general_err!(\"Type cannot be converted to u64\"))\n+                .map(|x| x as u64)\n+        }\n+\n+        /// Return the value as an Any to allow for downcasts without transmutation\n+        fn as_any(&self) -> &dyn std::any::Any;\n+\n+        /// Return the value as an mutable Any to allow for downcasts without transmutation\n+        fn as_mut_any(&mut self) -> &mut dyn std::any::Any;\n+    }\n+\n+    impl ParquetValueType for bool {\n+        fn encoded(&self) -> EncodedValue<'_> {\n+            EncodedValue::Bits { index: *self as u64 }\n+        }\n+\n+        fn as_i64(&self) -> Result<i64> {\n+            Ok(*self as i64)\n+        }\n+\n+        fn as_any(&self) -> &dyn std::any::Any {\n+            self\n+        }\n+\n+        fn as_mut_any(&mut self) -> &mut dyn std::any::Any {\n+            self\n+        }\n+    }\n+\n+    /// Hopelessly unsafe function that emulates `num::as_ne_bytes`\n+    ///\n+    /// It is not recommended to use this outside of this private module as, while it\n+    /// _should_ work for primitive values, it is little better than a transmutation\n+    /// and can act as a backdoor into mis-interpreting types as arbitary byte slices\n+    fn as_raw<'a, T>(value: *const T) -> &'a [u8] {\n+        unsafe {\n+            let value = value as *const u8;\n+            std::slice::from_raw_parts(value, std::mem::size_of::<T>())\n+        }\n+    }\n+\n+    macro_rules! impl_from_raw {\n+        ($ty: ty, $self: ident => $as_i64: block) => {\n+            impl ParquetValueType for $ty {\n+                fn encoded(&self) -> EncodedValue<'_> {\n+                    EncodedValue::Bytes { data: as_raw(&*self) }\n+                }\n+\n+                fn as_i64(&$self) -> Result<i64> {\n+                    $as_i64\n+                }\n+\n+                fn as_any(&self) -> &dyn std::any::Any {\n+                    self\n+                }\n+\n+                fn as_mut_any(&mut self) -> &mut dyn std::any::Any {\n+                    self\n+                }\n+            }\n+        }\n+    }\n+\n+    impl_from_raw!(i32, self => { Ok(*self as i64) });\n+    impl_from_raw!(i64, self => { Ok(*self) });\n+    impl_from_raw!(f32, self => { Err(general_err!(\"Type cannot be converted to i64\")) });\n+    impl_from_raw!(f64, self => { Err(general_err!(\"Type cannot be converted to i64\")) });\n\nReview comment:\n       ```suggestion\r\n       impl_from_raw!(f32, self => { Err(general_err!(\"Type f32 cannot be converted to i64\")) });\r\n       impl_from_raw!(f64, self => { Err(general_err!(\"Type f64 cannot be converted to i64\")) });\r\n   ```\n\n##########\nFile path: rust/rust-toolchain\n##########\n@@ -1 +0,0 @@\n-nightly-2020-11-14\n\nReview comment:\n       \ud83c\udf89 \n\n##########\nFile path: rust/parquet/src/data_type.rs\n##########\n@@ -424,16 +460,165 @@ impl AsBytes for str {\n     }\n }\n \n-/// Contains the Parquet physical type information as well as the Rust primitive type\n-/// presentation.\n-pub trait DataType: 'static {\n-    type T: std::cmp::PartialEq\n+pub(crate) mod private {\n+    use super::{AsBytes, Result, ParquetError};\n+\n+    pub type BitIndex = u64;\n+\n+    #[derive(Copy, Clone)]\n+    pub enum EncodedValue<'a> {\n+        /// The value can be encoded from the following bytes\n+        Bytes {\n+            data: &'a [u8]\n+        },\n+        /// The value encodes as a specific set bit at a given index\n\nReview comment:\n       ```suggestion\r\n           /// The value encoded as a specific set bit at a given index\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-18T16:23:52.144+0000",
                    "updated": "2020-11-18T16:23:52.144+0000",
                    "started": "2020-11-18T16:23:52.143+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "513613",
                    "issueId": "13341198"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/worklog/513633",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8698:\nURL: https://github.com/apache/arrow/pull/8698#issuecomment-729809822\n\n\n   Here is a potential contribution to this effort: https://github.com/apache/arrow/pull/8708 (a PR with the bench marks ported -- fyi @GregBowyer ).\r\n   \r\n   To run:\r\n   ```\r\n   cd arrow/rust/parquet\r\n   cargo bench\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-18T16:53:20.393+0000",
                    "updated": "2020-11-18T16:53:20.393+0000",
                    "started": "2020-11-18T16:53:20.393+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "513633",
                    "issueId": "13341198"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/worklog/514282",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8698:\nURL: https://github.com/apache/arrow/pull/8698#issuecomment-730570547\n\n\n   I do not have time to review this, but having tried this myself once (and failed miserably), I am just leaving a big thank you note to @GregBowyer for this \ud83d\ude0d\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-19T18:54:43.390+0000",
                    "updated": "2020-11-19T18:54:43.390+0000",
                    "started": "2020-11-19T18:54:43.390+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "514282",
                    "issueId": "13341198"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/worklog/515871",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "GregBowyer commented on pull request #8698:\nURL: https://github.com/apache/arrow/pull/8698#issuecomment-732583123\n\n\n   As per benchmarking this with the changes in https://github.com/alamb/arrow/pull/2 this is slower than specialisation (I ran benchmarks a lot as its _very noisy_). I have solutions for the speed in encoding (boolean and int96 are to be solved but shouldn't be hard) I will work on decoding shortly.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-24T02:58:41.107+0000",
                    "updated": "2020-11-24T02:58:41.107+0000",
                    "started": "2020-11-24T02:58:41.107+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515871",
                    "issueId": "13341198"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/worklog/518726",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "GregBowyer commented on pull request #8698:\nURL: https://github.com/apache/arrow/pull/8698#issuecomment-736938052\n\n\n   I have been working on this w.r.t performance, I think I have most parts performing better than the original. I am running off clean benchmarks right now to validate.\r\n   \r\n   There are a few ancillary tweaks I have made (I will call out in the PR review) that gain some additional performance (I spotted some pipeline hazards in `perf`) but nothing crazy\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-02T02:02:49.380+0000",
                    "updated": "2020-12-02T02:02:49.380+0000",
                    "started": "2020-12-02T02:02:49.379+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "518726",
                    "issueId": "13341198"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/worklog/518951",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8698:\nURL: https://github.com/apache/arrow/pull/8698#issuecomment-737177343\n\n\n   > I have been working on this w.r.t performance, I think I have most parts performing better than the original. I am running off clean benchmarks right now to validate.\r\n   \r\n   I am very excited to see it. Thank you so much @GregBowyer \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-02T11:40:50.218+0000",
                    "updated": "2020-12-02T11:40:50.218+0000",
                    "started": "2020-12-02T11:40:50.217+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "518951",
                    "issueId": "13341198"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/worklog/519331",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8698:\nURL: https://github.com/apache/arrow/pull/8698#discussion_r534610365\n\n\n\n##########\nFile path: .github/workflows/rust.yml\n##########\n@@ -50,7 +50,10 @@ jobs:\n     strategy:\n       fail-fast: false\n       matrix:\n-        rust: [nightly-2020-11-24]\n\nReview comment:\n       I know this is still in-flight, but the better strategy here is to run the Parquet tests with `cargo +stable test` as we also add the stable toolchain to compile arrow with. You might need to rebase to see that in the dev scripts, as this change was added last week.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-03T02:01:31.807+0000",
                    "updated": "2020-12-03T02:01:31.807+0000",
                    "started": "2020-12-03T02:01:31.806+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "519331",
                    "issueId": "13341198"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/worklog/519342",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "GregBowyer commented on a change in pull request #8698:\nURL: https://github.com/apache/arrow/pull/8698#discussion_r534651119\n\n\n\n##########\nFile path: .github/workflows/rust.yml\n##########\n@@ -50,7 +50,10 @@ jobs:\n     strategy:\n       fail-fast: false\n       matrix:\n-        rust: [nightly-2020-11-24]\n\nReview comment:\n       I am ok with that, I am fighting the CI anyhow and any assistance is welcome.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-03T04:01:57.992+0000",
                    "updated": "2020-12-03T04:01:57.992+0000",
                    "started": "2020-12-03T04:01:57.991+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "519342",
                    "issueId": "13341198"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/worklog/519343",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "GregBowyer commented on a change in pull request #8698:\nURL: https://github.com/apache/arrow/pull/8698#discussion_r534652479\n\n\n\n##########\nFile path: rust/parquet/src/data_type.rs\n##########\n@@ -229,6 +235,82 @@ impl fmt::Display for ByteArray {\n     }\n }\n \n+/// Wrapper type for performance reasons, this represents `FIXED_LEN_BYTE_ARRAY` but in all other\n+/// considerations behaves the same as `ByteArray`\n+#[repr(transparent)]\n+#[derive(Clone, Debug, Default)]\n+pub struct FixedLenByteArray(ByteArray);\n\nReview comment:\n       Performance review note:\r\n   \r\n   This type is a little unfortunate, without it the compiler generates code that takes quite a big hit on the CPU pipeline. Essentially the previous version stalls awaiting the result of `T::get_physical_type() == Type::FIXED_LEN_BYTE_ARRAY`.\r\n   \r\n   Its debatable if this is wanted, it is out of spec for what parquet documents as its base types, although I feel that enough code paths in the rust (and potentially the C++) versions warrant this.\r\n   \r\n   With this wrapper type the compiler generates more targetted code paths matching the higher level logical types, removing the data-hazard from all decoding and encoding paths.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-03T04:06:23.184+0000",
                    "updated": "2020-12-03T04:06:23.184+0000",
                    "started": "2020-12-03T04:06:23.184+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "519343",
                    "issueId": "13341198"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/worklog/519344",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "GregBowyer commented on a change in pull request #8698:\nURL: https://github.com/apache/arrow/pull/8698#discussion_r534652635\n\n\n\n##########\nFile path: rust/parquet/src/data_type.rs\n##########\n@@ -229,6 +235,82 @@ impl fmt::Display for ByteArray {\n     }\n }\n \n+/// Wrapper type for performance reasons, this represents `FIXED_LEN_BYTE_ARRAY` but in all other\n+/// considerations behaves the same as `ByteArray`\n+#[repr(transparent)]\n+#[derive(Clone, Debug, Default)]\n+pub struct FixedLenByteArray(ByteArray);\n+\n+impl PartialEq for FixedLenByteArray {\n+    fn eq(&self, other: &FixedLenByteArray) -> bool {\n+        self.0.eq(&other.0)\n+    }\n+}\n+\n+impl PartialEq<ByteArray> for FixedLenByteArray {\n+    fn eq(&self, other: &ByteArray) -> bool {\n+        self.0.eq(other)\n+    }\n+}\n+\n+impl PartialEq<FixedLenByteArray> for ByteArray {\n+    fn eq(&self, other: &FixedLenByteArray) -> bool {\n+        self.eq(&other.0)\n+    }\n+}\n+\n+impl fmt::Display for FixedLenByteArray {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.0.fmt(f)\n+    }\n+}\n+\n+impl PartialOrd for FixedLenByteArray {\n+    fn partial_cmp(&self, other: &FixedLenByteArray) -> Option<Ordering> {\n+        self.0.partial_cmp(&other.0)\n+    }\n+}\n+\n+impl PartialOrd<FixedLenByteArray> for ByteArray {\n+    fn partial_cmp(&self, other: &FixedLenByteArray) -> Option<Ordering> {\n+        self.partial_cmp(&other.0)\n+    }\n+}\n+\n+impl PartialOrd<ByteArray> for FixedLenByteArray {\n+    fn partial_cmp(&self, other: &ByteArray) -> Option<Ordering> {\n+        self.0.partial_cmp(other)\n+    }\n+}\n+\n+use std::ops::{Deref, DerefMut};\n\nReview comment:\n       NIT: This should move to the top with the rest of the use statements.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-03T04:06:46.454+0000",
                    "updated": "2020-12-03T04:06:46.454+0000",
                    "started": "2020-12-03T04:06:46.454+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "519344",
                    "issueId": "13341198"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/worklog/519345",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8698:\nURL: https://github.com/apache/arrow/pull/8698#discussion_r534653150\n\n\n\n##########\nFile path: .github/workflows/rust.yml\n##########\n@@ -50,7 +50,10 @@ jobs:\n     strategy:\n       fail-fast: false\n       matrix:\n-        rust: [nightly-2020-11-24]\n\nReview comment:\n       I'll submit a PR on your branch\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-03T04:08:31.245+0000",
                    "updated": "2020-12-03T04:08:31.245+0000",
                    "started": "2020-12-03T04:08:31.244+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "519345",
                    "issueId": "13341198"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/worklog/519346",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "GregBowyer commented on a change in pull request #8698:\nURL: https://github.com/apache/arrow/pull/8698#discussion_r534653225\n\n\n\n##########\nFile path: rust/parquet/src/data_type.rs\n##########\n@@ -461,21 +553,16 @@ impl AsBytes for str {\n }\n \n pub(crate) mod private {\n-    use super::{AsBytes, Result, ParquetError};\n+    use crate::encodings::decoding::PlainDecoderDetails;\n+    use crate::util::bit_util::{BitWriter, BitReader};\n+    use crate::util::memory::ByteBufferPtr;\n \n-    pub type BitIndex = u64;\n+    use byteorder::ByteOrder;\n+    use std::convert::TryInto;\n \n-    #[derive(Copy, Clone)]\n-    pub enum EncodedValue<'a> {\n\nReview comment:\n       Performance notes:\r\n   \r\n   This type and its behaviour introduces branch misses that _unfortunately_ impact performance. Since removing this pushes the logic down towards the implementation type `ParquetValueType` it becomes needless (and actually I think more messy code).\r\n   \r\n   As such in pushing the logic down towards the base types this goes away\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-03T04:08:44.348+0000",
                    "updated": "2020-12-03T04:08:44.348+0000",
                    "started": "2020-12-03T04:08:44.347+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "519346",
                    "issueId": "13341198"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/worklog/519347",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "GregBowyer commented on a change in pull request #8698:\nURL: https://github.com/apache/arrow/pull/8698#discussion_r534653577\n\n\n\n##########\nFile path: rust/parquet/src/data_type.rs\n##########\n@@ -492,8 +579,14 @@ pub(crate) mod private {\n         + super::SliceAsBytes\n         + PartialOrd\n     {\n-        /// Return the most primitive version of encoding a given type\n-        fn encoded(&self) -> EncodedValue<'_>;\n+        /// Encode the value directly from a higher level encoder\n+        fn encode<W: std::io::Write>(values: &[Self], writer: &mut W, bit_writer: &mut BitWriter) -> Result<()>;\n\nReview comment:\n       Performance notes:\r\n   \r\n   This is similar to specialisation in that it makes the required behaviours part of the trait implementation for the actual data carrying types in the code.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-03T04:09:37.612+0000",
                    "updated": "2020-12-03T04:09:37.612+0000",
                    "started": "2020-12-03T04:09:37.611+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "519347",
                    "issueId": "13341198"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/worklog/519348",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "GregBowyer commented on a change in pull request #8698:\nURL: https://github.com/apache/arrow/pull/8698#discussion_r534653851\n\n\n\n##########\nFile path: rust/parquet/src/data_type.rs\n##########\n@@ -558,18 +674,59 @@ pub(crate) mod private {\n     macro_rules! impl_from_raw {\n         ($ty: ty, $self: ident => $as_i64: block) => {\n             impl ParquetValueType for $ty {\n-                fn encoded(&self) -> EncodedValue<'_> {\n-                    EncodedValue::Bytes { data: as_raw(&*self) }\n+                #[inline]\n+                fn encode<W: std::io::Write>(values: &[Self], writer: &mut W, _: &mut BitWriter) -> Result<()> {\n+                    let raw = unsafe {\n+                        std::slice::from_raw_parts(\n+                            values.as_ptr() as *const u8,\n+                            std::mem::size_of::<$ty>() * values.len(),\n+                        )\n+                    };\n+                    writer.write_all(raw)?;\n+\n+                    Ok(())\n+                }\n+\n+                #[inline]\n+                fn set_data(decoder: &mut PlainDecoderDetails, data: ByteBufferPtr, num_values: usize) {\n+                    decoder.data.replace(data);\n+                    decoder.start = 0;\n+                    decoder.num_values = num_values;\n+                }\n+\n+                #[inline]\n+                fn decode(buffer: &mut [Self], decoder: &mut PlainDecoderDetails) -> Result<usize> {\n+                    let data = decoder.data.as_mut().unwrap();\n\nReview comment:\n       NIT: This should follow the pattern of avoiding the double check by using `expect`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-03T04:10:31.082+0000",
                    "updated": "2020-12-03T04:10:31.082+0000",
                    "started": "2020-12-03T04:10:31.081+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "519348",
                    "issueId": "13341198"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/worklog/519350",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "GregBowyer commented on a change in pull request #8698:\nURL: https://github.com/apache/arrow/pull/8698#discussion_r534654706\n\n\n\n##########\nFile path: rust/parquet/src/data_type.rs\n##########\n@@ -583,32 +740,198 @@ pub(crate) mod private {\n     impl_from_raw!(f64, self => { Err(general_err!(\"Type cannot be converted to i64\")) });\n \n     impl ParquetValueType for super::Int96 {\n-        fn encoded(&self) -> EncodedValue<'_> {\n-            EncodedValue::Bytes { data: self.as_bytes() }\n+        #[inline]\n+        fn encode<W: std::io::Write>(values: &[Self], writer: &mut W, _: &mut BitWriter) -> Result<()> {\n+            for value in values {\n+                let raw = unsafe {\n+                    std::slice::from_raw_parts(value.data() as *const [u32] as *const u8, 12)\n+                };\n+                writer.write_all(raw)?;\n+            }\n+            Ok(())\n         }\n \n+        #[inline]\n+        fn set_data(decoder: &mut PlainDecoderDetails, data: ByteBufferPtr, num_values: usize) {\n+            decoder.data.replace(data);\n+            decoder.start = 0;\n+            decoder.num_values = num_values;\n+        }\n+\n+        #[inline]\n+        fn decode(buffer: &mut [Self], decoder: &mut PlainDecoderDetails) -> Result<usize> {\n+            // TODO - Remove the duplication between this and the general slice method\n+            let data = decoder.data.as_ref().expect(\"set_data should have been called\");\n\nReview comment:\n       Performance notes:\r\n   \r\n   This code is lifted from elsewhere so its useful to state out loud what change was made.\r\n   \r\n   Other than a small amount of shuffling the code about for general style, A lot of the pre-existing code has a pattern of the form\r\n   \r\n   ```rust\r\n   assert!(self.some_option.is_some())\r\n   \r\n   let some_option = self.some_option.unwrap()\r\n   ```\r\n   \r\n   This unfortunately is not spotted by the compiler and seems to generate multiple branches that just consume CPU cycles.\r\n   \r\n   Since the validations are useful, in this (and many places) the logic is folded into doing an unwrap (with a little more error messaging to state what invariant is being tested for)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-03T04:13:31.655+0000",
                    "updated": "2020-12-03T04:13:31.655+0000",
                    "started": "2020-12-03T04:13:31.655+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "519350",
                    "issueId": "13341198"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/worklog/519351",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "GregBowyer commented on a change in pull request #8698:\nURL: https://github.com/apache/arrow/pull/8698#discussion_r534655181\n\n\n\n##########\nFile path: rust/parquet/src/data_type.rs\n##########\n@@ -583,32 +740,198 @@ pub(crate) mod private {\n     impl_from_raw!(f64, self => { Err(general_err!(\"Type cannot be converted to i64\")) });\n \n     impl ParquetValueType for super::Int96 {\n-        fn encoded(&self) -> EncodedValue<'_> {\n-            EncodedValue::Bytes { data: self.as_bytes() }\n+        #[inline]\n+        fn encode<W: std::io::Write>(values: &[Self], writer: &mut W, _: &mut BitWriter) -> Result<()> {\n+            for value in values {\n+                let raw = unsafe {\n+                    std::slice::from_raw_parts(value.data() as *const [u32] as *const u8, 12)\n+                };\n+                writer.write_all(raw)?;\n+            }\n+            Ok(())\n         }\n \n+        #[inline]\n+        fn set_data(decoder: &mut PlainDecoderDetails, data: ByteBufferPtr, num_values: usize) {\n+            decoder.data.replace(data);\n+            decoder.start = 0;\n+            decoder.num_values = num_values;\n+        }\n+\n+        #[inline]\n+        fn decode(buffer: &mut [Self], decoder: &mut PlainDecoderDetails) -> Result<usize> {\n+            // TODO - Remove the duplication between this and the general slice method\n+            let data = decoder.data.as_ref().expect(\"set_data should have been called\");\n+            let num_values = std::cmp::min(buffer.len(), decoder.num_values);\n+            let bytes_left = data.len() - decoder.start;\n+            let bytes_to_decode = 12 * num_values;\n+\n+            if bytes_left < bytes_to_decode {\n+                return Err(eof_err!(\"Not enough bytes to decode\"));\n+            }\n+\n+            let data_range = data.range(decoder.start, bytes_to_decode);\n+            let bytes: &[u8] = data_range.data();\n+            decoder.start += bytes_to_decode;\n+\n+            let mut pos = 0; // position in byte array\n+            for i in 0..num_values {\n+                let elem0 = byteorder::LittleEndian::read_u32(&bytes[pos..pos + 4]);\n+                let elem1 = byteorder::LittleEndian::read_u32(&bytes[pos + 4..pos + 8]);\n+                let elem2 = byteorder::LittleEndian::read_u32(&bytes[pos + 8..pos + 12]);\n+\n+                buffer[i]\n+                    .as_mut_any()\n+                    .downcast_mut::<Self>()\n+                    .unwrap()\n+                    .set_data(elem0, elem1, elem2);\n+\n+                pos += 12;\n+            }\n+            decoder.num_values -= num_values;\n+\n+            Ok(num_values)\n+        }\n+\n+        #[inline]\n         fn as_any(&self) -> &dyn std::any::Any {\n             self\n         }\n \n+        #[inline]\n         fn as_mut_any(&mut self) -> &mut dyn std::any::Any {\n             self\n         }\n     }\n \n+    // TODO - Why does macro importing fail?\n+    /// Reads `$size` of bytes from `$src`, and reinterprets them as type `$ty`, in\n+    /// little-endian order. `$ty` must implement the `Default` trait. Otherwise this won't\n+    /// compile.\n+    /// This is copied and modified from byteorder crate.\n+    macro_rules! read_num_bytes {\n+        ($ty:ty, $size:expr, $src:expr) => {{\n+            assert!($size <= $src.len());\n+            let mut buffer = <$ty as $crate::util::bit_util::FromBytes>::Buffer::default();\n+            buffer.as_mut()[..$size].copy_from_slice(&$src[..$size]);\n+            <$ty>::from_ne_bytes(buffer)\n+        }};\n+    }\n+\n     impl ParquetValueType for super::ByteArray {\n-        fn encoded(&self) -> EncodedValue<'_> {\n-            EncodedValue::Bytes { data: self.data() }\n+        #[inline]\n+        fn encode<W: std::io::Write>(values: &[Self], writer: &mut W, _: &mut BitWriter) -> Result<()> {\n+            for value in values {\n+                let len: u32 = value.len().try_into().unwrap();\n+                writer.write_all(&len.to_ne_bytes())?;\n+                let raw = value.data();\n+                writer.write_all(raw)?;\n+            }\n+            Ok(())\n+        }\n+\n+        #[inline]\n+        fn set_data(decoder: &mut PlainDecoderDetails, data: ByteBufferPtr, num_values: usize) {\n+            decoder.data.replace(data);\n+            decoder.start = 0;\n+            decoder.num_values = num_values;\n+        }\n+\n+        #[inline]\n+        fn decode(buffer: &mut [Self], decoder: &mut PlainDecoderDetails) -> Result<usize> {\n+            let data = decoder.data.as_mut().expect(\"set_data should have been called\");\n+            let num_values = std::cmp::min(buffer.len(), decoder.num_values);\n+            for i in 0..num_values {\n+                let len: usize = read_num_bytes!(u32, 4, data.start_from(decoder.start).as_ref()) as usize;\n+                decoder.start += std::mem::size_of::<u32>();\n+\n+                if data.len() < decoder.start + len {\n+                    return Err(eof_err!(\"Not enough bytes to decode\"));\n+                }\n+\n+                let val: &mut Self = buffer[i]\n+                    .as_mut_any()\n+                    .downcast_mut()\n+                    .unwrap();\n+\n+                val.set_data(data.range(decoder.start, len));\n+                decoder.start += len;\n+            }\n+            decoder.num_values -= num_values;\n+\n+            Ok(num_values)\n+        }\n+\n+        #[inline]\n+        fn dict_encoding_size(&self) -> (usize, usize) {\n+            (std::mem::size_of::<u32>(), self.len())\n+        }\n+\n+        #[inline]\n+        fn as_any(&self) -> &dyn std::any::Any {\n+            self\n         }\n \n+        #[inline]\n+        fn as_mut_any(&mut self) -> &mut dyn std::any::Any {\n+            self\n+        }\n+    }\n+\n+    impl ParquetValueType for super::FixedLenByteArray {\n\nReview comment:\n       The lifted `FixedLenByteArray` becomes used here to restore (actually make _better_) the performance of encoding and decoding.\r\n   \r\n   The logic is I think different enough to warrant some duplication.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-03T04:14:56.163+0000",
                    "updated": "2020-12-03T04:14:56.163+0000",
                    "started": "2020-12-03T04:14:56.163+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "519351",
                    "issueId": "13341198"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 31800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2634e458[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@678de11c[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@579bd7a4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5f16594a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@64780a7e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@553dc5df[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5c920e2b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@31a3d0fa[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@152c174a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2e043b0d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@622b8bb0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4da0b30f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 31800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Feb 24 01:51:20 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-12-15T20:58:14.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10636/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-11-18T03:36:01.000+0000",
        "updated": "2021-02-24T01:51:20.000+0000",
        "timeoriginalestimate": null,
        "description": "This is a very initial attempt at removing the specialization features from the Rust Parquet implementation.\r\n\r\nThe specialisation is too complex to be covered by {{min_specialization}} and requires a bit of reworking in the crate.\r\n\r\nRight now the code dispatches in sub-traits and methods on the Parquet type, and uses a combination of trait abuse, macros and transmutes to eliminate the feature.\r\n\r\nI have broken this up into several commits ranging from the simplest removals (which could probably be taken fairly easily) to the most ugly and complex.\r\n\r\nI am not stoked on the {{transmute}} abuse, and I think another take (or follow up) should be taken to remove as many as possible in the code.\r\n\r\nThe general trait for {{DataType::T}} has been made a private sealed trait to make it impossible to implement external to the Parquet crate, this is intentional as I dont think many of the public interfaces are sensible for end users to be able to implement.\r\nh1. TODO:\r\n * Purge the added {{std::mem::transmute}}s if possible\r\n * Refine and rationalise the {{unimplemented!}} implementations\r\n * Performance test?",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "8h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 31800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Remove specialisation from Rust parquet",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/comment/17234775",
                    "id": "17234775",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Related to (or perhaps a dupe) of ARROW-6717\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-11-18T16:21:14.335+0000",
                    "updated": "2020-11-18T16:21:14.335+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/comment/17249927",
                    "id": "17249927",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 8698\n[https://github.com/apache/arrow/pull/8698]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-12-15T20:58:14.722+0000",
                    "updated": "2020-12-15T20:58:14.722+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341198/comment/17289482",
                    "id": "17289482",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=gbowyer%40fastmail.co.uk",
                        "name": "gbowyer@fastmail.co.uk",
                        "key": "gbowyer@fastmail.co.uk",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=gbowyer%40fastmail.co.uk&avatarId=10420",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=gbowyer%40fastmail.co.uk&avatarId=10420",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=gbowyer%40fastmail.co.uk&avatarId=10420",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=gbowyer%40fastmail.co.uk&avatarId=10420"
                        },
                        "displayName": "Greg Bowyer",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I am excited to see what you get, it does occur to me maybe we should run a bench on ARM, but I think at this point might be over-analyzing everything :S\n\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=gbowyer%40fastmail.co.uk",
                        "name": "gbowyer@fastmail.co.uk",
                        "key": "gbowyer@fastmail.co.uk",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=gbowyer%40fastmail.co.uk&avatarId=10420",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=gbowyer%40fastmail.co.uk&avatarId=10420",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=gbowyer%40fastmail.co.uk&avatarId=10420",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=gbowyer%40fastmail.co.uk&avatarId=10420"
                        },
                        "displayName": "Greg Bowyer",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-02-24T01:51:20.307+0000",
                    "updated": "2021-02-24T01:51:20.307+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0kot4:",
        "customfield_12314139": null
    }
}