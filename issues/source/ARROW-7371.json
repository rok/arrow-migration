{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13273848",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13273848",
    "key": "ARROW-7371",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mrkn",
            "name": "mrkn",
            "key": "mrkn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Kenta Murata",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mrkn",
            "name": "mrkn",
            "key": "mrkn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Kenta Murata",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mrkn",
            "name": "mrkn",
            "key": "mrkn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Kenta Murata",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 20400,
            "total": 20400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 20400,
            "total": 20400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7371/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 36,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13273848/worklog/401228",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on pull request #6578: ARROW-7371: WIP: [GLib] Add GLib binding of Dataset\nURL: https://github.com/apache/arrow/pull/6578\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-11T06:12:28.966+0000",
                    "updated": "2020-03-11T06:12:28.966+0000",
                    "started": "2020-03-11T06:12:28.966+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "401228",
                    "issueId": "13273848"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13273848/worklog/401231",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on pull request #6578: ARROW-7371: WIP: [GLib] Add GLib binding of Dataset\nURL: https://github.com/apache/arrow/pull/6578#discussion_r390763414\n \n \n\n ##########\n File path: c_glib/arrow-dataset-glib/file_base.h\n ##########\n @@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+G_BEGIN_DECLS\n+\n+/* arrow::dataset::FileSource */\n+\n+#define GAD_TYPE_FILE_SOURCE (gad_file_source_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADFileSource,\n+                         gad_file_source,\n+                         GAD,\n+                         FILE_SOURCE,\n+                         GObject)\n+struct _GADFileSourceClass\n+{\n+  GObjectClass parent_class;\n+};\n+\n+GADFileSource *\n+gad_file_source_new_path(const gchar *path,\n+                         GArrowFileSystem *filesystem,\n+                         GArrowCompressionType compression);\n+\n+GADFileSource *\n+gad_file_source_new_buffer(GArrowBuffer *buffer,\n+                           GArrowCompressionType compression);\n+\n+gboolean\n+gad_file_source_equal(GADFileSource *file_source,\n+                      GADFileSource *other_file_source);\n+\n+GADFileSourceType\n+gad_file_source_get_type(GADFileSource *file_source);\n+\n+GArrowCompressionType\n+gad_file_source_get_compression_type(GADFileSource *file_source);\n+\n+const gchar *\n+gad_file_source_get_path(GADFileSource *file_source);\n+\n+GArrowFileSystem *\n+gad_file_source_get_filesystem(GADFileSource *file_source);\n+\n+GArrowBuffer *\n+gad_file_source_get_buffer(GADFileSource *file_source);\n+\n+GArrowSeekableInputStream *\n+gad_file_source_open(GADFileSource *file_source,\n+                     GError **error);\n+\n+/* arrow::dataset::FileFormat */\n+\n+#define GAD_TYPE_FILE_FORMAT (gad_file_format_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADFileFormat,\n+                         gad_file_format,\n+                         GAD,\n+                         FILE_FORMAT,\n+                         GObject)\n+struct _GADFileFormatClass\n+{\n+  GObjectClass parent_class;\n+};\n+\n+gchar *gad_file_format_get_type_name(GADFileFormat *format);\n+\n+gboolean gad_file_format_is_supported(GADFileFormat *format,\n+                                      GADFileSource *source,\n+                                      GError **error);\n+\n+GArrowSchema *gad_file_format_inspect(GADFileFormat *format,\n+                                      GADFileSource *source,\n+                                      GError **error);\n+\n+GList *gad_file_format_scan_file(GADFileFormat *format,\n+                                 GADFileSource *source,\n+                                 GADScanOptions *options,\n+                                 GADScanContext *context,\n+                                 GError **error);\n+\n+GADFragment *gad_file_format_make_fragment(GADFileFormat *format,\n+                                           GADFileSource *location,\n+                                           GADScanOptions *options,\n+                                           GError **error);\n+\n+/* arrow::dataset::FileFragment */\n+\n+#define GAD_TYPE_FILE_FRAGMENT (gad_file_fragment_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADFileFragment,\n+                         gad_file_fragment,\n+                         GAD,\n+                         FILE_FRAGMENT,\n+                         GADFragment)\n+struct _GADFileFragmentClass\n+{\n+  GADFragmentClass parent_class;\n+};\n+\n+GADFileFragment *gad_file_fragment_new(GADFileSource *source,\n+                                       GADFileFormat *format,\n+                                       GADScanOptions *options);\n+const GADFileSource *gad_file_fragment_get_source(GADFileFragment *fragment);\n+const GADFileFormat *gad_file_fragment_get_format(GADFileFragment *fragment);\n+\n+/* arrow::dataset::FileSystemDataset */\n+\n+#define GAD_TYPE_FILE_SYSTEM_DATASET (gad_file_system_dataset_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADFileSystemDataset,\n+                         gad_file_system_dataset,\n+                         GAD,\n+                         FILE_SYSTEM_DATASET,\n+                         GADDataset)\n+struct _GADFileSystemDatasetClass\n+{\n+  GADDatasetClass parent_class;\n+};\n+\n+GADFileSystemDataset *\n+gad_file_system_dataset_new(GArrowSchema *schema,\n+                            GADExpression *root_partition,\n+                            GADFileFormat *format,\n+                            GArrowFileSystem *file_system,\n+                            GArrowFileInfo *infos);\n+\n+GADFileSystemDataset *\n+gad_file_system_dataset_new_partitions(GArrowSchema *schema,\n+                                       GADExpression *root_partition,\n+                                       GADFileFormat *format,\n+                                       GArrowFileSystem *file_system,\n+                                       GArrowFileInfo *infos,\n+                                       GADExpression **partitions,\n+                                       gsize n_partitions);\n+\n+/* TODO: GArrowPathForest */\n \n Review comment:\n   I'll propose another pull-request to add `GArrowPathForest`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-11T06:14:51.229+0000",
                    "updated": "2020-03-11T06:14:51.229+0000",
                    "started": "2020-03-11T06:14:51.229+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "401231",
                    "issueId": "13273848"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13273848/worklog/401232",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6578: ARROW-7371: WIP: [GLib] Add GLib binding of Dataset\nURL: https://github.com/apache/arrow/pull/6578#issuecomment-597462659\n \n \n   https://issues.apache.org/jira/browse/ARROW-7371\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-11T06:16:41.154+0000",
                    "updated": "2020-03-11T06:16:41.154+0000",
                    "started": "2020-03-11T06:16:41.153+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "401232",
                    "issueId": "13273848"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13273848/worklog/401233",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on pull request #6578: ARROW-7371: WIP: [GLib] Add GLib binding of Dataset\nURL: https://github.com/apache/arrow/pull/6578#discussion_r390763567\n \n \n\n ##########\n File path: c_glib/arrow-dataset-glib/file_parquet.h\n ##########\n @@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+#include <arrow-dataset-glib/file-base.h>\n+\n+G_BEGIN_DECLS\n+\n+/* arrow::dataset::ParquetFileFormat */\n+\n+#define GAD_TYPE_PARQUET_FILE_FORMAT (gad_parquet_file_format_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADParquetFileFormat,\n+                         gad_parquet_file_format,\n+                         GAD,\n+                         PARQUET_FILE_FORMAT,\n+                         GADFileFormat)\n+struct _GADParquetFileFormatClass\n+{\n+  GADFileFormatClass parent_class;\n+};\n+\n+GADParquetFileFormat *\n+gad_parquet_file_format_new(void);\n+\n+/* TODO: GParquetReaderProperties */\n \n Review comment:\n   @kou Should we support `parquet::ReaderProperties` in glib binding?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-11T06:18:00.513+0000",
                    "updated": "2020-03-11T06:18:00.513+0000",
                    "started": "2020-03-11T06:18:00.513+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "401233",
                    "issueId": "13273848"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13273848/worklog/401234",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on pull request #6578: ARROW-7371: WIP: [GLib] Add GLib binding of Dataset\nURL: https://github.com/apache/arrow/pull/6578#discussion_r390763989\n \n \n\n ##########\n File path: c_glib/arrow-dataset-glib/projector.h\n ##########\n @@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+G_BEGIN_DECLS\n+\n+/* arrow::dataset::RecordBatchProjector */\n+\n+#define GAD_TYPE_RECORD_BATCH_PROJECTOR (gad_record_batch_projector_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADRecordBatchProjector,\n+                         gad_record_batch_projector,\n+                         GAD,\n+                         RECORD_BATCH_PROJECTOR,\n+                         GObject)\n+struct _GADRecordBatchProjectorClass\n+{\n+  GObjectClass parent_class;\n+};\n+\n+#define GAD_RECORD_BATCH_PROJECTOR_NO_MATCH (-1)\n+\n+GADRecordBatchProjector *\n+gad_record_batch_projector_new(GArrowSchema *schema);\n+\n+gboolean\n+gad_record_batch_projector_set_default_value(GADRecordBatchProjector *projector,\n+                                             gint index,\n+                                             GArrowScalar *scalar);\n+\n+/* TODO: GArrowMemoryPool */\n \n Review comment:\n   @kou Should we add `GArrowMemoryPool`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-11T06:18:00.603+0000",
                    "updated": "2020-03-11T06:18:00.603+0000",
                    "started": "2020-03-11T06:18:00.602+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "401234",
                    "issueId": "13273848"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13273848/worklog/401235",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on pull request #6578: ARROW-7371: WIP: [GLib] Add GLib binding of Dataset\nURL: https://github.com/apache/arrow/pull/6578#discussion_r390763926\n \n \n\n ##########\n File path: c_glib/arrow-dataset-glib/filter.h\n ##########\n @@ -0,0 +1,387 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+G_BEGIN_DECLS\n+\n+struct GADInExpression;\n+struct GADCastExpression;\n+\n+/* arrow::dataset::ExpressionType */\n+\n+/**\n+ * GADExpressionType\n+ * @GAD_EXPRESSION_TYPE_FIELD:\n+ *   A reference to a column within a record batch,\n+ *   will evaluate to an array\n+ * @GAD_EXPRESSION_TYPE_SCALAR:\n+ *   A literal singular value encapsulated in a Scalar\n+ * @GAD_EXPRESSION_TYPE_NOT:\n+ *   An inversion of another expression\n+ * @GAD_EXPRESSION_TYPE_CAST:\n+ *   Cast an expression to a given DataType\n+ * @GAD_EXPRESSION_TYPE_AND:\n+ *   A conjunction of multiple expressions (true if all operands are true)\n+ * @GAD_EXPRESSION_TYPE_OR:\n+ *   A disjunction of multiple expressions (true if any operand is true)\n+ * @GAD_EXPRESSION_TYPE_COMPARISON:\n+ *   A comparison of two other expressions\n+ * @GAD_EXPRESSION_TYPE_IS_VALID:\n+ *   Extract validity as a boolean expression\n+ * @GAD_EXPRESSION_TYPE_IN:\n+ *   Check each element for membership in a set\n+ * @GAD_EXPRESSION_TYPE_CUSTOM:\n+ *   Custom user defined expression\n+ */\n+typedef enum {\n+  GAD_EXPRESSION_TYPE_FIELD,\n+  GAD_EXPRESSION_TYPE_SCALAR,\n+  GAD_EXPRESSION_TYPE_NOT,\n+  GAD_EXPRESSION_TYPE_CAST,\n+  GAD_EXPRESSION_TYPE_AND,\n+  GAD_EXPRESSION_TYPE_OR,\n+  GAD_EXPRESSION_TYPE_COMPARISON,\n+  GAD_EXPRESSION_TYPE_IS_VALID,\n+  GAD_EXPRESSION_TYPE_IN,\n+  GAD_EXPRESSION_TYPE_CUSTOM\n+} GADExpressionType;\n+\n+/* arrow::dataset::Expression */\n+\n+#define GAD_TYPE_EXPRESSION (gad_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADExpression,\n+                         gad_expression,\n+                         GAD,\n+                         EXPRESSION,\n+                         GObject)\n+struct _GADExpressionClass\n+{\n+  GObjectClass parent_class;\n+};\n+\n+gboolean\n+gad_expression_equal(GADExpression *expression,\n+                     GADExpression *other_expression);\n+\n+/* TODO: GArrowScalar */\n \n Review comment:\n   @kou Should we add `GArrowScalar` for `arrow::Scalar`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-11T06:18:00.689+0000",
                    "updated": "2020-03-11T06:18:00.689+0000",
                    "started": "2020-03-11T06:18:00.689+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "401235",
                    "issueId": "13273848"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13273848/worklog/401236",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on pull request #6578: ARROW-7371: WIP: [GLib] Add GLib binding of Dataset\nURL: https://github.com/apache/arrow/pull/6578#discussion_r390764152\n \n \n\n ##########\n File path: c_glib/arrow-dataset-glib/filter.h\n ##########\n @@ -0,0 +1,387 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+G_BEGIN_DECLS\n+\n+struct GADInExpression;\n+struct GADCastExpression;\n+\n+/* arrow::dataset::ExpressionType */\n+\n+/**\n+ * GADExpressionType\n+ * @GAD_EXPRESSION_TYPE_FIELD:\n+ *   A reference to a column within a record batch,\n+ *   will evaluate to an array\n+ * @GAD_EXPRESSION_TYPE_SCALAR:\n+ *   A literal singular value encapsulated in a Scalar\n+ * @GAD_EXPRESSION_TYPE_NOT:\n+ *   An inversion of another expression\n+ * @GAD_EXPRESSION_TYPE_CAST:\n+ *   Cast an expression to a given DataType\n+ * @GAD_EXPRESSION_TYPE_AND:\n+ *   A conjunction of multiple expressions (true if all operands are true)\n+ * @GAD_EXPRESSION_TYPE_OR:\n+ *   A disjunction of multiple expressions (true if any operand is true)\n+ * @GAD_EXPRESSION_TYPE_COMPARISON:\n+ *   A comparison of two other expressions\n+ * @GAD_EXPRESSION_TYPE_IS_VALID:\n+ *   Extract validity as a boolean expression\n+ * @GAD_EXPRESSION_TYPE_IN:\n+ *   Check each element for membership in a set\n+ * @GAD_EXPRESSION_TYPE_CUSTOM:\n+ *   Custom user defined expression\n+ */\n+typedef enum {\n+  GAD_EXPRESSION_TYPE_FIELD,\n+  GAD_EXPRESSION_TYPE_SCALAR,\n+  GAD_EXPRESSION_TYPE_NOT,\n+  GAD_EXPRESSION_TYPE_CAST,\n+  GAD_EXPRESSION_TYPE_AND,\n+  GAD_EXPRESSION_TYPE_OR,\n+  GAD_EXPRESSION_TYPE_COMPARISON,\n+  GAD_EXPRESSION_TYPE_IS_VALID,\n+  GAD_EXPRESSION_TYPE_IN,\n+  GAD_EXPRESSION_TYPE_CUSTOM\n+} GADExpressionType;\n+\n+/* arrow::dataset::Expression */\n+\n+#define GAD_TYPE_EXPRESSION (gad_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADExpression,\n+                         gad_expression,\n+                         GAD,\n+                         EXPRESSION,\n+                         GObject)\n+struct _GADExpressionClass\n+{\n+  GObjectClass parent_class;\n+};\n+\n+gboolean\n+gad_expression_equal(GADExpression *expression,\n+                     GADExpression *other_expression);\n+\n+/* TODO: GArrowScalar */\n+gboolean\n+gad_expression_equal_scalar(GADExpression *expression,\n+                            GArrowScalar *other_scalar);\n+\n+gboolean\n+gad_expression_is_null(GADExpression *expression);\n+\n+GArrowDataType *\n+gad_expression_validate(GADExpression *expression,\n+                        GArrowSchema *schema,\n+                        GError **error);\n+\n+GADExpression *\n+gad_expression_assume(GADExpression *expression);\n+\n+gchar *\n+gad_expression_to_string(GADExpression *expression);\n+\n+GADExpressionType\n+gad_expression_get_type(GADExpression *expression);\n+\n+GADExpression *\n+gad_expression_copy(GADExpression *expression);\n+\n+GADInExpression *\n+gad_expression_in(GADExpression *expression,\n+                  GArrowArray *set);\n+\n+GADCastExpression *\n+gad_expression_cast_to(GADExpression *expression,\n+                       GArrowDataType *type,\n+                       GArrowCastOptions *options);\n+\n+GADCastExpression *\n+gad_expression_cast_like(GADExpression *expression,\n+                         GArrowCastOptions *options);\n+\n+/* arrow::dataset::UnaryExpression */\n+\n+#define GAD_TYPE_UNARY_EXPRESSION (gad_unary_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADUnaryExpression,\n+                         gad_unary_expression,\n+                         GAD,\n+                         UNARY_EXPRESSION,\n+                         GADExpression)\n+struct _GADUnaryExpressionClass\n+{\n+  GADExpressionClass parent_class;\n+};\n+\n+GADExpression *\n+gad_unary_expression_get_operand(GADUnaryExpression *expression);\n+\n+/* arrow::dataset::BinaryExpression */\n+\n+#define GAD_TYPE_BINARY_EXPRESSION (gad_binary_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADBinaryExpression,\n+                         gad_binary_expression,\n+                         GAD,\n+                         BINARY_EXPRESSION,\n+                         GADExpression)\n+struct _GADBinaryExpressionClass\n+{\n+  GADExpressionClass parent_class;\n+};\n+\n+GADExpression *\n+gad_binary_expression_get_left_operand(GADBinaryExpression *expression);\n+\n+GADExpression *\n+gad_binary_expression_get_right_operand(GADBinaryExpression *expression);\n+\n+/* arrow::dataset::ComparisonExpression */\n+\n+#define GAD_TYPE_COMPARISON_EXPRESSION (gad_comparison_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADComparisonExpression,\n+                         gad_comparison_expression,\n+                         GAD,\n+                         COMPARISON_EXPRESSION,\n+                         GADBinaryExpression)\n+struct _GADComparisonExpressionClass\n+{\n+  GADBinaryExpressionClass parent_class;\n+};\n+\n+GArrowCompareOperator\n+gad_comparison_expression_get_operator(GADComparisonExpression *expression);\n+\n+/* arrow::dataset::AndExpression */\n+\n+#define GAD_TYPE_AND_EXPRESSION (gad_and_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADAndExpression,\n+                         gad_and_expression,\n+                         GAD,\n+                         AND_EXPRESSION,\n+                         GADBinaryExpression)\n+struct _GADAndExpressionClass\n+{\n+  GADBinaryExpressionClass parent_class;\n+};\n+\n+GADAndExpression *\n+gad_and_expression_new(GADExpression *left_operand,\n+                       GADExpression *right_operand);\n+\n+/* arrow::dataset::OrExpression */\n+\n+#define GAD_TYPE_OR_EXPRESSION (gad_or_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADOrExpression,\n+                         gad_or_expression,\n+                         GAD,\n+                         OR_EXPRESSION,\n+                         GADBinaryExpression)\n+struct _GADOrExpressionClass\n+{\n+  GADBinaryExpressionClass parent_class;\n+};\n+\n+GADOrExpression *\n+gad_or_expression_new(GADExpression *left_operand,\n+                      GADExpression *right_operand);\n+\n+/* arrow::dataset::NotExpression */\n+\n+#define GAD_TYPE_NOT_EXPRESSION (gad_not_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADNotExpression,\n+                         gad_not_expression,\n+                         GAD,\n+                         NOT_EXPRESSION,\n+                         GADUnaryExpression)\n+struct _GADNotExpressionClass\n+{\n+  GADUnaryExpressionClass parent_class;\n+};\n+\n+GADNotExpression *\n+gad_not_expression_new(GADExpression *operand);\n+\n+/* arrow::dataset::IsValidExpression */\n+\n+#define GAD_TYPE_IS_VALID_EXPRESSION (gad_is_valid_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADIsValidExpression,\n+                         gad_is_valid_expression,\n+                         GAD,\n+                         IS_VALID_EXPRESSION,\n+                         GADUnaryExpression)\n+struct _GADIsValidExpressionClass\n+{\n+  GADUnaryExpressionClass parent_class;\n+};\n+\n+GADIsValidExpression *\n+gad_is_valid_expression_new(GADExpression *operand);\n+\n+/* arrow::dataset::InExpression */\n+\n+#define GAD_TYPE_IN_EXPRESSION (gad_in_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADInExpression,\n+                         gad_in_expression,\n+                         GAD,\n+                         IN_EXPRESSION,\n+                         GADUnaryExpression)\n+struct _GADInExpressionClass\n+{\n+  GADUnaryExpressionClass parent_class;\n+};\n+\n+GADInExpression *\n+gad_in_expression_new(GADExpression *operand,\n+                      GArrowArray *set);\n+\n+GArrowArray *\n+gad_in_expression_get_set(GADInExpression *expression);\n+\n+/* arrow::dataset::CastExpression */\n+\n+#define GAD_TYPE_CAST_EXPRESSION (gad_cast_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADCastExpression,\n+                         gad_cast_expression,\n+                         GAD,\n+                         CAST_EXPRESSION,\n+                         GADUnaryExpression)\n+struct _GADCastExpressionClass\n+{\n+  GADUnaryExpressionClass parent_class;\n+};\n+\n+GADCastExpression *\n+gad_cast_to_expression_new(GADExpression *operand,\n+                           GArrowDataType *type,\n+                           GArrowCastOptions *options);\n+\n+GADCastExpression *\n+gad_cast_like_expression_new(GADExpression *operand,\n+                             GADExpression *like,\n+                             GArrowCastOptions *options);\n+\n+GArrowCastOptions *\n+gad_cast_expression_get_options(GADCastExpression *expression);\n+\n+/* arrow::dataset::ScalarExpression */\n+\n+#define GAD_TYPE_EXPRESSION (gad_scalar_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADScalarExpression,\n+                         gad_scalar_expression,\n+                         GAD,\n+                         SCALAR_EXPRESSION,\n+                         GADExpression)\n+struct _GADScalarExpressionClass\n+{\n+  GADExpressionClass parent_class;\n+};\n+\n+/* TODO: GArrowScalar */\n+GADScalarExpression *\n+gad_scalar_expression_new(GArrowScalar *value);\n+\n+GArrowScalar *\n+gad_scalar_expression_get_value(GADScalarExpression *expression);\n+\n+/* arrow::dataset::FieldExpression */\n+\n+#define GAD_TYPE_FIELD_EXPRESSION (gad_field_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADFieldExpression,\n+                         gad_field_expression,\n+                         GAD,\n+                         FIELD_EXPRESSION,\n+                         GADExpression)\n+struct _GADFieldExpressionClass\n+{\n+  GADExpressionClass parent_class;\n+};\n+\n+GADFieldExpression *\n+gad_field_expression_new(const gchar *name);\n+\n+gchar *\n+gad_field_expression_get_name(GADFieldExpression *expression);\n+\n+/* arrow::dataset::CustomExpression */\n+\n+#define GAD_TYPE_CUSTOM_EXPRESSION (gad_custom_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADCustomExpression,\n+                         gad_custom_expression,\n+                         GAD,\n+                         CUSTOM_EXPRESSION,\n+                         GADExpression)\n+struct _GADCustomExpressionClass\n+{\n+  GADExpressionClass parent_class;\n+};\n+\n+/* arrow::dataset::ExpressionEvaluator */\n+\n+#define GAD_TYPE_EXPRESSION_EVALUATOR (gad_expression_evaluator_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADExpressionEvaluator,\n+                         gad_expression_evaluator,\n+                         GAD,\n+                         EXPRESSION_EVALUATOR,\n+                         GObject)\n+struct _GAExpressionEvaluatorClass\n+{\n+  GObjectClass parent_class;\n+};\n+\n+/* TODO: ArrowDatum */\n \n Review comment:\n   @kou Should we add `GArrowDatum`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-11T06:18:00.733+0000",
                    "updated": "2020-03-11T06:18:00.733+0000",
                    "started": "2020-03-11T06:18:00.733+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "401236",
                    "issueId": "13273848"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13273848/worklog/401908",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on issue #6578: ARROW-7371: WIP: [GLib] Add GLib binding of Dataset\nURL: https://github.com/apache/arrow/pull/6578#issuecomment-597974805\n \n \n   Don't spend too much effort on the pkg-config/packaging stuff, I intend to bring back arrow::dataset into the main shared library has it's creating too much pain.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-12T02:28:26.247+0000",
                    "updated": "2020-03-12T02:28:26.247+0000",
                    "started": "2020-03-12T02:28:26.246+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "401908",
                    "issueId": "13273848"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13273848/worklog/401909",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on issue #6578: ARROW-7371: WIP: [GLib] Add GLib binding of Dataset\nURL: https://github.com/apache/arrow/pull/6578#issuecomment-597975480\n \n \n   @fsaintjacques I got it. Thank you for your advice.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-12T02:31:25.071+0000",
                    "updated": "2020-03-12T02:31:25.071+0000",
                    "started": "2020-03-12T02:31:25.071+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "401909",
                    "issueId": "13273848"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13273848/worklog/404410",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6578: ARROW-7371: WIP: [GLib] Add GLib binding of Dataset\nURL: https://github.com/apache/arrow/pull/6578#discussion_r393391569\n \n \n\n ##########\n File path: c_glib/arrow-dataset-glib/file_parquet.h\n ##########\n @@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+#include <arrow-dataset-glib/file-base.h>\n+\n+G_BEGIN_DECLS\n+\n+/* arrow::dataset::ParquetFileFormat */\n+\n+#define GAD_TYPE_PARQUET_FILE_FORMAT (gad_parquet_file_format_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADParquetFileFormat,\n+                         gad_parquet_file_format,\n+                         GAD,\n+                         PARQUET_FILE_FORMAT,\n+                         GADFileFormat)\n+struct _GADParquetFileFormatClass\n+{\n+  GADFileFormatClass parent_class;\n+};\n+\n+GADParquetFileFormat *\n+gad_parquet_file_format_new(void);\n+\n+/* TODO: GParquetReaderProperties */\n \n Review comment:\n   Yes, we should.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-17T02:38:32.034+0000",
                    "updated": "2020-03-17T02:38:32.034+0000",
                    "started": "2020-03-17T02:38:32.034+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "404410",
                    "issueId": "13273848"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13273848/worklog/404411",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6578: ARROW-7371: WIP: [GLib] Add GLib binding of Dataset\nURL: https://github.com/apache/arrow/pull/6578#discussion_r393401922\n \n \n\n ##########\n File path: c_glib/arrow-dataset-glib/filter.h\n ##########\n @@ -0,0 +1,387 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+G_BEGIN_DECLS\n+\n+struct GADInExpression;\n+struct GADCastExpression;\n+\n+/* arrow::dataset::ExpressionType */\n+\n+/**\n+ * GADExpressionType\n+ * @GAD_EXPRESSION_TYPE_FIELD:\n+ *   A reference to a column within a record batch,\n+ *   will evaluate to an array\n+ * @GAD_EXPRESSION_TYPE_SCALAR:\n+ *   A literal singular value encapsulated in a Scalar\n+ * @GAD_EXPRESSION_TYPE_NOT:\n+ *   An inversion of another expression\n+ * @GAD_EXPRESSION_TYPE_CAST:\n+ *   Cast an expression to a given DataType\n+ * @GAD_EXPRESSION_TYPE_AND:\n+ *   A conjunction of multiple expressions (true if all operands are true)\n+ * @GAD_EXPRESSION_TYPE_OR:\n+ *   A disjunction of multiple expressions (true if any operand is true)\n+ * @GAD_EXPRESSION_TYPE_COMPARISON:\n+ *   A comparison of two other expressions\n+ * @GAD_EXPRESSION_TYPE_IS_VALID:\n+ *   Extract validity as a boolean expression\n+ * @GAD_EXPRESSION_TYPE_IN:\n+ *   Check each element for membership in a set\n+ * @GAD_EXPRESSION_TYPE_CUSTOM:\n+ *   Custom user defined expression\n+ */\n+typedef enum {\n+  GAD_EXPRESSION_TYPE_FIELD,\n+  GAD_EXPRESSION_TYPE_SCALAR,\n+  GAD_EXPRESSION_TYPE_NOT,\n+  GAD_EXPRESSION_TYPE_CAST,\n+  GAD_EXPRESSION_TYPE_AND,\n+  GAD_EXPRESSION_TYPE_OR,\n+  GAD_EXPRESSION_TYPE_COMPARISON,\n+  GAD_EXPRESSION_TYPE_IS_VALID,\n+  GAD_EXPRESSION_TYPE_IN,\n+  GAD_EXPRESSION_TYPE_CUSTOM\n+} GADExpressionType;\n+\n+/* arrow::dataset::Expression */\n+\n+#define GAD_TYPE_EXPRESSION (gad_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADExpression,\n+                         gad_expression,\n+                         GAD,\n+                         EXPRESSION,\n+                         GObject)\n+struct _GADExpressionClass\n+{\n+  GObjectClass parent_class;\n+};\n+\n+gboolean\n+gad_expression_equal(GADExpression *expression,\n+                     GADExpression *other_expression);\n+\n+/* TODO: GArrowScalar */\n+gboolean\n+gad_expression_equal_scalar(GADExpression *expression,\n+                            GArrowScalar *other_scalar);\n+\n+gboolean\n+gad_expression_is_null(GADExpression *expression);\n+\n+GArrowDataType *\n+gad_expression_validate(GADExpression *expression,\n+                        GArrowSchema *schema,\n+                        GError **error);\n+\n+GADExpression *\n+gad_expression_assume(GADExpression *expression);\n+\n+gchar *\n+gad_expression_to_string(GADExpression *expression);\n+\n+GADExpressionType\n+gad_expression_get_type(GADExpression *expression);\n+\n+GADExpression *\n+gad_expression_copy(GADExpression *expression);\n+\n+GADInExpression *\n+gad_expression_in(GADExpression *expression,\n+                  GArrowArray *set);\n+\n+GADCastExpression *\n+gad_expression_cast_to(GADExpression *expression,\n+                       GArrowDataType *type,\n+                       GArrowCastOptions *options);\n+\n+GADCastExpression *\n+gad_expression_cast_like(GADExpression *expression,\n+                         GArrowCastOptions *options);\n+\n+/* arrow::dataset::UnaryExpression */\n+\n+#define GAD_TYPE_UNARY_EXPRESSION (gad_unary_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADUnaryExpression,\n+                         gad_unary_expression,\n+                         GAD,\n+                         UNARY_EXPRESSION,\n+                         GADExpression)\n+struct _GADUnaryExpressionClass\n+{\n+  GADExpressionClass parent_class;\n+};\n+\n+GADExpression *\n+gad_unary_expression_get_operand(GADUnaryExpression *expression);\n+\n+/* arrow::dataset::BinaryExpression */\n+\n+#define GAD_TYPE_BINARY_EXPRESSION (gad_binary_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADBinaryExpression,\n+                         gad_binary_expression,\n+                         GAD,\n+                         BINARY_EXPRESSION,\n+                         GADExpression)\n+struct _GADBinaryExpressionClass\n+{\n+  GADExpressionClass parent_class;\n+};\n+\n+GADExpression *\n+gad_binary_expression_get_left_operand(GADBinaryExpression *expression);\n+\n+GADExpression *\n+gad_binary_expression_get_right_operand(GADBinaryExpression *expression);\n+\n+/* arrow::dataset::ComparisonExpression */\n+\n+#define GAD_TYPE_COMPARISON_EXPRESSION (gad_comparison_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADComparisonExpression,\n+                         gad_comparison_expression,\n+                         GAD,\n+                         COMPARISON_EXPRESSION,\n+                         GADBinaryExpression)\n+struct _GADComparisonExpressionClass\n+{\n+  GADBinaryExpressionClass parent_class;\n+};\n+\n+GArrowCompareOperator\n+gad_comparison_expression_get_operator(GADComparisonExpression *expression);\n+\n+/* arrow::dataset::AndExpression */\n+\n+#define GAD_TYPE_AND_EXPRESSION (gad_and_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADAndExpression,\n+                         gad_and_expression,\n+                         GAD,\n+                         AND_EXPRESSION,\n+                         GADBinaryExpression)\n+struct _GADAndExpressionClass\n+{\n+  GADBinaryExpressionClass parent_class;\n+};\n+\n+GADAndExpression *\n+gad_and_expression_new(GADExpression *left_operand,\n+                       GADExpression *right_operand);\n+\n+/* arrow::dataset::OrExpression */\n+\n+#define GAD_TYPE_OR_EXPRESSION (gad_or_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADOrExpression,\n+                         gad_or_expression,\n+                         GAD,\n+                         OR_EXPRESSION,\n+                         GADBinaryExpression)\n+struct _GADOrExpressionClass\n+{\n+  GADBinaryExpressionClass parent_class;\n+};\n+\n+GADOrExpression *\n+gad_or_expression_new(GADExpression *left_operand,\n+                      GADExpression *right_operand);\n+\n+/* arrow::dataset::NotExpression */\n+\n+#define GAD_TYPE_NOT_EXPRESSION (gad_not_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADNotExpression,\n+                         gad_not_expression,\n+                         GAD,\n+                         NOT_EXPRESSION,\n+                         GADUnaryExpression)\n+struct _GADNotExpressionClass\n+{\n+  GADUnaryExpressionClass parent_class;\n+};\n+\n+GADNotExpression *\n+gad_not_expression_new(GADExpression *operand);\n+\n+/* arrow::dataset::IsValidExpression */\n+\n+#define GAD_TYPE_IS_VALID_EXPRESSION (gad_is_valid_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADIsValidExpression,\n+                         gad_is_valid_expression,\n+                         GAD,\n+                         IS_VALID_EXPRESSION,\n+                         GADUnaryExpression)\n+struct _GADIsValidExpressionClass\n+{\n+  GADUnaryExpressionClass parent_class;\n+};\n+\n+GADIsValidExpression *\n+gad_is_valid_expression_new(GADExpression *operand);\n+\n+/* arrow::dataset::InExpression */\n+\n+#define GAD_TYPE_IN_EXPRESSION (gad_in_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADInExpression,\n+                         gad_in_expression,\n+                         GAD,\n+                         IN_EXPRESSION,\n+                         GADUnaryExpression)\n+struct _GADInExpressionClass\n+{\n+  GADUnaryExpressionClass parent_class;\n+};\n+\n+GADInExpression *\n+gad_in_expression_new(GADExpression *operand,\n+                      GArrowArray *set);\n+\n+GArrowArray *\n+gad_in_expression_get_set(GADInExpression *expression);\n+\n+/* arrow::dataset::CastExpression */\n+\n+#define GAD_TYPE_CAST_EXPRESSION (gad_cast_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADCastExpression,\n+                         gad_cast_expression,\n+                         GAD,\n+                         CAST_EXPRESSION,\n+                         GADUnaryExpression)\n+struct _GADCastExpressionClass\n+{\n+  GADUnaryExpressionClass parent_class;\n+};\n+\n+GADCastExpression *\n+gad_cast_to_expression_new(GADExpression *operand,\n+                           GArrowDataType *type,\n+                           GArrowCastOptions *options);\n+\n+GADCastExpression *\n+gad_cast_like_expression_new(GADExpression *operand,\n+                             GADExpression *like,\n+                             GArrowCastOptions *options);\n+\n+GArrowCastOptions *\n+gad_cast_expression_get_options(GADCastExpression *expression);\n+\n+/* arrow::dataset::ScalarExpression */\n+\n+#define GAD_TYPE_EXPRESSION (gad_scalar_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADScalarExpression,\n+                         gad_scalar_expression,\n+                         GAD,\n+                         SCALAR_EXPRESSION,\n+                         GADExpression)\n+struct _GADScalarExpressionClass\n+{\n+  GADExpressionClass parent_class;\n+};\n+\n+/* TODO: GArrowScalar */\n+GADScalarExpression *\n+gad_scalar_expression_new(GArrowScalar *value);\n+\n+GArrowScalar *\n+gad_scalar_expression_get_value(GADScalarExpression *expression);\n+\n+/* arrow::dataset::FieldExpression */\n+\n+#define GAD_TYPE_FIELD_EXPRESSION (gad_field_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADFieldExpression,\n+                         gad_field_expression,\n+                         GAD,\n+                         FIELD_EXPRESSION,\n+                         GADExpression)\n+struct _GADFieldExpressionClass\n+{\n+  GADExpressionClass parent_class;\n+};\n+\n+GADFieldExpression *\n+gad_field_expression_new(const gchar *name);\n+\n+gchar *\n+gad_field_expression_get_name(GADFieldExpression *expression);\n+\n+/* arrow::dataset::CustomExpression */\n+\n+#define GAD_TYPE_CUSTOM_EXPRESSION (gad_custom_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADCustomExpression,\n+                         gad_custom_expression,\n+                         GAD,\n+                         CUSTOM_EXPRESSION,\n+                         GADExpression)\n+struct _GADCustomExpressionClass\n+{\n+  GADExpressionClass parent_class;\n+};\n+\n+/* arrow::dataset::ExpressionEvaluator */\n+\n+#define GAD_TYPE_EXPRESSION_EVALUATOR (gad_expression_evaluator_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADExpressionEvaluator,\n+                         gad_expression_evaluator,\n+                         GAD,\n+                         EXPRESSION_EVALUATOR,\n+                         GObject)\n+struct _GAExpressionEvaluatorClass\n+{\n+  GObjectClass parent_class;\n+};\n+\n+/* TODO: ArrowDatum */\n \n Review comment:\n   I wanted to hide `arrow::Datum` in GLib layer to reduce complexity.\r\n   If we can know what type is returned by `arrow::dataset::ExpressionEvaluator::Evaluate()` before we call it, we don't need to add `GArrowDatum`.\r\n   But it seems that `arrow::dataset::ExpressionEvaluator` doesn't provide such feature.\r\n   \r\n   OK. We add `GarrowDatum`. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-17T02:38:32.037+0000",
                    "updated": "2020-03-17T02:38:32.037+0000",
                    "started": "2020-03-17T02:38:32.037+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "404411",
                    "issueId": "13273848"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13273848/worklog/404412",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6578: ARROW-7371: WIP: [GLib] Add GLib binding of Dataset\nURL: https://github.com/apache/arrow/pull/6578#discussion_r393396048\n \n \n\n ##########\n File path: c_glib/arrow-dataset-glib/filter.h\n ##########\n @@ -0,0 +1,387 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+G_BEGIN_DECLS\n+\n+struct GADInExpression;\n+struct GADCastExpression;\n+\n+/* arrow::dataset::ExpressionType */\n+\n+/**\n+ * GADExpressionType\n+ * @GAD_EXPRESSION_TYPE_FIELD:\n+ *   A reference to a column within a record batch,\n+ *   will evaluate to an array\n+ * @GAD_EXPRESSION_TYPE_SCALAR:\n+ *   A literal singular value encapsulated in a Scalar\n+ * @GAD_EXPRESSION_TYPE_NOT:\n+ *   An inversion of another expression\n+ * @GAD_EXPRESSION_TYPE_CAST:\n+ *   Cast an expression to a given DataType\n+ * @GAD_EXPRESSION_TYPE_AND:\n+ *   A conjunction of multiple expressions (true if all operands are true)\n+ * @GAD_EXPRESSION_TYPE_OR:\n+ *   A disjunction of multiple expressions (true if any operand is true)\n+ * @GAD_EXPRESSION_TYPE_COMPARISON:\n+ *   A comparison of two other expressions\n+ * @GAD_EXPRESSION_TYPE_IS_VALID:\n+ *   Extract validity as a boolean expression\n+ * @GAD_EXPRESSION_TYPE_IN:\n+ *   Check each element for membership in a set\n+ * @GAD_EXPRESSION_TYPE_CUSTOM:\n+ *   Custom user defined expression\n+ */\n+typedef enum {\n+  GAD_EXPRESSION_TYPE_FIELD,\n+  GAD_EXPRESSION_TYPE_SCALAR,\n+  GAD_EXPRESSION_TYPE_NOT,\n+  GAD_EXPRESSION_TYPE_CAST,\n+  GAD_EXPRESSION_TYPE_AND,\n+  GAD_EXPRESSION_TYPE_OR,\n+  GAD_EXPRESSION_TYPE_COMPARISON,\n+  GAD_EXPRESSION_TYPE_IS_VALID,\n+  GAD_EXPRESSION_TYPE_IN,\n+  GAD_EXPRESSION_TYPE_CUSTOM\n+} GADExpressionType;\n+\n+/* arrow::dataset::Expression */\n+\n+#define GAD_TYPE_EXPRESSION (gad_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADExpression,\n+                         gad_expression,\n+                         GAD,\n+                         EXPRESSION,\n+                         GObject)\n+struct _GADExpressionClass\n+{\n+  GObjectClass parent_class;\n+};\n+\n+gboolean\n+gad_expression_equal(GADExpression *expression,\n+                     GADExpression *other_expression);\n+\n+/* TODO: GArrowScalar */\n \n Review comment:\n   I wanted to use `GValue` in GObject for `arrow::Scalar`. `GValue` represents similar concept to `arrow::Scalar`.\r\n   https://developer.gnome.org/gobject/stable/gobject-Generic-values.html\r\n   \r\n   But we need to add `GArrowScalar` because `arrow::Scalar` supports some complex types such as `arrow::StructScalar`. They'll be difficult to implement in `GValue`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-17T02:38:32.044+0000",
                    "updated": "2020-03-17T02:38:32.044+0000",
                    "started": "2020-03-17T02:38:32.044+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "404412",
                    "issueId": "13273848"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13273848/worklog/404413",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6578: ARROW-7371: WIP: [GLib] Add GLib binding of Dataset\nURL: https://github.com/apache/arrow/pull/6578#discussion_r393403138\n \n \n\n ##########\n File path: c_glib/arrow-dataset-glib/projector.h\n ##########\n @@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+G_BEGIN_DECLS\n+\n+/* arrow::dataset::RecordBatchProjector */\n+\n+#define GAD_TYPE_RECORD_BATCH_PROJECTOR (gad_record_batch_projector_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADRecordBatchProjector,\n+                         gad_record_batch_projector,\n+                         GAD,\n+                         RECORD_BATCH_PROJECTOR,\n+                         GObject)\n+struct _GADRecordBatchProjectorClass\n+{\n+  GObjectClass parent_class;\n+};\n+\n+#define GAD_RECORD_BATCH_PROJECTOR_NO_MATCH (-1)\n+\n+GADRecordBatchProjector *\n+gad_record_batch_projector_new(GArrowSchema *schema);\n+\n+gboolean\n+gad_record_batch_projector_set_default_value(GADRecordBatchProjector *projector,\n+                                             gint index,\n+                                             GArrowScalar *scalar);\n+\n+/* TODO: GArrowMemoryPool */\n \n Review comment:\n   I want to hide `arrow::MemoryPool` in GLib layer because most users can use the default memory pool.\r\n   For advanced use case, I want to export `garrow_memory_pool_set_default()` or something to change the default memory pool.\r\n   For example, we can use a memory pool that uses `ruby_xmalloc()` and `ruby_xfree()` in Red Arrow by the feature. The memory pool will integrate to Ruby's GC well.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-17T02:38:32.080+0000",
                    "updated": "2020-03-17T02:38:32.080+0000",
                    "started": "2020-03-17T02:38:32.080+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "404413",
                    "issueId": "13273848"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13273848/worklog/408563",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on pull request #6578: ARROW-7371: WIP: [GLib] Add GLib binding of Dataset\nURL: https://github.com/apache/arrow/pull/6578#discussion_r396948056\n \n \n\n ##########\n File path: c_glib/arrow-dataset-glib/file_base.h\n ##########\n @@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+G_BEGIN_DECLS\n+\n+/* arrow::dataset::FileSource */\n+\n+#define GAD_TYPE_FILE_SOURCE (gad_file_source_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADFileSource,\n+                         gad_file_source,\n+                         GAD,\n+                         FILE_SOURCE,\n+                         GObject)\n+struct _GADFileSourceClass\n+{\n+  GObjectClass parent_class;\n+};\n+\n+GADFileSource *\n+gad_file_source_new_path(const gchar *path,\n+                         GArrowFileSystem *filesystem,\n+                         GArrowCompressionType compression);\n+\n+GADFileSource *\n+gad_file_source_new_buffer(GArrowBuffer *buffer,\n+                           GArrowCompressionType compression);\n+\n+gboolean\n+gad_file_source_equal(GADFileSource *file_source,\n+                      GADFileSource *other_file_source);\n+\n+GADFileSourceType\n+gad_file_source_get_type(GADFileSource *file_source);\n+\n+GArrowCompressionType\n+gad_file_source_get_compression_type(GADFileSource *file_source);\n+\n+const gchar *\n+gad_file_source_get_path(GADFileSource *file_source);\n+\n+GArrowFileSystem *\n+gad_file_source_get_filesystem(GADFileSource *file_source);\n+\n+GArrowBuffer *\n+gad_file_source_get_buffer(GADFileSource *file_source);\n+\n+GArrowSeekableInputStream *\n+gad_file_source_open(GADFileSource *file_source,\n+                     GError **error);\n+\n+/* arrow::dataset::FileFormat */\n+\n+#define GAD_TYPE_FILE_FORMAT (gad_file_format_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADFileFormat,\n+                         gad_file_format,\n+                         GAD,\n+                         FILE_FORMAT,\n+                         GObject)\n+struct _GADFileFormatClass\n+{\n+  GObjectClass parent_class;\n+};\n+\n+gchar *gad_file_format_get_type_name(GADFileFormat *format);\n+\n+gboolean gad_file_format_is_supported(GADFileFormat *format,\n+                                      GADFileSource *source,\n+                                      GError **error);\n+\n+GArrowSchema *gad_file_format_inspect(GADFileFormat *format,\n+                                      GADFileSource *source,\n+                                      GError **error);\n+\n+GList *gad_file_format_scan_file(GADFileFormat *format,\n+                                 GADFileSource *source,\n+                                 GADScanOptions *options,\n+                                 GADScanContext *context,\n+                                 GError **error);\n+\n+GADFragment *gad_file_format_make_fragment(GADFileFormat *format,\n+                                           GADFileSource *location,\n+                                           GADScanOptions *options,\n+                                           GError **error);\n+\n+/* arrow::dataset::FileFragment */\n+\n+#define GAD_TYPE_FILE_FRAGMENT (gad_file_fragment_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADFileFragment,\n+                         gad_file_fragment,\n+                         GAD,\n+                         FILE_FRAGMENT,\n+                         GADFragment)\n+struct _GADFileFragmentClass\n+{\n+  GADFragmentClass parent_class;\n+};\n+\n+GADFileFragment *gad_file_fragment_new(GADFileSource *source,\n+                                       GADFileFormat *format,\n+                                       GADScanOptions *options);\n+const GADFileSource *gad_file_fragment_get_source(GADFileFragment *fragment);\n+const GADFileFormat *gad_file_fragment_get_format(GADFileFragment *fragment);\n+\n+/* arrow::dataset::FileSystemDataset */\n+\n+#define GAD_TYPE_FILE_SYSTEM_DATASET (gad_file_system_dataset_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADFileSystemDataset,\n+                         gad_file_system_dataset,\n+                         GAD,\n+                         FILE_SYSTEM_DATASET,\n+                         GADDataset)\n+struct _GADFileSystemDatasetClass\n+{\n+  GADDatasetClass parent_class;\n+};\n+\n+GADFileSystemDataset *\n+gad_file_system_dataset_new(GArrowSchema *schema,\n+                            GADExpression *root_partition,\n+                            GADFileFormat *format,\n+                            GArrowFileSystem *file_system,\n+                            GArrowFileInfo *infos);\n+\n+GADFileSystemDataset *\n+gad_file_system_dataset_new_partitions(GArrowSchema *schema,\n+                                       GADExpression *root_partition,\n+                                       GADFileFormat *format,\n+                                       GArrowFileSystem *file_system,\n+                                       GArrowFileInfo *infos,\n+                                       GADExpression **partitions,\n+                                       gsize n_partitions);\n+\n+/* TODO: GArrowPathForest */\n \n Review comment:\n   I'll remove `GArrowPathForest` because we decided that we don't use it in #6591.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-24T07:32:39.499+0000",
                    "updated": "2020-03-24T07:32:39.499+0000",
                    "started": "2020-03-24T07:32:39.499+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "408563",
                    "issueId": "13273848"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13273848/worklog/408575",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on issue #6578: ARROW-7371: WIP: [GLib] Add GLib binding of Dataset\nURL: https://github.com/apache/arrow/pull/6578#issuecomment-603077934\n \n \n   @kou Thank you for reviewing!\r\n   \r\n   > How about the followings?\r\n   >\r\n   > ```c\r\n   > GArrowRecordBatch *\r\n   > garrow_record_batch_iterator_next(GArrowRecordBatchIterator *iterator);\r\n   > \r\n   > GArrowRecordBatchIterator *\r\n   > gad_scan_task_execute(GArrowScanTask *Task);\r\n   > \r\n   > GADScanContext *\r\n   > gad_scan_context_new(void);\r\n   > \r\n   > GADScanOptions *\r\n   > gad_scan_options_new(GArrowSchema *schema);\r\n   > \r\n   > GADInMemoryScanTask *\r\n   > gad_in_memory_scan_task_new(GList *record_batches,\r\n   >                             GADScanOptions *options,\r\n   >                             GADScanContext *context);\r\n   > ```\r\n   \r\n   Did you mean that we should start the first step with only these functions?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-24T07:39:02.417+0000",
                    "updated": "2020-03-24T07:39:02.417+0000",
                    "started": "2020-03-24T07:39:02.417+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "408575",
                    "issueId": "13273848"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13273848/worklog/408587",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #6578: ARROW-7371: WIP: [GLib] Add GLib binding of Dataset\nURL: https://github.com/apache/arrow/pull/6578#issuecomment-603099139\n \n \n   > Did you mean that we should start the first step with only these functions?\r\n   \r\n   Yes. Large pull request is difficult to review...\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-24T08:28:27.406+0000",
                    "updated": "2020-03-24T08:28:27.406+0000",
                    "started": "2020-03-24T08:28:27.406+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "408587",
                    "issueId": "13273848"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13273848/worklog/408588",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on issue #6578: ARROW-7371: WIP: [GLib] Add GLib binding of Dataset\nURL: https://github.com/apache/arrow/pull/6578#issuecomment-603077934\n \n \n   @kou Thank you for reviewing!\r\n   \r\n   > How about the followings?\r\n   >\r\n   > ```c\r\n   > GArrowRecordBatch *\r\n   > garrow_record_batch_iterator_next(GArrowRecordBatchIterator *iterator);\r\n   > \r\n   > GArrowRecordBatchIterator *\r\n   > gad_scan_task_execute(GArrowScanTask *Task);\r\n   > \r\n   > GADScanContext *\r\n   > gad_scan_context_new(void);\r\n   > \r\n   > GADScanOptions *\r\n   > gad_scan_options_new(GArrowSchema *schema);\r\n   > \r\n   > GADInMemoryScanTask *\r\n   > gad_in_memory_scan_task_new(GList *record_batches,\r\n   >                             GADScanOptions *options,\r\n   >                             GADScanContext *context);\r\n   > ```\r\n   \r\n   ~Did you mean that we should start the first step with only these functions?~\r\n   \r\n   Ah, I understand that these are your change proposals!\r\n   \r\n   I'll accept your proposed function signatures.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-24T08:28:27.826+0000",
                    "updated": "2020-03-24T08:28:27.826+0000",
                    "started": "2020-03-24T08:28:27.826+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "408588",
                    "issueId": "13273848"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13273848/worklog/408589",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on issue #6578: ARROW-7371: WIP: [GLib] Add GLib binding of Dataset\nURL: https://github.com/apache/arrow/pull/6578#issuecomment-603099605\n \n \n   > Yes. Large pull request is difficult to review...\r\n   \r\n   I got it!!\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-24T08:29:25.164+0000",
                    "updated": "2020-03-24T08:29:25.164+0000",
                    "started": "2020-03-24T08:29:25.164+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "408589",
                    "issueId": "13273848"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13273848/worklog/408724",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6578: ARROW-7371: WIP: [GLib] Add GLib binding of Dataset\nURL: https://github.com/apache/arrow/pull/6578#discussion_r397125757\n \n \n\n ##########\n File path: c_glib/arrow-dataset-glib/filter.h\n ##########\n @@ -0,0 +1,387 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+G_BEGIN_DECLS\n+\n+struct GADInExpression;\n+struct GADCastExpression;\n+\n+/* arrow::dataset::ExpressionType */\n+\n+/**\n+ * GADExpressionType\n+ * @GAD_EXPRESSION_TYPE_FIELD:\n+ *   A reference to a column within a record batch,\n+ *   will evaluate to an array\n+ * @GAD_EXPRESSION_TYPE_SCALAR:\n+ *   A literal singular value encapsulated in a Scalar\n+ * @GAD_EXPRESSION_TYPE_NOT:\n+ *   An inversion of another expression\n+ * @GAD_EXPRESSION_TYPE_CAST:\n+ *   Cast an expression to a given DataType\n+ * @GAD_EXPRESSION_TYPE_AND:\n+ *   A conjunction of multiple expressions (true if all operands are true)\n+ * @GAD_EXPRESSION_TYPE_OR:\n+ *   A disjunction of multiple expressions (true if any operand is true)\n+ * @GAD_EXPRESSION_TYPE_COMPARISON:\n+ *   A comparison of two other expressions\n+ * @GAD_EXPRESSION_TYPE_IS_VALID:\n+ *   Extract validity as a boolean expression\n+ * @GAD_EXPRESSION_TYPE_IN:\n+ *   Check each element for membership in a set\n+ * @GAD_EXPRESSION_TYPE_CUSTOM:\n+ *   Custom user defined expression\n+ */\n+typedef enum {\n+  GAD_EXPRESSION_TYPE_FIELD,\n+  GAD_EXPRESSION_TYPE_SCALAR,\n+  GAD_EXPRESSION_TYPE_NOT,\n+  GAD_EXPRESSION_TYPE_CAST,\n+  GAD_EXPRESSION_TYPE_AND,\n+  GAD_EXPRESSION_TYPE_OR,\n+  GAD_EXPRESSION_TYPE_COMPARISON,\n+  GAD_EXPRESSION_TYPE_IS_VALID,\n+  GAD_EXPRESSION_TYPE_IN,\n+  GAD_EXPRESSION_TYPE_CUSTOM\n+} GADExpressionType;\n+\n+/* arrow::dataset::Expression */\n+\n+#define GAD_TYPE_EXPRESSION (gad_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADExpression,\n+                         gad_expression,\n+                         GAD,\n+                         EXPRESSION,\n+                         GObject)\n+struct _GADExpressionClass\n+{\n+  GObjectClass parent_class;\n+};\n+\n+gboolean\n+gad_expression_equal(GADExpression *expression,\n+                     GADExpression *other_expression);\n+\n+/* TODO: GArrowScalar */\n+gboolean\n+gad_expression_equal_scalar(GADExpression *expression,\n+                            GArrowScalar *other_scalar);\n+\n+gboolean\n+gad_expression_is_null(GADExpression *expression);\n+\n+GArrowDataType *\n+gad_expression_validate(GADExpression *expression,\n+                        GArrowSchema *schema,\n+                        GError **error);\n+\n+GADExpression *\n+gad_expression_assume(GADExpression *expression);\n+\n+gchar *\n+gad_expression_to_string(GADExpression *expression);\n+\n+GADExpressionType\n+gad_expression_get_type(GADExpression *expression);\n+\n+GADExpression *\n+gad_expression_copy(GADExpression *expression);\n+\n+GADInExpression *\n+gad_expression_in(GADExpression *expression,\n+                  GArrowArray *set);\n+\n+GADCastExpression *\n+gad_expression_cast_to(GADExpression *expression,\n+                       GArrowDataType *type,\n+                       GArrowCastOptions *options);\n+\n+GADCastExpression *\n+gad_expression_cast_like(GADExpression *expression,\n+                         GArrowCastOptions *options);\n+\n+/* arrow::dataset::UnaryExpression */\n+\n+#define GAD_TYPE_UNARY_EXPRESSION (gad_unary_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADUnaryExpression,\n+                         gad_unary_expression,\n+                         GAD,\n+                         UNARY_EXPRESSION,\n+                         GADExpression)\n+struct _GADUnaryExpressionClass\n+{\n+  GADExpressionClass parent_class;\n+};\n+\n+GADExpression *\n+gad_unary_expression_get_operand(GADUnaryExpression *expression);\n+\n+/* arrow::dataset::BinaryExpression */\n+\n+#define GAD_TYPE_BINARY_EXPRESSION (gad_binary_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADBinaryExpression,\n+                         gad_binary_expression,\n+                         GAD,\n+                         BINARY_EXPRESSION,\n+                         GADExpression)\n+struct _GADBinaryExpressionClass\n+{\n+  GADExpressionClass parent_class;\n+};\n+\n+GADExpression *\n+gad_binary_expression_get_left_operand(GADBinaryExpression *expression);\n+\n+GADExpression *\n+gad_binary_expression_get_right_operand(GADBinaryExpression *expression);\n+\n+/* arrow::dataset::ComparisonExpression */\n+\n+#define GAD_TYPE_COMPARISON_EXPRESSION (gad_comparison_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADComparisonExpression,\n+                         gad_comparison_expression,\n+                         GAD,\n+                         COMPARISON_EXPRESSION,\n+                         GADBinaryExpression)\n+struct _GADComparisonExpressionClass\n+{\n+  GADBinaryExpressionClass parent_class;\n+};\n+\n+GArrowCompareOperator\n+gad_comparison_expression_get_operator(GADComparisonExpression *expression);\n+\n+/* arrow::dataset::AndExpression */\n+\n+#define GAD_TYPE_AND_EXPRESSION (gad_and_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADAndExpression,\n+                         gad_and_expression,\n+                         GAD,\n+                         AND_EXPRESSION,\n+                         GADBinaryExpression)\n+struct _GADAndExpressionClass\n+{\n+  GADBinaryExpressionClass parent_class;\n+};\n+\n+GADAndExpression *\n+gad_and_expression_new(GADExpression *left_operand,\n+                       GADExpression *right_operand);\n+\n+/* arrow::dataset::OrExpression */\n+\n+#define GAD_TYPE_OR_EXPRESSION (gad_or_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADOrExpression,\n+                         gad_or_expression,\n+                         GAD,\n+                         OR_EXPRESSION,\n+                         GADBinaryExpression)\n+struct _GADOrExpressionClass\n+{\n+  GADBinaryExpressionClass parent_class;\n+};\n+\n+GADOrExpression *\n+gad_or_expression_new(GADExpression *left_operand,\n+                      GADExpression *right_operand);\n+\n+/* arrow::dataset::NotExpression */\n+\n+#define GAD_TYPE_NOT_EXPRESSION (gad_not_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADNotExpression,\n+                         gad_not_expression,\n+                         GAD,\n+                         NOT_EXPRESSION,\n+                         GADUnaryExpression)\n+struct _GADNotExpressionClass\n+{\n+  GADUnaryExpressionClass parent_class;\n+};\n+\n+GADNotExpression *\n+gad_not_expression_new(GADExpression *operand);\n+\n+/* arrow::dataset::IsValidExpression */\n+\n+#define GAD_TYPE_IS_VALID_EXPRESSION (gad_is_valid_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADIsValidExpression,\n+                         gad_is_valid_expression,\n+                         GAD,\n+                         IS_VALID_EXPRESSION,\n+                         GADUnaryExpression)\n+struct _GADIsValidExpressionClass\n+{\n+  GADUnaryExpressionClass parent_class;\n+};\n+\n+GADIsValidExpression *\n+gad_is_valid_expression_new(GADExpression *operand);\n+\n+/* arrow::dataset::InExpression */\n+\n+#define GAD_TYPE_IN_EXPRESSION (gad_in_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADInExpression,\n+                         gad_in_expression,\n+                         GAD,\n+                         IN_EXPRESSION,\n+                         GADUnaryExpression)\n+struct _GADInExpressionClass\n+{\n+  GADUnaryExpressionClass parent_class;\n+};\n+\n+GADInExpression *\n+gad_in_expression_new(GADExpression *operand,\n+                      GArrowArray *set);\n+\n+GArrowArray *\n+gad_in_expression_get_set(GADInExpression *expression);\n+\n+/* arrow::dataset::CastExpression */\n+\n+#define GAD_TYPE_CAST_EXPRESSION (gad_cast_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADCastExpression,\n+                         gad_cast_expression,\n+                         GAD,\n+                         CAST_EXPRESSION,\n+                         GADUnaryExpression)\n+struct _GADCastExpressionClass\n+{\n+  GADUnaryExpressionClass parent_class;\n+};\n+\n+GADCastExpression *\n+gad_cast_to_expression_new(GADExpression *operand,\n+                           GArrowDataType *type,\n+                           GArrowCastOptions *options);\n+\n+GADCastExpression *\n+gad_cast_like_expression_new(GADExpression *operand,\n+                             GADExpression *like,\n+                             GArrowCastOptions *options);\n+\n+GArrowCastOptions *\n+gad_cast_expression_get_options(GADCastExpression *expression);\n+\n+/* arrow::dataset::ScalarExpression */\n+\n+#define GAD_TYPE_EXPRESSION (gad_scalar_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADScalarExpression,\n+                         gad_scalar_expression,\n+                         GAD,\n+                         SCALAR_EXPRESSION,\n+                         GADExpression)\n+struct _GADScalarExpressionClass\n+{\n+  GADExpressionClass parent_class;\n+};\n+\n+/* TODO: GArrowScalar */\n+GADScalarExpression *\n+gad_scalar_expression_new(GArrowScalar *value);\n+\n+GArrowScalar *\n+gad_scalar_expression_get_value(GADScalarExpression *expression);\n+\n+/* arrow::dataset::FieldExpression */\n+\n+#define GAD_TYPE_FIELD_EXPRESSION (gad_field_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADFieldExpression,\n+                         gad_field_expression,\n+                         GAD,\n+                         FIELD_EXPRESSION,\n+                         GADExpression)\n+struct _GADFieldExpressionClass\n+{\n+  GADExpressionClass parent_class;\n+};\n+\n+GADFieldExpression *\n+gad_field_expression_new(const gchar *name);\n+\n+gchar *\n+gad_field_expression_get_name(GADFieldExpression *expression);\n+\n+/* arrow::dataset::CustomExpression */\n+\n+#define GAD_TYPE_CUSTOM_EXPRESSION (gad_custom_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADCustomExpression,\n+                         gad_custom_expression,\n+                         GAD,\n+                         CUSTOM_EXPRESSION,\n+                         GADExpression)\n+struct _GADCustomExpressionClass\n+{\n+  GADExpressionClass parent_class;\n+};\n+\n+/* arrow::dataset::ExpressionEvaluator */\n+\n+#define GAD_TYPE_EXPRESSION_EVALUATOR (gad_expression_evaluator_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADExpressionEvaluator,\n+                         gad_expression_evaluator,\n+                         GAD,\n+                         EXPRESSION_EVALUATOR,\n+                         GObject)\n+struct _GAExpressionEvaluatorClass\n+{\n+  GObjectClass parent_class;\n+};\n+\n+/* TODO: ArrowDatum */\n \n Review comment:\n   @mrkn @kou The type an Expression will evaluate to can be derived using `Result<shared_ptr<DataType>> Expression::Validate(const Schema&)`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-24T12:48:37.223+0000",
                    "updated": "2020-03-24T12:48:37.223+0000",
                    "started": "2020-03-24T12:48:37.223+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "408724",
                    "issueId": "13273848"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13273848/worklog/408725",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6578: ARROW-7371: WIP: [GLib] Add GLib binding of Dataset\nURL: https://github.com/apache/arrow/pull/6578#discussion_r397128454\n \n \n\n ##########\n File path: c_glib/arrow-dataset-glib/filter.h\n ##########\n @@ -0,0 +1,387 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+G_BEGIN_DECLS\n+\n+struct GADInExpression;\n+struct GADCastExpression;\n+\n+/* arrow::dataset::ExpressionType */\n+\n+/**\n+ * GADExpressionType\n+ * @GAD_EXPRESSION_TYPE_FIELD:\n+ *   A reference to a column within a record batch,\n+ *   will evaluate to an array\n+ * @GAD_EXPRESSION_TYPE_SCALAR:\n+ *   A literal singular value encapsulated in a Scalar\n+ * @GAD_EXPRESSION_TYPE_NOT:\n+ *   An inversion of another expression\n+ * @GAD_EXPRESSION_TYPE_CAST:\n+ *   Cast an expression to a given DataType\n+ * @GAD_EXPRESSION_TYPE_AND:\n+ *   A conjunction of multiple expressions (true if all operands are true)\n+ * @GAD_EXPRESSION_TYPE_OR:\n+ *   A disjunction of multiple expressions (true if any operand is true)\n+ * @GAD_EXPRESSION_TYPE_COMPARISON:\n+ *   A comparison of two other expressions\n+ * @GAD_EXPRESSION_TYPE_IS_VALID:\n+ *   Extract validity as a boolean expression\n+ * @GAD_EXPRESSION_TYPE_IN:\n+ *   Check each element for membership in a set\n+ * @GAD_EXPRESSION_TYPE_CUSTOM:\n+ *   Custom user defined expression\n+ */\n+typedef enum {\n+  GAD_EXPRESSION_TYPE_FIELD,\n+  GAD_EXPRESSION_TYPE_SCALAR,\n+  GAD_EXPRESSION_TYPE_NOT,\n+  GAD_EXPRESSION_TYPE_CAST,\n+  GAD_EXPRESSION_TYPE_AND,\n+  GAD_EXPRESSION_TYPE_OR,\n+  GAD_EXPRESSION_TYPE_COMPARISON,\n+  GAD_EXPRESSION_TYPE_IS_VALID,\n+  GAD_EXPRESSION_TYPE_IN,\n+  GAD_EXPRESSION_TYPE_CUSTOM\n+} GADExpressionType;\n+\n+/* arrow::dataset::Expression */\n+\n+#define GAD_TYPE_EXPRESSION (gad_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADExpression,\n+                         gad_expression,\n+                         GAD,\n+                         EXPRESSION,\n+                         GObject)\n+struct _GADExpressionClass\n+{\n+  GObjectClass parent_class;\n+};\n+\n+gboolean\n+gad_expression_equal(GADExpression *expression,\n+                     GADExpression *other_expression);\n+\n+/* TODO: GArrowScalar */\n+gboolean\n+gad_expression_equal_scalar(GADExpression *expression,\n+                            GArrowScalar *other_scalar);\n+\n+gboolean\n+gad_expression_is_null(GADExpression *expression);\n+\n+GArrowDataType *\n+gad_expression_validate(GADExpression *expression,\n+                        GArrowSchema *schema,\n+                        GError **error);\n+\n+GADExpression *\n+gad_expression_assume(GADExpression *expression);\n+\n+gchar *\n+gad_expression_to_string(GADExpression *expression);\n+\n+GADExpressionType\n+gad_expression_get_type(GADExpression *expression);\n+\n+GADExpression *\n+gad_expression_copy(GADExpression *expression);\n+\n+GADInExpression *\n+gad_expression_in(GADExpression *expression,\n+                  GArrowArray *set);\n+\n+GADCastExpression *\n+gad_expression_cast_to(GADExpression *expression,\n+                       GArrowDataType *type,\n+                       GArrowCastOptions *options);\n+\n+GADCastExpression *\n+gad_expression_cast_like(GADExpression *expression,\n+                         GArrowCastOptions *options);\n+\n+/* arrow::dataset::UnaryExpression */\n+\n+#define GAD_TYPE_UNARY_EXPRESSION (gad_unary_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADUnaryExpression,\n+                         gad_unary_expression,\n+                         GAD,\n+                         UNARY_EXPRESSION,\n+                         GADExpression)\n+struct _GADUnaryExpressionClass\n+{\n+  GADExpressionClass parent_class;\n+};\n+\n+GADExpression *\n+gad_unary_expression_get_operand(GADUnaryExpression *expression);\n+\n+/* arrow::dataset::BinaryExpression */\n+\n+#define GAD_TYPE_BINARY_EXPRESSION (gad_binary_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADBinaryExpression,\n+                         gad_binary_expression,\n+                         GAD,\n+                         BINARY_EXPRESSION,\n+                         GADExpression)\n+struct _GADBinaryExpressionClass\n+{\n+  GADExpressionClass parent_class;\n+};\n+\n+GADExpression *\n+gad_binary_expression_get_left_operand(GADBinaryExpression *expression);\n+\n+GADExpression *\n+gad_binary_expression_get_right_operand(GADBinaryExpression *expression);\n+\n+/* arrow::dataset::ComparisonExpression */\n+\n+#define GAD_TYPE_COMPARISON_EXPRESSION (gad_comparison_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADComparisonExpression,\n+                         gad_comparison_expression,\n+                         GAD,\n+                         COMPARISON_EXPRESSION,\n+                         GADBinaryExpression)\n+struct _GADComparisonExpressionClass\n+{\n+  GADBinaryExpressionClass parent_class;\n+};\n+\n+GArrowCompareOperator\n+gad_comparison_expression_get_operator(GADComparisonExpression *expression);\n+\n+/* arrow::dataset::AndExpression */\n+\n+#define GAD_TYPE_AND_EXPRESSION (gad_and_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADAndExpression,\n+                         gad_and_expression,\n+                         GAD,\n+                         AND_EXPRESSION,\n+                         GADBinaryExpression)\n+struct _GADAndExpressionClass\n+{\n+  GADBinaryExpressionClass parent_class;\n+};\n+\n+GADAndExpression *\n+gad_and_expression_new(GADExpression *left_operand,\n+                       GADExpression *right_operand);\n+\n+/* arrow::dataset::OrExpression */\n+\n+#define GAD_TYPE_OR_EXPRESSION (gad_or_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADOrExpression,\n+                         gad_or_expression,\n+                         GAD,\n+                         OR_EXPRESSION,\n+                         GADBinaryExpression)\n+struct _GADOrExpressionClass\n+{\n+  GADBinaryExpressionClass parent_class;\n+};\n+\n+GADOrExpression *\n+gad_or_expression_new(GADExpression *left_operand,\n+                      GADExpression *right_operand);\n+\n+/* arrow::dataset::NotExpression */\n+\n+#define GAD_TYPE_NOT_EXPRESSION (gad_not_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADNotExpression,\n+                         gad_not_expression,\n+                         GAD,\n+                         NOT_EXPRESSION,\n+                         GADUnaryExpression)\n+struct _GADNotExpressionClass\n+{\n+  GADUnaryExpressionClass parent_class;\n+};\n+\n+GADNotExpression *\n+gad_not_expression_new(GADExpression *operand);\n+\n+/* arrow::dataset::IsValidExpression */\n+\n+#define GAD_TYPE_IS_VALID_EXPRESSION (gad_is_valid_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADIsValidExpression,\n+                         gad_is_valid_expression,\n+                         GAD,\n+                         IS_VALID_EXPRESSION,\n+                         GADUnaryExpression)\n+struct _GADIsValidExpressionClass\n+{\n+  GADUnaryExpressionClass parent_class;\n+};\n+\n+GADIsValidExpression *\n+gad_is_valid_expression_new(GADExpression *operand);\n+\n+/* arrow::dataset::InExpression */\n+\n+#define GAD_TYPE_IN_EXPRESSION (gad_in_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADInExpression,\n+                         gad_in_expression,\n+                         GAD,\n+                         IN_EXPRESSION,\n+                         GADUnaryExpression)\n+struct _GADInExpressionClass\n+{\n+  GADUnaryExpressionClass parent_class;\n+};\n+\n+GADInExpression *\n+gad_in_expression_new(GADExpression *operand,\n+                      GArrowArray *set);\n+\n+GArrowArray *\n+gad_in_expression_get_set(GADInExpression *expression);\n+\n+/* arrow::dataset::CastExpression */\n+\n+#define GAD_TYPE_CAST_EXPRESSION (gad_cast_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADCastExpression,\n+                         gad_cast_expression,\n+                         GAD,\n+                         CAST_EXPRESSION,\n+                         GADUnaryExpression)\n+struct _GADCastExpressionClass\n+{\n+  GADUnaryExpressionClass parent_class;\n+};\n+\n+GADCastExpression *\n+gad_cast_to_expression_new(GADExpression *operand,\n+                           GArrowDataType *type,\n+                           GArrowCastOptions *options);\n+\n+GADCastExpression *\n+gad_cast_like_expression_new(GADExpression *operand,\n+                             GADExpression *like,\n+                             GArrowCastOptions *options);\n+\n+GArrowCastOptions *\n+gad_cast_expression_get_options(GADCastExpression *expression);\n+\n+/* arrow::dataset::ScalarExpression */\n+\n+#define GAD_TYPE_EXPRESSION (gad_scalar_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADScalarExpression,\n+                         gad_scalar_expression,\n+                         GAD,\n+                         SCALAR_EXPRESSION,\n+                         GADExpression)\n+struct _GADScalarExpressionClass\n+{\n+  GADExpressionClass parent_class;\n+};\n+\n+/* TODO: GArrowScalar */\n+GADScalarExpression *\n+gad_scalar_expression_new(GArrowScalar *value);\n+\n+GArrowScalar *\n+gad_scalar_expression_get_value(GADScalarExpression *expression);\n+\n+/* arrow::dataset::FieldExpression */\n+\n+#define GAD_TYPE_FIELD_EXPRESSION (gad_field_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADFieldExpression,\n+                         gad_field_expression,\n+                         GAD,\n+                         FIELD_EXPRESSION,\n+                         GADExpression)\n+struct _GADFieldExpressionClass\n+{\n+  GADExpressionClass parent_class;\n+};\n+\n+GADFieldExpression *\n+gad_field_expression_new(const gchar *name);\n+\n+gchar *\n+gad_field_expression_get_name(GADFieldExpression *expression);\n+\n+/* arrow::dataset::CustomExpression */\n+\n+#define GAD_TYPE_CUSTOM_EXPRESSION (gad_custom_expression_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADCustomExpression,\n+                         gad_custom_expression,\n+                         GAD,\n+                         CUSTOM_EXPRESSION,\n+                         GADExpression)\n+struct _GADCustomExpressionClass\n+{\n+  GADExpressionClass parent_class;\n+};\n+\n+/* arrow::dataset::ExpressionEvaluator */\n+\n+#define GAD_TYPE_EXPRESSION_EVALUATOR (gad_expression_evaluator_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GADExpressionEvaluator,\n+                         gad_expression_evaluator,\n+                         GAD,\n+                         EXPRESSION_EVALUATOR,\n+                         GObject)\n+struct _GAExpressionEvaluatorClass\n+{\n+  GObjectClass parent_class;\n+};\n+\n+/* TODO: ArrowDatum */\n \n Review comment:\n   You'll still need to handle scalar (in addition to array) evaluations. If it would help I can reopen https://issues.apache.org/jira/browse/ARROW-7151 after 0.17 is completed so that you always get an array\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-24T12:53:15.209+0000",
                    "updated": "2020-03-24T12:53:15.209+0000",
                    "started": "2020-03-24T12:53:15.208+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "408725",
                    "issueId": "13273848"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 20400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@61afc895[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@643ae5df[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24a8be45[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@178fa312[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@59c6cda1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3d666b8[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@626dba11[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@810127d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@67546d1b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@578724ef[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5835a13c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@50bed3bd[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 20400,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Jun 06 08:50:28 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-06-06T08:50:28.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7371/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-12-11T11:02:58.000+0000",
        "updated": "2020-06-06T08:50:28.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 20400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Add Datasets binding",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13273848/comment/17127289",
                    "id": "17127289",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 6578\n[https://github.com/apache/arrow/pull/6578]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2020-06-06T08:50:28.813+0000",
                    "updated": "2020-06-06T08:50:28.813+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z09k7c:",
        "customfield_12314139": null
    }
}