{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13426730",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730",
    "key": "ARROW-15590",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "substrait"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
            "name": "vibhatha",
            "key": "vibhatha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Vibhatha Lakmal Abeykoon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15590/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 29,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/worklog/767037",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha opened a new pull request, #13078:\nURL: https://github.com/apache/arrow/pull/13078\n\n   Initial Version of Substrait Join Support\r\n   \r\n   This PR doesn't support the complete join functionality, but it include the following features. \r\n   This will be a followed by a set of PRs to solve the remaining features [1].\r\n   \r\n   Features included\r\n   \r\n   - [X] Only Support Inner Join (A follow up PR would include the support for other join types)\r\n   - [X] Support Join operations with a single call-expression of types \"equal\" and \"is_not_distinct_from\"\r\n   - [X] Test cases to check the basic functionality and limitations\r\n   \r\n   [1]. https://issues.apache.org/jira/browse/ARROW-16485 \n\n\n",
                    "created": "2022-05-06T06:38:02.596+0000",
                    "updated": "2022-05-06T06:38:02.596+0000",
                    "started": "2022-05-06T06:38:02.596+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "767037",
                    "issueId": "13426730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/worklog/767038",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13078:\nURL: https://github.com/apache/arrow/pull/13078#issuecomment-1119304612\n\n   https://issues.apache.org/jira/browse/ARROW-15590\n\n\n",
                    "created": "2022-05-06T06:38:21.576+0000",
                    "updated": "2022-05-06T06:38:21.576+0000",
                    "started": "2022-05-06T06:38:21.575+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "767038",
                    "issueId": "13426730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/worklog/767039",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13078:\nURL: https://github.com/apache/arrow/pull/13078#issuecomment-1119304630\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-05-06T06:38:23.426+0000",
                    "updated": "2022-05-06T06:38:23.426+0000",
                    "started": "2022-05-06T06:38:23.425+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "767039",
                    "issueId": "13426730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/worklog/767040",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on PR #13078:\nURL: https://github.com/apache/arrow/pull/13078#issuecomment-1119304966\n\n   @westonpace adding an initial version of the PR. Please take a look.\n\n\n",
                    "created": "2022-05-06T06:38:57.898+0000",
                    "updated": "2022-05-06T06:38:57.898+0000",
                    "started": "2022-05-06T06:38:57.898+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "767040",
                    "issueId": "13426730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/worklog/768557",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on PR #13078:\nURL: https://github.com/apache/arrow/pull/13078#issuecomment-1122545151\n\n   @westonpace not sure why `appveyor` CI is failing...\n\n\n",
                    "created": "2022-05-10T15:28:07.865+0000",
                    "updated": "2022-05-10T15:28:07.865+0000",
                    "started": "2022-05-10T15:28:07.865+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "768557",
                    "issueId": "13426730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/worklog/769450",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13078:\nURL: https://github.com/apache/arrow/pull/13078#discussion_r871038360\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -750,5 +750,309 @@ TEST(Substrait, ExtensionSetFromPlanMissingFunc) {\n           &ext_set));\n }\n \n+TEST(Substrait, JoinPlanBasic) {\n\nReview Comment:\n   These plans are very verbose.  I can't think of any good trick to shorten it but I worry a little about how much raw substrait json we are going to have in all our unit tests and that becoming a maintenance burden.  Any ideas?\n\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -188,6 +188,79 @@ Result<compute::Declaration> FromProto(const substrait::Rel& rel,\n       });\n     }\n \n+    case substrait::Rel::RelTypeCase::kJoin: {\n+      const auto& join = rel.join();\n+      RETURN_NOT_OK(CheckRelCommon(join));\n+\n+      if (!join.has_left()) {\n+        return Status::Invalid(\"substrait::JoinRel with no left relation\");\n+      }\n+\n+      if (!join.has_right()) {\n+        return Status::Invalid(\"substrait::JoinRel with no right relation\");\n+      }\n+\n+      compute::JoinType join_type;\n+      switch (join.type()) {\n+        case 0:\n+          return Status::NotImplemented(\"Unspecified join type is not supported\");\n+        case 1:\n+          join_type = compute::JoinType::INNER;\n+          break;\n+        case 2:\n+          return Status::NotImplemented(\"Outer join type is not supported\");\n+        case 3:\n+          return Status::NotImplemented(\"Left join type is not supported\");\n+        case 4:\n+          return Status::NotImplemented(\"Right join type is not supported\");\n+        case 5:\n+          return Status::NotImplemented(\"Semi join type is not supported\");\n+        case 6:\n+          return Status::NotImplemented(\"Anti join type is not supported\");\n+        default:\n+          return Status::Invalid(\"Unsupported join type\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto left, FromProto(join.left(), ext_set));\n+      ARROW_ASSIGN_OR_RAISE(auto right, FromProto(join.right(), ext_set));\n+\n+      if (!join.has_expression()) {\n+        return Status::Invalid(\"substrait::JoinRel with no expression\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto expression, FromProto(join.expression(), ext_set));\n+\n+      const auto& callptr = expression.call();\n+      if (!callptr) {\n+        return Status::Invalid(\n+            \"Only support call expressions as the join key comparison.\");\n+      }\n+\n+      compute::JoinKeyCmp join_key_cmp;\n+      if (callptr->function_name == \"equal\") {\n+        join_key_cmp = compute::JoinKeyCmp::EQ;\n+      } else if (callptr->function_name == \"is_not_distinct_from\") {\n+        join_key_cmp = compute::JoinKeyCmp::IS;\n+      } else {\n+        return Status::Invalid(\n+            \"Only Support `equal` or `is_not_distinct_from` for join key comparison\");\n+      }\n+\n+      // TODO: Add Suffix support for Substrait\n+      compute::HashJoinNodeOptions join_options{\n+          join_type,\n+          {std::move(*callptr->arguments[0].field_ref())},\n+          {std::move(*callptr->arguments[1].field_ref())},\n+          {join_key_cmp},\n+          arrow::compute::literal(true),\n+          \"_l\",\n+          \"_r\"};\n\nReview Comment:\n   These defaults should ideally be in the constructor and not specified here.\n\n\n\n##########\ncpp/src/arrow/compute/exec/options.h:\n##########\n@@ -294,6 +294,20 @@ class ARROW_EXPORT HashJoinNodeOptions : public ExecNodeOptions {\n       this->key_cmp[i] = JoinKeyCmp::EQ;\n     }\n   }\n+  HashJoinNodeOptions(\n\nReview Comment:\n   Rather than keep adding constructors for `HashJoinNodeOptions` can we make a constructor that takes no arguments (or the minimum number of required arguments?  Maybe just `left_keys` and `right_keys` and assigns reasonable defaults).  Then we can just override the settings after construction.  For example:\r\n   \r\n   ```\r\n   HashJoinNodeOptions opts{left_keys, right_keys};\r\n   opts.join_type = join_type_from_substrait;\r\n   ...\r\n   ```\n\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -188,6 +188,79 @@ Result<compute::Declaration> FromProto(const substrait::Rel& rel,\n       });\n     }\n \n+    case substrait::Rel::RelTypeCase::kJoin: {\n+      const auto& join = rel.join();\n+      RETURN_NOT_OK(CheckRelCommon(join));\n+\n+      if (!join.has_left()) {\n+        return Status::Invalid(\"substrait::JoinRel with no left relation\");\n+      }\n+\n+      if (!join.has_right()) {\n+        return Status::Invalid(\"substrait::JoinRel with no right relation\");\n+      }\n+\n+      compute::JoinType join_type;\n+      switch (join.type()) {\n+        case 0:\n+          return Status::NotImplemented(\"Unspecified join type is not supported\");\n+        case 1:\n+          join_type = compute::JoinType::INNER;\n+          break;\n+        case 2:\n+          return Status::NotImplemented(\"Outer join type is not supported\");\n+        case 3:\n+          return Status::NotImplemented(\"Left join type is not supported\");\n+        case 4:\n+          return Status::NotImplemented(\"Right join type is not supported\");\n+        case 5:\n+          return Status::NotImplemented(\"Semi join type is not supported\");\n+        case 6:\n+          return Status::NotImplemented(\"Anti join type is not supported\");\n+        default:\n+          return Status::Invalid(\"Unsupported join type\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto left, FromProto(join.left(), ext_set));\n+      ARROW_ASSIGN_OR_RAISE(auto right, FromProto(join.right(), ext_set));\n+\n+      if (!join.has_expression()) {\n+        return Status::Invalid(\"substrait::JoinRel with no expression\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto expression, FromProto(join.expression(), ext_set));\n+\n+      const auto& callptr = expression.call();\n\nReview Comment:\n   Is this a pointer?  If so I think we can use `const auto*` (but I may be wrong on this)\n\n\n\n",
                    "created": "2022-05-12T07:34:09.357+0000",
                    "updated": "2022-05-12T07:34:09.357+0000",
                    "started": "2022-05-12T07:34:09.357+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "769450",
                    "issueId": "13426730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/worklog/769454",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on PR #13078:\nURL: https://github.com/apache/arrow/pull/13078#issuecomment-1124642563\n\n   > This looks like a good start for join support. I wonder how we might start building up some end-to-end tests that use Substrait. Any ideas?\r\n   \r\n   I had this in my mind. The neatest/fastest way is to use Substrait-Python integration. Or we need to write a data module in the C++ test suite to provide end-to-end testing. I used existing datasets from the Parquet test data submodule. \r\n   But Python may not have everything exposed, may be we can write one here. \r\n   \r\n   I see most of the test cases in Substrait features are not end-to-end tests. May be we can start from now. WDYT?\r\n   \n\n\n",
                    "created": "2022-05-12T07:43:17.282+0000",
                    "updated": "2022-05-12T07:43:17.282+0000",
                    "started": "2022-05-12T07:43:17.282+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "769454",
                    "issueId": "13426730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/worklog/769457",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13078:\nURL: https://github.com/apache/arrow/pull/13078#discussion_r871053424\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -750,5 +750,309 @@ TEST(Substrait, ExtensionSetFromPlanMissingFunc) {\n           &ext_set));\n }\n \n+TEST(Substrait, JoinPlanBasic) {\n\nReview Comment:\n   Yes, I completely agree with you. One thing we can do is, putting them in a Submodule like the datasets and use it when it is required. But I am not sure how good that option would be. It will again add the same burden of keeping that in the memory (too big), but avoid us keeping the text in the Arrow repo itself. \r\n   \r\n   Is this feasible? \n\n\n\n",
                    "created": "2022-05-12T07:45:35.948+0000",
                    "updated": "2022-05-12T07:45:35.948+0000",
                    "started": "2022-05-12T07:45:35.947+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "769457",
                    "issueId": "13426730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/worklog/769459",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13078:\nURL: https://github.com/apache/arrow/pull/13078#discussion_r871054214\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -188,6 +188,79 @@ Result<compute::Declaration> FromProto(const substrait::Rel& rel,\n       });\n     }\n \n+    case substrait::Rel::RelTypeCase::kJoin: {\n+      const auto& join = rel.join();\n+      RETURN_NOT_OK(CheckRelCommon(join));\n+\n+      if (!join.has_left()) {\n+        return Status::Invalid(\"substrait::JoinRel with no left relation\");\n+      }\n+\n+      if (!join.has_right()) {\n+        return Status::Invalid(\"substrait::JoinRel with no right relation\");\n+      }\n+\n+      compute::JoinType join_type;\n+      switch (join.type()) {\n+        case 0:\n+          return Status::NotImplemented(\"Unspecified join type is not supported\");\n+        case 1:\n+          join_type = compute::JoinType::INNER;\n+          break;\n+        case 2:\n+          return Status::NotImplemented(\"Outer join type is not supported\");\n+        case 3:\n+          return Status::NotImplemented(\"Left join type is not supported\");\n+        case 4:\n+          return Status::NotImplemented(\"Right join type is not supported\");\n+        case 5:\n+          return Status::NotImplemented(\"Semi join type is not supported\");\n+        case 6:\n+          return Status::NotImplemented(\"Anti join type is not supported\");\n+        default:\n+          return Status::Invalid(\"Unsupported join type\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto left, FromProto(join.left(), ext_set));\n+      ARROW_ASSIGN_OR_RAISE(auto right, FromProto(join.right(), ext_set));\n+\n+      if (!join.has_expression()) {\n+        return Status::Invalid(\"substrait::JoinRel with no expression\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto expression, FromProto(join.expression(), ext_set));\n+\n+      const auto& callptr = expression.call();\n+      if (!callptr) {\n+        return Status::Invalid(\n+            \"Only support call expressions as the join key comparison.\");\n+      }\n+\n+      compute::JoinKeyCmp join_key_cmp;\n+      if (callptr->function_name == \"equal\") {\n+        join_key_cmp = compute::JoinKeyCmp::EQ;\n+      } else if (callptr->function_name == \"is_not_distinct_from\") {\n+        join_key_cmp = compute::JoinKeyCmp::IS;\n+      } else {\n+        return Status::Invalid(\n+            \"Only Support `equal` or `is_not_distinct_from` for join key comparison\");\n+      }\n+\n+      // TODO: Add Suffix support for Substrait\n+      compute::HashJoinNodeOptions join_options{\n+          join_type,\n+          {std::move(*callptr->arguments[0].field_ref())},\n+          {std::move(*callptr->arguments[1].field_ref())},\n+          {join_key_cmp},\n+          arrow::compute::literal(true),\n+          \"_l\",\n+          \"_r\"};\n\nReview Comment:\n   Ah, should we do a patch PR for this for join options?\n\n\n\n",
                    "created": "2022-05-12T07:46:25.851+0000",
                    "updated": "2022-05-12T07:46:25.851+0000",
                    "started": "2022-05-12T07:46:25.851+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "769459",
                    "issueId": "13426730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/worklog/769460",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13078:\nURL: https://github.com/apache/arrow/pull/13078#discussion_r871056964\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -188,6 +188,79 @@ Result<compute::Declaration> FromProto(const substrait::Rel& rel,\n       });\n     }\n \n+    case substrait::Rel::RelTypeCase::kJoin: {\n+      const auto& join = rel.join();\n+      RETURN_NOT_OK(CheckRelCommon(join));\n+\n+      if (!join.has_left()) {\n+        return Status::Invalid(\"substrait::JoinRel with no left relation\");\n+      }\n+\n+      if (!join.has_right()) {\n+        return Status::Invalid(\"substrait::JoinRel with no right relation\");\n+      }\n+\n+      compute::JoinType join_type;\n+      switch (join.type()) {\n+        case 0:\n+          return Status::NotImplemented(\"Unspecified join type is not supported\");\n+        case 1:\n+          join_type = compute::JoinType::INNER;\n+          break;\n+        case 2:\n+          return Status::NotImplemented(\"Outer join type is not supported\");\n+        case 3:\n+          return Status::NotImplemented(\"Left join type is not supported\");\n+        case 4:\n+          return Status::NotImplemented(\"Right join type is not supported\");\n+        case 5:\n+          return Status::NotImplemented(\"Semi join type is not supported\");\n+        case 6:\n+          return Status::NotImplemented(\"Anti join type is not supported\");\n+        default:\n+          return Status::Invalid(\"Unsupported join type\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto left, FromProto(join.left(), ext_set));\n+      ARROW_ASSIGN_OR_RAISE(auto right, FromProto(join.right(), ext_set));\n+\n+      if (!join.has_expression()) {\n+        return Status::Invalid(\"substrait::JoinRel with no expression\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto expression, FromProto(join.expression(), ext_set));\n+\n+      const auto& callptr = expression.call();\n\nReview Comment:\n   This is how we arrive at this >> \r\n   \r\n   `const Call* call() const;` \r\n   \r\n   I see your point. But with `auto`, the existing usage in the code base is like this\r\n   \r\n   ```c++\r\n   auto call = expr.call();\r\n   ```\r\n   \r\n   I might have overworked this :/ WDYT?\n\n\n\n",
                    "created": "2022-05-12T07:49:21.174+0000",
                    "updated": "2022-05-12T07:49:21.174+0000",
                    "started": "2022-05-12T07:49:21.173+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "769460",
                    "issueId": "13426730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/worklog/769944",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13078:\nURL: https://github.com/apache/arrow/pull/13078#discussion_r871866656\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -750,5 +750,309 @@ TEST(Substrait, ExtensionSetFromPlanMissingFunc) {\n           &ext_set));\n }\n \n+TEST(Substrait, JoinPlanBasic) {\n\nReview Comment:\n   I'm not so much worried about where the text lives as I am worried about maintaining the text itself.  On the other hand, any approach I can think of for automatically generating the text devolves into creating Ibis/dplyr for C++ :laughing: \r\n   \r\n   Still, those tools exist for a reason, writing these things manually is cumbersome.\n\n\n\n",
                    "created": "2022-05-12T22:53:24.541+0000",
                    "updated": "2022-05-12T22:53:24.541+0000",
                    "started": "2022-05-12T22:53:24.540+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "769944",
                    "issueId": "13426730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/worklog/769946",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13078:\nURL: https://github.com/apache/arrow/pull/13078#discussion_r871867122\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -188,6 +188,79 @@ Result<compute::Declaration> FromProto(const substrait::Rel& rel,\n       });\n     }\n \n+    case substrait::Rel::RelTypeCase::kJoin: {\n+      const auto& join = rel.join();\n+      RETURN_NOT_OK(CheckRelCommon(join));\n+\n+      if (!join.has_left()) {\n+        return Status::Invalid(\"substrait::JoinRel with no left relation\");\n+      }\n+\n+      if (!join.has_right()) {\n+        return Status::Invalid(\"substrait::JoinRel with no right relation\");\n+      }\n+\n+      compute::JoinType join_type;\n+      switch (join.type()) {\n+        case 0:\n+          return Status::NotImplemented(\"Unspecified join type is not supported\");\n+        case 1:\n+          join_type = compute::JoinType::INNER;\n+          break;\n+        case 2:\n+          return Status::NotImplemented(\"Outer join type is not supported\");\n+        case 3:\n+          return Status::NotImplemented(\"Left join type is not supported\");\n+        case 4:\n+          return Status::NotImplemented(\"Right join type is not supported\");\n+        case 5:\n+          return Status::NotImplemented(\"Semi join type is not supported\");\n+        case 6:\n+          return Status::NotImplemented(\"Anti join type is not supported\");\n+        default:\n+          return Status::Invalid(\"Unsupported join type\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto left, FromProto(join.left(), ext_set));\n+      ARROW_ASSIGN_OR_RAISE(auto right, FromProto(join.right(), ext_set));\n+\n+      if (!join.has_expression()) {\n+        return Status::Invalid(\"substrait::JoinRel with no expression\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto expression, FromProto(join.expression(), ext_set));\n+\n+      const auto& callptr = expression.call();\n+      if (!callptr) {\n+        return Status::Invalid(\n+            \"Only support call expressions as the join key comparison.\");\n+      }\n+\n+      compute::JoinKeyCmp join_key_cmp;\n+      if (callptr->function_name == \"equal\") {\n+        join_key_cmp = compute::JoinKeyCmp::EQ;\n+      } else if (callptr->function_name == \"is_not_distinct_from\") {\n+        join_key_cmp = compute::JoinKeyCmp::IS;\n+      } else {\n+        return Status::Invalid(\n+            \"Only Support `equal` or `is_not_distinct_from` for join key comparison\");\n+      }\n+\n+      // TODO: Add Suffix support for Substrait\n+      compute::HashJoinNodeOptions join_options{\n+          join_type,\n+          {std::move(*callptr->arguments[0].field_ref())},\n+          {std::move(*callptr->arguments[1].field_ref())},\n+          {join_key_cmp},\n+          arrow::compute::literal(true),\n+          \"_l\",\n+          \"_r\"};\n\nReview Comment:\n   Maybe.  I think each options object should have one constructor which only takes the minimum set of options that are absolutely required and would have no sane default.\n\n\n\n",
                    "created": "2022-05-12T22:54:29.749+0000",
                    "updated": "2022-05-12T22:54:29.749+0000",
                    "started": "2022-05-12T22:54:29.748+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "769946",
                    "issueId": "13426730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/worklog/769948",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13078:\nURL: https://github.com/apache/arrow/pull/13078#discussion_r871868392\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -750,5 +750,309 @@ TEST(Substrait, ExtensionSetFromPlanMissingFunc) {\n           &ext_set));\n }\n \n+TEST(Substrait, JoinPlanBasic) {\n\nReview Comment:\n   Actually... @saulpw might be able to help us here with his JSOM stuff.  I'll ping him.\n\n\n\n",
                    "created": "2022-05-12T22:57:35.015+0000",
                    "updated": "2022-05-12T22:57:35.015+0000",
                    "started": "2022-05-12T22:57:35.015+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "769948",
                    "issueId": "13426730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/worklog/771122",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13078:\nURL: https://github.com/apache/arrow/pull/13078#discussion_r874299427\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -750,5 +750,309 @@ TEST(Substrait, ExtensionSetFromPlanMissingFunc) {\n           &ext_set));\n }\n \n+TEST(Substrait, JoinPlanBasic) {\n\nReview Comment:\n   @westonpace can we generate it, may be we can incoporate `isthmus` to generate it during the tests and we only write a SQL query. I don't know if that is feasible as there are slight differences between the things we digest right now. Just a thought \ud83d\ude00 \n\n\n\n",
                    "created": "2022-05-17T02:21:48.348+0000",
                    "updated": "2022-05-17T02:21:48.348+0000",
                    "started": "2022-05-17T02:21:48.348+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "771122",
                    "issueId": "13426730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/worklog/771123",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13078:\nURL: https://github.com/apache/arrow/pull/13078#discussion_r874299880\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -188,6 +188,79 @@ Result<compute::Declaration> FromProto(const substrait::Rel& rel,\n       });\n     }\n \n+    case substrait::Rel::RelTypeCase::kJoin: {\n+      const auto& join = rel.join();\n+      RETURN_NOT_OK(CheckRelCommon(join));\n+\n+      if (!join.has_left()) {\n+        return Status::Invalid(\"substrait::JoinRel with no left relation\");\n+      }\n+\n+      if (!join.has_right()) {\n+        return Status::Invalid(\"substrait::JoinRel with no right relation\");\n+      }\n+\n+      compute::JoinType join_type;\n+      switch (join.type()) {\n+        case 0:\n+          return Status::NotImplemented(\"Unspecified join type is not supported\");\n+        case 1:\n+          join_type = compute::JoinType::INNER;\n+          break;\n+        case 2:\n+          return Status::NotImplemented(\"Outer join type is not supported\");\n+        case 3:\n+          return Status::NotImplemented(\"Left join type is not supported\");\n+        case 4:\n+          return Status::NotImplemented(\"Right join type is not supported\");\n+        case 5:\n+          return Status::NotImplemented(\"Semi join type is not supported\");\n+        case 6:\n+          return Status::NotImplemented(\"Anti join type is not supported\");\n+        default:\n+          return Status::Invalid(\"Unsupported join type\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto left, FromProto(join.left(), ext_set));\n+      ARROW_ASSIGN_OR_RAISE(auto right, FromProto(join.right(), ext_set));\n+\n+      if (!join.has_expression()) {\n+        return Status::Invalid(\"substrait::JoinRel with no expression\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto expression, FromProto(join.expression(), ext_set));\n+\n+      const auto& callptr = expression.call();\n+      if (!callptr) {\n+        return Status::Invalid(\n+            \"Only support call expressions as the join key comparison.\");\n+      }\n+\n+      compute::JoinKeyCmp join_key_cmp;\n+      if (callptr->function_name == \"equal\") {\n+        join_key_cmp = compute::JoinKeyCmp::EQ;\n+      } else if (callptr->function_name == \"is_not_distinct_from\") {\n+        join_key_cmp = compute::JoinKeyCmp::IS;\n+      } else {\n+        return Status::Invalid(\n+            \"Only Support `equal` or `is_not_distinct_from` for join key comparison\");\n+      }\n+\n+      // TODO: Add Suffix support for Substrait\n+      compute::HashJoinNodeOptions join_options{\n+          join_type,\n+          {std::move(*callptr->arguments[0].field_ref())},\n+          {std::move(*callptr->arguments[1].field_ref())},\n+          {join_key_cmp},\n+          arrow::compute::literal(true),\n+          \"_l\",\n+          \"_r\"};\n\nReview Comment:\n   Should we create a JIRA for handling this for all options? But for this issue, I can probably add a constructor and fix it.\n\n\n\n",
                    "created": "2022-05-17T02:22:53.448+0000",
                    "updated": "2022-05-17T02:22:53.448+0000",
                    "started": "2022-05-17T02:22:53.448+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "771123",
                    "issueId": "13426730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/worklog/772497",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13078:\nURL: https://github.com/apache/arrow/pull/13078#discussion_r877199514\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -225,6 +225,76 @@ Result<compute::Declaration> FromProto(const substrait::Rel& rel,\n       });\n     }\n \n+    case substrait::Rel::RelTypeCase::kJoin: {\n+      const auto& join = rel.join();\n+      RETURN_NOT_OK(CheckRelCommon(join));\n+\n+      if (!join.has_left()) {\n+        return Status::Invalid(\"substrait::JoinRel with no left relation\");\n+      }\n+\n+      if (!join.has_right()) {\n+        return Status::Invalid(\"substrait::JoinRel with no right relation\");\n+      }\n+\n+      compute::JoinType join_type;\n+      switch (join.type()) {\n+        case 0:\n+          return Status::NotImplemented(\"Unspecified join type is not supported\");\n+        case 1:\n+          join_type = compute::JoinType::INNER;\n+          break;\n+        case 2:\n+          return Status::NotImplemented(\"Outer join type is not supported\");\n+        case 3:\n+          return Status::NotImplemented(\"Left join type is not supported\");\n+        case 4:\n+          return Status::NotImplemented(\"Right join type is not supported\");\n+        case 5:\n+          return Status::NotImplemented(\"Semi join type is not supported\");\n+        case 6:\n+          return Status::NotImplemented(\"Anti join type is not supported\");\n+        default:\n+          return Status::Invalid(\"Unsupported join type\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto left, FromProto(join.left(), ext_set));\n+      ARROW_ASSIGN_OR_RAISE(auto right, FromProto(join.right(), ext_set));\n+\n+      if (!join.has_expression()) {\n+        return Status::Invalid(\"substrait::JoinRel with no expression\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto expression, FromProto(join.expression(), ext_set));\n+\n+      const auto& callptr = expression.call();\n+      if (!callptr) {\n+        return Status::Invalid(\n+            \"Only support call expressions as the join key comparison.\");\n\nReview Comment:\n   ```suggestion\r\n               \"A join rel's expression must be a simple equality between keys but got \", expression.ToString());\r\n   ```\n\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -225,6 +225,76 @@ Result<compute::Declaration> FromProto(const substrait::Rel& rel,\n       });\n     }\n \n+    case substrait::Rel::RelTypeCase::kJoin: {\n+      const auto& join = rel.join();\n+      RETURN_NOT_OK(CheckRelCommon(join));\n+\n+      if (!join.has_left()) {\n+        return Status::Invalid(\"substrait::JoinRel with no left relation\");\n+      }\n+\n+      if (!join.has_right()) {\n+        return Status::Invalid(\"substrait::JoinRel with no right relation\");\n+      }\n+\n+      compute::JoinType join_type;\n+      switch (join.type()) {\n+        case 0:\n+          return Status::NotImplemented(\"Unspecified join type is not supported\");\n+        case 1:\n+          join_type = compute::JoinType::INNER;\n+          break;\n+        case 2:\n+          return Status::NotImplemented(\"Outer join type is not supported\");\n+        case 3:\n+          return Status::NotImplemented(\"Left join type is not supported\");\n+        case 4:\n+          return Status::NotImplemented(\"Right join type is not supported\");\n+        case 5:\n+          return Status::NotImplemented(\"Semi join type is not supported\");\n+        case 6:\n+          return Status::NotImplemented(\"Anti join type is not supported\");\n\nReview Comment:\n   What is stopping us from supporting these joins?  Is it just a matter of mapping to the appropriate Arrow equivalent enum?  Or a matter of testing?  Is there a follow-up PR?\n\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -225,6 +225,76 @@ Result<compute::Declaration> FromProto(const substrait::Rel& rel,\n       });\n     }\n \n+    case substrait::Rel::RelTypeCase::kJoin: {\n+      const auto& join = rel.join();\n+      RETURN_NOT_OK(CheckRelCommon(join));\n+\n+      if (!join.has_left()) {\n+        return Status::Invalid(\"substrait::JoinRel with no left relation\");\n+      }\n+\n+      if (!join.has_right()) {\n+        return Status::Invalid(\"substrait::JoinRel with no right relation\");\n+      }\n+\n+      compute::JoinType join_type;\n+      switch (join.type()) {\n+        case 0:\n+          return Status::NotImplemented(\"Unspecified join type is not supported\");\n+        case 1:\n+          join_type = compute::JoinType::INNER;\n+          break;\n+        case 2:\n+          return Status::NotImplemented(\"Outer join type is not supported\");\n+        case 3:\n+          return Status::NotImplemented(\"Left join type is not supported\");\n+        case 4:\n+          return Status::NotImplemented(\"Right join type is not supported\");\n+        case 5:\n+          return Status::NotImplemented(\"Semi join type is not supported\");\n+        case 6:\n+          return Status::NotImplemented(\"Anti join type is not supported\");\n+        default:\n+          return Status::Invalid(\"Unsupported join type\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto left, FromProto(join.left(), ext_set));\n+      ARROW_ASSIGN_OR_RAISE(auto right, FromProto(join.right(), ext_set));\n+\n+      if (!join.has_expression()) {\n+        return Status::Invalid(\"substrait::JoinRel with no expression\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto expression, FromProto(join.expression(), ext_set));\n+\n+      const auto& callptr = expression.call();\n+      if (!callptr) {\n+        return Status::Invalid(\n+            \"Only support call expressions as the join key comparison.\");\n+      }\n+\n+      compute::JoinKeyCmp join_key_cmp;\n+      if (callptr->function_name == \"equal\") {\n+        join_key_cmp = compute::JoinKeyCmp::EQ;\n+      } else if (callptr->function_name == \"is_not_distinct_from\") {\n+        join_key_cmp = compute::JoinKeyCmp::IS;\n+      } else {\n+        return Status::Invalid(\n+            \"Only Support `equal` or `is_not_distinct_from` for join key comparison\");\n+      }\n+\n+      // TODO: Add Suffix support for Substrait\n+      compute::HashJoinNodeOptions join_options{\n+          {std::move(*callptr->arguments[0].field_ref())},\n+          {std::move(*callptr->arguments[1].field_ref())}};\n\nReview Comment:\n   Should we do validation to ensure that both arguments are indeed `field_ref`?  Otherwise I think we risk dereferncing a null pointer here.\n\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -225,6 +225,76 @@ Result<compute::Declaration> FromProto(const substrait::Rel& rel,\n       });\n     }\n \n+    case substrait::Rel::RelTypeCase::kJoin: {\n+      const auto& join = rel.join();\n+      RETURN_NOT_OK(CheckRelCommon(join));\n+\n+      if (!join.has_left()) {\n+        return Status::Invalid(\"substrait::JoinRel with no left relation\");\n+      }\n+\n+      if (!join.has_right()) {\n+        return Status::Invalid(\"substrait::JoinRel with no right relation\");\n+      }\n+\n+      compute::JoinType join_type;\n+      switch (join.type()) {\n+        case 0:\n+          return Status::NotImplemented(\"Unspecified join type is not supported\");\n+        case 1:\n+          join_type = compute::JoinType::INNER;\n+          break;\n+        case 2:\n+          return Status::NotImplemented(\"Outer join type is not supported\");\n+        case 3:\n+          return Status::NotImplemented(\"Left join type is not supported\");\n+        case 4:\n+          return Status::NotImplemented(\"Right join type is not supported\");\n+        case 5:\n+          return Status::NotImplemented(\"Semi join type is not supported\");\n+        case 6:\n+          return Status::NotImplemented(\"Anti join type is not supported\");\n+        default:\n+          return Status::Invalid(\"Unsupported join type\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto left, FromProto(join.left(), ext_set));\n+      ARROW_ASSIGN_OR_RAISE(auto right, FromProto(join.right(), ext_set));\n+\n+      if (!join.has_expression()) {\n+        return Status::Invalid(\"substrait::JoinRel with no expression\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto expression, FromProto(join.expression(), ext_set));\n+\n+      const auto& callptr = expression.call();\n+      if (!callptr) {\n+        return Status::Invalid(\n+            \"Only support call expressions as the join key comparison.\");\n+      }\n+\n+      compute::JoinKeyCmp join_key_cmp;\n+      if (callptr->function_name == \"equal\") {\n+        join_key_cmp = compute::JoinKeyCmp::EQ;\n+      } else if (callptr->function_name == \"is_not_distinct_from\") {\n+        join_key_cmp = compute::JoinKeyCmp::IS;\n+      } else {\n+        return Status::Invalid(\n+            \"Only Support `equal` or `is_not_distinct_from` for join key comparison\");\n+      }\n+\n+      // TODO: Add Suffix support for Substrait\n+      compute::HashJoinNodeOptions join_options{\n+          {std::move(*callptr->arguments[0].field_ref())},\n+          {std::move(*callptr->arguments[1].field_ref())}};\n+      join_options.join_type = join_type;\n+      join_options.key_cmp = {join_key_cmp};\n+      compute::Declaration join_dec{\"hashjoin\", std::move(join_options)};\n+      join_dec.inputs.emplace_back(std::move(left));\n+      join_dec.inputs.emplace_back(std::move(right));\n+      return compute::Declaration::Sequence({std::move(join_dec)});\n\nReview Comment:\n   I'm not sure we need to call `compute::Declaration::Sequence` here.  We can just return `join_dec`.\n\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -750,5 +750,309 @@ TEST(Substrait, ExtensionSetFromPlanMissingFunc) {\n           &ext_set));\n }\n \n+TEST(Substrait, JoinPlanBasic) {\n\nReview Comment:\n   I talked with @cpcloud and @saulpw about this today and I think we should also investigate using Ibis (for python tests) and Saul is going to try and make a C++ lib for [jdot](https://github.com/saulpw/jdot).  We can worry about it later though.  This is fine for this PR.\n\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -225,6 +225,76 @@ Result<compute::Declaration> FromProto(const substrait::Rel& rel,\n       });\n     }\n \n+    case substrait::Rel::RelTypeCase::kJoin: {\n+      const auto& join = rel.join();\n+      RETURN_NOT_OK(CheckRelCommon(join));\n+\n+      if (!join.has_left()) {\n+        return Status::Invalid(\"substrait::JoinRel with no left relation\");\n+      }\n+\n+      if (!join.has_right()) {\n+        return Status::Invalid(\"substrait::JoinRel with no right relation\");\n+      }\n+\n+      compute::JoinType join_type;\n+      switch (join.type()) {\n+        case 0:\n+          return Status::NotImplemented(\"Unspecified join type is not supported\");\n+        case 1:\n+          join_type = compute::JoinType::INNER;\n+          break;\n+        case 2:\n+          return Status::NotImplemented(\"Outer join type is not supported\");\n+        case 3:\n+          return Status::NotImplemented(\"Left join type is not supported\");\n+        case 4:\n+          return Status::NotImplemented(\"Right join type is not supported\");\n+        case 5:\n+          return Status::NotImplemented(\"Semi join type is not supported\");\n+        case 6:\n+          return Status::NotImplemented(\"Anti join type is not supported\");\n+        default:\n+          return Status::Invalid(\"Unsupported join type\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto left, FromProto(join.left(), ext_set));\n+      ARROW_ASSIGN_OR_RAISE(auto right, FromProto(join.right(), ext_set));\n+\n+      if (!join.has_expression()) {\n+        return Status::Invalid(\"substrait::JoinRel with no expression\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto expression, FromProto(join.expression(), ext_set));\n+\n+      const auto& callptr = expression.call();\n+      if (!callptr) {\n+        return Status::Invalid(\n+            \"Only support call expressions as the join key comparison.\");\n+      }\n+\n+      compute::JoinKeyCmp join_key_cmp;\n+      if (callptr->function_name == \"equal\") {\n+        join_key_cmp = compute::JoinKeyCmp::EQ;\n+      } else if (callptr->function_name == \"is_not_distinct_from\") {\n+        join_key_cmp = compute::JoinKeyCmp::IS;\n+      } else {\n+        return Status::Invalid(\n+            \"Only Support `equal` or `is_not_distinct_from` for join key comparison\");\n\nReview Comment:\n   ```suggestion\r\n               \"Only `equal` or `is_not_distinct_from` are supported for join key comparison but got \", callptr->function_name);\r\n   ```\n\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -225,6 +225,76 @@ Result<compute::Declaration> FromProto(const substrait::Rel& rel,\n       });\n     }\n \n+    case substrait::Rel::RelTypeCase::kJoin: {\n+      const auto& join = rel.join();\n+      RETURN_NOT_OK(CheckRelCommon(join));\n+\n+      if (!join.has_left()) {\n+        return Status::Invalid(\"substrait::JoinRel with no left relation\");\n+      }\n+\n+      if (!join.has_right()) {\n+        return Status::Invalid(\"substrait::JoinRel with no right relation\");\n+      }\n+\n+      compute::JoinType join_type;\n+      switch (join.type()) {\n+        case 0:\n+          return Status::NotImplemented(\"Unspecified join type is not supported\");\n+        case 1:\n+          join_type = compute::JoinType::INNER;\n+          break;\n+        case 2:\n+          return Status::NotImplemented(\"Outer join type is not supported\");\n+        case 3:\n+          return Status::NotImplemented(\"Left join type is not supported\");\n+        case 4:\n+          return Status::NotImplemented(\"Right join type is not supported\");\n+        case 5:\n+          return Status::NotImplemented(\"Semi join type is not supported\");\n+        case 6:\n+          return Status::NotImplemented(\"Anti join type is not supported\");\n+        default:\n+          return Status::Invalid(\"Unsupported join type\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto left, FromProto(join.left(), ext_set));\n+      ARROW_ASSIGN_OR_RAISE(auto right, FromProto(join.right(), ext_set));\n+\n+      if (!join.has_expression()) {\n+        return Status::Invalid(\"substrait::JoinRel with no expression\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto expression, FromProto(join.expression(), ext_set));\n+\n+      const auto& callptr = expression.call();\n+      if (!callptr) {\n+        return Status::Invalid(\n+            \"Only support call expressions as the join key comparison.\");\n+      }\n+\n+      compute::JoinKeyCmp join_key_cmp;\n+      if (callptr->function_name == \"equal\") {\n+        join_key_cmp = compute::JoinKeyCmp::EQ;\n+      } else if (callptr->function_name == \"is_not_distinct_from\") {\n+        join_key_cmp = compute::JoinKeyCmp::IS;\n+      } else {\n+        return Status::Invalid(\n+            \"Only Support `equal` or `is_not_distinct_from` for join key comparison\");\n+      }\n+\n+      // TODO: Add Suffix support for Substrait\n\nReview Comment:\n   Create a follow-up JIRA or link to a Substrait issue.\n\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -188,6 +188,79 @@ Result<compute::Declaration> FromProto(const substrait::Rel& rel,\n       });\n     }\n \n+    case substrait::Rel::RelTypeCase::kJoin: {\n+      const auto& join = rel.join();\n+      RETURN_NOT_OK(CheckRelCommon(join));\n+\n+      if (!join.has_left()) {\n+        return Status::Invalid(\"substrait::JoinRel with no left relation\");\n+      }\n+\n+      if (!join.has_right()) {\n+        return Status::Invalid(\"substrait::JoinRel with no right relation\");\n+      }\n+\n+      compute::JoinType join_type;\n+      switch (join.type()) {\n+        case 0:\n+          return Status::NotImplemented(\"Unspecified join type is not supported\");\n+        case 1:\n+          join_type = compute::JoinType::INNER;\n+          break;\n+        case 2:\n+          return Status::NotImplemented(\"Outer join type is not supported\");\n+        case 3:\n+          return Status::NotImplemented(\"Left join type is not supported\");\n+        case 4:\n+          return Status::NotImplemented(\"Right join type is not supported\");\n+        case 5:\n+          return Status::NotImplemented(\"Semi join type is not supported\");\n+        case 6:\n+          return Status::NotImplemented(\"Anti join type is not supported\");\n+        default:\n+          return Status::Invalid(\"Unsupported join type\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto left, FromProto(join.left(), ext_set));\n+      ARROW_ASSIGN_OR_RAISE(auto right, FromProto(join.right(), ext_set));\n+\n+      if (!join.has_expression()) {\n+        return Status::Invalid(\"substrait::JoinRel with no expression\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto expression, FromProto(join.expression(), ext_set));\n+\n+      const auto& callptr = expression.call();\n\nReview Comment:\n   `auto` is very odd with pointers:\r\n   \r\n   ```\r\n   int x = 7;\r\n   auto auto_only = &x; // auto_only will have type: int*\r\n   auto* auto_ptr = &x; // auto_ptr will have type: int*\r\n   const autu& auto_cref = &x; // auto_cref will have type: int * const &\r\n   ```\r\n   \r\n   General rule of thumb is that `auto` is ok but `auto*` is more explicit (`auto* auto_ptr = x` will fail to compile) and also helpful to the reader so they know what is being returned.  We don't really follow any strict pattern within the Arrow code base today so I think both `auto` and `auto*` would be acceptable in this case.  However, `const auto&` is doing something different and should not be used here.\r\n   \r\n   [Example](https://godbolt.org/z/b4KnKfTM6)\n\n\n\n",
                    "created": "2022-05-19T15:23:13.988+0000",
                    "updated": "2022-05-19T15:23:13.988+0000",
                    "started": "2022-05-19T15:23:13.988+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "772497",
                    "issueId": "13426730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/worklog/772504",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13078:\nURL: https://github.com/apache/arrow/pull/13078#discussion_r877218123\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -750,5 +750,309 @@ TEST(Substrait, ExtensionSetFromPlanMissingFunc) {\n           &ext_set));\n }\n \n+TEST(Substrait, JoinPlanBasic) {\n\nReview Comment:\n   Sounds good. Looking forward for this :) \n\n\n\n",
                    "created": "2022-05-19T15:32:39.698+0000",
                    "updated": "2022-05-19T15:32:39.698+0000",
                    "started": "2022-05-19T15:32:39.698+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "772504",
                    "issueId": "13426730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/worklog/772508",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13078:\nURL: https://github.com/apache/arrow/pull/13078#discussion_r877220481\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -225,6 +225,76 @@ Result<compute::Declaration> FromProto(const substrait::Rel& rel,\n       });\n     }\n \n+    case substrait::Rel::RelTypeCase::kJoin: {\n+      const auto& join = rel.join();\n+      RETURN_NOT_OK(CheckRelCommon(join));\n+\n+      if (!join.has_left()) {\n+        return Status::Invalid(\"substrait::JoinRel with no left relation\");\n+      }\n+\n+      if (!join.has_right()) {\n+        return Status::Invalid(\"substrait::JoinRel with no right relation\");\n+      }\n+\n+      compute::JoinType join_type;\n+      switch (join.type()) {\n+        case 0:\n+          return Status::NotImplemented(\"Unspecified join type is not supported\");\n+        case 1:\n+          join_type = compute::JoinType::INNER;\n+          break;\n+        case 2:\n+          return Status::NotImplemented(\"Outer join type is not supported\");\n+        case 3:\n+          return Status::NotImplemented(\"Left join type is not supported\");\n+        case 4:\n+          return Status::NotImplemented(\"Right join type is not supported\");\n+        case 5:\n+          return Status::NotImplemented(\"Semi join type is not supported\");\n+        case 6:\n+          return Status::NotImplemented(\"Anti join type is not supported\");\n\nReview Comment:\n   Mainly, I am not 100% clear on mapping the definitions Substrait-Arrow. I thought about doing it in the follow up PR. Not any special reason stopping doing it for this PR.\n\n\n\n",
                    "created": "2022-05-19T15:34:49.771+0000",
                    "updated": "2022-05-19T15:34:49.771+0000",
                    "started": "2022-05-19T15:34:49.771+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "772508",
                    "issueId": "13426730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/worklog/772873",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13078:\nURL: https://github.com/apache/arrow/pull/13078#discussion_r878240447\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -188,6 +188,79 @@ Result<compute::Declaration> FromProto(const substrait::Rel& rel,\n       });\n     }\n \n+    case substrait::Rel::RelTypeCase::kJoin: {\n+      const auto& join = rel.join();\n+      RETURN_NOT_OK(CheckRelCommon(join));\n+\n+      if (!join.has_left()) {\n+        return Status::Invalid(\"substrait::JoinRel with no left relation\");\n+      }\n+\n+      if (!join.has_right()) {\n+        return Status::Invalid(\"substrait::JoinRel with no right relation\");\n+      }\n+\n+      compute::JoinType join_type;\n+      switch (join.type()) {\n+        case 0:\n+          return Status::NotImplemented(\"Unspecified join type is not supported\");\n+        case 1:\n+          join_type = compute::JoinType::INNER;\n+          break;\n+        case 2:\n+          return Status::NotImplemented(\"Outer join type is not supported\");\n+        case 3:\n+          return Status::NotImplemented(\"Left join type is not supported\");\n+        case 4:\n+          return Status::NotImplemented(\"Right join type is not supported\");\n+        case 5:\n+          return Status::NotImplemented(\"Semi join type is not supported\");\n+        case 6:\n+          return Status::NotImplemented(\"Anti join type is not supported\");\n+        default:\n+          return Status::Invalid(\"Unsupported join type\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto left, FromProto(join.left(), ext_set));\n+      ARROW_ASSIGN_OR_RAISE(auto right, FromProto(join.right(), ext_set));\n+\n+      if (!join.has_expression()) {\n+        return Status::Invalid(\"substrait::JoinRel with no expression\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto expression, FromProto(join.expression(), ext_set));\n+\n+      const auto& callptr = expression.call();\n\nReview Comment:\n   Thanks, @westonpace good point. I will update.\n\n\n\n",
                    "created": "2022-05-20T14:51:08.280+0000",
                    "updated": "2022-05-20T14:51:08.280+0000",
                    "started": "2022-05-20T14:51:08.280+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "772873",
                    "issueId": "13426730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/worklog/772879",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13078:\nURL: https://github.com/apache/arrow/pull/13078#discussion_r878248148\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -225,6 +225,76 @@ Result<compute::Declaration> FromProto(const substrait::Rel& rel,\n       });\n     }\n \n+    case substrait::Rel::RelTypeCase::kJoin: {\n+      const auto& join = rel.join();\n+      RETURN_NOT_OK(CheckRelCommon(join));\n+\n+      if (!join.has_left()) {\n+        return Status::Invalid(\"substrait::JoinRel with no left relation\");\n+      }\n+\n+      if (!join.has_right()) {\n+        return Status::Invalid(\"substrait::JoinRel with no right relation\");\n+      }\n+\n+      compute::JoinType join_type;\n+      switch (join.type()) {\n+        case 0:\n+          return Status::NotImplemented(\"Unspecified join type is not supported\");\n+        case 1:\n+          join_type = compute::JoinType::INNER;\n+          break;\n+        case 2:\n+          return Status::NotImplemented(\"Outer join type is not supported\");\n+        case 3:\n+          return Status::NotImplemented(\"Left join type is not supported\");\n+        case 4:\n+          return Status::NotImplemented(\"Right join type is not supported\");\n+        case 5:\n+          return Status::NotImplemented(\"Semi join type is not supported\");\n+        case 6:\n+          return Status::NotImplemented(\"Anti join type is not supported\");\n+        default:\n+          return Status::Invalid(\"Unsupported join type\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto left, FromProto(join.left(), ext_set));\n+      ARROW_ASSIGN_OR_RAISE(auto right, FromProto(join.right(), ext_set));\n+\n+      if (!join.has_expression()) {\n+        return Status::Invalid(\"substrait::JoinRel with no expression\");\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(auto expression, FromProto(join.expression(), ext_set));\n+\n+      const auto& callptr = expression.call();\n+      if (!callptr) {\n+        return Status::Invalid(\n+            \"Only support call expressions as the join key comparison.\");\n+      }\n+\n+      compute::JoinKeyCmp join_key_cmp;\n+      if (callptr->function_name == \"equal\") {\n+        join_key_cmp = compute::JoinKeyCmp::EQ;\n+      } else if (callptr->function_name == \"is_not_distinct_from\") {\n+        join_key_cmp = compute::JoinKeyCmp::IS;\n+      } else {\n+        return Status::Invalid(\n+            \"Only Support `equal` or `is_not_distinct_from` for join key comparison\");\n+      }\n+\n+      // TODO: Add Suffix support for Substrait\n\nReview Comment:\n   Follow up JIRA created: https://issues.apache.org/jira/browse/ARROW-16624\n\n\n\n",
                    "created": "2022-05-20T14:58:33.939+0000",
                    "updated": "2022-05-20T14:58:33.939+0000",
                    "started": "2022-05-20T14:58:33.938+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "772879",
                    "issueId": "13426730"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 17400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4952a32c[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d0dd4b0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6788e8a7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@34f318b2[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@17b391b9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@57551a4b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@77b80dd6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5ba2bd1b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5017d18f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2f6f0e84[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@180e6002[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@560a5c7d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 17400,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jun 01 00:50:54 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-06-01T00:50:54.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15590/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-02-05T02:36:33.000+0000",
        "updated": "2022-06-01T00:50:54.000+0000",
        "timeoriginalestimate": null,
        "description": "The streaming execution engine supports joins.  The Substrait consumer does not currently consume joins.  We should add support for this.  We may want to split this PR into subtasks as there are many different kinds of joins and we may not support all of them immediately.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 17400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add support for joins to the Substrait consumer",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/comment/17530074",
                    "id": "17530074",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "While looking into Substrait-Join integration, I observed that, the Substrait spec provides the following properties for a join operation.\r\n\r\n- Left Input\u00a0\r\n- Right Input\r\n- Join Expression\r\n- Join Type\r\n\r\n\r\nWhile in Arrow API, the HashJoinOptions are (minimum options)\r\n\r\n\r\n- left keys\r\n- right keys\r\n- join type\r\n\r\n\r\nTo translate the Substrait inputs and obtain left and right keys, is there a way to extract the `FieldPath` from an expression?\u00a0\r\nWe are not supporting experssions on join-key, right? AFAIK there is only a filter expression available. Please correct me if I am on a wrong path.\r\n\r\ncc [~westonpace] [~lidavidm]\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-04-29T15:55:50.068+0000",
                    "updated": "2022-04-29T15:55:50.068+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/comment/17530201",
                    "id": "17530201",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "The Substrait spec (the website) doesn't always match the .proto yet.  This is not a great thing but it's a work in progress.  Feel free to open some PRs against the site if you want.  In the meantime I find it easier to work with the proto:\r\n\r\n{noformat}\r\nmessage JoinRel {\r\n  RelCommon common = 1;\r\n  Rel left = 2;\r\n  Rel right = 3;\r\n  Expression expression = 4;\r\n  Expression post_join_filter = 5;\r\n\r\n  JoinType type = 6;\r\n  ...\r\n}\r\n{noformat}\r\n\r\nThe {{post_join_filter}} is not on the site today and should match {{HashJoinNodeOptions::filter}}.\r\n\r\n{{LeftInput}} and {{RightInput}} correspond to the inputs specified when adding a join to a plan and so they aren't in {{HashJoinNodeOptions}}:\r\n\r\n{noformat}\r\nMakeExecNode(\"hashjoin\", plan.get(), {LeftInput, RightInput}, join_options));\r\n{noformat}\r\n\r\nYou are correct that we do not handle expressions in general for the join condition.  So I think the best thing to do here initially is restrict the set of allowed plans.  If the expression is not a call then reject it.  If the expression is a call then it must be one of two functions, \"equal\" or \"is_not_distinct_from\".  In either case the function has two arguments.  Both arguments must be a {{FieldReference}}.  We can convert from a Substrait {{FieldReference}} to an Arrow {{FieldRef}} and so that will give you left keys and right keys.  There is an Arrow options {{HashJoinNodeOptions::key_cmp}}.  If the Substrait function is \"equal\" then use {{JoinKeyCmp::Eq}}.  If the Substrait function is \"is_not_distinct_from\" then use {{JoinKeyCmp::Is}}.\r\n\r\nWith the above approach you will always have exactly one left key, one right key, and one join type.\r\n\r\nLater (could be in this PR or a follow-up) we can also handle expressions that are an and'ed set of equality expressions:\r\n\r\n{noformat}\r\nand(equal(field(3),field(5)), equal(field(1),field(7)), equal(field(2), field(12)))\r\n{noformat}\r\n\r\nIn this case the number of keys/join types you have would depend on the number of equality expressions in the and (3 in the above example).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-04-29T19:16:29.945+0000",
                    "updated": "2022-04-29T19:16:55.587+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/comment/17530265",
                    "id": "17530265",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~westonpace]\u00a0A clear explanation. Thank you.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-04-29T22:39:32.284+0000",
                    "updated": "2022-04-29T22:39:32.284+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/comment/17532668",
                    "id": "17532668",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~westonpace]\u00a0added a draft PR: [https://github.com/apache/arrow/pull/13078]\r\n\r\nAlso included the missing features that needs to be supported as a followup PR via the JIRA:https://issues.apache.org/jira/browse/ARROW-16485",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-05-06T06:51:35.005+0000",
                    "updated": "2022-05-06T06:51:35.005+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426730/comment/17544654",
                    "id": "17544654",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 13078\n[https://github.com/apache/arrow/pull/13078]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-06-01T00:50:54.837+0000",
                    "updated": "2022-06-01T00:50:54.837+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|z0za20:",
        "customfield_12314139": null
    }
}