{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13286852",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286852",
    "key": "ARROW-7913",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12582093",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12582093",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13197561",
                    "key": "ARROW-3750",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197561",
                    "fields": {
                        "summary": "[R] Pass various wrapped Arrow objects created in Python into R with zero copy via reticulate",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 40800,
            "total": 40800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 40800,
            "total": 40800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7913/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 79,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286852/worklog/391815",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6483: ARROW-7913: [C++][Python][R] C++ implementation of C data interface\nURL: https://github.com/apache/arrow/pull/6483\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-24T16:36:04.436+0000",
                    "updated": "2020-02-24T16:36:04.436+0000",
                    "started": "2020-02-24T16:36:04.436+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391815",
                    "issueId": "13286852"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286852/worklog/391816",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #6026: ARROW-7913: [C++][Python][R] C++ implementation of C data protocol\nURL: https://github.com/apache/arrow/pull/6026#issuecomment-590422624\n \n \n   Superseded by PR #6483 \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-24T16:36:22.142+0000",
                    "updated": "2020-02-24T16:36:22.142+0000",
                    "started": "2020-02-24T16:36:22.140+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391816",
                    "issueId": "13286852"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286852/worklog/391817",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6026: ARROW-7913: [C++][Python][R] C++ implementation of C data protocol\nURL: https://github.com/apache/arrow/pull/6026\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-24T16:36:22.649+0000",
                    "updated": "2020-02-24T16:36:22.649+0000",
                    "started": "2020-02-24T16:36:22.648+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391817",
                    "issueId": "13286852"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286852/worklog/391832",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6483: ARROW-7913: [C++][Python][R] C++ implementation of C data interface\nURL: https://github.com/apache/arrow/pull/6483#issuecomment-590428455\n \n \n   https://issues.apache.org/jira/browse/ARROW-7913\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-24T16:46:36.357+0000",
                    "updated": "2020-02-24T16:46:36.357+0000",
                    "started": "2020-02-24T16:46:36.357+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391832",
                    "issueId": "13286852"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286852/worklog/391894",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #6483: ARROW-7913: [C++][Python][R] C++ implementation of C data interface\nURL: https://github.com/apache/arrow/pull/6483#issuecomment-590487263\n \n \n   Should I add extension type support in this PR or open a JIRA to do it later?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-24T18:45:17.820+0000",
                    "updated": "2020-02-24T18:45:17.820+0000",
                    "started": "2020-02-24T18:45:17.819+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391894",
                    "issueId": "13286852"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286852/worklog/392569",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on issue #6483: ARROW-7913: [C++][Python][R] C++ implementation of C data interface\nURL: https://github.com/apache/arrow/pull/6483#issuecomment-590891316\n \n \n   For me, I'm fine with a followup. Think we'll also need a followup to handle ChunkedArray and Table anyway, IIRC.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T14:24:16.379+0000",
                    "updated": "2020-02-25T14:24:16.379+0000",
                    "started": "2020-02-25T14:24:16.379+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392569",
                    "issueId": "13286852"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286852/worklog/392771",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6483: ARROW-7913: [C++][Python][R] C++ implementation of C data interface\nURL: https://github.com/apache/arrow/pull/6483#discussion_r383925589\n \n \n\n ##########\n File path: ci/docker/linux-apt-r.dockerfile\n ##########\n @@ -63,6 +67,18 @@ COPY ci/scripts/r_deps.sh /arrow/ci/scripts/\n COPY r/DESCRIPTION /arrow/r/\n RUN /arrow/ci/scripts/r_deps.sh /arrow\n \n+# Set up Python 3 and its dependencies\n+RUN ln -s /usr/bin/python3 /usr/local/bin/python && \\\n+    ln -s /usr/bin/pip3 /usr/local/bin/pip\n+\n+COPY python/requirements.txt \\\n+     python/requirements-test.txt \\\n+     /arrow/python/\n+\n+RUN pip install \\\n+    -r arrow/python/requirements.txt \\\n+    cython setuptools\n \n Review comment:\n   nit\r\n   ```suggestion\r\n       cython \\\r\n       setuptools\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T18:29:33.116+0000",
                    "updated": "2020-02-25T18:29:33.116+0000",
                    "started": "2020-02-25T18:29:33.116+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392771",
                    "issueId": "13286852"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286852/worklog/392772",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6483: ARROW-7913: [C++][Python][R] C++ implementation of C data interface\nURL: https://github.com/apache/arrow/pull/6483#discussion_r383920420\n \n \n\n ##########\n File path: cpp/src/arrow/c/bridge.h\n ##########\n @@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/c/abi.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type_fwd.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+/// \\brief Export C++ DataType using the C data interface format.\n+///\n+/// The root type is considered to have empty name and metadata.\n+/// If you want the root type to have a name and/or metadata, pass\n+/// a Field instead.\n+///\n+/// \\param[in] type DataType object to export\n+/// \\param[out] out C struct where to export the datatype\n+ARROW_EXPORT\n+Status ExportType(const DataType& type, struct ArrowSchema* out);\n \n Review comment:\n   ```suggestion\r\n   Result<ArrowSchema> ExportType(const DataType& type);\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T18:29:33.240+0000",
                    "updated": "2020-02-25T18:29:33.240+0000",
                    "started": "2020-02-25T18:29:33.239+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392772",
                    "issueId": "13286852"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286852/worklog/392773",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6483: ARROW-7913: [C++][Python][R] C++ implementation of C data interface\nURL: https://github.com/apache/arrow/pull/6483#discussion_r383942319\n \n \n\n ##########\n File path: cpp/src/arrow/c/util_internal.h\n ##########\n @@ -0,0 +1,68 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+namespace arrow {\n+namespace internal {\n+\n+struct SchemaExportTraits {\n+  typedef struct ArrowSchema CType;\n+  static constexpr auto IsReleasedFunc = &ArrowSchemaIsReleased;\n+  static constexpr auto ReleaseFunc = &ArrowSchemaRelease;\n+};\n+\n+struct ArrayExportTraits {\n+  typedef struct ArrowArray CType;\n+  static constexpr auto IsReleasedFunc = &ArrowArrayIsReleased;\n+  static constexpr auto ReleaseFunc = &ArrowArrayRelease;\n+};\n+\n+// A RAII-style object to release a C Array / Schema struct at block scope exit.\n+template <typename Traits>\n+class ExportGuard {\n+ public:\n+  using CType = typename Traits::CType;\n+\n+  explicit ExportGuard(CType* c_export) : c_export_(c_export) {}\n+\n+  ARROW_DEFAULT_MOVE_AND_ASSIGN(ExportGuard);\n+\n+  ~ExportGuard() { Release(); }\n+\n+  void Detach() { c_export_ = nullptr; }\n+\n+  void Reset(CType* c_export) { c_export_ = c_export; }\n+\n+  void Release() {\n+    if (c_export_) {\n+      Traits::ReleaseFunc(c_export_);\n+      c_export_ = nullptr;\n+    }\n+  }\n+\n+ private:\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(ExportGuard);\n+\n+  CType* c_export_;\n \n Review comment:\n   ```suggestion\r\n     std::unique_ptr<CType, decltype(Traits::ReleaseFunc)> c_export_;\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T18:29:33.393+0000",
                    "updated": "2020-02-25T18:29:33.393+0000",
                    "started": "2020-02-25T18:29:33.391+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392773",
                    "issueId": "13286852"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286852/worklog/392774",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6483: ARROW-7913: [C++][Python][R] C++ implementation of C data interface\nURL: https://github.com/apache/arrow/pull/6483#discussion_r383928689\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_time.h\n ##########\n @@ -21,52 +21,23 @@\n \n #include <memory>\n \n-#include \"arrow/array.h\"\n #include \"arrow/array/builder_base.h\"\n-#include \"arrow/array/builder_binary.h\"\n #include \"arrow/array/builder_primitive.h\"\n-#include \"arrow/buffer_builder.h\"\n-#include \"arrow/status.h\"\n-#include \"arrow/type_traits.h\"\n-#include \"arrow/util/macros.h\"\n \n namespace arrow {\n \n-class ARROW_EXPORT DayTimeIntervalBuilder : public ArrayBuilder {\n+// TODO this class is untested\n \n Review comment:\n   ```suggestion\r\n   // TODO(pitrou) this class is untested\r\n   ```\r\n   \r\n   ```suggestion\r\n   // TODO(emkornfield) this class is untested\r\n   ```\r\n   \r\n   https://issues.apache.org/jira/browse/ARROW-7938\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T18:29:33.488+0000",
                    "updated": "2020-02-25T18:29:33.488+0000",
                    "started": "2020-02-25T18:29:33.488+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392774",
                    "issueId": "13286852"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286852/worklog/392775",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6483: ARROW-7913: [C++][Python][R] C++ implementation of C data interface\nURL: https://github.com/apache/arrow/pull/6483#discussion_r383934939\n \n \n\n ##########\n File path: cpp/src/arrow/c/helpers.h\n ##########\n @@ -0,0 +1,73 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"arrow/c/abi.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+inline int ArrowSchemaIsReleased(const struct ArrowSchema* schema) {\n+  return schema->release == NULL;\n+}\n+\n+inline void ArrowSchemaMarkReleased(struct ArrowSchema* schema) {\n+  schema->release = NULL;\n+}\n+\n+inline void ArrowSchemaMove(struct ArrowSchema* src, struct ArrowSchema* dest) {\n+  assert(dest != src);\n+  assert(!ArrowSchemaIsReleased(src));\n+  memcpy(dest, src, sizeof(struct ArrowSchema));\n+  ArrowSchemaMarkReleased(src);\n+}\n+\n+inline void ArrowSchemaRelease(struct ArrowSchema* schema) {\n+  if (!ArrowSchemaIsReleased(schema)) {\n+    schema->release(schema);\n+    assert(ArrowSchemaIsReleased(schema));\n+  }\n+}\n+\n+inline int ArrowArrayIsReleased(const struct ArrowArray* array) {\n+  return array->release == NULL;\n+}\n+\n+inline void ArrowArrayMarkReleased(struct ArrowArray* array) { array->release = NULL; }\n+\n+inline void ArrowArrayMove(struct ArrowArray* src, struct ArrowArray* dest) {\n+  assert(dest != src);\n+  assert(!ArrowArrayIsReleased(src));\n \n Review comment:\n   If `dest` is an exported array which needs to be released, this will be a memory leak. If that usage isn't supported then it's worth a warning comment, otherwise:\r\n   \r\n   ```suggestion\r\n     assert(ArrowArrayIsReleased(dest));\r\n   ```\r\n   \r\n   ```suggestion\r\n     if (!ArrowArrayIsReleased(dest)) {\r\n       ArrowArrayRelease(dest);\r\n     }\r\n     assert(!ArrowArrayIsReleased(src));\r\n   ```\r\n   \r\n   Both of these will break code like:\r\n   ```c\r\n   struct ArrowArray local; /* local.release might not be NULL */\r\n   ArrowArrayMove(some_array, &local);\r\n   ```\r\n   Which would be worthy of a different warning comment\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T18:29:33.683+0000",
                    "updated": "2020-02-25T18:29:33.683+0000",
                    "started": "2020-02-25T18:29:33.682+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392775",
                    "issueId": "13286852"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286852/worklog/392776",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6483: ARROW-7913: [C++][Python][R] C++ implementation of C data interface\nURL: https://github.com/apache/arrow/pull/6483#discussion_r383925279\n \n \n\n ##########\n File path: ci/docker/linux-apt-r.dockerfile\n ##########\n @@ -63,6 +67,18 @@ COPY ci/scripts/r_deps.sh /arrow/ci/scripts/\n COPY r/DESCRIPTION /arrow/r/\n RUN /arrow/ci/scripts/r_deps.sh /arrow\n \n+# Set up Python 3 and its dependencies\n+RUN ln -s /usr/bin/python3 /usr/local/bin/python && \\\n \n Review comment:\n   Should this be a call to `update-alternatives` or so?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T18:29:33.821+0000",
                    "updated": "2020-02-25T18:29:33.821+0000",
                    "started": "2020-02-25T18:29:33.821+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392776",
                    "issueId": "13286852"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286852/worklog/392777",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6483: ARROW-7913: [C++][Python][R] C++ implementation of C data interface\nURL: https://github.com/apache/arrow/pull/6483#discussion_r383942996\n \n \n\n ##########\n File path: cpp/src/arrow/c/util_internal.h\n ##########\n @@ -0,0 +1,68 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+namespace arrow {\n+namespace internal {\n+\n+struct SchemaExportTraits {\n+  typedef struct ArrowSchema CType;\n+  static constexpr auto IsReleasedFunc = &ArrowSchemaIsReleased;\n \n Review comment:\n   This doesn't appear to be used\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T18:29:33.825+0000",
                    "updated": "2020-02-25T18:29:33.825+0000",
                    "started": "2020-02-25T18:29:33.824+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392777",
                    "issueId": "13286852"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286852/worklog/392778",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6483: ARROW-7913: [C++][Python][R] C++ implementation of C data interface\nURL: https://github.com/apache/arrow/pull/6483#discussion_r383945936\n \n \n\n ##########\n File path: cpp/src/arrow/record_batch.cc\n ##########\n @@ -54,38 +54,31 @@ int RecordBatch::num_columns() const { return schema_->num_fields(); }\n /// \\brief A basic, non-lazy in-memory record batch\n class SimpleRecordBatch : public RecordBatch {\n  public:\n-  SimpleRecordBatch(const std::shared_ptr<Schema>& schema, int64_t num_rows,\n+  SimpleRecordBatch(std::shared_ptr<Schema> schema, int64_t num_rows,\n                     const std::vector<std::shared_ptr<Array>>& columns)\n-      : RecordBatch(schema, num_rows) {\n+      : RecordBatch(std::move(schema), num_rows) {\n \n Review comment:\n   :+1:\r\n   \r\n   In fact, this constructor and the one below could be consolidated\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T18:29:34.394+0000",
                    "updated": "2020-02-25T18:29:34.394+0000",
                    "started": "2020-02-25T18:29:34.394+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392778",
                    "issueId": "13286852"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286852/worklog/392779",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6483: ARROW-7913: [C++][Python][R] C++ implementation of C data interface\nURL: https://github.com/apache/arrow/pull/6483#discussion_r383942688\n \n \n\n ##########\n File path: cpp/src/arrow/c/util_internal.h\n ##########\n @@ -0,0 +1,68 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n \n Review comment:\n   ```suggestion\r\n   #include \"arrow/c/helpers.h\"\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T18:29:34.395+0000",
                    "updated": "2020-02-25T18:29:34.395+0000",
                    "started": "2020-02-25T18:29:34.394+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392779",
                    "issueId": "13286852"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286852/worklog/392780",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6483: ARROW-7913: [C++][Python][R] C++ implementation of C data interface\nURL: https://github.com/apache/arrow/pull/6483#discussion_r383944183\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/json_simple.cc\n ##########\n @@ -713,6 +756,11 @@ Status GetConverter(const std::shared_ptr<DataType>& type,\n                     std::shared_ptr<Converter>* out) {\n   std::shared_ptr<Converter> res;\n \n+  auto not_implemented = [&]() -> Status {\n \n Review comment:\n   ```suggestion\r\n     auto not_implemented = [&] {\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T18:29:34.537+0000",
                    "updated": "2020-02-25T18:29:34.537+0000",
                    "started": "2020-02-25T18:29:34.537+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392780",
                    "issueId": "13286852"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286852/worklog/392781",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6483: ARROW-7913: [C++][Python][R] C++ implementation of C data interface\nURL: https://github.com/apache/arrow/pull/6483#discussion_r383935288\n \n \n\n ##########\n File path: cpp/src/arrow/c/helpers.h\n ##########\n @@ -0,0 +1,73 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"arrow/c/abi.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+inline int ArrowSchemaIsReleased(const struct ArrowSchema* schema) {\n+  return schema->release == NULL;\n+}\n+\n+inline void ArrowSchemaMarkReleased(struct ArrowSchema* schema) {\n+  schema->release = NULL;\n+}\n+\n+inline void ArrowSchemaMove(struct ArrowSchema* src, struct ArrowSchema* dest) {\n+  assert(dest != src);\n+  assert(!ArrowSchemaIsReleased(src));\n+  memcpy(dest, src, sizeof(struct ArrowSchema));\n+  ArrowSchemaMarkReleased(src);\n+}\n+\n+inline void ArrowSchemaRelease(struct ArrowSchema* schema) {\n+  if (!ArrowSchemaIsReleased(schema)) {\n+    schema->release(schema);\n+    assert(ArrowSchemaIsReleased(schema));\n+  }\n+}\n+\n+inline int ArrowArrayIsReleased(const struct ArrowArray* array) {\n+  return array->release == NULL;\n+}\n+\n+inline void ArrowArrayMarkReleased(struct ArrowArray* array) { array->release = NULL; }\n+\n+inline void ArrowArrayMove(struct ArrowArray* src, struct ArrowArray* dest) {\n+  assert(dest != src);\n+  assert(!ArrowArrayIsReleased(src));\n \n Review comment:\n   (the same logic applies to `ArrowSchema`, of course)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T18:29:34.540+0000",
                    "updated": "2020-02-25T18:29:34.540+0000",
                    "started": "2020-02-25T18:29:34.540+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392781",
                    "issueId": "13286852"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286852/worklog/392782",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6483: ARROW-7913: [C++][Python][R] C++ implementation of C data interface\nURL: https://github.com/apache/arrow/pull/6483#discussion_r383941233\n \n \n\n ##########\n File path: cpp/src/arrow/c/util_internal.h\n ##########\n @@ -0,0 +1,68 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+namespace arrow {\n+namespace internal {\n+\n+struct SchemaExportTraits {\n+  typedef struct ArrowSchema CType;\n+  static constexpr auto IsReleasedFunc = &ArrowSchemaIsReleased;\n+  static constexpr auto ReleaseFunc = &ArrowSchemaRelease;\n+};\n+\n+struct ArrayExportTraits {\n+  typedef struct ArrowArray CType;\n+  static constexpr auto IsReleasedFunc = &ArrowArrayIsReleased;\n+  static constexpr auto ReleaseFunc = &ArrowArrayRelease;\n+};\n+\n+// A RAII-style object to release a C Array / Schema struct at block scope exit.\n+template <typename Traits>\n+class ExportGuard {\n+ public:\n+  using CType = typename Traits::CType;\n+\n+  explicit ExportGuard(CType* c_export) : c_export_(c_export) {}\n+\n+  ARROW_DEFAULT_MOVE_AND_ASSIGN(ExportGuard);\n \n Review comment:\n   I'm not positive this will set `c_export_` to null when moved from.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T18:29:34.870+0000",
                    "updated": "2020-02-25T18:29:34.870+0000",
                    "started": "2020-02-25T18:29:34.869+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392782",
                    "issueId": "13286852"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286852/worklog/392783",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6483: ARROW-7913: [C++][Python][R] C++ implementation of C data interface\nURL: https://github.com/apache/arrow/pull/6483#discussion_r383974471\n \n \n\n ##########\n File path: cpp/src/arrow/c/bridge.cc\n ##########\n @@ -0,0 +1,1579 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/c/bridge.h\"\n+\n+#include <algorithm>\n+#include <cstring>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/c/helpers.h\"\n+#include \"arrow/c/util_internal.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/stl_allocator.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit_util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/key_value_metadata.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/parsing.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+using internal::checked_pointer_cast;\n+\n+using internal::ArrayExportGuard;\n+using internal::ArrayExportTraits;\n+using internal::SchemaExportGuard;\n+using internal::SchemaExportTraits;\n+\n+// TODO export / import Extension types and arrays\n+\n+namespace {\n+\n+Status ExportingNotImplemented(const DataType& type) {\n+  return Status::NotImplemented(\"Exporting \", type.ToString(), \" array not supported\");\n+}\n+\n+// Allocate exported private data using MemoryPool,\n+// to allow accounting memory and checking for memory leaks.\n+\n+// XXX use Gandiva's SimpleArena?\n+\n+template <typename T>\n+using PoolVector = std::vector<T, ::arrow::stl::allocator<T>>;\n+\n+template <typename Derived>\n+struct PoolAllocationMixin {\n+  static void* operator new(size_t size) {\n+    DCHECK_EQ(size, sizeof(Derived));\n+    uint8_t* data;\n+    ARROW_CHECK_OK(default_memory_pool()->Allocate(static_cast<int64_t>(size), &data));\n+    return data;\n+  }\n+\n+  static void operator delete(void* ptr) {\n+    default_memory_pool()->Free(reinterpret_cast<uint8_t*>(ptr), sizeof(Derived));\n+  }\n+};\n+\n+//////////////////////////////////////////////////////////////////////////\n+// C schema export\n+\n+struct ExportedSchemaPrivateData : PoolAllocationMixin<ExportedSchemaPrivateData> {\n+  std::string format_;\n+  std::string name_;\n+  std::string metadata_;\n+  struct ArrowSchema dictionary_;\n+  PoolVector<struct ArrowSchema> children_;\n+  PoolVector<struct ArrowSchema*> child_pointers_;\n+\n+  ExportedSchemaPrivateData() = default;\n+  ARROW_DEFAULT_MOVE_AND_ASSIGN(ExportedSchemaPrivateData);\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(ExportedSchemaPrivateData);\n+};\n+\n+void ReleaseExportedSchema(struct ArrowSchema* schema) {\n+  if (ArrowSchemaIsReleased(schema)) {\n+    return;\n+  }\n+  for (int64_t i = 0; i < schema->n_children; ++i) {\n+    struct ArrowSchema* child = schema->children[i];\n+    ArrowSchemaRelease(child);\n+    DCHECK(ArrowSchemaIsReleased(child))\n+        << \"Child release callback should have marked it released\";\n+  }\n+  struct ArrowSchema* dict = schema->dictionary;\n+  if (dict != nullptr) {\n+    ArrowSchemaRelease(dict);\n+    DCHECK(ArrowSchemaIsReleased(dict))\n+        << \"Dictionary release callback should have marked it released\";\n+  }\n+  DCHECK_NE(schema->private_data, nullptr);\n+  delete reinterpret_cast<ExportedSchemaPrivateData*>(schema->private_data);\n+\n+  ArrowSchemaMarkReleased(schema);\n+}\n+\n+template <typename SizeType>\n+Result<int32_t> DowncastMetadataSize(SizeType size) {\n+  auto res = static_cast<int32_t>(size);\n+  if (res < 0 || static_cast<SizeType>(res) != size) {\n+    return Status::Invalid(\"Metadata too large (more than 2**31 items or bytes)\");\n+  }\n+  return res;\n+}\n+\n+Result<std::string> EncodeMetadata(const KeyValueMetadata& metadata) {\n+  ARROW_ASSIGN_OR_RAISE(auto npairs, DowncastMetadataSize(metadata.size()));\n+  std::string exported;\n+\n+  // Pre-compute total string size\n+  size_t total_size = 4;\n+  for (int32_t i = 0; i < npairs; ++i) {\n+    total_size += 8 + metadata.key(i).length() + metadata.value(i).length();\n+  }\n+  exported.resize(total_size);\n+\n+  char* data_start = &exported[0];\n+  char* data = data_start;\n+  auto write_int32 = [&](int32_t v) -> void {\n+    memcpy(data, &v, 4);\n+    data += 4;\n+  };\n+  auto write_string = [&](const std::string& s) -> Status {\n+    ARROW_ASSIGN_OR_RAISE(auto len, DowncastMetadataSize(s.length()));\n+    write_int32(len);\n+    if (len > 0) {\n+      memcpy(data, s.data(), len);\n+      data += len;\n+    }\n+    return Status::OK();\n+  };\n+\n+  write_int32(npairs);\n+  for (int32_t i = 0; i < npairs; ++i) {\n+    RETURN_NOT_OK(write_string(metadata.key(i)));\n+    RETURN_NOT_OK(write_string(metadata.value(i)));\n+  }\n+  DCHECK_EQ(static_cast<size_t>(data - data_start), total_size);\n+  return exported;\n+}\n+\n+struct SchemaExporter {\n+  Status ExportField(const Field& field) {\n+    export_.name_ = field.name();\n+    flags_ = field.nullable() ? ARROW_FLAG_NULLABLE : 0;\n+\n+    const DataType& type = *field.type();\n+    RETURN_NOT_OK(ExportFormat(type));\n+    RETURN_NOT_OK(ExportChildren(type.children()));\n+    RETURN_NOT_OK(ExportMetadata(field.metadata().get()));\n+    return Status::OK();\n+  }\n+\n+  Status ExportType(const DataType& type) {\n+    flags_ = ARROW_FLAG_NULLABLE;\n+\n+    RETURN_NOT_OK(ExportFormat(type));\n+    RETURN_NOT_OK(ExportChildren(type.children()));\n+    return Status::OK();\n+  }\n+\n+  Status ExportSchema(const Schema& schema) {\n+    static StructType dummy_struct_type({});\n+    flags_ = 0;\n+\n+    RETURN_NOT_OK(ExportFormat(dummy_struct_type));\n+    RETURN_NOT_OK(ExportChildren(schema.fields()));\n+    RETURN_NOT_OK(ExportMetadata(schema.metadata().get()));\n+    return Status::OK();\n+  }\n+\n+  // Finalize exporting by setting C struct fields and allocating\n+  // autonomous private data for each schema node.\n+  //\n+  // This function can't fail, as properly reclaiming memory in case of error\n+  // would be too fragile.  After this function returns, memory is reclaimed\n+  // by calling the release() pointer in the top level ArrowSchema struct.\n+  void Finish(struct ArrowSchema* c_struct) {\n+    // First, create permanent ExportedSchemaPrivateData\n+    auto pdata = new ExportedSchemaPrivateData(std::move(export_));\n+\n+    // Second, finish dictionary and children.\n+    if (dict_exporter_) {\n+      dict_exporter_->Finish(&pdata->dictionary_);\n+    }\n+    pdata->child_pointers_.resize(child_exporters_.size(), nullptr);\n+    for (size_t i = 0; i < child_exporters_.size(); ++i) {\n+      auto ptr = pdata->child_pointers_[i] = &pdata->children_[i];\n+      child_exporters_[i].Finish(ptr);\n+    }\n+\n+    // Third, fill C struct.\n+    DCHECK_NE(c_struct, nullptr);\n+    memset(c_struct, 0, sizeof(*c_struct));\n+\n+    c_struct->format = pdata->format_.c_str();\n+    c_struct->name = pdata->name_.c_str();\n+    c_struct->metadata = pdata->metadata_.empty() ? nullptr : pdata->metadata_.c_str();\n+    c_struct->flags = flags_;\n+\n+    c_struct->n_children = static_cast<int64_t>(child_exporters_.size());\n+    c_struct->children = pdata->child_pointers_.data();\n+    c_struct->dictionary = dict_exporter_ ? &pdata->dictionary_ : nullptr;\n+    c_struct->private_data = pdata;\n+    c_struct->release = ReleaseExportedSchema;\n+  }\n+\n+  Status ExportFormat(const DataType& type) {\n+    if (type.id() == Type::DICTIONARY) {\n+      const auto& dict_type = checked_cast<const DictionaryType&>(type);\n+      if (dict_type.ordered()) {\n+        flags_ |= ARROW_FLAG_DICTIONARY_ORDERED;\n+      }\n+      // Dictionary type: parent struct describes index type,\n+      // child dictionary struct describes value type.\n+      RETURN_NOT_OK(VisitTypeInline(*dict_type.index_type(), this));\n+      dict_exporter_.reset(new SchemaExporter());\n+      RETURN_NOT_OK(dict_exporter_->ExportType(*dict_type.value_type()));\n+    } else {\n+      RETURN_NOT_OK(VisitTypeInline(type, this));\n+    }\n+    DCHECK(!export_.format_.empty());\n+    return Status::OK();\n+  }\n+\n+  Status ExportChildren(const std::vector<std::shared_ptr<Field>>& fields) {\n+    export_.children_.resize(fields.size());\n+    child_exporters_.resize(fields.size());\n+    for (size_t i = 0; i < fields.size(); ++i) {\n+      RETURN_NOT_OK(child_exporters_[i].ExportField(*fields[i]));\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status ExportMetadata(const KeyValueMetadata* metadata) {\n+    if (metadata != nullptr && metadata->size() >= 0) {\n+      ARROW_ASSIGN_OR_RAISE(export_.metadata_, EncodeMetadata(*metadata));\n+    }\n+    return Status::OK();\n+  }\n+\n+  // Type-specific visitors\n+\n+  Status Visit(const DataType& type) { return ExportingNotImplemented(type); }\n+\n+  Status Visit(const NullType& type) {\n \n Review comment:\n   In order to reduce boilerplate (and therefore increase readability), please add `SetFormat` or so:\r\n   ```suggestion\r\n     Status Visit(const NullType& type) { return SetFormat(\"n\"); }\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T18:29:34.905+0000",
                    "updated": "2020-02-25T18:29:34.905+0000",
                    "started": "2020-02-25T18:29:34.904+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392783",
                    "issueId": "13286852"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286852/worklog/392784",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6483: ARROW-7913: [C++][Python][R] C++ implementation of C data interface\nURL: https://github.com/apache/arrow/pull/6483#discussion_r383969562\n \n \n\n ##########\n File path: cpp/src/arrow/c/bridge.cc\n ##########\n @@ -0,0 +1,1579 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/c/bridge.h\"\n+\n+#include <algorithm>\n+#include <cstring>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/c/helpers.h\"\n+#include \"arrow/c/util_internal.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/stl_allocator.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit_util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/key_value_metadata.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/parsing.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+using internal::checked_pointer_cast;\n+\n+using internal::ArrayExportGuard;\n+using internal::ArrayExportTraits;\n+using internal::SchemaExportGuard;\n+using internal::SchemaExportTraits;\n+\n+// TODO export / import Extension types and arrays\n+\n+namespace {\n+\n+Status ExportingNotImplemented(const DataType& type) {\n+  return Status::NotImplemented(\"Exporting \", type.ToString(), \" array not supported\");\n+}\n+\n+// Allocate exported private data using MemoryPool,\n+// to allow accounting memory and checking for memory leaks.\n+\n+// XXX use Gandiva's SimpleArena?\n+\n+template <typename T>\n+using PoolVector = std::vector<T, ::arrow::stl::allocator<T>>;\n+\n+template <typename Derived>\n+struct PoolAllocationMixin {\n \n Review comment:\n   Custom new/delete operators are a fairly obscure feature of C++ and IMHO don't add anything to the readability of the code. Usage of this feature hides the customized allocation at the ~~call~~ allocate/free sites, so it's more difficult for readers to discover custom behaviour. I highly recommend instead using static member functions to make this explicit:\r\n   \r\n   ```suggestion\r\n   struct PoolAllocationMixin {\r\n     static constexpr int64_t size = sizeof(Derived);\r\n   \r\n     template <typename... Args>\r\n     static Derived* Create(Args&&... args) {\r\n       uint8_t* ptr;\r\n       ARROW_CHECK_OK(default_memory_pool()->Allocate(size, &ptr));\r\n       return new(ptr)Derived(std::forward<Args>(args)...);\r\n     }\r\n   \r\n     void Destroy(void* ptr) {\r\n       reinterpret_cast<Derived*>(ptr)->~Derived();\r\n       default_memory_pool()->Free(reinterpret_cast<uint8_t*>(ptr), size);\r\n     }\r\n   };\r\n   ```\r\n   \r\n   These can then be used as:\r\n   ```c++\r\n       // First, create permanent ExportedSchemaPrivateData\r\n       auto pdata = ExportedSchemaPrivateData::Create(std::move(export_));\r\n     //...\r\n   \r\n     DCHECK_NE(schema->private_data, nullptr);\r\n     ExportedSchemaPrivateData::Release(schema->private_data);\r\n   \r\n     ArrowSchemaMarkReleased(schema); \r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-25T18:29:35.215+0000",
                    "updated": "2020-02-25T18:29:35.215+0000",
                    "started": "2020-02-25T18:29:35.215+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "392784",
                    "issueId": "13286852"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 40800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5f0ea536[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@422b3ef4[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7ce089dc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6727c42a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7112dfad[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4a4d140c[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@329bdaf0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6bc44e1d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@ccc1b7f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2e03939e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42a390f4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@b5e8a1b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 40800,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Mar 02 20:01:01 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-03-02T20:01:01.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7913/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-02-21T17:26:00.000+0000",
        "updated": "2020-03-02T22:03:36.000+0000",
        "timeoriginalestimate": null,
        "description": "See ARROW-7912",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "11h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 40800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Python][R] C++ implementation of C data interface",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286852/comment/17049601",
                    "id": "17049601",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 6483\n[https://github.com/apache/arrow/pull/6483]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-03-02T20:01:01.847+0000",
                    "updated": "2020-03-02T20:01:01.847+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0brfk:",
        "customfield_12314139": null
    }
}