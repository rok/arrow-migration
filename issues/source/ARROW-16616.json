{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13445835",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835",
    "key": "ARROW-16616",
    "fields": {
        "parent": {
            "id": "13473586",
            "key": "ARROW-17212",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13473586",
            "fields": {
                "summary": "[Python] Support lazy Dataset.filter",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                    "description": "The issue is open and ready for the assignee to start work on it.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                    "name": "Open",
                    "id": "1",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                        "id": 2,
                        "key": "new",
                        "colorName": "blue-gray",
                        "name": "To Do"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12352360",
                "id": "12352360",
                "description": "",
                "name": "11.0.0",
                "archived": false,
                "released": false
            }
        ],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12642301",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12642301",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13442385",
                    "key": "ARROW-16409",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442385",
                    "fields": {
                        "summary": "[C++][Python][R] Deprecate \"scanner\" (but keep \"scan node\") from public API",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/3",
            "description": "This issue is being actively worked on at the moment by the assignee.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
            "name": "In Progress",
            "id": "3",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                "id": 4,
                "key": "indeterminate",
                "colorName": "yellow",
                "name": "In Progress"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "aggregateprogress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16616/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 27,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/worklog/783475",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- opened a new pull request, #13409:\nURL: https://github.com/apache/arrow/pull/13409\n\n   Expose a `Dataset.filter` method that applies a filter to the dataset without actually loading it in memory.\n\n\n",
                    "created": "2022-06-21T16:54:30.741+0000",
                    "updated": "2022-06-21T16:54:30.741+0000",
                    "started": "2022-06-21T16:54:30.740+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "783475",
                    "issueId": "13445835"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/worklog/783478",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13409:\nURL: https://github.com/apache/arrow/pull/13409#issuecomment-1162020126\n\n   https://issues.apache.org/jira/browse/ARROW-16616\n\n\n",
                    "created": "2022-06-21T17:02:04.837+0000",
                    "updated": "2022-06-21T17:02:04.837+0000",
                    "started": "2022-06-21T17:02:04.837+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "783478",
                    "issueId": "13445835"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/worklog/783479",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13409:\nURL: https://github.com/apache/arrow/pull/13409#issuecomment-1162020152\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-06-21T17:02:06.748+0000",
                    "updated": "2022-06-21T17:02:06.748+0000",
                    "started": "2022-06-21T17:02:06.747+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "783479",
                    "issueId": "13445835"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/worklog/785640",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13409:\nURL: https://github.com/apache/arrow/pull/13409#issuecomment-1168840012\n\n   I have no idea whether we want to expose such lazy construction APIs on Dataset.\r\n   \r\n   cc @jorisvandenbossche \n\n\n",
                    "created": "2022-06-28T15:01:09.285+0000",
                    "updated": "2022-06-28T15:01:09.285+0000",
                    "started": "2022-06-28T15:01:09.284+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "785640",
                    "issueId": "13445835"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/worklog/785657",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on PR #13409:\nURL: https://github.com/apache/arrow/pull/13409#issuecomment-1168896418\n\n   > I have no idea whether we want to expose such lazy construction APIs on Dataset.\r\n   \r\n   FYI, this task has spawned from https://github.com/apache/arrow/pull/13155#discussion_r875076518 discussion\n\n\n",
                    "created": "2022-06-28T15:49:13.633+0000",
                    "updated": "2022-06-28T15:49:13.633+0000",
                    "started": "2022-06-28T15:49:13.633+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "785657",
                    "issueId": "13445835"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/worklog/787784",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on code in PR #13409:\nURL: https://github.com/apache/arrow/pull/13409#discussion_r913651121\n\n\n##########\ncpp/src/arrow/compute/exec/options.cc:\n##########\n@@ -61,5 +61,16 @@ Result<std::shared_ptr<SourceNodeOptions>> SourceNodeOptions::FromTable(\n       new SourceNodeOptions(table.schema(), batch_gen));\n }\n \n+Result<std::shared_ptr<SourceNodeOptions>> SourceNodeOptions::FromRecordBatchReader(\n+    std::shared_ptr<RecordBatchReader> reader, std::shared_ptr<Schema> schema,\n+    arrow::internal::Executor* exc) {\n\nReview Comment:\n   Just a nit, but `executor` is used elsewhere in the codebase.\r\n   ```suggestion\r\n       arrow::internal::Executor* executor) {\r\n   ```\n\n\n\n",
                    "created": "2022-07-05T10:40:31.673+0000",
                    "updated": "2022-07-05T10:40:31.673+0000",
                    "started": "2022-07-05T10:40:31.673+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "787784",
                    "issueId": "13445835"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/worklog/787791",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on code in PR #13409:\nURL: https://github.com/apache/arrow/pull/13409#discussion_r913679727\n\n\n##########\ncpp/src/arrow/compute/exec/options.cc:\n##########\n@@ -61,5 +61,16 @@ Result<std::shared_ptr<SourceNodeOptions>> SourceNodeOptions::FromTable(\n       new SourceNodeOptions(table.schema(), batch_gen));\n }\n \n+Result<std::shared_ptr<SourceNodeOptions>> SourceNodeOptions::FromRecordBatchReader(\n+    std::shared_ptr<RecordBatchReader> reader, std::shared_ptr<Schema> schema,\n+    arrow::internal::Executor* exc) {\n\nReview Comment:\n   I copied the original signature from the previous `SourceNodeOptions::FromTable` which had `exec`. I renamed the parameter in both places.\n\n\n\n",
                    "created": "2022-07-05T11:16:01.091+0000",
                    "updated": "2022-07-05T11:16:01.091+0000",
                    "started": "2022-07-05T11:16:01.091+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "787791",
                    "issueId": "13445835"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/worklog/787868",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13409:\nURL: https://github.com/apache/arrow/pull/13409#discussion_r913843039\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -368,5 +368,19 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n    nums: [[6,8,10]]\n    chars: [[\"f\",\"h\",\"l\"]]\n \n-:class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n-passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+:class:`.Dataset` can be filtered with :meth:`.Dataset.filter` method too.\n\nReview Comment:\n   Wording suggestion\r\n   ```suggestion\r\n   :class:`.Dataset` can similarly be filtered with the :meth:`.Dataset.filter` method.\r\n   ```\n\n\n\n##########\ncpp/src/arrow/compute/exec/options.cc:\n##########\n@@ -49,17 +49,28 @@ std::string ToString(JoinType t) {\n }\n \n Result<std::shared_ptr<SourceNodeOptions>> SourceNodeOptions::FromTable(\n-    const Table& table, arrow::internal::Executor* exc) {\n+    const Table& table, arrow::internal::Executor* executor) {\n   std::shared_ptr<RecordBatchReader> reader = std::make_shared<TableBatchReader>(table);\n \n-  if (exc == nullptr) return Status::TypeError(\"No executor provided.\");\n+  if (executor == nullptr) return Status::TypeError(\"No executor provided.\");\n \n   // Map the RecordBatchReader to a SourceNode\n-  ARROW_ASSIGN_OR_RAISE(auto batch_gen, MakeReaderGenerator(std::move(reader), exc));\n+  ARROW_ASSIGN_OR_RAISE(auto batch_gen, MakeReaderGenerator(std::move(reader), executor));\n \n   return std::shared_ptr<SourceNodeOptions>(\n       new SourceNodeOptions(table.schema(), batch_gen));\n }\n \n+Result<std::shared_ptr<SourceNodeOptions>> SourceNodeOptions::FromRecordBatchReader(\n+    std::shared_ptr<RecordBatchReader> reader, std::shared_ptr<Schema> schema,\n+    arrow::internal::Executor* executor) {\n+  if (executor == nullptr) return Status::TypeError(\"No executor provided.\");\n+\n+  // Map the RecordBatchReader to a SourceNode\n+  ARROW_ASSIGN_OR_RAISE(auto batch_gen, MakeReaderGenerator(std::move(reader), executor));\n+\n+  return std::shared_ptr<SourceNodeOptions>(new SourceNodeOptions(schema, batch_gen));\n\nReview Comment:\n   Nit: move parameter to avoid copying (you may need to reformat after that :-))\r\n   ```suggestion\r\n     return std::shared_ptr<SourceNodeOptions>(new SourceNodeOptions(std::move(schema), batch_gen));\r\n   ```\n\n\n\n##########\npython/pyarrow/_exec_plan.pyx:\n##########\n@@ -95,6 +98,23 @@ cdef execplan(inputs, output_type, vector[CDeclaration] plan, c_bool use_threads\n                 c_in_table, 1 << 20)\n             c_input_node_opts = static_pointer_cast[CExecNodeOptions, CTableSourceNodeOptions](\n                 c_tablesourceopts)\n+        elif isinstance(ipt, FilteredDataset):\n\nReview Comment:\n   I wonder why the existing code for Dataset below wouldn't work here. Especially, one creates a Source node, the other a Scan node. Is there a functional or performance difference? cc @westonpace for insight.\n\n\n\n##########\npython/pyarrow/_exec_plan.pyx:\n##########\n@@ -95,6 +98,23 @@ cdef execplan(inputs, output_type, vector[CDeclaration] plan, c_bool use_threads\n                 c_in_table, 1 << 20)\n             c_input_node_opts = static_pointer_cast[CExecNodeOptions, CTableSourceNodeOptions](\n                 c_tablesourceopts)\n+        elif isinstance(ipt, FilteredDataset):\n+            node_factory = \"source\"\n+            c_in_dataset = (<Dataset>ipt).unwrap()\n+            c_dataset_scanner = <shared_ptr[CScanner]>(\n+                (<Scanner>(<FilteredDataset>ipt)._make_scanner({})).unwrap()\n+            )\n+            c_recordbatchreader_in = <shared_ptr[CRecordBatchReader]>(\n\nReview Comment:\n   Same question here: why the explicit cast to `<shared_ptr[CRecordBatchReader]>`?\n\n\n\n##########\npython/pyarrow/_dataset.pyx:\n##########\n@@ -432,6 +443,46 @@ cdef class Dataset(_Weakrefable):\n                                               use_threads=use_threads, coalesce_keys=coalesce_keys,\n                                               output_type=InMemoryDataset)\n \n+cdef class FilteredDataset(Dataset):\n+    \"\"\"\n+    A Dataset with an applied filter.\n+\n+    Parameters\n+    ----------\n+    dataset : Dataset\n+        The dataset to which the filter should be applied.\n+    expression : Expression\n+        The filter that should be applied to the dataset.\n+    \"\"\"\n+\n+    def __init__(self, dataset, expression):\n+        self.init(<shared_ptr[CDataset]>(<Dataset>dataset).wrapped)\n+        self._filter = expression\n+\n+    cdef void init(self, const shared_ptr[CDataset]& sp):\n+        Dataset.init(self, sp)\n+        self._filter = None\n+\n+    def filter(self, expression):\n\nReview Comment:\n   Can you add a docstring here? It won't be inherited automatically from the parent, unfortunately.\n\n\n\n##########\npython/pyarrow/_exec_plan.pyx:\n##########\n@@ -95,6 +98,23 @@ cdef execplan(inputs, output_type, vector[CDeclaration] plan, c_bool use_threads\n                 c_in_table, 1 << 20)\n             c_input_node_opts = static_pointer_cast[CExecNodeOptions, CTableSourceNodeOptions](\n                 c_tablesourceopts)\n+        elif isinstance(ipt, FilteredDataset):\n+            node_factory = \"source\"\n+            c_in_dataset = (<Dataset>ipt).unwrap()\n+            c_dataset_scanner = <shared_ptr[CScanner]>(\n\nReview Comment:\n   I'm curious: why do you need the explicit cast to `shared_ptr[CScanner]` here?\n\n\n\n##########\npython/pyarrow/_dataset.pyx:\n##########\n@@ -432,6 +443,46 @@ cdef class Dataset(_Weakrefable):\n                                               use_threads=use_threads, coalesce_keys=coalesce_keys,\n                                               output_type=InMemoryDataset)\n \n+cdef class FilteredDataset(Dataset):\n+    \"\"\"\n+    A Dataset with an applied filter.\n+\n+    Parameters\n+    ----------\n+    dataset : Dataset\n+        The dataset to which the filter should be applied.\n+    expression : Expression\n+        The filter that should be applied to the dataset.\n+    \"\"\"\n+\n+    def __init__(self, dataset, expression):\n+        self.init(<shared_ptr[CDataset]>(<Dataset>dataset).wrapped)\n+        self._filter = expression\n+\n+    cdef void init(self, const shared_ptr[CDataset]& sp):\n+        Dataset.init(self, sp)\n+        self._filter = None\n+\n+    def filter(self, expression):\n+        cdef:\n+            FilteredDataset filtered_dataset\n+\n+        if self._filter is not None:\n+            new_filter = self._filter & expression\n+        else:\n+            new_filter = expression\n+        filtered_dataset = self.__class__.__new__(self.__class__)\n+        filtered_dataset.init(self.wrapped)\n+        filtered_dataset._filter = new_filter\n+        return filtered_dataset\n+\n+    cdef Scanner _make_scanner(self, options):\n+        scanner_options = dict(options, filter=self._filter)\n+        return Scanner.from_dataset(self, **scanner_options)\n+\n+    def scanner(self, **kwargs):\n\nReview Comment:\n   Here as well, we should probably add a docstring.\r\n   (or try to arrange the code such that overriding isn't possible? perhaps by delegating to `_make_scanner` both in the base class and here?)\n\n\n\n##########\npython/pyarrow/_dataset.pyx:\n##########\n@@ -432,6 +443,46 @@ cdef class Dataset(_Weakrefable):\n                                               use_threads=use_threads, coalesce_keys=coalesce_keys,\n                                               output_type=InMemoryDataset)\n \n+cdef class FilteredDataset(Dataset):\n+    \"\"\"\n+    A Dataset with an applied filter.\n+\n+    Parameters\n+    ----------\n+    dataset : Dataset\n+        The dataset to which the filter should be applied.\n+    expression : Expression\n+        The filter that should be applied to the dataset.\n+    \"\"\"\n+\n+    def __init__(self, dataset, expression):\n+        self.init(<shared_ptr[CDataset]>(<Dataset>dataset).wrapped)\n+        self._filter = expression\n+\n+    cdef void init(self, const shared_ptr[CDataset]& sp):\n+        Dataset.init(self, sp)\n+        self._filter = None\n+\n+    def filter(self, expression):\n+        cdef:\n+            FilteredDataset filtered_dataset\n+\n+        if self._filter is not None:\n+            new_filter = self._filter & expression\n+        else:\n+            new_filter = expression\n+        filtered_dataset = self.__class__.__new__(self.__class__)\n+        filtered_dataset.init(self.wrapped)\n+        filtered_dataset._filter = new_filter\n+        return filtered_dataset\n+\n+    cdef Scanner _make_scanner(self, options):\n+        scanner_options = dict(options, filter=self._filter)\n+        return Scanner.from_dataset(self, **scanner_options)\n\nReview Comment:\n   Simpler wording:\r\n   ```suggestion\r\n           return Scanner.from_dataset(self, filter=self._filter, **options)\r\n   ```\n\n\n\n",
                    "created": "2022-07-05T14:19:54.229+0000",
                    "updated": "2022-07-05T14:19:54.229+0000",
                    "started": "2022-07-05T14:19:54.228+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "787868",
                    "issueId": "13445835"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/worklog/787872",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on code in PR #13409:\nURL: https://github.com/apache/arrow/pull/13409#discussion_r913867548\n\n\n##########\ncpp/src/arrow/compute/exec/options.cc:\n##########\n@@ -49,17 +49,28 @@ std::string ToString(JoinType t) {\n }\n \n Result<std::shared_ptr<SourceNodeOptions>> SourceNodeOptions::FromTable(\n-    const Table& table, arrow::internal::Executor* exc) {\n+    const Table& table, arrow::internal::Executor* executor) {\n   std::shared_ptr<RecordBatchReader> reader = std::make_shared<TableBatchReader>(table);\n \n-  if (exc == nullptr) return Status::TypeError(\"No executor provided.\");\n+  if (executor == nullptr) return Status::TypeError(\"No executor provided.\");\n \n   // Map the RecordBatchReader to a SourceNode\n-  ARROW_ASSIGN_OR_RAISE(auto batch_gen, MakeReaderGenerator(std::move(reader), exc));\n+  ARROW_ASSIGN_OR_RAISE(auto batch_gen, MakeReaderGenerator(std::move(reader), executor));\n \n   return std::shared_ptr<SourceNodeOptions>(\n       new SourceNodeOptions(table.schema(), batch_gen));\n }\n \n+Result<std::shared_ptr<SourceNodeOptions>> SourceNodeOptions::FromRecordBatchReader(\n+    std::shared_ptr<RecordBatchReader> reader, std::shared_ptr<Schema> schema,\n+    arrow::internal::Executor* executor) {\n+  if (executor == nullptr) return Status::TypeError(\"No executor provided.\");\n+\n+  // Map the RecordBatchReader to a SourceNode\n+  ARROW_ASSIGN_OR_RAISE(auto batch_gen, MakeReaderGenerator(std::move(reader), executor));\n+\n+  return std::shared_ptr<SourceNodeOptions>(new SourceNodeOptions(schema, batch_gen));\n\nReview Comment:\n   :+1:\n\n\n\n",
                    "created": "2022-07-05T14:30:30.467+0000",
                    "updated": "2022-07-05T14:30:30.467+0000",
                    "started": "2022-07-05T14:30:30.467+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "787872",
                    "issueId": "13445835"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/worklog/787873",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on code in PR #13409:\nURL: https://github.com/apache/arrow/pull/13409#discussion_r913868111\n\n\n##########\npython/pyarrow/_dataset.pyx:\n##########\n@@ -432,6 +443,46 @@ cdef class Dataset(_Weakrefable):\n                                               use_threads=use_threads, coalesce_keys=coalesce_keys,\n                                               output_type=InMemoryDataset)\n \n+cdef class FilteredDataset(Dataset):\n+    \"\"\"\n+    A Dataset with an applied filter.\n+\n+    Parameters\n+    ----------\n+    dataset : Dataset\n+        The dataset to which the filter should be applied.\n+    expression : Expression\n+        The filter that should be applied to the dataset.\n+    \"\"\"\n+\n+    def __init__(self, dataset, expression):\n+        self.init(<shared_ptr[CDataset]>(<Dataset>dataset).wrapped)\n+        self._filter = expression\n+\n+    cdef void init(self, const shared_ptr[CDataset]& sp):\n+        Dataset.init(self, sp)\n+        self._filter = None\n+\n+    def filter(self, expression):\n\nReview Comment:\n   oh, nice catch, I added it to the parent but forgot here.\n\n\n\n",
                    "created": "2022-07-05T14:31:00.567+0000",
                    "updated": "2022-07-05T14:31:00.567+0000",
                    "started": "2022-07-05T14:31:00.567+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "787873",
                    "issueId": "13445835"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/worklog/787874",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on code in PR #13409:\nURL: https://github.com/apache/arrow/pull/13409#discussion_r913871729\n\n\n##########\npython/pyarrow/_dataset.pyx:\n##########\n@@ -432,6 +443,46 @@ cdef class Dataset(_Weakrefable):\n                                               use_threads=use_threads, coalesce_keys=coalesce_keys,\n                                               output_type=InMemoryDataset)\n \n+cdef class FilteredDataset(Dataset):\n+    \"\"\"\n+    A Dataset with an applied filter.\n+\n+    Parameters\n+    ----------\n+    dataset : Dataset\n+        The dataset to which the filter should be applied.\n+    expression : Expression\n+        The filter that should be applied to the dataset.\n+    \"\"\"\n+\n+    def __init__(self, dataset, expression):\n+        self.init(<shared_ptr[CDataset]>(<Dataset>dataset).wrapped)\n+        self._filter = expression\n+\n+    cdef void init(self, const shared_ptr[CDataset]& sp):\n+        Dataset.init(self, sp)\n+        self._filter = None\n+\n+    def filter(self, expression):\n+        cdef:\n+            FilteredDataset filtered_dataset\n+\n+        if self._filter is not None:\n+            new_filter = self._filter & expression\n+        else:\n+            new_filter = expression\n+        filtered_dataset = self.__class__.__new__(self.__class__)\n+        filtered_dataset.init(self.wrapped)\n+        filtered_dataset._filter = new_filter\n+        return filtered_dataset\n+\n+    cdef Scanner _make_scanner(self, options):\n+        scanner_options = dict(options, filter=self._filter)\n+        return Scanner.from_dataset(self, **scanner_options)\n\nReview Comment:\n   My original code was overwriting any filter provided in `options` with the one in `self._filter` (as providing a filter to `_make_scanner`\u00a0shouldn't be done. With the code you suggested it's going to error, which might even be better, but it's probably going to error with an unrelated error like `got multiple values for keyword argument 'x'` which might be confusing for the user.\r\n   \r\n   I guess I can just trap if `filter` is provided in options.\n\n\n\n",
                    "created": "2022-07-05T14:34:15.998+0000",
                    "updated": "2022-07-05T14:34:15.998+0000",
                    "started": "2022-07-05T14:34:15.997+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "787874",
                    "issueId": "13445835"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/worklog/787875",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on code in PR #13409:\nURL: https://github.com/apache/arrow/pull/13409#discussion_r913876367\n\n\n##########\npython/pyarrow/_exec_plan.pyx:\n##########\n@@ -95,6 +98,23 @@ cdef execplan(inputs, output_type, vector[CDeclaration] plan, c_bool use_threads\n                 c_in_table, 1 << 20)\n             c_input_node_opts = static_pointer_cast[CExecNodeOptions, CTableSourceNodeOptions](\n                 c_tablesourceopts)\n+        elif isinstance(ipt, FilteredDataset):\n\nReview Comment:\n   @westonpace might have a better answer.\r\n   \r\n   Going for CScanNode I would had to manually provide the `ScanOptions` myself.\r\n   I went for making a `RecordBatchReader` as that way I could reuse the Python logic in `FilteredDataset` that creates a scanner with the right filter, also in the future if `FilteredDataset._make_scanner` is extended to take care of more options, this code would benefit from that support for free.\r\n   \n\n\n\n",
                    "created": "2022-07-05T14:38:36.351+0000",
                    "updated": "2022-07-05T14:38:36.351+0000",
                    "started": "2022-07-05T14:38:36.351+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "787875",
                    "issueId": "13445835"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/worklog/787877",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on code in PR #13409:\nURL: https://github.com/apache/arrow/pull/13409#discussion_r913884529\n\n\n##########\npython/pyarrow/_exec_plan.pyx:\n##########\n@@ -95,6 +98,23 @@ cdef execplan(inputs, output_type, vector[CDeclaration] plan, c_bool use_threads\n                 c_in_table, 1 << 20)\n             c_input_node_opts = static_pointer_cast[CExecNodeOptions, CTableSourceNodeOptions](\n                 c_tablesourceopts)\n+        elif isinstance(ipt, FilteredDataset):\n+            node_factory = \"source\"\n+            c_in_dataset = (<Dataset>ipt).unwrap()\n+            c_dataset_scanner = <shared_ptr[CScanner]>(\n+                (<Scanner>(<FilteredDataset>ipt)._make_scanner({})).unwrap()\n+            )\n+            c_recordbatchreader_in = <shared_ptr[CRecordBatchReader]>(\n\nReview Comment:\n   Going to remove a bunch of explicit casts, they are a leftover from before I had enough type information in Cython code.\n\n\n\n",
                    "created": "2022-07-05T14:45:57.357+0000",
                    "updated": "2022-07-05T14:45:57.357+0000",
                    "started": "2022-07-05T14:45:57.357+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "787877",
                    "issueId": "13445835"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/worklog/787958",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on code in PR #13409:\nURL: https://github.com/apache/arrow/pull/13409#discussion_r914032940\n\n\n##########\npython/pyarrow/_dataset.pyx:\n##########\n@@ -432,6 +443,46 @@ cdef class Dataset(_Weakrefable):\n                                               use_threads=use_threads, coalesce_keys=coalesce_keys,\n                                               output_type=InMemoryDataset)\n \n+cdef class FilteredDataset(Dataset):\n+    \"\"\"\n+    A Dataset with an applied filter.\n+\n+    Parameters\n+    ----------\n+    dataset : Dataset\n+        The dataset to which the filter should be applied.\n+    expression : Expression\n+        The filter that should be applied to the dataset.\n+    \"\"\"\n+\n+    def __init__(self, dataset, expression):\n+        self.init(<shared_ptr[CDataset]>(<Dataset>dataset).wrapped)\n+        self._filter = expression\n+\n+    cdef void init(self, const shared_ptr[CDataset]& sp):\n+        Dataset.init(self, sp)\n+        self._filter = None\n+\n+    def filter(self, expression):\n\nReview Comment:\n   Added docstrings. To avoid having them going out of sync I added a reference to the original method documentation.\n\n\n\n",
                    "created": "2022-07-05T17:28:15.772+0000",
                    "updated": "2022-07-05T17:28:15.772+0000",
                    "started": "2022-07-05T17:28:15.772+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "787958",
                    "issueId": "13445835"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/worklog/787959",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on PR #13409:\nURL: https://github.com/apache/arrow/pull/13409#issuecomment-1175317539\n\n   @pitrou Addressed all comments, should be ready for re-review\n\n\n",
                    "created": "2022-07-05T17:28:32.516+0000",
                    "updated": "2022-07-05T17:28:32.516+0000",
                    "started": "2022-07-05T17:28:32.516+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "787959",
                    "issueId": "13445835"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/worklog/788074",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13409:\nURL: https://github.com/apache/arrow/pull/13409#discussion_r914281708\n\n\n##########\npython/pyarrow/_dataset.pyx:\n##########\n@@ -432,6 +447,73 @@ cdef class Dataset(_Weakrefable):\n                                               use_threads=use_threads, coalesce_keys=coalesce_keys,\n                                               output_type=InMemoryDataset)\n \n+cdef class FilteredDataset(Dataset):\n+    \"\"\"\n+    A Dataset with an applied filter.\n+\n+    Parameters\n+    ----------\n+    dataset : Dataset\n+        The dataset to which the filter should be applied.\n+    expression : Expression\n+        The filter that should be applied to the dataset.\n+    \"\"\"\n+\n+    def __init__(self, dataset, expression):\n+        self.init(<shared_ptr[CDataset]>(<Dataset>dataset).wrapped)\n+        self._filter = expression\n+\n+    cdef void init(self, const shared_ptr[CDataset]& sp):\n+        Dataset.init(self, sp)\n+        self._filter = None\n+\n+    def filter(self, expression):\n+        \"\"\"Apply an additional row filter to the filtered dataset.\n+\n+        Parameters\n+        ----------\n+        expression : Expression\n+            The filter that should be applied to the dataset.\n+\n+        Returns\n+        -------\n+        FilteredDataset\n+        \"\"\"\n+        cdef:\n+            FilteredDataset filtered_dataset\n+\n+        if self._filter is not None:\n\nReview Comment:\n   If `self._filter` can be `None` then what is the advantage of creating a separate `FilteredDataset` instead of just adding `_filter` to the existing `Dataset`?\n\n\n\n##########\npython/pyarrow/_dataset.pyx:\n##########\n@@ -432,6 +447,73 @@ cdef class Dataset(_Weakrefable):\n                                               use_threads=use_threads, coalesce_keys=coalesce_keys,\n                                               output_type=InMemoryDataset)\n \n+cdef class FilteredDataset(Dataset):\n+    \"\"\"\n+    A Dataset with an applied filter.\n+\n+    Parameters\n+    ----------\n+    dataset : Dataset\n+        The dataset to which the filter should be applied.\n+    expression : Expression\n+        The filter that should be applied to the dataset.\n+    \"\"\"\n+\n+    def __init__(self, dataset, expression):\n+        self.init(<shared_ptr[CDataset]>(<Dataset>dataset).wrapped)\n+        self._filter = expression\n+\n+    cdef void init(self, const shared_ptr[CDataset]& sp):\n+        Dataset.init(self, sp)\n+        self._filter = None\n+\n+    def filter(self, expression):\n+        \"\"\"Apply an additional row filter to the filtered dataset.\n+\n+        Parameters\n+        ----------\n+        expression : Expression\n+            The filter that should be applied to the dataset.\n+\n+        Returns\n+        -------\n+        FilteredDataset\n+        \"\"\"\n+        cdef:\n+            FilteredDataset filtered_dataset\n+\n+        if self._filter is not None:\n+            new_filter = self._filter & expression\n+        else:\n+            new_filter = expression\n+        filtered_dataset = self.__class__.__new__(self.__class__)\n+        filtered_dataset.init(self.wrapped)\n+        filtered_dataset._filter = new_filter\n+        return filtered_dataset\n+\n+    cdef Scanner _make_scanner(self, options):\n+        if \"filter\" in options:\n+            raise ValueError(\n+                \"Passing filter in scanner option is not valid for FilteredDataset.\"\n\nReview Comment:\n   Why wouldn't it just AND the incoming filter with the existing filter?\n\n\n\n##########\ncpp/src/arrow/compute/exec/options.cc:\n##########\n@@ -49,17 +49,29 @@ std::string ToString(JoinType t) {\n }\n \n Result<std::shared_ptr<SourceNodeOptions>> SourceNodeOptions::FromTable(\n-    const Table& table, arrow::internal::Executor* exc) {\n+    const Table& table, arrow::internal::Executor* executor) {\n   std::shared_ptr<RecordBatchReader> reader = std::make_shared<TableBatchReader>(table);\n \n-  if (exc == nullptr) return Status::TypeError(\"No executor provided.\");\n+  if (executor == nullptr) return Status::TypeError(\"No executor provided.\");\n \n   // Map the RecordBatchReader to a SourceNode\n-  ARROW_ASSIGN_OR_RAISE(auto batch_gen, MakeReaderGenerator(std::move(reader), exc));\n+  ARROW_ASSIGN_OR_RAISE(auto batch_gen, MakeReaderGenerator(std::move(reader), executor));\n \n   return std::shared_ptr<SourceNodeOptions>(\n       new SourceNodeOptions(table.schema(), batch_gen));\n }\n \n+Result<std::shared_ptr<SourceNodeOptions>> SourceNodeOptions::FromRecordBatchReader(\n+    std::shared_ptr<RecordBatchReader> reader, std::shared_ptr<Schema> schema,\n+    arrow::internal::Executor* executor) {\n+  if (executor == nullptr) return Status::TypeError(\"No executor provided.\");\n+\n+  // Map the RecordBatchReader to a SourceNode\n+  ARROW_ASSIGN_OR_RAISE(auto batch_gen, MakeReaderGenerator(std::move(reader), executor));\n+\n+  return std::shared_ptr<SourceNodeOptions>(\n+      new SourceNodeOptions(std::move(schema), batch_gen));\n\nReview Comment:\n   ```suggestion\r\n     return std::make_shared<SourceNodeOptions>(std::move(schema), std::move(batch_gen));\r\n   ```\n\n\n\n##########\npython/pyarrow/_exec_plan.pyx:\n##########\n@@ -95,6 +98,23 @@ cdef execplan(inputs, output_type, vector[CDeclaration] plan, c_bool use_threads\n                 c_in_table, 1 << 20)\n             c_input_node_opts = static_pointer_cast[CExecNodeOptions, CTableSourceNodeOptions](\n                 c_tablesourceopts)\n+        elif isinstance(ipt, FilteredDataset):\n\nReview Comment:\n   While there shouldn't be a significant performance difference this does seem a little less than ideal.  Could the `_make_scanner` method be changed to a method that creates scan options instead?\r\n   \r\n   Also, if the user only asks for some columns does the projection get passed down into the `ToRecordBatchReader` call?\n\n\n\n",
                    "created": "2022-07-05T23:40:43.400+0000",
                    "updated": "2022-07-05T23:40:43.400+0000",
                    "started": "2022-07-05T23:40:43.400+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "788074",
                    "issueId": "13445835"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/worklog/788287",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on PR #13409:\nURL: https://github.com/apache/arrow/pull/13409#issuecomment-1176317887\n\n   > \r\n   \r\n   \n\n\n",
                    "created": "2022-07-06T14:49:39.145+0000",
                    "updated": "2022-07-06T14:49:39.145+0000",
                    "started": "2022-07-06T14:49:39.145+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "788287",
                    "issueId": "13445835"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/worklog/788288",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- closed pull request #13409: ARROW-16616: [Python] Lazy datasets filtering\nURL: https://github.com/apache/arrow/pull/13409\n\n\n",
                    "created": "2022-07-06T14:49:39.930+0000",
                    "updated": "2022-07-06T14:49:39.930+0000",
                    "started": "2022-07-06T14:49:39.930+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "788288",
                    "issueId": "13445835"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/worklog/788289",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- opened a new pull request, #13409:\nURL: https://github.com/apache/arrow/pull/13409\n\n   Expose a `Dataset.filter` method that applies a filter to the dataset without actually loading it in memory.\r\n   \r\n   Addresses what was discussed in https://github.com/apache/arrow/pull/13155#discussion_r875076518\r\n   \r\n   - [x] Update documentation\r\n   - [x] Ensure the filtered dataset preserves the filter when writing it back\r\n   - [x] Ensure the filtered dataset preserves the filter when joining\r\n   - [x] Ensure the filtered dataset preserves the filter when applying standar `Dataset.something` methods.\n\n\n",
                    "created": "2022-07-06T14:49:45.992+0000",
                    "updated": "2022-07-06T14:49:45.992+0000",
                    "started": "2022-07-06T14:49:45.991+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "788289",
                    "issueId": "13445835"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/worklog/788659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on PR #13409:\nURL: https://github.com/apache/arrow/pull/13409#issuecomment-1177788975\n\n   I am personally also a bit wary of adding a new public class like `FilteredDataset` (at least until we have had the broader discussion about how we want to provide a dataframe-like / query object interface, as similar discussions will keep coming up for other methods). \r\n   If we want to provide this `filter()` method on the short term, I would also prefer doing it just on `Dataset`, as Weston suggested (that was also my original idea for this issue). Although that also creates its backwards compatibility issues of course, if we later let this method return an object backed by a query plan, as that then might not keep all methods/attributes that are currently available on Dataset. \n\n\n",
                    "created": "2022-07-07T15:25:46.115+0000",
                    "updated": "2022-07-07T15:25:46.115+0000",
                    "started": "2022-07-07T15:25:46.115+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "788659",
                    "issueId": "13445835"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 16200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6f8a03b5[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6b04f413[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@515fd6e4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1d3714b0[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7abc2953[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2b23bf67[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@464a411[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@21d3b2b9[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3abee161[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@c50b9d6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2db5d061[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@11cff914[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16200,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jul 25 08:14:33 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16616/watchers",
            "watchCount": 6,
            "isWatching": false
        },
        "created": "2022-05-19T12:59:30.000+0000",
        "updated": "2022-10-26T10:13:15.000+0000",
        "timeoriginalestimate": null,
        "description": "To keep the {{Dataset}} api compatible with the {{Table}} one in terms of analytics capabilities, we should add a {{Dataset.filter}} method. The initial POC was based on {{_table_filter}} but that required materialising all the {{Dataset}} content after filtering as it returned an {{{}InMemoryDataset{}}}.\u00a0\r\n\r\nGiven that {{Scanner}} can filter a dataset without actually materialising the data until a final step happens, it would be good to have {{Dataset.filter}} return some form of lazy dataset when the filter is only stored aside and the Scanner is created when data is actually retrieved.\r\n\r\nPS: Also update {{test_dataset_filter}} test to use the {{Dataset.filter}} method",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Allow lazy evaluation of filters in Dataset and add Datset.filter method",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/comment/17557141",
                    "id": "17557141",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
                        "name": "willjones127",
                        "key": "willjones127",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Will Jones",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I'm a little cautious about the idea of {{Dataset.filter()}} returning a {{Dataset}}, since it mixes up the purpose of {{Dataset}} and {{Scanner}}. If it did, what would this return then?\r\n\r\n{code:python}\r\nds.filter(ds.field(\"x\") > 2).scan(filter=ds.field(\"y\") < 3)\r\n{code}\r\n\r\nI think it might be better if {{Dataset.filter()}} returned a scanner with that filter. And then {{Scanner}} could also have {{filter()}} and {{project()}} methods to allow chaining. So you could do:\r\n\r\n{code:python}\r\n(\r\n  ds.filter(ds.field(\"x\") > 2)\r\n    .filter(ds.field(\"y\") < 4)\r\n    .project(\"x\", \"y\", \"z\")\r\n    .to_table()\r\n)\r\n{code}\r\n\r\nWhat do you think of that?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
                        "name": "willjones127",
                        "key": "willjones127",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Will Jones",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-06-21T21:54:48.733+0000",
                    "updated": "2022-06-21T21:56:40.221+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/comment/17557545",
                    "id": "17557545",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
                        "name": "amol-",
                        "key": "amol-",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
                        },
                        "displayName": "Alessandro Molina",
                        "active": true,
                        "timeZone": "Europe/Rome"
                    },
                    "body": "I'm not fond of relying on {{Scanner}} because it looks like violating the single responsibility principle as it would have to grow nearly the same capabilities of {{Dataset}} (for example if I want to do a join over filtered data, we would have to implement {{Scanner.join}} which doesn't seem to make much sense).\r\n\r\nAnother direction I thought about was going toward having a {{FilteredDataset}} class, that would still inherit from {{Dataset}}\u00a0but more clearly provide a separation of concerns.  ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
                        "name": "amol-",
                        "key": "amol-",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
                        },
                        "displayName": "Alessandro Molina",
                        "active": true,
                        "timeZone": "Europe/Rome"
                    },
                    "created": "2022-06-22T16:14:41.014+0000",
                    "updated": "2022-06-22T16:15:08.792+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/comment/17557549",
                    "id": "17557549",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "In the R package we handle this by building a separate query object that contains the Dataset (or RecordBatchReader, or Table, or whatever), and the query object contains the filtering etc. methods. So here, Dataset.filter would first create the query object from the Dataset and then calls the filter method on it. \r\n\r\nThat said, going that route (or the FilteredDataset path, for that matter) feels like a path to essentially creating ibis in pyarrow. I'd caution you to think twice before adding APIs like this since they become sticky and hard to remove later (look at how long ParquetDataset has lived past the creation of the general Dataset class).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-06-22T16:23:15.792+0000",
                    "updated": "2022-06-22T16:23:15.792+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/comment/17557566",
                    "id": "17557566",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
                        "name": "willjones127",
                        "key": "willjones127",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Will Jones",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "{quote}In the R package we handle this by building a separate query object that contains the Dataset (or RecordBatchReader, or Table, or whatever), and the query object contains the filtering etc. methods.\r\n{quote}\r\nYeah, I think it seems like the PR as-is would be trying to make {{Dataset}} into this kind of query object, which I don't think is it's purpose. {{Scanner}} seems closer to that to me, but it's also a bit of a mismatch.\r\n{quote}That said, going that route (or the FilteredDataset path, for that matter) feels like a path to essentially creating ibis in pyarrow.\r\n{quote}\r\nIMO we need to have a larger conversation about how much of Acero we want to expose in PyArrow. We might want a low-level API for creating exec plans, and maybe even some high-level functions like this. But seems like we should have a design doc to think about what our vision in here and how that does relate to developments in Ibis.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
                        "name": "willjones127",
                        "key": "willjones127",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Will Jones",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-06-22T16:55:08.684+0000",
                    "updated": "2022-06-22T16:55:08.684+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/comment/17557568",
                    "id": "17557568",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Scanner is one-shot though, you can't filter to create a Scanner and then filter it again, you can only Scan.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-06-22T16:58:26.379+0000",
                    "updated": "2022-06-22T16:58:26.379+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/comment/17557578",
                    "id": "17557578",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
                        "name": "willjones127",
                        "key": "willjones127",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Will Jones",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "{quote}Scanner is one-shot though, you can't filter to create a Scanner and then filter it again, you can only Scan.\r\n{quote}\r\nYeah, then I think we would need some other query class for representing deferred computations with Acero. Which again goes into the question of PyArrow vs Ibis purpose.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
                        "name": "willjones127",
                        "key": "willjones127",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Will Jones",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-06-22T17:25:09.834+0000",
                    "updated": "2022-06-22T17:25:09.834+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/comment/17557599",
                    "id": "17557599",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
                        "name": "amol-",
                        "key": "amol-",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
                        },
                        "displayName": "Alessandro Molina",
                        "active": true,
                        "timeZone": "Europe/Rome"
                    },
                    "body": "I don't see much of a conflict with Ibis on long term. Ibis is an interface to multiple query engines and the queries you build there can be run against different targets. It serves the purpose of having a single interface to an infrastructure agnostic environment. Write your Ibis code locally and deploy it against a production system that might run something very different from a Acero in-memory.\r\n\r\nPyArrow instead only exposes the features that are already available in Arrow itself, and it's something all the other bindings are doing too (R and Java do expose access to the compute engine). What you write in pyarrow won't be able to really grow too much in the direction of scaling on multiple nodes, so it's better positioned for quick data discovery without having to involve external dependencies than for the actual final product which will probably want to be based on IBIS.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
                        "name": "amol-",
                        "key": "amol-",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
                        },
                        "displayName": "Alessandro Molina",
                        "active": true,
                        "timeZone": "Europe/Rome"
                    },
                    "created": "2022-06-22T17:52:02.805+0000",
                    "updated": "2022-06-22T17:53:19.741+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/comment/17559209",
                    "id": "17559209",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I agree that scanner should not be used.  The term \"scanner\", in general, should probably go away from the public API.  The scanner in python is more of a record batch reader.\r\n\r\nI'm not sure I have much to add to the \"dataset\" vs \"query\" terminology.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-06-27T15:00:37.176+0000",
                    "updated": "2022-06-27T15:00:37.176+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13445835/comment/17570764",
                    "id": "17570764",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "body": "Postponing to 10.0, feel free to include it when the PR is ready.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "created": "2022-07-25T08:14:33.526+0000",
                    "updated": "2022-07-25T08:14:33.526+0000"
                }
            ],
            "maxResults": 9,
            "total": 9,
            "startAt": 0
        },
        "customfield_12311820": "0|z12ihc:",
        "customfield_12314139": null
    }
}