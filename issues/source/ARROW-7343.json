{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13272855",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855",
    "key": "ARROW-7343",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334621",
                "id": "12334621",
                "name": "FlightRPC"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 30600,
            "total": 30600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 30600,
            "total": 30600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7343/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 53,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/worklog/356496",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6003: ARROW-7343: [Java][FlightRPC] prevent leak in DoGet\nURL: https://github.com/apache/arrow/pull/6003\n \n \n   This changes ArrowMessage and FlightService/FlightClient so that if gRPC fails to actually write the message to the stream (as it occasionally does), we don't leak the memory associated with ArrowMessage. It also fixes a case where clients could block indefinitely in DoPut.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-09T19:32:40.343+0000",
                    "updated": "2019-12-09T19:32:40.343+0000",
                    "started": "2019-12-09T19:32:40.343+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "356496",
                    "issueId": "13272855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/worklog/356502",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on issue #6003: ARROW-7343: [Java][FlightRPC] prevent leak in DoGet\nURL: https://github.com/apache/arrow/pull/6003#issuecomment-563402738\n \n \n   Well that's embarassing, the test that we don't leak memory leaks.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-09T19:44:26.156+0000",
                    "updated": "2019-12-09T19:44:26.156+0000",
                    "started": "2019-12-09T19:44:26.156+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "356502",
                    "issueId": "13272855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/worklog/356506",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6003: ARROW-7343: [Java][FlightRPC] prevent leak in DoGet\nURL: https://github.com/apache/arrow/pull/6003#issuecomment-563403335\n \n \n   https://issues.apache.org/jira/browse/ARROW-7343\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-09T19:45:44.696+0000",
                    "updated": "2019-12-09T19:45:44.696+0000",
                    "started": "2019-12-09T19:45:44.696+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "356506",
                    "issueId": "13272855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/worklog/356664",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on issue #6003: ARROW-7343: [Java][FlightRPC] prevent leak in DoGet\nURL: https://github.com/apache/arrow/pull/6003#issuecomment-563487534\n \n \n   Let's hope this fixes it! There are some code paths where gRPC throws, causing us to skip cleanup.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-09T23:27:39.483+0000",
                    "updated": "2019-12-09T23:27:39.483+0000",
                    "started": "2019-12-09T23:27:39.483+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "356664",
                    "issueId": "13272855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/worklog/358149",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #6003: ARROW-7343: [Java][FlightRPC] prevent leak in DoGet\nURL: https://github.com/apache/arrow/pull/6003#issuecomment-564768542\n \n \n   Wow. I find it funny that Java needs some massaging for this where C++ would do fine :-)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-11T22:49:25.515+0000",
                    "updated": "2019-12-11T22:49:25.515+0000",
                    "started": "2019-12-11T22:49:25.514+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "358149",
                    "issueId": "13272855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/worklog/358150",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #6003: ARROW-7343: [Java][FlightRPC] prevent leak in DoGet\nURL: https://github.com/apache/arrow/pull/6003#issuecomment-564768591\n \n \n   cc @emkornfield for possible review.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-11T22:49:34.420+0000",
                    "updated": "2019-12-11T22:49:34.420+0000",
                    "started": "2019-12-11T22:49:34.420+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "358150",
                    "issueId": "13272855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/worklog/358335",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #6003: ARROW-7343: [Java][FlightRPC] prevent leak in DoGet\nURL: https://github.com/apache/arrow/pull/6003#discussion_r356971648\n \n \n\n ##########\n File path: java/flight/src/main/java/org/apache/arrow/flight/FlightStream.java\n ##########\n @@ -131,33 +131,53 @@ public DictionaryProvider takeDictionaryOwnership() {\n     return provider;\n   }\n \n+  /**\n+   * Get the descriptor for this stream. Only applicable on the server side of a DoPut operation. Will block until the\n+   * client sends the descriptor.\n+   */\n   public FlightDescriptor getDescriptor() {\n+    // This blocks until the schema message (with the descriptor) is sent.\n+    getRoot();\n     return descriptor;\n   }\n \n   /**\n    * Closes the stream (freeing any existing resources).\n    *\n-   * <p>If the stream is isn't complete and is cancellable this method will cancel the stream first.</p>\n+   * <p>If the stream is isn't complete and is cancellable, this method will cancel the stream first.</p>\n    */\n   public void close() throws Exception {\n-    if (!completed && cancellable != null) {\n-      cancel(\"Stream closed before end.\", null);\n+    RuntimeException cancelException = null;\n+    try {\n+      // cancel() can throw, but we still want to clean up resources.\n+      if (!completed && cancellable != null) {\n+        cancel(\"Stream closed before end.\", null);\n \n Review comment:\n   please add a comment indicating what the second parameter here (null is)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-12T06:07:21.118+0000",
                    "updated": "2019-12-12T06:07:21.118+0000",
                    "started": "2019-12-12T06:07:21.118+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "358335",
                    "issueId": "13272855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/worklog/358341",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #6003: ARROW-7343: [Java][FlightRPC] prevent leak in DoGet\nURL: https://github.com/apache/arrow/pull/6003#discussion_r356973182\n \n \n\n ##########\n File path: java/flight/src/main/java/org/apache/arrow/flight/FlightStream.java\n ##########\n @@ -131,33 +131,53 @@ public DictionaryProvider takeDictionaryOwnership() {\n     return provider;\n   }\n \n+  /**\n+   * Get the descriptor for this stream. Only applicable on the server side of a DoPut operation. Will block until the\n+   * client sends the descriptor.\n+   */\n   public FlightDescriptor getDescriptor() {\n+    // This blocks until the schema message (with the descriptor) is sent.\n+    getRoot();\n     return descriptor;\n   }\n \n   /**\n    * Closes the stream (freeing any existing resources).\n    *\n-   * <p>If the stream is isn't complete and is cancellable this method will cancel the stream first.</p>\n+   * <p>If the stream is isn't complete and is cancellable, this method will cancel the stream first.</p>\n    */\n   public void close() throws Exception {\n-    if (!completed && cancellable != null) {\n-      cancel(\"Stream closed before end.\", null);\n+    RuntimeException cancelException = null;\n+    try {\n+      // cancel() can throw, but we still want to clean up resources.\n+      if (!completed && cancellable != null) {\n+        cancel(\"Stream closed before end.\", null);\n+      }\n+    } catch (RuntimeException e) {\n+      cancelException = e;\n+    }\n+\n+    try {\n+      List<AutoCloseable> closeables = ImmutableList.copyOf(queue.toArray()).stream()\n+          .filter(t -> AutoCloseable.class.isAssignableFrom(t.getClass()))\n+          .map(t -> ((AutoCloseable) t))\n+          .collect(Collectors.toList());\n+\n+      final List<FieldVector> dictionaryVectors =\n+          dictionaries == null ? Collections.emptyList() : dictionaries.getDictionaryIds().stream()\n+              .map(id -> dictionaries.lookup(id).getVector()).collect(Collectors.toList());\n+\n+      // Must check for null since ImmutableList doesn't accept nulls\n+      AutoCloseables.close(Iterables.concat(closeables,\n+          dictionaryVectors,\n+          applicationMetadata != null ? ImmutableList.of(root.get(), applicationMetadata)\n \n Review comment:\n   this might be clearer using ImmutableList.Builder outside of this method call instead of a ternary element.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-12T06:14:39.448+0000",
                    "updated": "2019-12-12T06:14:39.448+0000",
                    "started": "2019-12-12T06:14:39.447+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "358341",
                    "issueId": "13272855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/worklog/358342",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #6003: ARROW-7343: [Java][FlightRPC] prevent leak in DoGet\nURL: https://github.com/apache/arrow/pull/6003#discussion_r356973280\n \n \n\n ##########\n File path: java/flight/src/main/java/org/apache/arrow/flight/FlightStream.java\n ##########\n @@ -131,33 +131,53 @@ public DictionaryProvider takeDictionaryOwnership() {\n     return provider;\n   }\n \n+  /**\n+   * Get the descriptor for this stream. Only applicable on the server side of a DoPut operation. Will block until the\n+   * client sends the descriptor.\n+   */\n   public FlightDescriptor getDescriptor() {\n+    // This blocks until the schema message (with the descriptor) is sent.\n+    getRoot();\n     return descriptor;\n   }\n \n   /**\n    * Closes the stream (freeing any existing resources).\n    *\n-   * <p>If the stream is isn't complete and is cancellable this method will cancel the stream first.</p>\n+   * <p>If the stream is isn't complete and is cancellable, this method will cancel the stream first.</p>\n    */\n   public void close() throws Exception {\n-    if (!completed && cancellable != null) {\n-      cancel(\"Stream closed before end.\", null);\n+    RuntimeException cancelException = null;\n+    try {\n+      // cancel() can throw, but we still want to clean up resources.\n+      if (!completed && cancellable != null) {\n+        cancel(\"Stream closed before end.\", null);\n+      }\n+    } catch (RuntimeException e) {\n+      cancelException = e;\n+    }\n+\n+    try {\n+      List<AutoCloseable> closeables = ImmutableList.copyOf(queue.toArray()).stream()\n+          .filter(t -> AutoCloseable.class.isAssignableFrom(t.getClass()))\n+          .map(t -> ((AutoCloseable) t))\n+          .collect(Collectors.toList());\n+\n+      final List<FieldVector> dictionaryVectors =\n+          dictionaries == null ? Collections.emptyList() : dictionaries.getDictionaryIds().stream()\n+              .map(id -> dictionaries.lookup(id).getVector()).collect(Collectors.toList());\n+\n+      // Must check for null since ImmutableList doesn't accept nulls\n+      AutoCloseables.close(Iterables.concat(closeables,\n+          dictionaryVectors,\n+          applicationMetadata != null ? ImmutableList.of(root.get(), applicationMetadata)\n \n Review comment:\n   I see this isn't really something you've chagned though.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-12T06:14:59.997+0000",
                    "updated": "2019-12-12T06:14:59.997+0000",
                    "started": "2019-12-12T06:14:59.996+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "358342",
                    "issueId": "13272855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/worklog/358345",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #6003: ARROW-7343: [Java][FlightRPC] prevent leak in DoGet\nURL: https://github.com/apache/arrow/pull/6003#discussion_r356973559\n \n \n\n ##########\n File path: java/flight/src/main/java/org/apache/arrow/flight/StreamPipe.java\n ##########\n @@ -71,8 +71,9 @@ public void onError(Throwable t) {\n       errorHandler.accept(t);\n       return;\n     }\n-    delegate.onError(StatusUtils.toGrpcException(t));\n+    // Set closed to true in case onCompleted throws so that we don't try to close again\n \n Review comment:\n   onError?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-12T06:16:26.978+0000",
                    "updated": "2019-12-12T06:16:26.978+0000",
                    "started": "2019-12-12T06:16:26.978+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "358345",
                    "issueId": "13272855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/worklog/358348",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #6003: ARROW-7343: [Java][FlightRPC] prevent leak in DoGet\nURL: https://github.com/apache/arrow/pull/6003#discussion_r356974036\n \n \n\n ##########\n File path: java/flight/src/test/java/org/apache/arrow/flight/TestLeak.java\n ##########\n @@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.types.FloatingPointPrecision;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Tests for scenarios where Flight could leak memory.\n+ */\n+public class TestLeak {\n+\n+  private static final int ROWS = 2048;\n+\n+  private static Schema getSchema() {\n+    return new Schema(Arrays.asList(\n+        Field.nullable(\"0\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"1\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"2\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"3\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"4\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"5\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"6\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"7\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"8\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"9\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"10\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE))\n+    ));\n+  }\n+\n+  /**\n+   * Ensure that if the client cancels, the server does not leak memory.\n+   *\n+   * <p>In gRPC, canceling the stream from the client sends an event to the server. Once processed, gRPC will start\n+   * silently rejecting messages sent by the server. However, Flight depends on gRPC processing these messages in order\n+   * to free the associated memory.\n+   */\n+  @Test\n+  public void testCancelingDoGetDoesNotLeak() {\n+    final AtomicBoolean callFinished = new AtomicBoolean();\n+    try (final BufferAllocator allocator = new RootAllocator(Long.MAX_VALUE);\n+        final FlightServer s =\n+            FlightTestUtil.getStartedServer(\n+                (location) -> FlightServer.builder(allocator, location, new LeakFlightProducer(allocator, callFinished))\n+                    .build());\n+        final FlightClient client = FlightClient.builder(allocator, s.getLocation()).build()) {\n+\n+      final FlightStream stream = client.getStream(new Ticket(new byte[0]));\n+      stream.getRoot();\n+      stream.cancel(\"Cancel\", null);\n+\n+      // Wait for the call to finish. (Closing the allocator while a call is ongoing is a guaranteed leak.)\n+      while (!callFinished.get()) {\n+        Thread.sleep(100);\n+      }\n+\n+      s.shutdown();\n+      s.awaitTermination();\n+    } catch (Exception e) {\n \n Review comment:\n   I think its generally more typical to declare the test method as throwing Exception (or the specific ones that are thrown) then wrapping it here, is there a specific reason you are rethrowing?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-12T06:18:29.506+0000",
                    "updated": "2019-12-12T06:18:29.506+0000",
                    "started": "2019-12-12T06:18:29.506+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "358348",
                    "issueId": "13272855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/worklog/358357",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #6003: ARROW-7343: [Java][FlightRPC] prevent leak in DoGet\nURL: https://github.com/apache/arrow/pull/6003#discussion_r356975440\n \n \n\n ##########\n File path: java/flight/src/test/java/org/apache/arrow/flight/TestLeak.java\n ##########\n @@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.types.FloatingPointPrecision;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Tests for scenarios where Flight could leak memory.\n+ */\n+public class TestLeak {\n+\n+  private static final int ROWS = 2048;\n+\n+  private static Schema getSchema() {\n+    return new Schema(Arrays.asList(\n+        Field.nullable(\"0\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"1\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"2\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"3\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"4\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"5\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"6\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"7\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"8\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"9\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"10\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE))\n+    ));\n+  }\n+\n+  /**\n+   * Ensure that if the client cancels, the server does not leak memory.\n+   *\n+   * <p>In gRPC, canceling the stream from the client sends an event to the server. Once processed, gRPC will start\n+   * silently rejecting messages sent by the server. However, Flight depends on gRPC processing these messages in order\n+   * to free the associated memory.\n+   */\n+  @Test\n+  public void testCancelingDoGetDoesNotLeak() {\n+    final AtomicBoolean callFinished = new AtomicBoolean();\n \n Review comment:\n   it is probably more elegant to use Lock/Condition here instead of busy looping waiting for callFinished.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-12T06:24:26.411+0000",
                    "updated": "2019-12-12T06:24:26.411+0000",
                    "started": "2019-12-12T06:24:26.411+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "358357",
                    "issueId": "13272855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/worklog/358361",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #6003: ARROW-7343: [Java][FlightRPC] prevent leak in DoGet\nURL: https://github.com/apache/arrow/pull/6003#discussion_r356976774\n \n \n\n ##########\n File path: java/flight/src/test/java/org/apache/arrow/flight/TestLeak.java\n ##########\n @@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.types.FloatingPointPrecision;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Tests for scenarios where Flight could leak memory.\n+ */\n+public class TestLeak {\n+\n+  private static final int ROWS = 2048;\n+\n+  private static Schema getSchema() {\n+    return new Schema(Arrays.asList(\n+        Field.nullable(\"0\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"1\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"2\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"3\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"4\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"5\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"6\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"7\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"8\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"9\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"10\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE))\n+    ));\n+  }\n+\n+  /**\n+   * Ensure that if the client cancels, the server does not leak memory.\n+   *\n+   * <p>In gRPC, canceling the stream from the client sends an event to the server. Once processed, gRPC will start\n+   * silently rejecting messages sent by the server. However, Flight depends on gRPC processing these messages in order\n+   * to free the associated memory.\n+   */\n+  @Test\n+  public void testCancelingDoGetDoesNotLeak() {\n+    final AtomicBoolean callFinished = new AtomicBoolean();\n+    try (final BufferAllocator allocator = new RootAllocator(Long.MAX_VALUE);\n+        final FlightServer s =\n+            FlightTestUtil.getStartedServer(\n+                (location) -> FlightServer.builder(allocator, location, new LeakFlightProducer(allocator, callFinished))\n+                    .build());\n+        final FlightClient client = FlightClient.builder(allocator, s.getLocation()).build()) {\n+\n+      final FlightStream stream = client.getStream(new Ticket(new byte[0]));\n+      stream.getRoot();\n+      stream.cancel(\"Cancel\", null);\n+\n+      // Wait for the call to finish. (Closing the allocator while a call is ongoing is a guaranteed leak.)\n+      while (!callFinished.get()) {\n+        Thread.sleep(100);\n+      }\n+\n+      s.shutdown();\n+      s.awaitTermination();\n+    } catch (Exception e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  @Test\n+  public void testCancelingDoPutDoesNotLeak() {\n+    final AtomicBoolean callFinished = new AtomicBoolean();\n+    try (final BufferAllocator allocator = new RootAllocator(Long.MAX_VALUE);\n+        final FlightServer s =\n+            FlightTestUtil.getStartedServer(\n+                (location) -> FlightServer.builder(allocator, location, new LeakFlightProducer(allocator, callFinished))\n+                    .build());\n+        final FlightClient client = FlightClient.builder(allocator, s.getLocation()).build()) {\n+\n+      try (final VectorSchemaRoot root = VectorSchemaRoot.create(getSchema(), allocator)) {\n+        final FlightDescriptor descriptor = FlightDescriptor.command(new byte[0]);\n+        final SyncPutListener listener = new SyncPutListener();\n+        final FlightClient.ClientStreamListener stream = client.startPut(descriptor, root, listener);\n+        for (int batch = 0; batch < 1000; batch++) {\n+          for (int col = 0; col < 11; col++) {\n+            final Float8Vector vector = (Float8Vector) root.getVector(Integer.toString(col));\n+            vector.allocateNew();\n+            for (int row = 0; row < ROWS; row++) {\n+              vector.setSafe(row, 10.);\n+            }\n+          }\n+          root.setRowCount(ROWS);\n+          // Unlike DoGet, this method fairly reliably will write the message to the stream, so even without the fix\n+          // for ARROW-7343, this won't leak memory.\n+          stream.putNext();\n+        }\n+        stream.completed();\n+      }\n+\n+      s.shutdown();\n+      s.awaitTermination();\n+    } catch (Exception e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  /**\n+   * A FlightProducer that always produces a fixed data stream with metadata on the side.\n+   */\n+  private static class LeakFlightProducer extends NoOpFlightProducer {\n+\n+    private final BufferAllocator allocator;\n+    private final AtomicBoolean callFinished;\n+\n+    public LeakFlightProducer(BufferAllocator allocator, AtomicBoolean callFinished) {\n+      this.allocator = allocator;\n+      this.callFinished = callFinished;\n+    }\n+\n+    @Override\n+    public void getStream(CallContext context, Ticket ticket, ServerStreamListener listener) {\n+      BufferAllocator childAllocator = allocator.newChildAllocator(\"foo\", 0, Long.MAX_VALUE);\n+      VectorSchemaRoot root = VectorSchemaRoot.create(TestLeak.getSchema(), childAllocator);\n+      root.allocateNew();\n+      listener.start(root);\n+\n+      // We can't poll listener#isCancelled since gRPC has two distinct \"is cancelled\" flags.\n+      // TODO: should we continue leaking gRPC semantics? Can we even avoid this?\n+      listener.setOnCancelHandler(() -> {\n+        try {\n+          for (int batch = 0; batch < 1000; batch++) {\n \n Review comment:\n   are these loops only essential for busy waiting?  Can you use Lock/Condition to make these more deterministic?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-12T06:29:25.012+0000",
                    "updated": "2019-12-12T06:29:25.012+0000",
                    "started": "2019-12-12T06:29:25.012+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "358361",
                    "issueId": "13272855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/worklog/358362",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on issue #6003: ARROW-7343: [Java][FlightRPC] prevent leak in DoGet\nURL: https://github.com/apache/arrow/pull/6003#issuecomment-564870123\n \n \n   Mostly nits and some questions on potentially making new unit tests more predictable.  I'm not an expert on flight/java grpc but I didn't see anything tha caught my eye.s\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-12T06:31:26.265+0000",
                    "updated": "2019-12-12T06:31:26.265+0000",
                    "started": "2019-12-12T06:31:26.264+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "358362",
                    "issueId": "13272855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/worklog/358363",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on issue #6003: ARROW-7343: [Java][FlightRPC] prevent leak in DoGet\nURL: https://github.com/apache/arrow/pull/6003#issuecomment-564870292\n \n \n   @pitrou the problem is try to jam manual resource management :(\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-12T06:32:05.333+0000",
                    "updated": "2019-12-12T06:32:05.333+0000",
                    "started": "2019-12-12T06:32:05.332+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "358363",
                    "issueId": "13272855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/worklog/358366",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #6003: ARROW-7343: [Java][FlightRPC] prevent leak in DoGet\nURL: https://github.com/apache/arrow/pull/6003#discussion_r356979767\n \n \n\n ##########\n File path: java/flight/src/main/java/org/apache/arrow/flight/FlightStream.java\n ##########\n @@ -131,33 +131,53 @@ public DictionaryProvider takeDictionaryOwnership() {\n     return provider;\n   }\n \n+  /**\n+   * Get the descriptor for this stream. Only applicable on the server side of a DoPut operation. Will block until the\n+   * client sends the descriptor.\n+   */\n   public FlightDescriptor getDescriptor() {\n+    // This blocks until the schema message (with the descriptor) is sent.\n+    getRoot();\n     return descriptor;\n   }\n \n   /**\n    * Closes the stream (freeing any existing resources).\n    *\n-   * <p>If the stream is isn't complete and is cancellable this method will cancel the stream first.</p>\n+   * <p>If the stream is isn't complete and is cancellable, this method will cancel the stream first.</p>\n \n Review comment:\n   Remove \"is\"\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-12T06:41:17.145+0000",
                    "updated": "2019-12-12T06:41:17.145+0000",
                    "started": "2019-12-12T06:41:17.145+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "358366",
                    "issueId": "13272855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/worklog/358372",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #6003: ARROW-7343: [Java][FlightRPC] prevent leak in DoGet\nURL: https://github.com/apache/arrow/pull/6003#discussion_r356983978\n \n \n\n ##########\n File path: java/flight/src/main/java/org/apache/arrow/flight/FlightClient.java\n ##########\n @@ -338,14 +338,20 @@ public void putNext() {\n     @Override\n     public void putNext(ArrowBuf appMetadata) {\n       ArrowRecordBatch batch = unloader.getRecordBatch();\n-      while (!observer.isReady()) {\n+      // Check isCancelled as well to avoid inadvertently blocking forever\n+      // (so long as PutListener properly implements it)\n+      while (!observer.isReady() && !listener.isCancelled()) {\n         /* busy wait */\n       }\n-      try {\n-        // Takes ownership of appMetadata\n-        observer.onNext(new ArrowMessage(batch, appMetadata));\n+      // ArrowMessage takes ownership of appMetadata and batch\n+      // gRPC should take ownership of ArrowMessage, but in some cases it doesn't, so guard against it\n+      // ArrowMessage#close is a no-op if gRPC did its job\n+      try (final ArrowMessage message = new ArrowMessage(batch, appMetadata)) {\n+        observer.onNext(message);\n       } catch (StatusRuntimeException sre) {\n         throw StatusUtils.fromGrpcRuntimeException(sre);\n+      } catch (Exception e) {\n+        throw StatusUtils.fromThrowable(e);\n \n Review comment:\n   It seems StatusUtils.fromThrowable will call fromGrpcRuntimeException internally, so we only need one catch clause here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-12T06:59:20.613+0000",
                    "updated": "2019-12-12T06:59:20.613+0000",
                    "started": "2019-12-12T06:59:20.612+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "358372",
                    "issueId": "13272855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/worklog/358878",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on issue #6003: ARROW-7343: [Java][FlightRPC] prevent leak in DoGet\nURL: https://github.com/apache/arrow/pull/6003#issuecomment-565149556\n \n \n   Thanks for the comments, hopefully all addressed. I simplified the tests as they did not need so many loops, as Micah pointed out.\r\n   \r\n   > Wow. I find it funny that Java needs some massaging for this where C++ would do fine :-)\r\n   \r\n   Yes, I find that refcounting without RAII is error-prone, especially with Flight where we do not control the entire stack (and have to do weird things like this as a result).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-12T19:27:56.383+0000",
                    "updated": "2019-12-12T19:27:56.383+0000",
                    "started": "2019-12-12T19:27:56.383+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "358878",
                    "issueId": "13272855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/worklog/358880",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6003: ARROW-7343: [Java][FlightRPC] prevent leak in DoGet\nURL: https://github.com/apache/arrow/pull/6003#discussion_r357329079\n \n \n\n ##########\n File path: java/flight/src/test/java/org/apache/arrow/flight/TestLeak.java\n ##########\n @@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.types.FloatingPointPrecision;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Tests for scenarios where Flight could leak memory.\n+ */\n+public class TestLeak {\n+\n+  private static final int ROWS = 2048;\n+\n+  private static Schema getSchema() {\n+    return new Schema(Arrays.asList(\n+        Field.nullable(\"0\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"1\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"2\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"3\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"4\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"5\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"6\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"7\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"8\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"9\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)),\n+        Field.nullable(\"10\", new ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE))\n+    ));\n+  }\n+\n+  /**\n+   * Ensure that if the client cancels, the server does not leak memory.\n+   *\n+   * <p>In gRPC, canceling the stream from the client sends an event to the server. Once processed, gRPC will start\n+   * silently rejecting messages sent by the server. However, Flight depends on gRPC processing these messages in order\n+   * to free the associated memory.\n+   */\n+  @Test\n+  public void testCancelingDoGetDoesNotLeak() {\n+    final AtomicBoolean callFinished = new AtomicBoolean();\n+    try (final BufferAllocator allocator = new RootAllocator(Long.MAX_VALUE);\n+        final FlightServer s =\n+            FlightTestUtil.getStartedServer(\n+                (location) -> FlightServer.builder(allocator, location, new LeakFlightProducer(allocator, callFinished))\n+                    .build());\n+        final FlightClient client = FlightClient.builder(allocator, s.getLocation()).build()) {\n+\n+      final FlightStream stream = client.getStream(new Ticket(new byte[0]));\n+      stream.getRoot();\n+      stream.cancel(\"Cancel\", null);\n+\n+      // Wait for the call to finish. (Closing the allocator while a call is ongoing is a guaranteed leak.)\n+      while (!callFinished.get()) {\n+        Thread.sleep(100);\n+      }\n+\n+      s.shutdown();\n+      s.awaitTermination();\n+    } catch (Exception e) {\n \n Review comment:\n   No reason, I've changed it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-12T19:28:24.454+0000",
                    "updated": "2019-12-12T19:28:24.454+0000",
                    "started": "2019-12-12T19:28:24.454+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "358880",
                    "issueId": "13272855"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/worklog/358881",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6003: ARROW-7343: [Java][FlightRPC] prevent leak in DoGet\nURL: https://github.com/apache/arrow/pull/6003#discussion_r357329260\n \n \n\n ##########\n File path: java/flight/src/main/java/org/apache/arrow/flight/FlightStream.java\n ##########\n @@ -131,33 +131,53 @@ public DictionaryProvider takeDictionaryOwnership() {\n     return provider;\n   }\n \n+  /**\n+   * Get the descriptor for this stream. Only applicable on the server side of a DoPut operation. Will block until the\n+   * client sends the descriptor.\n+   */\n   public FlightDescriptor getDescriptor() {\n+    // This blocks until the schema message (with the descriptor) is sent.\n+    getRoot();\n     return descriptor;\n   }\n \n   /**\n    * Closes the stream (freeing any existing resources).\n    *\n-   * <p>If the stream is isn't complete and is cancellable this method will cancel the stream first.</p>\n+   * <p>If the stream is isn't complete and is cancellable, this method will cancel the stream first.</p>\n    */\n   public void close() throws Exception {\n-    if (!completed && cancellable != null) {\n-      cancel(\"Stream closed before end.\", null);\n+    RuntimeException cancelException = null;\n+    try {\n+      // cancel() can throw, but we still want to clean up resources.\n+      if (!completed && cancellable != null) {\n+        cancel(\"Stream closed before end.\", null);\n+      }\n+    } catch (RuntimeException e) {\n+      cancelException = e;\n+    }\n+\n+    try {\n+      List<AutoCloseable> closeables = ImmutableList.copyOf(queue.toArray()).stream()\n+          .filter(t -> AutoCloseable.class.isAssignableFrom(t.getClass()))\n+          .map(t -> ((AutoCloseable) t))\n+          .collect(Collectors.toList());\n+\n+      final List<FieldVector> dictionaryVectors =\n+          dictionaries == null ? Collections.emptyList() : dictionaries.getDictionaryIds().stream()\n+              .map(id -> dictionaries.lookup(id).getVector()).collect(Collectors.toList());\n+\n+      // Must check for null since ImmutableList doesn't accept nulls\n+      AutoCloseables.close(Iterables.concat(closeables,\n+          dictionaryVectors,\n+          applicationMetadata != null ? ImmutableList.of(root.get(), applicationMetadata)\n \n Review comment:\n   I went ahead and cleaned it up since it was quite messy anyways.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-12T19:28:47.395+0000",
                    "updated": "2019-12-12T19:28:47.395+0000",
                    "started": "2019-12-12T19:28:47.394+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "358881",
                    "issueId": "13272855"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 30600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4cc46c72[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@308a4894[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b2844b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@659ea2c1[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@776faa03[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@493dcaa6[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a3e9f16[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4aa6b63a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@409332df[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@67dca891[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@49b44d53[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@36dc2539[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 30600,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jan 27 13:45:17 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-01-27T13:45:17.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7343/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2019-12-06T21:31:42.000+0000",
        "updated": "2020-01-27T13:45:17.000+0000",
        "timeoriginalestimate": null,
        "description": "I believe this causes things like ARROW-4765.\r\n\r\n-If a stream is interrupted or otherwise not drained by the client, the serialized form of the ArrowMessage (DrainableByteBufInputStream) will sit around forever, leaking memory.-",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "8.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 30600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Memory leak in Flight DoGet when client cancels",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/comment/16990886",
                    "id": "16990886",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Found via debugging an internal application:\r\n\r\n# Client cancels a doGet.\r\n# Server doesn't observe this and calls putNext. (or, the cancellation happens in between when the server calls putNext and the client cancels.)\r\n# An ArrowMessage is created, retaining references to buffers. The references won't be cleared until {{ArrowMessage#asInputStream}} is called.\r\n# {{ServerCallStreamObserverImpl#onNext}} finds that the call has been cancelled, _and Flight has set an onCancel handler_ in {{FlightService.GetListener.<constructor>}}. Thus, it doesn't throw, and returns early (_before_ calling {{ServerCallImpl#sendMessage}}).\r\n# Thus, the message is never freed.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-12-08T15:28:34.229+0000",
                    "updated": "2019-12-08T15:28:55.160+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/comment/16990889",
                    "id": "16990889",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I don't particularly like this, but one way to fix this is to have GetListener retain (Java) references to ArrowMessage so it can force clean them (perhaps on a rolling basis).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-12-08T15:35:24.580+0000",
                    "updated": "2019-12-08T15:35:24.580+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/comment/16991555",
                    "id": "16991555",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "cc [~jacques] ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-12-09T12:50:23.328+0000",
                    "updated": "2019-12-09T12:50:23.328+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/comment/16991621",
                    "id": "16991621",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I think a reasonable fix is to have a flag on ArrowMessage indicating whether we've transitioned ownership of the buffer to Netty/gRPC; if we send a message and the flag isn't set, then we should immediately clean up the buffers. (I'm wondering if there is a case where we transition ownership to Netty but Netty itself drops the buffers, I don't believe there is such a case.)\r\n\r\nThere are some follow up issues I want to investigate and maybe file:\r\n * Is DoPut susceptible to the same issue? (Probably.)\r\n * {{ServerStreamListener#isCancelled}} is rather useless, since gRPC actually maintains two distinct (and only somewhat correlated) flags for whether a call has been cancelled, and only the one one that isn't easily observable by application code actually matters. (Maybe this is worth filing an upstream bug, and maybe we can wrap gRPC to expose stronger semantics - but I'm not sure given the asynchronicity of gRPC.)\r\n * In general, we should review how we're wrapping gRPC concepts and either make precise the guarantees we provide relative to gRPC, or make sure we actually expose the full range of gRPC concepts.\r\n * Again, maybe we really need an async API, at least in Java; while the sync API is more convenient, it does lead to weird issues like this.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-12-09T14:09:33.728+0000",
                    "updated": "2019-12-09T14:09:33.728+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/comment/16992701",
                    "id": "16992701",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I've implemented the fix in the linked PR. I also found that DoPut could leak for different reasons (we call gRPC methods that can throw, causing us to skip cleanup), which I've fixed.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-12-10T16:15:15.642+0000",
                    "updated": "2019-12-10T16:15:15.642+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13272855/comment/17024347",
                    "id": "17024347",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 6003\n[https://github.com/apache/arrow/pull/6003]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-01-27T13:45:17.468+0000",
                    "updated": "2020-01-27T13:45:17.468+0000"
                }
            ],
            "maxResults": 6,
            "total": 6,
            "startAt": 0
        },
        "customfield_12311820": "0|z09e2g:",
        "customfield_12314139": null
    }
}