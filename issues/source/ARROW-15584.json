{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13426721",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721",
    "key": "ARROW-15584",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "substrait"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12643504",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12643504",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13470342",
                    "key": "ARROW-16986",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470342",
                    "fields": {
                        "summary": "[C++] Infer project nodes lazily to avoid unnecessary chains when consuming Substrait",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
            "name": "vibhatha",
            "key": "vibhatha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Vibhatha Lakmal Abeykoon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 20400,
            "total": 20400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 20400,
            "total": 20400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15584/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 34,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721/worklog/801680",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha opened a new pull request, #13914:\nURL: https://github.com/apache/arrow/pull/13914\n\n   This is a WIP for adding emit feature for Substrait plan deserialization. \n\n\n",
                    "created": "2022-08-18T12:21:27.163+0000",
                    "updated": "2022-08-18T12:21:27.163+0000",
                    "started": "2022-08-18T12:21:27.162+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801680",
                    "issueId": "13426721"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721/worklog/801681",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13914:\nURL: https://github.com/apache/arrow/pull/13914#issuecomment-1219429611\n\n   https://issues.apache.org/jira/browse/ARROW-15584\n\n\n",
                    "created": "2022-08-18T12:26:27.022+0000",
                    "updated": "2022-08-18T12:26:27.022+0000",
                    "started": "2022-08-18T12:26:27.021+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801681",
                    "issueId": "13426721"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721/worklog/801682",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13914:\nURL: https://github.com/apache/arrow/pull/13914#issuecomment-1219429636\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-08-18T12:26:29.036+0000",
                    "updated": "2022-08-18T12:26:29.036+0000",
                    "started": "2022-08-18T12:26:29.036+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801682",
                    "issueId": "13426721"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721/worklog/802275",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on PR #13914:\nURL: https://github.com/apache/arrow/pull/13914#issuecomment-1221472897\n\n   cc @westonpace @jeroen please take a look. \n\n\n",
                    "created": "2022-08-21T05:38:54.672+0000",
                    "updated": "2022-08-21T05:38:54.672+0000",
                    "started": "2022-08-21T05:38:54.672+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "802275",
                    "issueId": "13426721"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721/worklog/802392",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten commented on code in PR #13914:\nURL: https://github.com/apache/arrow/pull/13914#discussion_r951173599\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -248,19 +286,56 @@ Result<DeclarationInfo> FromProto(const substrait::Rel& rel, const ExtensionSet&\n       for (int i = 0; i < input.num_columns; i++) {\n         expressions.emplace_back(compute::field_ref(FieldRef(i)));\n       }\n+      std::vector<std::shared_ptr<Field>> new_fields(project.expressions().size());\n+      int i = 0;\n+      auto project_schema = input.output_schema;\n       for (const auto& expr : project.expressions()) {\n-        expressions.emplace_back();\n-        ARROW_ASSIGN_OR_RAISE(expressions.back(),\n+        ARROW_ASSIGN_OR_RAISE(compute::Expression des_expr,\n                               FromProto(expr, ext_set, conversion_options));\n+        auto bound_expr = des_expr.Bind(*input.output_schema);\n+        if (auto* expr_call = bound_expr->call()) {\n+          new_fields[i] = field(expr_call->function_name,\n+                                expr_call->kernel->signature->out_type().type());\n+        } else if (auto* field_ref = des_expr.field_ref()) {\n+          ARROW_ASSIGN_OR_RAISE(FieldPath field_path,\n+                                field_ref->FindOne(*input.output_schema));\n+          ARROW_ASSIGN_OR_RAISE(new_fields[i], field_path.Get(*input.output_schema));\n+        } else if (auto* literal = des_expr.literal()) {\n+          new_fields[i] =\n+              field(\"field_\" + std::to_string(input.num_columns + i), literal->type());\n+        }\n+        i++;\n+        expressions.emplace_back(des_expr);\n+      }\n+      while (!new_fields.empty()) {\n+        auto field = new_fields.back();\n+        ARROW_ASSIGN_OR_RAISE(\n+            project_schema,\n+            project_schema->AddField(\n+                input.num_columns + static_cast<int>(new_fields.size()) - 1,\n+                std::move(field)));\n+        new_fields.pop_back();\n\nReview Comment:\n   I'm pretty sure this adds the fields in reverse order, for what it's worth. Why is this in a separate loop?\n\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -399,17 +506,45 @@ Result<DeclarationInfo> FromProto(const substrait::Rel& rel, const ExtensionSet&\n               ExtensionIdRegistry::SubstraitAggregateToArrow converter,\n               ext_set.registry()->GetSubstraitAggregateToArrow(aggregate_call.id()));\n           ARROW_ASSIGN_OR_RAISE(compute::Aggregate arrow_agg, converter(aggregate_call));\n+\n+          // find aggregate field ids from schema\n+          const auto field_ref = arrow_agg.target;\n+          ARROW_ASSIGN_OR_RAISE(auto match, field_ref.FindOne(*input_schema));\n+          agg_src_field_ids[measure_id] = match[0];\n+\n           aggregates.push_back(std::move(arrow_agg));\n         } else {\n           return Status::Invalid(\"substrait::AggregateFunction not provided\");\n         }\n       }\n+      FieldVector output_fields;\n+      output_fields.reserve(key_field_ids.size() + agg_src_field_ids.size());\n+      // extract aggregate fields to output schema\n+      for (int id = 0; id < static_cast<int>(agg_src_field_ids.size()); id++) {\n+        output_fields.emplace_back(input_schema->field(agg_src_field_ids[id]));\n+      }\n+      // extract key fields to output schema\n+      for (int id = 0; id < static_cast<int>(key_field_ids.size()); id++) {\n+        output_fields.emplace_back(input_schema->field(key_field_ids[id]));\n+      }\n\nReview Comment:\n   Wrong order; keys come first.\r\n   \r\n   > The list of distinct columns from each grouping set (ordered by their first appearance) followed by the list of measures in declaration order, [...]\r\n   \r\n   https://substrait.io/relations/logical_relations/#aggregate-operation\n\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.h:\n##########\n@@ -38,6 +38,8 @@ struct DeclarationInfo {\n \n   /// The number of columns returned by the declaration.\n   int num_columns;\n+\n+  std::shared_ptr<Schema> output_schema;\n\nReview Comment:\n   I feel like this supersedes `num_columns`; `num_columns` should always equal the number of fields in the schema. I only put that there because I didn't want to have to bother with the whole schema yet.\n\n\n\n",
                    "created": "2022-08-22T08:55:46.600+0000",
                    "updated": "2022-08-22T08:55:46.600+0000",
                    "started": "2022-08-22T08:55:46.599+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "802392",
                    "issueId": "13426721"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721/worklog/803265",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13914:\nURL: https://github.com/apache/arrow/pull/13914#discussion_r953922872\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.h:\n##########\n@@ -38,6 +38,8 @@ struct DeclarationInfo {\n \n   /// The number of columns returned by the declaration.\n   int num_columns;\n+\n+  std::shared_ptr<Schema> output_schema;\n\nReview Comment:\n   Yes this make sense. I will update this.\r\n   \n\n\n\n",
                    "created": "2022-08-24T15:07:14.512+0000",
                    "updated": "2022-08-24T15:07:14.512+0000",
                    "started": "2022-08-24T15:07:14.512+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803265",
                    "issueId": "13426721"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721/worklog/804488",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13914:\nURL: https://github.com/apache/arrow/pull/13914#discussion_r957611273\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -199,12 +217,22 @@ Result<DeclarationInfo> FromProto(const substrait::Rel& rel, const ExtensionSet&\n                                                  std::move(filesystem), std::move(files),\n                                                  std::move(format), {}));\n \n-      ARROW_ASSIGN_OR_RAISE(auto ds, ds_factory->Finish(std::move(base_schema)));\n+      ARROW_ASSIGN_OR_RAISE(auto ds, ds_factory->Finish(base_schema));\n \n-      return DeclarationInfo{\n-          compute::Declaration{\n-              \"scan\", dataset::ScanNodeOptions{std::move(ds), std::move(scan_options)}},\n-          num_columns};\n+      if (HasEmit(read)) {\n+        ARROW_ASSIGN_OR_RAISE(auto emit_expressions, GetEmitInfo(read, base_schema));\n+        return DeclarationInfo{\n+            compute::Declaration::Sequence(\n+                {{\"scan\",\n+                  dataset::ScanNodeOptions{std::move(ds), std::move(scan_options)}},\n+                 {\"project\", compute::ProjectNodeOptions{std::move(emit_expressions)}}}),\n+            static_cast<int>(emit_expressions.size()), std::move(base_schema)};\n+      } else {\n\nReview Comment:\n   @jvanstraten brought up a good point to me offline which is that we should only do this else clause if things are direct.  Also, I think `has_emit` is only available in newer protoc versions.  Can we change all these if/else blocks to be...\r\n   \r\n   ```\r\n   switch (rel.emit_kind_case()) {\r\n     case substrait::RelCommon::EmitKindCase::kDirect:\r\n       // return no-emit case\r\n     case substrait::RelCommon::EmitKindCase::kEmit:\r\n       // return emit-case\r\n     default:\r\n       // return invalid status\r\n   }\r\n   ```\n\n\n\n",
                    "created": "2022-08-29T17:27:25.098+0000",
                    "updated": "2022-08-29T17:27:25.098+0000",
                    "started": "2022-08-29T17:27:25.098+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "804488",
                    "issueId": "13426721"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721/worklog/805282",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13914:\nURL: https://github.com/apache/arrow/pull/13914#discussion_r959747818\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -248,19 +286,56 @@ Result<DeclarationInfo> FromProto(const substrait::Rel& rel, const ExtensionSet&\n       for (int i = 0; i < input.num_columns; i++) {\n         expressions.emplace_back(compute::field_ref(FieldRef(i)));\n       }\n+      std::vector<std::shared_ptr<Field>> new_fields(project.expressions().size());\n+      int i = 0;\n+      auto project_schema = input.output_schema;\n       for (const auto& expr : project.expressions()) {\n-        expressions.emplace_back();\n-        ARROW_ASSIGN_OR_RAISE(expressions.back(),\n+        ARROW_ASSIGN_OR_RAISE(compute::Expression des_expr,\n                               FromProto(expr, ext_set, conversion_options));\n+        auto bound_expr = des_expr.Bind(*input.output_schema);\n+        if (auto* expr_call = bound_expr->call()) {\n+          new_fields[i] = field(expr_call->function_name,\n+                                expr_call->kernel->signature->out_type().type());\n+        } else if (auto* field_ref = des_expr.field_ref()) {\n+          ARROW_ASSIGN_OR_RAISE(FieldPath field_path,\n+                                field_ref->FindOne(*input.output_schema));\n+          ARROW_ASSIGN_OR_RAISE(new_fields[i], field_path.Get(*input.output_schema));\n+        } else if (auto* literal = des_expr.literal()) {\n+          new_fields[i] =\n+              field(\"field_\" + std::to_string(input.num_columns + i), literal->type());\n+        }\n+        i++;\n+        expressions.emplace_back(des_expr);\n+      }\n+      while (!new_fields.empty()) {\n+        auto field = new_fields.back();\n+        ARROW_ASSIGN_OR_RAISE(\n+            project_schema,\n+            project_schema->AddField(\n+                input.num_columns + static_cast<int>(new_fields.size()) - 1,\n+                std::move(field)));\n+        new_fields.pop_back();\n\nReview Comment:\n   Thanks for noting this one. Redundant and I missed this. \n\n\n\n",
                    "created": "2022-08-31T15:45:37.081+0000",
                    "updated": "2022-08-31T15:45:37.081+0000",
                    "started": "2022-08-31T15:45:37.081+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "805282",
                    "issueId": "13426721"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721/worklog/805299",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13914:\nURL: https://github.com/apache/arrow/pull/13914#discussion_r959816139\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -199,12 +217,22 @@ Result<DeclarationInfo> FromProto(const substrait::Rel& rel, const ExtensionSet&\n                                                  std::move(filesystem), std::move(files),\n                                                  std::move(format), {}));\n \n-      ARROW_ASSIGN_OR_RAISE(auto ds, ds_factory->Finish(std::move(base_schema)));\n+      ARROW_ASSIGN_OR_RAISE(auto ds, ds_factory->Finish(base_schema));\n \n-      return DeclarationInfo{\n-          compute::Declaration{\n-              \"scan\", dataset::ScanNodeOptions{std::move(ds), std::move(scan_options)}},\n-          num_columns};\n+      if (HasEmit(read)) {\n+        ARROW_ASSIGN_OR_RAISE(auto emit_expressions, GetEmitInfo(read, base_schema));\n+        return DeclarationInfo{\n+            compute::Declaration::Sequence(\n+                {{\"scan\",\n+                  dataset::ScanNodeOptions{std::move(ds), std::move(scan_options)}},\n+                 {\"project\", compute::ProjectNodeOptions{std::move(emit_expressions)}}}),\n+            static_cast<int>(emit_expressions.size()), std::move(base_schema)};\n+      } else {\n\nReview Comment:\n   There is a question about this, I think the `Rel` doesn't have the `emit_kind_case`, but the `RelCommon` does. \r\n   So first we need to see if `has_common()` returns true and then check the `common().emit_kind_case()`. But if `has_common()` returns false we have to return the `no_emit` declaration. Is this a wrong interpretation of things? \n\n\n\n",
                    "created": "2022-08-31T16:54:55.120+0000",
                    "updated": "2022-08-31T16:54:55.120+0000",
                    "started": "2022-08-31T16:54:55.120+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "805299",
                    "issueId": "13426721"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721/worklog/805300",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13914:\nURL: https://github.com/apache/arrow/pull/13914#discussion_r959817640\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -199,12 +217,22 @@ Result<DeclarationInfo> FromProto(const substrait::Rel& rel, const ExtensionSet&\n                                                  std::move(filesystem), std::move(files),\n                                                  std::move(format), {}));\n \n-      ARROW_ASSIGN_OR_RAISE(auto ds, ds_factory->Finish(std::move(base_schema)));\n+      ARROW_ASSIGN_OR_RAISE(auto ds, ds_factory->Finish(base_schema));\n \n-      return DeclarationInfo{\n-          compute::Declaration{\n-              \"scan\", dataset::ScanNodeOptions{std::move(ds), std::move(scan_options)}},\n-          num_columns};\n+      if (HasEmit(read)) {\n+        ARROW_ASSIGN_OR_RAISE(auto emit_expressions, GetEmitInfo(read, base_schema));\n+        return DeclarationInfo{\n+            compute::Declaration::Sequence(\n+                {{\"scan\",\n+                  dataset::ScanNodeOptions{std::move(ds), std::move(scan_options)}},\n+                 {\"project\", compute::ProjectNodeOptions{std::move(emit_expressions)}}}),\n+            static_cast<int>(emit_expressions.size()), std::move(base_schema)};\n+      } else {\n\nReview Comment:\n   That is a correct interpretation.\n\n\n\n",
                    "created": "2022-08-31T16:56:35.332+0000",
                    "updated": "2022-08-31T16:56:35.332+0000",
                    "started": "2022-08-31T16:56:35.332+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "805300",
                    "issueId": "13426721"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721/worklog/806066",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13914:\nURL: https://github.com/apache/arrow/pull/13914#discussion_r962444320\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -399,17 +506,45 @@ Result<DeclarationInfo> FromProto(const substrait::Rel& rel, const ExtensionSet&\n               ExtensionIdRegistry::SubstraitAggregateToArrow converter,\n               ext_set.registry()->GetSubstraitAggregateToArrow(aggregate_call.id()));\n           ARROW_ASSIGN_OR_RAISE(compute::Aggregate arrow_agg, converter(aggregate_call));\n+\n+          // find aggregate field ids from schema\n+          const auto field_ref = arrow_agg.target;\n+          ARROW_ASSIGN_OR_RAISE(auto match, field_ref.FindOne(*input_schema));\n+          agg_src_field_ids[measure_id] = match[0];\n+\n           aggregates.push_back(std::move(arrow_agg));\n         } else {\n           return Status::Invalid(\"substrait::AggregateFunction not provided\");\n         }\n       }\n+      FieldVector output_fields;\n+      output_fields.reserve(key_field_ids.size() + agg_src_field_ids.size());\n+      // extract aggregate fields to output schema\n+      for (int id = 0; id < static_cast<int>(agg_src_field_ids.size()); id++) {\n+        output_fields.emplace_back(input_schema->field(agg_src_field_ids[id]));\n+      }\n+      // extract key fields to output schema\n+      for (int id = 0; id < static_cast<int>(key_field_ids.size()); id++) {\n+        output_fields.emplace_back(input_schema->field(key_field_ids[id]));\n+      }\n\nReview Comment:\n   @jvanstraten I also noticed this, but I forget to leave a comment about it. This is probably a separate JIRA because of the order used in the `aggregate_node.cc`[1]. Please refer to the comment in this line and the two loops after that. The aggregate fields appened first and then the key fields. One thing we can do is swap the response here.\r\n   \r\n   cc @westonpace \r\n   \r\n   [1]. https://github.com/apache/arrow/blob/50a7d15dfb4cbc4dd449ff2bb3ba2b1cde62a3ab/cpp/src/arrow/compute/exec/aggregate_node.cc#L345\n\n\n\n",
                    "created": "2022-09-05T03:13:15.753+0000",
                    "updated": "2022-09-05T03:13:15.753+0000",
                    "started": "2022-09-05T03:13:15.753+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806066",
                    "issueId": "13426721"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721/worklog/806151",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten commented on code in PR #13914:\nURL: https://github.com/apache/arrow/pull/13914#discussion_r962803300\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -399,17 +506,45 @@ Result<DeclarationInfo> FromProto(const substrait::Rel& rel, const ExtensionSet&\n               ExtensionIdRegistry::SubstraitAggregateToArrow converter,\n               ext_set.registry()->GetSubstraitAggregateToArrow(aggregate_call.id()));\n           ARROW_ASSIGN_OR_RAISE(compute::Aggregate arrow_agg, converter(aggregate_call));\n+\n+          // find aggregate field ids from schema\n+          const auto field_ref = arrow_agg.target;\n+          ARROW_ASSIGN_OR_RAISE(auto match, field_ref.FindOne(*input_schema));\n+          agg_src_field_ids[measure_id] = match[0];\n+\n           aggregates.push_back(std::move(arrow_agg));\n         } else {\n           return Status::Invalid(\"substrait::AggregateFunction not provided\");\n         }\n       }\n+      FieldVector output_fields;\n+      output_fields.reserve(key_field_ids.size() + agg_src_field_ids.size());\n+      // extract aggregate fields to output schema\n+      for (int id = 0; id < static_cast<int>(agg_src_field_ids.size()); id++) {\n+        output_fields.emplace_back(input_schema->field(agg_src_field_ids[id]));\n+      }\n+      // extract key fields to output schema\n+      for (int id = 0; id < static_cast<int>(key_field_ids.size()); id++) {\n+        output_fields.emplace_back(input_schema->field(key_field_ids[id]));\n+      }\n\nReview Comment:\n   Based on the comment this looks like intentional behavior of Arrow, so I don't think aggregate node is going to be adjusted to match Substrait. So that just means there should be a project node inserted behind the aggregate node that moves the columns around accordingly, right? I guess you could fix that in a separate JIRA/PR though. Maybe add a FIXME comment in that case?\n\n\n\n",
                    "created": "2022-09-05T11:31:31.429+0000",
                    "updated": "2022-09-05T11:31:31.429+0000",
                    "started": "2022-09-05T11:31:31.428+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806151",
                    "issueId": "13426721"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721/worklog/806169",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13914:\nURL: https://github.com/apache/arrow/pull/13914#discussion_r962926872\n\n\n##########\ncpp/src/arrow/engine/substrait/relation_internal.cc:\n##########\n@@ -399,17 +506,45 @@ Result<DeclarationInfo> FromProto(const substrait::Rel& rel, const ExtensionSet&\n               ExtensionIdRegistry::SubstraitAggregateToArrow converter,\n               ext_set.registry()->GetSubstraitAggregateToArrow(aggregate_call.id()));\n           ARROW_ASSIGN_OR_RAISE(compute::Aggregate arrow_agg, converter(aggregate_call));\n+\n+          // find aggregate field ids from schema\n+          const auto field_ref = arrow_agg.target;\n+          ARROW_ASSIGN_OR_RAISE(auto match, field_ref.FindOne(*input_schema));\n+          agg_src_field_ids[measure_id] = match[0];\n+\n           aggregates.push_back(std::move(arrow_agg));\n         } else {\n           return Status::Invalid(\"substrait::AggregateFunction not provided\");\n         }\n       }\n+      FieldVector output_fields;\n+      output_fields.reserve(key_field_ids.size() + agg_src_field_ids.size());\n+      // extract aggregate fields to output schema\n+      for (int id = 0; id < static_cast<int>(agg_src_field_ids.size()); id++) {\n+        output_fields.emplace_back(input_schema->field(agg_src_field_ids[id]));\n+      }\n+      // extract key fields to output schema\n+      for (int id = 0; id < static_cast<int>(key_field_ids.size()); id++) {\n+        output_fields.emplace_back(input_schema->field(key_field_ids[id]));\n+      }\n\nReview Comment:\n   Yes, the requirement in Acero may be static here. \r\n   We can use the project to swap things around and document it properly. Probably we can do it in this PR as well. \r\n   \r\n   cc @westonpace \n\n\n\n",
                    "created": "2022-09-05T13:48:11.848+0000",
                    "updated": "2022-09-05T13:48:11.848+0000",
                    "started": "2022-09-05T13:48:11.847+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806169",
                    "issueId": "13426721"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721/worklog/806453",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13914:\nURL: https://github.com/apache/arrow/pull/13914#discussion_r959848046\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -121,6 +155,78 @@ inline compute::Expression UseBoringRefs(const compute::Expression& expr) {\n   return compute::Expression{std::move(modified_call)};\n }\n \n+// TODO: complete this interface\n+struct TempDataGenerator {\n+  TempDataGenerator(const std::shared_ptr<Table> input_table,\n+                    const std::string& file_prefix,\n+                    std::unique_ptr<arrow::internal::TemporaryDir>& tempdir)\n+      : input_table(input_table), file_prefix(file_prefix), tempdir(tempdir) {}\n+\n+  Status operator()() {\n+    auto format = std::make_shared<arrow::dataset::ParquetFileFormat>();\n+    auto filesystem = std::make_shared<fs::LocalFileSystem>();\n+\n+    const std::string file_name = file_prefix + \".parquet\";\n+\n+    ARROW_ASSIGN_OR_RAISE(auto file_path, tempdir->path().Join(file_name));\n+    data_file_path = file_path.ToString();\n+\n+    std::string toReplace(\"/T//\");\n+    size_t pos = data_file_path.find(toReplace);\n+    data_file_path.replace(pos, toReplace.length(), \"/T/\");\n+\n+    ARROW_EXPECT_OK(WriteParquetData(data_file_path, filesystem, input_table));\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<Table> input_table;\n+  std::string file_prefix;\n+  std::unique_ptr<arrow::internal::TemporaryDir>& tempdir;\n+  std::string data_file_path;\n+};\n+\n+struct EmitValidate {\n+  EmitValidate(const std::shared_ptr<Schema> output_schema,\n+               const std::shared_ptr<Table> expected_table,\n+               compute::ExecContext& exec_context, std::shared_ptr<Buffer>& buf,\n+               const std::vector<int>& include_columns = {})\n+      : output_schema(output_schema),\n+        expected_table(expected_table),\n+        exec_context(exec_context),\n+        buf(buf),\n+        include_columns(include_columns) {}\n+  void operator()() {\n+    for (auto sp_ext_id_reg :\n+         {std::shared_ptr<ExtensionIdRegistry>(), MakeExtensionIdRegistry()}) {\n\nReview Comment:\n   Why are we testing two different registries here?  Is there a reason to expect the extension ID registry to affect emit behavior?\n\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -121,6 +155,78 @@ inline compute::Expression UseBoringRefs(const compute::Expression& expr) {\n   return compute::Expression{std::move(modified_call)};\n }\n \n+// TODO: complete this interface\n+struct TempDataGenerator {\n+  TempDataGenerator(const std::shared_ptr<Table> input_table,\n+                    const std::string& file_prefix,\n+                    std::unique_ptr<arrow::internal::TemporaryDir>& tempdir)\n+      : input_table(input_table), file_prefix(file_prefix), tempdir(tempdir) {}\n+\n+  Status operator()() {\n+    auto format = std::make_shared<arrow::dataset::ParquetFileFormat>();\n+    auto filesystem = std::make_shared<fs::LocalFileSystem>();\n+\n+    const std::string file_name = file_prefix + \".parquet\";\n+\n+    ARROW_ASSIGN_OR_RAISE(auto file_path, tempdir->path().Join(file_name));\n+    data_file_path = file_path.ToString();\n+\n+    std::string toReplace(\"/T//\");\n+    size_t pos = data_file_path.find(toReplace);\n+    data_file_path.replace(pos, toReplace.length(), \"/T/\");\n+\n+    ARROW_EXPECT_OK(WriteParquetData(data_file_path, filesystem, input_table));\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<Table> input_table;\n+  std::string file_prefix;\n+  std::unique_ptr<arrow::internal::TemporaryDir>& tempdir;\n+  std::string data_file_path;\n+};\n+\n+struct EmitValidate {\n+  EmitValidate(const std::shared_ptr<Schema> output_schema,\n\nReview Comment:\n   Regarding the naming, I think `CheckEmit` or `EmitRoundTrip` would be more consistent with naming we have elsewhere.  That being said, are you really validating the emit here?  It looks like you are mostly running the plan and ensuring the resulting table equals the expected table.  That seems like a more generic capability that isn't necessarily related to emit (though could certainly be used in emit testing).\n\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -1814,5 +1920,1049 @@ TEST(Substrait, AggregateBadPhase) {\n   ASSERT_RAISES(NotImplemented, DeserializePlans(*buf, [] { return kNullConsumer; }));\n }\n \n+TEST(Substrait, ProjectRel) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto dummy_schema =\n+      schema({field(\"A\", int32()), field(\"B\", int32()), field(\"C\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto input_table = TableFromJSON(dummy_schema, {R\"([\n+      [1, 1, 10],\n+      [3, 5, 20],\n+      [4, 1, 30],\n+      [2, 1, 40],\n+      [5, 5, 50],\n+      [2, 2, 60]\n+  ])\"});\n+\n+  std::string file_prefix = \"serde_project_test\";\n+  ASSERT_OK_AND_ASSIGN(auto tempdir,\n+                       arrow::internal::TemporaryDir::Make(\"substrait_project_tempdir\"));\n\nReview Comment:\n   Given that you are creating the input table like this can you use a named table provider and avoid writing the table to a temporary file.  That should help cut out some of the complexity.\n\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -121,6 +155,78 @@ inline compute::Expression UseBoringRefs(const compute::Expression& expr) {\n   return compute::Expression{std::move(modified_call)};\n }\n \n+// TODO: complete this interface\n+struct TempDataGenerator {\n+  TempDataGenerator(const std::shared_ptr<Table> input_table,\n+                    const std::string& file_prefix,\n+                    std::unique_ptr<arrow::internal::TemporaryDir>& tempdir)\n+      : input_table(input_table), file_prefix(file_prefix), tempdir(tempdir) {}\n+\n+  Status operator()() {\n+    auto format = std::make_shared<arrow::dataset::ParquetFileFormat>();\n+    auto filesystem = std::make_shared<fs::LocalFileSystem>();\n+\n+    const std::string file_name = file_prefix + \".parquet\";\n+\n+    ARROW_ASSIGN_OR_RAISE(auto file_path, tempdir->path().Join(file_name));\n+    data_file_path = file_path.ToString();\n+\n+    std::string toReplace(\"/T//\");\n+    size_t pos = data_file_path.find(toReplace);\n+    data_file_path.replace(pos, toReplace.length(), \"/T/\");\n+\n+    ARROW_EXPECT_OK(WriteParquetData(data_file_path, filesystem, input_table));\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<Table> input_table;\n+  std::string file_prefix;\n+  std::unique_ptr<arrow::internal::TemporaryDir>& tempdir;\n+  std::string data_file_path;\n+};\n+\n+struct EmitValidate {\n\nReview Comment:\n   Looking at the usage I think this would be better as a function than a callable struct...\r\n   \r\n   ```\r\n   void EmitValidate(const std::shared_ptr<Schema> output_schema, const std::shared_ptr<Table> expected_table, compute::ExecContext& exec_context, std::shared_ptr<Buffer>& buf, const std::vector<int>& include_columns = {}) {\r\n     for (auto sp_ext_id_reg : {std::shared_ptr<ExtensionIdRegistry>(), MakeExtensionIdRegistry()}) {\r\n     // ...\r\n   }\r\n   ```\r\n   \r\n   Then to call it...\r\n   \r\n   ```\r\n   EmitValidate(std::move(output_schema), std::move(expected_table), exec_context, buf);\r\n   ```\n\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -1814,5 +1920,1049 @@ TEST(Substrait, AggregateBadPhase) {\n   ASSERT_RAISES(NotImplemented, DeserializePlans(*buf, [] { return kNullConsumer; }));\n }\n \n+TEST(Substrait, ProjectRel) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto dummy_schema =\n+      schema({field(\"A\", int32()), field(\"B\", int32()), field(\"C\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto input_table = TableFromJSON(dummy_schema, {R\"([\n+      [1, 1, 10],\n+      [3, 5, 20],\n+      [4, 1, 30],\n+      [2, 1, 40],\n+      [5, 5, 50],\n+      [2, 2, 60]\n+  ])\"});\n+\n+  std::string file_prefix = \"serde_project_test\";\n+  ASSERT_OK_AND_ASSIGN(auto tempdir,\n+                       arrow::internal::TemporaryDir::Make(\"substrait_project_tempdir\"));\n+\n+  TempDataGenerator datagen(input_table, file_prefix, tempdir);\n+  ASSERT_OK(datagen());\n+  std::string substrait_file_uri = \"file://\" + datagen.data_file_path;\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"project\": {\n+        \"expressions\": [{\n+          \"scalarFunction\": {\n+            \"functionReference\": 0,\n+            \"arguments\": [{\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }, {\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 1\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }],\n+            \"output_type\": {\n+              \"bool\": {}\n+            }\n+          }\n+        },\n+        ],\n+        \"input\" : {\n+          \"read\": {\n+            \"base_schema\": {\n+              \"names\": [\"A\", \"B\", \"C\"],\n+                \"struct\": {\n+                \"types\": [{\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }]\n+              }\n+            },\n+            \"local_files\": {\n+              \"items\": [\n+                {\n+                  \"uri_file\": \")\" +\n+                               substrait_file_uri +\n+                               R\"(\",\n+                  \"parquet\": {}\n+                }\n+              ]\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }],\n+  \"extension_uris\": [\n+      {\n+        \"extension_uri_anchor\": 0,\n+        \"uri\": \")\" + std::string(kSubstraitComparisonFunctionsUri) +\n+                               R\"(\"\n+      }\n+    ],\n+    \"extensions\": [\n+      {\"extension_function\": {\n+        \"extension_uri_reference\": 0,\n+        \"function_anchor\": 0,\n+        \"name\": \"equal\"\n+      }}\n+    ]\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema = schema({field(\"A\", int32()), field(\"B\", int32()),\n+                               field(\"C\", int32()), field(\"equal\", boolean())});\n+  auto expected_table = TableFromJSON(output_schema, {R\"([\n+    [1, 1, 10, true],\n+    [3, 5, 20, false],\n+    [4, 1, 30, false],\n+    [2, 1, 40, false],\n+    [5, 5, 50, true],\n+    [2, 2, 60, true]\n+  ])\"});\n+  EmitValidate(std::move(output_schema), std::move(expected_table), exec_context, buf)();\n\nReview Comment:\n   To echo my point above regarding the naming of this function, this plan doesn't even contain an emit so calling something named `EmitValidate` seems a bit odd.\n\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -1814,5 +1920,1049 @@ TEST(Substrait, AggregateBadPhase) {\n   ASSERT_RAISES(NotImplemented, DeserializePlans(*buf, [] { return kNullConsumer; }));\n }\n \n+TEST(Substrait, ProjectRel) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto dummy_schema =\n+      schema({field(\"A\", int32()), field(\"B\", int32()), field(\"C\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto input_table = TableFromJSON(dummy_schema, {R\"([\n+      [1, 1, 10],\n+      [3, 5, 20],\n+      [4, 1, 30],\n+      [2, 1, 40],\n+      [5, 5, 50],\n+      [2, 2, 60]\n+  ])\"});\n+\n+  std::string file_prefix = \"serde_project_test\";\n+  ASSERT_OK_AND_ASSIGN(auto tempdir,\n+                       arrow::internal::TemporaryDir::Make(\"substrait_project_tempdir\"));\n+\n+  TempDataGenerator datagen(input_table, file_prefix, tempdir);\n+  ASSERT_OK(datagen());\n+  std::string substrait_file_uri = \"file://\" + datagen.data_file_path;\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"project\": {\n+        \"expressions\": [{\n+          \"scalarFunction\": {\n+            \"functionReference\": 0,\n+            \"arguments\": [{\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }, {\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 1\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }],\n+            \"output_type\": {\n+              \"bool\": {}\n+            }\n+          }\n+        },\n+        ],\n+        \"input\" : {\n+          \"read\": {\n+            \"base_schema\": {\n+              \"names\": [\"A\", \"B\", \"C\"],\n+                \"struct\": {\n+                \"types\": [{\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }]\n+              }\n+            },\n+            \"local_files\": {\n+              \"items\": [\n+                {\n+                  \"uri_file\": \")\" +\n+                               substrait_file_uri +\n+                               R\"(\",\n+                  \"parquet\": {}\n+                }\n+              ]\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }],\n+  \"extension_uris\": [\n+      {\n+        \"extension_uri_anchor\": 0,\n+        \"uri\": \")\" + std::string(kSubstraitComparisonFunctionsUri) +\n+                               R\"(\"\n+      }\n+    ],\n+    \"extensions\": [\n+      {\"extension_function\": {\n+        \"extension_uri_reference\": 0,\n+        \"function_anchor\": 0,\n+        \"name\": \"equal\"\n+      }}\n+    ]\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema = schema({field(\"A\", int32()), field(\"B\", int32()),\n+                               field(\"C\", int32()), field(\"equal\", boolean())});\n+  auto expected_table = TableFromJSON(output_schema, {R\"([\n+    [1, 1, 10, true],\n+    [3, 5, 20, false],\n+    [4, 1, 30, false],\n+    [2, 1, 40, false],\n+    [5, 5, 50, true],\n+    [2, 2, 60, true]\n+  ])\"});\n+  EmitValidate(std::move(output_schema), std::move(expected_table), exec_context, buf)();\n+}\n+\n+TEST(Substrait, ProjectRelOnFunctionWithEmit) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto dummy_schema =\n+      schema({field(\"A\", int32()), field(\"B\", int32()), field(\"C\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto input_table = TableFromJSON(dummy_schema, {R\"([\n+      [1, 1, 10],\n+      [3, 5, 20],\n+      [4, 1, 30],\n+      [2, 1, 40],\n+      [5, 5, 50],\n+      [2, 2, 60]\n+  ])\"});\n+\n+  std::string file_prefix = \"serde_project_emit_test\";\n+  ASSERT_OK_AND_ASSIGN(auto tempdir, arrow::internal::TemporaryDir::Make(\n+                                         \"substrait_project_emit_tempdir\"));\n+\n+  TempDataGenerator datagen(input_table, file_prefix, tempdir);\n+  ASSERT_OK(datagen());\n+  std::string substrait_file_uri = \"file://\" + datagen.data_file_path;\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"project\": {\n+        \"common\": {\n+          \"emit\": {\n+            \"outputMapping\": [0, 2, 3]\n+          }\n+        },\n+        \"expressions\": [{\n+          \"scalarFunction\": {\n+            \"functionReference\": 0,\n+            \"arguments\": [{\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }, {\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 1\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }],\n+            \"output_type\": {\n+              \"bool\": {}\n+            }\n+          }\n+        },\n+        ],\n+        \"input\" : {\n+          \"read\": {\n+            \"base_schema\": {\n+              \"names\": [\"A\", \"B\", \"C\"],\n+                \"struct\": {\n+                \"types\": [{\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }]\n+              }\n+            },\n+            \"local_files\": {\n+              \"items\": [\n+                {\n+                  \"uri_file\": \")\" +\n+                               substrait_file_uri +\n+                               R\"(\",\n+                  \"parquet\": {}\n+                }\n+              ]\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }],\n+  \"extension_uris\": [\n+      {\n+        \"extension_uri_anchor\": 0,\n+        \"uri\": \")\" + std::string(kSubstraitComparisonFunctionsUri) +\n+                               R\"(\"\n+      }\n+    ],\n+    \"extensions\": [\n+      {\"extension_function\": {\n+        \"extension_uri_reference\": 0,\n+        \"function_anchor\": 0,\n+        \"name\": \"equal\"\n+      }}\n+    ]\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema =\n+      schema({field(\"A\", int32()), field(\"C\", int32()), field(\"equal\", boolean())});\n+  auto expected_table = TableFromJSON(output_schema, {R\"([\n+      [1, 10, true],\n+      [3, 20, false],\n+      [4, 30, false],\n+      [2, 40, false],\n+      [5, 50, true],\n+      [2, 60, true]\n+  ])\"});\n+  EmitValidate(std::move(output_schema), std::move(expected_table), exec_context, buf)();\n+}\n+\n+TEST(Substrait, ReadRelWithEmit) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto dummy_schema =\n+      schema({field(\"A\", int32()), field(\"B\", int32()), field(\"C\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto input_table = TableFromJSON(dummy_schema, {R\"([\n+      [1, 1, 10],\n+      [3, 4, 20]\n+  ])\"});\n+\n+  ASSERT_OK_AND_ASSIGN(auto tempdir,\n+                       arrow::internal::TemporaryDir::Make(\"substrait_read_tempdir\"));\n+  std::string file_prefix = \"serde_read_emit_test\";\n+\n+  TempDataGenerator datagen(input_table, file_prefix, tempdir);\n+  ASSERT_OK(datagen());\n+  std::string substrait_file_uri = \"file://\" + datagen.data_file_path;\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"read\": {\n+        \"common\": {\n+          \"emit\": {\n+            \"outputMapping\": [1, 2]\n+          }\n+        },\n+        \"base_schema\": {\n+          \"names\": [\"A\", \"B\", \"C\"],\n+            \"struct\": {\n+            \"types\": [{\n+              \"i32\": {}\n+            }, {\n+              \"i32\": {}\n+            }, {\n+              \"i32\": {}\n+            }]\n+          }\n+        },\n+        \"local_files\": {\n+          \"items\": [\n+            {\n+              \"uri_file\": \")\" + substrait_file_uri +\n+                               R\"(\",\n+              \"parquet\": {}\n+            }\n+          ]\n+        }\n+      }\n+    }\n+  }],\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema = schema({field(\"B\", int32()), field(\"C\", int32())});\n+  auto expected_table = TableFromJSON(output_schema, {R\"([\n+      [1, 10],\n+      [4, 20]\n+  ])\"});\n+  EmitValidate(std::move(output_schema), std::move(expected_table), exec_context, buf)();\n+}\n+\n+TEST(Substrait, FilterRelWithEmit) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto dummy_schema = schema({field(\"A\", int32()), field(\"B\", int32()),\n+                              field(\"C\", int32()), field(\"D\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto input_table = TableFromJSON(dummy_schema, {R\"([\n+      [10, 1, 80, 7],\n+      [20, 2, 70, 6],\n+      [30, 3, 30, 5],\n+      [40, 4, 20, 4],\n+      [40, 5, 40, 3],\n+      [20, 6, 20, 2],\n+      [30, 7, 30, 1]\n+  ])\"});\n+\n+  ASSERT_OK_AND_ASSIGN(auto tempdir,\n+                       arrow::internal::TemporaryDir::Make(\"substrait_read_tempdir\"));\n+  std::string file_prefix = \"serde_read_emit_test\";\n+\n+  TempDataGenerator datagen(input_table, file_prefix, tempdir);\n+  ASSERT_OK(datagen());\n+  std::string substrait_file_uri = \"file://\" + datagen.data_file_path;\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"filter\": {\n+        \"common\": {\n+          \"emit\": {\n+            \"outputMapping\": [1, 3]\n+          }\n+        },\n+        \"condition\": {\n+          \"scalarFunction\": {\n+            \"functionReference\": 0,\n+            \"arguments\": [{\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }, {\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 2\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }],\n+            \"output_type\": {\n+              \"bool\": {}\n+            }\n+          }\n+        },\n+        \"input\" : {\n+          \"read\": {\n+            \"base_schema\": {\n+              \"names\": [\"A\", \"B\", \"C\", \"D\"],\n+                \"struct\": {\n+                \"types\": [{\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                },{\n+                  \"i32\": {}\n+                }]\n+              }\n+            },\n+            \"local_files\": {\n+              \"items\": [\n+                {\n+                  \"uri_file\": \")\" +\n+                               substrait_file_uri +\n+                               R\"(\",\n+                  \"parquet\": {}\n+                }\n+              ]\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }],\n+  \"extension_uris\": [\n+      {\n+        \"extension_uri_anchor\": 0,\n+        \"uri\": \")\" + std::string(kSubstraitComparisonFunctionsUri) +\n+                               R\"(\"\n+      }\n+    ],\n+    \"extensions\": [\n+      {\"extension_function\": {\n+        \"extension_uri_reference\": 0,\n+        \"function_anchor\": 0,\n+        \"name\": \"equal\"\n+      }}\n+    ]\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema = schema({field(\"B\", int32()), field(\"D\", int32())});\n+  auto expected_table = TableFromJSON(output_schema, {R\"([\n+      [3, 5],\n+      [5, 3],\n+      [6, 2],\n+      [7, 1]\n+  ])\"});\n+  EmitValidate(std::move(output_schema), std::move(expected_table), exec_context, buf)();\n+}\n+\n+TEST(Substrait, JoinRelEndToEnd) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto left_schema = schema({field(\"A\", int32()), field(\"B\", int32()),\n+                             field(\"C\", int32()), field(\"D\", int32())});\n+\n+  auto right_schema = schema({field(\"X\", int32()), field(\"Y\", int32()),\n+                              field(\"Z\", int32()), field(\"W\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto left_table = TableFromJSON(left_schema, {R\"([\n+      [10, 1, 80, 70],\n+      [20, 2, 70, 60],\n+      [30, 3, 30, 50]\n+  ])\"});\n+\n+  auto right_table = TableFromJSON(right_schema, {R\"([\n+      [10, 1, 81, 71],\n+      [80, 2, 71, 61],\n+      [31, 3, 31, 51]\n+  ])\"});\n+\n+  ASSERT_OK_AND_ASSIGN(auto tempdir,\n+                       arrow::internal::TemporaryDir::Make(\"substrait_join_tempdir\"));\n+  std::string left_file_prefix = \"serde_join_left_emit_test\";\n+  std::string right_file_prefix = \"serde_join_right_emit_test\";\n+\n+  TempDataGenerator datagen_left(left_table, left_file_prefix, tempdir);\n+  ASSERT_OK(datagen_left());\n+  std::string substrait_left_file_uri = \"file://\" + datagen_left.data_file_path;\n+\n+  TempDataGenerator datagen_right(right_table, right_file_prefix, tempdir);\n+  ASSERT_OK(datagen_right());\n+  std::string substrait_right_file_uri = \"file://\" + datagen_right.data_file_path;\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"join\": {\n+        \"left\": {\n+          \"read\": {\n+            \"base_schema\": {\n+              \"names\": [\"A\", \"B\", \"C\", \"D\"],\n+              \"struct\": {\n+                \"types\": [{\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }]\n+              }\n+            },\n+            \"local_files\": {\n+              \"items\": [\n+                {\n+                  \"uri_file\": \")\" +\n+                               substrait_left_file_uri +\n+                               R\"(\",\n+                  \"parquet\": {}\n+                }\n+              ]\n+            }\n+          }\n+        },\n+        \"right\": {\n+          \"read\": {\n+            \"base_schema\": {\n+              \"names\": [\"X\", \"Y\", \"Z\", \"W\"],\n+              \"struct\": {\n+                \"types\": [{\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }]\n+              }\n+            },\n+            \"local_files\": {\n+              \"items\": [\n+                {\n+                  \"uri_file\": \")\" +\n+                               substrait_right_file_uri +\n+                               R\"(\",\n+                  \"parquet\": {}\n+                }\n+              ]\n+            }\n+          }\n+        },\n+        \"expression\": {\n+          \"scalarFunction\": {\n+            \"functionReference\": 0,\n+            \"arguments\": [{\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }, {\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }],\n+            \"output_type\": {\n+              \"bool\": {}\n+            }\n+          }\n+        },\n+        \"type\": \"JOIN_TYPE_INNER\"\n+      }\n+    }\n+  }],\n+  \"extension_uris\": [\n+      {\n+        \"extension_uri_anchor\": 0,\n+        \"uri\": \")\" + std::string(kSubstraitComparisonFunctionsUri) +\n+                               R\"(\"\n+      }\n+    ],\n+    \"extensions\": [\n+      {\"extension_function\": {\n+        \"extension_uri_reference\": 0,\n+        \"function_anchor\": 0,\n+        \"name\": \"equal\"\n+      }}\n+    ]\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema = schema({\n+      field(\"A\", int32()),\n+      field(\"B\", int32()),\n+      field(\"C\", int32()),\n+      field(\"D\", int32()),\n+      field(\"__fragment_index_l\", int32()),\n+      field(\"__batch_index_l\", int32()),\n+      field(\"__last_in_fragment_l\", boolean()),\n+      field(\"__filename_l\", utf8()),\n\nReview Comment:\n   If we use named table providers instead of files these extra fields will go away which will be nice.\n\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -1814,5 +1920,1049 @@ TEST(Substrait, AggregateBadPhase) {\n   ASSERT_RAISES(NotImplemented, DeserializePlans(*buf, [] { return kNullConsumer; }));\n }\n \n+TEST(Substrait, ProjectRel) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto dummy_schema =\n+      schema({field(\"A\", int32()), field(\"B\", int32()), field(\"C\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto input_table = TableFromJSON(dummy_schema, {R\"([\n+      [1, 1, 10],\n+      [3, 5, 20],\n+      [4, 1, 30],\n+      [2, 1, 40],\n+      [5, 5, 50],\n+      [2, 2, 60]\n+  ])\"});\n+\n+  std::string file_prefix = \"serde_project_test\";\n+  ASSERT_OK_AND_ASSIGN(auto tempdir,\n+                       arrow::internal::TemporaryDir::Make(\"substrait_project_tempdir\"));\n+\n+  TempDataGenerator datagen(input_table, file_prefix, tempdir);\n+  ASSERT_OK(datagen());\n+  std::string substrait_file_uri = \"file://\" + datagen.data_file_path;\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"project\": {\n+        \"expressions\": [{\n+          \"scalarFunction\": {\n+            \"functionReference\": 0,\n+            \"arguments\": [{\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }, {\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 1\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }],\n+            \"output_type\": {\n+              \"bool\": {}\n+            }\n+          }\n+        },\n+        ],\n+        \"input\" : {\n+          \"read\": {\n+            \"base_schema\": {\n+              \"names\": [\"A\", \"B\", \"C\"],\n+                \"struct\": {\n+                \"types\": [{\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }]\n+              }\n+            },\n+            \"local_files\": {\n+              \"items\": [\n+                {\n+                  \"uri_file\": \")\" +\n+                               substrait_file_uri +\n+                               R\"(\",\n+                  \"parquet\": {}\n+                }\n+              ]\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }],\n+  \"extension_uris\": [\n+      {\n+        \"extension_uri_anchor\": 0,\n+        \"uri\": \")\" + std::string(kSubstraitComparisonFunctionsUri) +\n+                               R\"(\"\n+      }\n+    ],\n+    \"extensions\": [\n+      {\"extension_function\": {\n+        \"extension_uri_reference\": 0,\n+        \"function_anchor\": 0,\n+        \"name\": \"equal\"\n+      }}\n+    ]\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema = schema({field(\"A\", int32()), field(\"B\", int32()),\n+                               field(\"C\", int32()), field(\"equal\", boolean())});\n+  auto expected_table = TableFromJSON(output_schema, {R\"([\n+    [1, 1, 10, true],\n+    [3, 5, 20, false],\n+    [4, 1, 30, false],\n+    [2, 1, 40, false],\n+    [5, 5, 50, true],\n+    [2, 2, 60, true]\n+  ])\"});\n+  EmitValidate(std::move(output_schema), std::move(expected_table), exec_context, buf)();\n+}\n+\n+TEST(Substrait, ProjectRelOnFunctionWithEmit) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto dummy_schema =\n+      schema({field(\"A\", int32()), field(\"B\", int32()), field(\"C\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto input_table = TableFromJSON(dummy_schema, {R\"([\n+      [1, 1, 10],\n+      [3, 5, 20],\n+      [4, 1, 30],\n+      [2, 1, 40],\n+      [5, 5, 50],\n+      [2, 2, 60]\n+  ])\"});\n+\n+  std::string file_prefix = \"serde_project_emit_test\";\n+  ASSERT_OK_AND_ASSIGN(auto tempdir, arrow::internal::TemporaryDir::Make(\n+                                         \"substrait_project_emit_tempdir\"));\n+\n+  TempDataGenerator datagen(input_table, file_prefix, tempdir);\n+  ASSERT_OK(datagen());\n+  std::string substrait_file_uri = \"file://\" + datagen.data_file_path;\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"project\": {\n+        \"common\": {\n+          \"emit\": {\n+            \"outputMapping\": [0, 2, 3]\n+          }\n+        },\n+        \"expressions\": [{\n+          \"scalarFunction\": {\n+            \"functionReference\": 0,\n+            \"arguments\": [{\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }, {\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 1\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }],\n+            \"output_type\": {\n+              \"bool\": {}\n+            }\n+          }\n+        },\n+        ],\n+        \"input\" : {\n+          \"read\": {\n+            \"base_schema\": {\n+              \"names\": [\"A\", \"B\", \"C\"],\n+                \"struct\": {\n+                \"types\": [{\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }]\n+              }\n+            },\n+            \"local_files\": {\n+              \"items\": [\n+                {\n+                  \"uri_file\": \")\" +\n+                               substrait_file_uri +\n+                               R\"(\",\n+                  \"parquet\": {}\n+                }\n+              ]\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }],\n+  \"extension_uris\": [\n+      {\n+        \"extension_uri_anchor\": 0,\n+        \"uri\": \")\" + std::string(kSubstraitComparisonFunctionsUri) +\n+                               R\"(\"\n+      }\n+    ],\n+    \"extensions\": [\n+      {\"extension_function\": {\n+        \"extension_uri_reference\": 0,\n+        \"function_anchor\": 0,\n+        \"name\": \"equal\"\n+      }}\n+    ]\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema =\n+      schema({field(\"A\", int32()), field(\"C\", int32()), field(\"equal\", boolean())});\n+  auto expected_table = TableFromJSON(output_schema, {R\"([\n+      [1, 10, true],\n+      [3, 20, false],\n+      [4, 30, false],\n+      [2, 40, false],\n+      [5, 50, true],\n+      [2, 60, true]\n+  ])\"});\n+  EmitValidate(std::move(output_schema), std::move(expected_table), exec_context, buf)();\n+}\n+\n+TEST(Substrait, ReadRelWithEmit) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto dummy_schema =\n+      schema({field(\"A\", int32()), field(\"B\", int32()), field(\"C\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto input_table = TableFromJSON(dummy_schema, {R\"([\n+      [1, 1, 10],\n+      [3, 4, 20]\n+  ])\"});\n+\n+  ASSERT_OK_AND_ASSIGN(auto tempdir,\n+                       arrow::internal::TemporaryDir::Make(\"substrait_read_tempdir\"));\n+  std::string file_prefix = \"serde_read_emit_test\";\n+\n+  TempDataGenerator datagen(input_table, file_prefix, tempdir);\n+  ASSERT_OK(datagen());\n+  std::string substrait_file_uri = \"file://\" + datagen.data_file_path;\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"read\": {\n+        \"common\": {\n+          \"emit\": {\n+            \"outputMapping\": [1, 2]\n+          }\n+        },\n+        \"base_schema\": {\n+          \"names\": [\"A\", \"B\", \"C\"],\n+            \"struct\": {\n+            \"types\": [{\n+              \"i32\": {}\n+            }, {\n+              \"i32\": {}\n+            }, {\n+              \"i32\": {}\n+            }]\n+          }\n+        },\n+        \"local_files\": {\n+          \"items\": [\n+            {\n+              \"uri_file\": \")\" + substrait_file_uri +\n+                               R\"(\",\n+              \"parquet\": {}\n+            }\n+          ]\n+        }\n+      }\n+    }\n+  }],\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema = schema({field(\"B\", int32()), field(\"C\", int32())});\n+  auto expected_table = TableFromJSON(output_schema, {R\"([\n+      [1, 10],\n+      [4, 20]\n+  ])\"});\n+  EmitValidate(std::move(output_schema), std::move(expected_table), exec_context, buf)();\n+}\n+\n+TEST(Substrait, FilterRelWithEmit) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto dummy_schema = schema({field(\"A\", int32()), field(\"B\", int32()),\n+                              field(\"C\", int32()), field(\"D\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto input_table = TableFromJSON(dummy_schema, {R\"([\n+      [10, 1, 80, 7],\n+      [20, 2, 70, 6],\n+      [30, 3, 30, 5],\n+      [40, 4, 20, 4],\n+      [40, 5, 40, 3],\n+      [20, 6, 20, 2],\n+      [30, 7, 30, 1]\n+  ])\"});\n+\n+  ASSERT_OK_AND_ASSIGN(auto tempdir,\n+                       arrow::internal::TemporaryDir::Make(\"substrait_read_tempdir\"));\n+  std::string file_prefix = \"serde_read_emit_test\";\n+\n+  TempDataGenerator datagen(input_table, file_prefix, tempdir);\n+  ASSERT_OK(datagen());\n+  std::string substrait_file_uri = \"file://\" + datagen.data_file_path;\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"filter\": {\n+        \"common\": {\n+          \"emit\": {\n+            \"outputMapping\": [1, 3]\n+          }\n+        },\n+        \"condition\": {\n+          \"scalarFunction\": {\n+            \"functionReference\": 0,\n+            \"arguments\": [{\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }, {\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 2\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }],\n+            \"output_type\": {\n+              \"bool\": {}\n+            }\n+          }\n+        },\n+        \"input\" : {\n+          \"read\": {\n+            \"base_schema\": {\n+              \"names\": [\"A\", \"B\", \"C\", \"D\"],\n+                \"struct\": {\n+                \"types\": [{\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                },{\n+                  \"i32\": {}\n+                }]\n+              }\n+            },\n+            \"local_files\": {\n+              \"items\": [\n+                {\n+                  \"uri_file\": \")\" +\n+                               substrait_file_uri +\n+                               R\"(\",\n+                  \"parquet\": {}\n+                }\n+              ]\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }],\n+  \"extension_uris\": [\n+      {\n+        \"extension_uri_anchor\": 0,\n+        \"uri\": \")\" + std::string(kSubstraitComparisonFunctionsUri) +\n+                               R\"(\"\n+      }\n+    ],\n+    \"extensions\": [\n+      {\"extension_function\": {\n+        \"extension_uri_reference\": 0,\n+        \"function_anchor\": 0,\n+        \"name\": \"equal\"\n+      }}\n+    ]\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema = schema({field(\"B\", int32()), field(\"D\", int32())});\n+  auto expected_table = TableFromJSON(output_schema, {R\"([\n+      [3, 5],\n+      [5, 3],\n+      [6, 2],\n+      [7, 1]\n+  ])\"});\n+  EmitValidate(std::move(output_schema), std::move(expected_table), exec_context, buf)();\n+}\n+\n+TEST(Substrait, JoinRelEndToEnd) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto left_schema = schema({field(\"A\", int32()), field(\"B\", int32()),\n+                             field(\"C\", int32()), field(\"D\", int32())});\n+\n+  auto right_schema = schema({field(\"X\", int32()), field(\"Y\", int32()),\n+                              field(\"Z\", int32()), field(\"W\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto left_table = TableFromJSON(left_schema, {R\"([\n+      [10, 1, 80, 70],\n+      [20, 2, 70, 60],\n+      [30, 3, 30, 50]\n+  ])\"});\n+\n+  auto right_table = TableFromJSON(right_schema, {R\"([\n+      [10, 1, 81, 71],\n+      [80, 2, 71, 61],\n+      [31, 3, 31, 51]\n+  ])\"});\n+\n+  ASSERT_OK_AND_ASSIGN(auto tempdir,\n+                       arrow::internal::TemporaryDir::Make(\"substrait_join_tempdir\"));\n+  std::string left_file_prefix = \"serde_join_left_emit_test\";\n+  std::string right_file_prefix = \"serde_join_right_emit_test\";\n+\n+  TempDataGenerator datagen_left(left_table, left_file_prefix, tempdir);\n+  ASSERT_OK(datagen_left());\n+  std::string substrait_left_file_uri = \"file://\" + datagen_left.data_file_path;\n+\n+  TempDataGenerator datagen_right(right_table, right_file_prefix, tempdir);\n+  ASSERT_OK(datagen_right());\n+  std::string substrait_right_file_uri = \"file://\" + datagen_right.data_file_path;\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"join\": {\n+        \"left\": {\n+          \"read\": {\n+            \"base_schema\": {\n+              \"names\": [\"A\", \"B\", \"C\", \"D\"],\n+              \"struct\": {\n+                \"types\": [{\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }]\n+              }\n+            },\n+            \"local_files\": {\n+              \"items\": [\n+                {\n+                  \"uri_file\": \")\" +\n+                               substrait_left_file_uri +\n+                               R\"(\",\n+                  \"parquet\": {}\n+                }\n+              ]\n+            }\n+          }\n+        },\n+        \"right\": {\n+          \"read\": {\n+            \"base_schema\": {\n+              \"names\": [\"X\", \"Y\", \"Z\", \"W\"],\n+              \"struct\": {\n+                \"types\": [{\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }]\n+              }\n+            },\n+            \"local_files\": {\n+              \"items\": [\n+                {\n+                  \"uri_file\": \")\" +\n+                               substrait_right_file_uri +\n+                               R\"(\",\n+                  \"parquet\": {}\n+                }\n+              ]\n+            }\n+          }\n+        },\n+        \"expression\": {\n+          \"scalarFunction\": {\n+            \"functionReference\": 0,\n+            \"arguments\": [{\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }, {\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }],\n+            \"output_type\": {\n+              \"bool\": {}\n+            }\n+          }\n+        },\n+        \"type\": \"JOIN_TYPE_INNER\"\n+      }\n+    }\n+  }],\n+  \"extension_uris\": [\n+      {\n+        \"extension_uri_anchor\": 0,\n+        \"uri\": \")\" + std::string(kSubstraitComparisonFunctionsUri) +\n+                               R\"(\"\n+      }\n+    ],\n+    \"extensions\": [\n+      {\"extension_function\": {\n+        \"extension_uri_reference\": 0,\n+        \"function_anchor\": 0,\n+        \"name\": \"equal\"\n+      }}\n+    ]\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema = schema({\n+      field(\"A\", int32()),\n+      field(\"B\", int32()),\n+      field(\"C\", int32()),\n+      field(\"D\", int32()),\n+      field(\"__fragment_index_l\", int32()),\n+      field(\"__batch_index_l\", int32()),\n+      field(\"__last_in_fragment_l\", boolean()),\n+      field(\"__filename_l\", utf8()),\n+      field(\"X\", int32()),\n+      field(\"Y\", int32()),\n+      field(\"Z\", int32()),\n+      field(\"W\", int32()),\n+      field(\"__fragment_index_r\", int32()),\n+      field(\"__batch_index_r\", int32()),\n+      field(\"__last_in_fragment_r\", boolean()),\n+      field(\"__filename_r\", utf8()),\n+  });\n+\n+  // include these columns for comparison\n+  std::vector<int> include_columns{0, 1, 2, 3, 8, 9, 10, 11};\n+  auto compared_output_schema = schema({\n+      field(\"A\", int32()),\n+      field(\"B\", int32()),\n+      field(\"C\", int32()),\n+      field(\"D\", int32()),\n+      field(\"X\", int32()),\n+      field(\"Y\", int32()),\n+      field(\"Z\", int32()),\n+      field(\"W\", int32()),\n+  });\n+  auto expected_table = TableFromJSON(std::move(compared_output_schema), {R\"([\n+      [10, 1, 80, 70, 10, 1, 81, 71]\n+  ])\"});\n+  EmitValidate(std::move(output_schema), std::move(expected_table), exec_context, buf,\n+               std::move(include_columns))();\n+}\n+\n+TEST(Substrait, JoinRelWithEmit) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto left_schema = schema({field(\"A\", int32()), field(\"B\", int32()),\n+                             field(\"C\", int32()), field(\"D\", int32())});\n+\n+  auto right_schema = schema({field(\"X\", int32()), field(\"Y\", int32()),\n+                              field(\"Z\", int32()), field(\"W\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto left_table = TableFromJSON(left_schema, {R\"([\n+      [10, 1, 80, 70],\n+      [20, 2, 70, 60],\n+      [30, 3, 30, 50]\n+  ])\"});\n+\n+  auto right_table = TableFromJSON(right_schema, {R\"([\n+      [10, 1, 81, 71],\n+      [80, 2, 71, 61],\n+      [31, 3, 31, 51]\n+  ])\"});\n+\n+  ASSERT_OK_AND_ASSIGN(auto tempdir,\n+                       arrow::internal::TemporaryDir::Make(\"substrait_join_tempdir\"));\n+  std::string left_file_prefix = \"serde_join_left_emit_test\";\n+  std::string right_file_prefix = \"serde_join_right_emit_test\";\n+\n+  TempDataGenerator datagen_left(left_table, left_file_prefix, tempdir);\n+  ASSERT_OK(datagen_left());\n+  std::string substrait_left_file_uri = \"file://\" + datagen_left.data_file_path;\n+\n+  TempDataGenerator datagen_right(right_table, right_file_prefix, tempdir);\n+  ASSERT_OK(datagen_right());\n+  std::string substrait_right_file_uri = \"file://\" + datagen_right.data_file_path;\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"join\": {\n+        \"common\": {\n+          \"emit\": {\n+            \"outputMapping\": [0, 1, 2, 3, 8, 9, 10, 11]\n+          }\n+        },\n+        \"left\": {\n+          \"read\": {\n+            \"base_schema\": {\n+              \"names\": [\"A\", \"B\", \"C\", \"D\"],\n+              \"struct\": {\n+                \"types\": [{\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }]\n+              }\n+            },\n+            \"local_files\": {\n+              \"items\": [\n+                {\n+                  \"uri_file\": \")\" +\n+                               substrait_left_file_uri +\n+                               R\"(\",\n+                  \"parquet\": {}\n+                }\n+              ]\n+            }\n+          }\n+        },\n+        \"right\": {\n+          \"read\": {\n+            \"base_schema\": {\n+              \"names\": [\"X\", \"Y\", \"Z\", \"W\"],\n+              \"struct\": {\n+                \"types\": [{\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }]\n+              }\n+            },\n+            \"local_files\": {\n+              \"items\": [\n+                {\n+                  \"uri_file\": \")\" +\n+                               substrait_right_file_uri +\n+                               R\"(\",\n+                  \"parquet\": {}\n+                }\n+              ]\n+            }\n+          }\n+        },\n+        \"expression\": {\n+          \"scalarFunction\": {\n+            \"functionReference\": 0,\n+            \"arguments\": [{\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }, {\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }],\n+            \"output_type\": {\n+              \"bool\": {}\n+            }\n+          }\n+        },\n+        \"type\": \"JOIN_TYPE_INNER\"\n+      }\n+    }\n+  }],\n+  \"extension_uris\": [\n+      {\n+        \"extension_uri_anchor\": 0,\n+        \"uri\": \")\" + std::string(kSubstraitComparisonFunctionsUri) +\n+                               R\"(\"\n+      }\n+    ],\n+    \"extensions\": [\n+      {\"extension_function\": {\n+        \"extension_uri_reference\": 0,\n+        \"function_anchor\": 0,\n+        \"name\": \"equal\"\n+      }}\n+    ]\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema = schema({\n+      field(\"A\", int32()),\n+      field(\"B\", int32()),\n+      field(\"C\", int32()),\n+      field(\"D\", int32()),\n+      field(\"X\", int32()),\n+      field(\"Y\", int32()),\n+      field(\"Z\", int32()),\n+      field(\"W\", int32()),\n+  });\n\nReview Comment:\n   I think these join tests are made complicated by having so many fields.  It's probably ok to have just 1-2 fields in each input.\n\n\n\n",
                    "created": "2022-09-06T15:59:28.367+0000",
                    "updated": "2022-09-06T15:59:28.367+0000",
                    "started": "2022-09-06T15:59:28.367+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806453",
                    "issueId": "13426721"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721/worklog/806575",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13914:\nURL: https://github.com/apache/arrow/pull/13914#discussion_r964367982\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -121,6 +155,78 @@ inline compute::Expression UseBoringRefs(const compute::Expression& expr) {\n   return compute::Expression{std::move(modified_call)};\n }\n \n+// TODO: complete this interface\n+struct TempDataGenerator {\n+  TempDataGenerator(const std::shared_ptr<Table> input_table,\n+                    const std::string& file_prefix,\n+                    std::unique_ptr<arrow::internal::TemporaryDir>& tempdir)\n+      : input_table(input_table), file_prefix(file_prefix), tempdir(tempdir) {}\n+\n+  Status operator()() {\n+    auto format = std::make_shared<arrow::dataset::ParquetFileFormat>();\n+    auto filesystem = std::make_shared<fs::LocalFileSystem>();\n+\n+    const std::string file_name = file_prefix + \".parquet\";\n+\n+    ARROW_ASSIGN_OR_RAISE(auto file_path, tempdir->path().Join(file_name));\n+    data_file_path = file_path.ToString();\n+\n+    std::string toReplace(\"/T//\");\n+    size_t pos = data_file_path.find(toReplace);\n+    data_file_path.replace(pos, toReplace.length(), \"/T/\");\n+\n+    ARROW_EXPECT_OK(WriteParquetData(data_file_path, filesystem, input_table));\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<Table> input_table;\n+  std::string file_prefix;\n+  std::unique_ptr<arrow::internal::TemporaryDir>& tempdir;\n+  std::string data_file_path;\n+};\n+\n+struct EmitValidate {\n\nReview Comment:\n   Done.\n\n\n\n",
                    "created": "2022-09-07T04:22:53.576+0000",
                    "updated": "2022-09-07T04:22:53.576+0000",
                    "started": "2022-09-07T04:22:53.576+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806575",
                    "issueId": "13426721"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721/worklog/806576",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13914:\nURL: https://github.com/apache/arrow/pull/13914#discussion_r964369525\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -121,6 +155,78 @@ inline compute::Expression UseBoringRefs(const compute::Expression& expr) {\n   return compute::Expression{std::move(modified_call)};\n }\n \n+// TODO: complete this interface\n+struct TempDataGenerator {\n+  TempDataGenerator(const std::shared_ptr<Table> input_table,\n+                    const std::string& file_prefix,\n+                    std::unique_ptr<arrow::internal::TemporaryDir>& tempdir)\n+      : input_table(input_table), file_prefix(file_prefix), tempdir(tempdir) {}\n+\n+  Status operator()() {\n+    auto format = std::make_shared<arrow::dataset::ParquetFileFormat>();\n+    auto filesystem = std::make_shared<fs::LocalFileSystem>();\n+\n+    const std::string file_name = file_prefix + \".parquet\";\n+\n+    ARROW_ASSIGN_OR_RAISE(auto file_path, tempdir->path().Join(file_name));\n+    data_file_path = file_path.ToString();\n+\n+    std::string toReplace(\"/T//\");\n+    size_t pos = data_file_path.find(toReplace);\n+    data_file_path.replace(pos, toReplace.length(), \"/T/\");\n+\n+    ARROW_EXPECT_OK(WriteParquetData(data_file_path, filesystem, input_table));\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<Table> input_table;\n+  std::string file_prefix;\n+  std::unique_ptr<arrow::internal::TemporaryDir>& tempdir;\n+  std::string data_file_path;\n+};\n+\n+struct EmitValidate {\n+  EmitValidate(const std::shared_ptr<Schema> output_schema,\n\nReview Comment:\n   Yes, you're right the wording is wrong. The intention was to use both the data generator plus this function to be used in end-to-end cases. So we can use it in other cases too. \n\n\n\n",
                    "created": "2022-09-07T04:26:54.019+0000",
                    "updated": "2022-09-07T04:26:54.019+0000",
                    "started": "2022-09-07T04:26:54.019+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806576",
                    "issueId": "13426721"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721/worklog/806577",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13914:\nURL: https://github.com/apache/arrow/pull/13914#discussion_r964370264\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -1814,5 +1920,1049 @@ TEST(Substrait, AggregateBadPhase) {\n   ASSERT_RAISES(NotImplemented, DeserializePlans(*buf, [] { return kNullConsumer; }));\n }\n \n+TEST(Substrait, ProjectRel) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto dummy_schema =\n+      schema({field(\"A\", int32()), field(\"B\", int32()), field(\"C\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto input_table = TableFromJSON(dummy_schema, {R\"([\n+      [1, 1, 10],\n+      [3, 5, 20],\n+      [4, 1, 30],\n+      [2, 1, 40],\n+      [5, 5, 50],\n+      [2, 2, 60]\n+  ])\"});\n+\n+  std::string file_prefix = \"serde_project_test\";\n+  ASSERT_OK_AND_ASSIGN(auto tempdir,\n+                       arrow::internal::TemporaryDir::Make(\"substrait_project_tempdir\"));\n\nReview Comment:\n   I agree, but this is the case where we were actually testing the file system parts in Acero-Substrait. On the other hand, there is a pending JIRA to add more end-to-end tests then we could write these tests there. So the effort is not a waste. I can modify this to use NamedTable. That's a nice suggestion. \n\n\n\n",
                    "created": "2022-09-07T04:28:54.446+0000",
                    "updated": "2022-09-07T04:28:54.446+0000",
                    "started": "2022-09-07T04:28:54.446+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806577",
                    "issueId": "13426721"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721/worklog/806578",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13914:\nURL: https://github.com/apache/arrow/pull/13914#discussion_r964370433\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -1814,5 +1920,1049 @@ TEST(Substrait, AggregateBadPhase) {\n   ASSERT_RAISES(NotImplemented, DeserializePlans(*buf, [] { return kNullConsumer; }));\n }\n \n+TEST(Substrait, ProjectRel) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto dummy_schema =\n+      schema({field(\"A\", int32()), field(\"B\", int32()), field(\"C\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto input_table = TableFromJSON(dummy_schema, {R\"([\n+      [1, 1, 10],\n+      [3, 5, 20],\n+      [4, 1, 30],\n+      [2, 1, 40],\n+      [5, 5, 50],\n+      [2, 2, 60]\n+  ])\"});\n+\n+  std::string file_prefix = \"serde_project_test\";\n+  ASSERT_OK_AND_ASSIGN(auto tempdir,\n+                       arrow::internal::TemporaryDir::Make(\"substrait_project_tempdir\"));\n+\n+  TempDataGenerator datagen(input_table, file_prefix, tempdir);\n+  ASSERT_OK(datagen());\n+  std::string substrait_file_uri = \"file://\" + datagen.data_file_path;\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"project\": {\n+        \"expressions\": [{\n+          \"scalarFunction\": {\n+            \"functionReference\": 0,\n+            \"arguments\": [{\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }, {\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 1\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }],\n+            \"output_type\": {\n+              \"bool\": {}\n+            }\n+          }\n+        },\n+        ],\n+        \"input\" : {\n+          \"read\": {\n+            \"base_schema\": {\n+              \"names\": [\"A\", \"B\", \"C\"],\n+                \"struct\": {\n+                \"types\": [{\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }]\n+              }\n+            },\n+            \"local_files\": {\n+              \"items\": [\n+                {\n+                  \"uri_file\": \")\" +\n+                               substrait_file_uri +\n+                               R\"(\",\n+                  \"parquet\": {}\n+                }\n+              ]\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }],\n+  \"extension_uris\": [\n+      {\n+        \"extension_uri_anchor\": 0,\n+        \"uri\": \")\" + std::string(kSubstraitComparisonFunctionsUri) +\n+                               R\"(\"\n+      }\n+    ],\n+    \"extensions\": [\n+      {\"extension_function\": {\n+        \"extension_uri_reference\": 0,\n+        \"function_anchor\": 0,\n+        \"name\": \"equal\"\n+      }}\n+    ]\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema = schema({field(\"A\", int32()), field(\"B\", int32()),\n+                               field(\"C\", int32()), field(\"equal\", boolean())});\n+  auto expected_table = TableFromJSON(output_schema, {R\"([\n+    [1, 1, 10, true],\n+    [3, 5, 20, false],\n+    [4, 1, 30, false],\n+    [2, 1, 40, false],\n+    [5, 5, 50, true],\n+    [2, 2, 60, true]\n+  ])\"});\n+  EmitValidate(std::move(output_schema), std::move(expected_table), exec_context, buf)();\n\nReview Comment:\n   Yes, I refactored this to `CheckRoundTripResult`.\n\n\n\n",
                    "created": "2022-09-07T04:29:29.319+0000",
                    "updated": "2022-09-07T04:29:29.319+0000",
                    "started": "2022-09-07T04:29:29.318+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806578",
                    "issueId": "13426721"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721/worklog/806579",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13914:\nURL: https://github.com/apache/arrow/pull/13914#discussion_r964371290\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -121,6 +155,78 @@ inline compute::Expression UseBoringRefs(const compute::Expression& expr) {\n   return compute::Expression{std::move(modified_call)};\n }\n \n+// TODO: complete this interface\n+struct TempDataGenerator {\n+  TempDataGenerator(const std::shared_ptr<Table> input_table,\n+                    const std::string& file_prefix,\n+                    std::unique_ptr<arrow::internal::TemporaryDir>& tempdir)\n+      : input_table(input_table), file_prefix(file_prefix), tempdir(tempdir) {}\n+\n+  Status operator()() {\n+    auto format = std::make_shared<arrow::dataset::ParquetFileFormat>();\n+    auto filesystem = std::make_shared<fs::LocalFileSystem>();\n+\n+    const std::string file_name = file_prefix + \".parquet\";\n+\n+    ARROW_ASSIGN_OR_RAISE(auto file_path, tempdir->path().Join(file_name));\n+    data_file_path = file_path.ToString();\n+\n+    std::string toReplace(\"/T//\");\n+    size_t pos = data_file_path.find(toReplace);\n+    data_file_path.replace(pos, toReplace.length(), \"/T/\");\n+\n+    ARROW_EXPECT_OK(WriteParquetData(data_file_path, filesystem, input_table));\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<Table> input_table;\n+  std::string file_prefix;\n+  std::unique_ptr<arrow::internal::TemporaryDir>& tempdir;\n+  std::string data_file_path;\n+};\n+\n+struct EmitValidate {\n+  EmitValidate(const std::shared_ptr<Schema> output_schema,\n+               const std::shared_ptr<Table> expected_table,\n+               compute::ExecContext& exec_context, std::shared_ptr<Buffer>& buf,\n+               const std::vector<int>& include_columns = {})\n+      : output_schema(output_schema),\n+        expected_table(expected_table),\n+        exec_context(exec_context),\n+        buf(buf),\n+        include_columns(include_columns) {}\n+  void operator()() {\n+    for (auto sp_ext_id_reg :\n+         {std::shared_ptr<ExtensionIdRegistry>(), MakeExtensionIdRegistry()}) {\n\nReview Comment:\n   I think I just adopted what is being done in a previous test without paying that much attention to it. We could just use the `MakeExtensionRegistry`. I already changed it [ToProto-Read](https://github.com/apache/arrow/pull/13401). \r\n   \r\n   And I updated here too. \n\n\n\n",
                    "created": "2022-09-07T04:31:39.928+0000",
                    "updated": "2022-09-07T04:31:39.928+0000",
                    "started": "2022-09-07T04:31:39.928+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806579",
                    "issueId": "13426721"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721/worklog/806600",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13914:\nURL: https://github.com/apache/arrow/pull/13914#discussion_r964457293\n\n\n##########\ncpp/src/arrow/engine/substrait/serde_test.cc:\n##########\n@@ -1814,5 +1920,1049 @@ TEST(Substrait, AggregateBadPhase) {\n   ASSERT_RAISES(NotImplemented, DeserializePlans(*buf, [] { return kNullConsumer; }));\n }\n \n+TEST(Substrait, ProjectRel) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto dummy_schema =\n+      schema({field(\"A\", int32()), field(\"B\", int32()), field(\"C\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto input_table = TableFromJSON(dummy_schema, {R\"([\n+      [1, 1, 10],\n+      [3, 5, 20],\n+      [4, 1, 30],\n+      [2, 1, 40],\n+      [5, 5, 50],\n+      [2, 2, 60]\n+  ])\"});\n+\n+  std::string file_prefix = \"serde_project_test\";\n+  ASSERT_OK_AND_ASSIGN(auto tempdir,\n+                       arrow::internal::TemporaryDir::Make(\"substrait_project_tempdir\"));\n+\n+  TempDataGenerator datagen(input_table, file_prefix, tempdir);\n+  ASSERT_OK(datagen());\n+  std::string substrait_file_uri = \"file://\" + datagen.data_file_path;\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"project\": {\n+        \"expressions\": [{\n+          \"scalarFunction\": {\n+            \"functionReference\": 0,\n+            \"arguments\": [{\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }, {\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 1\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }],\n+            \"output_type\": {\n+              \"bool\": {}\n+            }\n+          }\n+        },\n+        ],\n+        \"input\" : {\n+          \"read\": {\n+            \"base_schema\": {\n+              \"names\": [\"A\", \"B\", \"C\"],\n+                \"struct\": {\n+                \"types\": [{\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }]\n+              }\n+            },\n+            \"local_files\": {\n+              \"items\": [\n+                {\n+                  \"uri_file\": \")\" +\n+                               substrait_file_uri +\n+                               R\"(\",\n+                  \"parquet\": {}\n+                }\n+              ]\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }],\n+  \"extension_uris\": [\n+      {\n+        \"extension_uri_anchor\": 0,\n+        \"uri\": \")\" + std::string(kSubstraitComparisonFunctionsUri) +\n+                               R\"(\"\n+      }\n+    ],\n+    \"extensions\": [\n+      {\"extension_function\": {\n+        \"extension_uri_reference\": 0,\n+        \"function_anchor\": 0,\n+        \"name\": \"equal\"\n+      }}\n+    ]\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema = schema({field(\"A\", int32()), field(\"B\", int32()),\n+                               field(\"C\", int32()), field(\"equal\", boolean())});\n+  auto expected_table = TableFromJSON(output_schema, {R\"([\n+    [1, 1, 10, true],\n+    [3, 5, 20, false],\n+    [4, 1, 30, false],\n+    [2, 1, 40, false],\n+    [5, 5, 50, true],\n+    [2, 2, 60, true]\n+  ])\"});\n+  EmitValidate(std::move(output_schema), std::move(expected_table), exec_context, buf)();\n+}\n+\n+TEST(Substrait, ProjectRelOnFunctionWithEmit) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto dummy_schema =\n+      schema({field(\"A\", int32()), field(\"B\", int32()), field(\"C\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto input_table = TableFromJSON(dummy_schema, {R\"([\n+      [1, 1, 10],\n+      [3, 5, 20],\n+      [4, 1, 30],\n+      [2, 1, 40],\n+      [5, 5, 50],\n+      [2, 2, 60]\n+  ])\"});\n+\n+  std::string file_prefix = \"serde_project_emit_test\";\n+  ASSERT_OK_AND_ASSIGN(auto tempdir, arrow::internal::TemporaryDir::Make(\n+                                         \"substrait_project_emit_tempdir\"));\n+\n+  TempDataGenerator datagen(input_table, file_prefix, tempdir);\n+  ASSERT_OK(datagen());\n+  std::string substrait_file_uri = \"file://\" + datagen.data_file_path;\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"project\": {\n+        \"common\": {\n+          \"emit\": {\n+            \"outputMapping\": [0, 2, 3]\n+          }\n+        },\n+        \"expressions\": [{\n+          \"scalarFunction\": {\n+            \"functionReference\": 0,\n+            \"arguments\": [{\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }, {\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 1\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }],\n+            \"output_type\": {\n+              \"bool\": {}\n+            }\n+          }\n+        },\n+        ],\n+        \"input\" : {\n+          \"read\": {\n+            \"base_schema\": {\n+              \"names\": [\"A\", \"B\", \"C\"],\n+                \"struct\": {\n+                \"types\": [{\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }]\n+              }\n+            },\n+            \"local_files\": {\n+              \"items\": [\n+                {\n+                  \"uri_file\": \")\" +\n+                               substrait_file_uri +\n+                               R\"(\",\n+                  \"parquet\": {}\n+                }\n+              ]\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }],\n+  \"extension_uris\": [\n+      {\n+        \"extension_uri_anchor\": 0,\n+        \"uri\": \")\" + std::string(kSubstraitComparisonFunctionsUri) +\n+                               R\"(\"\n+      }\n+    ],\n+    \"extensions\": [\n+      {\"extension_function\": {\n+        \"extension_uri_reference\": 0,\n+        \"function_anchor\": 0,\n+        \"name\": \"equal\"\n+      }}\n+    ]\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema =\n+      schema({field(\"A\", int32()), field(\"C\", int32()), field(\"equal\", boolean())});\n+  auto expected_table = TableFromJSON(output_schema, {R\"([\n+      [1, 10, true],\n+      [3, 20, false],\n+      [4, 30, false],\n+      [2, 40, false],\n+      [5, 50, true],\n+      [2, 60, true]\n+  ])\"});\n+  EmitValidate(std::move(output_schema), std::move(expected_table), exec_context, buf)();\n+}\n+\n+TEST(Substrait, ReadRelWithEmit) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto dummy_schema =\n+      schema({field(\"A\", int32()), field(\"B\", int32()), field(\"C\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto input_table = TableFromJSON(dummy_schema, {R\"([\n+      [1, 1, 10],\n+      [3, 4, 20]\n+  ])\"});\n+\n+  ASSERT_OK_AND_ASSIGN(auto tempdir,\n+                       arrow::internal::TemporaryDir::Make(\"substrait_read_tempdir\"));\n+  std::string file_prefix = \"serde_read_emit_test\";\n+\n+  TempDataGenerator datagen(input_table, file_prefix, tempdir);\n+  ASSERT_OK(datagen());\n+  std::string substrait_file_uri = \"file://\" + datagen.data_file_path;\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"read\": {\n+        \"common\": {\n+          \"emit\": {\n+            \"outputMapping\": [1, 2]\n+          }\n+        },\n+        \"base_schema\": {\n+          \"names\": [\"A\", \"B\", \"C\"],\n+            \"struct\": {\n+            \"types\": [{\n+              \"i32\": {}\n+            }, {\n+              \"i32\": {}\n+            }, {\n+              \"i32\": {}\n+            }]\n+          }\n+        },\n+        \"local_files\": {\n+          \"items\": [\n+            {\n+              \"uri_file\": \")\" + substrait_file_uri +\n+                               R\"(\",\n+              \"parquet\": {}\n+            }\n+          ]\n+        }\n+      }\n+    }\n+  }],\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema = schema({field(\"B\", int32()), field(\"C\", int32())});\n+  auto expected_table = TableFromJSON(output_schema, {R\"([\n+      [1, 10],\n+      [4, 20]\n+  ])\"});\n+  EmitValidate(std::move(output_schema), std::move(expected_table), exec_context, buf)();\n+}\n+\n+TEST(Substrait, FilterRelWithEmit) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto dummy_schema = schema({field(\"A\", int32()), field(\"B\", int32()),\n+                              field(\"C\", int32()), field(\"D\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto input_table = TableFromJSON(dummy_schema, {R\"([\n+      [10, 1, 80, 7],\n+      [20, 2, 70, 6],\n+      [30, 3, 30, 5],\n+      [40, 4, 20, 4],\n+      [40, 5, 40, 3],\n+      [20, 6, 20, 2],\n+      [30, 7, 30, 1]\n+  ])\"});\n+\n+  ASSERT_OK_AND_ASSIGN(auto tempdir,\n+                       arrow::internal::TemporaryDir::Make(\"substrait_read_tempdir\"));\n+  std::string file_prefix = \"serde_read_emit_test\";\n+\n+  TempDataGenerator datagen(input_table, file_prefix, tempdir);\n+  ASSERT_OK(datagen());\n+  std::string substrait_file_uri = \"file://\" + datagen.data_file_path;\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"filter\": {\n+        \"common\": {\n+          \"emit\": {\n+            \"outputMapping\": [1, 3]\n+          }\n+        },\n+        \"condition\": {\n+          \"scalarFunction\": {\n+            \"functionReference\": 0,\n+            \"arguments\": [{\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }, {\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 2\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }],\n+            \"output_type\": {\n+              \"bool\": {}\n+            }\n+          }\n+        },\n+        \"input\" : {\n+          \"read\": {\n+            \"base_schema\": {\n+              \"names\": [\"A\", \"B\", \"C\", \"D\"],\n+                \"struct\": {\n+                \"types\": [{\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                },{\n+                  \"i32\": {}\n+                }]\n+              }\n+            },\n+            \"local_files\": {\n+              \"items\": [\n+                {\n+                  \"uri_file\": \")\" +\n+                               substrait_file_uri +\n+                               R\"(\",\n+                  \"parquet\": {}\n+                }\n+              ]\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }],\n+  \"extension_uris\": [\n+      {\n+        \"extension_uri_anchor\": 0,\n+        \"uri\": \")\" + std::string(kSubstraitComparisonFunctionsUri) +\n+                               R\"(\"\n+      }\n+    ],\n+    \"extensions\": [\n+      {\"extension_function\": {\n+        \"extension_uri_reference\": 0,\n+        \"function_anchor\": 0,\n+        \"name\": \"equal\"\n+      }}\n+    ]\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema = schema({field(\"B\", int32()), field(\"D\", int32())});\n+  auto expected_table = TableFromJSON(output_schema, {R\"([\n+      [3, 5],\n+      [5, 3],\n+      [6, 2],\n+      [7, 1]\n+  ])\"});\n+  EmitValidate(std::move(output_schema), std::move(expected_table), exec_context, buf)();\n+}\n+\n+TEST(Substrait, JoinRelEndToEnd) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto left_schema = schema({field(\"A\", int32()), field(\"B\", int32()),\n+                             field(\"C\", int32()), field(\"D\", int32())});\n+\n+  auto right_schema = schema({field(\"X\", int32()), field(\"Y\", int32()),\n+                              field(\"Z\", int32()), field(\"W\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto left_table = TableFromJSON(left_schema, {R\"([\n+      [10, 1, 80, 70],\n+      [20, 2, 70, 60],\n+      [30, 3, 30, 50]\n+  ])\"});\n+\n+  auto right_table = TableFromJSON(right_schema, {R\"([\n+      [10, 1, 81, 71],\n+      [80, 2, 71, 61],\n+      [31, 3, 31, 51]\n+  ])\"});\n+\n+  ASSERT_OK_AND_ASSIGN(auto tempdir,\n+                       arrow::internal::TemporaryDir::Make(\"substrait_join_tempdir\"));\n+  std::string left_file_prefix = \"serde_join_left_emit_test\";\n+  std::string right_file_prefix = \"serde_join_right_emit_test\";\n+\n+  TempDataGenerator datagen_left(left_table, left_file_prefix, tempdir);\n+  ASSERT_OK(datagen_left());\n+  std::string substrait_left_file_uri = \"file://\" + datagen_left.data_file_path;\n+\n+  TempDataGenerator datagen_right(right_table, right_file_prefix, tempdir);\n+  ASSERT_OK(datagen_right());\n+  std::string substrait_right_file_uri = \"file://\" + datagen_right.data_file_path;\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"join\": {\n+        \"left\": {\n+          \"read\": {\n+            \"base_schema\": {\n+              \"names\": [\"A\", \"B\", \"C\", \"D\"],\n+              \"struct\": {\n+                \"types\": [{\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }]\n+              }\n+            },\n+            \"local_files\": {\n+              \"items\": [\n+                {\n+                  \"uri_file\": \")\" +\n+                               substrait_left_file_uri +\n+                               R\"(\",\n+                  \"parquet\": {}\n+                }\n+              ]\n+            }\n+          }\n+        },\n+        \"right\": {\n+          \"read\": {\n+            \"base_schema\": {\n+              \"names\": [\"X\", \"Y\", \"Z\", \"W\"],\n+              \"struct\": {\n+                \"types\": [{\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }]\n+              }\n+            },\n+            \"local_files\": {\n+              \"items\": [\n+                {\n+                  \"uri_file\": \")\" +\n+                               substrait_right_file_uri +\n+                               R\"(\",\n+                  \"parquet\": {}\n+                }\n+              ]\n+            }\n+          }\n+        },\n+        \"expression\": {\n+          \"scalarFunction\": {\n+            \"functionReference\": 0,\n+            \"arguments\": [{\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }, {\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }],\n+            \"output_type\": {\n+              \"bool\": {}\n+            }\n+          }\n+        },\n+        \"type\": \"JOIN_TYPE_INNER\"\n+      }\n+    }\n+  }],\n+  \"extension_uris\": [\n+      {\n+        \"extension_uri_anchor\": 0,\n+        \"uri\": \")\" + std::string(kSubstraitComparisonFunctionsUri) +\n+                               R\"(\"\n+      }\n+    ],\n+    \"extensions\": [\n+      {\"extension_function\": {\n+        \"extension_uri_reference\": 0,\n+        \"function_anchor\": 0,\n+        \"name\": \"equal\"\n+      }}\n+    ]\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema = schema({\n+      field(\"A\", int32()),\n+      field(\"B\", int32()),\n+      field(\"C\", int32()),\n+      field(\"D\", int32()),\n+      field(\"__fragment_index_l\", int32()),\n+      field(\"__batch_index_l\", int32()),\n+      field(\"__last_in_fragment_l\", boolean()),\n+      field(\"__filename_l\", utf8()),\n+      field(\"X\", int32()),\n+      field(\"Y\", int32()),\n+      field(\"Z\", int32()),\n+      field(\"W\", int32()),\n+      field(\"__fragment_index_r\", int32()),\n+      field(\"__batch_index_r\", int32()),\n+      field(\"__last_in_fragment_r\", boolean()),\n+      field(\"__filename_r\", utf8()),\n+  });\n+\n+  // include these columns for comparison\n+  std::vector<int> include_columns{0, 1, 2, 3, 8, 9, 10, 11};\n+  auto compared_output_schema = schema({\n+      field(\"A\", int32()),\n+      field(\"B\", int32()),\n+      field(\"C\", int32()),\n+      field(\"D\", int32()),\n+      field(\"X\", int32()),\n+      field(\"Y\", int32()),\n+      field(\"Z\", int32()),\n+      field(\"W\", int32()),\n+  });\n+  auto expected_table = TableFromJSON(std::move(compared_output_schema), {R\"([\n+      [10, 1, 80, 70, 10, 1, 81, 71]\n+  ])\"});\n+  EmitValidate(std::move(output_schema), std::move(expected_table), exec_context, buf,\n+               std::move(include_columns))();\n+}\n+\n+TEST(Substrait, JoinRelWithEmit) {\n+#ifdef _WIN32\n+  GTEST_SKIP() << \"ARROW-16392: Substrait File URI not supported for Windows\";\n+#endif\n+  compute::ExecContext exec_context;\n+  auto left_schema = schema({field(\"A\", int32()), field(\"B\", int32()),\n+                             field(\"C\", int32()), field(\"D\", int32())});\n+\n+  auto right_schema = schema({field(\"X\", int32()), field(\"Y\", int32()),\n+                              field(\"Z\", int32()), field(\"W\", int32())});\n+\n+  // creating a dummy dataset using a dummy table\n+  auto left_table = TableFromJSON(left_schema, {R\"([\n+      [10, 1, 80, 70],\n+      [20, 2, 70, 60],\n+      [30, 3, 30, 50]\n+  ])\"});\n+\n+  auto right_table = TableFromJSON(right_schema, {R\"([\n+      [10, 1, 81, 71],\n+      [80, 2, 71, 61],\n+      [31, 3, 31, 51]\n+  ])\"});\n+\n+  ASSERT_OK_AND_ASSIGN(auto tempdir,\n+                       arrow::internal::TemporaryDir::Make(\"substrait_join_tempdir\"));\n+  std::string left_file_prefix = \"serde_join_left_emit_test\";\n+  std::string right_file_prefix = \"serde_join_right_emit_test\";\n+\n+  TempDataGenerator datagen_left(left_table, left_file_prefix, tempdir);\n+  ASSERT_OK(datagen_left());\n+  std::string substrait_left_file_uri = \"file://\" + datagen_left.data_file_path;\n+\n+  TempDataGenerator datagen_right(right_table, right_file_prefix, tempdir);\n+  ASSERT_OK(datagen_right());\n+  std::string substrait_right_file_uri = \"file://\" + datagen_right.data_file_path;\n+\n+  std::string substrait_json = R\"({\n+  \"relations\": [{\n+    \"rel\": {\n+      \"join\": {\n+        \"common\": {\n+          \"emit\": {\n+            \"outputMapping\": [0, 1, 2, 3, 8, 9, 10, 11]\n+          }\n+        },\n+        \"left\": {\n+          \"read\": {\n+            \"base_schema\": {\n+              \"names\": [\"A\", \"B\", \"C\", \"D\"],\n+              \"struct\": {\n+                \"types\": [{\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }]\n+              }\n+            },\n+            \"local_files\": {\n+              \"items\": [\n+                {\n+                  \"uri_file\": \")\" +\n+                               substrait_left_file_uri +\n+                               R\"(\",\n+                  \"parquet\": {}\n+                }\n+              ]\n+            }\n+          }\n+        },\n+        \"right\": {\n+          \"read\": {\n+            \"base_schema\": {\n+              \"names\": [\"X\", \"Y\", \"Z\", \"W\"],\n+              \"struct\": {\n+                \"types\": [{\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }, {\n+                  \"i32\": {}\n+                }]\n+              }\n+            },\n+            \"local_files\": {\n+              \"items\": [\n+                {\n+                  \"uri_file\": \")\" +\n+                               substrait_right_file_uri +\n+                               R\"(\",\n+                  \"parquet\": {}\n+                }\n+              ]\n+            }\n+          }\n+        },\n+        \"expression\": {\n+          \"scalarFunction\": {\n+            \"functionReference\": 0,\n+            \"arguments\": [{\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }, {\n+              \"value\": {\n+                \"selection\": {\n+                  \"directReference\": {\n+                    \"structField\": {\n+                      \"field\": 0\n+                    }\n+                  },\n+                  \"rootReference\": {\n+                  }\n+                }\n+              }\n+            }],\n+            \"output_type\": {\n+              \"bool\": {}\n+            }\n+          }\n+        },\n+        \"type\": \"JOIN_TYPE_INNER\"\n+      }\n+    }\n+  }],\n+  \"extension_uris\": [\n+      {\n+        \"extension_uri_anchor\": 0,\n+        \"uri\": \")\" + std::string(kSubstraitComparisonFunctionsUri) +\n+                               R\"(\"\n+      }\n+    ],\n+    \"extensions\": [\n+      {\"extension_function\": {\n+        \"extension_uri_reference\": 0,\n+        \"function_anchor\": 0,\n+        \"name\": \"equal\"\n+      }}\n+    ]\n+  })\";\n+\n+  ASSERT_OK_AND_ASSIGN(auto buf, internal::SubstraitFromJSON(\"Plan\", substrait_json));\n+  auto output_schema = schema({\n+      field(\"A\", int32()),\n+      field(\"B\", int32()),\n+      field(\"C\", int32()),\n+      field(\"D\", int32()),\n+      field(\"X\", int32()),\n+      field(\"Y\", int32()),\n+      field(\"Z\", int32()),\n+      field(\"W\", int32()),\n+  });\n\nReview Comment:\n   Done.\n\n\n\n",
                    "created": "2022-09-07T07:00:44.762+0000",
                    "updated": "2022-09-07T07:00:44.762+0000",
                    "started": "2022-09-07T07:00:44.762+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "806600",
                    "issueId": "13426721"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 20400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@72b8baab[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5c86bbc5[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@518cff04[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@38bd2e63[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1af7b72f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4f10c232[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@79d2700b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@284d8764[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f24038d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@466c5109[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2cd423e7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@68e6e7be[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 20400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Sep 13 07:09:29 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-09-13T07:09:29.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15584/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-02-05T01:18:22.000+0000",
        "updated": "2022-09-13T12:31:47.000+0000",
        "timeoriginalestimate": null,
        "description": "Any relation in Substrait is allowed to \"emit\" the output which means reordering the columns (and possibly dropping columns?).\r\n\r\nThe C++ Substrait consumer currently does not handle this.\r\n\r\nThis functionality could probably be handled by a project operation in the Arrow execution engine.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 20400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add support for Substrait's RelCommon::Emit",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721/comment/17563673",
                    "id": "17563673",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
                        "name": "jvanstraten",
                        "key": "JIRAUSER282962",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
                        },
                        "displayName": "Jeroen van Straten",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "While this could be implemented before ARROW-16986, the way it would be implemented depends heavily on whether that's been done yet, so doing this now might duplicate some work. However, ARROW-16986 probably has lower priority.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
                        "name": "jvanstraten",
                        "key": "JIRAUSER282962",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
                        },
                        "displayName": "Jeroen van Straten",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2022-07-07T10:29:22.041+0000",
                    "updated": "2022-07-07T10:29:22.041+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426721/comment/17603404",
                    "id": "17603404",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 13914\r\nhttps://github.com/apache/arrow/pull/13914",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-09-13T07:09:29.711+0000",
                    "updated": "2022-09-13T07:09:29.711+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0za00:",
        "customfield_12314139": null
    }
}