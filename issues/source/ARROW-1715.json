{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13111508",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111508",
    "key": "ARROW-1715",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "beginner",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12532560",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12532560",
                "type": {
                    "id": "12310010",
                    "name": "Incorporates",
                    "inward": "is part of",
                    "outward": "incorporates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"
                },
                "outwardIssue": {
                    "id": "13154264",
                    "key": "ARROW-2493",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13154264",
                    "fields": {
                        "summary": "[Python]\u00a0Add support for pickling to buffers and arrays",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 1800,
            "total": 1800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 1800,
            "total": 1800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1715/votes",
            "votes": 1,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 3,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111508/worklog/125075",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2292: ARROW-1715: [Python] Implement pickling for Column, ChunkedArray, RecordBatch, Table\nURL: https://github.com/apache/arrow/pull/2292\n \n \n   Also add a ChunkedArray.equals method;\r\n   add RecordBatch.columns and Table.columns properties;\r\n   and fix a bug where ChunkedArray::Equals would return true for 0-chunk arrays with different types.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-19T15:58:53.884+0000",
                    "updated": "2018-07-19T15:58:53.884+0000",
                    "started": "2018-07-19T15:58:53.883+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "125075",
                    "issueId": "13111508"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111508/worklog/125120",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2292: ARROW-1715: [Python] Implement pickling for Column, ChunkedArray, RecordBatch, Table\nURL: https://github.com/apache/arrow/pull/2292#issuecomment-406348800\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2292?src=pr&el=h1) Report\n   > Merging [#2292](https://codecov.io/gh/apache/arrow/pull/2292?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/f8cd36aff2a698c3df933c17325a407151b55cd4?src=pr&el=desc) will **increase** coverage by `2.43%`.\n   > The diff coverage is `89.79%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2292/graphs/tree.svg?height=150&src=pr&token=LpTCFbqVT1&width=650)](https://codecov.io/gh/apache/arrow/pull/2292?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2292      +/-   ##\n   ==========================================\n   + Coverage   84.25%   86.69%   +2.43%     \n   ==========================================\n     Files         290      234      -56     \n     Lines       44305    41658    -2647     \n   ==========================================\n   - Hits        37330    36114    -1216     \n   + Misses       6944     5544    -1400     \n   + Partials       31        0      -31\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2292?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [python/pyarrow/tests/test\\_table.py](https://codecov.io/gh/apache/arrow/pull/2292/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF90YWJsZS5weQ==) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/table.cc](https://codecov.io/gh/apache/arrow/pull/2292/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90YWJsZS5jYw==) | `94.1% <100%> (+0.03%)` | :arrow_up: |\n   | [python/pyarrow/table.pxi](https://codecov.io/gh/apache/arrow/pull/2292/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGFibGUucHhp) | `70.03% <64.28%> (+1.1%)` | :arrow_up: |\n   | [go/arrow/array/bufferbuilder\\_numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2292/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVmZmVyYnVpbGRlcl9udW1lcmljLmdlbi5nbw==) | | |\n   | [go/arrow/memory/buffer.go](https://codecov.io/gh/apache/arrow/pull/2292/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L2J1ZmZlci5nbw==) | | |\n   | [go/arrow/datatype\\_numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2292/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbnVtZXJpYy5nZW4uZ28=) | | |\n   | [go/arrow/array/builder.go](https://codecov.io/gh/apache/arrow/pull/2292/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVpbGRlci5nbw==) | | |\n   | [go/arrow/internal/cpu/cpu\\_x86.go](https://codecov.io/gh/apache/arrow/pull/2292/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvY3B1L2NwdV94ODYuZ28=) | | |\n   | [go/arrow/math/float64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2292/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2FtZDY0Lmdv) | | |\n   | [go/arrow/array/boolean.go](https://codecov.io/gh/apache/arrow/pull/2292/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYm9vbGVhbi5nbw==) | | |\n   | ... and [51 more](https://codecov.io/gh/apache/arrow/pull/2292/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2292?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2292?src=pr&el=footer). Last update [f8cd36a...803d274](https://codecov.io/gh/apache/arrow/pull/2292?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-19T17:09:16.155+0000",
                    "updated": "2018-07-19T17:09:16.155+0000",
                    "started": "2018-07-19T17:09:16.154+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "125120",
                    "issueId": "13111508"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111508/worklog/125235",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy closed pull request #2292: ARROW-1715: [Python] Implement pickling for Column, ChunkedArray, RecordBatch, Table\nURL: https://github.com/apache/arrow/pull/2292\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/table.cc b/cpp/src/arrow/table.cc\nindex 87196e7e3a..bb585033a6 100644\n--- a/cpp/src/arrow/table.cc\n+++ b/cpp/src/arrow/table.cc\n@@ -66,6 +66,9 @@ bool ChunkedArray::Equals(const ChunkedArray& other) const {\n   if (null_count_ != other.null_count()) {\n     return false;\n   }\n+  if (length_ == 0) {\n+    return type_->Equals(other.type_);\n+  }\n \n   // Check contents of the underlying arrays. This checks for equality of\n   // the underlying data independently of the chunk size.\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex dc8470f562..21ef7295f1 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -435,6 +435,8 @@ cdef extern from \"arrow/api.h\" namespace \"arrow\" nogil:\n         int64_t length()\n         int64_t null_count()\n         int num_chunks()\n+        c_bool Equals(const CChunkedArray& other)\n+\n         shared_ptr[CArray] chunk(int i)\n         shared_ptr[CDataType] type()\n         shared_ptr[CChunkedArray] Slice(int64_t offset, int64_t length) const\ndiff --git a/python/pyarrow/table.pxi b/python/pyarrow/table.pxi\nindex 2e3f26047b..b89ece77f4 100644\n--- a/python/pyarrow/table.pxi\n+++ b/python/pyarrow/table.pxi\n@@ -50,6 +50,9 @@ cdef class ChunkedArray:\n         self.sp_chunked_array = chunked_array\n         self.chunked_array = chunked_array.get()\n \n+    def __reduce__(self):\n+        return chunked_array, (self.chunks, self.type)\n+\n     property type:\n \n         def __get__(self):\n@@ -95,6 +98,28 @@ cdef class ChunkedArray:\n             else:\n                 index -= self.chunked_array.chunk(j).get().length()\n \n+    def equals(self, ChunkedArray other):\n+        \"\"\"\n+        Return whether the contents of two chunked arrays are equal\n+\n+        Parameters\n+        ----------\n+        other : pyarrow.ChunkedArray\n+\n+        Returns\n+        -------\n+        are_equal : boolean\n+        \"\"\"\n+        cdef:\n+            CChunkedArray* this_arr = self.chunked_array\n+            CChunkedArray* other_arr = other.chunked_array\n+            c_bool result\n+\n+        with nogil:\n+            result = this_arr.Equals(deref(other_arr))\n+\n+        return result\n+\n     def to_pandas(self,\n                   c_bool strings_to_categorical=False,\n                   c_bool zero_copy_only=False,\n@@ -342,6 +367,9 @@ cdef class Column:\n         self.sp_column = column\n         self.column = column.get()\n \n+    def __reduce__(self):\n+        return column, (self.field, self.data)\n+\n     def __repr__(self):\n         from pyarrow.compat import StringIO\n         result = StringIO()\n@@ -638,6 +666,9 @@ cdef class RecordBatch:\n         self.sp_batch = batch\n         self.batch = batch.get()\n \n+    def __reduce__(self):\n+        return _reconstruct_record_batch, (self.columns, self.schema)\n+\n     def __len__(self):\n         return self.batch.num_rows()\n \n@@ -704,6 +735,17 @@ cdef class RecordBatch:\n \n         return self._schema\n \n+    @property\n+    def columns(self):\n+        \"\"\"\n+        List of all columns in numerical order\n+\n+        Returns\n+        -------\n+        list of pa.Column\n+        \"\"\"\n+        return [self.column(i) for i in range(self.num_columns)]\n+\n     def column(self, i):\n         \"\"\"\n         Select single column from record batcha\n@@ -842,7 +884,7 @@ cdef class RecordBatch:\n         return cls.from_arrays(arrays, names, metadata)\n \n     @staticmethod\n-    def from_arrays(list arrays, list names, dict metadata=None):\n+    def from_arrays(list arrays, names, dict metadata=None):\n         \"\"\"\n         Construct a RecordBatch from multiple pyarrow.Arrays\n \n@@ -850,8 +892,8 @@ cdef class RecordBatch:\n         ----------\n         arrays: list of pyarrow.Array\n             column-wise data vectors\n-        names: list of str\n-            Labels for the columns\n+        names: pyarrow.Schema or list of str\n+            schema or list of labels for the columns\n \n         Returns\n         -------\n@@ -860,7 +902,7 @@ cdef class RecordBatch:\n         cdef:\n             Array arr\n             c_string c_name\n-            shared_ptr[CSchema] schema\n+            shared_ptr[CSchema] c_schema\n             vector[shared_ptr[CArray]] c_arrays\n             int64_t num_rows\n             int64_t i\n@@ -870,7 +912,10 @@ cdef class RecordBatch:\n             num_rows = len(arrays[0])\n         else:\n             num_rows = 0\n-        _schema_from_arrays(arrays, names, metadata, &schema)\n+        if isinstance(names, Schema):\n+            c_schema = (<Schema> names).sp_schema\n+        else:\n+            _schema_from_arrays(arrays, names, metadata, &c_schema)\n \n         c_arrays.reserve(len(arrays))\n         for arr in arrays:\n@@ -880,7 +925,14 @@ cdef class RecordBatch:\n             c_arrays.push_back(arr.sp_array)\n \n         return pyarrow_wrap_batch(\n-            CRecordBatch.Make(schema, num_rows, c_arrays))\n+            CRecordBatch.Make(c_schema, num_rows, c_arrays))\n+\n+\n+def _reconstruct_record_batch(columns, schema):\n+    \"\"\"\n+    Internal: reconstruct RecordBatch from pickled components.\n+    \"\"\"\n+    return RecordBatch.from_arrays(columns, schema)\n \n \n def table_to_blocks(PandasOptions options, Table table,\n@@ -935,6 +987,12 @@ cdef class Table:\n         with nogil:\n             check_status(self.table.Validate())\n \n+    def __reduce__(self):\n+        # Reduce the columns as ChunkedArrays to avoid serializing schema\n+        # data twice\n+        columns = [col.data for col in self.columns]\n+        return _reconstruct_table, (columns, self.schema)\n+\n     def replace_schema_metadata(self, dict metadata=None):\n         \"\"\"\n         EXPERIMENTAL: Create shallow copy of table by replacing schema\n@@ -1340,6 +1398,17 @@ cdef class Table:\n         for i in range(self.num_columns):\n             yield self.column(i)\n \n+    @property\n+    def columns(self):\n+        \"\"\"\n+        List of all columns in numerical order\n+\n+        Returns\n+        -------\n+        list of pa.Column\n+        \"\"\"\n+        return [self._column(i) for i in range(self.num_columns)]\n+\n     @property\n     def num_columns(self):\n         \"\"\"\n@@ -1443,6 +1512,13 @@ cdef class Table:\n         return table\n \n \n+def _reconstruct_table(arrays, schema):\n+    \"\"\"\n+    Internal: reconstruct pa.Table from pickled components.\n+    \"\"\"\n+    return Table.from_arrays(arrays, schema=schema)\n+\n+\n def concat_tables(tables):\n     \"\"\"\n     Perform zero-copy concatenation of pyarrow.Table objects. Raises exception\ndiff --git a/python/pyarrow/tests/test_table.py b/python/pyarrow/tests/test_table.py\nindex c445434859..cd590373f9 100644\n--- a/python/pyarrow/tests/test_table.py\n+++ b/python/pyarrow/tests/test_table.py\n@@ -16,6 +16,8 @@\n # under the License.\n \n from collections import OrderedDict, Iterable\n+import pickle\n+\n import numpy as np\n from pandas.util.testing import assert_frame_equal\n import pandas as pd\n@@ -72,6 +74,72 @@ def test_chunked_array_iter():\n     assert isinstance(arr, Iterable)\n \n \n+def test_chunked_array_equals():\n+    def eq(xarrs, yarrs):\n+        if isinstance(xarrs, pa.ChunkedArray):\n+            x = xarrs\n+        else:\n+            x = pa.chunked_array(xarrs)\n+        if isinstance(yarrs, pa.ChunkedArray):\n+            y = yarrs\n+        else:\n+            y = pa.chunked_array(yarrs)\n+        assert x.equals(y)\n+        assert y.equals(x)\n+\n+    def ne(xarrs, yarrs):\n+        if isinstance(xarrs, pa.ChunkedArray):\n+            x = xarrs\n+        else:\n+            x = pa.chunked_array(xarrs)\n+        if isinstance(yarrs, pa.ChunkedArray):\n+            y = yarrs\n+        else:\n+            y = pa.chunked_array(yarrs)\n+        assert not x.equals(y)\n+        assert not y.equals(x)\n+\n+    eq(pa.chunked_array([], type=pa.int32()),\n+       pa.chunked_array([], type=pa.int32()))\n+    ne(pa.chunked_array([], type=pa.int32()),\n+       pa.chunked_array([], type=pa.int64()))\n+\n+    a = pa.array([0, 2], type=pa.int32())\n+    b = pa.array([0, 2], type=pa.int64())\n+    c = pa.array([0, 3], type=pa.int32())\n+    d = pa.array([0, 2, 0, 3], type=pa.int32())\n+\n+    eq([a], [a])\n+    ne([a], [b])\n+    eq([a, c], [a, c])\n+    eq([a, c], [d])\n+    ne([c, a], [a, c])\n+\n+\n+@pytest.mark.parametrize(\n+    ('data', 'typ'),\n+    [\n+        ([True, False, True, True], pa.bool_()),\n+        ([1, 2, 4, 6], pa.int64()),\n+        ([1.0, 2.5, None], pa.float64()),\n+        (['a', None, 'b'], pa.string()),\n+        ([], pa.list_(pa.uint8())),\n+        ([[1, 2], [3]], pa.list_(pa.int64())),\n+        ([['a'], None, ['b', 'c']], pa.list_(pa.string())),\n+        ([(1, 'a'), (2, 'c'), None],\n+            pa.struct([pa.field('a', pa.int64()), pa.field('b', pa.string())]))\n+    ]\n+)\n+def test_chunked_array_pickle(data, typ):\n+    arrays = []\n+    while data:\n+        arrays.append(pa.array(data[:2], type=typ))\n+        data = data[2:]\n+    array = pa.chunked_array(arrays, type=typ)\n+    result = pickle.loads(pickle.dumps(array))\n+    assert result.equals(array)\n+\n+\n def test_column_basics():\n     data = [\n         pa.array([-10, -5, 0, 5, 10])\n@@ -108,6 +176,17 @@ def test_column_factory_function():\n         pa.Column.from_array(pa.field('foo', pa.string()), arr)\n \n \n+def test_column_pickle():\n+    arr = pa.chunked_array([[1, 2], [5, 6, 7]], type=pa.int16())\n+    field = pa.field(\"ints\", pa.int16()).add_metadata({b\"foo\": b\"bar\"})\n+    col = pa.column(field, arr)\n+\n+    result = pickle.loads(pickle.dumps(col))\n+    assert result.equals(col)\n+    assert result.data.num_chunks == 2\n+    assert result.field == field\n+\n+\n def test_column_to_pandas():\n     data = [\n         pa.array([-10, -5, 0, 5, 10])\n@@ -154,8 +233,7 @@ def test_recordbatch_basics():\n     ]\n \n     batch = pa.RecordBatch.from_arrays(data, ['c0', 'c1'])\n-\n-    batch.schema.metadata\n+    assert not batch.schema.metadata\n \n     assert len(batch) == 5\n     assert batch.num_rows == 5\n@@ -169,6 +247,13 @@ def test_recordbatch_basics():\n         # bounds checking\n         batch[2]\n \n+    # Schema passed explicitly\n+    schema = pa.schema([pa.field('c0', pa.int16()),\n+                        pa.field('c1', pa.int32())],\n+                       metadata={b'foo': b'bar'})\n+    batch = pa.RecordBatch.from_arrays(data, schema)\n+    assert batch.schema == schema\n+\n \n def test_recordbatch_from_arrays_validate_lengths():\n     # ARROW-2820\n@@ -209,6 +294,21 @@ def test_recordbatch_empty_metadata():\n     assert batch.schema.metadata is None\n \n \n+def test_recordbatch_pickle():\n+    data = [\n+        pa.array(range(5)),\n+        pa.array([-10, -5, 0, 5, 10])\n+    ]\n+    schema = pa.schema([pa.field('ints', pa.int8()),\n+                        pa.field('floats', pa.float32()),\n+                        ]).add_metadata({b'foo': b'bar'})\n+    batch = pa.RecordBatch.from_arrays(data, schema)\n+\n+    result = pickle.loads(pickle.dumps(batch))\n+    assert result.equals(batch)\n+    assert result.schema == schema\n+\n+\n def test_recordbatch_slice_getitem():\n     data = [\n         pa.array(range(5)),\n@@ -341,7 +441,9 @@ def test_table_basics():\n         ('b', [-10, -5, 0, 5, 10])\n     ])\n \n+    columns = []\n     for col in table.itercolumns():\n+        columns.append(col)\n         for chunk in col.data.iterchunks():\n             assert chunk is not None\n \n@@ -351,6 +453,8 @@ def test_table_basics():\n         with pytest.raises(IndexError):\n             col.data.chunk(col.data.num_chunks)\n \n+    assert table.columns == columns\n+\n \n def test_table_from_arrays_invalid_names():\n     data = [\n@@ -364,6 +468,21 @@ def test_table_from_arrays_invalid_names():\n         pa.Table.from_arrays(data, names=['a'])\n \n \n+def test_table_pickle():\n+    data = [\n+        pa.chunked_array([[1, 2], [3, 4]], type=pa.uint32()),\n+        pa.chunked_array([[\"some\", \"strings\", None, \"\"]], type=pa.string()),\n+    ]\n+    schema = pa.schema([pa.field('ints', pa.uint32()),\n+                        pa.field('strs', pa.string())],\n+                       metadata={b'foo': b'bar'})\n+    table = pa.Table.from_arrays(data, schema=schema)\n+\n+    result = pickle.loads(pickle.dumps(table))\n+    result._validate()\n+    assert result.equals(table)\n+\n+\n def test_table_select_column():\n     data = [\n         pa.array(range(5)),\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-19T20:23:57.900+0000",
                    "updated": "2018-07-19T20:23:57.900+0000",
                    "started": "2018-07-19T20:23:57.899+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "125235",
                    "issueId": "13111508"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 1800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1ffcf69f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2ff1f05[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1e8c203d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@64f103de[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55934d94[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@50790a7f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f0b4585[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@43884c49[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@c384641[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@148a8f4b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6158c732[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@60333554[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 1800,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jul 19 20:23:54 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-07-19T20:23:54.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1715/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2017-10-23T18:54:22.000+0000",
        "updated": "2018-07-19T20:23:57.000+0000",
        "timeoriginalestimate": null,
        "description": "At the moment the types {{pyarrow.Column/ChunkedArray/RecordBatch/Table}} cannot be pickled. Although it may not be the fastest way to transport them from one process to another, it is a very comfortable one. We should implement a {{__reduce__()}} for all of them.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "0.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 1800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Implement pickling for Column, ChunkedArray, RecordBatch, Table",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111508/comment/16342559",
                    "id": "16342559",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "[~wesmckinn] Do you have a better idea here on how to do simple serialization instead of wrapping the Array and Column into small RecordBatches and then using the IPC code?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-01-28T12:34:34.809+0000",
                    "updated": "2018-01-28T12:34:34.809+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111508/comment/16344015",
                    "id": "16344015",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Not really, this will introduce a little bit of overhead but I'm not sure what are the best alternatives \u2013 we could support \"Pythonizing\" the internal {{ArrayData}} object and serializing that",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-01-29T21:00:19.623+0000",
                    "updated": "2018-01-29T21:00:19.623+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111508/comment/16409731",
                    "id": "16409731",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "It seems pickling arrays can simply reuse {{Array.buffers()}} and {{Array.from_buffers()}} (once ARROW-2281 is resolved). That will involve copying data but that's unavoidable with pickle.\r\n\r\nIs there any advantage in using the IPC code instead?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-03-22T15:35:44.578+0000",
                    "updated": "2018-03-22T15:35:44.578+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111508/comment/16409880",
                    "id": "16409880",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "No, the advantage of the IPC code was that it is already there. Using {{buffers()}} and {{from_buffers()}}\u00a0is definitely the better approach as this will allow pickling with less copies of the data.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-03-22T16:53:35.760+0000",
                    "updated": "2018-03-22T16:53:35.760+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111508/comment/16410565",
                    "id": "16410565",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "It'd be worth comparing a naive pickle version with a pickle version using {{pyarrow.serialize(...).to_components()}}. The component-based serialization minimizes copying. I'm due to write a blog post about it, as the difference with large objects can be quite significant",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-03-22T23:38:50.589+0000",
                    "updated": "2018-03-22T23:38:50.589+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111508/comment/16411037",
                    "id": "16411037",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "{{pa.serialize()}} currently doesn't seem to support Arrow arrays or other arrow types.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-03-23T09:00:11.484+0000",
                    "updated": "2018-03-23T09:00:11.484+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111508/comment/16411571",
                    "id": "16411571",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Right, what I'm saying is that we could unpack the Array into its buffer + metadata representation (to use {{from_buffers}} on the way back from pickle). I could take a shot at this, maybe next week. I'm not sure which strategy will be more efficient without some closer analysis. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-03-23T15:30:22.257+0000",
                    "updated": "2018-03-23T15:30:22.257+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111508/comment/16411574",
                    "id": "16411574",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "I think it will be down to differences in metadata serialization overhead, because in both cases you end up copying the buffer contents into the pickle stream (and actually there's a second copy before that, as pickle will only allow serializing a bytes object, not a zero-copy buffer).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-03-23T15:33:30.075+0000",
                    "updated": "2018-03-23T15:33:30.075+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111508/comment/16527758",
                    "id": "16527758",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Related: ARROW-2660 (zero-copy pickling).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-06-29T14:51:15.650+0000",
                    "updated": "2018-06-29T14:51:15.650+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111508/comment/16535982",
                    "id": "16535982",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dhirschfeld",
                        "name": "dhirschfeld",
                        "key": "dhirschfeld",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=dhirschfeld&avatarId=33438",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dhirschfeld&avatarId=33438",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dhirschfeld&avatarId=33438",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dhirschfeld&avatarId=33438"
                        },
                        "displayName": "Dave Hirschfeld",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "This has come up in the context of dask.distributed also:\r\nhttps://github.com/dask/distributed/issues/2103",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dhirschfeld",
                        "name": "dhirschfeld",
                        "key": "dhirschfeld",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=dhirschfeld&avatarId=33438",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=dhirschfeld&avatarId=33438",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=dhirschfeld&avatarId=33438",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=dhirschfeld&avatarId=33438"
                        },
                        "displayName": "Dave Hirschfeld",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-07-08T03:36:45.690+0000",
                    "updated": "2018-07-08T03:36:45.690+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111508/comment/16549807",
                    "id": "16549807",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 2292\n[https://github.com/apache/arrow/pull/2292]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-07-19T20:23:54.658+0000",
                    "updated": "2018-07-19T20:23:54.658+0000"
                }
            ],
            "maxResults": 11,
            "total": 11,
            "startAt": 0
        },
        "customfield_12311820": "0|i3llvz:",
        "customfield_12314139": null
    }
}