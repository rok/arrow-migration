{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13424448",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424448",
    "key": "ARROW-15432",
    "fields": {
        "parent": {
            "id": "13423524",
            "key": "ARROW-15367",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13423524",
            "fields": {
                "summary": "[Python] Improve Classes and Methods Docstrings for 8.0.0",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alenka",
            "name": "alenka",
            "key": "alenkaf",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Alenka Frim",
            "active": true,
            "timeZone": "Europe/Ljubljana"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "aggregateprogress": {
            "progress": 27000,
            "total": 27000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 27000,
            "total": 27000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15432/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 45,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424448/worklog/735238",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF opened a new pull request #12543:\nURL: https://github.com/apache/arrow/pull/12543\n\n\n   This PR adds docstring examples to:\r\n   - `pyarrow.csv.write_csv`\r\n   - `pyarrow.csv.read_csv`\r\n   - `pyarrow.csv.ReadOptions` except `block_size`\r\n   - `pyarrow.csv.ParseOptions` except `invalid_row_handler`\r\n   - `pyarrow.csv.ConvertOptions`\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-02T11:30:33.286+0000",
                    "updated": "2022-03-02T11:30:33.286+0000",
                    "started": "2022-03-02T11:30:33.286+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "735238",
                    "issueId": "13424448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424448/worklog/735247",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12543:\nURL: https://github.com/apache/arrow/pull/12543#issuecomment-1056842553\n\n\n   https://issues.apache.org/jira/browse/ARROW-15432\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-02T11:50:59.699+0000",
                    "updated": "2022-03-02T11:50:59.699+0000",
                    "started": "2022-03-02T11:50:59.698+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "735247",
                    "issueId": "13424448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424448/worklog/735940",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #12543:\nURL: https://github.com/apache/arrow/pull/12543#discussion_r818633656\n\n\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -178,6 +183,33 @@ cdef class ReadOptions(_Weakrefable):\n         The number of rows to skip before the column names (if any)\n         and the CSV data.\n         See `skip_rows_after_names` for interaction description\n+\n+        Examples:\n+        ---------\n+        >>> from pyarrow import csv\n\nReview comment:\n       I'm not sure it's worth repeating the import at the top of each example. But otherwise you should add one at the top of the `use_threads` example.\r\n   \r\n   @jorisvandenbossche Thoughts?\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -340,6 +465,22 @@ cdef class ParseOptions(_Weakrefable):\n         \"\"\"\n         The character used optionally for quoting CSV values\n         (False if quoting is not allowed).\n+\n+        Examples:\n+        ---------\n+\n+        >>> from pyarrow import csv\n+\n+        >>> parse_options = csv.ParseOptions(quote_char=\",\")\n+        >>> csv.read_csv(\"animals.csv\", parse_options=parse_options)\n+        pyarrow.Table\n+        \"animals\": string\n+        \"n_legs\": int64\n+        \"entry\": string\n+        ----\n+        \"animals\": [[\"\"Flamingo\"\",\"\"Horse\"\",\"\"Brittle stars\"\",\"\"Centipede\"\"]]\n\nReview comment:\n       Similar question here, and the result will probably confuse the user.\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -223,6 +296,34 @@ cdef class ReadOptions(_Weakrefable):\n         - `skip_rows` is applied (if non-zero);\n         - column names aread (unless `column_names` is set);\n         - `skip_rows_after_names` is applied (if non-zero).\n+\n+        Examples:\n+        ---------\n+\n+        >>> from pyarrow import csv\n+\n+        >>> read_options = csv.ReadOptions(skip_rows_after_names=1)\n+        >>> csv.read_csv(\"animals.csv\", read_options=read_options)\n+        pyarrow.Table\n+        animals: string\n+        n_legs: int64\n+        entry: string\n+        ----\n+        animals: [[\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+        n_legs: [[4,5,100]]\n+        entry: [[\"02/03/2022\",\"03/03/2022\",\"04/03/2022\"]]\n\nReview comment:\n       Sidenote: if the dates where in ISO format (e.g. \"2022-03-02\"), they would be inferred neatly as date32.\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -328,6 +429,30 @@ cdef class ParseOptions(_Weakrefable):\n     def delimiter(self):\n         \"\"\"\n         The character delimiting individual cells in the CSV data.\n+\n+        Examples:\n+        ---------\n+\n+        >>> from pyarrow import csv\n+\n+        >>> parse_options = csv.ParseOptions(delimiter=\";\")\n+        >>> csv.read_csv(\"animals.csv\", parse_options=parse_options)\n+        pyarrow.Table\n+        animals,\"n_legs\",\"entry\": string\n+        ----\n+        animals,\"n_legs\",\"entry\": [[\"Flamingo,2,\"01/03/2022\"\",\"Horse,4,\"02/03/2022\"\",\n+        \"Brittle stars,5,\"03/03/2022\"\",\"Centipede,100,\"04/03/2022\"\"]]\n\nReview comment:\n       I don't know... is it useful to show a CSV file being parsed with the wrong delimiter?\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -190,6 +222,21 @@ cdef class ReadOptions(_Weakrefable):\n         \"\"\"\n         The column names of the target table.  If empty, fall back on\n         `autogenerate_column_names`.\n+\n+        Examples:\n+        ---------\n+        >>> from pyarrow import csv\n+\n+        >>> >>> read_options = csv.ReadOptions(column_names=[\"a\", \"n\", \"d\"])\n\nReview comment:\n       ```suggestion\r\n           >>>read_options = csv.ReadOptions(column_names=[\"a\", \"n\", \"d\"])\r\n   ```\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -152,6 +152,11 @@ cdef class ReadOptions(_Weakrefable):\n     def use_threads(self):\n         \"\"\"\n         Whether to use multiple threads to accelerate reading.\n+\n+        Examples:\n+        ---------\n\nReview comment:\n       I don't think numpydoc expects a trailing colon:\r\n   ```suggestion\r\n           Examples\r\n           --------\r\n   ```\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -359,6 +500,11 @@ cdef class ParseOptions(_Weakrefable):\n         \"\"\"\n         Whether two quotes in a quoted CSV value denote a single quote\n         in the data.\n+\n+        Examples:\n+        ---------\n+        >>> parse_options = csv.ParseOptions(double_quote=False)\n+        >>> csv.read_csv(input_file, parse_options=parse_options)\n\nReview comment:\n       I think we don't necessarily have to add an example if the example doesn't show anything interesting :-)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-03T13:12:10.653+0000",
                    "updated": "2022-03-03T13:12:10.653+0000",
                    "started": "2022-03-03T13:12:10.652+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "735940",
                    "issueId": "13424448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424448/worklog/735949",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on a change in pull request #12543:\nURL: https://github.com/apache/arrow/pull/12543#discussion_r818647828\n\n\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -178,6 +183,33 @@ cdef class ReadOptions(_Weakrefable):\n         The number of rows to skip before the column names (if any)\n         and the CSV data.\n         See `skip_rows_after_names` for interaction description\n+\n+        Examples:\n+        ---------\n+        >>> from pyarrow import csv\n\nReview comment:\n       We were just talking today with Joris that I should put all the examples under the `csv.read_csv()` and so this will not be repeating.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-03T13:20:25.770+0000",
                    "updated": "2022-03-03T13:20:25.770+0000",
                    "started": "2022-03-03T13:20:25.770+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "735949",
                    "issueId": "13424448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424448/worklog/735953",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on a change in pull request #12543:\nURL: https://github.com/apache/arrow/pull/12543#discussion_r818656432\n\n\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -328,6 +429,30 @@ cdef class ParseOptions(_Weakrefable):\n     def delimiter(self):\n         \"\"\"\n         The character delimiting individual cells in the CSV data.\n+\n+        Examples:\n+        ---------\n+\n+        >>> from pyarrow import csv\n+\n+        >>> parse_options = csv.ParseOptions(delimiter=\";\")\n+        >>> csv.read_csv(\"animals.csv\", parse_options=parse_options)\n+        pyarrow.Table\n+        animals,\"n_legs\",\"entry\": string\n+        ----\n+        animals,\"n_legs\",\"entry\": [[\"Flamingo,2,\"01/03/2022\"\",\"Horse,4,\"02/03/2022\"\",\n+        \"Brittle stars,5,\"03/03/2022\"\",\"Centipede,100,\"04/03/2022\"\"]]\n\nReview comment:\n       One option would be to create different `.csv` files so data could be parsed correctly but I can't do that with `csv.write_csv`.\r\n   \r\n   I agree, it doesn't look nice. It does show what it does, but I should find a better way to do this.\r\n   \r\n   Maybe it would be better just to include the examples that work/not confuse and leave out the others. Once the user sees how the options are used, there is no need to list them all anyways. Especially if they will be listed under one docsting.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-03T13:30:54.593+0000",
                    "updated": "2022-03-03T13:30:54.593+0000",
                    "started": "2022-03-03T13:30:54.592+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "735953",
                    "issueId": "13424448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424448/worklog/735955",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on a change in pull request #12543:\nURL: https://github.com/apache/arrow/pull/12543#discussion_r818658916\n\n\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -223,6 +296,34 @@ cdef class ReadOptions(_Weakrefable):\n         - `skip_rows` is applied (if non-zero);\n         - column names aread (unless `column_names` is set);\n         - `skip_rows_after_names` is applied (if non-zero).\n+\n+        Examples:\n+        ---------\n+\n+        >>> from pyarrow import csv\n+\n+        >>> read_options = csv.ReadOptions(skip_rows_after_names=1)\n+        >>> csv.read_csv(\"animals.csv\", read_options=read_options)\n+        pyarrow.Table\n+        animals: string\n+        n_legs: int64\n+        entry: string\n+        ----\n+        animals: [[\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+        n_legs: [[4,5,100]]\n+        entry: [[\"02/03/2022\",\"03/03/2022\",\"04/03/2022\"]]\n\nReview comment:\n       Yes, true, it works great by default like that. But I needed an example for `timestamp_parsers` =)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-03T13:33:38.963+0000",
                    "updated": "2022-03-03T13:33:38.963+0000",
                    "started": "2022-03-03T13:33:38.963+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "735955",
                    "issueId": "13424448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424448/worklog/736614",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #12543:\nURL: https://github.com/apache/arrow/pull/12543#discussion_r819530084\n\n\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -178,6 +183,33 @@ cdef class ReadOptions(_Weakrefable):\n         The number of rows to skip before the column names (if any)\n         and the CSV data.\n         See `skip_rows_after_names` for interaction description\n+\n+        Examples:\n+        ---------\n+        >>> from pyarrow import csv\n\nReview comment:\n       > put all the examples under the `csv.read_csv()` and so this will not be repeating.\r\n   \r\n   All in the `csv.ReadOptions` docstring (and `csv.ConvertOptions` etc), or all under `csv.read_csv` ?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-04T12:29:40.378+0000",
                    "updated": "2022-03-04T12:29:40.378+0000",
                    "started": "2022-03-04T12:29:40.378+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "736614",
                    "issueId": "13424448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424448/worklog/736628",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on a change in pull request #12543:\nURL: https://github.com/apache/arrow/pull/12543#discussion_r819542757\n\n\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -178,6 +183,33 @@ cdef class ReadOptions(_Weakrefable):\n         The number of rows to skip before the column names (if any)\n         and the CSV data.\n         See `skip_rows_after_names` for interaction description\n+\n+        Examples:\n+        ---------\n+        >>> from pyarrow import csv\n\nReview comment:\n       I would suggest to add all under `csv.read_csv` as there is more space available (html version) and I would be able to connect between different options/examples.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-04T12:49:47.543+0000",
                    "updated": "2022-03-04T12:49:47.543+0000",
                    "started": "2022-03-04T12:49:47.543+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "736628",
                    "issueId": "13424448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424448/worklog/738128",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on pull request #12543:\nURL: https://github.com/apache/arrow/pull/12543#issuecomment-1061786598\n\n\n   @pitrou @jorisvandenbossche I have restructured the examples to be under `read_csv` and `write_csv`. Didn't make an example for all the options as the docstring is long already and I think it is not hard to use what's written for missing options also.\r\n   \r\n   So this should be ready for another round of review.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-08T13:38:31.074+0000",
                    "updated": "2022-03-08T13:38:31.074+0000",
                    "started": "2022-03-08T13:38:31.074+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "738128",
                    "issueId": "13424448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424448/worklog/739338",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #12543:\nURL: https://github.com/apache/arrow/pull/12543#issuecomment-1063864657\n\n\n   @AlenkaF I fear this makes the docstring overly long and will make displaying a bit uncomfortable. As a reminder, the docstring can be displayed in its entirety on the interpreter prompt or on generated Sphinx pages (perhaps also in IDEs?). \r\n   \r\n   @jorisvandenbossche What do you think?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-10T09:50:42.934+0000",
                    "updated": "2022-03-10T09:50:42.934+0000",
                    "started": "2022-03-10T09:50:42.934+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739338",
                    "issueId": "13424448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424448/worklog/739378",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on pull request #12543:\nURL: https://github.com/apache/arrow/pull/12543#issuecomment-1063933717\n\n\n   Separating them by the Options would make it better? I think that is fine also.\r\n   I would not give examples per Options parameter though (as did before), but per one Option altogether.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-10T11:04:58.619+0000",
                    "updated": "2022-03-10T11:04:58.619+0000",
                    "started": "2022-03-10T11:04:58.618+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739378",
                    "issueId": "13424448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424448/worklog/739939",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on pull request #12543:\nURL: https://github.com/apache/arrow/pull/12543#issuecomment-1064894467\n\n\n   @pitrou I shuffled examples a bit and moved them under Options. Still quite long but if users search for Options docstring and not so much for Options parameters docstring, this would make sense.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-11T08:40:37.470+0000",
                    "updated": "2022-03-11T08:40:37.470+0000",
                    "started": "2022-03-11T08:40:37.469+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739939",
                    "issueId": "13424448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424448/worklog/743026",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #12543:\nURL: https://github.com/apache/arrow/pull/12543#issuecomment-1070550657\n\n\n   > I fear this makes the docstring overly long and will make displaying a bit uncomfortable.\r\n   \r\n   Another option would be to move them to the user guide. That of course makes them less accessible from the console or notebook where you check the docstring, but for the online docs that might actually give a nicer experience. \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-17T08:52:12.775+0000",
                    "updated": "2022-03-17T08:52:12.775+0000",
                    "started": "2022-03-17T08:52:12.775+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743026",
                    "issueId": "13424448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424448/worklog/743065",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche edited a comment on pull request #12543:\nURL: https://github.com/apache/arrow/pull/12543#issuecomment-1070550657\n\n\n   > I fear this makes the docstring overly long and will make displaying a bit uncomfortable.\r\n   \r\n   Another option would be to move them to the user guide. That of course makes them less accessible from the console or notebook where you check the docstring, but for the online docs that might actually give a nicer experience. \r\n   \r\n   EDIT: Alenka and I just chatted about this, and maybe a better option is to improve the user guide a bit to have better pointers to the options, and then keep the examples in the option docstrings as is being done now in the PR here.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-17T10:15:38.810+0000",
                    "updated": "2022-03-17T10:15:38.810+0000",
                    "started": "2022-03-17T10:15:38.810+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743065",
                    "issueId": "13424448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424448/worklog/743148",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #12543:\nURL: https://github.com/apache/arrow/pull/12543#discussion_r828971202\n\n\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -299,6 +352,48 @@ cdef class ParseOptions(_Weakrefable):\n         parsing (because of a mismatching number of columns).\n         It should accept a single InvalidRow argument and return either\n         \"skip\" or \"error\" depending on the desired outcome.\n+\n+    Example:\n+    --------\n+\n+    Defining an example file from bytes object:\n+\n+    >>> import io\n+    >>> s = b'''1;2;3\n\nReview comment:\n       For this example here I would use the descriptive column names (since you don't need to show providing the names manually)\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -121,6 +121,59 @@ cdef class ReadOptions(_Weakrefable):\n     encoding : str, optional (default 'utf8')\n         The character encoding of the CSV data.  Columns that cannot\n         decode using this encoding can still be read as Binary.\n+\n+    Example\n+    -------\n\nReview comment:\n       ```suggestion\r\n       Examples\r\n       --------\r\n   ```\r\n   \r\n   (and the same for the other docstrings, see https://numpydoc.readthedocs.io/en/latest/format.html#examples)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-17T13:45:26.488+0000",
                    "updated": "2022-03-17T13:45:26.488+0000",
                    "started": "2022-03-17T13:45:26.488+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743148",
                    "issueId": "13424448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424448/worklog/743149",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #12543:\nURL: https://github.com/apache/arrow/pull/12543#discussion_r829120331\n\n\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -546,7 +641,114 @@ cdef class ConvertOptions(_Weakrefable):\n         produce a column of nulls (whose type is selected using\n         `column_types`, or null by default).\n         This option is ignored if `include_columns` is empty.\n+\n+    Example\n+    -------\n+\n+    Defining an example file from bytes object:\n+\n+    >>> import io\n+    >>> s = b'''1,2,3\n+    ... Flamingo,2,01/03/2022\n+    ... Horse,4,02/03/2022\n+    ... Brittle stars,5,03/03/2022\n+    ... Centipede,100,04/03/2022'''\n+\n+    Define date parsing format to get a timestamp type column\n\nReview comment:\n       ```suggestion\r\n       Define a date parsing format to get a timestamp type column\r\n   ```\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -546,7 +641,114 @@ cdef class ConvertOptions(_Weakrefable):\n         produce a column of nulls (whose type is selected using\n         `column_types`, or null by default).\n         This option is ignored if `include_columns` is empty.\n+\n+    Example\n+    -------\n+\n+    Defining an example file from bytes object:\n+\n+    >>> import io\n+    >>> s = b'''1,2,3\n+    ... Flamingo,2,01/03/2022\n+    ... Horse,4,02/03/2022\n+    ... Brittle stars,5,03/03/2022\n+    ... Centipede,100,04/03/2022'''\n+\n+    Define date parsing format to get a timestamp type column\n+    (in case dates are not in ISO format and not converted by default):\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   timestamp_parsers=[\"%m/%d/%Y\", \"%d/%m/%Y\"])\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    n_legs: int64\n+    entry: timestamp[s]\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+    n_legs: [[2,4,5,100]]\n+    entry: [[2022-01-03 00:00:00,2022-02-03 00:00:00,\n+    2022-03-03 00:00:00,2022-04-03 00:00:00]]\n+\n+    Specify which columns to read and add an additional column:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\", \"location\"],\n+    ...                   include_missing_columns=True)\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    location: null\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+    location: [4 nulls]\n+\n+    Define a column as a dictionary:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\"],\n+    ...                   auto_dict_encode=True)\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: dictionary<values=string, indices=int32, ordered=0>\n+    ----\n+    animals: [  -- dictionary:\n+    [\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]  -- indices:\n+    [0,1,2,3]]\n+\n+    Set upper limit for the number of categories. If the categories\n+    is more than the limit, the conversion to dictionary will not\n+    happen:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\"],\n+    ...                   auto_dict_encode=True,\n+    ...                   auto_dict_max_cardinality=2)\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+\n+    Define strings that should be set to missing:\n+\n+    >>> convert_options = csv.ConvertOptions(include_columns=[\"animals\"],\n+    ...                                      strings_can_be_null = True,\n+    ...                                      null_values=[\"Horse\"])\n\nReview comment:\n       A typical example for \"strings_can_be_null\" is where you have data that uses a empty slot for missing values (eg pandas does this by default for writing data):\r\n   \r\n   ```\r\n   In [5]: data = b\"a,b\\nA,1\\n,2\\nC,3\"\r\n   \r\n   In [6]: print(data.decode())\r\n   a,b\r\n   A,1\r\n   ,2\r\n   C,3\r\n   \r\n   In [9]: csv.read_csv(io.BytesIO(data))\r\n   Out[9]: \r\n   pyarrow.Table\r\n   a: string\r\n   b: int64\r\n   ----\r\n   a: [[\"A\",\"\",\"C\"]]\r\n   b: [[1,2,3]]\r\n   \r\n   In [10]: csv.read_csv(io.BytesIO(data), convert_options=csv.ConvertOptions(strings_can_be_null=True))\r\n   Out[10]: \r\n   pyarrow.Table\r\n   a: string\r\n   b: int64\r\n   ----\r\n   a: [[\"A\",null,\"C\"]]\r\n   b: [[1,2,3]]\r\n   \r\n   \r\n   ```\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -546,7 +641,114 @@ cdef class ConvertOptions(_Weakrefable):\n         produce a column of nulls (whose type is selected using\n         `column_types`, or null by default).\n         This option is ignored if `include_columns` is empty.\n+\n+    Example\n+    -------\n+\n+    Defining an example file from bytes object:\n+\n+    >>> import io\n+    >>> s = b'''1,2,3\n+    ... Flamingo,2,01/03/2022\n+    ... Horse,4,02/03/2022\n+    ... Brittle stars,5,03/03/2022\n+    ... Centipede,100,04/03/2022'''\n+\n+    Define date parsing format to get a timestamp type column\n+    (in case dates are not in ISO format and not converted by default):\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   timestamp_parsers=[\"%m/%d/%Y\", \"%d/%m/%Y\"])\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    n_legs: int64\n+    entry: timestamp[s]\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+    n_legs: [[2,4,5,100]]\n+    entry: [[2022-01-03 00:00:00,2022-02-03 00:00:00,\n+    2022-03-03 00:00:00,2022-04-03 00:00:00]]\n+\n+    Specify which columns to read and add an additional column:\n\nReview comment:\n       It makes it longer, but it might be clearer to have two examples here: first only read a subset of columns, and then show you can also list more columns and get them included as null typed column.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-17T13:46:09.011+0000",
                    "updated": "2022-03-17T13:46:09.011+0000",
                    "started": "2022-03-17T13:46:09.011+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743149",
                    "issueId": "13424448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424448/worklog/743150",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #12543:\nURL: https://github.com/apache/arrow/pull/12543#discussion_r829124562\n\n\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -546,7 +641,114 @@ cdef class ConvertOptions(_Weakrefable):\n         produce a column of nulls (whose type is selected using\n         `column_types`, or null by default).\n         This option is ignored if `include_columns` is empty.\n+\n+    Example\n+    -------\n+\n+    Defining an example file from bytes object:\n+\n+    >>> import io\n+    >>> s = b'''1,2,3\n+    ... Flamingo,2,01/03/2022\n+    ... Horse,4,02/03/2022\n+    ... Brittle stars,5,03/03/2022\n+    ... Centipede,100,04/03/2022'''\n+\n+    Define date parsing format to get a timestamp type column\n+    (in case dates are not in ISO format and not converted by default):\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   timestamp_parsers=[\"%m/%d/%Y\", \"%d/%m/%Y\"])\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    n_legs: int64\n+    entry: timestamp[s]\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+    n_legs: [[2,4,5,100]]\n+    entry: [[2022-01-03 00:00:00,2022-02-03 00:00:00,\n+    2022-03-03 00:00:00,2022-04-03 00:00:00]]\n+\n+    Specify which columns to read and add an additional column:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\", \"location\"],\n+    ...                   include_missing_columns=True)\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    location: null\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+    location: [4 nulls]\n+\n+    Define a column as a dictionary:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\"],\n\nReview comment:\n       Leaving out this selection for this example, it will show that the dict encoding only happens for the string column and not for the numerical column\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -546,7 +641,114 @@ cdef class ConvertOptions(_Weakrefable):\n         produce a column of nulls (whose type is selected using\n         `column_types`, or null by default).\n         This option is ignored if `include_columns` is empty.\n+\n+    Example\n+    -------\n+\n+    Defining an example file from bytes object:\n+\n+    >>> import io\n+    >>> s = b'''1,2,3\n+    ... Flamingo,2,01/03/2022\n+    ... Horse,4,02/03/2022\n+    ... Brittle stars,5,03/03/2022\n+    ... Centipede,100,04/03/2022'''\n+\n+    Define date parsing format to get a timestamp type column\n+    (in case dates are not in ISO format and not converted by default):\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   timestamp_parsers=[\"%m/%d/%Y\", \"%d/%m/%Y\"])\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    n_legs: int64\n+    entry: timestamp[s]\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+    n_legs: [[2,4,5,100]]\n+    entry: [[2022-01-03 00:00:00,2022-02-03 00:00:00,\n+    2022-03-03 00:00:00,2022-04-03 00:00:00]]\n+\n+    Specify which columns to read and add an additional column:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\", \"location\"],\n+    ...                   include_missing_columns=True)\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    location: null\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+    location: [4 nulls]\n+\n+    Define a column as a dictionary:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\"],\n+    ...                   auto_dict_encode=True)\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: dictionary<values=string, indices=int32, ordered=0>\n+    ----\n+    animals: [  -- dictionary:\n+    [\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]  -- indices:\n+    [0,1,2,3]]\n+\n+    Set upper limit for the number of categories. If the categories\n+    is more than the limit, the conversion to dictionary will not\n+    happen:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\"],\n+    ...                   auto_dict_encode=True,\n+    ...                   auto_dict_max_cardinality=2)\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+\n+    Define strings that should be set to missing:\n+\n+    >>> convert_options = csv.ConvertOptions(include_columns=[\"animals\"],\n+    ...                                      strings_can_be_null = True,\n+    ...                                      null_values=[\"Horse\"])\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    ----\n+    animals: [[\"Flamingo\",null,\"Brittle stars\",\"Centipede\"]]\n+\n+    Define values to be True and False when converting a column\n+    into a bool type:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\"],\n+    ...                   false_values=[\"Flamingo\",\"Horse\"],\n+    ...                   true_values=[\"Brittle stars\",\"Centipede\"])\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: bool\n+    ----\n+    animals: [[false,false,true,true]]\n+\n+    Change the type of a column:\n\nReview comment:\n       Suggestion to move this example towards the beginning of this set of examples, as I think specifying the column type might be one of the most typical things to do.\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -546,7 +641,114 @@ cdef class ConvertOptions(_Weakrefable):\n         produce a column of nulls (whose type is selected using\n         `column_types`, or null by default).\n         This option is ignored if `include_columns` is empty.\n+\n+    Example\n+    -------\n+\n+    Defining an example file from bytes object:\n+\n+    >>> import io\n+    >>> s = b'''1,2,3\n\nReview comment:\n       same here\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-17T13:46:41.591+0000",
                    "updated": "2022-03-17T13:46:41.591+0000",
                    "started": "2022-03-17T13:46:41.591+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743150",
                    "issueId": "13424448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424448/worklog/743151",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #12543:\nURL: https://github.com/apache/arrow/pull/12543#discussion_r828967518\n\n\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -121,6 +121,59 @@ cdef class ReadOptions(_Weakrefable):\n     encoding : str, optional (default 'utf8')\n         The character encoding of the CSV data.  Columns that cannot\n         decode using this encoding can still be read as Binary.\n+\n+    Example\n+    -------\n+\n+    Defining an example file from bytes object:\n+\n+    >>> import io\n+    >>> s = b'''1,2,3\n+    ... Flamingo,2,2022-03-01\n+    ... Horse,4,2022-03-02\n+    ... Brittle stars,5,2022-03-03\n+    ... Centipede,100,2022-03-04'''\n\nReview comment:\n       The annoying thing here with the `...`, while correct, is that if you copy the example to run it yourself, it won't work. I don't know a good solution though ...\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -546,7 +641,114 @@ cdef class ConvertOptions(_Weakrefable):\n         produce a column of nulls (whose type is selected using\n         `column_types`, or null by default).\n         This option is ignored if `include_columns` is empty.\n+\n+    Example\n+    -------\n+\n+    Defining an example file from bytes object:\n+\n+    >>> import io\n+    >>> s = b'''1,2,3\n+    ... Flamingo,2,01/03/2022\n+    ... Horse,4,02/03/2022\n+    ... Brittle stars,5,03/03/2022\n+    ... Centipede,100,04/03/2022'''\n+\n+    Define date parsing format to get a timestamp type column\n+    (in case dates are not in ISO format and not converted by default):\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   timestamp_parsers=[\"%m/%d/%Y\", \"%d/%m/%Y\"])\n\nReview comment:\n       This seems like bad practice to mix values with month-first vs day-first in a single column, so maybe this is not the best example to show (or maybe use one with a different delimiter instead, like `[\"%m/%d/%Y\", \"%m-%d-%Y\"]`)\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -546,7 +641,114 @@ cdef class ConvertOptions(_Weakrefable):\n         produce a column of nulls (whose type is selected using\n         `column_types`, or null by default).\n         This option is ignored if `include_columns` is empty.\n+\n+    Example\n+    -------\n+\n+    Defining an example file from bytes object:\n+\n+    >>> import io\n+    >>> s = b'''1,2,3\n+    ... Flamingo,2,01/03/2022\n+    ... Horse,4,02/03/2022\n+    ... Brittle stars,5,03/03/2022\n+    ... Centipede,100,04/03/2022'''\n+\n+    Define date parsing format to get a timestamp type column\n+    (in case dates are not in ISO format and not converted by default):\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   timestamp_parsers=[\"%m/%d/%Y\", \"%d/%m/%Y\"])\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    n_legs: int64\n+    entry: timestamp[s]\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+    n_legs: [[2,4,5,100]]\n+    entry: [[2022-01-03 00:00:00,2022-02-03 00:00:00,\n+    2022-03-03 00:00:00,2022-04-03 00:00:00]]\n+\n+    Specify which columns to read and add an additional column:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\", \"location\"],\n+    ...                   include_missing_columns=True)\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    location: null\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+    location: [4 nulls]\n+\n+    Define a column as a dictionary:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\"],\n+    ...                   auto_dict_encode=True)\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: dictionary<values=string, indices=int32, ordered=0>\n+    ----\n+    animals: [  -- dictionary:\n+    [\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]  -- indices:\n+    [0,1,2,3]]\n+\n+    Set upper limit for the number of categories. If the categories\n+    is more than the limit, the conversion to dictionary will not\n+    happen:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\"],\n+    ...                   auto_dict_encode=True,\n+    ...                   auto_dict_max_cardinality=2)\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+\n+    Define strings that should be set to missing:\n+\n+    >>> convert_options = csv.ConvertOptions(include_columns=[\"animals\"],\n+    ...                                      strings_can_be_null = True,\n+    ...                                      null_values=[\"Horse\"])\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    ----\n+    animals: [[\"Flamingo\",null,\"Brittle stars\",\"Centipede\"]]\n+\n+    Define values to be True and False when converting a column\n+    into a bool type:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\"],\n+    ...                   false_values=[\"Flamingo\",\"Horse\"],\n+    ...                   true_values=[\"Brittle stars\",\"Centipede\"])\n\nReview comment:\n       We could also decide to use a few different variants of the example csv data, which could make the example more realistic. For example, you could have a columns with \"F\" and \"N\" values, or \"Yes\" and \"No\" or something like that.\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -121,6 +121,59 @@ cdef class ReadOptions(_Weakrefable):\n     encoding : str, optional (default 'utf8')\n         The character encoding of the CSV data.  Columns that cannot\n         decode using this encoding can still be read as Binary.\n+\n+    Example\n+    -------\n+\n+    Defining an example file from bytes object:\n+\n+    >>> import io\n+    >>> s = b'''1,2,3\n+    ... Flamingo,2,2022-03-01\n+    ... Horse,4,2022-03-02\n+    ... Brittle stars,5,2022-03-03\n+    ... Centipede,100,2022-03-04'''\n\nReview comment:\n       Checking the pandas guide, where we seem to solve this by defining it as a single-line string with manual `\\n` in it for line breaks, but then also print it first to be able to see what it looks like. For example see https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#specifying-column-data-types\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-17T13:47:15.810+0000",
                    "updated": "2022-03-17T13:47:15.810+0000",
                    "started": "2022-03-17T13:47:15.809+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743151",
                    "issueId": "13424448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424448/worklog/744080",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #12543:\nURL: https://github.com/apache/arrow/pull/12543#discussion_r828971202\n\n\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -299,6 +352,48 @@ cdef class ParseOptions(_Weakrefable):\n         parsing (because of a mismatching number of columns).\n         It should accept a single InvalidRow argument and return either\n         \"skip\" or \"error\" depending on the desired outcome.\n+\n+    Example:\n+    --------\n+\n+    Defining an example file from bytes object:\n+\n+    >>> import io\n+    >>> s = b'''1;2;3\n\nReview comment:\n       For this example here I would use the descriptive column names (since you don't need to show providing the names manually)\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -121,6 +121,59 @@ cdef class ReadOptions(_Weakrefable):\n     encoding : str, optional (default 'utf8')\n         The character encoding of the CSV data.  Columns that cannot\n         decode using this encoding can still be read as Binary.\n+\n+    Example\n+    -------\n\nReview comment:\n       ```suggestion\r\n       Examples\r\n       --------\r\n   ```\r\n   \r\n   (and the same for the other docstrings, see https://numpydoc.readthedocs.io/en/latest/format.html#examples)\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -546,7 +641,114 @@ cdef class ConvertOptions(_Weakrefable):\n         produce a column of nulls (whose type is selected using\n         `column_types`, or null by default).\n         This option is ignored if `include_columns` is empty.\n+\n+    Example\n+    -------\n+\n+    Defining an example file from bytes object:\n+\n+    >>> import io\n+    >>> s = b'''1,2,3\n+    ... Flamingo,2,01/03/2022\n+    ... Horse,4,02/03/2022\n+    ... Brittle stars,5,03/03/2022\n+    ... Centipede,100,04/03/2022'''\n+\n+    Define date parsing format to get a timestamp type column\n\nReview comment:\n       ```suggestion\r\n       Define a date parsing format to get a timestamp type column\r\n   ```\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -546,7 +641,114 @@ cdef class ConvertOptions(_Weakrefable):\n         produce a column of nulls (whose type is selected using\n         `column_types`, or null by default).\n         This option is ignored if `include_columns` is empty.\n+\n+    Example\n+    -------\n+\n+    Defining an example file from bytes object:\n+\n+    >>> import io\n+    >>> s = b'''1,2,3\n+    ... Flamingo,2,01/03/2022\n+    ... Horse,4,02/03/2022\n+    ... Brittle stars,5,03/03/2022\n+    ... Centipede,100,04/03/2022'''\n+\n+    Define date parsing format to get a timestamp type column\n+    (in case dates are not in ISO format and not converted by default):\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   timestamp_parsers=[\"%m/%d/%Y\", \"%d/%m/%Y\"])\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    n_legs: int64\n+    entry: timestamp[s]\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+    n_legs: [[2,4,5,100]]\n+    entry: [[2022-01-03 00:00:00,2022-02-03 00:00:00,\n+    2022-03-03 00:00:00,2022-04-03 00:00:00]]\n+\n+    Specify which columns to read and add an additional column:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\", \"location\"],\n+    ...                   include_missing_columns=True)\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    location: null\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+    location: [4 nulls]\n+\n+    Define a column as a dictionary:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\"],\n+    ...                   auto_dict_encode=True)\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: dictionary<values=string, indices=int32, ordered=0>\n+    ----\n+    animals: [  -- dictionary:\n+    [\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]  -- indices:\n+    [0,1,2,3]]\n+\n+    Set upper limit for the number of categories. If the categories\n+    is more than the limit, the conversion to dictionary will not\n+    happen:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\"],\n+    ...                   auto_dict_encode=True,\n+    ...                   auto_dict_max_cardinality=2)\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+\n+    Define strings that should be set to missing:\n+\n+    >>> convert_options = csv.ConvertOptions(include_columns=[\"animals\"],\n+    ...                                      strings_can_be_null = True,\n+    ...                                      null_values=[\"Horse\"])\n\nReview comment:\n       A typical example for \"strings_can_be_null\" is where you have data that uses a empty slot for missing values (eg pandas does this by default for writing data):\r\n   \r\n   ```\r\n   In [5]: data = b\"a,b\\nA,1\\n,2\\nC,3\"\r\n   \r\n   In [6]: print(data.decode())\r\n   a,b\r\n   A,1\r\n   ,2\r\n   C,3\r\n   \r\n   In [9]: csv.read_csv(io.BytesIO(data))\r\n   Out[9]: \r\n   pyarrow.Table\r\n   a: string\r\n   b: int64\r\n   ----\r\n   a: [[\"A\",\"\",\"C\"]]\r\n   b: [[1,2,3]]\r\n   \r\n   In [10]: csv.read_csv(io.BytesIO(data), convert_options=csv.ConvertOptions(strings_can_be_null=True))\r\n   Out[10]: \r\n   pyarrow.Table\r\n   a: string\r\n   b: int64\r\n   ----\r\n   a: [[\"A\",null,\"C\"]]\r\n   b: [[1,2,3]]\r\n   \r\n   \r\n   ```\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -546,7 +641,114 @@ cdef class ConvertOptions(_Weakrefable):\n         produce a column of nulls (whose type is selected using\n         `column_types`, or null by default).\n         This option is ignored if `include_columns` is empty.\n+\n+    Example\n+    -------\n+\n+    Defining an example file from bytes object:\n+\n+    >>> import io\n+    >>> s = b'''1,2,3\n+    ... Flamingo,2,01/03/2022\n+    ... Horse,4,02/03/2022\n+    ... Brittle stars,5,03/03/2022\n+    ... Centipede,100,04/03/2022'''\n+\n+    Define date parsing format to get a timestamp type column\n+    (in case dates are not in ISO format and not converted by default):\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   timestamp_parsers=[\"%m/%d/%Y\", \"%d/%m/%Y\"])\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    n_legs: int64\n+    entry: timestamp[s]\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+    n_legs: [[2,4,5,100]]\n+    entry: [[2022-01-03 00:00:00,2022-02-03 00:00:00,\n+    2022-03-03 00:00:00,2022-04-03 00:00:00]]\n+\n+    Specify which columns to read and add an additional column:\n\nReview comment:\n       It makes it longer, but it might be clearer to have two examples here: first only read a subset of columns, and then show you can also list more columns and get them included as null typed column.\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -546,7 +641,114 @@ cdef class ConvertOptions(_Weakrefable):\n         produce a column of nulls (whose type is selected using\n         `column_types`, or null by default).\n         This option is ignored if `include_columns` is empty.\n+\n+    Example\n+    -------\n+\n+    Defining an example file from bytes object:\n+\n+    >>> import io\n+    >>> s = b'''1,2,3\n+    ... Flamingo,2,01/03/2022\n+    ... Horse,4,02/03/2022\n+    ... Brittle stars,5,03/03/2022\n+    ... Centipede,100,04/03/2022'''\n+\n+    Define date parsing format to get a timestamp type column\n+    (in case dates are not in ISO format and not converted by default):\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   timestamp_parsers=[\"%m/%d/%Y\", \"%d/%m/%Y\"])\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    n_legs: int64\n+    entry: timestamp[s]\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+    n_legs: [[2,4,5,100]]\n+    entry: [[2022-01-03 00:00:00,2022-02-03 00:00:00,\n+    2022-03-03 00:00:00,2022-04-03 00:00:00]]\n+\n+    Specify which columns to read and add an additional column:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\", \"location\"],\n+    ...                   include_missing_columns=True)\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    location: null\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+    location: [4 nulls]\n+\n+    Define a column as a dictionary:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\"],\n\nReview comment:\n       Leaving out this selection for this example, it will show that the dict encoding only happens for the string column and not for the numerical column\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -546,7 +641,114 @@ cdef class ConvertOptions(_Weakrefable):\n         produce a column of nulls (whose type is selected using\n         `column_types`, or null by default).\n         This option is ignored if `include_columns` is empty.\n+\n+    Example\n+    -------\n+\n+    Defining an example file from bytes object:\n+\n+    >>> import io\n+    >>> s = b'''1,2,3\n+    ... Flamingo,2,01/03/2022\n+    ... Horse,4,02/03/2022\n+    ... Brittle stars,5,03/03/2022\n+    ... Centipede,100,04/03/2022'''\n+\n+    Define date parsing format to get a timestamp type column\n+    (in case dates are not in ISO format and not converted by default):\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   timestamp_parsers=[\"%m/%d/%Y\", \"%d/%m/%Y\"])\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    n_legs: int64\n+    entry: timestamp[s]\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+    n_legs: [[2,4,5,100]]\n+    entry: [[2022-01-03 00:00:00,2022-02-03 00:00:00,\n+    2022-03-03 00:00:00,2022-04-03 00:00:00]]\n+\n+    Specify which columns to read and add an additional column:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\", \"location\"],\n+    ...                   include_missing_columns=True)\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    location: null\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+    location: [4 nulls]\n+\n+    Define a column as a dictionary:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\"],\n+    ...                   auto_dict_encode=True)\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: dictionary<values=string, indices=int32, ordered=0>\n+    ----\n+    animals: [  -- dictionary:\n+    [\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]  -- indices:\n+    [0,1,2,3]]\n+\n+    Set upper limit for the number of categories. If the categories\n+    is more than the limit, the conversion to dictionary will not\n+    happen:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\"],\n+    ...                   auto_dict_encode=True,\n+    ...                   auto_dict_max_cardinality=2)\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+\n+    Define strings that should be set to missing:\n+\n+    >>> convert_options = csv.ConvertOptions(include_columns=[\"animals\"],\n+    ...                                      strings_can_be_null = True,\n+    ...                                      null_values=[\"Horse\"])\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    ----\n+    animals: [[\"Flamingo\",null,\"Brittle stars\",\"Centipede\"]]\n+\n+    Define values to be True and False when converting a column\n+    into a bool type:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\"],\n+    ...                   false_values=[\"Flamingo\",\"Horse\"],\n+    ...                   true_values=[\"Brittle stars\",\"Centipede\"])\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: bool\n+    ----\n+    animals: [[false,false,true,true]]\n+\n+    Change the type of a column:\n\nReview comment:\n       Suggestion to move this example towards the beginning of this set of examples, as I think specifying the column type might be one of the most typical things to do.\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -546,7 +641,114 @@ cdef class ConvertOptions(_Weakrefable):\n         produce a column of nulls (whose type is selected using\n         `column_types`, or null by default).\n         This option is ignored if `include_columns` is empty.\n+\n+    Example\n+    -------\n+\n+    Defining an example file from bytes object:\n+\n+    >>> import io\n+    >>> s = b'''1,2,3\n\nReview comment:\n       same here\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -121,6 +121,59 @@ cdef class ReadOptions(_Weakrefable):\n     encoding : str, optional (default 'utf8')\n         The character encoding of the CSV data.  Columns that cannot\n         decode using this encoding can still be read as Binary.\n+\n+    Example\n+    -------\n+\n+    Defining an example file from bytes object:\n+\n+    >>> import io\n+    >>> s = b'''1,2,3\n+    ... Flamingo,2,2022-03-01\n+    ... Horse,4,2022-03-02\n+    ... Brittle stars,5,2022-03-03\n+    ... Centipede,100,2022-03-04'''\n\nReview comment:\n       The annoying thing here with the `...`, while correct, is that if you copy the example to run it yourself, it won't work. I don't know a good solution though ...\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -546,7 +641,114 @@ cdef class ConvertOptions(_Weakrefable):\n         produce a column of nulls (whose type is selected using\n         `column_types`, or null by default).\n         This option is ignored if `include_columns` is empty.\n+\n+    Example\n+    -------\n+\n+    Defining an example file from bytes object:\n+\n+    >>> import io\n+    >>> s = b'''1,2,3\n+    ... Flamingo,2,01/03/2022\n+    ... Horse,4,02/03/2022\n+    ... Brittle stars,5,03/03/2022\n+    ... Centipede,100,04/03/2022'''\n+\n+    Define date parsing format to get a timestamp type column\n+    (in case dates are not in ISO format and not converted by default):\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   timestamp_parsers=[\"%m/%d/%Y\", \"%d/%m/%Y\"])\n\nReview comment:\n       This seems like bad practice to mix values with month-first vs day-first in a single column, so maybe this is not the best example to show (or maybe use one with a different delimiter instead, like `[\"%m/%d/%Y\", \"%m-%d-%Y\"]`)\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -546,7 +641,114 @@ cdef class ConvertOptions(_Weakrefable):\n         produce a column of nulls (whose type is selected using\n         `column_types`, or null by default).\n         This option is ignored if `include_columns` is empty.\n+\n+    Example\n+    -------\n+\n+    Defining an example file from bytes object:\n+\n+    >>> import io\n+    >>> s = b'''1,2,3\n+    ... Flamingo,2,01/03/2022\n+    ... Horse,4,02/03/2022\n+    ... Brittle stars,5,03/03/2022\n+    ... Centipede,100,04/03/2022'''\n+\n+    Define date parsing format to get a timestamp type column\n+    (in case dates are not in ISO format and not converted by default):\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   timestamp_parsers=[\"%m/%d/%Y\", \"%d/%m/%Y\"])\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    n_legs: int64\n+    entry: timestamp[s]\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+    n_legs: [[2,4,5,100]]\n+    entry: [[2022-01-03 00:00:00,2022-02-03 00:00:00,\n+    2022-03-03 00:00:00,2022-04-03 00:00:00]]\n+\n+    Specify which columns to read and add an additional column:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\", \"location\"],\n+    ...                   include_missing_columns=True)\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    location: null\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+    location: [4 nulls]\n+\n+    Define a column as a dictionary:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\"],\n+    ...                   auto_dict_encode=True)\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: dictionary<values=string, indices=int32, ordered=0>\n+    ----\n+    animals: [  -- dictionary:\n+    [\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]  -- indices:\n+    [0,1,2,3]]\n+\n+    Set upper limit for the number of categories. If the categories\n+    is more than the limit, the conversion to dictionary will not\n+    happen:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\"],\n+    ...                   auto_dict_encode=True,\n+    ...                   auto_dict_max_cardinality=2)\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    ----\n+    animals: [[\"Flamingo\",\"Horse\",\"Brittle stars\",\"Centipede\"]]\n+\n+    Define strings that should be set to missing:\n+\n+    >>> convert_options = csv.ConvertOptions(include_columns=[\"animals\"],\n+    ...                                      strings_can_be_null = True,\n+    ...                                      null_values=[\"Horse\"])\n+    >>> csv.read_csv(io.BytesIO(s), convert_options=convert_options)\n+    pyarrow.Table\n+    animals: string\n+    ----\n+    animals: [[\"Flamingo\",null,\"Brittle stars\",\"Centipede\"]]\n+\n+    Define values to be True and False when converting a column\n+    into a bool type:\n+\n+    >>> convert_options = csv.ConvertOptions(\n+    ...                   include_columns=[\"animals\"],\n+    ...                   false_values=[\"Flamingo\",\"Horse\"],\n+    ...                   true_values=[\"Brittle stars\",\"Centipede\"])\n\nReview comment:\n       We could also decide to use a few different variants of the example csv data, which could make the example more realistic. For example, you could have a columns with \"F\" and \"N\" values, or \"Yes\" and \"No\" or something like that.\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -121,6 +121,59 @@ cdef class ReadOptions(_Weakrefable):\n     encoding : str, optional (default 'utf8')\n         The character encoding of the CSV data.  Columns that cannot\n         decode using this encoding can still be read as Binary.\n+\n+    Example\n+    -------\n+\n+    Defining an example file from bytes object:\n+\n+    >>> import io\n+    >>> s = b'''1,2,3\n+    ... Flamingo,2,2022-03-01\n+    ... Horse,4,2022-03-02\n+    ... Brittle stars,5,2022-03-03\n+    ... Centipede,100,2022-03-04'''\n\nReview comment:\n       Checking the pandas guide, where we seem to solve this by defining it as a single-line string with manual `\\n` in it for line breaks, but then also print it first to be able to see what it looks like. For example see https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#specifying-column-data-types\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T15:03:46.084+0000",
                    "updated": "2022-03-18T15:03:46.084+0000",
                    "started": "2022-03-18T15:03:46.084+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744080",
                    "issueId": "13424448"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424448/worklog/744847",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on a change in pull request #12543:\nURL: https://github.com/apache/arrow/pull/12543#discussion_r830765507\n\n\n\n##########\nFile path: python/pyarrow/_csv.pyx\n##########\n@@ -121,6 +121,59 @@ cdef class ReadOptions(_Weakrefable):\n     encoding : str, optional (default 'utf8')\n         The character encoding of the CSV data.  Columns that cannot\n         decode using this encoding can still be read as Binary.\n+\n+    Example\n+    -------\n\nReview comment:\n       Oh this is great, now I can see the change in the Sphinx docs (html version) also. Thank you!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-21T05:23:09.286+0000",
                    "updated": "2022-03-21T05:23:09.286+0000",
                    "started": "2022-03-21T05:23:09.285+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744847",
                    "issueId": "13424448"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 27000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3bffa397[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f3b27be[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@791ab4d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@71e16ad6[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1740f6bc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@74c87c40[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7e096a57[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@444189a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@14a1fbb8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@233caf10[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@16d232f2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3276787a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 27000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Mar 29 09:24:45 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-03-29T09:24:45.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15432/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-01-24T15:43:44.000+0000",
        "updated": "2022-03-31T23:28:10.000+0000",
        "timeoriginalestimate": null,
        "description": "Ensure /docs/python/generated/pyarrow.csv.read_csv.html has an {{Examples}} section",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "7.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 27000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Address CSV docstrings",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424448/comment/17513953",
                    "id": "17513953",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "Issue resolved by pull request 12543\n[https://github.com/apache/arrow/pull/12543]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2022-03-29T09:24:45.580+0000",
                    "updated": "2022-03-29T09:24:45.580+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0yw2w:",
        "customfield_12314139": null
    }
}