{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13397003",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397003",
    "key": "ARROW-13740",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "query-engine"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12621707",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12621707",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "outwardIssue": {
                    "id": "13394945",
                    "key": "ARROW-13618",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13394945",
                    "fields": {
                        "summary": "[R] Use Arrow engine for summarize() by default  ",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/2",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
                            "name": "Critical",
                            "id": "2"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12622245",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12622245",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "outwardIssue": {
                    "id": "13397634",
                    "key": "ARROW-13772",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397634",
                    "fields": {
                        "summary": "[R] Binding for median() and quantile() aggregation functions",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/2",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
                            "name": "Critical",
                            "id": "2"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13740/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 33,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397003/worklog/641271",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10992:\nURL: https://github.com/apache/arrow/pull/10992#issuecomment-904898377\n\n\n   https://issues.apache.org/jira/browse/ARROW-13740\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-24T19:03:10.133+0000",
                    "updated": "2021-08-24T19:03:10.133+0000",
                    "started": "2021-08-24T19:03:10.133+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641271",
                    "issueId": "13397003"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397003/worklog/641716",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10992:\nURL: https://github.com/apache/arrow/pull/10992#discussion_r695814872\n\n\n\n##########\nFile path: r/R/query-engine.R\n##########\n@@ -42,11 +55,73 @@ ExecPlan <- R6Class(\"ExecPlan\",\n       }\n       # ScanNode needs the filter to do predicate pushdown and skip partitions,\n       # and it needs to know which fields to materialize (and which are unnecessary)\n-      ExecNode_Scan(self, dataset, filter, colnames)\n+      ExecNode_Scan(self, dataset, filter, colnames %||% character(0))\n+    },\n+    Build = function(.data) {\n+      # This method takes an arrow_dplyr_query and chains together the\n+      # ExecNodes that they produce. It does not evaluate them--that is Run().\n+      group_vars <- dplyr::group_vars(.data)\n+      grouped <- length(group_vars) > 0\n+\n+      # Collect the target names first because we have to add back the group vars\n+      target_names <- names(.data)\n+      .data <- ensure_group_vars(.data)\n+      .data <- ensure_arrange_vars(.data) # this sets .data$temp_columns\n+\n+      node <- self$Scan(.data)\n+      # ARROW-13498: Even though Scan takes the filter, apparently we have to do it again\n+      if (inherits(.data$filtered_rows, \"Expression\")) {\n+        node <- node$Filter(.data$filtered_rows)\n+      }\n+      # If any columns are derived we need to Project (otherwise this may be no-op)\n+      node <- node$Project(c(.data$selected_columns, .data$temp_columns))\n+\n+      if (length(.data$aggregations)) {\n+        if (grouped) {\n+          # We need to prefix all of the aggregation function names with \"hash_\"\n+          .data$aggregations <- lapply(.data$aggregations, function(x) {\n+            x[[\"fun\"]] <- paste0(\"hash_\", x[[\"fun\"]])\n+            x\n+          })\n+        }\n+\n+        node <- node$Aggregate(\n+          options = .data$aggregations,\n+          target_names = target_names,\n+          out_field_names = names(.data$aggregations),\n+          key_names = group_vars\n+        )\n+\n+        if (grouped) {\n+          # The result will have result columns first then the grouping cols.\n+          # dplyr orders group cols first, so adapt the result to meet that expectation.\n\nReview comment:\n       Although dplyr sorts results by the grouping columns, I do not think it is an improvement to have arrow do that by default. Databases in general do not provide any guarantees that results will be sorted by grouping columns because sorting causes much worse performance on queries that group by high-cardinality columns. At a minimum I think we should provide an option that enables users to toggle this behavior on or off.\r\n   \r\n   \r\n   I think we should provide an option to toggle on/off the behavior to sort the result by group columns. dplyr and some SQL engines do this, but other SQL engines do not, and \n\n##########\nFile path: r/R/query-engine.R\n##########\n@@ -42,11 +55,73 @@ ExecPlan <- R6Class(\"ExecPlan\",\n       }\n       # ScanNode needs the filter to do predicate pushdown and skip partitions,\n       # and it needs to know which fields to materialize (and which are unnecessary)\n-      ExecNode_Scan(self, dataset, filter, colnames)\n+      ExecNode_Scan(self, dataset, filter, colnames %||% character(0))\n+    },\n+    Build = function(.data) {\n+      # This method takes an arrow_dplyr_query and chains together the\n+      # ExecNodes that they produce. It does not evaluate them--that is Run().\n+      group_vars <- dplyr::group_vars(.data)\n+      grouped <- length(group_vars) > 0\n+\n+      # Collect the target names first because we have to add back the group vars\n+      target_names <- names(.data)\n+      .data <- ensure_group_vars(.data)\n+      .data <- ensure_arrange_vars(.data) # this sets .data$temp_columns\n+\n+      node <- self$Scan(.data)\n+      # ARROW-13498: Even though Scan takes the filter, apparently we have to do it again\n+      if (inherits(.data$filtered_rows, \"Expression\")) {\n+        node <- node$Filter(.data$filtered_rows)\n+      }\n+      # If any columns are derived we need to Project (otherwise this may be no-op)\n+      node <- node$Project(c(.data$selected_columns, .data$temp_columns))\n+\n+      if (length(.data$aggregations)) {\n+        if (grouped) {\n+          # We need to prefix all of the aggregation function names with \"hash_\"\n+          .data$aggregations <- lapply(.data$aggregations, function(x) {\n+            x[[\"fun\"]] <- paste0(\"hash_\", x[[\"fun\"]])\n+            x\n+          })\n+        }\n+\n+        node <- node$Aggregate(\n+          options = .data$aggregations,\n+          target_names = target_names,\n+          out_field_names = names(.data$aggregations),\n+          key_names = group_vars\n+        )\n+\n+        if (grouped) {\n+          # The result will have result columns first then the grouping cols.\n+          # dplyr orders group cols first, so adapt the result to meet that expectation.\n\nReview comment:\n       Although dplyr sorts results by the grouping columns, I do not think it is an improvement to have arrow do that by default. Databases in general do not provide any guarantees that results will be sorted by grouping columns because sorting causes much worse performance on queries that group by high-cardinality columns. At a minimum I think we should provide an option that enables users to toggle this behavior on or off.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T14:33:32.081+0000",
                    "updated": "2021-08-25T14:33:32.081+0000",
                    "started": "2021-08-25T14:33:32.081+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641716",
                    "issueId": "13397003"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397003/worklog/641719",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10992:\nURL: https://github.com/apache/arrow/pull/10992#discussion_r695816039\n\n\n\n##########\nFile path: r/R/query-engine.R\n##########\n@@ -42,11 +55,73 @@ ExecPlan <- R6Class(\"ExecPlan\",\n       }\n       # ScanNode needs the filter to do predicate pushdown and skip partitions,\n       # and it needs to know which fields to materialize (and which are unnecessary)\n-      ExecNode_Scan(self, dataset, filter, colnames)\n+      ExecNode_Scan(self, dataset, filter, colnames %||% character(0))\n+    },\n+    Build = function(.data) {\n+      # This method takes an arrow_dplyr_query and chains together the\n+      # ExecNodes that they produce. It does not evaluate them--that is Run().\n+      group_vars <- dplyr::group_vars(.data)\n+      grouped <- length(group_vars) > 0\n+\n+      # Collect the target names first because we have to add back the group vars\n+      target_names <- names(.data)\n+      .data <- ensure_group_vars(.data)\n+      .data <- ensure_arrange_vars(.data) # this sets .data$temp_columns\n+\n+      node <- self$Scan(.data)\n+      # ARROW-13498: Even though Scan takes the filter, apparently we have to do it again\n+      if (inherits(.data$filtered_rows, \"Expression\")) {\n+        node <- node$Filter(.data$filtered_rows)\n+      }\n+      # If any columns are derived we need to Project (otherwise this may be no-op)\n+      node <- node$Project(c(.data$selected_columns, .data$temp_columns))\n+\n+      if (length(.data$aggregations)) {\n+        if (grouped) {\n+          # We need to prefix all of the aggregation function names with \"hash_\"\n+          .data$aggregations <- lapply(.data$aggregations, function(x) {\n+            x[[\"fun\"]] <- paste0(\"hash_\", x[[\"fun\"]])\n+            x\n+          })\n+        }\n+\n+        node <- node$Aggregate(\n+          options = .data$aggregations,\n+          target_names = target_names,\n+          out_field_names = names(.data$aggregations),\n+          key_names = group_vars\n+        )\n+\n+        if (grouped) {\n+          # The result will have result columns first then the grouping cols.\n+          # dplyr orders group cols first, so adapt the result to meet that expectation.\n+          node <- node$Project(\n+            make_field_refs(c(group_vars, names(.data$aggregations)))\n+          )\n+          # Add sorting instructions for the rows too to match dplyr\n+          # (see below about why sorting isn't itself a Node)\n+          node$sort <- list(\n+            names = group_vars,\n+            orders = rep(0L, length(group_vars))\n+          )\n+        }\n+      }\n+\n+      # Apply sorting: this is currently not an ExecNode itself, it is a\n+      # sink node option.\n+      # TODO: error if doing a subsequent operation that would throw away sorting!\n\nReview comment:\n       I think a warning would be more appropriate than an error\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T14:34:32.527+0000",
                    "updated": "2021-08-25T14:34:32.527+0000",
                    "started": "2021-08-25T14:34:32.527+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641719",
                    "issueId": "13397003"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397003/worklog/641723",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10992:\nURL: https://github.com/apache/arrow/pull/10992#discussion_r695831416\n\n\n\n##########\nFile path: r/R/query-engine.R\n##########\n@@ -42,11 +55,73 @@ ExecPlan <- R6Class(\"ExecPlan\",\n       }\n       # ScanNode needs the filter to do predicate pushdown and skip partitions,\n       # and it needs to know which fields to materialize (and which are unnecessary)\n-      ExecNode_Scan(self, dataset, filter, colnames)\n+      ExecNode_Scan(self, dataset, filter, colnames %||% character(0))\n+    },\n+    Build = function(.data) {\n+      # This method takes an arrow_dplyr_query and chains together the\n+      # ExecNodes that they produce. It does not evaluate them--that is Run().\n+      group_vars <- dplyr::group_vars(.data)\n+      grouped <- length(group_vars) > 0\n+\n+      # Collect the target names first because we have to add back the group vars\n+      target_names <- names(.data)\n+      .data <- ensure_group_vars(.data)\n+      .data <- ensure_arrange_vars(.data) # this sets .data$temp_columns\n+\n+      node <- self$Scan(.data)\n+      # ARROW-13498: Even though Scan takes the filter, apparently we have to do it again\n+      if (inherits(.data$filtered_rows, \"Expression\")) {\n+        node <- node$Filter(.data$filtered_rows)\n+      }\n+      # If any columns are derived we need to Project (otherwise this may be no-op)\n+      node <- node$Project(c(.data$selected_columns, .data$temp_columns))\n+\n+      if (length(.data$aggregations)) {\n+        if (grouped) {\n+          # We need to prefix all of the aggregation function names with \"hash_\"\n+          .data$aggregations <- lapply(.data$aggregations, function(x) {\n+            x[[\"fun\"]] <- paste0(\"hash_\", x[[\"fun\"]])\n+            x\n+          })\n+        }\n+\n+        node <- node$Aggregate(\n+          options = .data$aggregations,\n+          target_names = target_names,\n+          out_field_names = names(.data$aggregations),\n+          key_names = group_vars\n+        )\n+\n+        if (grouped) {\n+          # The result will have result columns first then the grouping cols.\n+          # dplyr orders group cols first, so adapt the result to meet that expectation.\n\nReview comment:\n       For context: some databases will sort by the group columns if the result set is small or if the grouping columns have low cardinality, giving users an expectation that results will always be sorted by the group columns. But then when the result is huge or the grouping columns have high cardinality, they will return unsorted results (because sorting would have a large cost). This is an insidious behavior that causes users a lot of bafflement and grief. There is some benefit in just ripping off the band aid immediately and never returning sorted results, to avoid giving users the impression that they should expect that.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T14:50:21.889+0000",
                    "updated": "2021-08-25T14:50:21.889+0000",
                    "started": "2021-08-25T14:50:21.889+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641723",
                    "issueId": "13397003"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397003/worklog/641754",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10992:\nURL: https://github.com/apache/arrow/pull/10992#discussion_r695876860\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-aggregate.R\n##########\n@@ -188,8 +194,32 @@ test_that(\"Filter and aggregate\", {\n       filter(int > 5) %>%\n       group_by(some_grouping) %>%\n       summarize(total = sum(int, na.rm = TRUE)) %>%\n-      arrange(some_grouping) %>%\n       collect(),\n     tbl\n   )\n })\n+\n+test_that(\"Expressions on aggregations\", {\n+  # This is what it effectively is\n+  expect_dplyr_equal(\n+    input %>%\n+      group_by(some_grouping) %>%\n+      summarize(\n+        any = any(lgl),\n+        all = all(lgl)\n+      ) %>%\n+      collect() %>%\n\nReview comment:\n       More accurate representation of what this effectively is\r\n   ```suggestion\r\n         compute() %>%\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T15:38:56.278+0000",
                    "updated": "2021-08-25T15:38:56.278+0000",
                    "started": "2021-08-25T15:38:56.278+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641754",
                    "issueId": "13397003"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397003/worklog/641755",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10992:\nURL: https://github.com/apache/arrow/pull/10992#discussion_r695876860\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-aggregate.R\n##########\n@@ -188,8 +194,32 @@ test_that(\"Filter and aggregate\", {\n       filter(int > 5) %>%\n       group_by(some_grouping) %>%\n       summarize(total = sum(int, na.rm = TRUE)) %>%\n-      arrange(some_grouping) %>%\n       collect(),\n     tbl\n   )\n })\n+\n+test_that(\"Expressions on aggregations\", {\n+  # This is what it effectively is\n+  expect_dplyr_equal(\n+    input %>%\n+      group_by(some_grouping) %>%\n+      summarize(\n+        any = any(lgl),\n+        all = all(lgl)\n+      ) %>%\n+      collect() %>%\n\nReview comment:\n       More accurate representation of what this effectively is:\r\n   ```suggestion\r\n         compute() %>%\r\n   ```\r\n   (The `transmute()` is operating on an Arrow Table, not an R data frame.)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T15:40:03.957+0000",
                    "updated": "2021-08-25T15:40:03.957+0000",
                    "started": "2021-08-25T15:40:03.957+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641755",
                    "issueId": "13397003"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397003/worklog/641757",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10992:\nURL: https://github.com/apache/arrow/pull/10992#discussion_r695876860\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-aggregate.R\n##########\n@@ -188,8 +194,32 @@ test_that(\"Filter and aggregate\", {\n       filter(int > 5) %>%\n       group_by(some_grouping) %>%\n       summarize(total = sum(int, na.rm = TRUE)) %>%\n-      arrange(some_grouping) %>%\n       collect(),\n     tbl\n   )\n })\n+\n+test_that(\"Expressions on aggregations\", {\n+  # This is what it effectively is\n+  expect_dplyr_equal(\n+    input %>%\n+      group_by(some_grouping) %>%\n+      summarize(\n+        any = any(lgl),\n+        all = all(lgl)\n+      ) %>%\n+      collect() %>%\n\nReview comment:\n       More accurate representation of what this effectively is:\r\n   ```suggestion\r\n         compute() %>%\r\n   ```\r\n   (The `transmute()` below this is operating on an Arrow Table, not an R data frame.)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T15:40:20.280+0000",
                    "updated": "2021-08-25T15:40:20.280+0000",
                    "started": "2021-08-25T15:40:20.280+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641757",
                    "issueId": "13397003"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397003/worklog/642928",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #10992:\nURL: https://github.com/apache/arrow/pull/10992#issuecomment-907360052\n\n\n   @bkietz @lidavidm could either of you check out this debug check failure: https://github.com/apache/arrow/pull/10992/checks?check_run_id=3437174950#step:9:12942 ?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-27T17:29:57.304+0000",
                    "updated": "2021-08-27T17:29:57.304+0000",
                    "started": "2021-08-27T17:29:57.304+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "642928",
                    "issueId": "13397003"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397003/worklog/642929",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #10992:\nURL: https://github.com/apache/arrow/pull/10992#issuecomment-907360575\n\n\n   @jonkeane can you help me figure out what's up with https://github.com/apache/arrow/pull/10992/checks?check_run_id=3437175048#step:8:15613? \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-27T17:30:52.380+0000",
                    "updated": "2021-08-27T17:30:52.380+0000",
                    "started": "2021-08-27T17:30:52.380+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "642929",
                    "issueId": "13397003"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397003/worklog/642933",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10992:\nURL: https://github.com/apache/arrow/pull/10992#issuecomment-907372626\n\n\n   > @bkietz @lidavidm could either of you check out this debug check failure: https://github.com/apache/arrow/pull/10992/checks?check_run_id=3437174950#step:9:12942 ?\r\n   \r\n   It looks like two targets are being passed in but only one aggregation. `some_grouping` probably shouldn't go into the targets?\r\n   \r\n   ```\r\n   (gdb) p aggs.size()\r\n   $2 = 1\r\n   (gdb) p aggregate_options.targets.size()\r\n   $3 = 2\r\n   (gdb) p aggregate_options.targets[0].ToString()\r\n   $5 = {static npos = 18446744073709551615, \r\n     _M_dataplus = {<std::allocator<char>> = {<__gnu_cxx::new_allocator<char>> = {<No data fields>}, <No data fields>}, \r\n       _M_p = 0x55555a939db0 \"FieldRef.Name(total)\"}, _M_string_length = 20, {\r\n       _M_local_buf = \"\\036\\000\\000\\000\\000\\000\\000\\000\\277j\\366\\377\\377\\177\\000\", _M_allocated_capacity = 30}}\r\n   (gdb) p aggregate_options.targets[1].ToString()\r\n   $6 = {static npos = 18446744073709551615, \r\n     _M_dataplus = {<std::allocator<char>> = {<__gnu_cxx::new_allocator<char>> = {<No data fields>}, <No data fields>}, \r\n       _M_p = 0x55555a939de0 \"FieldRef.Name(some_grouping)\"}, _M_string_length = 28, {\r\n       _M_local_buf = \"\\036\\000\\000\\000\\000\\000\\000\\000\\277j\\366\\377\\377\\177\\000\", _M_allocated_capacity = 30}}\r\n   ```\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-27T17:53:52.660+0000",
                    "updated": "2021-08-27T17:53:52.660+0000",
                    "started": "2021-08-27T17:53:52.660+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "642933",
                    "issueId": "13397003"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397003/worklog/642950",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #10992:\nURL: https://github.com/apache/arrow/pull/10992#issuecomment-907402194\n\n\n   > > @bkietz @lidavidm could either of you check out this debug check failure: https://github.com/apache/arrow/pull/10992/checks?check_run_id=3437174950#step:9:12942 ?\r\n   > \r\n   > It looks like two targets are being passed in but only one aggregation. `some_grouping` probably shouldn't go into the targets?\r\n   \r\n   Thanks, it looks like I've fixed this (unintentionally)\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-27T18:46:22.898+0000",
                    "updated": "2021-08-27T18:46:22.898+0000",
                    "started": "2021-08-27T18:46:22.898+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "642950",
                    "issueId": "13397003"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397003/worklog/643654",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #10992:\nURL: https://github.com/apache/arrow/pull/10992#discussion_r698714337\n\n\n\n##########\nFile path: r/R/query-engine.R\n##########\n@@ -42,11 +55,73 @@ ExecPlan <- R6Class(\"ExecPlan\",\n       }\n       # ScanNode needs the filter to do predicate pushdown and skip partitions,\n       # and it needs to know which fields to materialize (and which are unnecessary)\n-      ExecNode_Scan(self, dataset, filter, colnames)\n+      ExecNode_Scan(self, dataset, filter, colnames %||% character(0))\n+    },\n+    Build = function(.data) {\n+      # This method takes an arrow_dplyr_query and chains together the\n+      # ExecNodes that they produce. It does not evaluate them--that is Run().\n+      group_vars <- dplyr::group_vars(.data)\n+      grouped <- length(group_vars) > 0\n+\n+      # Collect the target names first because we have to add back the group vars\n+      target_names <- names(.data)\n+      .data <- ensure_group_vars(.data)\n+      .data <- ensure_arrange_vars(.data) # this sets .data$temp_columns\n+\n+      node <- self$Scan(.data)\n+      # ARROW-13498: Even though Scan takes the filter, apparently we have to do it again\n+      if (inherits(.data$filtered_rows, \"Expression\")) {\n+        node <- node$Filter(.data$filtered_rows)\n+      }\n+      # If any columns are derived we need to Project (otherwise this may be no-op)\n+      node <- node$Project(c(.data$selected_columns, .data$temp_columns))\n+\n+      if (length(.data$aggregations)) {\n+        if (grouped) {\n+          # We need to prefix all of the aggregation function names with \"hash_\"\n+          .data$aggregations <- lapply(.data$aggregations, function(x) {\n+            x[[\"fun\"]] <- paste0(\"hash_\", x[[\"fun\"]])\n+            x\n+          })\n+        }\n+\n+        node <- node$Aggregate(\n+          options = .data$aggregations,\n+          target_names = target_names,\n+          out_field_names = names(.data$aggregations),\n+          key_names = group_vars\n+        )\n+\n+        if (grouped) {\n+          # The result will have result columns first then the grouping cols.\n+          # dplyr orders group cols first, so adapt the result to meet that expectation.\n\nReview comment:\n       The code on lines 109-111 reads to me about the order of the columns, not the order of the rows \u2014 maybe I'm missing something or there was code that did change the order of the rows at some point?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-30T18:33:26.705+0000",
                    "updated": "2021-08-30T18:33:26.705+0000",
                    "started": "2021-08-30T18:33:26.705+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643654",
                    "issueId": "13397003"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397003/worklog/643655",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #10992:\nURL: https://github.com/apache/arrow/pull/10992#discussion_r698715025\n\n\n\n##########\nFile path: r/R/query-engine.R\n##########\n@@ -42,11 +55,73 @@ ExecPlan <- R6Class(\"ExecPlan\",\n       }\n       # ScanNode needs the filter to do predicate pushdown and skip partitions,\n       # and it needs to know which fields to materialize (and which are unnecessary)\n-      ExecNode_Scan(self, dataset, filter, colnames)\n+      ExecNode_Scan(self, dataset, filter, colnames %||% character(0))\n+    },\n+    Build = function(.data) {\n+      # This method takes an arrow_dplyr_query and chains together the\n+      # ExecNodes that they produce. It does not evaluate them--that is Run().\n+      group_vars <- dplyr::group_vars(.data)\n+      grouped <- length(group_vars) > 0\n+\n+      # Collect the target names first because we have to add back the group vars\n+      target_names <- names(.data)\n+      .data <- ensure_group_vars(.data)\n+      .data <- ensure_arrange_vars(.data) # this sets .data$temp_columns\n+\n+      node <- self$Scan(.data)\n+      # ARROW-13498: Even though Scan takes the filter, apparently we have to do it again\n+      if (inherits(.data$filtered_rows, \"Expression\")) {\n+        node <- node$Filter(.data$filtered_rows)\n+      }\n+      # If any columns are derived we need to Project (otherwise this may be no-op)\n+      node <- node$Project(c(.data$selected_columns, .data$temp_columns))\n+\n+      if (length(.data$aggregations)) {\n+        if (grouped) {\n+          # We need to prefix all of the aggregation function names with \"hash_\"\n+          .data$aggregations <- lapply(.data$aggregations, function(x) {\n+            x[[\"fun\"]] <- paste0(\"hash_\", x[[\"fun\"]])\n+            x\n+          })\n+        }\n+\n+        node <- node$Aggregate(\n+          options = .data$aggregations,\n+          target_names = target_names,\n+          out_field_names = names(.data$aggregations),\n+          key_names = group_vars\n+        )\n+\n+        if (grouped) {\n+          # The result will have result columns first then the grouping cols.\n+          # dplyr orders group cols first, so adapt the result to meet that expectation.\n\nReview comment:\n       Oh, nevermind I see lines 114-117 do that sorting. I should have read lower and not stopped at the comment \ud83e\udd26 \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-30T18:34:22.914+0000",
                    "updated": "2021-08-30T18:34:22.914+0000",
                    "started": "2021-08-30T18:34:22.913+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643655",
                    "issueId": "13397003"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397003/worklog/643666",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #10992:\nURL: https://github.com/apache/arrow/pull/10992#discussion_r698728331\n\n\n\n##########\nFile path: r/R/query-engine.R\n##########\n@@ -42,11 +55,73 @@ ExecPlan <- R6Class(\"ExecPlan\",\n       }\n       # ScanNode needs the filter to do predicate pushdown and skip partitions,\n       # and it needs to know which fields to materialize (and which are unnecessary)\n-      ExecNode_Scan(self, dataset, filter, colnames)\n+      ExecNode_Scan(self, dataset, filter, colnames %||% character(0))\n+    },\n+    Build = function(.data) {\n+      # This method takes an arrow_dplyr_query and chains together the\n+      # ExecNodes that they produce. It does not evaluate them--that is Run().\n+      group_vars <- dplyr::group_vars(.data)\n+      grouped <- length(group_vars) > 0\n+\n+      # Collect the target names first because we have to add back the group vars\n+      target_names <- names(.data)\n+      .data <- ensure_group_vars(.data)\n+      .data <- ensure_arrange_vars(.data) # this sets .data$temp_columns\n+\n+      node <- self$Scan(.data)\n+      # ARROW-13498: Even though Scan takes the filter, apparently we have to do it again\n+      if (inherits(.data$filtered_rows, \"Expression\")) {\n+        node <- node$Filter(.data$filtered_rows)\n+      }\n+      # If any columns are derived we need to Project (otherwise this may be no-op)\n+      node <- node$Project(c(.data$selected_columns, .data$temp_columns))\n+\n+      if (length(.data$aggregations)) {\n+        if (grouped) {\n+          # We need to prefix all of the aggregation function names with \"hash_\"\n+          .data$aggregations <- lapply(.data$aggregations, function(x) {\n+            x[[\"fun\"]] <- paste0(\"hash_\", x[[\"fun\"]])\n+            x\n+          })\n+        }\n+\n+        node <- node$Aggregate(\n+          options = .data$aggregations,\n+          target_names = target_names,\n+          out_field_names = names(.data$aggregations),\n+          key_names = group_vars\n+        )\n+\n+        if (grouped) {\n+          # The result will have result columns first then the grouping cols.\n+          # dplyr orders group cols first, so adapt the result to meet that expectation.\n\nReview comment:\n       I agree with Ian that an option (with the default being no sort) would be good here. \r\n   \r\n   There's also some (very recent) discussion about removing this in dplyr (if there's a new edition) https://github.com/tidyverse/dplyr/issues/5664#issuecomment-907232443\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-30T18:55:41.938+0000",
                    "updated": "2021-08-30T18:55:41.938+0000",
                    "started": "2021-08-30T18:55:41.937+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643666",
                    "issueId": "13397003"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397003/worklog/643667",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #10992:\nURL: https://github.com/apache/arrow/pull/10992#discussion_r698728331\n\n\n\n##########\nFile path: r/R/query-engine.R\n##########\n@@ -42,11 +55,73 @@ ExecPlan <- R6Class(\"ExecPlan\",\n       }\n       # ScanNode needs the filter to do predicate pushdown and skip partitions,\n       # and it needs to know which fields to materialize (and which are unnecessary)\n-      ExecNode_Scan(self, dataset, filter, colnames)\n+      ExecNode_Scan(self, dataset, filter, colnames %||% character(0))\n+    },\n+    Build = function(.data) {\n+      # This method takes an arrow_dplyr_query and chains together the\n+      # ExecNodes that they produce. It does not evaluate them--that is Run().\n+      group_vars <- dplyr::group_vars(.data)\n+      grouped <- length(group_vars) > 0\n+\n+      # Collect the target names first because we have to add back the group vars\n+      target_names <- names(.data)\n+      .data <- ensure_group_vars(.data)\n+      .data <- ensure_arrange_vars(.data) # this sets .data$temp_columns\n+\n+      node <- self$Scan(.data)\n+      # ARROW-13498: Even though Scan takes the filter, apparently we have to do it again\n+      if (inherits(.data$filtered_rows, \"Expression\")) {\n+        node <- node$Filter(.data$filtered_rows)\n+      }\n+      # If any columns are derived we need to Project (otherwise this may be no-op)\n+      node <- node$Project(c(.data$selected_columns, .data$temp_columns))\n+\n+      if (length(.data$aggregations)) {\n+        if (grouped) {\n+          # We need to prefix all of the aggregation function names with \"hash_\"\n+          .data$aggregations <- lapply(.data$aggregations, function(x) {\n+            x[[\"fun\"]] <- paste0(\"hash_\", x[[\"fun\"]])\n+            x\n+          })\n+        }\n+\n+        node <- node$Aggregate(\n+          options = .data$aggregations,\n+          target_names = target_names,\n+          out_field_names = names(.data$aggregations),\n+          key_names = group_vars\n+        )\n+\n+        if (grouped) {\n+          # The result will have result columns first then the grouping cols.\n+          # dplyr orders group cols first, so adapt the result to meet that expectation.\n\nReview comment:\n       I agree with Ian that an option (with the default being no sort) would be good here. \r\n   \r\n   There's also some (very recent) discussion about changing this behavior in dplyr (if there's a new edition) https://github.com/tidyverse/dplyr/issues/5664#issuecomment-907232443\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-30T18:55:55.151+0000",
                    "updated": "2021-08-30T18:55:55.151+0000",
                    "started": "2021-08-30T18:55:55.151+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643667",
                    "issueId": "13397003"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397003/worklog/643687",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #10992:\nURL: https://github.com/apache/arrow/pull/10992#discussion_r698757563\n\n\n\n##########\nFile path: r/R/dplyr-collect.R\n##########\n@@ -47,16 +36,69 @@ collect.ArrowTabular <- function(x, as_data_frame = TRUE, ...) {\n     x\n   }\n }\n-collect.Dataset <- function(x, ...) dplyr::collect(arrow_dplyr_query(x), ...)\n+collect.Dataset <- function(x, ...) dplyr::collect(as_adq(x), ...)\n \n compute.arrow_dplyr_query <- function(x, ...) dplyr::collect(x, as_data_frame = FALSE)\n compute.ArrowTabular <- function(x, ...) x\n compute.Dataset <- compute.arrow_dplyr_query\n \n pull.arrow_dplyr_query <- function(.data, var = -1) {\n-  .data <- arrow_dplyr_query(.data)\n+  .data <- as_adq(.data)\n   var <- vars_pull(names(.data), !!enquo(var))\n   .data$selected_columns <- set_names(.data$selected_columns[var], var)\n   dplyr::collect(.data)[[1]]\n }\n pull.Dataset <- pull.ArrowTabular <- pull.arrow_dplyr_query\n+\n+# TODO: Correctly handle group_vars after summarize; also in collapse()\n+restore_dplyr_features <- function(df, query) {\n+  # An arrow_dplyr_query holds some attributes that Arrow doesn't know about\n+  # After calling collect(), make sure these features are carried over\n+\n+  if (length(query$group_by_vars) > 0) {\n+    # Preserve groupings, if present\n+    if (is.data.frame(df)) {\n+      df <- dplyr::grouped_df(\n+        df,\n+        dplyr::group_vars(query),\n+        drop = dplyr::group_by_drop_default(query)\n+      )\n+    } else {\n+      # This is a Table, via compute() or collect(as_data_frame = FALSE)\n+      df <- as_adq(df)\n+      df$group_by_vars <- query$group_by_vars\n+      df$drop_empty_groups <- query$drop_empty_groups\n+    }\n+  }\n+  df\n+}\n+\n+collapse.arrow_dplyr_query <- function(x, ...) {\n+  # Figure out what schema will result from the query\n+  x$schema <- implicit_schema(x)\n+  # Nest inside a new arrow_dplyr_query\n+  arrow_dplyr_query(x)\n+}\n\nReview comment:\n       Am I reading this right that what this does is figures out the resultant schema, and then wrap another `arrow_dplyr_query` layer around the resultant object? Am I missing something else that it's doing? Are we thinking about expanding this more in the future?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-30T19:42:29.572+0000",
                    "updated": "2021-08-30T19:42:29.572+0000",
                    "started": "2021-08-30T19:42:29.572+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643687",
                    "issueId": "13397003"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397003/worklog/643697",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #10992:\nURL: https://github.com/apache/arrow/pull/10992#discussion_r698766675\n\n\n\n##########\nFile path: r/R/dplyr-collect.R\n##########\n@@ -47,16 +36,69 @@ collect.ArrowTabular <- function(x, as_data_frame = TRUE, ...) {\n     x\n   }\n }\n-collect.Dataset <- function(x, ...) dplyr::collect(arrow_dplyr_query(x), ...)\n+collect.Dataset <- function(x, ...) dplyr::collect(as_adq(x), ...)\n \n compute.arrow_dplyr_query <- function(x, ...) dplyr::collect(x, as_data_frame = FALSE)\n compute.ArrowTabular <- function(x, ...) x\n compute.Dataset <- compute.arrow_dplyr_query\n \n pull.arrow_dplyr_query <- function(.data, var = -1) {\n-  .data <- arrow_dplyr_query(.data)\n+  .data <- as_adq(.data)\n   var <- vars_pull(names(.data), !!enquo(var))\n   .data$selected_columns <- set_names(.data$selected_columns[var], var)\n   dplyr::collect(.data)[[1]]\n }\n pull.Dataset <- pull.ArrowTabular <- pull.arrow_dplyr_query\n+\n+# TODO: Correctly handle group_vars after summarize; also in collapse()\n+restore_dplyr_features <- function(df, query) {\n+  # An arrow_dplyr_query holds some attributes that Arrow doesn't know about\n+  # After calling collect(), make sure these features are carried over\n+\n+  if (length(query$group_by_vars) > 0) {\n+    # Preserve groupings, if present\n+    if (is.data.frame(df)) {\n+      df <- dplyr::grouped_df(\n+        df,\n+        dplyr::group_vars(query),\n+        drop = dplyr::group_by_drop_default(query)\n+      )\n+    } else {\n+      # This is a Table, via compute() or collect(as_data_frame = FALSE)\n+      df <- as_adq(df)\n+      df$group_by_vars <- query$group_by_vars\n+      df$drop_empty_groups <- query$drop_empty_groups\n+    }\n+  }\n+  df\n+}\n+\n+collapse.arrow_dplyr_query <- function(x, ...) {\n+  # Figure out what schema will result from the query\n+  x$schema <- implicit_schema(x)\n+  # Nest inside a new arrow_dplyr_query\n+  arrow_dplyr_query(x)\n+}\n\nReview comment:\n       Is there something more it should do? There may be more subtlety in how the ExecPlan gets built at evaluation time, but for the purposes of getting a \"fresh\" arrow_dplyr_query to chain more things on, I think this gets that job done. It's really about making sure the order of ExecNodes stays faithful to the user's request.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-30T19:57:29.518+0000",
                    "updated": "2021-08-30T19:57:29.518+0000",
                    "started": "2021-08-30T19:57:29.518+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643697",
                    "issueId": "13397003"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397003/worklog/643703",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #10992:\nURL: https://github.com/apache/arrow/pull/10992#discussion_r698771454\n\n\n\n##########\nFile path: r/R/dplyr-collect.R\n##########\n@@ -47,16 +36,69 @@ collect.ArrowTabular <- function(x, as_data_frame = TRUE, ...) {\n     x\n   }\n }\n-collect.Dataset <- function(x, ...) dplyr::collect(arrow_dplyr_query(x), ...)\n+collect.Dataset <- function(x, ...) dplyr::collect(as_adq(x), ...)\n \n compute.arrow_dplyr_query <- function(x, ...) dplyr::collect(x, as_data_frame = FALSE)\n compute.ArrowTabular <- function(x, ...) x\n compute.Dataset <- compute.arrow_dplyr_query\n \n pull.arrow_dplyr_query <- function(.data, var = -1) {\n-  .data <- arrow_dplyr_query(.data)\n+  .data <- as_adq(.data)\n   var <- vars_pull(names(.data), !!enquo(var))\n   .data$selected_columns <- set_names(.data$selected_columns[var], var)\n   dplyr::collect(.data)[[1]]\n }\n pull.Dataset <- pull.ArrowTabular <- pull.arrow_dplyr_query\n+\n+# TODO: Correctly handle group_vars after summarize; also in collapse()\n+restore_dplyr_features <- function(df, query) {\n+  # An arrow_dplyr_query holds some attributes that Arrow doesn't know about\n+  # After calling collect(), make sure these features are carried over\n+\n+  if (length(query$group_by_vars) > 0) {\n+    # Preserve groupings, if present\n+    if (is.data.frame(df)) {\n+      df <- dplyr::grouped_df(\n+        df,\n+        dplyr::group_vars(query),\n+        drop = dplyr::group_by_drop_default(query)\n+      )\n+    } else {\n+      # This is a Table, via compute() or collect(as_data_frame = FALSE)\n+      df <- as_adq(df)\n+      df$group_by_vars <- query$group_by_vars\n+      df$drop_empty_groups <- query$drop_empty_groups\n+    }\n+  }\n+  df\n+}\n+\n+collapse.arrow_dplyr_query <- function(x, ...) {\n+  # Figure out what schema will result from the query\n+  x$schema <- implicit_schema(x)\n+  # Nest inside a new arrow_dplyr_query\n+  arrow_dplyr_query(x)\n+}\n\nReview comment:\n       >  It's really about making sure the order of ExecNodes stays faithful to the user's request.\r\n   \r\n   That's the bit I was missing / didn't connect in. That makes sense \u2014 and now I see how this is similar to the d(b)plyr version that forces the sql generation + makes a subquery from that (though I had to RTFS across both packages to put all that together). \r\n   \r\n   On first read I was expecting that `collapse` might do some sort of optimization step/blend together things inside of it \u2014 but that's definitely not what the `dplyr` versions do either. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-30T20:05:52.025+0000",
                    "updated": "2021-08-30T20:05:52.025+0000",
                    "started": "2021-08-30T20:05:52.024+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643703",
                    "issueId": "13397003"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397003/worklog/644123",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #10992:\nURL: https://github.com/apache/arrow/pull/10992#discussion_r698714337\n\n\n\n##########\nFile path: r/R/query-engine.R\n##########\n@@ -42,11 +55,73 @@ ExecPlan <- R6Class(\"ExecPlan\",\n       }\n       # ScanNode needs the filter to do predicate pushdown and skip partitions,\n       # and it needs to know which fields to materialize (and which are unnecessary)\n-      ExecNode_Scan(self, dataset, filter, colnames)\n+      ExecNode_Scan(self, dataset, filter, colnames %||% character(0))\n+    },\n+    Build = function(.data) {\n+      # This method takes an arrow_dplyr_query and chains together the\n+      # ExecNodes that they produce. It does not evaluate them--that is Run().\n+      group_vars <- dplyr::group_vars(.data)\n+      grouped <- length(group_vars) > 0\n+\n+      # Collect the target names first because we have to add back the group vars\n+      target_names <- names(.data)\n+      .data <- ensure_group_vars(.data)\n+      .data <- ensure_arrange_vars(.data) # this sets .data$temp_columns\n+\n+      node <- self$Scan(.data)\n+      # ARROW-13498: Even though Scan takes the filter, apparently we have to do it again\n+      if (inherits(.data$filtered_rows, \"Expression\")) {\n+        node <- node$Filter(.data$filtered_rows)\n+      }\n+      # If any columns are derived we need to Project (otherwise this may be no-op)\n+      node <- node$Project(c(.data$selected_columns, .data$temp_columns))\n+\n+      if (length(.data$aggregations)) {\n+        if (grouped) {\n+          # We need to prefix all of the aggregation function names with \"hash_\"\n+          .data$aggregations <- lapply(.data$aggregations, function(x) {\n+            x[[\"fun\"]] <- paste0(\"hash_\", x[[\"fun\"]])\n+            x\n+          })\n+        }\n+\n+        node <- node$Aggregate(\n+          options = .data$aggregations,\n+          target_names = target_names,\n+          out_field_names = names(.data$aggregations),\n+          key_names = group_vars\n+        )\n+\n+        if (grouped) {\n+          # The result will have result columns first then the grouping cols.\n+          # dplyr orders group cols first, so adapt the result to meet that expectation.\n\nReview comment:\n       The code on lines 109-111 reads to me about the order of the columns, not the order of the rows \u2014 maybe I'm missing something or there was code that did change the order of the rows at some point?\n\n##########\nFile path: r/R/query-engine.R\n##########\n@@ -42,11 +55,73 @@ ExecPlan <- R6Class(\"ExecPlan\",\n       }\n       # ScanNode needs the filter to do predicate pushdown and skip partitions,\n       # and it needs to know which fields to materialize (and which are unnecessary)\n-      ExecNode_Scan(self, dataset, filter, colnames)\n+      ExecNode_Scan(self, dataset, filter, colnames %||% character(0))\n+    },\n+    Build = function(.data) {\n+      # This method takes an arrow_dplyr_query and chains together the\n+      # ExecNodes that they produce. It does not evaluate them--that is Run().\n+      group_vars <- dplyr::group_vars(.data)\n+      grouped <- length(group_vars) > 0\n+\n+      # Collect the target names first because we have to add back the group vars\n+      target_names <- names(.data)\n+      .data <- ensure_group_vars(.data)\n+      .data <- ensure_arrange_vars(.data) # this sets .data$temp_columns\n+\n+      node <- self$Scan(.data)\n+      # ARROW-13498: Even though Scan takes the filter, apparently we have to do it again\n+      if (inherits(.data$filtered_rows, \"Expression\")) {\n+        node <- node$Filter(.data$filtered_rows)\n+      }\n+      # If any columns are derived we need to Project (otherwise this may be no-op)\n+      node <- node$Project(c(.data$selected_columns, .data$temp_columns))\n+\n+      if (length(.data$aggregations)) {\n+        if (grouped) {\n+          # We need to prefix all of the aggregation function names with \"hash_\"\n+          .data$aggregations <- lapply(.data$aggregations, function(x) {\n+            x[[\"fun\"]] <- paste0(\"hash_\", x[[\"fun\"]])\n+            x\n+          })\n+        }\n+\n+        node <- node$Aggregate(\n+          options = .data$aggregations,\n+          target_names = target_names,\n+          out_field_names = names(.data$aggregations),\n+          key_names = group_vars\n+        )\n+\n+        if (grouped) {\n+          # The result will have result columns first then the grouping cols.\n+          # dplyr orders group cols first, so adapt the result to meet that expectation.\n\nReview comment:\n       Oh, nevermind I see lines 114-117 do that sorting. I should have read lower and not stopped at the comment \ud83e\udd26 \n\n##########\nFile path: r/R/query-engine.R\n##########\n@@ -42,11 +55,73 @@ ExecPlan <- R6Class(\"ExecPlan\",\n       }\n       # ScanNode needs the filter to do predicate pushdown and skip partitions,\n       # and it needs to know which fields to materialize (and which are unnecessary)\n-      ExecNode_Scan(self, dataset, filter, colnames)\n+      ExecNode_Scan(self, dataset, filter, colnames %||% character(0))\n+    },\n+    Build = function(.data) {\n+      # This method takes an arrow_dplyr_query and chains together the\n+      # ExecNodes that they produce. It does not evaluate them--that is Run().\n+      group_vars <- dplyr::group_vars(.data)\n+      grouped <- length(group_vars) > 0\n+\n+      # Collect the target names first because we have to add back the group vars\n+      target_names <- names(.data)\n+      .data <- ensure_group_vars(.data)\n+      .data <- ensure_arrange_vars(.data) # this sets .data$temp_columns\n+\n+      node <- self$Scan(.data)\n+      # ARROW-13498: Even though Scan takes the filter, apparently we have to do it again\n+      if (inherits(.data$filtered_rows, \"Expression\")) {\n+        node <- node$Filter(.data$filtered_rows)\n+      }\n+      # If any columns are derived we need to Project (otherwise this may be no-op)\n+      node <- node$Project(c(.data$selected_columns, .data$temp_columns))\n+\n+      if (length(.data$aggregations)) {\n+        if (grouped) {\n+          # We need to prefix all of the aggregation function names with \"hash_\"\n+          .data$aggregations <- lapply(.data$aggregations, function(x) {\n+            x[[\"fun\"]] <- paste0(\"hash_\", x[[\"fun\"]])\n+            x\n+          })\n+        }\n+\n+        node <- node$Aggregate(\n+          options = .data$aggregations,\n+          target_names = target_names,\n+          out_field_names = names(.data$aggregations),\n+          key_names = group_vars\n+        )\n+\n+        if (grouped) {\n+          # The result will have result columns first then the grouping cols.\n+          # dplyr orders group cols first, so adapt the result to meet that expectation.\n\nReview comment:\n       I agree with Ian that an option (with the default being no sort) would be good here. \r\n   \r\n   There's also some (very recent) discussion about removing this in dplyr (if there's a new edition) https://github.com/tidyverse/dplyr/issues/5664#issuecomment-907232443\n\n##########\nFile path: r/R/query-engine.R\n##########\n@@ -42,11 +55,73 @@ ExecPlan <- R6Class(\"ExecPlan\",\n       }\n       # ScanNode needs the filter to do predicate pushdown and skip partitions,\n       # and it needs to know which fields to materialize (and which are unnecessary)\n-      ExecNode_Scan(self, dataset, filter, colnames)\n+      ExecNode_Scan(self, dataset, filter, colnames %||% character(0))\n+    },\n+    Build = function(.data) {\n+      # This method takes an arrow_dplyr_query and chains together the\n+      # ExecNodes that they produce. It does not evaluate them--that is Run().\n+      group_vars <- dplyr::group_vars(.data)\n+      grouped <- length(group_vars) > 0\n+\n+      # Collect the target names first because we have to add back the group vars\n+      target_names <- names(.data)\n+      .data <- ensure_group_vars(.data)\n+      .data <- ensure_arrange_vars(.data) # this sets .data$temp_columns\n+\n+      node <- self$Scan(.data)\n+      # ARROW-13498: Even though Scan takes the filter, apparently we have to do it again\n+      if (inherits(.data$filtered_rows, \"Expression\")) {\n+        node <- node$Filter(.data$filtered_rows)\n+      }\n+      # If any columns are derived we need to Project (otherwise this may be no-op)\n+      node <- node$Project(c(.data$selected_columns, .data$temp_columns))\n+\n+      if (length(.data$aggregations)) {\n+        if (grouped) {\n+          # We need to prefix all of the aggregation function names with \"hash_\"\n+          .data$aggregations <- lapply(.data$aggregations, function(x) {\n+            x[[\"fun\"]] <- paste0(\"hash_\", x[[\"fun\"]])\n+            x\n+          })\n+        }\n+\n+        node <- node$Aggregate(\n+          options = .data$aggregations,\n+          target_names = target_names,\n+          out_field_names = names(.data$aggregations),\n+          key_names = group_vars\n+        )\n+\n+        if (grouped) {\n+          # The result will have result columns first then the grouping cols.\n+          # dplyr orders group cols first, so adapt the result to meet that expectation.\n\nReview comment:\n       I agree with Ian that an option (with the default being no sort) would be good here. \r\n   \r\n   There's also some (very recent) discussion about changing this behavior in dplyr (if there's a new edition) https://github.com/tidyverse/dplyr/issues/5664#issuecomment-907232443\n\n##########\nFile path: r/R/dplyr-collect.R\n##########\n@@ -47,16 +36,69 @@ collect.ArrowTabular <- function(x, as_data_frame = TRUE, ...) {\n     x\n   }\n }\n-collect.Dataset <- function(x, ...) dplyr::collect(arrow_dplyr_query(x), ...)\n+collect.Dataset <- function(x, ...) dplyr::collect(as_adq(x), ...)\n \n compute.arrow_dplyr_query <- function(x, ...) dplyr::collect(x, as_data_frame = FALSE)\n compute.ArrowTabular <- function(x, ...) x\n compute.Dataset <- compute.arrow_dplyr_query\n \n pull.arrow_dplyr_query <- function(.data, var = -1) {\n-  .data <- arrow_dplyr_query(.data)\n+  .data <- as_adq(.data)\n   var <- vars_pull(names(.data), !!enquo(var))\n   .data$selected_columns <- set_names(.data$selected_columns[var], var)\n   dplyr::collect(.data)[[1]]\n }\n pull.Dataset <- pull.ArrowTabular <- pull.arrow_dplyr_query\n+\n+# TODO: Correctly handle group_vars after summarize; also in collapse()\n+restore_dplyr_features <- function(df, query) {\n+  # An arrow_dplyr_query holds some attributes that Arrow doesn't know about\n+  # After calling collect(), make sure these features are carried over\n+\n+  if (length(query$group_by_vars) > 0) {\n+    # Preserve groupings, if present\n+    if (is.data.frame(df)) {\n+      df <- dplyr::grouped_df(\n+        df,\n+        dplyr::group_vars(query),\n+        drop = dplyr::group_by_drop_default(query)\n+      )\n+    } else {\n+      # This is a Table, via compute() or collect(as_data_frame = FALSE)\n+      df <- as_adq(df)\n+      df$group_by_vars <- query$group_by_vars\n+      df$drop_empty_groups <- query$drop_empty_groups\n+    }\n+  }\n+  df\n+}\n+\n+collapse.arrow_dplyr_query <- function(x, ...) {\n+  # Figure out what schema will result from the query\n+  x$schema <- implicit_schema(x)\n+  # Nest inside a new arrow_dplyr_query\n+  arrow_dplyr_query(x)\n+}\n\nReview comment:\n       Am I reading this right that what this does is figures out the resultant schema, and then wrap another `arrow_dplyr_query` layer around the resultant object? Am I missing something else that it's doing? Are we thinking about expanding this more in the future?\n\n##########\nFile path: r/R/dplyr-collect.R\n##########\n@@ -47,16 +36,69 @@ collect.ArrowTabular <- function(x, as_data_frame = TRUE, ...) {\n     x\n   }\n }\n-collect.Dataset <- function(x, ...) dplyr::collect(arrow_dplyr_query(x), ...)\n+collect.Dataset <- function(x, ...) dplyr::collect(as_adq(x), ...)\n \n compute.arrow_dplyr_query <- function(x, ...) dplyr::collect(x, as_data_frame = FALSE)\n compute.ArrowTabular <- function(x, ...) x\n compute.Dataset <- compute.arrow_dplyr_query\n \n pull.arrow_dplyr_query <- function(.data, var = -1) {\n-  .data <- arrow_dplyr_query(.data)\n+  .data <- as_adq(.data)\n   var <- vars_pull(names(.data), !!enquo(var))\n   .data$selected_columns <- set_names(.data$selected_columns[var], var)\n   dplyr::collect(.data)[[1]]\n }\n pull.Dataset <- pull.ArrowTabular <- pull.arrow_dplyr_query\n+\n+# TODO: Correctly handle group_vars after summarize; also in collapse()\n+restore_dplyr_features <- function(df, query) {\n+  # An arrow_dplyr_query holds some attributes that Arrow doesn't know about\n+  # After calling collect(), make sure these features are carried over\n+\n+  if (length(query$group_by_vars) > 0) {\n+    # Preserve groupings, if present\n+    if (is.data.frame(df)) {\n+      df <- dplyr::grouped_df(\n+        df,\n+        dplyr::group_vars(query),\n+        drop = dplyr::group_by_drop_default(query)\n+      )\n+    } else {\n+      # This is a Table, via compute() or collect(as_data_frame = FALSE)\n+      df <- as_adq(df)\n+      df$group_by_vars <- query$group_by_vars\n+      df$drop_empty_groups <- query$drop_empty_groups\n+    }\n+  }\n+  df\n+}\n+\n+collapse.arrow_dplyr_query <- function(x, ...) {\n+  # Figure out what schema will result from the query\n+  x$schema <- implicit_schema(x)\n+  # Nest inside a new arrow_dplyr_query\n+  arrow_dplyr_query(x)\n+}\n\nReview comment:\n       >  It's really about making sure the order of ExecNodes stays faithful to the user's request.\r\n   \r\n   That's the bit I was missing / didn't connect in. That makes sense \u2014 and now I see how this is similar to the d(b)plyr version that forces the sql generation + makes a subquery from that (though I had to RTFS across both packages to put all that together). \r\n   \r\n   On first read I was expecting that `collapse` might do some sort of optimization step/blend together things inside of it \u2014 but that's definitely not what the `dplyr` versions do either. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-31T14:50:34.676+0000",
                    "updated": "2021-08-31T14:50:34.676+0000",
                    "started": "2021-08-31T14:50:34.676+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "644123",
                    "issueId": "13397003"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397003/worklog/644236",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #10992:\nURL: https://github.com/apache/arrow/pull/10992#discussion_r698766675\n\n\n\n##########\nFile path: r/R/dplyr-collect.R\n##########\n@@ -47,16 +36,69 @@ collect.ArrowTabular <- function(x, as_data_frame = TRUE, ...) {\n     x\n   }\n }\n-collect.Dataset <- function(x, ...) dplyr::collect(arrow_dplyr_query(x), ...)\n+collect.Dataset <- function(x, ...) dplyr::collect(as_adq(x), ...)\n \n compute.arrow_dplyr_query <- function(x, ...) dplyr::collect(x, as_data_frame = FALSE)\n compute.ArrowTabular <- function(x, ...) x\n compute.Dataset <- compute.arrow_dplyr_query\n \n pull.arrow_dplyr_query <- function(.data, var = -1) {\n-  .data <- arrow_dplyr_query(.data)\n+  .data <- as_adq(.data)\n   var <- vars_pull(names(.data), !!enquo(var))\n   .data$selected_columns <- set_names(.data$selected_columns[var], var)\n   dplyr::collect(.data)[[1]]\n }\n pull.Dataset <- pull.ArrowTabular <- pull.arrow_dplyr_query\n+\n+# TODO: Correctly handle group_vars after summarize; also in collapse()\n+restore_dplyr_features <- function(df, query) {\n+  # An arrow_dplyr_query holds some attributes that Arrow doesn't know about\n+  # After calling collect(), make sure these features are carried over\n+\n+  if (length(query$group_by_vars) > 0) {\n+    # Preserve groupings, if present\n+    if (is.data.frame(df)) {\n+      df <- dplyr::grouped_df(\n+        df,\n+        dplyr::group_vars(query),\n+        drop = dplyr::group_by_drop_default(query)\n+      )\n+    } else {\n+      # This is a Table, via compute() or collect(as_data_frame = FALSE)\n+      df <- as_adq(df)\n+      df$group_by_vars <- query$group_by_vars\n+      df$drop_empty_groups <- query$drop_empty_groups\n+    }\n+  }\n+  df\n+}\n+\n+collapse.arrow_dplyr_query <- function(x, ...) {\n+  # Figure out what schema will result from the query\n+  x$schema <- implicit_schema(x)\n+  # Nest inside a new arrow_dplyr_query\n+  arrow_dplyr_query(x)\n+}\n\nReview comment:\n       Is there something more it should do? There may be more subtlety in how the ExecPlan gets built at evaluation time, but for the purposes of getting a \"fresh\" arrow_dplyr_query to chain more things on, I think this gets that job done. It's really about making sure the order of ExecNodes stays faithful to the user's request.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-31T15:02:01.214+0000",
                    "updated": "2021-08-31T15:02:01.214+0000",
                    "started": "2021-08-31T15:02:01.213+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "644236",
                    "issueId": "13397003"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 19800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6f9d0135[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e41fe54[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@30ba5443[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1b8af5e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b1a0e79[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7b6fe0f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@65ccbaf6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@21ca3b4e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@a8890c8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3afe5110[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a6547b3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4a050bfa[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 19800,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Sep 03 16:51:31 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-09-03T16:51:31.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13740/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-08-24T18:59:06.000+0000",
        "updated": "2021-09-03T16:51:47.000+0000",
        "timeoriginalestimate": null,
        "description": "This will entail some refactoring and new features:\r\n\r\n* collect() uses ExecPlan\r\n* arrange uses an OrderByNode\r\n* .data inside of arrow_dplyr_query can itself be arrow_dplyr_query",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 19800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] summarize() should not eagerly evaluate",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397003/comment/17409611",
                    "id": "17409611",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 10992\n[https://github.com/apache/arrow/pull/10992]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-09-03T16:51:31.307+0000",
                    "updated": "2021-09-03T16:51:31.307+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0u7ig:",
        "customfield_12314139": null
    }
}