{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13111749",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111749",
    "key": "ARROW-1722",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1722/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 8,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111749/worklog/120273",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm opened a new pull request #2225: ARROW-1722: [C++] Add linting script to find C++/CLI incompatibilities\nURL: https://github.com/apache/arrow/pull/2225\n \n \n   This also fixes some issues that the script found\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-07T20:11:12.393+0000",
                    "updated": "2018-07-07T20:11:12.393+0000",
                    "started": "2018-07-07T20:11:12.392+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "120273",
                    "issueId": "13111749"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111749/worklog/120290",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2225: ARROW-1722: [C++] Add linting script to find C++/CLI incompatibilities\nURL: https://github.com/apache/arrow/pull/2225#issuecomment-403248080\n \n \n   I opened https://issues.apache.org/jira/browse/ARROW-2810 -- I was surprised to find Plasma installs its generated Flatbuffers files\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-07T22:53:53.734+0000",
                    "updated": "2018-07-07T22:53:53.734+0000",
                    "started": "2018-07-07T22:53:53.733+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "120290",
                    "issueId": "13111749"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111749/worklog/120292",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2225: ARROW-1722: [C++] Add linting script to find C++/CLI incompatibilities\nURL: https://github.com/apache/arrow/pull/2225#issuecomment-403250530\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2225?src=pr&el=h1) Report\n   > Merging [#2225](https://codecov.io/gh/apache/arrow/pull/2225?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/836afac9a7e4ef1d5b72513e6be2e78fbdae6a4e?src=pr&el=desc) will **increase** coverage by `0.01%`.\n   > The diff coverage is `67.5%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2225/graphs/tree.svg?height=150&width=650&token=LpTCFbqVT1&src=pr)](https://codecov.io/gh/apache/arrow/pull/2225?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2225      +/-   ##\n   ==========================================\n   + Coverage    84.1%   84.12%   +0.01%     \n   ==========================================\n     Files         288      288              \n     Lines       43865    43876      +11     \n   ==========================================\n   + Hits        36892    36910      +18     \n   + Misses       6942     6939       -3     \n   + Partials       31       27       -4\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2225?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/python/helpers.h](https://codecov.io/gh/apache/arrow/pull/2225/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vaGVscGVycy5o) | `90% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/variant.h](https://codecov.io/gh/apache/arrow/pull/2225/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3ZhcmlhbnQuaA==) | `86.27% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/memory\\_pool.h](https://codecov.io/gh/apache/arrow/pull/2225/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9tZW1vcnlfcG9vbC5o) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/public-api-test.cc](https://codecov.io/gh/apache/arrow/pull/2225/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9wdWJsaWMtYXBpLXRlc3QuY2M=) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/thread-pool.cc](https://codecov.io/gh/apache/arrow/pull/2225/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3RocmVhZC1wb29sLmNj) | `96% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/thread-pool.h](https://codecov.io/gh/apache/arrow/pull/2225/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3RocmVhZC1wb29sLmg=) | `92.3% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/python/common.h](https://codecov.io/gh/apache/arrow/pull/2225/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vY29tbW9uLmg=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/ipc/test-common.h](https://codecov.io/gh/apache/arrow/pull/2225/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvdGVzdC1jb21tb24uaA==) | `93.11% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/python/numpy-internal.h](https://codecov.io/gh/apache/arrow/pull/2225/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vbnVtcHktaW50ZXJuYWwuaA==) | `54.23% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernel.h](https://codecov.io/gh/apache/arrow/pull/2225/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbC5o) | `80% <50%> (\u00f8)` | :arrow_up: |\n   | ... and [14 more](https://codecov.io/gh/apache/arrow/pull/2225/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2225?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2225?src=pr&el=footer). Last update [836afac...824ef0b](https://codecov.io/gh/apache/arrow/pull/2225?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-07T23:53:44.914+0000",
                    "updated": "2018-07-07T23:53:44.914+0000",
                    "started": "2018-07-07T23:53:44.914+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "120292",
                    "issueId": "13111749"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111749/worklog/120456",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on a change in pull request #2225: ARROW-1722: [C++] Add linting script to find C++/CLI incompatibilities\nURL: https://github.com/apache/arrow/pull/2225#discussion_r200847496\n \n \n\n ##########\n File path: cpp/build-support/lint_cpp_cli.py\n ##########\n @@ -0,0 +1,81 @@\n+#!/usr/bin/env python\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import argparse\n+import re\n+import os\n+\n+parser = argparse.ArgumentParser(\n+    description=\"Check for illegal headers for C++/CLI applications\")\n+parser.add_argument(\"source_path\",\n+                    help=\"Path to source code\")\n+arguments = parser.parse_args()\n+\n+\n+_STRIP_COMMENT_REGEX = re.compile('(.+)?(?=//)')\n+\n+\n+def _strip_comments(line):\n+    m = _STRIP_COMMENT_REGEX.match(line)\n+    if not m:\n+        return line\n+    else:\n+        return m.group(0)\n+\n+\n+def lint_file(path):\n+    fail_rules = [\n+        (lambda x: '<mutex>' in x, 'Uses <mutex>'),\n+        (lambda x: 'nullptr' in x, 'Uses nullptr')\n+    ]\n+\n+    with open(path) as f:\n+        for i, line in enumerate(f):\n+            stripped_line = _strip_comments(line)\n+            for rule, why in fail_rules:\n+                if rule(stripped_line):\n+                    raise Exception('File {0} failed C++/CLI lint check: {1}\\n'\n+                                    'Line {2}: {3}'\n+                                    .format(path, why, i + 1, line))\n+\n+\n+EXCLUSIONS = [\n+    'arrow/util/macros.h',\n+    'arrow/util/parallel.h',\n+    'arrow/io/hdfs-internal.h'\n+]\n+\n+\n+for dirpath, _, filenames in os.walk(arguments.source_path):\n+    for filename in filenames:\n+        full_path = os.path.join(dirpath, filename)\n+\n+        exclude = False\n+        for exclusion in EXCLUSIONS:\n+            if exclusion in full_path:\n+                # print('Skipping excluded header: {0}'.format(filename))\n \n Review comment:\n   Remove or replace with `logger.debug`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-08T17:31:24.254+0000",
                    "updated": "2018-07-08T17:31:24.254+0000",
                    "started": "2018-07-08T17:31:24.253+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "120456",
                    "issueId": "13111749"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111749/worklog/120486",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2225: ARROW-1722: [C++] Add linting script to find C++/CLI incompatibilities\nURL: https://github.com/apache/arrow/pull/2225#discussion_r200849502\n \n \n\n ##########\n File path: cpp/build-support/lint_cpp_cli.py\n ##########\n @@ -0,0 +1,81 @@\n+#!/usr/bin/env python\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import argparse\n+import re\n+import os\n+\n+parser = argparse.ArgumentParser(\n+    description=\"Check for illegal headers for C++/CLI applications\")\n+parser.add_argument(\"source_path\",\n+                    help=\"Path to source code\")\n+arguments = parser.parse_args()\n+\n+\n+_STRIP_COMMENT_REGEX = re.compile('(.+)?(?=//)')\n+\n+\n+def _strip_comments(line):\n+    m = _STRIP_COMMENT_REGEX.match(line)\n+    if not m:\n+        return line\n+    else:\n+        return m.group(0)\n+\n+\n+def lint_file(path):\n+    fail_rules = [\n+        (lambda x: '<mutex>' in x, 'Uses <mutex>'),\n+        (lambda x: 'nullptr' in x, 'Uses nullptr')\n+    ]\n+\n+    with open(path) as f:\n+        for i, line in enumerate(f):\n+            stripped_line = _strip_comments(line)\n+            for rule, why in fail_rules:\n+                if rule(stripped_line):\n+                    raise Exception('File {0} failed C++/CLI lint check: {1}\\n'\n+                                    'Line {2}: {3}'\n+                                    .format(path, why, i + 1, line))\n+\n+\n+EXCLUSIONS = [\n+    'arrow/util/macros.h',\n+    'arrow/util/parallel.h',\n+    'arrow/io/hdfs-internal.h'\n+]\n+\n+\n+for dirpath, _, filenames in os.walk(arguments.source_path):\n+    for filename in filenames:\n+        full_path = os.path.join(dirpath, filename)\n+\n+        exclude = False\n+        for exclusion in EXCLUSIONS:\n+            if exclusion in full_path:\n+                # print('Skipping excluded header: {0}'.format(filename))\n \n Review comment:\n   Fixed\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-08T18:43:21.367+0000",
                    "updated": "2018-07-08T18:43:21.367+0000",
                    "started": "2018-07-08T18:43:21.366+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "120486",
                    "issueId": "13111749"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111749/worklog/120500",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2225: ARROW-1722: [C++] Add linting script to find C++/CLI incompatibilities\nURL: https://github.com/apache/arrow/pull/2225#issuecomment-403250530\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2225?src=pr&el=h1) Report\n   > Merging [#2225](https://codecov.io/gh/apache/arrow/pull/2225?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/836afac9a7e4ef1d5b72513e6be2e78fbdae6a4e?src=pr&el=desc) will **increase** coverage by `0.03%`.\n   > The diff coverage is `67.5%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2225/graphs/tree.svg?height=150&width=650&token=LpTCFbqVT1&src=pr)](https://codecov.io/gh/apache/arrow/pull/2225?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2225      +/-   ##\n   ==========================================\n   + Coverage    84.1%   84.14%   +0.03%     \n   ==========================================\n     Files         288      288              \n     Lines       43865    43933      +68     \n   ==========================================\n   + Hits        36892    36966      +74     \n   + Misses       6942     6940       -2     \n   + Partials       31       27       -4\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2225?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/memory\\_pool.h](https://codecov.io/gh/apache/arrow/pull/2225/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9tZW1vcnlfcG9vbC5o) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/python/helpers.h](https://codecov.io/gh/apache/arrow/pull/2225/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vaGVscGVycy5o) | `90% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/variant.h](https://codecov.io/gh/apache/arrow/pull/2225/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3ZhcmlhbnQuaA==) | `86.27% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/public-api-test.cc](https://codecov.io/gh/apache/arrow/pull/2225/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9wdWJsaWMtYXBpLXRlc3QuY2M=) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/thread-pool.cc](https://codecov.io/gh/apache/arrow/pull/2225/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3RocmVhZC1wb29sLmNj) | `96% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/thread-pool.h](https://codecov.io/gh/apache/arrow/pull/2225/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3RocmVhZC1wb29sLmg=) | `92.3% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/ipc/test-common.h](https://codecov.io/gh/apache/arrow/pull/2225/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvdGVzdC1jb21tb24uaA==) | `93.11% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/python/common.h](https://codecov.io/gh/apache/arrow/pull/2225/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vY29tbW9uLmg=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/python/numpy-internal.h](https://codecov.io/gh/apache/arrow/pull/2225/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vbnVtcHktaW50ZXJuYWwuaA==) | `54.23% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernel.h](https://codecov.io/gh/apache/arrow/pull/2225/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbC5o) | `80% <50%> (\u00f8)` | :arrow_up: |\n   | ... and [20 more](https://codecov.io/gh/apache/arrow/pull/2225/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2225?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2225?src=pr&el=footer). Last update [836afac...3b5a16a](https://codecov.io/gh/apache/arrow/pull/2225?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-08T19:25:25.429+0000",
                    "updated": "2018-07-08T19:25:25.429+0000",
                    "started": "2018-07-08T19:25:25.428+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "120500",
                    "issueId": "13111749"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111749/worklog/120538",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2225: ARROW-1722: [C++] Add linting script to find C++/CLI incompatibilities\nURL: https://github.com/apache/arrow/pull/2225#discussion_r200865638\n \n \n\n ##########\n File path: cpp/build-support/lint_cpp_cli.py\n ##########\n @@ -0,0 +1,79 @@\n+#!/usr/bin/env python\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import argparse\n+import re\n+import os\n+\n+parser = argparse.ArgumentParser(\n+    description=\"Check for illegal headers for C++/CLI applications\")\n+parser.add_argument(\"source_path\",\n+                    help=\"Path to source code\")\n+arguments = parser.parse_args()\n+\n+\n+_STRIP_COMMENT_REGEX = re.compile('(.+)?(?=//)')\n \n Review comment:\n   `'(.+?)?(?=//)'` will be better for `a // b // c` case but it's too trivial. We will never write such code :-)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-09T01:55:17.183+0000",
                    "updated": "2018-07-09T01:55:17.183+0000",
                    "started": "2018-07-09T01:55:17.183+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "120538",
                    "issueId": "13111749"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111749/worklog/120540",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou closed pull request #2225: ARROW-1722: [C++] Add linting script to find C++/CLI incompatibilities\nURL: https://github.com/apache/arrow/pull/2225\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/ci/travis_lint.sh b/ci/travis_lint.sh\nindex 7cdbad4a31..7e2b05d33c 100755\n--- a/ci/travis_lint.sh\n+++ b/ci/travis_lint.sh\n@@ -19,11 +19,15 @@\n \n set -ex\n \n+# Disable toolchain variables in this script\n+export ARROW_TRAVIS_USE_TOOLCHAIN=0\n+source $TRAVIS_BUILD_DIR/ci/travis_env_common.sh\n+\n # Fail fast for code linting issues\n \n if [ \"$ARROW_CI_CPP_AFFECTED\" != \"0\" ]; then\n-  mkdir $TRAVIS_BUILD_DIR/cpp/lint\n-  pushd $TRAVIS_BUILD_DIR/cpp/lint\n+  mkdir $ARROW_CPP_DIR/lint\n+  pushd $ARROW_CPP_DIR/lint\n \n   cmake ..\n   make lint\n@@ -32,6 +36,8 @@ if [ \"$ARROW_CI_CPP_AFFECTED\" != \"0\" ]; then\n     make check-format\n   fi\n \n+  python $ARROW_CPP_DIR/build-support/lint_cpp_cli.py $ARROW_CPP_DIR/src\n+\n   popd\n fi\n \n@@ -41,11 +47,9 @@ fi\n if [ \"$ARROW_CI_PYTHON_AFFECTED\" != \"0\" ]; then\n   sudo pip install -q flake8\n \n-  PYTHON_DIR=$TRAVIS_BUILD_DIR/python\n-\n-  flake8 --count $PYTHON_DIR\n+  flake8 --count $ARROW_PYTHON_DIR\n \n   # Check Cython files with some checks turned off\n-  flake8 --count --config=$PYTHON_DIR/.flake8.cython \\\n-         $PYTHON_DIR\n+  flake8 --count --config=$ARROW_PYTHON_DIR/.flake8.cython \\\n+         $ARROW_PYTHON_DIR\n fi\ndiff --git a/cpp/build-support/bootstrap_toolchain.py b/cpp/build-support/bootstrap_toolchain.py\ndeleted file mode 100755\nindex 128be78bba..0000000000\n--- a/cpp/build-support/bootstrap_toolchain.py\n+++ /dev/null\n@@ -1,114 +0,0 @@\n-#!/usr/bin/env python\n-# Copyright (c) 2015, Cloudera, inc.\n-# Confidential Cloudera Information: Covered by NDA.\n-# Licensed under the Apache License, Version 2.0 (the \"License\");\n-# you may not use this file except in compliance with the License.\n-# You may obtain a copy of the License at\n-#\n-# http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing, software\n-# distributed under the License is distributed on an \"AS IS\" BASIS,\n-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-# See the License for the specific language governing permissions and\n-# limitations under the License.\n-\n-# Bootstrapping the native toolchain with prebuilt binaries\n-#\n-# The purpose of this script is to download prebuilt artifacts of the native toolchain to\n-# satisfy the third-party dependencies. The script checks for the presence of\n-# NATIVE_TOOLCHAIN. NATIVE_TOOLCHAIN indicates the location where the prebuilt artifacts\n-# should be extracted to.\n-#\n-# The script is called as follows without any additional parameters:\n-#\n-#     python bootstrap_toolchain.py\n-import sh\n-import os\n-import sys\n-import re\n-\n-HOST = \"https://native-toolchain.s3.amazonaws.com/build\"\n-\n-OS_MAPPING = {\n-  \"centos6\" : \"ec2-package-centos-6\",\n-  \"centos5\" : \"ec2-package-centos-5\",\n-  \"centos7\" : \"ec2-package-centos-7\",\n-  \"debian6\" : \"ec2-package-debian-6\",\n-  \"debian7\" : \"ec2-package-debian-7\",\n-  \"suselinux11\": \"ec2-package-sles-11\",\n-  \"ubuntu12.04\" : \"ec2-package-ubuntu-12-04\",\n-  \"ubuntu14.04\" : \"ec2-package-ubuntu-14-04\"\n-}\n-\n-def get_release_label():\n-  \"\"\"Gets the right package label from the OS version\"\"\"\n-  release = \"\".join(map(lambda x: x.lower(), sh.lsb_release(\"-irs\").split()))\n-  for k, v in OS_MAPPING.iteritems():\n-    if re.search(k, release):\n-      return v\n-\n-  print(\"Pre-built toolchain archives not available for your platform.\")\n-  print(\"Clone and build native toolchain from source using this repository:\")\n-  print(\"    https://github.com/cloudera/native-toolchain\")\n-  raise Exception(\"Could not find package label for OS version: {0}.\".format(release))\n-\n-def download_package(destination, product, version, compiler):\n-  label = get_release_label()\n-  file_name = \"{0}-{1}-{2}-{3}.tar.gz\".format(product, version, compiler, label)\n-  url_path=\"/{0}/{1}-{2}/{0}-{1}-{2}-{3}.tar.gz\".format(product, version, compiler, label)\n-  download_path = HOST + url_path\n-\n-  print \"URL {0}\".format(download_path)\n-  print \"Downloading {0} to {1}\".format(file_name, destination)\n-  # --no-clobber avoids downloading the file if a file with the name already exists\n-  sh.wget(download_path, directory_prefix=destination, no_clobber=True)\n-  print \"Extracting {0}\".format(file_name)\n-  sh.tar(z=True, x=True, f=os.path.join(destination, file_name), directory=destination)\n-  sh.rm(os.path.join(destination, file_name))\n-\n-\n-def bootstrap(packages):\n-  \"\"\"Validates the presence of $NATIVE_TOOLCHAIN in the environment. By checking\n-  $NATIVE_TOOLCHAIN is present, we assume that {LIB}_VERSION will be present as well. Will\n-  create the directory specified by $NATIVE_TOOLCHAIN if it does not yet exist. Each of\n-  the packages specified in `packages` is downloaded and extracted into $NATIVE_TOOLCHAIN.\n-  \"\"\"\n-  # Create the destination directory if necessary\n-  destination = os.getenv(\"NATIVE_TOOLCHAIN\")\n-  if not destination:\n-    print(\"Build environment not set up correctly, make sure \"\n-          \"$NATIVE_TOOLCHAIN is present.\")\n-    sys.exit(1)\n-\n-  if not os.path.exists(destination):\n-    os.makedirs(destination)\n-\n-  # Detect the compiler\n-  if \"SYSTEM_GCC\" in os.environ:\n-    compiler = \"gcc-system\"\n-  else:\n-    compiler = \"gcc-{0}\".format(os.environ[\"GCC_VERSION\"])\n-\n-  for p in packages:\n-    pkg_name, pkg_version = unpack_name_and_version(p)\n-    download_package(destination, pkg_name, pkg_version, compiler)\n-\n-def unpack_name_and_version(package):\n-  \"\"\"A package definition is either a string where the version is fetched from the\n-  environment or a tuple where the package name and the package version are fully\n-  specified.\n-  \"\"\"\n-  if isinstance(package, basestring):\n-    env_var = \"{0}_VERSION\".format(package).replace(\"-\", \"_\").upper()\n-    try:\n-      return package, os.environ[env_var]\n-    except KeyError:\n-      raise Exception(\"Could not find version for {0} in environment var {1}\".format(\n-        package, env_var))\n-  return package[0], package[1]\n-\n-if __name__ == \"__main__\":\n-  packages = [(\"gcc\",\"4.9.2\"), (\"gflags\", \"2.0\"), (\"glog\", \"0.3.3-p1\"),\n-              (\"gperftools\", \"2.3\"), (\"libunwind\", \"1.1\"), (\"googletest\", \"20151222\")]\n-  bootstrap(packages)\ndiff --git a/cpp/build-support/lint_cpp_cli.py b/cpp/build-support/lint_cpp_cli.py\nnew file mode 100644\nindex 0000000000..78f3eea808\n--- /dev/null\n+++ b/cpp/build-support/lint_cpp_cli.py\n@@ -0,0 +1,79 @@\n+#!/usr/bin/env python\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import argparse\n+import re\n+import os\n+\n+parser = argparse.ArgumentParser(\n+    description=\"Check for illegal headers for C++/CLI applications\")\n+parser.add_argument(\"source_path\",\n+                    help=\"Path to source code\")\n+arguments = parser.parse_args()\n+\n+\n+_STRIP_COMMENT_REGEX = re.compile('(.+)?(?=//)')\n+\n+\n+def _strip_comments(line):\n+    m = _STRIP_COMMENT_REGEX.match(line)\n+    if not m:\n+        return line\n+    else:\n+        return m.group(0)\n+\n+\n+def lint_file(path):\n+    fail_rules = [\n+        (lambda x: '<mutex>' in x, 'Uses <mutex>'),\n+        (lambda x: 'nullptr' in x, 'Uses nullptr')\n+    ]\n+\n+    with open(path) as f:\n+        for i, line in enumerate(f):\n+            stripped_line = _strip_comments(line)\n+            for rule, why in fail_rules:\n+                if rule(stripped_line):\n+                    raise Exception('File {0} failed C++/CLI lint check: {1}\\n'\n+                                    'Line {2}: {3}'\n+                                    .format(path, why, i + 1, line))\n+\n+\n+EXCLUSIONS = [\n+    'arrow/util/macros.h',\n+    'arrow/util/parallel.h',\n+    'arrow/io/hdfs-internal.h'\n+]\n+\n+\n+for dirpath, _, filenames in os.walk(arguments.source_path):\n+    for filename in filenames:\n+        full_path = os.path.join(dirpath, filename)\n+\n+        exclude = False\n+        for exclusion in EXCLUSIONS:\n+            if exclusion in full_path:\n+                exclude = True\n+                break\n+\n+        if exclude:\n+            continue\n+\n+        # Only run on header files\n+        if filename.endswith('.h'):\n+            lint_file(full_path)\ndiff --git a/cpp/src/arrow/compute/kernel.h b/cpp/src/arrow/compute/kernel.h\nindex 0bfa55cfee..3691f4ad83 100644\n--- a/cpp/src/arrow/compute/kernel.h\n+++ b/cpp/src/arrow/compute/kernel.h\n@@ -58,7 +58,7 @@ struct ARROW_EXPORT Datum {\n       value;\n \n   /// \\brief Empty datum, to be populated elsewhere\n-  Datum() : value(nullptr) {}\n+  Datum() : value(NULLPTR) {}\n \n   explicit Datum(const std::shared_ptr<Scalar>& value) : value(value) {}\n \n@@ -124,7 +124,7 @@ struct ARROW_EXPORT Datum {\n     } else if (this->kind() == Datum::CHUNKED_ARRAY) {\n       return util::get<std::shared_ptr<ChunkedArray>>(this->value)->type();\n     }\n-    return nullptr;\n+    return NULLPTR;\n   }\n };\n \ndiff --git a/cpp/src/arrow/ipc/test-common.h b/cpp/src/arrow/ipc/test-common.h\nindex c914be6035..87d826f806 100644\n--- a/cpp/src/arrow/ipc/test-common.h\n+++ b/cpp/src/arrow/ipc/test-common.h\n@@ -171,7 +171,7 @@ Status MakeRandomBooleanArray(const int length, bool include_nulls,\n     test::random_null_bytes(length, 0.1, valid_bytes.data());\n     *out = std::make_shared<BooleanArray>(length, data, null_bitmap, -1);\n   } else {\n-    *out = std::make_shared<BooleanArray>(length, data, nullptr, 0);\n+    *out = std::make_shared<BooleanArray>(length, data, NULLPTR, 0);\n   }\n   return Status::OK();\n }\n@@ -461,7 +461,7 @@ Status MakeUnion(std::shared_ptr<RecordBatch>* out) {\n   auto sparse_no_nulls =\n       std::make_shared<UnionArray>(sparse_type, length, sparse_children, type_ids_buffer);\n   auto sparse = std::make_shared<UnionArray>(sparse_type, length, sparse_children,\n-                                             type_ids_buffer, nullptr, null_bitmask, 1);\n+                                             type_ids_buffer, NULLPTR, null_bitmask, 1);\n \n   auto dense =\n       std::make_shared<UnionArray>(dense_type, length, dense_children, type_ids_buffer,\ndiff --git a/cpp/src/arrow/memory_pool.cc b/cpp/src/arrow/memory_pool.cc\nindex 34bd600e83..a92bfbff35 100644\n--- a/cpp/src/arrow/memory_pool.cc\n+++ b/cpp/src/arrow/memory_pool.cc\n@@ -18,10 +18,12 @@\n #include \"arrow/memory_pool.h\"\n \n #include <algorithm>\n+#include <atomic>\n #include <cerrno>\n #include <cstdlib>\n #include <cstring>\n #include <iostream>\n+#include <memory>\n #include <mutex>\n #include <sstream>  // IWYU pragma: keep\n \n@@ -202,39 +204,70 @@ int64_t LoggingMemoryPool::max_memory() const {\n   return mem;\n }\n \n-ProxyMemoryPool::ProxyMemoryPool(MemoryPool* pool) : pool_(pool) {}\n+class ProxyMemoryPool::ProxyMemoryPoolImpl {\n+ public:\n+  explicit ProxyMemoryPoolImpl(MemoryPool* pool) : pool_(pool) {}\n \n-Status ProxyMemoryPool::Allocate(int64_t size, uint8_t** out) {\n-  RETURN_NOT_OK(pool_->Allocate(size, out));\n-  bytes_allocated_ += size;\n-  {\n-    std::lock_guard<std::mutex> guard(lock_);\n-    if (bytes_allocated_ > max_memory_) {\n-      max_memory_ = bytes_allocated_.load();\n+  Status Allocate(int64_t size, uint8_t** out) {\n+    RETURN_NOT_OK(pool_->Allocate(size, out));\n+    bytes_allocated_ += size;\n+    {\n+      std::lock_guard<std::mutex> guard(lock_);\n+      if (bytes_allocated_ > max_memory_) {\n+        max_memory_ = bytes_allocated_.load();\n+      }\n     }\n+    return Status::OK();\n   }\n-  return Status::OK();\n-}\n \n-Status ProxyMemoryPool::Reallocate(int64_t old_size, int64_t new_size, uint8_t** ptr) {\n-  RETURN_NOT_OK(pool_->Reallocate(old_size, new_size, ptr));\n-  bytes_allocated_ += new_size - old_size;\n-  {\n-    std::lock_guard<std::mutex> guard(lock_);\n-    if (bytes_allocated_ > max_memory_) {\n-      max_memory_ = bytes_allocated_.load();\n+  Status Reallocate(int64_t old_size, int64_t new_size, uint8_t** ptr) {\n+    RETURN_NOT_OK(pool_->Reallocate(old_size, new_size, ptr));\n+    bytes_allocated_ += new_size - old_size;\n+    {\n+      std::lock_guard<std::mutex> guard(lock_);\n+      if (bytes_allocated_ > max_memory_) {\n+        max_memory_ = bytes_allocated_.load();\n+      }\n     }\n+    return Status::OK();\n   }\n-  return Status::OK();\n+\n+  void Free(uint8_t* buffer, int64_t size) {\n+    pool_->Free(buffer, size);\n+    bytes_allocated_ -= size;\n+  }\n+\n+  int64_t bytes_allocated() const { return bytes_allocated_.load(); }\n+\n+  int64_t max_memory() const { return max_memory_.load(); }\n+\n+ private:\n+  mutable std::mutex lock_;\n+  MemoryPool* pool_;\n+  std::atomic<int64_t> bytes_allocated_{0};\n+  std::atomic<int64_t> max_memory_{0};\n+};\n+\n+ProxyMemoryPool::ProxyMemoryPool(MemoryPool* pool) {\n+  impl_.reset(new ProxyMemoryPoolImpl(pool));\n+}\n+\n+ProxyMemoryPool::~ProxyMemoryPool() {}\n+\n+Status ProxyMemoryPool::Allocate(int64_t size, uint8_t** out) {\n+  return impl_->Allocate(size, out);\n+}\n+\n+Status ProxyMemoryPool::Reallocate(int64_t old_size, int64_t new_size, uint8_t** ptr) {\n+  return impl_->Reallocate(old_size, new_size, ptr);\n }\n \n void ProxyMemoryPool::Free(uint8_t* buffer, int64_t size) {\n-  pool_->Free(buffer, size);\n-  bytes_allocated_ -= size;\n+  return impl_->Free(buffer, size);\n }\n \n-int64_t ProxyMemoryPool::bytes_allocated() const { return bytes_allocated_.load(); }\n+int64_t ProxyMemoryPool::bytes_allocated() const { return impl_->bytes_allocated(); }\n \n-int64_t ProxyMemoryPool::max_memory() const { return max_memory_.load(); }\n+int64_t ProxyMemoryPool::max_memory() const { return impl_->max_memory(); }\n \n }  // namespace arrow\ndiff --git a/cpp/src/arrow/memory_pool.h b/cpp/src/arrow/memory_pool.h\nindex de588965d9..0ee46a345a 100644\n--- a/cpp/src/arrow/memory_pool.h\n+++ b/cpp/src/arrow/memory_pool.h\n@@ -18,9 +18,8 @@\n #ifndef ARROW_MEMORY_POOL_H\n #define ARROW_MEMORY_POOL_H\n \n-#include <atomic>\n #include <cstdint>\n-#include <mutex>\n+#include <memory>\n \n #include \"arrow/util/visibility.h\"\n \n@@ -94,6 +93,7 @@ class ARROW_EXPORT LoggingMemoryPool : public MemoryPool {\n class ARROW_EXPORT ProxyMemoryPool : public MemoryPool {\n  public:\n   explicit ProxyMemoryPool(MemoryPool* pool);\n+  ~ProxyMemoryPool() override;\n \n   Status Allocate(int64_t size, uint8_t** out) override;\n   Status Reallocate(int64_t old_size, int64_t new_size, uint8_t** ptr) override;\n@@ -105,10 +105,8 @@ class ARROW_EXPORT ProxyMemoryPool : public MemoryPool {\n   int64_t max_memory() const override;\n \n  private:\n-  mutable std::mutex lock_;\n-  MemoryPool* pool_;\n-  std::atomic<int64_t> bytes_allocated_{0};\n-  std::atomic<int64_t> max_memory_{0};\n+  class ProxyMemoryPoolImpl;\n+  std::unique_ptr<ProxyMemoryPoolImpl> impl_;\n };\n \n ARROW_EXPORT MemoryPool* default_memory_pool();\ndiff --git a/cpp/src/arrow/public-api-test.cc b/cpp/src/arrow/public-api-test.cc\nindex 8298d748fe..088da3f593 100644\n--- a/cpp/src/arrow/public-api-test.cc\n+++ b/cpp/src/arrow/public-api-test.cc\n@@ -16,11 +16,17 @@\n // under the License.\n \n #include \"arrow/api.h\"\n+#include \"arrow/io/api.h\"\n+#include \"arrow/ipc/api.h\"\n \n #ifdef DCHECK\n #error \"DCHECK should not be visible from Arrow public headers.\"\n #endif\n \n+#ifdef ARROW_UTIL_PARALLEL_H\n+#error \"arrow/util/parallel.h is an internal header\"\n+#endif\n+\n #include <gtest/gtest.h>\n \n TEST(_, _) {}\ndiff --git a/cpp/src/arrow/python/common.h b/cpp/src/arrow/python/common.h\nindex 6eecd598eb..cd54e5abbf 100644\n--- a/cpp/src/arrow/python/common.h\n+++ b/cpp/src/arrow/python/common.h\n@@ -143,7 +143,7 @@ struct ARROW_EXPORT PyBytesView {\n   const char* bytes;\n   Py_ssize_t size;\n \n-  PyBytesView() : bytes(nullptr), size(0), ref(nullptr) {}\n+  PyBytesView() : bytes(NULLPTR), size(0), ref(NULLPTR) {}\n \n   // View the given Python object as binary-like, i.e. bytes\n   Status FromBinary(PyObject* obj) { return FromBinary(obj, \"a bytes object\"); }\n@@ -180,7 +180,7 @@ struct ARROW_EXPORT PyBytesView {\n   }\n \n  protected:\n-  PyBytesView(const char* b, Py_ssize_t s, PyObject* obj = nullptr)\n+  PyBytesView(const char* b, Py_ssize_t s, PyObject* obj = NULLPTR)\n       : bytes(b), size(s), ref(obj) {}\n \n   Status FromBinary(PyObject* obj, const char* expected_msg) {\ndiff --git a/cpp/src/arrow/python/helpers.h b/cpp/src/arrow/python/helpers.h\nindex 195d5fbf91..ea3cc6ae1f 100644\n--- a/cpp/src/arrow/python/helpers.h\n+++ b/cpp/src/arrow/python/helpers.h\n@@ -112,10 +112,10 @@ inline Status CastSize(Py_ssize_t size, int32_t* out,\n }\n \n Status BuilderAppend(StringBuilder* builder, PyObject* obj, bool check_valid = false,\n-                     bool* is_full = nullptr);\n-Status BuilderAppend(BinaryBuilder* builder, PyObject* obj, bool* is_full = nullptr);\n+                     bool* is_full = NULLPTR);\n+Status BuilderAppend(BinaryBuilder* builder, PyObject* obj, bool* is_full = NULLPTR);\n Status BuilderAppend(FixedSizeBinaryBuilder* builder, PyObject* obj,\n-                     bool* is_full = nullptr);\n+                     bool* is_full = NULLPTR);\n \n }  // namespace internal\n }  // namespace py\ndiff --git a/cpp/src/arrow/python/numpy-internal.h b/cpp/src/arrow/python/numpy-internal.h\nindex 12319aae9d..cfaae22f38 100644\n--- a/cpp/src/arrow/python/numpy-internal.h\n+++ b/cpp/src/arrow/python/numpy-internal.h\n@@ -36,7 +36,7 @@ class Ndarray1DIndexer {\n  public:\n   typedef int64_t size_type;\n \n-  Ndarray1DIndexer() : arr_(nullptr), data_(nullptr) {}\n+  Ndarray1DIndexer() : arr_(NULLPTR), data_(NULLPTR) {}\n \n   explicit Ndarray1DIndexer(PyArrayObject* arr) : Ndarray1DIndexer() { Init(arr); }\n \ndiff --git a/cpp/src/arrow/util/thread-pool.cc b/cpp/src/arrow/util/thread-pool.cc\nindex 997ff5d743..90fa4b787d 100644\n--- a/cpp/src/arrow/util/thread-pool.cc\n+++ b/cpp/src/arrow/util/thread-pool.cc\n@@ -20,7 +20,11 @@\n #include \"arrow/util/logging.h\"\n \n #include <algorithm>\n+#include <condition_variable>\n+#include <deque>\n+#include <mutex>\n #include <string>\n+#include <thread>\n \n namespace arrow {\n namespace internal {\ndiff --git a/cpp/src/arrow/util/thread-pool.h b/cpp/src/arrow/util/thread-pool.h\nindex c1b10f7d00..20b6b2ed59 100644\n--- a/cpp/src/arrow/util/thread-pool.h\n+++ b/cpp/src/arrow/util/thread-pool.h\n@@ -18,15 +18,11 @@\n #ifndef ARROW_UTIL_THREAD_POOL_H\n #define ARROW_UTIL_THREAD_POOL_H\n \n-#include <condition_variable>\n-#include <deque>\n #include <exception>\n #include <functional>\n #include <future>\n #include <list>\n #include <memory>\n-#include <mutex>\n-#include <thread>\n #include <type_traits>\n #include <utility>\n #include <vector>\ndiff --git a/cpp/src/arrow/util/variant.h b/cpp/src/arrow/util/variant.h\nindex 3fcd18b691..1aa9aa3732 100644\n--- a/cpp/src/arrow/util/variant.h\n+++ b/cpp/src/arrow/util/variant.h\n@@ -681,14 +681,14 @@ class variant\n     }\n \n     template <typename T, typename std::enable_if<\n-                          (detail::direct_type<T, Types...>::index != detail::invalid_value)>::type* = nullptr>\n+                          (detail::direct_type<T, Types...>::index != detail::invalid_value)>::type* = NULLPTR>\n     VARIANT_INLINE bool is() const\n     {\n         return type_index == detail::direct_type<T, Types...>::index;\n     }\n \n     template <typename T,typename std::enable_if<\n-                         (detail::direct_type<recursive_wrapper<T>, Types...>::index != detail::invalid_value)>::type* = nullptr>\n+                         (detail::direct_type<recursive_wrapper<T>, Types...>::index != detail::invalid_value)>::type* = NULLPTR>\n     VARIANT_INLINE bool is() const\n     {\n         return type_index == detail::direct_type<recursive_wrapper<T>, Types...>::index;\n@@ -710,7 +710,7 @@ class variant\n \n     // get_unchecked<T>()\n     template <typename T, typename std::enable_if<\n-                          (detail::direct_type<T, Types...>::index != detail::invalid_value)>::type* = nullptr>\n+                          (detail::direct_type<T, Types...>::index != detail::invalid_value)>::type* = NULLPTR>\n     VARIANT_INLINE T& get_unchecked()\n     {\n         return *reinterpret_cast<T*>(&data);\n@@ -719,7 +719,7 @@ class variant\n #ifdef HAS_EXCEPTIONS\n     // get<T>()\n     template <typename T, typename std::enable_if<\n-                          (detail::direct_type<T, Types...>::index != detail::invalid_value)>::type* = nullptr>\n+                          (detail::direct_type<T, Types...>::index != detail::invalid_value)>::type* = NULLPTR>\n     VARIANT_INLINE T& get()\n     {\n         if (type_index == detail::direct_type<T, Types...>::index)\n@@ -734,7 +734,7 @@ class variant\n #endif\n \n     template <typename T, typename std::enable_if<\n-                          (detail::direct_type<T, Types...>::index != detail::invalid_value)>::type* = nullptr>\n+                          (detail::direct_type<T, Types...>::index != detail::invalid_value)>::type* = NULLPTR>\n     VARIANT_INLINE T const& get_unchecked() const\n     {\n         return *reinterpret_cast<T const*>(&data);\n@@ -742,7 +742,7 @@ class variant\n \n #ifdef HAS_EXCEPTIONS\n     template <typename T, typename std::enable_if<\n-                          (detail::direct_type<T, Types...>::index != detail::invalid_value)>::type* = nullptr>\n+                          (detail::direct_type<T, Types...>::index != detail::invalid_value)>::type* = NULLPTR>\n     VARIANT_INLINE T const& get() const\n     {\n         if (type_index == detail::direct_type<T, Types...>::index)\n@@ -758,7 +758,7 @@ class variant\n \n     // get_unchecked<T>() - T stored as recursive_wrapper<T>\n     template <typename T, typename std::enable_if<\n-                          (detail::direct_type<recursive_wrapper<T>, Types...>::index != detail::invalid_value)>::type* = nullptr>\n+                          (detail::direct_type<recursive_wrapper<T>, Types...>::index != detail::invalid_value)>::type* = NULLPTR>\n     VARIANT_INLINE T& get_unchecked()\n     {\n         return (*reinterpret_cast<recursive_wrapper<T>*>(&data)).get();\n@@ -767,7 +767,7 @@ class variant\n #ifdef HAS_EXCEPTIONS\n     // get<T>() - T stored as recursive_wrapper<T>\n     template <typename T, typename std::enable_if<\n-                          (detail::direct_type<recursive_wrapper<T>, Types...>::index != detail::invalid_value)>::type* = nullptr>\n+                          (detail::direct_type<recursive_wrapper<T>, Types...>::index != detail::invalid_value)>::type* = NULLPTR>\n     VARIANT_INLINE T& get()\n     {\n         if (type_index == detail::direct_type<recursive_wrapper<T>, Types...>::index)\n@@ -782,7 +782,7 @@ class variant\n #endif\n \n     template <typename T, typename std::enable_if<\n-                          (detail::direct_type<recursive_wrapper<T>, Types...>::index != detail::invalid_value)>::type* = nullptr>\n+                          (detail::direct_type<recursive_wrapper<T>, Types...>::index != detail::invalid_value)>::type* = NULLPTR>\n     VARIANT_INLINE T const& get_unchecked() const\n     {\n         return (*reinterpret_cast<recursive_wrapper<T> const*>(&data)).get();\n@@ -790,7 +790,7 @@ class variant\n \n #ifdef HAS_EXCEPTIONS\n     template <typename T, typename std::enable_if<\n-                          (detail::direct_type<recursive_wrapper<T>, Types...>::index != detail::invalid_value)>::type* = nullptr>\n+                          (detail::direct_type<recursive_wrapper<T>, Types...>::index != detail::invalid_value)>::type* = NULLPTR>\n     VARIANT_INLINE T const& get() const\n     {\n         if (type_index == detail::direct_type<recursive_wrapper<T>, Types...>::index)\n@@ -806,7 +806,7 @@ class variant\n \n     // get_unchecked<T>() - T stored as std::reference_wrapper<T>\n     template <typename T, typename std::enable_if<\n-                          (detail::direct_type<std::reference_wrapper<T>, Types...>::index != detail::invalid_value)>::type* = nullptr>\n+                          (detail::direct_type<std::reference_wrapper<T>, Types...>::index != detail::invalid_value)>::type* = NULLPTR>\n     VARIANT_INLINE T& get_unchecked()\n     {\n         return (*reinterpret_cast<std::reference_wrapper<T>*>(&data)).get();\n@@ -815,7 +815,7 @@ class variant\n #ifdef HAS_EXCEPTIONS\n     // get<T>() - T stored as std::reference_wrapper<T>\n     template <typename T, typename std::enable_if<\n-                          (detail::direct_type<std::reference_wrapper<T>, Types...>::index != detail::invalid_value)>::type* = nullptr>\n+                          (detail::direct_type<std::reference_wrapper<T>, Types...>::index != detail::invalid_value)>::type* = NULLPTR>\n     VARIANT_INLINE T& get()\n     {\n         if (type_index == detail::direct_type<std::reference_wrapper<T>, Types...>::index)\n@@ -830,7 +830,7 @@ class variant\n #endif\n \n     template <typename T, typename std::enable_if<\n-                          (detail::direct_type<std::reference_wrapper<T const>, Types...>::index != detail::invalid_value)>::type* = nullptr>\n+                          (detail::direct_type<std::reference_wrapper<T const>, Types...>::index != detail::invalid_value)>::type* = NULLPTR>\n     VARIANT_INLINE T const& get_unchecked() const\n     {\n         return (*reinterpret_cast<std::reference_wrapper<T const> const*>(&data)).get();\n@@ -838,7 +838,7 @@ class variant\n \n #ifdef HAS_EXCEPTIONS\n     template <typename T, typename std::enable_if<\n-                          (detail::direct_type<std::reference_wrapper<T const>, Types...>::index != detail::invalid_value)>::type* = nullptr>\n+                          (detail::direct_type<std::reference_wrapper<T const>, Types...>::index != detail::invalid_value)>::type* = NULLPTR>\n     VARIANT_INLINE T const& get() const\n     {\n         if (type_index == detail::direct_type<std::reference_wrapper<T const>, Types...>::index)\n@@ -866,7 +866,7 @@ class variant\n     }\n \n     template <typename T, typename std::enable_if<\n-                          (detail::direct_type<T, Types...>::index != detail::invalid_value)>::type* = nullptr>\n+                          (detail::direct_type<T, Types...>::index != detail::invalid_value)>::type* = NULLPTR>\n     VARIANT_INLINE static constexpr int which() noexcept\n     {\n         return static_cast<int>(sizeof...(Types)-detail::direct_type<T, Types...>::index - 1);\ndiff --git a/cpp/src/arrow/util/variant/variant_cast.h b/cpp/src/arrow/util/variant/variant_cast.h\nindex 558f1d9a60..71ae80b5df 100644\n--- a/cpp/src/arrow/util/variant/variant_cast.h\n+++ b/cpp/src/arrow/util/variant/variant_cast.h\n@@ -29,6 +29,8 @@\n \n #include <type_traits>\n \n+#include \"arrow/util/macros.h\"\n+\n namespace arrow {\n namespace util {\n \n@@ -51,12 +53,12 @@ class dynamic_caster\n public:\n     using result_type = T&;\n     template <class V>\n-    T& operator()(V& v, typename std::enable_if<!std::is_polymorphic<V>::value>::type* = nullptr) const\n+    T& operator()(V& v, typename std::enable_if<!std::is_polymorphic<V>::value>::type* = NULLPTR) const\n     {\n         throw std::bad_cast();\n     }\n     template <class V>\n-    T& operator()(V& v, typename std::enable_if<std::is_polymorphic<V>::value>::type* = nullptr) const\n+    T& operator()(V& v, typename std::enable_if<std::is_polymorphic<V>::value>::type* = NULLPTR) const\n     {\n         return dynamic_cast<T&>(v);\n     }\n@@ -68,12 +70,12 @@ class dynamic_caster<T*>\n public:\n     using result_type = T*;\n     template <class V>\n-    T* operator()(V& v, typename std::enable_if<!std::is_polymorphic<V>::value>::type* = nullptr) const\n+    T* operator()(V& v, typename std::enable_if<!std::is_polymorphic<V>::value>::type* = NULLPTR) const\n     {\n-        return nullptr;\n+        return NULLPTR;\n     }\n     template <class V>\n-    T* operator()(V& v, typename std::enable_if<std::is_polymorphic<V>::value>::type* = nullptr) const\n+    T* operator()(V& v, typename std::enable_if<std::is_polymorphic<V>::value>::type* = NULLPTR) const\n     {\n         return dynamic_cast<T*>(&v);\n     }\ndiff --git a/cpp/src/plasma/CMakeLists.txt b/cpp/src/plasma/CMakeLists.txt\nindex 744f9ad23b..aa4d2b002a 100644\n--- a/cpp/src/plasma/CMakeLists.txt\n+++ b/cpp/src/plasma/CMakeLists.txt\n@@ -39,7 +39,7 @@ set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-conversion\")\n # Compile flatbuffers\n \n set(PLASMA_FBS_SRC \"${CMAKE_CURRENT_LIST_DIR}/format/plasma.fbs\" \"${CMAKE_CURRENT_LIST_DIR}/format/common.fbs\")\n-set(OUTPUT_DIR ${CMAKE_CURRENT_LIST_DIR}/)\n+set(OUTPUT_DIR ${CMAKE_BINARY_DIR}/src/plasma)\n \n set(PLASMA_FBS_OUTPUT_FILES\n   \"${OUTPUT_DIR}/common_generated.h\"\n@@ -140,12 +140,12 @@ endif()\n # Headers: top level\n install(FILES\n   common.h\n-  common_generated.h\n+  \"${OUTPUT_DIR}/common_generated.h\"\n   compat.h\n   client.h\n   events.h\n   plasma.h\n-  plasma_generated.h\n+  \"${OUTPUT_DIR}/plasma_generated.h\"\n   protocol.h\n   DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/plasma\")\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-09T01:56:52.027+0000",
                    "updated": "2018-07-09T01:56:52.027+0000",
                    "started": "2018-07-09T01:56:52.026+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "120540",
                    "issueId": "13111749"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 4800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3239549f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1430f46e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@67140590[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@74141e98[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@514afdb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1349bb7b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@54b61407[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@220d7[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20483d7b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7e04c86a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1af6ed81[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@be37290[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4800,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Mar 11 18:01:38 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-07-09T01:57:22.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1722/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2017-10-24T16:46:38.000+0000",
        "updated": "2021-03-11T18:01:38.000+0000",
        "timeoriginalestimate": null,
        "description": "This includes:\r\n\r\n* Using {{nullptr}} in header files (we must instead use an appropriate macro to use {{__nullptr}} when the host compiler is C++/CLI)\r\n* Including {{<mutex>}} in a public header (e.g. header files without \"impl\" or \"internal\" in their name)",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add linting script to look for C++/CLI issues",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111749/comment/16217225",
                    "id": "16217225",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "cc [~tobyshaw]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-10-24T16:47:10.279+0000",
                    "updated": "2017-10-24T16:47:10.279+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111749/comment/16527842",
                    "id": "16527842",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I'm going to see if I can hack out a solution for this",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-06-29T15:47:31.479+0000",
                    "updated": "2018-06-29T15:47:31.479+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111749/comment/16536482",
                    "id": "16536482",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 2225\n[https://github.com/apache/arrow/pull/2225]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2018-07-09T01:57:22.107+0000",
                    "updated": "2018-07-09T01:57:22.107+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111749/comment/17299775",
                    "id": "17299775",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "[~wesm] [~tobyshaw] Can you add more context on these exclusions?\r\nWhile the nullptr case is easy to avoid using the NULLPTR macro, the mutex exclusion is potentially annoying.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-03-11T18:01:38.387+0000",
                    "updated": "2021-03-11T18:01:38.387+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|i3lndj:",
        "customfield_12314139": null
    }
}