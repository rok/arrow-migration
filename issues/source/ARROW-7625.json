{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13280632",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13280632",
    "key": "ARROW-7625",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=shiro615",
            "name": "shiro615",
            "key": "shiro615",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34043",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34043",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34043",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34043"
            },
            "displayName": "Yosuke Shiro",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ZiggyTheHamster",
            "name": "ZiggyTheHamster",
            "key": "ziggythehamster",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=ziggythehamster&avatarId=41651",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ziggythehamster&avatarId=41651",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ziggythehamster&avatarId=41651",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ziggythehamster&avatarId=41651"
            },
            "displayName": "Keith Gable",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ZiggyTheHamster",
            "name": "ZiggyTheHamster",
            "key": "ziggythehamster",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=ziggythehamster&avatarId=41651",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ziggythehamster&avatarId=41651",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ziggythehamster&avatarId=41651",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ziggythehamster&avatarId=41651"
            },
            "displayName": "Keith Gable",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 15600,
            "total": 15600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15600,
            "total": 15600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7625/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 28,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13280632/worklog/380361",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #6336: ARROW-7625: [Parquet][GLib] Add support for writer properties\nURL: https://github.com/apache/arrow/pull/6336\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-01T16:24:15.295+0000",
                    "updated": "2020-02-01T16:24:15.295+0000",
                    "started": "2020-02-01T16:24:15.294+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "380361",
                    "issueId": "13280632"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13280632/worklog/380362",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6336: ARROW-7625: [Parquet][GLib] Add support for writer properties\nURL: https://github.com/apache/arrow/pull/6336#issuecomment-581046092\n \n \n   https://issues.apache.org/jira/browse/ARROW-7625\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-01T16:31:33.022+0000",
                    "updated": "2020-02-01T16:31:33.022+0000",
                    "started": "2020-02-01T16:31:33.021+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "380362",
                    "issueId": "13280632"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13280632/worklog/380595",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #6336: ARROW-7625: [Parquet][GLib] Add support for writer properties\nURL: https://github.com/apache/arrow/pull/6336#issuecomment-581181186\n \n \n   Could you enable Parquet on macOS CI?\r\n   \r\n   ```diff\r\n   diff --git a/.github/workflows/ruby.yml b/.github/workflows/ruby.yml\r\n   index bc28c6f54..f9ba56b67 100644\r\n   --- a/.github/workflows/ruby.yml\r\n   +++ b/.github/workflows/ruby.yml\r\n   @@ -85,6 +85,7 @@ jobs:\r\n          ARROW_HOME: /usr/local\r\n          ARROW_JEMALLOC: OFF\r\n          ARROW_ORC: OFF\r\n   +      ARROW_PARQUET: ON\r\n          ARROW_WITH_BROTLI: ON\r\n          ARROW_WITH_LZ4: ON\r\n          ARROW_WITH_SNAPPY: ON\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-02T21:49:04.426+0000",
                    "updated": "2020-02-02T21:49:04.426+0000",
                    "started": "2020-02-02T21:49:04.426+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "380595",
                    "issueId": "13280632"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13280632/worklog/381681",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on issue #6336: ARROW-7625: [Parquet][GLib] Add support for writer properties\nURL: https://github.com/apache/arrow/pull/6336#issuecomment-581966398\n \n \n   Thank you for your review.\r\n   I'll try to address them.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-04T15:33:53.145+0000",
                    "updated": "2020-02-04T15:33:53.145+0000",
                    "started": "2020-02-04T15:33:53.144+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "381681",
                    "issueId": "13280632"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13280632/worklog/382376",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on issue #6336: ARROW-7625: [Parquet][GLib] Add support for writer properties\nURL: https://github.com/apache/arrow/pull/6336#issuecomment-582500918\n \n \n   @kou \r\n   https://github.com/apache/arrow/pull/6336/commits/fbe3f6625f5cc277194ef8ff534e973e451c7ff4\r\n   Could you please confirm my understanding?\r\n   I'll add the other properties in this PR if this change is fine.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-05T16:47:56.017+0000",
                    "updated": "2020-02-05T16:47:56.017+0000",
                    "started": "2020-02-05T16:47:56.017+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "382376",
                    "issueId": "13280632"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13280632/worklog/382711",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6336: ARROW-7625: [Parquet][GLib] Add support for writer properties\nURL: https://github.com/apache/arrow/pull/6336#discussion_r375627510\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-writer.cpp\n ##########\n @@ -261,3 +404,19 @@ gparquet_arrow_file_writer_get_raw(GParquetArrowFileWriter *arrow_file_writer)\n   auto priv = GPARQUET_ARROW_FILE_WRITER_GET_PRIVATE(arrow_file_writer);\n   return priv->arrow_file_writer;\n }\n+\n+GParquetWriterProperties *\n+gparquet_writer_properties_new_raw(parquet::WriterProperties::Builder *parquet_builder)\n+{\n+  auto writer_properties = g_object_new(GPARQUET_TYPE_WRITER_PROPERTIES,\n+                                        \"builder\", parquet_builder,\n+                                        NULL);\n+  return GPARQUET_WRITER_PROPERTIES(writer_properties);\n+}\n+\n+std::shared_ptr<parquet::WriterProperties>\n+gparquet_writer_properties_get_raw(GParquetWriterProperties *properties)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  return priv->builder->build();\n \n Review comment:\n   I want to cache `build()` result.\r\n   \r\n   ```cpp\r\n   if (priv->changed) {\r\n     priv->properties = priv->builder->build(); \r\n   }\r\n   return priv->properties;\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-06T03:55:12.980+0000",
                    "updated": "2020-02-06T03:55:12.980+0000",
                    "started": "2020-02-06T03:55:12.979+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "382711",
                    "issueId": "13280632"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13280632/worklog/382712",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6336: ARROW-7625: [Parquet][GLib] Add support for writer properties\nURL: https://github.com/apache/arrow/pull/6336#discussion_r375626985\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-writer.cpp\n ##########\n @@ -32,10 +32,129 @@ G_BEGIN_DECLS\n  * @short_description: Arrow file writer class\n  * @include: parquet-glib/parquet-glib.h\n  *\n+ * #GParquetWriterProperties is a class for the writer properties.\n  * #GParquetArrowFileWriter is a class for writer Apache Arrow data to\n  * file as Apache Parquet format.\n  */\n \n+typedef struct GParquetWriterPropertiesPrivate_ {\n+  parquet::WriterProperties::Builder *builder;\n+  GArrowCompressionType compression_type;\n+} GParquetWriterPropertiesPrivate;\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GParquetWriterProperties,\n+                           gparquet_writer_properties,\n+                           G_TYPE_OBJECT)\n+\n+#define GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object) \\\n+  static_cast<GParquetWriterPropertiesPrivate *>(      \\\n+    gparquet_writer_properties_get_instance_private(   \\\n+      GPARQUET_WRITER_PROPERTIES(object)))\n+\n+enum {\n+  PROP_BUILDER = 1\n+};\n+\n+static void\n+gparquet_writer_properties_finalize(GObject *object)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object);\n+\n+  delete priv->builder;\n+\n+  G_OBJECT_CLASS(gparquet_writer_properties_parent_class)->finalize(object);\n+}\n+\n+static void\n+gparquet_writer_properties_set_property(GObject *object,\n+                                        guint prop_id,\n+                                        const GValue *value,\n+                                        GParamSpec *pspec)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_BUILDER:\n+    priv->builder =\n+      static_cast<parquet::WriterProperties::Builder *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+gparquet_writer_properties_init(GParquetWriterProperties *object)\n+{\n \n Review comment:\n   We can always create `parquet::WriterPropertiesBuilder` here.\r\n   We don't need to receive it as an argument of `g_object_new()`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-06T03:55:13.158+0000",
                    "updated": "2020-02-06T03:55:13.158+0000",
                    "started": "2020-02-06T03:55:13.157+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "382712",
                    "issueId": "13280632"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13280632/worklog/382713",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6336: ARROW-7625: [Parquet][GLib] Add support for writer properties\nURL: https://github.com/apache/arrow/pull/6336#discussion_r375629527\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-writer.cpp\n ##########\n @@ -32,10 +32,129 @@ G_BEGIN_DECLS\n  * @short_description: Arrow file writer class\n  * @include: parquet-glib/parquet-glib.h\n  *\n+ * #GParquetWriterProperties is a class for the writer properties.\n  * #GParquetArrowFileWriter is a class for writer Apache Arrow data to\n  * file as Apache Parquet format.\n  */\n \n+typedef struct GParquetWriterPropertiesPrivate_ {\n+  parquet::WriterProperties::Builder *builder;\n+  GArrowCompressionType compression_type;\n+} GParquetWriterPropertiesPrivate;\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GParquetWriterProperties,\n+                           gparquet_writer_properties,\n+                           G_TYPE_OBJECT)\n+\n+#define GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object) \\\n+  static_cast<GParquetWriterPropertiesPrivate *>(      \\\n+    gparquet_writer_properties_get_instance_private(   \\\n+      GPARQUET_WRITER_PROPERTIES(object)))\n+\n+enum {\n+  PROP_BUILDER = 1\n+};\n+\n+static void\n+gparquet_writer_properties_finalize(GObject *object)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object);\n+\n+  delete priv->builder;\n+\n+  G_OBJECT_CLASS(gparquet_writer_properties_parent_class)->finalize(object);\n+}\n+\n+static void\n+gparquet_writer_properties_set_property(GObject *object,\n+                                        guint prop_id,\n+                                        const GValue *value,\n+                                        GParamSpec *pspec)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_BUILDER:\n+    priv->builder =\n+      static_cast<parquet::WriterProperties::Builder *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+gparquet_writer_properties_init(GParquetWriterProperties *object)\n+{\n+}\n+\n+static void\n+gparquet_writer_properties_class_init(GParquetWriterPropertiesClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = gparquet_writer_properties_finalize;\n+  gobject_class->set_property = gparquet_writer_properties_set_property;\n+\n+  spec = g_param_spec_pointer(\"builder\",\n+                              \"Builder\",\n+                              \"The raw parquet::WriterProperties::Builder *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_BUILDER, spec);\n+}\n+\n+/**\n+ * gparquet_writer_properties_new:\n+ *\n+ * Return: A newly created #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+GParquetWriterProperties *\n+gparquet_writer_properties_new(void)\n+{\n+  auto parquet_builder = new parquet::WriterProperties::Builder();\n+  auto properties = gparquet_writer_properties_new_raw(parquet_builder);\n+  return GPARQUET_WRITER_PROPERTIES(properties);\n+}\n+\n+/**\n+ * gparquet_writer_properties_set_compression:\n+ * @properties: A #GParquetWriterProperties.\n+ * @compression_type: A #GArrowCompressionType.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_set_compression(GParquetWriterProperties *properties,\n+                                           GArrowCompressionType compression_type)\n+{\n+  auto arrow_compression_type = garrow_compression_type_to_raw(compression_type);\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->compression(arrow_compression_type);\n+  priv->compression_type = compression_type;\n+}\n+\n+/**\n+ * gparquet_writer_properties_get_compression:\n+ * @properties: A #GParquetWriterProperties.\n+ *\n+ * Returns: The compression type of #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowCompressionType\n+gparquet_writer_properties_get_compression(GParquetWriterProperties *properties)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  return priv->compression_type;\n \n Review comment:\n   I don't want to keep duplicated information in this object.\r\n   \r\n   ```cpp\r\n   auto parquet_properties = gparquet_writer_properties_get_raw(properties);\r\n   auto parquet_column_path = parquet::Schema::ColumnPath::FromDotString(dotstring); // Or receive as an argument\r\n   auto arrow_compression = parquet_properties->compression(parquet_column_path);\r\n   return garrow_compression_type_from_raw(arrow_compression);\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-06T03:55:13.295+0000",
                    "updated": "2020-02-06T03:55:13.295+0000",
                    "started": "2020-02-06T03:55:13.293+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "382713",
                    "issueId": "13280632"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13280632/worklog/382950",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on issue #6336: ARROW-7625: [Parquet][GLib] Add support for writer properties\nURL: https://github.com/apache/arrow/pull/6336#issuecomment-582965672\n \n \n   Thank you for your comments.\r\n   I'll fix them in this week.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-06T15:42:37.727+0000",
                    "updated": "2020-02-06T15:42:37.727+0000",
                    "started": "2020-02-06T15:42:37.726+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "382950",
                    "issueId": "13280632"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13280632/worklog/383156",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ziggythehamster commented on issue #6336: ARROW-7625: [Parquet][GLib] Add support for writer properties\nURL: https://github.com/apache/arrow/pull/6336#issuecomment-583107697\n \n \n   Nice catch with the other configurables (dictionary, memory pool) and exposing the per-column settings. I was happy with:\r\n   \r\n   ```c\r\n   parquet::WriterProperties::Builder builder;\r\n   builder.compression(arrow::Compression::SNAPPY);\r\n   auto parquet_writer_properties = builder.build();\r\n   ```\r\n   \r\n   :P\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-06T20:59:10.126+0000",
                    "updated": "2020-02-06T20:59:10.126+0000",
                    "started": "2020-02-06T20:59:10.125+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "383156",
                    "issueId": "13280632"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13280632/worklog/383296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #6336: ARROW-7625: [Parquet][GLib] Add support for writer properties\nURL: https://github.com/apache/arrow/pull/6336#issuecomment-583181432\n \n \n   @ziggythehamster What do you mean? Do you want to use `parquet::WriterProperties` built by C++ with Apache Arrow GLib?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-07T00:45:00.587+0000",
                    "updated": "2020-02-07T00:45:00.587+0000",
                    "started": "2020-02-07T00:45:00.587+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "383296",
                    "issueId": "13280632"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13280632/worklog/383904",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on issue #6336: ARROW-7625: [Parquet][GLib] Add support for writer properties\nURL: https://github.com/apache/arrow/pull/6336#issuecomment-583676586\n \n \n   I hope I've addressed all comments. In addition to them, I've added some properties.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-08T00:44:37.727+0000",
                    "updated": "2020-02-08T00:44:37.727+0000",
                    "started": "2020-02-08T00:44:37.726+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "383904",
                    "issueId": "13280632"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13280632/worklog/383907",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on issue #6336: ARROW-7625: [Parquet][GLib] Add support for writer properties\nURL: https://github.com/apache/arrow/pull/6336#issuecomment-583676586\n \n \n   I hope I've addressed all review comments. In addition to them, I've added some properties.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-08T01:04:14.197+0000",
                    "updated": "2020-02-08T01:04:14.197+0000",
                    "started": "2020-02-08T01:04:14.197+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "383907",
                    "issueId": "13280632"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13280632/worklog/384144",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6336: ARROW-7625: [Parquet][GLib] Add support for writer properties\nURL: https://github.com/apache/arrow/pull/6336#discussion_r376816232\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-writer.cpp\n ##########\n @@ -32,10 +32,274 @@ G_BEGIN_DECLS\n  * @short_description: Arrow file writer class\n  * @include: parquet-glib/parquet-glib.h\n  *\n+ * #GParquetWriterProperties is a class for the writer properties.\n  * #GParquetArrowFileWriter is a class for writer Apache Arrow data to\n  * file as Apache Parquet format.\n  */\n \n+typedef struct GParquetWriterPropertiesPrivate_ {\n+  std::shared_ptr<parquet::WriterProperties> properties;\n+  parquet::WriterProperties::Builder *builder;\n+  gboolean changed;\n+} GParquetWriterPropertiesPrivate;\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GParquetWriterProperties,\n+                           gparquet_writer_properties,\n+                           G_TYPE_OBJECT)\n+\n+#define GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object) \\\n+  static_cast<GParquetWriterPropertiesPrivate *>(      \\\n+    gparquet_writer_properties_get_instance_private(   \\\n+      GPARQUET_WRITER_PROPERTIES(object)))\n+\n+static void\n+gparquet_writer_properties_finalize(GObject *object)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object);\n+\n+  priv->properties = nullptr;\n+  delete priv->builder;\n+\n+  G_OBJECT_CLASS(gparquet_writer_properties_parent_class)->finalize(object);\n+}\n+\n+static void\n+gparquet_writer_properties_init(GParquetWriterProperties *object)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object);\n+  priv->builder = new parquet::WriterProperties::Builder();\n+  priv->changed = TRUE;\n+}\n+\n+static void\n+gparquet_writer_properties_class_init(GParquetWriterPropertiesClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = gparquet_writer_properties_finalize;\n+}\n+\n+/**\n+ * gparquet_writer_properties_new:\n+ *\n+ * Return: A newly created #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+GParquetWriterProperties *\n+gparquet_writer_properties_new(void)\n+{\n+  auto writer_properties = g_object_new(GPARQUET_TYPE_WRITER_PROPERTIES,\n+                                        NULL);\n+  return GPARQUET_WRITER_PROPERTIES(writer_properties);\n+}\n+\n+/**\n+ * gparquet_writer_properties_set_compression:\n+ * @properties: A #GParquetWriterProperties.\n+ * @compression_type: A #GArrowCompressionType.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_set_compression(GParquetWriterProperties *properties,\n+                                           GArrowCompressionType compression_type)\n+{\n+  auto arrow_compression_type = garrow_compression_type_to_raw(compression_type);\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->compression(arrow_compression_type);\n+  priv->changed = TRUE;\n+}\n+\n+/**\n+ * gparquet_writer_properties_get_compression:\n \n Review comment:\n   Could you append `_dot_string`?\r\n   Because we will add `parquet::Schema::ColumnPath` version later.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-09T21:31:56.170+0000",
                    "updated": "2020-02-09T21:31:56.170+0000",
                    "started": "2020-02-09T21:31:56.170+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "384144",
                    "issueId": "13280632"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13280632/worklog/384145",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6336: ARROW-7625: [Parquet][GLib] Add support for writer properties\nURL: https://github.com/apache/arrow/pull/6336#discussion_r376816326\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-writer.cpp\n ##########\n @@ -32,10 +32,274 @@ G_BEGIN_DECLS\n  * @short_description: Arrow file writer class\n  * @include: parquet-glib/parquet-glib.h\n  *\n+ * #GParquetWriterProperties is a class for the writer properties.\n  * #GParquetArrowFileWriter is a class for writer Apache Arrow data to\n  * file as Apache Parquet format.\n  */\n \n+typedef struct GParquetWriterPropertiesPrivate_ {\n+  std::shared_ptr<parquet::WriterProperties> properties;\n+  parquet::WriterProperties::Builder *builder;\n+  gboolean changed;\n+} GParquetWriterPropertiesPrivate;\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GParquetWriterProperties,\n+                           gparquet_writer_properties,\n+                           G_TYPE_OBJECT)\n+\n+#define GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object) \\\n+  static_cast<GParquetWriterPropertiesPrivate *>(      \\\n+    gparquet_writer_properties_get_instance_private(   \\\n+      GPARQUET_WRITER_PROPERTIES(object)))\n+\n+static void\n+gparquet_writer_properties_finalize(GObject *object)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object);\n+\n+  priv->properties = nullptr;\n+  delete priv->builder;\n+\n+  G_OBJECT_CLASS(gparquet_writer_properties_parent_class)->finalize(object);\n+}\n+\n+static void\n+gparquet_writer_properties_init(GParquetWriterProperties *object)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object);\n+  priv->builder = new parquet::WriterProperties::Builder();\n+  priv->changed = TRUE;\n+}\n+\n+static void\n+gparquet_writer_properties_class_init(GParquetWriterPropertiesClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = gparquet_writer_properties_finalize;\n+}\n+\n+/**\n+ * gparquet_writer_properties_new:\n+ *\n+ * Return: A newly created #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+GParquetWriterProperties *\n+gparquet_writer_properties_new(void)\n+{\n+  auto writer_properties = g_object_new(GPARQUET_TYPE_WRITER_PROPERTIES,\n+                                        NULL);\n+  return GPARQUET_WRITER_PROPERTIES(writer_properties);\n+}\n+\n+/**\n+ * gparquet_writer_properties_set_compression:\n+ * @properties: A #GParquetWriterProperties.\n+ * @compression_type: A #GArrowCompressionType.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_set_compression(GParquetWriterProperties *properties,\n+                                           GArrowCompressionType compression_type)\n+{\n+  auto arrow_compression_type = garrow_compression_type_to_raw(compression_type);\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->compression(arrow_compression_type);\n+  priv->changed = TRUE;\n+}\n+\n+/**\n+ * gparquet_writer_properties_get_compression:\n+ * @properties: A #GParquetWriterProperties.\n+ * @dotstring: The dot string path.\n+ *\n+ * Returns: The compression type of #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowCompressionType\n+gparquet_writer_properties_get_compression(GParquetWriterProperties *properties,\n+                                           gchar *dotstring)\n+{\n+  auto parquet_properties = gparquet_writer_properties_get_raw(properties);\n+  auto parquet_column_path = parquet::schema::ColumnPath::FromDotString(dotstring);\n+  auto arrow_compression = parquet_properties->compression(parquet_column_path);\n+  return garrow_compression_type_from_raw(arrow_compression);\n+}\n+\n+/**\n+ * gparquet_writer_properties_enable_dictionary:\n+ * @properties: A #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_enable_dictionary(GParquetWriterProperties *properties)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->enable_dictionary();\n+  priv->changed = TRUE;\n+}\n+\n+/**\n+ * gparquet_writer_properties_disable_dictionary:\n+ * @properties: A #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_disable_dictionary(GParquetWriterProperties *properties)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->disable_dictionary();\n+  priv->changed = TRUE;\n+}\n+\n+/**\n+ * gparquet_writer_properties_dictionary_enabled:\n+ * @properties: A #GParquetWriterProperties.\n+ *\n \n Review comment:\n   `@dot_string` is missing.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-09T21:31:56.259+0000",
                    "updated": "2020-02-09T21:31:56.259+0000",
                    "started": "2020-02-09T21:31:56.258+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "384145",
                    "issueId": "13280632"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13280632/worklog/384146",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6336: ARROW-7625: [Parquet][GLib] Add support for writer properties\nURL: https://github.com/apache/arrow/pull/6336#discussion_r376816244\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-writer.cpp\n ##########\n @@ -32,10 +32,274 @@ G_BEGIN_DECLS\n  * @short_description: Arrow file writer class\n  * @include: parquet-glib/parquet-glib.h\n  *\n+ * #GParquetWriterProperties is a class for the writer properties.\n  * #GParquetArrowFileWriter is a class for writer Apache Arrow data to\n  * file as Apache Parquet format.\n  */\n \n+typedef struct GParquetWriterPropertiesPrivate_ {\n+  std::shared_ptr<parquet::WriterProperties> properties;\n+  parquet::WriterProperties::Builder *builder;\n+  gboolean changed;\n+} GParquetWriterPropertiesPrivate;\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GParquetWriterProperties,\n+                           gparquet_writer_properties,\n+                           G_TYPE_OBJECT)\n+\n+#define GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object) \\\n+  static_cast<GParquetWriterPropertiesPrivate *>(      \\\n+    gparquet_writer_properties_get_instance_private(   \\\n+      GPARQUET_WRITER_PROPERTIES(object)))\n+\n+static void\n+gparquet_writer_properties_finalize(GObject *object)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object);\n+\n+  priv->properties = nullptr;\n+  delete priv->builder;\n+\n+  G_OBJECT_CLASS(gparquet_writer_properties_parent_class)->finalize(object);\n+}\n+\n+static void\n+gparquet_writer_properties_init(GParquetWriterProperties *object)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object);\n+  priv->builder = new parquet::WriterProperties::Builder();\n+  priv->changed = TRUE;\n+}\n+\n+static void\n+gparquet_writer_properties_class_init(GParquetWriterPropertiesClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = gparquet_writer_properties_finalize;\n+}\n+\n+/**\n+ * gparquet_writer_properties_new:\n+ *\n+ * Return: A newly created #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+GParquetWriterProperties *\n+gparquet_writer_properties_new(void)\n+{\n+  auto writer_properties = g_object_new(GPARQUET_TYPE_WRITER_PROPERTIES,\n+                                        NULL);\n+  return GPARQUET_WRITER_PROPERTIES(writer_properties);\n+}\n+\n+/**\n+ * gparquet_writer_properties_set_compression:\n+ * @properties: A #GParquetWriterProperties.\n+ * @compression_type: A #GArrowCompressionType.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_set_compression(GParquetWriterProperties *properties,\n+                                           GArrowCompressionType compression_type)\n+{\n+  auto arrow_compression_type = garrow_compression_type_to_raw(compression_type);\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->compression(arrow_compression_type);\n+  priv->changed = TRUE;\n+}\n+\n+/**\n+ * gparquet_writer_properties_get_compression:\n+ * @properties: A #GParquetWriterProperties.\n+ * @dotstring: The dot string path.\n \n Review comment:\n   `@dot_string`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-09T21:31:56.317+0000",
                    "updated": "2020-02-09T21:31:56.317+0000",
                    "started": "2020-02-09T21:31:56.317+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "384146",
                    "issueId": "13280632"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13280632/worklog/384147",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6336: ARROW-7625: [Parquet][GLib] Add support for writer properties\nURL: https://github.com/apache/arrow/pull/6336#discussion_r376816612\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-writer.cpp\n ##########\n @@ -32,10 +32,274 @@ G_BEGIN_DECLS\n  * @short_description: Arrow file writer class\n  * @include: parquet-glib/parquet-glib.h\n  *\n+ * #GParquetWriterProperties is a class for the writer properties.\n  * #GParquetArrowFileWriter is a class for writer Apache Arrow data to\n  * file as Apache Parquet format.\n  */\n \n+typedef struct GParquetWriterPropertiesPrivate_ {\n+  std::shared_ptr<parquet::WriterProperties> properties;\n+  parquet::WriterProperties::Builder *builder;\n+  gboolean changed;\n+} GParquetWriterPropertiesPrivate;\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GParquetWriterProperties,\n+                           gparquet_writer_properties,\n+                           G_TYPE_OBJECT)\n+\n+#define GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object) \\\n+  static_cast<GParquetWriterPropertiesPrivate *>(      \\\n+    gparquet_writer_properties_get_instance_private(   \\\n+      GPARQUET_WRITER_PROPERTIES(object)))\n+\n+static void\n+gparquet_writer_properties_finalize(GObject *object)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object);\n+\n+  priv->properties = nullptr;\n+  delete priv->builder;\n+\n+  G_OBJECT_CLASS(gparquet_writer_properties_parent_class)->finalize(object);\n+}\n+\n+static void\n+gparquet_writer_properties_init(GParquetWriterProperties *object)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object);\n+  priv->builder = new parquet::WriterProperties::Builder();\n+  priv->changed = TRUE;\n+}\n+\n+static void\n+gparquet_writer_properties_class_init(GParquetWriterPropertiesClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = gparquet_writer_properties_finalize;\n+}\n+\n+/**\n+ * gparquet_writer_properties_new:\n+ *\n+ * Return: A newly created #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+GParquetWriterProperties *\n+gparquet_writer_properties_new(void)\n+{\n+  auto writer_properties = g_object_new(GPARQUET_TYPE_WRITER_PROPERTIES,\n+                                        NULL);\n+  return GPARQUET_WRITER_PROPERTIES(writer_properties);\n+}\n+\n+/**\n+ * gparquet_writer_properties_set_compression:\n+ * @properties: A #GParquetWriterProperties.\n+ * @compression_type: A #GArrowCompressionType.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_set_compression(GParquetWriterProperties *properties,\n+                                           GArrowCompressionType compression_type)\n+{\n+  auto arrow_compression_type = garrow_compression_type_to_raw(compression_type);\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->compression(arrow_compression_type);\n+  priv->changed = TRUE;\n+}\n+\n+/**\n+ * gparquet_writer_properties_get_compression:\n+ * @properties: A #GParquetWriterProperties.\n+ * @dotstring: The dot string path.\n+ *\n+ * Returns: The compression type of #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowCompressionType\n+gparquet_writer_properties_get_compression(GParquetWriterProperties *properties,\n+                                           gchar *dotstring)\n+{\n+  auto parquet_properties = gparquet_writer_properties_get_raw(properties);\n+  auto parquet_column_path = parquet::schema::ColumnPath::FromDotString(dotstring);\n+  auto arrow_compression = parquet_properties->compression(parquet_column_path);\n+  return garrow_compression_type_from_raw(arrow_compression);\n+}\n+\n+/**\n+ * gparquet_writer_properties_enable_dictionary:\n+ * @properties: A #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_enable_dictionary(GParquetWriterProperties *properties)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->enable_dictionary();\n+  priv->changed = TRUE;\n+}\n+\n+/**\n+ * gparquet_writer_properties_disable_dictionary:\n+ * @properties: A #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_disable_dictionary(GParquetWriterProperties *properties)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->disable_dictionary();\n+  priv->changed = TRUE;\n+}\n+\n+/**\n+ * gparquet_writer_properties_dictionary_enabled:\n+ * @properties: A #GParquetWriterProperties.\n+ *\n+ * Returns: %TRUE on dictionary enabled, %FALSE on dictionary disabled.\n+ *\n+ * Since: 1.0.0\n+ */\n+gboolean\n+gparquet_writer_properties_dictionary_enabled(GParquetWriterProperties *properties,\n+                                              gchar *dotstring)\n+{\n+  auto parquet_properties = gparquet_writer_properties_get_raw(properties);\n+  auto parquet_column_path = parquet::schema::ColumnPath::FromDotString(dotstring);\n+  return parquet_properties->dictionary_enabled(parquet_column_path);\n+}\n+\n+/**\n+ * gparquet_writer_properties_set_dictionary_pagesize_limit:\n+ * @properties: A #GParquetWriterProperties.\n+ * @dictionary_pagesize_limit: The dictionary page size limit.\n \n Review comment:\n   We can simplify this to `@limit`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-09T21:31:56.371+0000",
                    "updated": "2020-02-09T21:31:56.371+0000",
                    "started": "2020-02-09T21:31:56.371+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "384147",
                    "issueId": "13280632"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13280632/worklog/384148",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6336: ARROW-7625: [Parquet][GLib] Add support for writer properties\nURL: https://github.com/apache/arrow/pull/6336#discussion_r376816541\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-writer.cpp\n ##########\n @@ -32,10 +32,274 @@ G_BEGIN_DECLS\n  * @short_description: Arrow file writer class\n  * @include: parquet-glib/parquet-glib.h\n  *\n+ * #GParquetWriterProperties is a class for the writer properties.\n  * #GParquetArrowFileWriter is a class for writer Apache Arrow data to\n  * file as Apache Parquet format.\n  */\n \n+typedef struct GParquetWriterPropertiesPrivate_ {\n+  std::shared_ptr<parquet::WriterProperties> properties;\n+  parquet::WriterProperties::Builder *builder;\n+  gboolean changed;\n+} GParquetWriterPropertiesPrivate;\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GParquetWriterProperties,\n+                           gparquet_writer_properties,\n+                           G_TYPE_OBJECT)\n+\n+#define GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object) \\\n+  static_cast<GParquetWriterPropertiesPrivate *>(      \\\n+    gparquet_writer_properties_get_instance_private(   \\\n+      GPARQUET_WRITER_PROPERTIES(object)))\n+\n+static void\n+gparquet_writer_properties_finalize(GObject *object)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object);\n+\n+  priv->properties = nullptr;\n+  delete priv->builder;\n+\n+  G_OBJECT_CLASS(gparquet_writer_properties_parent_class)->finalize(object);\n+}\n+\n+static void\n+gparquet_writer_properties_init(GParquetWriterProperties *object)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object);\n+  priv->builder = new parquet::WriterProperties::Builder();\n+  priv->changed = TRUE;\n+}\n+\n+static void\n+gparquet_writer_properties_class_init(GParquetWriterPropertiesClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = gparquet_writer_properties_finalize;\n+}\n+\n+/**\n+ * gparquet_writer_properties_new:\n+ *\n+ * Return: A newly created #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+GParquetWriterProperties *\n+gparquet_writer_properties_new(void)\n+{\n+  auto writer_properties = g_object_new(GPARQUET_TYPE_WRITER_PROPERTIES,\n+                                        NULL);\n+  return GPARQUET_WRITER_PROPERTIES(writer_properties);\n+}\n+\n+/**\n+ * gparquet_writer_properties_set_compression:\n+ * @properties: A #GParquetWriterProperties.\n+ * @compression_type: A #GArrowCompressionType.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_set_compression(GParquetWriterProperties *properties,\n+                                           GArrowCompressionType compression_type)\n+{\n+  auto arrow_compression_type = garrow_compression_type_to_raw(compression_type);\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->compression(arrow_compression_type);\n+  priv->changed = TRUE;\n+}\n+\n+/**\n+ * gparquet_writer_properties_get_compression:\n+ * @properties: A #GParquetWriterProperties.\n+ * @dotstring: The dot string path.\n+ *\n+ * Returns: The compression type of #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowCompressionType\n+gparquet_writer_properties_get_compression(GParquetWriterProperties *properties,\n+                                           gchar *dotstring)\n+{\n+  auto parquet_properties = gparquet_writer_properties_get_raw(properties);\n+  auto parquet_column_path = parquet::schema::ColumnPath::FromDotString(dotstring);\n+  auto arrow_compression = parquet_properties->compression(parquet_column_path);\n+  return garrow_compression_type_from_raw(arrow_compression);\n+}\n+\n+/**\n+ * gparquet_writer_properties_enable_dictionary:\n+ * @properties: A #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_enable_dictionary(GParquetWriterProperties *properties)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->enable_dictionary();\n+  priv->changed = TRUE;\n+}\n+\n+/**\n+ * gparquet_writer_properties_disable_dictionary:\n+ * @properties: A #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_disable_dictionary(GParquetWriterProperties *properties)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->disable_dictionary();\n+  priv->changed = TRUE;\n+}\n+\n+/**\n+ * gparquet_writer_properties_dictionary_enabled:\n \n Review comment:\n   Could you add `is_` for predicate?\r\n   `gparquet_writer_properties_is_dictionary_enabled`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-09T21:31:56.473+0000",
                    "updated": "2020-02-09T21:31:56.473+0000",
                    "started": "2020-02-09T21:31:56.473+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "384148",
                    "issueId": "13280632"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13280632/worklog/384149",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6336: ARROW-7625: [Parquet][GLib] Add support for writer properties\nURL: https://github.com/apache/arrow/pull/6336#discussion_r376816831\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-writer.cpp\n ##########\n @@ -32,10 +32,274 @@ G_BEGIN_DECLS\n  * @short_description: Arrow file writer class\n  * @include: parquet-glib/parquet-glib.h\n  *\n+ * #GParquetWriterProperties is a class for the writer properties.\n  * #GParquetArrowFileWriter is a class for writer Apache Arrow data to\n  * file as Apache Parquet format.\n  */\n \n+typedef struct GParquetWriterPropertiesPrivate_ {\n+  std::shared_ptr<parquet::WriterProperties> properties;\n+  parquet::WriterProperties::Builder *builder;\n+  gboolean changed;\n+} GParquetWriterPropertiesPrivate;\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GParquetWriterProperties,\n+                           gparquet_writer_properties,\n+                           G_TYPE_OBJECT)\n+\n+#define GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object) \\\n+  static_cast<GParquetWriterPropertiesPrivate *>(      \\\n+    gparquet_writer_properties_get_instance_private(   \\\n+      GPARQUET_WRITER_PROPERTIES(object)))\n+\n+static void\n+gparquet_writer_properties_finalize(GObject *object)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object);\n+\n+  priv->properties = nullptr;\n+  delete priv->builder;\n+\n+  G_OBJECT_CLASS(gparquet_writer_properties_parent_class)->finalize(object);\n+}\n+\n+static void\n+gparquet_writer_properties_init(GParquetWriterProperties *object)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object);\n+  priv->builder = new parquet::WriterProperties::Builder();\n+  priv->changed = TRUE;\n+}\n+\n+static void\n+gparquet_writer_properties_class_init(GParquetWriterPropertiesClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = gparquet_writer_properties_finalize;\n+}\n+\n+/**\n+ * gparquet_writer_properties_new:\n+ *\n+ * Return: A newly created #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+GParquetWriterProperties *\n+gparquet_writer_properties_new(void)\n+{\n+  auto writer_properties = g_object_new(GPARQUET_TYPE_WRITER_PROPERTIES,\n+                                        NULL);\n+  return GPARQUET_WRITER_PROPERTIES(writer_properties);\n+}\n+\n+/**\n+ * gparquet_writer_properties_set_compression:\n+ * @properties: A #GParquetWriterProperties.\n+ * @compression_type: A #GArrowCompressionType.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_set_compression(GParquetWriterProperties *properties,\n+                                           GArrowCompressionType compression_type)\n+{\n+  auto arrow_compression_type = garrow_compression_type_to_raw(compression_type);\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->compression(arrow_compression_type);\n+  priv->changed = TRUE;\n+}\n+\n+/**\n+ * gparquet_writer_properties_get_compression:\n+ * @properties: A #GParquetWriterProperties.\n+ * @dotstring: The dot string path.\n+ *\n+ * Returns: The compression type of #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowCompressionType\n+gparquet_writer_properties_get_compression(GParquetWriterProperties *properties,\n+                                           gchar *dotstring)\n+{\n+  auto parquet_properties = gparquet_writer_properties_get_raw(properties);\n+  auto parquet_column_path = parquet::schema::ColumnPath::FromDotString(dotstring);\n+  auto arrow_compression = parquet_properties->compression(parquet_column_path);\n+  return garrow_compression_type_from_raw(arrow_compression);\n+}\n+\n+/**\n+ * gparquet_writer_properties_enable_dictionary:\n+ * @properties: A #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_enable_dictionary(GParquetWriterProperties *properties)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->enable_dictionary();\n+  priv->changed = TRUE;\n+}\n+\n+/**\n+ * gparquet_writer_properties_disable_dictionary:\n+ * @properties: A #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_disable_dictionary(GParquetWriterProperties *properties)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->disable_dictionary();\n+  priv->changed = TRUE;\n+}\n+\n+/**\n+ * gparquet_writer_properties_dictionary_enabled:\n+ * @properties: A #GParquetWriterProperties.\n+ *\n+ * Returns: %TRUE on dictionary enabled, %FALSE on dictionary disabled.\n+ *\n+ * Since: 1.0.0\n+ */\n+gboolean\n+gparquet_writer_properties_dictionary_enabled(GParquetWriterProperties *properties,\n+                                              gchar *dotstring)\n+{\n+  auto parquet_properties = gparquet_writer_properties_get_raw(properties);\n+  auto parquet_column_path = parquet::schema::ColumnPath::FromDotString(dotstring);\n+  return parquet_properties->dictionary_enabled(parquet_column_path);\n+}\n+\n+/**\n+ * gparquet_writer_properties_set_dictionary_pagesize_limit:\n+ * @properties: A #GParquetWriterProperties.\n+ * @dictionary_pagesize_limit: The dictionary page size limit.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_set_dictionary_pagesize_limit(GParquetWriterProperties *properties,\n+                                                         gint64 dictionary_pagesize_limit)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->dictionary_pagesize_limit(dictionary_pagesize_limit);\n+  priv->changed = TRUE;\n+}\n+\n+/**\n+ * gparquet_writer_properties_get_dictionary_pagesize_limit:\n+ * @properties: A #GParquetWriterProperties.\n+ *\n+ * Returns: The dictionary page size limit.\n+ *\n+ * Since: 1.0.0\n+ */\n+gint64\n+gparquet_writer_properties_get_dictionary_pagesize_limit(GParquetWriterProperties *properties)\n+{\n+  auto parquet_properties = gparquet_writer_properties_get_raw(properties);\n+  return parquet_properties->dictionary_pagesize_limit();\n+}\n+\n+/**\n+ * gparquet_writer_properties_set_batch_size:\n+ * @properties: A #GParquetWriterProperties.\n+ * @batch_size: The batch size.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_set_batch_size(GParquetWriterProperties *properties,\n+                                          gint64 batch_size)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->write_batch_size(batch_size);\n+  priv->changed = TRUE;\n+}\n+\n+/**\n+ * gparquet_writer_properties_get_batch_size:\n+ * @properties: A #GParquetWriterProperties.\n+ *\n+ * Returns: The batch size.\n+ *\n+ * Since: 1.0.0\n+ */\n+gint64\n+gparquet_writer_properties_get_batch_size(GParquetWriterProperties *properties)\n+{\n+  auto parquet_properties = gparquet_writer_properties_get_raw(properties);\n+  return parquet_properties->write_batch_size();\n+}\n+\n+/**\n+ * gparquet_writer_properties_set_max_row_group_length:\n+ * @properties: A #GParquetWriterProperties.\n+ * @max_row_group_length: The max row group length.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_set_max_row_group_length(GParquetWriterProperties *properties,\n+                                                    gint64 max_row_group_length)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->max_row_group_length(max_row_group_length);\n+  priv->changed = TRUE;\n+}\n+\n+/**\n+ * gparquet_writer_properties_get_max_row_group_length:\n+ * @properties: A #GParquetWriterProperties.\n+ *\n+ * Returns: The max row group length.\n+ *\n+ * Since: 1.0.0\n+ */\n+gint64\n+gparquet_writer_properties_get_max_row_group_length(GParquetWriterProperties *properties)\n+{\n+  auto parquet_properties = gparquet_writer_properties_get_raw(properties);\n+  return parquet_properties->max_row_group_length();\n+}\n+\n+/**\n+ * gparquet_writer_properties_set_data_pagesize:\n+ * @properties: A #GParquetWriterProperties.\n+ * @data_pagesize: The data page size.\n \n Review comment:\n   Should we use `page_size` instead of `pagesize`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-09T21:31:56.795+0000",
                    "updated": "2020-02-09T21:31:56.795+0000",
                    "started": "2020-02-09T21:31:56.738+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "384149",
                    "issueId": "13280632"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13280632/worklog/384150",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #6336: ARROW-7625: [Parquet][GLib] Add support for writer properties\nURL: https://github.com/apache/arrow/pull/6336#discussion_r376816713\n \n \n\n ##########\n File path: c_glib/parquet-glib/arrow-file-writer.cpp\n ##########\n @@ -32,10 +32,274 @@ G_BEGIN_DECLS\n  * @short_description: Arrow file writer class\n  * @include: parquet-glib/parquet-glib.h\n  *\n+ * #GParquetWriterProperties is a class for the writer properties.\n  * #GParquetArrowFileWriter is a class for writer Apache Arrow data to\n  * file as Apache Parquet format.\n  */\n \n+typedef struct GParquetWriterPropertiesPrivate_ {\n+  std::shared_ptr<parquet::WriterProperties> properties;\n+  parquet::WriterProperties::Builder *builder;\n+  gboolean changed;\n+} GParquetWriterPropertiesPrivate;\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GParquetWriterProperties,\n+                           gparquet_writer_properties,\n+                           G_TYPE_OBJECT)\n+\n+#define GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object) \\\n+  static_cast<GParquetWriterPropertiesPrivate *>(      \\\n+    gparquet_writer_properties_get_instance_private(   \\\n+      GPARQUET_WRITER_PROPERTIES(object)))\n+\n+static void\n+gparquet_writer_properties_finalize(GObject *object)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object);\n+\n+  priv->properties = nullptr;\n+  delete priv->builder;\n+\n+  G_OBJECT_CLASS(gparquet_writer_properties_parent_class)->finalize(object);\n+}\n+\n+static void\n+gparquet_writer_properties_init(GParquetWriterProperties *object)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(object);\n+  priv->builder = new parquet::WriterProperties::Builder();\n+  priv->changed = TRUE;\n+}\n+\n+static void\n+gparquet_writer_properties_class_init(GParquetWriterPropertiesClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = gparquet_writer_properties_finalize;\n+}\n+\n+/**\n+ * gparquet_writer_properties_new:\n+ *\n+ * Return: A newly created #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+GParquetWriterProperties *\n+gparquet_writer_properties_new(void)\n+{\n+  auto writer_properties = g_object_new(GPARQUET_TYPE_WRITER_PROPERTIES,\n+                                        NULL);\n+  return GPARQUET_WRITER_PROPERTIES(writer_properties);\n+}\n+\n+/**\n+ * gparquet_writer_properties_set_compression:\n+ * @properties: A #GParquetWriterProperties.\n+ * @compression_type: A #GArrowCompressionType.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_set_compression(GParquetWriterProperties *properties,\n+                                           GArrowCompressionType compression_type)\n+{\n+  auto arrow_compression_type = garrow_compression_type_to_raw(compression_type);\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->compression(arrow_compression_type);\n+  priv->changed = TRUE;\n+}\n+\n+/**\n+ * gparquet_writer_properties_get_compression:\n+ * @properties: A #GParquetWriterProperties.\n+ * @dotstring: The dot string path.\n+ *\n+ * Returns: The compression type of #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+GArrowCompressionType\n+gparquet_writer_properties_get_compression(GParquetWriterProperties *properties,\n+                                           gchar *dotstring)\n+{\n+  auto parquet_properties = gparquet_writer_properties_get_raw(properties);\n+  auto parquet_column_path = parquet::schema::ColumnPath::FromDotString(dotstring);\n+  auto arrow_compression = parquet_properties->compression(parquet_column_path);\n+  return garrow_compression_type_from_raw(arrow_compression);\n+}\n+\n+/**\n+ * gparquet_writer_properties_enable_dictionary:\n+ * @properties: A #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_enable_dictionary(GParquetWriterProperties *properties)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->enable_dictionary();\n+  priv->changed = TRUE;\n+}\n+\n+/**\n+ * gparquet_writer_properties_disable_dictionary:\n+ * @properties: A #GParquetWriterProperties.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_disable_dictionary(GParquetWriterProperties *properties)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->disable_dictionary();\n+  priv->changed = TRUE;\n+}\n+\n+/**\n+ * gparquet_writer_properties_dictionary_enabled:\n+ * @properties: A #GParquetWriterProperties.\n+ *\n+ * Returns: %TRUE on dictionary enabled, %FALSE on dictionary disabled.\n+ *\n+ * Since: 1.0.0\n+ */\n+gboolean\n+gparquet_writer_properties_dictionary_enabled(GParquetWriterProperties *properties,\n+                                              gchar *dotstring)\n+{\n+  auto parquet_properties = gparquet_writer_properties_get_raw(properties);\n+  auto parquet_column_path = parquet::schema::ColumnPath::FromDotString(dotstring);\n+  return parquet_properties->dictionary_enabled(parquet_column_path);\n+}\n+\n+/**\n+ * gparquet_writer_properties_set_dictionary_pagesize_limit:\n+ * @properties: A #GParquetWriterProperties.\n+ * @dictionary_pagesize_limit: The dictionary page size limit.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_set_dictionary_pagesize_limit(GParquetWriterProperties *properties,\n+                                                         gint64 dictionary_pagesize_limit)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->dictionary_pagesize_limit(dictionary_pagesize_limit);\n+  priv->changed = TRUE;\n+}\n+\n+/**\n+ * gparquet_writer_properties_get_dictionary_pagesize_limit:\n+ * @properties: A #GParquetWriterProperties.\n+ *\n+ * Returns: The dictionary page size limit.\n+ *\n+ * Since: 1.0.0\n+ */\n+gint64\n+gparquet_writer_properties_get_dictionary_pagesize_limit(GParquetWriterProperties *properties)\n+{\n+  auto parquet_properties = gparquet_writer_properties_get_raw(properties);\n+  return parquet_properties->dictionary_pagesize_limit();\n+}\n+\n+/**\n+ * gparquet_writer_properties_set_batch_size:\n+ * @properties: A #GParquetWriterProperties.\n+ * @batch_size: The batch size.\n+ *\n+ * Since: 1.0.0\n+ */\n+void\n+gparquet_writer_properties_set_batch_size(GParquetWriterProperties *properties,\n+                                          gint64 batch_size)\n+{\n+  auto priv = GPARQUET_WRITER_PROPERTIES_GET_PRIVATE(properties);\n+  priv->builder->write_batch_size(batch_size);\n+  priv->changed = TRUE;\n+}\n+\n+/**\n+ * gparquet_writer_properties_get_batch_size:\n+ * @properties: A #GParquetWriterProperties.\n+ *\n+ * Returns: The batch size.\n+ *\n+ * Since: 1.0.0\n+ */\n+gint64\n+gparquet_writer_properties_get_batch_size(GParquetWriterProperties *properties)\n+{\n+  auto parquet_properties = gparquet_writer_properties_get_raw(properties);\n+  return parquet_properties->write_batch_size();\n+}\n+\n+/**\n+ * gparquet_writer_properties_set_max_row_group_length:\n+ * @properties: A #GParquetWriterProperties.\n+ * @max_row_group_length: The max row group length.\n \n Review comment:\n   We can simplify this to `@length`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-09T21:31:56.799+0000",
                    "updated": "2020-02-09T21:31:56.799+0000",
                    "started": "2020-02-09T21:31:56.799+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "384150",
                    "issueId": "13280632"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 15600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@53a93134[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d5d5305[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@23bd6c4a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@346fc643[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3806efb3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3f500b5e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@77c7ffc2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3d5062a7[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@322469c9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@d119e28[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@45e049a7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7b1b4ee6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15600,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Feb 27 04:35:24 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-02-27T04:35:24.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7625/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-01-21T00:32:11.000+0000",
        "updated": "2020-02-27T04:35:24.000+0000",
        "timeoriginalestimate": null,
        "description": "It seems that the ArrowFileWriter being used by parquet-glib just uses the default writer properties ([https://github.com/apache/arrow/blob/master/c_glib/parquet-glib/arrow-file-writer.cpp#L184),] and does not offer the user the ability to override this. As a consumer of the GLib API in Ruby (red-parquet), I therefore have no way of compressing Parquet columns. Of course, I can compress the entire file by doing something like {{t.save('...', format: 'parquet', compression: 'GZIP')}}, but this is not compatible with most tools and isn't the correct way of compressing a Parquet file.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Parquet GLib and Red Parquet (Ruby) do not allow specifying compression type",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": "red-arrow 0.15.1\r\nred-parquet 0.15.1\r\nlibarrow 0.15.1\r\nlibparquet 0.15.1",
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13280632/comment/17046141",
                    "id": "17046141",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=shiro615",
                        "name": "shiro615",
                        "key": "shiro615",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34043",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34043",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34043",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34043"
                        },
                        "displayName": "Yosuke Shiro",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 6336\n[https://github.com/apache/arrow/pull/6336]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=shiro615",
                        "name": "shiro615",
                        "key": "shiro615",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34043",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34043",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34043",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34043"
                        },
                        "displayName": "Yosuke Shiro",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-02-27T04:35:24.989+0000",
                    "updated": "2020-02-27T04:35:24.989+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0apc8:",
        "customfield_12314139": null
    }
}