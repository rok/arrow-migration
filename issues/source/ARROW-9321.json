{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13314911",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314911",
    "key": "ARROW-9321",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "dataset",
            "dataset-dask-integration",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "aggregateprogress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9321/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 23,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314911/worklog/456740",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz opened a new pull request #7692:\nURL: https://github.com/apache/arrow/pull/7692\n\n\n   Populate ParquetFileFragment statistics whenever a reader is opened anyway. Also provides an explicit method for forcing load of statistics. (I exposed this as a public method, but maybe we'd prefer to hide it inside the `statistics` property the way we do physical schema?)\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-09T17:58:00.136+0000",
                    "updated": "2020-07-09T17:58:00.136+0000",
                    "started": "2020-07-09T17:58:00.136+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456740",
                    "issueId": "13314911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314911/worklog/456741",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7692:\nURL: https://github.com/apache/arrow/pull/7692#discussion_r452394725\n\n\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -909,13 +909,24 @@ cdef class ParquetFileFragment(FileFragment):\n \n     def __reduce__(self):\n         buffer = self.buffer\n+        if self.row_groups is not None:\n\nReview comment:\n       When I started working on the python binding, the compiler complained that RowGroupInfo is not pickleable. I'm not sure why this didn't fail before; we've never had RowGroupInfo.__reduce__ and ParquetFileFormat.make_fragment only accepts a list of integers for the row_groups argument\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-09T18:00:19.228+0000",
                    "updated": "2020-07-09T18:00:19.228+0000",
                    "started": "2020-07-09T18:00:19.228+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456741",
                    "issueId": "13314911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314911/worklog/456742",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7692:\nURL: https://github.com/apache/arrow/pull/7692#issuecomment-656271917\n\n\n   https://issues.apache.org/jira/browse/ARROW-9321\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-09T18:04:47.207+0000",
                    "updated": "2020-07-09T18:04:47.207+0000",
                    "started": "2020-07-09T18:04:47.207+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456742",
                    "issueId": "13314911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314911/worklog/456749",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #7692:\nURL: https://github.com/apache/arrow/pull/7692#discussion_r452408096\n\n\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -909,13 +909,24 @@ cdef class ParquetFileFragment(FileFragment):\n \n     def __reduce__(self):\n         buffer = self.buffer\n+        if self.row_groups is not None:\n\nReview comment:\n       Yeah, I actually realized we were not yet pickling the row group id's when discussing this in the meeting we had, and was planning to open a JIRA / do a quick PR, but you already fixed it ;)\r\n   \r\n   (it didn't fail because we simply didn't include any row group information in the serialization)\r\n   \r\n   Only preserving the rowgroup id's (as you do here) should be sufficient for now.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-09T18:26:50.187+0000",
                    "updated": "2020-07-09T18:26:50.187+0000",
                    "started": "2020-07-09T18:26:50.187+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456749",
                    "issueId": "13314911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314911/worklog/456814",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #7692:\nURL: https://github.com/apache/arrow/pull/7692#issuecomment-656331228\n\n\n   @jorisvandenbossche \r\n   > I exposed this as a public method, but maybe we'd prefer to hide it inside the statistics property the way we do physical schema?\r\n   \r\n   I mean it could be called inside the `statistics` property accessor so that the returned statistics are never `None`, similar to the way `physical_schema` will read from disk if the schema is not cached\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-09T20:19:04.116+0000",
                    "updated": "2020-07-09T20:19:04.116+0000",
                    "started": "2020-07-09T20:19:04.116+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456814",
                    "issueId": "13314911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314911/worklog/456819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7692:\nURL: https://github.com/apache/arrow/pull/7692#discussion_r452472840\n\n\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -909,13 +909,24 @@ cdef class ParquetFileFragment(FileFragment):\n \n     def __reduce__(self):\n         buffer = self.buffer\n+        if self.row_groups is not None:\n\nReview comment:\n       Note that (due to stats containing scalars) pickling of RowGroupInfo depends on pickling of Scalars. Added ARROW-9394\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-09T20:31:51.439+0000",
                    "updated": "2020-07-09T20:31:51.439+0000",
                    "started": "2020-07-09T20:31:51.439+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456819",
                    "issueId": "13314911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314911/worklog/456821",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #7692:\nURL: https://github.com/apache/arrow/pull/7692#issuecomment-656338363\n\n\n   > I mean it could be called inside the statistics property accessor so that the returned statistics are never None\r\n   \r\n   Ah, I misunderstood. That might also be nice (avoiding the extra method). Now, the problem with that approach, AFAIU, is that right now `fragment.row_groups` is `None` if no statistics are loaded yet. \r\n   So it would need to happen also when accessing the `fragment.row_groups` property. But since that sometimes can actually already return a list of RowGroupInfo objects with only the id's, that might get a bit complicated (as then several properties would need first ensure metadata are loaded).\r\n   \r\n   So although the automatic \"ensure_metadata\" on access of the properties sounds nice, in the end an explicit method to call yourself might be cleaner, I think (also for downstream users like dask)\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-09T20:35:47.945+0000",
                    "updated": "2020-07-09T20:35:47.945+0000",
                    "started": "2020-07-09T20:35:47.945+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456821",
                    "issueId": "13314911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314911/worklog/456823",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche edited a comment on pull request #7692:\nURL: https://github.com/apache/arrow/pull/7692#issuecomment-656338363\n\n\n   > I mean it could be called inside the statistics property accessor so that the returned statistics are never None\r\n   \r\n   Ah, I misunderstood. That might also be nice (avoiding the extra method). Now, the problem with that approach, AFAIU, is that right now `fragment.row_groups` is `None` if no statistics are loaded yet. \r\n   So it would need to happen also when accessing the `fragment.row_groups` property. But since that sometimes can actually already return a list of RowGroupInfo objects with only the id's, that might get a bit complicated (as then several properties would need first ensure metadata are loaded, both the `row_groups` if not yet existing, and then `RowGroupInfo.statistics/num_rows` for RowGroupInfo's that only had the `id` set).\r\n   \r\n   So although the automatic \"ensure_metadata\" on access of the properties sounds nice, in the end an explicit method to call yourself might be cleaner, I think (also for downstream users like dask)\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-09T20:37:25.739+0000",
                    "updated": "2020-07-09T20:37:25.739+0000",
                    "started": "2020-07-09T20:37:25.739+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456823",
                    "issueId": "13314911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314911/worklog/456824",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #7692:\nURL: https://github.com/apache/arrow/pull/7692#discussion_r452477463\n\n\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -909,13 +909,24 @@ cdef class ParquetFileFragment(FileFragment):\n \n     def __reduce__(self):\n         buffer = self.buffer\n+        if self.row_groups is not None:\n\nReview comment:\n       Indeed. Based on my discussions with @rjzamora earlier today, the row group id's are the most critical to serialize (which this PR thus already fixes), and should cover the short-term needs for dask's use cases.\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-09T20:41:22.333+0000",
                    "updated": "2020-07-09T20:41:22.333+0000",
                    "started": "2020-07-09T20:41:22.333+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456824",
                    "issueId": "13314911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314911/worklog/456831",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7692:\nURL: https://github.com/apache/arrow/pull/7692#discussion_r452483172\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -335,91 +335,39 @@ static inline bool RowGroupInfosAreComplete(const std::vector<RowGroupInfo>& inf\n                      [](const RowGroupInfo& i) { return i.HasStatistics(); });\n }\n \n-static inline std::vector<RowGroupInfo> FilterRowGroups(\n-    std::vector<RowGroupInfo> row_groups, const Expression& predicate) {\n-  auto filter = [&predicate](const RowGroupInfo& info) {\n-    return !info.Satisfy(predicate);\n-  };\n-  auto end = std::remove_if(row_groups.begin(), row_groups.end(), filter);\n-  row_groups.erase(end, row_groups.end());\n-  return row_groups;\n-}\n-\n-static inline Result<std::vector<RowGroupInfo>> AugmentRowGroups(\n-    std::vector<RowGroupInfo> row_groups, parquet::arrow::FileReader* reader) {\n-  auto metadata = reader->parquet_reader()->metadata();\n-  auto manifest = reader->manifest();\n-  auto num_row_groups = metadata->num_row_groups();\n-\n-  if (row_groups.empty()) {\n-    row_groups = RowGroupInfo::FromCount(num_row_groups);\n-  }\n-\n-  // Augment a RowGroup with statistics if missing.\n-  auto augment = [&](RowGroupInfo& info) {\n-    if (!info.HasStatistics() && info.id() < num_row_groups) {\n-      auto row_group = metadata->RowGroup(info.id());\n-      info.set_num_rows(row_group->num_rows());\n-      info.set_total_byte_size(row_group->total_byte_size());\n-      info.set_statistics(RowGroupStatisticsAsStructScalar(*row_group, manifest));\n-    }\n-  };\n-  std::for_each(row_groups.begin(), row_groups.end(), augment);\n-\n-  return row_groups;\n-}\n-\n Result<ScanTaskIterator> ParquetFileFormat::ScanFile(std::shared_ptr<ScanOptions> options,\n                                                      std::shared_ptr<ScanContext> context,\n                                                      FileFragment* fragment) const {\n-  const auto& source = fragment->source();\n-  auto row_groups = checked_cast<const ParquetFileFragment*>(fragment)->row_groups();\n-\n-  bool row_groups_are_complete = RowGroupInfosAreComplete(row_groups);\n-  // The following block is required to avoid any IO if all RowGroups are\n-  // excluded due to prior statistics knowledge.\n-  if (row_groups_are_complete) {\n-    // physical_schema should be cached at this point\n-    ARROW_ASSIGN_OR_RAISE(auto physical_schema, fragment->ReadPhysicalSchema());\n-    RETURN_NOT_OK(options->filter->Validate(*physical_schema));\n-\n-    // Apply a pre-filtering if the user requested an explicit sub-set of\n-    // row-groups. In the case where a RowGroup doesn't have statistics\n-    // metdata, it will not be excluded.\n-    row_groups = FilterRowGroups(std::move(row_groups), *options->filter);\n+  auto& parquet_fragment = checked_cast<ParquetFileFragment&>(*fragment);\n\nReview comment:\n       Using a mutable pointer would be more style-conforming\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -508,36 +456,93 @@ ParquetFileFragment::ParquetFileFragment(FileSource source,\n                    std::move(physical_schema)),\n       row_groups_(std::move(row_groups)),\n       parquet_format_(checked_cast<ParquetFileFormat&>(*format_)),\n-      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_)) {}\n+      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_) &&\n+                             physical_schema_ != nullptr) {}\n \n-Result<FragmentVector> ParquetFileFragment::SplitByRowGroup(\n-    const std::shared_ptr<Expression>& predicate) {\n-  auto simplified_predicate = predicate->Assume(partition_expression());\n-  if (!simplified_predicate->IsSatisfiable()) {\n-    return FragmentVector{};\n+Status ParquetFileFragment::EnsureCompleteMetadata(parquet::arrow::FileReader* reader) {\n+  if (HasCompleteMetadata()) {\n+    return Status::OK();\n   }\n \n-  std::vector<RowGroupInfo> row_groups;\n-  if (HasCompleteMetadata()) {\n-    row_groups = FilterRowGroups(row_groups_, *simplified_predicate);\n-  } else {\n+  if (reader == nullptr) {\n     ARROW_ASSIGN_OR_RAISE(auto reader, parquet_format_.GetReader(source_));\n-    ARROW_ASSIGN_OR_RAISE(row_groups, AugmentRowGroups(row_groups_, reader.get()));\n-    row_groups = FilterRowGroups(std::move(row_groups), *simplified_predicate);\n+    return EnsureCompleteMetadata(reader.get());\n+  }\n+\n+  std::shared_ptr<Schema> schema;\n+  RETURN_NOT_OK(reader->GetSchema(&schema));\n+  if (physical_schema_ && !physical_schema_->Equals(*schema)) {\n+    return Status::Invalid(\"Fragment initialized with physical schema \",\n+                           *physical_schema_, \" but \", source_.path(), \" has schema \",\n+                           *schema);\n+  }\n+  physical_schema_ = std::move(schema);\n+\n+  auto metadata = reader->parquet_reader()->metadata();\n+  auto num_row_groups = metadata->num_row_groups();\n+\n+  if (row_groups_.empty()) {\n+    row_groups_ = RowGroupInfo::FromCount(num_row_groups);\n+  }\n+\n+  for (RowGroupInfo& info : row_groups_) {\n\nReview comment:\n       does this reference need to be mutable?\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -508,36 +456,93 @@ ParquetFileFragment::ParquetFileFragment(FileSource source,\n                    std::move(physical_schema)),\n       row_groups_(std::move(row_groups)),\n       parquet_format_(checked_cast<ParquetFileFormat&>(*format_)),\n-      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_)) {}\n+      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_) &&\n+                             physical_schema_ != nullptr) {}\n \n-Result<FragmentVector> ParquetFileFragment::SplitByRowGroup(\n-    const std::shared_ptr<Expression>& predicate) {\n-  auto simplified_predicate = predicate->Assume(partition_expression());\n-  if (!simplified_predicate->IsSatisfiable()) {\n-    return FragmentVector{};\n+Status ParquetFileFragment::EnsureCompleteMetadata(parquet::arrow::FileReader* reader) {\n+  if (HasCompleteMetadata()) {\n+    return Status::OK();\n   }\n \n-  std::vector<RowGroupInfo> row_groups;\n-  if (HasCompleteMetadata()) {\n-    row_groups = FilterRowGroups(row_groups_, *simplified_predicate);\n-  } else {\n+  if (reader == nullptr) {\n     ARROW_ASSIGN_OR_RAISE(auto reader, parquet_format_.GetReader(source_));\n-    ARROW_ASSIGN_OR_RAISE(row_groups, AugmentRowGroups(row_groups_, reader.get()));\n-    row_groups = FilterRowGroups(std::move(row_groups), *simplified_predicate);\n+    return EnsureCompleteMetadata(reader.get());\n+  }\n+\n+  std::shared_ptr<Schema> schema;\n+  RETURN_NOT_OK(reader->GetSchema(&schema));\n+  if (physical_schema_ && !physical_schema_->Equals(*schema)) {\n+    return Status::Invalid(\"Fragment initialized with physical schema \",\n+                           *physical_schema_, \" but \", source_.path(), \" has schema \",\n+                           *schema);\n+  }\n+  physical_schema_ = std::move(schema);\n+\n+  auto metadata = reader->parquet_reader()->metadata();\n+  auto num_row_groups = metadata->num_row_groups();\n+\n+  if (row_groups_.empty()) {\n+    row_groups_ = RowGroupInfo::FromCount(num_row_groups);\n+  }\n+\n+  for (RowGroupInfo& info : row_groups_) {\n+    // Ensure RowGroups are indexing valid RowGroups before augmenting.\n+    if (info.id() >= num_row_groups) {\n+      return Status::IndexError(\"Trying to scan row group \", info.id(), \" but \",\n+                                source_.path(), \" only has \", num_row_groups,\n+                                \" row groups\");\n+    }\n+  }\n+\n+  for (RowGroupInfo& info : row_groups_) {\n+    // Augment a RowGroup with statistics if missing.\n+    if (info.HasStatistics()) continue;\n\nReview comment:\n       add braces\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -508,36 +456,93 @@ ParquetFileFragment::ParquetFileFragment(FileSource source,\n                    std::move(physical_schema)),\n       row_groups_(std::move(row_groups)),\n       parquet_format_(checked_cast<ParquetFileFormat&>(*format_)),\n-      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_)) {}\n+      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_) &&\n+                             physical_schema_ != nullptr) {}\n \n-Result<FragmentVector> ParquetFileFragment::SplitByRowGroup(\n-    const std::shared_ptr<Expression>& predicate) {\n-  auto simplified_predicate = predicate->Assume(partition_expression());\n-  if (!simplified_predicate->IsSatisfiable()) {\n-    return FragmentVector{};\n+Status ParquetFileFragment::EnsureCompleteMetadata(parquet::arrow::FileReader* reader) {\n+  if (HasCompleteMetadata()) {\n+    return Status::OK();\n   }\n \n-  std::vector<RowGroupInfo> row_groups;\n-  if (HasCompleteMetadata()) {\n-    row_groups = FilterRowGroups(row_groups_, *simplified_predicate);\n-  } else {\n+  if (reader == nullptr) {\n     ARROW_ASSIGN_OR_RAISE(auto reader, parquet_format_.GetReader(source_));\n-    ARROW_ASSIGN_OR_RAISE(row_groups, AugmentRowGroups(row_groups_, reader.get()));\n-    row_groups = FilterRowGroups(std::move(row_groups), *simplified_predicate);\n+    return EnsureCompleteMetadata(reader.get());\n+  }\n+\n+  std::shared_ptr<Schema> schema;\n+  RETURN_NOT_OK(reader->GetSchema(&schema));\n+  if (physical_schema_ && !physical_schema_->Equals(*schema)) {\n+    return Status::Invalid(\"Fragment initialized with physical schema \",\n+                           *physical_schema_, \" but \", source_.path(), \" has schema \",\n+                           *schema);\n+  }\n+  physical_schema_ = std::move(schema);\n+\n+  auto metadata = reader->parquet_reader()->metadata();\n+  auto num_row_groups = metadata->num_row_groups();\n+\n+  if (row_groups_.empty()) {\n+    row_groups_ = RowGroupInfo::FromCount(num_row_groups);\n+  }\n+\n+  for (RowGroupInfo& info : row_groups_) {\n+    // Ensure RowGroups are indexing valid RowGroups before augmenting.\n+    if (info.id() >= num_row_groups) {\n+      return Status::IndexError(\"Trying to scan row group \", info.id(), \" but \",\n+                                source_.path(), \" only has \", num_row_groups,\n+                                \" row groups\");\n+    }\n+  }\n+\n+  for (RowGroupInfo& info : row_groups_) {\n\nReview comment:\n       mutable reference\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -508,36 +456,93 @@ ParquetFileFragment::ParquetFileFragment(FileSource source,\n                    std::move(physical_schema)),\n       row_groups_(std::move(row_groups)),\n       parquet_format_(checked_cast<ParquetFileFormat&>(*format_)),\n-      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_)) {}\n+      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_) &&\n+                             physical_schema_ != nullptr) {}\n \n-Result<FragmentVector> ParquetFileFragment::SplitByRowGroup(\n-    const std::shared_ptr<Expression>& predicate) {\n-  auto simplified_predicate = predicate->Assume(partition_expression());\n-  if (!simplified_predicate->IsSatisfiable()) {\n-    return FragmentVector{};\n+Status ParquetFileFragment::EnsureCompleteMetadata(parquet::arrow::FileReader* reader) {\n+  if (HasCompleteMetadata()) {\n+    return Status::OK();\n   }\n \n-  std::vector<RowGroupInfo> row_groups;\n-  if (HasCompleteMetadata()) {\n-    row_groups = FilterRowGroups(row_groups_, *simplified_predicate);\n-  } else {\n+  if (reader == nullptr) {\n     ARROW_ASSIGN_OR_RAISE(auto reader, parquet_format_.GetReader(source_));\n-    ARROW_ASSIGN_OR_RAISE(row_groups, AugmentRowGroups(row_groups_, reader.get()));\n-    row_groups = FilterRowGroups(std::move(row_groups), *simplified_predicate);\n+    return EnsureCompleteMetadata(reader.get());\n+  }\n+\n+  std::shared_ptr<Schema> schema;\n+  RETURN_NOT_OK(reader->GetSchema(&schema));\n+  if (physical_schema_ && !physical_schema_->Equals(*schema)) {\n+    return Status::Invalid(\"Fragment initialized with physical schema \",\n+                           *physical_schema_, \" but \", source_.path(), \" has schema \",\n+                           *schema);\n+  }\n+  physical_schema_ = std::move(schema);\n+\n+  auto metadata = reader->parquet_reader()->metadata();\n+  auto num_row_groups = metadata->num_row_groups();\n+\n+  if (row_groups_.empty()) {\n+    row_groups_ = RowGroupInfo::FromCount(num_row_groups);\n+  }\n+\n+  for (RowGroupInfo& info : row_groups_) {\n+    // Ensure RowGroups are indexing valid RowGroups before augmenting.\n+    if (info.id() >= num_row_groups) {\n+      return Status::IndexError(\"Trying to scan row group \", info.id(), \" but \",\n+                                source_.path(), \" only has \", num_row_groups,\n+                                \" row groups\");\n+    }\n+  }\n+\n+  for (RowGroupInfo& info : row_groups_) {\n+    // Augment a RowGroup with statistics if missing.\n+    if (info.HasStatistics()) continue;\n+\n+    auto row_group = metadata->RowGroup(info.id());\n+    auto statistics = RowGroupStatisticsAsStructScalar(*row_group, reader->manifest());\n\nReview comment:\n       Write out the types here?\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -508,36 +456,93 @@ ParquetFileFragment::ParquetFileFragment(FileSource source,\n                    std::move(physical_schema)),\n       row_groups_(std::move(row_groups)),\n       parquet_format_(checked_cast<ParquetFileFormat&>(*format_)),\n-      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_)) {}\n+      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_) &&\n+                             physical_schema_ != nullptr) {}\n \n-Result<FragmentVector> ParquetFileFragment::SplitByRowGroup(\n-    const std::shared_ptr<Expression>& predicate) {\n-  auto simplified_predicate = predicate->Assume(partition_expression());\n-  if (!simplified_predicate->IsSatisfiable()) {\n-    return FragmentVector{};\n+Status ParquetFileFragment::EnsureCompleteMetadata(parquet::arrow::FileReader* reader) {\n+  if (HasCompleteMetadata()) {\n+    return Status::OK();\n   }\n \n-  std::vector<RowGroupInfo> row_groups;\n-  if (HasCompleteMetadata()) {\n-    row_groups = FilterRowGroups(row_groups_, *simplified_predicate);\n-  } else {\n+  if (reader == nullptr) {\n     ARROW_ASSIGN_OR_RAISE(auto reader, parquet_format_.GetReader(source_));\n-    ARROW_ASSIGN_OR_RAISE(row_groups, AugmentRowGroups(row_groups_, reader.get()));\n-    row_groups = FilterRowGroups(std::move(row_groups), *simplified_predicate);\n+    return EnsureCompleteMetadata(reader.get());\n+  }\n+\n+  std::shared_ptr<Schema> schema;\n+  RETURN_NOT_OK(reader->GetSchema(&schema));\n+  if (physical_schema_ && !physical_schema_->Equals(*schema)) {\n+    return Status::Invalid(\"Fragment initialized with physical schema \",\n+                           *physical_schema_, \" but \", source_.path(), \" has schema \",\n+                           *schema);\n+  }\n+  physical_schema_ = std::move(schema);\n+\n+  auto metadata = reader->parquet_reader()->metadata();\n+  auto num_row_groups = metadata->num_row_groups();\n\nReview comment:\n       write out these types?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-09T20:58:01.082+0000",
                    "updated": "2020-07-09T20:58:01.082+0000",
                    "started": "2020-07-09T20:58:01.081+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456831",
                    "issueId": "13314911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314911/worklog/456834",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7692:\nURL: https://github.com/apache/arrow/pull/7692#discussion_r452486734\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -335,91 +335,39 @@ static inline bool RowGroupInfosAreComplete(const std::vector<RowGroupInfo>& inf\n                      [](const RowGroupInfo& i) { return i.HasStatistics(); });\n }\n \n-static inline std::vector<RowGroupInfo> FilterRowGroups(\n-    std::vector<RowGroupInfo> row_groups, const Expression& predicate) {\n-  auto filter = [&predicate](const RowGroupInfo& info) {\n-    return !info.Satisfy(predicate);\n-  };\n-  auto end = std::remove_if(row_groups.begin(), row_groups.end(), filter);\n-  row_groups.erase(end, row_groups.end());\n-  return row_groups;\n-}\n-\n-static inline Result<std::vector<RowGroupInfo>> AugmentRowGroups(\n-    std::vector<RowGroupInfo> row_groups, parquet::arrow::FileReader* reader) {\n-  auto metadata = reader->parquet_reader()->metadata();\n-  auto manifest = reader->manifest();\n-  auto num_row_groups = metadata->num_row_groups();\n-\n-  if (row_groups.empty()) {\n-    row_groups = RowGroupInfo::FromCount(num_row_groups);\n-  }\n-\n-  // Augment a RowGroup with statistics if missing.\n-  auto augment = [&](RowGroupInfo& info) {\n-    if (!info.HasStatistics() && info.id() < num_row_groups) {\n-      auto row_group = metadata->RowGroup(info.id());\n-      info.set_num_rows(row_group->num_rows());\n-      info.set_total_byte_size(row_group->total_byte_size());\n-      info.set_statistics(RowGroupStatisticsAsStructScalar(*row_group, manifest));\n-    }\n-  };\n-  std::for_each(row_groups.begin(), row_groups.end(), augment);\n-\n-  return row_groups;\n-}\n-\n Result<ScanTaskIterator> ParquetFileFormat::ScanFile(std::shared_ptr<ScanOptions> options,\n                                                      std::shared_ptr<ScanContext> context,\n                                                      FileFragment* fragment) const {\n-  const auto& source = fragment->source();\n-  auto row_groups = checked_cast<const ParquetFileFragment*>(fragment)->row_groups();\n-\n-  bool row_groups_are_complete = RowGroupInfosAreComplete(row_groups);\n-  // The following block is required to avoid any IO if all RowGroups are\n-  // excluded due to prior statistics knowledge.\n-  if (row_groups_are_complete) {\n-    // physical_schema should be cached at this point\n-    ARROW_ASSIGN_OR_RAISE(auto physical_schema, fragment->ReadPhysicalSchema());\n-    RETURN_NOT_OK(options->filter->Validate(*physical_schema));\n-\n-    // Apply a pre-filtering if the user requested an explicit sub-set of\n-    // row-groups. In the case where a RowGroup doesn't have statistics\n-    // metdata, it will not be excluded.\n-    row_groups = FilterRowGroups(std::move(row_groups), *options->filter);\n+  auto& parquet_fragment = checked_cast<ParquetFileFragment&>(*fragment);\n\nReview comment:\n       okay\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-09T20:59:31.193+0000",
                    "updated": "2020-07-09T20:59:31.193+0000",
                    "started": "2020-07-09T20:59:31.193+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456834",
                    "issueId": "13314911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314911/worklog/456835",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7692:\nURL: https://github.com/apache/arrow/pull/7692#discussion_r452486948\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -508,36 +456,93 @@ ParquetFileFragment::ParquetFileFragment(FileSource source,\n                    std::move(physical_schema)),\n       row_groups_(std::move(row_groups)),\n       parquet_format_(checked_cast<ParquetFileFormat&>(*format_)),\n-      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_)) {}\n+      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_) &&\n+                             physical_schema_ != nullptr) {}\n \n-Result<FragmentVector> ParquetFileFragment::SplitByRowGroup(\n-    const std::shared_ptr<Expression>& predicate) {\n-  auto simplified_predicate = predicate->Assume(partition_expression());\n-  if (!simplified_predicate->IsSatisfiable()) {\n-    return FragmentVector{};\n+Status ParquetFileFragment::EnsureCompleteMetadata(parquet::arrow::FileReader* reader) {\n+  if (HasCompleteMetadata()) {\n+    return Status::OK();\n   }\n \n-  std::vector<RowGroupInfo> row_groups;\n-  if (HasCompleteMetadata()) {\n-    row_groups = FilterRowGroups(row_groups_, *simplified_predicate);\n-  } else {\n+  if (reader == nullptr) {\n     ARROW_ASSIGN_OR_RAISE(auto reader, parquet_format_.GetReader(source_));\n-    ARROW_ASSIGN_OR_RAISE(row_groups, AugmentRowGroups(row_groups_, reader.get()));\n-    row_groups = FilterRowGroups(std::move(row_groups), *simplified_predicate);\n+    return EnsureCompleteMetadata(reader.get());\n+  }\n+\n+  std::shared_ptr<Schema> schema;\n+  RETURN_NOT_OK(reader->GetSchema(&schema));\n+  if (physical_schema_ && !physical_schema_->Equals(*schema)) {\n+    return Status::Invalid(\"Fragment initialized with physical schema \",\n+                           *physical_schema_, \" but \", source_.path(), \" has schema \",\n+                           *schema);\n+  }\n+  physical_schema_ = std::move(schema);\n+\n+  auto metadata = reader->parquet_reader()->metadata();\n+  auto num_row_groups = metadata->num_row_groups();\n+\n+  if (row_groups_.empty()) {\n+    row_groups_ = RowGroupInfo::FromCount(num_row_groups);\n+  }\n+\n+  for (RowGroupInfo& info : row_groups_) {\n\nReview comment:\n       yes; in this loop row group infos which have only partial statistics are hydrated from the reader\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-09T20:59:55.165+0000",
                    "updated": "2020-07-09T20:59:55.165+0000",
                    "started": "2020-07-09T20:59:55.165+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456835",
                    "issueId": "13314911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314911/worklog/456836",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7692:\nURL: https://github.com/apache/arrow/pull/7692#discussion_r452486948\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -508,36 +456,93 @@ ParquetFileFragment::ParquetFileFragment(FileSource source,\n                    std::move(physical_schema)),\n       row_groups_(std::move(row_groups)),\n       parquet_format_(checked_cast<ParquetFileFormat&>(*format_)),\n-      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_)) {}\n+      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_) &&\n+                             physical_schema_ != nullptr) {}\n \n-Result<FragmentVector> ParquetFileFragment::SplitByRowGroup(\n-    const std::shared_ptr<Expression>& predicate) {\n-  auto simplified_predicate = predicate->Assume(partition_expression());\n-  if (!simplified_predicate->IsSatisfiable()) {\n-    return FragmentVector{};\n+Status ParquetFileFragment::EnsureCompleteMetadata(parquet::arrow::FileReader* reader) {\n+  if (HasCompleteMetadata()) {\n+    return Status::OK();\n   }\n \n-  std::vector<RowGroupInfo> row_groups;\n-  if (HasCompleteMetadata()) {\n-    row_groups = FilterRowGroups(row_groups_, *simplified_predicate);\n-  } else {\n+  if (reader == nullptr) {\n     ARROW_ASSIGN_OR_RAISE(auto reader, parquet_format_.GetReader(source_));\n-    ARROW_ASSIGN_OR_RAISE(row_groups, AugmentRowGroups(row_groups_, reader.get()));\n-    row_groups = FilterRowGroups(std::move(row_groups), *simplified_predicate);\n+    return EnsureCompleteMetadata(reader.get());\n+  }\n+\n+  std::shared_ptr<Schema> schema;\n+  RETURN_NOT_OK(reader->GetSchema(&schema));\n+  if (physical_schema_ && !physical_schema_->Equals(*schema)) {\n+    return Status::Invalid(\"Fragment initialized with physical schema \",\n+                           *physical_schema_, \" but \", source_.path(), \" has schema \",\n+                           *schema);\n+  }\n+  physical_schema_ = std::move(schema);\n+\n+  auto metadata = reader->parquet_reader()->metadata();\n+  auto num_row_groups = metadata->num_row_groups();\n+\n+  if (row_groups_.empty()) {\n+    row_groups_ = RowGroupInfo::FromCount(num_row_groups);\n+  }\n+\n+  for (RowGroupInfo& info : row_groups_) {\n\nReview comment:\n       This one doesn't\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -508,36 +456,93 @@ ParquetFileFragment::ParquetFileFragment(FileSource source,\n                    std::move(physical_schema)),\n       row_groups_(std::move(row_groups)),\n       parquet_format_(checked_cast<ParquetFileFormat&>(*format_)),\n-      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_)) {}\n+      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_) &&\n+                             physical_schema_ != nullptr) {}\n \n-Result<FragmentVector> ParquetFileFragment::SplitByRowGroup(\n-    const std::shared_ptr<Expression>& predicate) {\n-  auto simplified_predicate = predicate->Assume(partition_expression());\n-  if (!simplified_predicate->IsSatisfiable()) {\n-    return FragmentVector{};\n+Status ParquetFileFragment::EnsureCompleteMetadata(parquet::arrow::FileReader* reader) {\n+  if (HasCompleteMetadata()) {\n+    return Status::OK();\n   }\n \n-  std::vector<RowGroupInfo> row_groups;\n-  if (HasCompleteMetadata()) {\n-    row_groups = FilterRowGroups(row_groups_, *simplified_predicate);\n-  } else {\n+  if (reader == nullptr) {\n     ARROW_ASSIGN_OR_RAISE(auto reader, parquet_format_.GetReader(source_));\n-    ARROW_ASSIGN_OR_RAISE(row_groups, AugmentRowGroups(row_groups_, reader.get()));\n-    row_groups = FilterRowGroups(std::move(row_groups), *simplified_predicate);\n+    return EnsureCompleteMetadata(reader.get());\n+  }\n+\n+  std::shared_ptr<Schema> schema;\n+  RETURN_NOT_OK(reader->GetSchema(&schema));\n+  if (physical_schema_ && !physical_schema_->Equals(*schema)) {\n+    return Status::Invalid(\"Fragment initialized with physical schema \",\n+                           *physical_schema_, \" but \", source_.path(), \" has schema \",\n+                           *schema);\n+  }\n+  physical_schema_ = std::move(schema);\n+\n+  auto metadata = reader->parquet_reader()->metadata();\n+  auto num_row_groups = metadata->num_row_groups();\n+\n+  if (row_groups_.empty()) {\n+    row_groups_ = RowGroupInfo::FromCount(num_row_groups);\n+  }\n+\n+  for (RowGroupInfo& info : row_groups_) {\n+    // Ensure RowGroups are indexing valid RowGroups before augmenting.\n+    if (info.id() >= num_row_groups) {\n+      return Status::IndexError(\"Trying to scan row group \", info.id(), \" but \",\n+                                source_.path(), \" only has \", num_row_groups,\n+                                \" row groups\");\n+    }\n+  }\n+\n+  for (RowGroupInfo& info : row_groups_) {\n\nReview comment:\n       yes; in this loop row group infos which have only partial statistics are hydrated from the reader\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-09T21:00:19.223+0000",
                    "updated": "2020-07-09T21:00:19.223+0000",
                    "started": "2020-07-09T21:00:19.223+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456836",
                    "issueId": "13314911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314911/worklog/456837",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7692:\nURL: https://github.com/apache/arrow/pull/7692#discussion_r452488092\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -508,36 +456,93 @@ ParquetFileFragment::ParquetFileFragment(FileSource source,\n                    std::move(physical_schema)),\n       row_groups_(std::move(row_groups)),\n       parquet_format_(checked_cast<ParquetFileFormat&>(*format_)),\n-      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_)) {}\n+      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_) &&\n+                             physical_schema_ != nullptr) {}\n \n-Result<FragmentVector> ParquetFileFragment::SplitByRowGroup(\n-    const std::shared_ptr<Expression>& predicate) {\n-  auto simplified_predicate = predicate->Assume(partition_expression());\n-  if (!simplified_predicate->IsSatisfiable()) {\n-    return FragmentVector{};\n+Status ParquetFileFragment::EnsureCompleteMetadata(parquet::arrow::FileReader* reader) {\n+  if (HasCompleteMetadata()) {\n+    return Status::OK();\n   }\n \n-  std::vector<RowGroupInfo> row_groups;\n-  if (HasCompleteMetadata()) {\n-    row_groups = FilterRowGroups(row_groups_, *simplified_predicate);\n-  } else {\n+  if (reader == nullptr) {\n     ARROW_ASSIGN_OR_RAISE(auto reader, parquet_format_.GetReader(source_));\n-    ARROW_ASSIGN_OR_RAISE(row_groups, AugmentRowGroups(row_groups_, reader.get()));\n-    row_groups = FilterRowGroups(std::move(row_groups), *simplified_predicate);\n+    return EnsureCompleteMetadata(reader.get());\n+  }\n+\n+  std::shared_ptr<Schema> schema;\n+  RETURN_NOT_OK(reader->GetSchema(&schema));\n+  if (physical_schema_ && !physical_schema_->Equals(*schema)) {\n+    return Status::Invalid(\"Fragment initialized with physical schema \",\n+                           *physical_schema_, \" but \", source_.path(), \" has schema \",\n+                           *schema);\n+  }\n+  physical_schema_ = std::move(schema);\n+\n+  auto metadata = reader->parquet_reader()->metadata();\n+  auto num_row_groups = metadata->num_row_groups();\n+\n+  if (row_groups_.empty()) {\n+    row_groups_ = RowGroupInfo::FromCount(num_row_groups);\n+  }\n+\n+  for (RowGroupInfo& info : row_groups_) {\n+    // Ensure RowGroups are indexing valid RowGroups before augmenting.\n+    if (info.id() >= num_row_groups) {\n+      return Status::IndexError(\"Trying to scan row group \", info.id(), \" but \",\n+                                source_.path(), \" only has \", num_row_groups,\n+                                \" row groups\");\n+    }\n+  }\n+\n+  for (RowGroupInfo& info : row_groups_) {\n+    // Augment a RowGroup with statistics if missing.\n+    if (info.HasStatistics()) continue;\n\nReview comment:\n       The style guide doesn't require them and I don't think this is less readable https://google.github.io/styleguide/cppguide.html#Conditionals\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-09T21:02:18.083+0000",
                    "updated": "2020-07-09T21:02:18.083+0000",
                    "started": "2020-07-09T21:02:18.082+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456837",
                    "issueId": "13314911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314911/worklog/456838",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7692:\nURL: https://github.com/apache/arrow/pull/7692#discussion_r452488952\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -508,36 +456,93 @@ ParquetFileFragment::ParquetFileFragment(FileSource source,\n                    std::move(physical_schema)),\n       row_groups_(std::move(row_groups)),\n       parquet_format_(checked_cast<ParquetFileFormat&>(*format_)),\n-      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_)) {}\n+      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_) &&\n+                             physical_schema_ != nullptr) {}\n \n-Result<FragmentVector> ParquetFileFragment::SplitByRowGroup(\n-    const std::shared_ptr<Expression>& predicate) {\n-  auto simplified_predicate = predicate->Assume(partition_expression());\n-  if (!simplified_predicate->IsSatisfiable()) {\n-    return FragmentVector{};\n+Status ParquetFileFragment::EnsureCompleteMetadata(parquet::arrow::FileReader* reader) {\n+  if (HasCompleteMetadata()) {\n+    return Status::OK();\n   }\n \n-  std::vector<RowGroupInfo> row_groups;\n-  if (HasCompleteMetadata()) {\n-    row_groups = FilterRowGroups(row_groups_, *simplified_predicate);\n-  } else {\n+  if (reader == nullptr) {\n     ARROW_ASSIGN_OR_RAISE(auto reader, parquet_format_.GetReader(source_));\n-    ARROW_ASSIGN_OR_RAISE(row_groups, AugmentRowGroups(row_groups_, reader.get()));\n-    row_groups = FilterRowGroups(std::move(row_groups), *simplified_predicate);\n+    return EnsureCompleteMetadata(reader.get());\n+  }\n+\n+  std::shared_ptr<Schema> schema;\n+  RETURN_NOT_OK(reader->GetSchema(&schema));\n+  if (physical_schema_ && !physical_schema_->Equals(*schema)) {\n+    return Status::Invalid(\"Fragment initialized with physical schema \",\n+                           *physical_schema_, \" but \", source_.path(), \" has schema \",\n+                           *schema);\n+  }\n+  physical_schema_ = std::move(schema);\n+\n+  auto metadata = reader->parquet_reader()->metadata();\n+  auto num_row_groups = metadata->num_row_groups();\n+\n+  if (row_groups_.empty()) {\n+    row_groups_ = RowGroupInfo::FromCount(num_row_groups);\n+  }\n+\n+  for (RowGroupInfo& info : row_groups_) {\n+    // Ensure RowGroups are indexing valid RowGroups before augmenting.\n+    if (info.id() >= num_row_groups) {\n+      return Status::IndexError(\"Trying to scan row group \", info.id(), \" but \",\n+                                source_.path(), \" only has \", num_row_groups,\n+                                \" row groups\");\n+    }\n+  }\n+\n+  for (RowGroupInfo& info : row_groups_) {\n+    // Augment a RowGroup with statistics if missing.\n+    if (info.HasStatistics()) continue;\n\nReview comment:\n       OK, that sounds fine then. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-09T21:04:11.113+0000",
                    "updated": "2020-07-09T21:04:11.113+0000",
                    "started": "2020-07-09T21:04:11.113+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456838",
                    "issueId": "13314911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314911/worklog/456839",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7692:\nURL: https://github.com/apache/arrow/pull/7692#discussion_r452487124\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -508,36 +456,93 @@ ParquetFileFragment::ParquetFileFragment(FileSource source,\n                    std::move(physical_schema)),\n       row_groups_(std::move(row_groups)),\n       parquet_format_(checked_cast<ParquetFileFormat&>(*format_)),\n-      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_)) {}\n+      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_) &&\n+                             physical_schema_ != nullptr) {}\n \n-Result<FragmentVector> ParquetFileFragment::SplitByRowGroup(\n-    const std::shared_ptr<Expression>& predicate) {\n-  auto simplified_predicate = predicate->Assume(partition_expression());\n-  if (!simplified_predicate->IsSatisfiable()) {\n-    return FragmentVector{};\n+Status ParquetFileFragment::EnsureCompleteMetadata(parquet::arrow::FileReader* reader) {\n+  if (HasCompleteMetadata()) {\n+    return Status::OK();\n   }\n \n-  std::vector<RowGroupInfo> row_groups;\n-  if (HasCompleteMetadata()) {\n-    row_groups = FilterRowGroups(row_groups_, *simplified_predicate);\n-  } else {\n+  if (reader == nullptr) {\n     ARROW_ASSIGN_OR_RAISE(auto reader, parquet_format_.GetReader(source_));\n-    ARROW_ASSIGN_OR_RAISE(row_groups, AugmentRowGroups(row_groups_, reader.get()));\n-    row_groups = FilterRowGroups(std::move(row_groups), *simplified_predicate);\n+    return EnsureCompleteMetadata(reader.get());\n+  }\n+\n+  std::shared_ptr<Schema> schema;\n+  RETURN_NOT_OK(reader->GetSchema(&schema));\n+  if (physical_schema_ && !physical_schema_->Equals(*schema)) {\n+    return Status::Invalid(\"Fragment initialized with physical schema \",\n+                           *physical_schema_, \" but \", source_.path(), \" has schema \",\n+                           *schema);\n+  }\n+  physical_schema_ = std::move(schema);\n+\n+  auto metadata = reader->parquet_reader()->metadata();\n+  auto num_row_groups = metadata->num_row_groups();\n+\n+  if (row_groups_.empty()) {\n+    row_groups_ = RowGroupInfo::FromCount(num_row_groups);\n+  }\n+\n+  for (RowGroupInfo& info : row_groups_) {\n+    // Ensure RowGroups are indexing valid RowGroups before augmenting.\n+    if (info.id() >= num_row_groups) {\n+      return Status::IndexError(\"Trying to scan row group \", info.id(), \" but \",\n+                                source_.path(), \" only has \", num_row_groups,\n+                                \" row groups\");\n+    }\n+  }\n+\n+  for (RowGroupInfo& info : row_groups_) {\n\nReview comment:\n       This mutable reference is necessary; in this loop row group infos which have only partial statistics are hydrated from the reader\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-09T21:07:06.978+0000",
                    "updated": "2020-07-09T21:07:06.978+0000",
                    "started": "2020-07-09T21:07:06.978+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456839",
                    "issueId": "13314911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314911/worklog/456840",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7692:\nURL: https://github.com/apache/arrow/pull/7692#discussion_r452490750\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -508,36 +456,93 @@ ParquetFileFragment::ParquetFileFragment(FileSource source,\n                    std::move(physical_schema)),\n       row_groups_(std::move(row_groups)),\n       parquet_format_(checked_cast<ParquetFileFormat&>(*format_)),\n-      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_)) {}\n+      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_) &&\n+                             physical_schema_ != nullptr) {}\n \n-Result<FragmentVector> ParquetFileFragment::SplitByRowGroup(\n-    const std::shared_ptr<Expression>& predicate) {\n-  auto simplified_predicate = predicate->Assume(partition_expression());\n-  if (!simplified_predicate->IsSatisfiable()) {\n-    return FragmentVector{};\n+Status ParquetFileFragment::EnsureCompleteMetadata(parquet::arrow::FileReader* reader) {\n+  if (HasCompleteMetadata()) {\n+    return Status::OK();\n   }\n \n-  std::vector<RowGroupInfo> row_groups;\n-  if (HasCompleteMetadata()) {\n-    row_groups = FilterRowGroups(row_groups_, *simplified_predicate);\n-  } else {\n+  if (reader == nullptr) {\n     ARROW_ASSIGN_OR_RAISE(auto reader, parquet_format_.GetReader(source_));\n-    ARROW_ASSIGN_OR_RAISE(row_groups, AugmentRowGroups(row_groups_, reader.get()));\n-    row_groups = FilterRowGroups(std::move(row_groups), *simplified_predicate);\n+    return EnsureCompleteMetadata(reader.get());\n+  }\n+\n+  std::shared_ptr<Schema> schema;\n+  RETURN_NOT_OK(reader->GetSchema(&schema));\n+  if (physical_schema_ && !physical_schema_->Equals(*schema)) {\n+    return Status::Invalid(\"Fragment initialized with physical schema \",\n+                           *physical_schema_, \" but \", source_.path(), \" has schema \",\n+                           *schema);\n+  }\n+  physical_schema_ = std::move(schema);\n+\n+  auto metadata = reader->parquet_reader()->metadata();\n+  auto num_row_groups = metadata->num_row_groups();\n+\n+  if (row_groups_.empty()) {\n+    row_groups_ = RowGroupInfo::FromCount(num_row_groups);\n+  }\n+\n+  for (RowGroupInfo& info : row_groups_) {\n+    // Ensure RowGroups are indexing valid RowGroups before augmenting.\n+    if (info.id() >= num_row_groups) {\n+      return Status::IndexError(\"Trying to scan row group \", info.id(), \" but \",\n+                                source_.path(), \" only has \", num_row_groups,\n+                                \" row groups\");\n+    }\n+  }\n+\n+  for (RowGroupInfo& info : row_groups_) {\n\nReview comment:\n       If you prefer I can use an index and assign to a vector element that way\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-09T21:07:40.855+0000",
                    "updated": "2020-07-09T21:07:40.855+0000",
                    "started": "2020-07-09T21:07:40.855+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456840",
                    "issueId": "13314911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314911/worklog/456842",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7692:\nURL: https://github.com/apache/arrow/pull/7692#discussion_r452491386\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -508,36 +456,93 @@ ParquetFileFragment::ParquetFileFragment(FileSource source,\n                    std::move(physical_schema)),\n       row_groups_(std::move(row_groups)),\n       parquet_format_(checked_cast<ParquetFileFormat&>(*format_)),\n-      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_)) {}\n+      has_complete_metadata_(RowGroupInfosAreComplete(row_groups_) &&\n+                             physical_schema_ != nullptr) {}\n \n-Result<FragmentVector> ParquetFileFragment::SplitByRowGroup(\n-    const std::shared_ptr<Expression>& predicate) {\n-  auto simplified_predicate = predicate->Assume(partition_expression());\n-  if (!simplified_predicate->IsSatisfiable()) {\n-    return FragmentVector{};\n+Status ParquetFileFragment::EnsureCompleteMetadata(parquet::arrow::FileReader* reader) {\n+  if (HasCompleteMetadata()) {\n+    return Status::OK();\n   }\n \n-  std::vector<RowGroupInfo> row_groups;\n-  if (HasCompleteMetadata()) {\n-    row_groups = FilterRowGroups(row_groups_, *simplified_predicate);\n-  } else {\n+  if (reader == nullptr) {\n     ARROW_ASSIGN_OR_RAISE(auto reader, parquet_format_.GetReader(source_));\n-    ARROW_ASSIGN_OR_RAISE(row_groups, AugmentRowGroups(row_groups_, reader.get()));\n-    row_groups = FilterRowGroups(std::move(row_groups), *simplified_predicate);\n+    return EnsureCompleteMetadata(reader.get());\n+  }\n+\n+  std::shared_ptr<Schema> schema;\n+  RETURN_NOT_OK(reader->GetSchema(&schema));\n+  if (physical_schema_ && !physical_schema_->Equals(*schema)) {\n+    return Status::Invalid(\"Fragment initialized with physical schema \",\n+                           *physical_schema_, \" but \", source_.path(), \" has schema \",\n+                           *schema);\n+  }\n+  physical_schema_ = std::move(schema);\n+\n+  auto metadata = reader->parquet_reader()->metadata();\n+  auto num_row_groups = metadata->num_row_groups();\n\nReview comment:\n       If you insist, otherwise I'd prefer to leave it as `auto`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-09T21:09:10.821+0000",
                    "updated": "2020-07-09T21:09:10.821+0000",
                    "started": "2020-07-09T21:09:10.821+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456842",
                    "issueId": "13314911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314911/worklog/457038",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #7692:\nURL: https://github.com/apache/arrow/pull/7692#issuecomment-656523653\n\n\n   I added some python tests for the new `ensure_complete_metadata` and pickling.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-10T07:13:54.998+0000",
                    "updated": "2020-07-10T07:13:54.998+0000",
                    "started": "2020-07-10T07:13:54.997+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457038",
                    "issueId": "13314911"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314911/worklog/457039",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #7692:\nURL: https://github.com/apache/arrow/pull/7692#discussion_r452408096\n\n\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -909,13 +909,24 @@ cdef class ParquetFileFragment(FileFragment):\n \n     def __reduce__(self):\n         buffer = self.buffer\n+        if self.row_groups is not None:\n\nReview comment:\n       Yeah, I actually realized we were not yet pickling the row group id's when discussing this in the meeting we had, and was planning to open a JIRA / do a quick PR, but you already fixed it ;)\r\n   \r\n   (it didn't fail ~~because we simply didn't include any row group information in the serialization~~ because we only tested cases where row_groups was None)\r\n   \r\n   Only preserving the rowgroup id's (as you do here) should be sufficient for now.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-10T07:14:31.655+0000",
                    "updated": "2020-07-10T07:14:31.655+0000",
                    "started": "2020-07-10T07:14:31.655+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "457039",
                    "issueId": "13314911"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 13800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5a3ad442[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b35859[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@54493f3c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4925d47c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1eee267b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2d455de7[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@30e827ac[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@570983f9[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@383bba9d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3f167218[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e32f711[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@55bfa365[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13800,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Jul 12 22:53:26 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-07-12T22:53:26.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9321/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-07-03T14:47:25.000+0000",
        "updated": "2020-07-12T22:53:37.000+0000",
        "timeoriginalestimate": null,
        "description": "Right now, the statistics of the {{RowGroupInfo}} of ParquetFileFragments are only available when the dataset was constructed from a {{_metadata}} file:\r\n\r\n{code:python}\r\nimport pandas as pd\r\ndf = pd.DataFrame({\"part\": ['A', 'A', 'B', 'B'], \"col\": range(4)})                                                                                                                                        \r\n# use dask to write partitioned dataset *with* _metadata file\r\nimport dask.dataframe as dd                                                                                                                                                                               \r\nddf = dd.from_pandas(df, npartitions=2) \r\nddf.to_parquet(\"test_dataset\", partition_on=[\"part\"], engine=\"pyarrow\")                                                                                                                     \r\n\r\nimport pyarrow.dataset as ds\r\ndataset_no_metadata = ds.dataset(\"test_dataset/\", format=\"parquet\", partitioning=\"hive\")\r\ndataset_from_metadata = ds.parquet_dataset(\"test_dataset/_metadata\", partitioning=\"hive\")                                                                                                                 \r\n{code}\r\n\r\n{code}\r\n\r\nIn [28]: list(dataset_no_metadata.get_fragments())[0].row_groups                                                                                                                                                   \r\n\r\nIn [30]: list(dataset_from_metadata.get_fragments())[0].row_groups                                                                                                                                                 \r\nOut[30]: [<pyarrow._dataset.RowGroupInfo at 0x7fd7882c0030>]\r\n\r\nIn [32]: list(dataset_from_metadata.get_fragments())[0].row_groups[0].statistics                                                                                                                                   \r\nOut[32]: {'col': {'min': 2, 'max': 3}, 'index': {'min': 2, 'max': 3}}\r\n{code}\r\n\r\nFor some applications (eg dask), one could want access to those statistics, even if the original dataset / fragments were not created from a {{_metadata}} file. This should not happen automatically since it's costly, but a method to trigger collecting all metadata would be useful.\r\n\r\ncc [~rjzamora] ",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Dataset] Allow to \"collect\" statistics for ParquetFragment row groups if not constructed from _metadata",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314911/comment/17156406",
                    "id": "17156406",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 7692\n[https://github.com/apache/arrow/pull/7692]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-07-12T22:53:26.742+0000",
                    "updated": "2020-07-12T22:53:26.742+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0gfuo:",
        "customfield_12314139": null
    }
}