{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13424925",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424925",
    "key": "ARROW-15462",
    "fields": {
        "parent": {
            "id": "13398352",
            "key": "ARROW-13808",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13398352",
            "fields": {
                "summary": "[Ruby] Add bindings for Month, Day, Nano Interval Type",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                    "description": "The issue is open and ready for the assignee to start work on it.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                    "name": "Open",
                    "id": "1",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                        "id": 2,
                        "key": "new",
                        "colorName": "blue-gray",
                        "name": "To Do"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=okadakk",
            "name": "okadakk",
            "key": "okadakk",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Keisuke Okada",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=okadakk",
            "name": "okadakk",
            "key": "okadakk",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Keisuke Okada",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=okadakk",
            "name": "okadakk",
            "key": "okadakk",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Keisuke Okada",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15462/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 15,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424925/worklog/715703",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "okadakk opened a new pull request #12269:\nURL: https://github.com/apache/arrow/pull/12269\n\n\n   This PR adds month interval, day time interval, month day nano interval scalar, array, array builder!\r\n   \r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-26T14:14:01.745+0000",
                    "updated": "2022-01-26T14:14:01.745+0000",
                    "started": "2022-01-26T14:14:01.745+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "715703",
                    "issueId": "13424925"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424925/worklog/715704",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12269:\nURL: https://github.com/apache/arrow/pull/12269#issuecomment-1022236314\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-26T14:14:24.546+0000",
                    "updated": "2022-01-26T14:14:24.546+0000",
                    "started": "2022-01-26T14:14:24.546+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "715704",
                    "issueId": "13424925"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424925/worklog/716161",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #12269:\nURL: https://github.com/apache/arrow/pull/12269#discussion_r793200005\n\n\n\n##########\nFile path: c_glib/arrow-glib/array-builder.cpp\n##########\n@@ -4484,6 +4494,326 @@ garrow_time64_array_builder_append_nulls(GArrowTime64ArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowMonthIntervalArrayBuilder,\n+              garrow_month_interval_array_builder,\n+              GARROW_TYPE_ARRAY_BUILDER)\n+\n+static void\n+garrow_month_interval_array_builder_init(GArrowMonthIntervalArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_month_interval_array_builder_class_init(GArrowMonthIntervalArrayBuilderClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_month_interval_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowMonthIntervalArrayBuilder.\n+ *\n+ * Since: 8.0.0\n+ */\n+GArrowMonthIntervalArrayBuilder *\n+garrow_month_interval_array_builder_new(void)\n+{\n+  auto builder = garrow_array_builder_new(arrow::month_interval(),\n+                                          NULL,\n+                                          \"[month-interval-array-builder][new]\");\n+  return GARROW_MONTH_INTERVAL_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_month_interval_array_builder_append_value:\n+ * @builder: A #GArrowMonthIntervalArrayBuilder.\n+ * @value: The month.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 8.0.0\n+ */\n+gboolean\n+garrow_month_interval_array_builder_append_value(GArrowMonthIntervalArrayBuilder *builder,\n+                                                 gint32 value,\n+                                                 GError **error)\n+{\n+  return garrow_array_builder_append_value<arrow::MonthIntervalBuilder *>\n+    (GARROW_ARRAY_BUILDER(builder),\n+     value,\n+     error,\n+     \"[month-interval-array-builder][append-value]\");\n+}\n+\n+/**\n+ * garrow_month_interval_array_builder_append_values:\n+ * @builder: A #GArrowMonthIntervalArrayBuilder.\n+ * @values: (array length=values_length): The array of the month.\n+ * @values_length: The length of `values`.\n+ * @is_valids: (nullable) (array length=is_valids_length): The array of\n+ *   boolean that shows whether the Nth value is valid or not. If the\n+ *   Nth `is_valids` is %TRUE, the Nth `values` is valid value. Otherwise\n+ *   the Nth value is null value.\n+ * @is_valids_length: The length of `is_valids`.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Append multiple values at once. It's more efficient than multiple\n+ * `append` calls.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 8.0.0\n+ */\n+gboolean\n+garrow_month_interval_array_builder_append_values(GArrowMonthIntervalArrayBuilder *builder,\n+                                                  const gint32 *values,\n+                                                  gint64 values_length,\n+                                                  const gboolean *is_valids,\n+                                                  gint64 is_valids_length,\n+                                                  GError **error)\n+{\n+  return garrow_array_builder_append_values<arrow::MonthIntervalBuilder *>\n+    (GARROW_ARRAY_BUILDER(builder),\n+     values,\n+     values_length,\n+     is_valids,\n+     is_valids_length,\n+     error,\n+     \"[month-interval-array-builder][append-values]\");\n+}\n+\n+\n+G_DEFINE_TYPE(GArrowDayTimeIntervalArrayBuilder,\n+              garrow_day_time_interval_array_builder,\n+              GARROW_TYPE_ARRAY_BUILDER)\n+\n+static void\n+garrow_day_time_interval_array_builder_init(GArrowDayTimeIntervalArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_day_time_interval_array_builder_class_init(GArrowDayTimeIntervalArrayBuilderClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_day_time_interval_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowDayTimeIntervalArrayBuilder.\n+ *\n+ * Since: 8.0.0\n+ */\n+GArrowDayTimeIntervalArrayBuilder *\n+garrow_day_time_interval_array_builder_new(void)\n+{\n+  auto builder = garrow_array_builder_new(arrow::day_time_interval(),\n+                                          NULL,\n+                                          \"[day-time-interval-array-builder][new]\");\n+  return GARROW_DAY_TIME_INTERVAL_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_day_time_interval_array_builder_append_value:\n+ * @builder: A #GArrowDayTimeIntervalArrayBuilder.\n+ * @value: A #GArrowDayMillisecond.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 8.0.0\n+ */\n+gboolean\n+garrow_day_time_interval_array_builder_append_value(GArrowDayTimeIntervalArrayBuilder *builder,\n+                                                    GArrowDayMillisecond *value,\n+                                                    GError **error)\n+{\n+  if (value) {\n+    auto arrow_day_millisecond = garrow_day_millisecond_get_raw(value);\n+    return garrow_array_builder_append_value<arrow::DayTimeIntervalBuilder *>\n+      (GARROW_ARRAY_BUILDER(builder),\n+       *arrow_day_millisecond,\n+       error,\n+       \"[day-time-interval-array-builder][append-value]\");\n+  } else {\n+    return garrow_array_builder_append_null(GARROW_ARRAY_BUILDER(builder),\n+                                            error);\n+  }\n+}\n+\n+/**\n+ * garrow_day_time_interval_array_builder_append_values:\n+ * @builder: A #GArrowDayTimeIntervalArrayBuilder.\n+ * @values: (array length=values_length): The array of a #GArrowDayMillisecond.\n+ * @values_length: The length of `values`.\n+ * @is_valids: (nullable) (array length=is_valids_length): The array of\n+ *   boolean that shows whether the Nth value is valid or not. If the\n+ *   Nth `is_valids` is %TRUE, the Nth `values` is valid value. Otherwise\n+ *   the Nth value is null value.\n+ * @is_valids_length: The length of `is_valids`.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Append multiple values at once. It's more efficient than multiple\n+ * `append` calls.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 8.0.0\n+ */\n+gboolean\n+garrow_day_time_interval_array_builder_append_values(GArrowDayTimeIntervalArrayBuilder *builder,\n+                                                     const GArrowDayMillisecond **values,\n+                                                     gint64 values_length,\n+                                                     const gboolean *is_valids,\n+                                                     gint64 is_valids_length,\n+                                                     GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::DayTimeIntervalBuilder *>(garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+\n+  return garrow_array_builder_append_values(\n+    values,\n+    values_length,\n+    is_valids,\n+    is_valids_length,\n+    error,\n+    \"[day-time-interval-array-builder][append-values]\",\n+    [&arrow_builder](const GArrowDayMillisecond **values,\n+                     gint64 values_length,\n+                     const uint8_t *valid_bytes) -> arrow::Status {\n+      for (int i = 0; i < values_length; i++) {\n+        arrow::Status status;\n+        if (!valid_bytes || valid_bytes[i]) {\n+          status = arrow_builder->Append(*garrow_day_millisecond_get_raw(values[i]));\n+        } else {\n+          status = arrow_builder->AppendNull();\n+        }\n+        if (!status.ok()) {\n+          return status;\n+        }\n+      };\n+\n+      return arrow::Status::OK();\n+    });\n+}\n+\n+\n+G_DEFINE_TYPE(GArrowMonthDayNanoIntervalArrayBuilder,\n+              garrow_month_day_nano_interval_array_builder,\n+              GARROW_TYPE_ARRAY_BUILDER)\n+\n+static void\n+garrow_month_day_nano_interval_array_builder_init(GArrowMonthDayNanoIntervalArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_month_day_nano_interval_array_builder_class_init(GArrowMonthDayNanoIntervalArrayBuilderClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_month_day_nano_interval_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowMonthDayNanoIntervalArrayBuilder.\n+ *\n+ * Since: 8.0.0\n+ */\n+GArrowMonthDayNanoIntervalArrayBuilder *\n+garrow_month_day_nano_interval_array_builder_new(void)\n+{\n+  auto builder = garrow_array_builder_new(arrow::month_day_nano_interval(),\n+                                          NULL,\n+                                          \"[month-day-nano-interval-array-builder][new]\");\n+  return GARROW_MONTH_DAY_NANO_INTERVAL_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_month_day_nano_interval_array_builder_append_value:\n+ * @builder: A #GArrowMonthDayNanoIntervalArrayBuilder.\n+ * @value: A #GArrowMonthDayNano.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 8.0.0\n+ */\n+gboolean\n+garrow_month_day_nano_interval_array_builder_append_value(GArrowMonthDayNanoIntervalArrayBuilder *builder,\n+                                                          GArrowMonthDayNano *value,\n+                                                          GError **error)\n+{\n+  if (value) {\n+    auto arrow_day_millisecond = garrow_month_day_nano_get_raw(value);\n\nReview comment:\n       ```suggestion\r\n       auto arrow_month_day_nano = garrow_month_day_nano_get_raw(value);\r\n   ```\n\n##########\nFile path: c_glib/arrow-glib/basic-array.cpp\n##########\n@@ -2806,6 +2822,265 @@ garrow_time64_array_get_values(GArrowTime64Array *array,\n }\n \n \n+G_DEFINE_TYPE(GArrowMonthIntervalArray,\n+              garrow_month_interval_array,\n+              GARROW_TYPE_NUMERIC_ARRAY)\n+\n+static void\n+garrow_month_interval_array_init(GArrowMonthIntervalArray *object)\n+{\n+}\n+\n+static void\n+garrow_month_interval_array_class_init(GArrowMonthIntervalArrayClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_month_interval_array_new:\n+ * @length: The number of elements.\n+ * @data: The binary data in Arrow format of the array.\n+ * @null_bitmap: (nullable): The bitmap that shows null elements. The\n+ *   N-th element is null when the N-th bit is 0, not null otherwise.\n+ *   If the array has no null elements, the bitmap must be %NULL and\n+ *   @n_nulls is 0.\n+ * @n_nulls: The number of null elements. If -1 is specified, the\n+ *   number of nulls are computed from @null_bitmap.\n+ *\n+ * Returns: A newly created #GArrowMonthIntervalArray.\n+ *\n+ * Since: 8.0.0\n+ */\n+GArrowMonthIntervalArray *\n+garrow_month_interval_array_new(gint64 length,\n+                                GArrowBuffer *data,\n+                                GArrowBuffer *null_bitmap,\n+                                gint64 n_nulls)\n+{\n+  auto array = garrow_primitive_array_new<arrow::MonthIntervalType>(length,\n+                                                                    data,\n+                                                                    null_bitmap,\n+                                                                    n_nulls);\n+  return GARROW_MONTH_INTERVAL_ARRAY(array);\n+}\n+\n+/**\n+ * garrow_month_interval_array_get_value:\n+ * @array: A #GArrowMonthIntervalArray.\n+ * @i: The index of the target value.\n+ *\n+ * Returns: The @i-th value.\n+ *\n+ * Since: 8.0.0\n+ */\n+gint32\n+garrow_month_interval_array_get_value(GArrowMonthIntervalArray *array,\n+                                      gint64 i)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  return static_cast<arrow::MonthIntervalArray *>(arrow_array.get())->Value(i);\n+}\n+\n+/**\n+ * garrow_month_interval_array_get_values:\n+ * @array: A #GArrowMonthIntervalArray.\n+ * @length: (out): The number of values.\n+ *\n+ * Returns: (array length=length): The raw values.\n+ *\n+ * Since: 8.0.0\n+ */\n+const gint32 *\n+garrow_month_interval_array_get_values(GArrowMonthIntervalArray *array,\n+                                       gint64 *length)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  return garrow_array_get_values_raw<arrow::MonthIntervalType>(arrow_array, length);\n+}\n+\n+\n+G_DEFINE_TYPE(GArrowDayTimeIntervalArray,\n+              garrow_day_time_interval_array,\n+              GARROW_TYPE_NUMERIC_ARRAY)\n+\n+static void\n+garrow_day_time_interval_array_init(GArrowDayTimeIntervalArray *object)\n+{\n+}\n+\n+static void\n+garrow_day_time_interval_array_class_init(GArrowDayTimeIntervalArrayClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_day_time_interval_array_new:\n+ * @length: The number of elements.\n+ * @data: The binary data in Arrow format of the array.\n+ * @null_bitmap: (nullable): The bitmap that shows null elements. The\n+ *   N-th element is null when the N-th bit is 0, not null otherwise.\n+ *   If the array has no null elements, the bitmap must be %NULL and\n+ *   @n_nulls is 0.\n+ * @n_nulls: The number of null elements. If -1 is specified, the\n+ *   number of nulls are computed from @null_bitmap.\n+ *\n+ * Returns: A newly created #GArrowDayTimeIntervalArray.\n+ *\n+ * Since: 8.0.0\n+ */\n+GArrowDayTimeIntervalArray *\n+garrow_day_time_interval_array_new(gint64 length,\n+                                   GArrowBuffer *data,\n+                                   GArrowBuffer *null_bitmap,\n+                                   gint64 n_nulls)\n+{\n+  auto array = garrow_primitive_array_new<arrow::DayTimeIntervalType>(length,\n+                                                                      data,\n+                                                                      null_bitmap,\n+                                                                      n_nulls);\n+  return GARROW_DAY_TIME_INTERVAL_ARRAY(array);\n+}\n+\n+/**\n+ * garrow_day_time_interval_array_get_value:\n+ * @array: A #GArrowDayTimeIntervalArray.\n+ * @i: The index of the target value.\n+ *\n+ * Returns: (transfer full): The @i-th value.\n+ *\n+ * Since: 8.0.0\n+ */\n+GArrowDayMillisecond *\n+garrow_day_time_interval_array_get_value(GArrowDayTimeIntervalArray *array,\n+                                         gint64 i)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  auto arrow_day_time_interval_array =\n+    std::static_pointer_cast<arrow::DayTimeIntervalArray>(arrow_array);\n+  auto arrow_day_time_interval = arrow_day_time_interval_array->GetValue(i);\n+  return garrow_day_millisecond_new_raw(&arrow_day_time_interval);\n+}\n+\n+/**\n+ * garrow_day_time_interval_array_get_values:\n+ * @array: A #GArrowDayTimeIntervalArray.\n+ *\n+ * Returns: (nullable) (element-type GArrowDayMillisecond) (transfer full):\n+ *   The returned list of #GArrowDayMillisecond on success, %NULL on error.\n\nReview comment:\n       `NULL` isn't an error. If the number of elements is `0`, `NULL` is returned as a valid value. \r\n   \r\n   ```suggestion\r\n    *   The list of #GArrowDayMillisecond.\r\n   ```\n\n##########\nFile path: c_glib/arrow-glib/array-builder.cpp\n##########\n@@ -4484,6 +4494,326 @@ garrow_time64_array_builder_append_nulls(GArrowTime64ArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowMonthIntervalArrayBuilder,\n+              garrow_month_interval_array_builder,\n+              GARROW_TYPE_ARRAY_BUILDER)\n+\n+static void\n+garrow_month_interval_array_builder_init(GArrowMonthIntervalArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_month_interval_array_builder_class_init(GArrowMonthIntervalArrayBuilderClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_month_interval_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowMonthIntervalArrayBuilder.\n+ *\n+ * Since: 8.0.0\n+ */\n+GArrowMonthIntervalArrayBuilder *\n+garrow_month_interval_array_builder_new(void)\n+{\n+  auto builder = garrow_array_builder_new(arrow::month_interval(),\n+                                          NULL,\n+                                          \"[month-interval-array-builder][new]\");\n+  return GARROW_MONTH_INTERVAL_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_month_interval_array_builder_append_value:\n+ * @builder: A #GArrowMonthIntervalArrayBuilder.\n+ * @value: The month.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 8.0.0\n+ */\n+gboolean\n+garrow_month_interval_array_builder_append_value(GArrowMonthIntervalArrayBuilder *builder,\n+                                                 gint32 value,\n+                                                 GError **error)\n+{\n+  return garrow_array_builder_append_value<arrow::MonthIntervalBuilder *>\n+    (GARROW_ARRAY_BUILDER(builder),\n+     value,\n+     error,\n+     \"[month-interval-array-builder][append-value]\");\n+}\n+\n+/**\n+ * garrow_month_interval_array_builder_append_values:\n+ * @builder: A #GArrowMonthIntervalArrayBuilder.\n+ * @values: (array length=values_length): The array of the month.\n+ * @values_length: The length of `values`.\n+ * @is_valids: (nullable) (array length=is_valids_length): The array of\n+ *   boolean that shows whether the Nth value is valid or not. If the\n+ *   Nth `is_valids` is %TRUE, the Nth `values` is valid value. Otherwise\n+ *   the Nth value is null value.\n+ * @is_valids_length: The length of `is_valids`.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Append multiple values at once. It's more efficient than multiple\n+ * `append` calls.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 8.0.0\n+ */\n+gboolean\n+garrow_month_interval_array_builder_append_values(GArrowMonthIntervalArrayBuilder *builder,\n+                                                  const gint32 *values,\n+                                                  gint64 values_length,\n+                                                  const gboolean *is_valids,\n+                                                  gint64 is_valids_length,\n+                                                  GError **error)\n+{\n+  return garrow_array_builder_append_values<arrow::MonthIntervalBuilder *>\n+    (GARROW_ARRAY_BUILDER(builder),\n+     values,\n+     values_length,\n+     is_valids,\n+     is_valids_length,\n+     error,\n+     \"[month-interval-array-builder][append-values]\");\n+}\n+\n+\n+G_DEFINE_TYPE(GArrowDayTimeIntervalArrayBuilder,\n+              garrow_day_time_interval_array_builder,\n+              GARROW_TYPE_ARRAY_BUILDER)\n+\n+static void\n+garrow_day_time_interval_array_builder_init(GArrowDayTimeIntervalArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_day_time_interval_array_builder_class_init(GArrowDayTimeIntervalArrayBuilderClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_day_time_interval_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowDayTimeIntervalArrayBuilder.\n+ *\n+ * Since: 8.0.0\n+ */\n+GArrowDayTimeIntervalArrayBuilder *\n+garrow_day_time_interval_array_builder_new(void)\n+{\n+  auto builder = garrow_array_builder_new(arrow::day_time_interval(),\n+                                          NULL,\n+                                          \"[day-time-interval-array-builder][new]\");\n+  return GARROW_DAY_TIME_INTERVAL_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_day_time_interval_array_builder_append_value:\n+ * @builder: A #GArrowDayTimeIntervalArrayBuilder.\n+ * @value: A #GArrowDayMillisecond.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 8.0.0\n+ */\n+gboolean\n+garrow_day_time_interval_array_builder_append_value(GArrowDayTimeIntervalArrayBuilder *builder,\n+                                                    GArrowDayMillisecond *value,\n+                                                    GError **error)\n+{\n+  if (value) {\n+    auto arrow_day_millisecond = garrow_day_millisecond_get_raw(value);\n+    return garrow_array_builder_append_value<arrow::DayTimeIntervalBuilder *>\n+      (GARROW_ARRAY_BUILDER(builder),\n+       *arrow_day_millisecond,\n+       error,\n+       \"[day-time-interval-array-builder][append-value]\");\n+  } else {\n+    return garrow_array_builder_append_null(GARROW_ARRAY_BUILDER(builder),\n+                                            error);\n+  }\n+}\n+\n+/**\n+ * garrow_day_time_interval_array_builder_append_values:\n+ * @builder: A #GArrowDayTimeIntervalArrayBuilder.\n+ * @values: (array length=values_length): The array of a #GArrowDayMillisecond.\n+ * @values_length: The length of `values`.\n+ * @is_valids: (nullable) (array length=is_valids_length): The array of\n+ *   boolean that shows whether the Nth value is valid or not. If the\n+ *   Nth `is_valids` is %TRUE, the Nth `values` is valid value. Otherwise\n+ *   the Nth value is null value.\n+ * @is_valids_length: The length of `is_valids`.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Append multiple values at once. It's more efficient than multiple\n+ * `append` calls.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 8.0.0\n+ */\n+gboolean\n+garrow_day_time_interval_array_builder_append_values(GArrowDayTimeIntervalArrayBuilder *builder,\n+                                                     const GArrowDayMillisecond **values,\n+                                                     gint64 values_length,\n+                                                     const gboolean *is_valids,\n+                                                     gint64 is_valids_length,\n+                                                     GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::DayTimeIntervalBuilder *>(garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+\n+  return garrow_array_builder_append_values(\n+    values,\n+    values_length,\n+    is_valids,\n+    is_valids_length,\n+    error,\n+    \"[day-time-interval-array-builder][append-values]\",\n+    [&arrow_builder](const GArrowDayMillisecond **values,\n+                     gint64 values_length,\n+                     const uint8_t *valid_bytes) -> arrow::Status {\n+      for (int i = 0; i < values_length; i++) {\n+        arrow::Status status;\n+        if (!valid_bytes || valid_bytes[i]) {\n+          status = arrow_builder->Append(*garrow_day_millisecond_get_raw(values[i]));\n+        } else {\n+          status = arrow_builder->AppendNull();\n+        }\n+        if (!status.ok()) {\n+          return status;\n+        }\n+      };\n+\n+      return arrow::Status::OK();\n+    });\n+}\n+\n+\n+G_DEFINE_TYPE(GArrowMonthDayNanoIntervalArrayBuilder,\n+              garrow_month_day_nano_interval_array_builder,\n+              GARROW_TYPE_ARRAY_BUILDER)\n+\n+static void\n+garrow_month_day_nano_interval_array_builder_init(GArrowMonthDayNanoIntervalArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_month_day_nano_interval_array_builder_class_init(GArrowMonthDayNanoIntervalArrayBuilderClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_month_day_nano_interval_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowMonthDayNanoIntervalArrayBuilder.\n+ *\n+ * Since: 8.0.0\n+ */\n+GArrowMonthDayNanoIntervalArrayBuilder *\n+garrow_month_day_nano_interval_array_builder_new(void)\n+{\n+  auto builder = garrow_array_builder_new(arrow::month_day_nano_interval(),\n+                                          NULL,\n+                                          \"[month-day-nano-interval-array-builder][new]\");\n+  return GARROW_MONTH_DAY_NANO_INTERVAL_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_month_day_nano_interval_array_builder_append_value:\n+ * @builder: A #GArrowMonthDayNanoIntervalArrayBuilder.\n+ * @value: A #GArrowMonthDayNano.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 8.0.0\n+ */\n+gboolean\n+garrow_month_day_nano_interval_array_builder_append_value(GArrowMonthDayNanoIntervalArrayBuilder *builder,\n+                                                          GArrowMonthDayNano *value,\n+                                                          GError **error)\n+{\n+  if (value) {\n+    auto arrow_day_millisecond = garrow_month_day_nano_get_raw(value);\n+    return garrow_array_builder_append_value<arrow::MonthDayNanoIntervalBuilder *>\n+      (GARROW_ARRAY_BUILDER(builder),\n+       *arrow_day_millisecond,\n\nReview comment:\n       ```suggestion\r\n          *arrow_month_day_nano,\r\n   ```\n\n##########\nFile path: c_glib/arrow-glib/basic-array.h\n##########\n@@ -617,6 +618,76 @@ const gint64 *garrow_time64_array_get_values(GArrowTime64Array *array,\n                                              gint64 *length);\n \n \n+#define GARROW_TYPE_MONTH_INTERVAL_ARRAY (garrow_month_interval_array_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowMonthIntervalArray,\n+                         garrow_month_interval_array,\n+                         GARROW,\n+                         MONTH_INTERVAL_ARRAY,\n+                         GArrowNumericArray)\n+struct _GArrowMonthIntervalArrayClass\n+{\n+  GArrowNumericArrayClass parent_class;\n+};\n+\n+GARROW_AVAILABLE_IN_8_0\n+GArrowMonthIntervalArray *garrow_month_interval_array_new(gint64 length,\n+                                                          GArrowBuffer *data,\n+                                                          GArrowBuffer *null_bitmap,\n+                                                          gint64 n_nulls);\n+GARROW_AVAILABLE_IN_8_0\n+gint32 garrow_month_interval_array_get_value(GArrowMonthIntervalArray *array,\n+                                             gint64 i);\n+GARROW_AVAILABLE_IN_8_0\n+const gint32 *garrow_month_interval_array_get_values(GArrowMonthIntervalArray *array,\n+                                             gint64 *length);\n+\n+\n+#define GARROW_TYPE_DAY_TIME_INTERVAL_ARRAY (garrow_day_time_interval_array_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowDayTimeIntervalArray,\n+                         garrow_day_time_interval_array,\n+                         GARROW,\n+                         DAY_TIME_INTERVAL_ARRAY,\n+                         GArrowNumericArray)\n\nReview comment:\n       ```suggestion\r\n                            GArrowPrimitiveArray)\r\n   ```\n\n##########\nFile path: c_glib/arrow-glib/basic-array.cpp\n##########\n@@ -2806,6 +2822,265 @@ garrow_time64_array_get_values(GArrowTime64Array *array,\n }\n \n \n+G_DEFINE_TYPE(GArrowMonthIntervalArray,\n+              garrow_month_interval_array,\n+              GARROW_TYPE_NUMERIC_ARRAY)\n+\n+static void\n+garrow_month_interval_array_init(GArrowMonthIntervalArray *object)\n+{\n+}\n+\n+static void\n+garrow_month_interval_array_class_init(GArrowMonthIntervalArrayClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_month_interval_array_new:\n+ * @length: The number of elements.\n+ * @data: The binary data in Arrow format of the array.\n+ * @null_bitmap: (nullable): The bitmap that shows null elements. The\n+ *   N-th element is null when the N-th bit is 0, not null otherwise.\n+ *   If the array has no null elements, the bitmap must be %NULL and\n+ *   @n_nulls is 0.\n+ * @n_nulls: The number of null elements. If -1 is specified, the\n+ *   number of nulls are computed from @null_bitmap.\n+ *\n+ * Returns: A newly created #GArrowMonthIntervalArray.\n+ *\n+ * Since: 8.0.0\n+ */\n+GArrowMonthIntervalArray *\n+garrow_month_interval_array_new(gint64 length,\n+                                GArrowBuffer *data,\n+                                GArrowBuffer *null_bitmap,\n+                                gint64 n_nulls)\n+{\n+  auto array = garrow_primitive_array_new<arrow::MonthIntervalType>(length,\n+                                                                    data,\n+                                                                    null_bitmap,\n+                                                                    n_nulls);\n+  return GARROW_MONTH_INTERVAL_ARRAY(array);\n+}\n+\n+/**\n+ * garrow_month_interval_array_get_value:\n+ * @array: A #GArrowMonthIntervalArray.\n+ * @i: The index of the target value.\n+ *\n+ * Returns: The @i-th value.\n+ *\n+ * Since: 8.0.0\n+ */\n+gint32\n+garrow_month_interval_array_get_value(GArrowMonthIntervalArray *array,\n+                                      gint64 i)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  return static_cast<arrow::MonthIntervalArray *>(arrow_array.get())->Value(i);\n+}\n+\n+/**\n+ * garrow_month_interval_array_get_values:\n+ * @array: A #GArrowMonthIntervalArray.\n+ * @length: (out): The number of values.\n+ *\n+ * Returns: (array length=length): The raw values.\n+ *\n+ * Since: 8.0.0\n+ */\n+const gint32 *\n+garrow_month_interval_array_get_values(GArrowMonthIntervalArray *array,\n+                                       gint64 *length)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  return garrow_array_get_values_raw<arrow::MonthIntervalType>(arrow_array, length);\n+}\n+\n+\n+G_DEFINE_TYPE(GArrowDayTimeIntervalArray,\n+              garrow_day_time_interval_array,\n+              GARROW_TYPE_NUMERIC_ARRAY)\n\nReview comment:\n       ```suggestion\r\n                 GARROW_TYPE_PRIMITIVE_ARRAY)\r\n   ```\n\n##########\nFile path: c_glib/arrow-glib/basic-array.h\n##########\n@@ -617,6 +618,76 @@ const gint64 *garrow_time64_array_get_values(GArrowTime64Array *array,\n                                              gint64 *length);\n \n \n+#define GARROW_TYPE_MONTH_INTERVAL_ARRAY (garrow_month_interval_array_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowMonthIntervalArray,\n+                         garrow_month_interval_array,\n+                         GARROW,\n+                         MONTH_INTERVAL_ARRAY,\n+                         GArrowNumericArray)\n+struct _GArrowMonthIntervalArrayClass\n+{\n+  GArrowNumericArrayClass parent_class;\n+};\n+\n+GARROW_AVAILABLE_IN_8_0\n+GArrowMonthIntervalArray *garrow_month_interval_array_new(gint64 length,\n+                                                          GArrowBuffer *data,\n+                                                          GArrowBuffer *null_bitmap,\n+                                                          gint64 n_nulls);\n+GARROW_AVAILABLE_IN_8_0\n+gint32 garrow_month_interval_array_get_value(GArrowMonthIntervalArray *array,\n+                                             gint64 i);\n+GARROW_AVAILABLE_IN_8_0\n+const gint32 *garrow_month_interval_array_get_values(GArrowMonthIntervalArray *array,\n+                                             gint64 *length);\n\nReview comment:\n       ```suggestion\r\n                                                        gint64 *length);\r\n   ```\n\n##########\nFile path: c_glib/arrow-glib/meson.build\n##########\n@@ -27,6 +27,7 @@ sources = files(\n   'composite-array.cpp',\n   'composite-data-type.cpp',\n   'datum.cpp',\n+  'interval.cpp',\n\nReview comment:\n       Could you keep this list in alphabetical order?\n\n##########\nFile path: c_glib/arrow-glib/basic-array.h\n##########\n@@ -617,6 +618,76 @@ const gint64 *garrow_time64_array_get_values(GArrowTime64Array *array,\n                                              gint64 *length);\n \n \n+#define GARROW_TYPE_MONTH_INTERVAL_ARRAY (garrow_month_interval_array_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowMonthIntervalArray,\n+                         garrow_month_interval_array,\n+                         GARROW,\n+                         MONTH_INTERVAL_ARRAY,\n+                         GArrowNumericArray)\n+struct _GArrowMonthIntervalArrayClass\n+{\n+  GArrowNumericArrayClass parent_class;\n+};\n+\n+GARROW_AVAILABLE_IN_8_0\n+GArrowMonthIntervalArray *garrow_month_interval_array_new(gint64 length,\n+                                                          GArrowBuffer *data,\n+                                                          GArrowBuffer *null_bitmap,\n+                                                          gint64 n_nulls);\n+GARROW_AVAILABLE_IN_8_0\n+gint32 garrow_month_interval_array_get_value(GArrowMonthIntervalArray *array,\n+                                             gint64 i);\n+GARROW_AVAILABLE_IN_8_0\n+const gint32 *garrow_month_interval_array_get_values(GArrowMonthIntervalArray *array,\n+                                             gint64 *length);\n+\n+\n+#define GARROW_TYPE_DAY_TIME_INTERVAL_ARRAY (garrow_day_time_interval_array_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowDayTimeIntervalArray,\n+                         garrow_day_time_interval_array,\n+                         GARROW,\n+                         DAY_TIME_INTERVAL_ARRAY,\n+                         GArrowNumericArray)\n+struct _GArrowDayTimeIntervalArrayClass\n+{\n+  GArrowNumericArrayClass parent_class;\n+};\n+\n+GARROW_AVAILABLE_IN_8_0\n+GArrowDayTimeIntervalArray *garrow_day_time_interval_array_new(gint64 length,\n+                                                               GArrowBuffer *data,\n+                                                               GArrowBuffer *null_bitmap,\n+                                                               gint64 n_nulls);\n+GARROW_AVAILABLE_IN_8_0\n+GArrowDayMillisecond *garrow_day_time_interval_array_get_value(GArrowDayTimeIntervalArray *array,\n+                                                               gint64 i);\n+GARROW_AVAILABLE_IN_8_0\n+GList *garrow_day_time_interval_array_get_values(GArrowDayTimeIntervalArray *array);\n+\n+\n+#define GARROW_TYPE_MONTH_DAY_NANO_INTERVAL_ARRAY (garrow_month_day_nano_interval_array_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowMonthDayNanoIntervalArray,\n+                         garrow_month_day_nano_interval_array,\n+                         GARROW,\n+                         MONTH_DAY_NANO_INTERVAL_ARRAY,\n+                         GArrowNumericArray)\n+struct _GArrowMonthDayNanoIntervalArrayClass\n+{\n+  GArrowNumericArrayClass parent_class;\n\nReview comment:\n       ```suggestion\r\n     GArrowPrimitiveArrayClass parent_class;\r\n   ```\n\n##########\nFile path: c_glib/arrow-glib/basic-array.h\n##########\n@@ -617,6 +618,76 @@ const gint64 *garrow_time64_array_get_values(GArrowTime64Array *array,\n                                              gint64 *length);\n \n \n+#define GARROW_TYPE_MONTH_INTERVAL_ARRAY (garrow_month_interval_array_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowMonthIntervalArray,\n+                         garrow_month_interval_array,\n+                         GARROW,\n+                         MONTH_INTERVAL_ARRAY,\n+                         GArrowNumericArray)\n+struct _GArrowMonthIntervalArrayClass\n+{\n+  GArrowNumericArrayClass parent_class;\n+};\n+\n+GARROW_AVAILABLE_IN_8_0\n+GArrowMonthIntervalArray *garrow_month_interval_array_new(gint64 length,\n+                                                          GArrowBuffer *data,\n+                                                          GArrowBuffer *null_bitmap,\n+                                                          gint64 n_nulls);\n+GARROW_AVAILABLE_IN_8_0\n+gint32 garrow_month_interval_array_get_value(GArrowMonthIntervalArray *array,\n+                                             gint64 i);\n+GARROW_AVAILABLE_IN_8_0\n+const gint32 *garrow_month_interval_array_get_values(GArrowMonthIntervalArray *array,\n+                                             gint64 *length);\n+\n+\n+#define GARROW_TYPE_DAY_TIME_INTERVAL_ARRAY (garrow_day_time_interval_array_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowDayTimeIntervalArray,\n+                         garrow_day_time_interval_array,\n+                         GARROW,\n+                         DAY_TIME_INTERVAL_ARRAY,\n+                         GArrowNumericArray)\n+struct _GArrowDayTimeIntervalArrayClass\n+{\n+  GArrowNumericArrayClass parent_class;\n+};\n+\n+GARROW_AVAILABLE_IN_8_0\n+GArrowDayTimeIntervalArray *garrow_day_time_interval_array_new(gint64 length,\n+                                                               GArrowBuffer *data,\n+                                                               GArrowBuffer *null_bitmap,\n+                                                               gint64 n_nulls);\n+GARROW_AVAILABLE_IN_8_0\n+GArrowDayMillisecond *garrow_day_time_interval_array_get_value(GArrowDayTimeIntervalArray *array,\n+                                                               gint64 i);\n+GARROW_AVAILABLE_IN_8_0\n+GList *garrow_day_time_interval_array_get_values(GArrowDayTimeIntervalArray *array);\n+\n+\n+#define GARROW_TYPE_MONTH_DAY_NANO_INTERVAL_ARRAY (garrow_month_day_nano_interval_array_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowMonthDayNanoIntervalArray,\n+                         garrow_month_day_nano_interval_array,\n+                         GARROW,\n+                         MONTH_DAY_NANO_INTERVAL_ARRAY,\n+                         GArrowNumericArray)\n\nReview comment:\n       ```suggestion\r\n                            GArrowPrimitiveArray)\r\n   ```\n\n##########\nFile path: c_glib/arrow-glib/basic-array.h\n##########\n@@ -617,6 +618,76 @@ const gint64 *garrow_time64_array_get_values(GArrowTime64Array *array,\n                                              gint64 *length);\n \n \n+#define GARROW_TYPE_MONTH_INTERVAL_ARRAY (garrow_month_interval_array_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowMonthIntervalArray,\n+                         garrow_month_interval_array,\n+                         GARROW,\n+                         MONTH_INTERVAL_ARRAY,\n+                         GArrowNumericArray)\n+struct _GArrowMonthIntervalArrayClass\n+{\n+  GArrowNumericArrayClass parent_class;\n+};\n+\n+GARROW_AVAILABLE_IN_8_0\n+GArrowMonthIntervalArray *garrow_month_interval_array_new(gint64 length,\n+                                                          GArrowBuffer *data,\n+                                                          GArrowBuffer *null_bitmap,\n+                                                          gint64 n_nulls);\n+GARROW_AVAILABLE_IN_8_0\n+gint32 garrow_month_interval_array_get_value(GArrowMonthIntervalArray *array,\n+                                             gint64 i);\n+GARROW_AVAILABLE_IN_8_0\n+const gint32 *garrow_month_interval_array_get_values(GArrowMonthIntervalArray *array,\n+                                             gint64 *length);\n+\n+\n+#define GARROW_TYPE_DAY_TIME_INTERVAL_ARRAY (garrow_day_time_interval_array_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowDayTimeIntervalArray,\n+                         garrow_day_time_interval_array,\n+                         GARROW,\n+                         DAY_TIME_INTERVAL_ARRAY,\n+                         GArrowNumericArray)\n+struct _GArrowDayTimeIntervalArrayClass\n+{\n+  GArrowNumericArrayClass parent_class;\n\nReview comment:\n       ```suggestion\r\n     GArrowPrimitiveArrayClass parent_class;\r\n   ```\n\n##########\nFile path: c_glib/arrow-glib/basic-array.h\n##########\n@@ -20,6 +20,7 @@\n #pragma once\n \n #include <arrow-glib/basic-data-type.h>\n+#include <arrow-glib/interval.h>\n\nReview comment:\n       Could you keep this list in alphabetical order?\n\n##########\nFile path: c_glib/arrow-glib/basic-array.cpp\n##########\n@@ -2806,6 +2822,265 @@ garrow_time64_array_get_values(GArrowTime64Array *array,\n }\n \n \n+G_DEFINE_TYPE(GArrowMonthIntervalArray,\n+              garrow_month_interval_array,\n+              GARROW_TYPE_NUMERIC_ARRAY)\n+\n+static void\n+garrow_month_interval_array_init(GArrowMonthIntervalArray *object)\n+{\n+}\n+\n+static void\n+garrow_month_interval_array_class_init(GArrowMonthIntervalArrayClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_month_interval_array_new:\n+ * @length: The number of elements.\n+ * @data: The binary data in Arrow format of the array.\n+ * @null_bitmap: (nullable): The bitmap that shows null elements. The\n+ *   N-th element is null when the N-th bit is 0, not null otherwise.\n+ *   If the array has no null elements, the bitmap must be %NULL and\n+ *   @n_nulls is 0.\n+ * @n_nulls: The number of null elements. If -1 is specified, the\n+ *   number of nulls are computed from @null_bitmap.\n+ *\n+ * Returns: A newly created #GArrowMonthIntervalArray.\n+ *\n+ * Since: 8.0.0\n+ */\n+GArrowMonthIntervalArray *\n+garrow_month_interval_array_new(gint64 length,\n+                                GArrowBuffer *data,\n+                                GArrowBuffer *null_bitmap,\n+                                gint64 n_nulls)\n+{\n+  auto array = garrow_primitive_array_new<arrow::MonthIntervalType>(length,\n+                                                                    data,\n+                                                                    null_bitmap,\n+                                                                    n_nulls);\n+  return GARROW_MONTH_INTERVAL_ARRAY(array);\n+}\n+\n+/**\n+ * garrow_month_interval_array_get_value:\n+ * @array: A #GArrowMonthIntervalArray.\n+ * @i: The index of the target value.\n+ *\n+ * Returns: The @i-th value.\n+ *\n+ * Since: 8.0.0\n+ */\n+gint32\n+garrow_month_interval_array_get_value(GArrowMonthIntervalArray *array,\n+                                      gint64 i)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  return static_cast<arrow::MonthIntervalArray *>(arrow_array.get())->Value(i);\n+}\n+\n+/**\n+ * garrow_month_interval_array_get_values:\n+ * @array: A #GArrowMonthIntervalArray.\n+ * @length: (out): The number of values.\n+ *\n+ * Returns: (array length=length): The raw values.\n+ *\n+ * Since: 8.0.0\n+ */\n+const gint32 *\n+garrow_month_interval_array_get_values(GArrowMonthIntervalArray *array,\n+                                       gint64 *length)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  return garrow_array_get_values_raw<arrow::MonthIntervalType>(arrow_array, length);\n+}\n+\n+\n+G_DEFINE_TYPE(GArrowDayTimeIntervalArray,\n+              garrow_day_time_interval_array,\n+              GARROW_TYPE_NUMERIC_ARRAY)\n+\n+static void\n+garrow_day_time_interval_array_init(GArrowDayTimeIntervalArray *object)\n+{\n+}\n+\n+static void\n+garrow_day_time_interval_array_class_init(GArrowDayTimeIntervalArrayClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_day_time_interval_array_new:\n+ * @length: The number of elements.\n+ * @data: The binary data in Arrow format of the array.\n+ * @null_bitmap: (nullable): The bitmap that shows null elements. The\n+ *   N-th element is null when the N-th bit is 0, not null otherwise.\n+ *   If the array has no null elements, the bitmap must be %NULL and\n+ *   @n_nulls is 0.\n+ * @n_nulls: The number of null elements. If -1 is specified, the\n+ *   number of nulls are computed from @null_bitmap.\n+ *\n+ * Returns: A newly created #GArrowDayTimeIntervalArray.\n+ *\n+ * Since: 8.0.0\n+ */\n+GArrowDayTimeIntervalArray *\n+garrow_day_time_interval_array_new(gint64 length,\n+                                   GArrowBuffer *data,\n+                                   GArrowBuffer *null_bitmap,\n+                                   gint64 n_nulls)\n+{\n+  auto array = garrow_primitive_array_new<arrow::DayTimeIntervalType>(length,\n+                                                                      data,\n+                                                                      null_bitmap,\n+                                                                      n_nulls);\n+  return GARROW_DAY_TIME_INTERVAL_ARRAY(array);\n+}\n+\n+/**\n+ * garrow_day_time_interval_array_get_value:\n+ * @array: A #GArrowDayTimeIntervalArray.\n+ * @i: The index of the target value.\n+ *\n+ * Returns: (transfer full): The @i-th value.\n+ *\n+ * Since: 8.0.0\n+ */\n+GArrowDayMillisecond *\n+garrow_day_time_interval_array_get_value(GArrowDayTimeIntervalArray *array,\n+                                         gint64 i)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  auto arrow_day_time_interval_array =\n+    std::static_pointer_cast<arrow::DayTimeIntervalArray>(arrow_array);\n+  auto arrow_day_time_interval = arrow_day_time_interval_array->GetValue(i);\n+  return garrow_day_millisecond_new_raw(&arrow_day_time_interval);\n+}\n+\n+/**\n+ * garrow_day_time_interval_array_get_values:\n+ * @array: A #GArrowDayTimeIntervalArray.\n+ *\n+ * Returns: (nullable) (element-type GArrowDayMillisecond) (transfer full):\n+ *   The returned list of #GArrowDayMillisecond on success, %NULL on error.\n+ *\n+ * Since: 8.0.0\n+ */\n+GList *\n+garrow_day_time_interval_array_get_values(GArrowDayTimeIntervalArray *array)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  auto arrow_day_time_interval_array =\n+    std::static_pointer_cast<arrow::DayTimeIntervalArray>(arrow_array);\n+  auto length = arrow_day_time_interval_array->length();\n+  GList *values = NULL;\n+  for (gint64 i = 0; i < length; ++i) {\n+    if (arrow_day_time_interval_array->IsValid(i)) {\n+      auto arrow_day_time_interval = arrow_day_time_interval_array->GetValue(i);\n+      values = g_list_prepend(values, garrow_day_millisecond_new_raw(&arrow_day_time_interval));\n+    } else {\n+      values = g_list_prepend(values, NULL);\n+    }\n+  }\n+  return g_list_reverse(values);\n+}\n+\n+\n+G_DEFINE_TYPE(GArrowMonthDayNanoIntervalArray,\n+              garrow_month_day_nano_interval_array,\n+              GARROW_TYPE_NUMERIC_ARRAY)\n+\n+static void\n+garrow_month_day_nano_interval_array_init(GArrowMonthDayNanoIntervalArray *object)\n+{\n+}\n+\n+static void\n+garrow_month_day_nano_interval_array_class_init(GArrowMonthDayNanoIntervalArrayClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_month_day_nano_interval_array_new:\n+ * @length: The number of elements.\n+ * @data: The binary data in Arrow format of the array.\n+ * @null_bitmap: (nullable): The bitmap that shows null elements. The\n+ *   N-th element is null when the N-th bit is 0, not null otherwise.\n+ *   If the array has no null elements, the bitmap must be %NULL and\n+ *   @n_nulls is 0.\n+ * @n_nulls: The number of null elements. If -1 is specified, the\n+ *   number of nulls are computed from @null_bitmap.\n+ *\n+ * Returns: A newly created #GArrowMonthDayNanoIntervalArray.\n+ *\n+ * Since: 8.0.0\n+ */\n+GArrowMonthDayNanoIntervalArray *\n+garrow_month_day_nano_interval_array_new(gint64 length,\n+                                         GArrowBuffer *data,\n+                                         GArrowBuffer *null_bitmap,\n+                                         gint64 n_nulls)\n+{\n+  auto array = garrow_primitive_array_new<arrow::MonthDayNanoIntervalType>(length,\n+                                                                           data,\n+                                                                           null_bitmap,\n+                                                                           n_nulls);\n+  return GARROW_MONTH_DAY_NANO_INTERVAL_ARRAY(array);\n+}\n+\n+/**\n+ * garrow_month_day_nano_interval_array_get_value:\n+ * @array: A #GArrowMonthDayNanoIntervalArray.\n+ * @i: The index of the target value.\n+ *\n+ * Returns: (transfer full): The @i-th value.\n+ *\n+ * Since: 8.0.0\n+ */\n+GArrowMonthDayNano *\n+garrow_month_day_nano_interval_array_get_value(GArrowMonthDayNanoIntervalArray *array,\n+                                               gint64 i)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  auto arrow_month_day_nano_interval_array =\n+    std::static_pointer_cast<arrow::MonthDayNanoIntervalArray>(arrow_array);\n+  auto arrow_month_day_nano_interval = arrow_month_day_nano_interval_array->GetValue(i);\n+  return garrow_month_day_nano_new_raw(&arrow_month_day_nano_interval);\n+}\n+\n+/**\n+ * garrow_month_day_nano_interval_array_get_values:\n+ * @array: A #GArrowMonthDayNanoIntervalArray.\n+ *\n+ * Returns: (nullable) (element-type GArrowMonthDayNano) (transfer full):\n+ *   The returned list of #GArrowMonthDayNano on success, %NULL on error.\n\nReview comment:\n       ```suggestion\r\n    *   The list of #GArrowMonthDayNano.\r\n   ```\n\n##########\nFile path: c_glib/arrow-glib/scalar.cpp\n##########\n@@ -20,6 +20,7 @@\n #include <arrow-glib/basic-array.hpp>\n #include <arrow-glib/buffer.hpp>\n #include <arrow-glib/data-type.hpp>\n+#include <arrow-glib/interval.hpp>\n\nReview comment:\n       Could you keep this list in alphabetical order?\n\n##########\nFile path: c_glib/arrow-glib/basic-array.cpp\n##########\n@@ -2806,6 +2822,265 @@ garrow_time64_array_get_values(GArrowTime64Array *array,\n }\n \n \n+G_DEFINE_TYPE(GArrowMonthIntervalArray,\n+              garrow_month_interval_array,\n+              GARROW_TYPE_NUMERIC_ARRAY)\n+\n+static void\n+garrow_month_interval_array_init(GArrowMonthIntervalArray *object)\n+{\n+}\n+\n+static void\n+garrow_month_interval_array_class_init(GArrowMonthIntervalArrayClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_month_interval_array_new:\n+ * @length: The number of elements.\n+ * @data: The binary data in Arrow format of the array.\n+ * @null_bitmap: (nullable): The bitmap that shows null elements. The\n+ *   N-th element is null when the N-th bit is 0, not null otherwise.\n+ *   If the array has no null elements, the bitmap must be %NULL and\n+ *   @n_nulls is 0.\n+ * @n_nulls: The number of null elements. If -1 is specified, the\n+ *   number of nulls are computed from @null_bitmap.\n+ *\n+ * Returns: A newly created #GArrowMonthIntervalArray.\n+ *\n+ * Since: 8.0.0\n+ */\n+GArrowMonthIntervalArray *\n+garrow_month_interval_array_new(gint64 length,\n+                                GArrowBuffer *data,\n+                                GArrowBuffer *null_bitmap,\n+                                gint64 n_nulls)\n+{\n+  auto array = garrow_primitive_array_new<arrow::MonthIntervalType>(length,\n+                                                                    data,\n+                                                                    null_bitmap,\n+                                                                    n_nulls);\n+  return GARROW_MONTH_INTERVAL_ARRAY(array);\n+}\n+\n+/**\n+ * garrow_month_interval_array_get_value:\n+ * @array: A #GArrowMonthIntervalArray.\n+ * @i: The index of the target value.\n+ *\n+ * Returns: The @i-th value.\n+ *\n+ * Since: 8.0.0\n+ */\n+gint32\n+garrow_month_interval_array_get_value(GArrowMonthIntervalArray *array,\n+                                      gint64 i)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  return static_cast<arrow::MonthIntervalArray *>(arrow_array.get())->Value(i);\n+}\n+\n+/**\n+ * garrow_month_interval_array_get_values:\n+ * @array: A #GArrowMonthIntervalArray.\n+ * @length: (out): The number of values.\n+ *\n+ * Returns: (array length=length): The raw values.\n+ *\n+ * Since: 8.0.0\n+ */\n+const gint32 *\n+garrow_month_interval_array_get_values(GArrowMonthIntervalArray *array,\n+                                       gint64 *length)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  return garrow_array_get_values_raw<arrow::MonthIntervalType>(arrow_array, length);\n+}\n+\n+\n+G_DEFINE_TYPE(GArrowDayTimeIntervalArray,\n+              garrow_day_time_interval_array,\n+              GARROW_TYPE_NUMERIC_ARRAY)\n+\n+static void\n+garrow_day_time_interval_array_init(GArrowDayTimeIntervalArray *object)\n+{\n+}\n+\n+static void\n+garrow_day_time_interval_array_class_init(GArrowDayTimeIntervalArrayClass *klass)\n+{\n+}\n+\n+/**\n+ * garrow_day_time_interval_array_new:\n+ * @length: The number of elements.\n+ * @data: The binary data in Arrow format of the array.\n+ * @null_bitmap: (nullable): The bitmap that shows null elements. The\n+ *   N-th element is null when the N-th bit is 0, not null otherwise.\n+ *   If the array has no null elements, the bitmap must be %NULL and\n+ *   @n_nulls is 0.\n+ * @n_nulls: The number of null elements. If -1 is specified, the\n+ *   number of nulls are computed from @null_bitmap.\n+ *\n+ * Returns: A newly created #GArrowDayTimeIntervalArray.\n+ *\n+ * Since: 8.0.0\n+ */\n+GArrowDayTimeIntervalArray *\n+garrow_day_time_interval_array_new(gint64 length,\n+                                   GArrowBuffer *data,\n+                                   GArrowBuffer *null_bitmap,\n+                                   gint64 n_nulls)\n+{\n+  auto array = garrow_primitive_array_new<arrow::DayTimeIntervalType>(length,\n+                                                                      data,\n+                                                                      null_bitmap,\n+                                                                      n_nulls);\n+  return GARROW_DAY_TIME_INTERVAL_ARRAY(array);\n+}\n+\n+/**\n+ * garrow_day_time_interval_array_get_value:\n+ * @array: A #GArrowDayTimeIntervalArray.\n+ * @i: The index of the target value.\n+ *\n+ * Returns: (transfer full): The @i-th value.\n+ *\n+ * Since: 8.0.0\n+ */\n+GArrowDayMillisecond *\n+garrow_day_time_interval_array_get_value(GArrowDayTimeIntervalArray *array,\n+                                         gint64 i)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  auto arrow_day_time_interval_array =\n+    std::static_pointer_cast<arrow::DayTimeIntervalArray>(arrow_array);\n+  auto arrow_day_time_interval = arrow_day_time_interval_array->GetValue(i);\n+  return garrow_day_millisecond_new_raw(&arrow_day_time_interval);\n+}\n+\n+/**\n+ * garrow_day_time_interval_array_get_values:\n+ * @array: A #GArrowDayTimeIntervalArray.\n+ *\n+ * Returns: (nullable) (element-type GArrowDayMillisecond) (transfer full):\n+ *   The returned list of #GArrowDayMillisecond on success, %NULL on error.\n+ *\n+ * Since: 8.0.0\n+ */\n+GList *\n+garrow_day_time_interval_array_get_values(GArrowDayTimeIntervalArray *array)\n+{\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n+  auto arrow_day_time_interval_array =\n+    std::static_pointer_cast<arrow::DayTimeIntervalArray>(arrow_array);\n+  auto length = arrow_day_time_interval_array->length();\n+  GList *values = NULL;\n+  for (gint64 i = 0; i < length; ++i) {\n+    if (arrow_day_time_interval_array->IsValid(i)) {\n+      auto arrow_day_time_interval = arrow_day_time_interval_array->GetValue(i);\n+      values = g_list_prepend(values, garrow_day_millisecond_new_raw(&arrow_day_time_interval));\n+    } else {\n+      values = g_list_prepend(values, NULL);\n+    }\n+  }\n+  return g_list_reverse(values);\n+}\n+\n+\n+G_DEFINE_TYPE(GArrowMonthDayNanoIntervalArray,\n+              garrow_month_day_nano_interval_array,\n+              GARROW_TYPE_NUMERIC_ARRAY)\n\nReview comment:\n       ```suggestion\r\n                 GARROW_TYPE_PRIMITIVE_ARRAY)\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T02:32:41.591+0000",
                    "updated": "2022-01-27T02:32:41.591+0000",
                    "started": "2022-01-27T02:32:41.591+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716161",
                    "issueId": "13424925"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424925/worklog/716162",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #12269:\nURL: https://github.com/apache/arrow/pull/12269#issuecomment-1022789347\n\n\n   Could you also list all new classes in the description?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T02:34:46.853+0000",
                    "updated": "2022-01-27T02:34:46.853+0000",
                    "started": "2022-01-27T02:34:46.853+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716162",
                    "issueId": "13424925"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424925/worklog/716481",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "okadakk commented on pull request #12269:\nURL: https://github.com/apache/arrow/pull/12269#issuecomment-1023317305\n\n\n   @kou \r\n   Thank you reviewing!\r\n   I add interval.{h, hpp} to arrow-glib.{h, hpp} and fixed order!\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T15:15:03.239+0000",
                    "updated": "2022-01-27T15:15:03.239+0000",
                    "started": "2022-01-27T15:15:03.239+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716481",
                    "issueId": "13424925"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424925/worklog/716961",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #12269:\nURL: https://github.com/apache/arrow/pull/12269#issuecomment-1024046035\n\n\n   Thanks.\r\n   I've pushed fixes for the followings:\r\n   \r\n   * Long line\r\n   * Indent\r\n   * Poor spec description\r\n   \r\n   It seems that we need auto formatter...\r\n   \r\n   TODO: Review tests.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-28T09:42:24.181+0000",
                    "updated": "2022-01-28T09:42:24.181+0000",
                    "started": "2022-01-28T09:42:24.181+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716961",
                    "issueId": "13424925"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424925/worklog/716962",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #12269:\nURL: https://github.com/apache/arrow/pull/12269#issuecomment-1024047245\n\n\n   Could you rebase on master after you pull my changes to remove diffs for `version.h.in` from this pull request?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-28T09:44:00.374+0000",
                    "updated": "2022-01-28T09:44:00.374+0000",
                    "started": "2022-01-28T09:44:00.374+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716962",
                    "issueId": "13424925"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424925/worklog/717460",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #12269:\nURL: https://github.com/apache/arrow/pull/12269#discussion_r794988539\n\n\n\n##########\nFile path: c_glib/test/test-month-day-nano-interval-array.rb\n##########\n@@ -0,0 +1,49 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestMonthDayNanoIntervalArray < Test::Unit::TestCase\n+  include Helper::Buildable\n+\n+  def test_new\n+    zero_month_day_nano = Arrow::MonthDayNano.new(0, 0, 0)\n+    first_month_day_nano = Arrow::MonthDayNano.new(1, 10, 100)\n+    second_month_day_nano = Arrow::MonthDayNano.new(3, 30, 100)\n+    raw_data = [zero_month_day_nano, first_month_day_nano, second_month_day_nano]\n+    array = build_month_day_nano_interval_array(raw_data)\n+    assert_equal(array.get_value(1).month, first_month_day_nano.month)\n+  end\n+\n+  def test_value\n+    month_day_nano = Arrow::MonthDayNano.new(3, 30, 100)\n+\n+    builder = Arrow::MonthDayNanoIntervalArrayBuilder.new\n+    builder.append_value(month_day_nano)\n+    array = builder.finish\n+    assert_equal(month_day_nano.day, array.get_value(0).day)\n\nReview comment:\n       ```suggestion\r\n       assert_equal(month_day_nano, array.get_value(0))\r\n   ```\n\n##########\nFile path: c_glib/test/test-day-time-interval-array.rb\n##########\n@@ -0,0 +1,50 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestDayTimeIntervalArray < Test::Unit::TestCase\n+  include Helper::Buildable\n+  include Helper::Omittable\n+\n+  def test_new\n\nReview comment:\n       Is this redundant?\n\n##########\nFile path: c_glib/test/test-month-day-nano-interval-array.rb\n##########\n@@ -0,0 +1,49 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestMonthDayNanoIntervalArray < Test::Unit::TestCase\n+  include Helper::Buildable\n+\n+  def test_new\n+    zero_month_day_nano = Arrow::MonthDayNano.new(0, 0, 0)\n+    first_month_day_nano = Arrow::MonthDayNano.new(1, 10, 100)\n+    second_month_day_nano = Arrow::MonthDayNano.new(3, 30, 100)\n+    raw_data = [zero_month_day_nano, first_month_day_nano, second_month_day_nano]\n+    array = build_month_day_nano_interval_array(raw_data)\n+    assert_equal(array.get_value(1).month, first_month_day_nano.month)\n\nReview comment:\n       ```suggestion\r\n       assert_equal(first_month_day_nano, array.get_value(1))\r\n   ```\n\n##########\nFile path: c_glib/test/test-month-interval-array.rb\n##########\n@@ -0,0 +1,65 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestMonthIntervalArray < Test::Unit::TestCase\n+  include Helper::Buildable\n+  include Helper::Omittable\n+\n+  def test_new\n+    after_month = 1\n+    raw_data = [0, after_month]\n+    assert_equal(build_month_interval_array([*raw_data, nil]),\n+                 Arrow::MonthIntervalArray.new(3,\n+                                               Arrow::Buffer.new(raw_data.pack(\"l*\")),\n+                                               Arrow::Buffer.new([0b011].pack(\"C*\")),\n+                                               -1))\n+  end\n+\n+  def test_buffer\n+    before_month = 1\n+    after_month = 12\n+\n+    builder = Arrow::MonthIntervalArrayBuilder.new\n+    builder.append_value(0)\n+    builder.append_value(before_month)\n+    builder.append_value(after_month)\n+    array = builder.finish\n+    assert_equal([0, before_month, after_month].pack(\"l*\"),\n\nReview comment:\n       ```suggestion\r\n       builder.append_value(1)\r\n       builder.append_value(12)\r\n       array = builder.finish\r\n       assert_equal([0, 1, 12].pack(\"l*\"),\r\n   ```\n\n##########\nFile path: c_glib/test/test-month-interval-array.rb\n##########\n@@ -0,0 +1,65 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestMonthIntervalArray < Test::Unit::TestCase\n+  include Helper::Buildable\n+  include Helper::Omittable\n+\n+  def test_new\n+    after_month = 1\n\nReview comment:\n       Did you copy `after_` prefix from other test such as `after_epoch` in `test-timestamp-array.rb`?\r\n   The `after_` prefix means \"a value after epoch\".\r\n   But `after_` prefix here is meaning because there is not a base value such as epoch.\r\n   \r\n   How about simply using `raw_data = [0, 1]` here? \n\n##########\nFile path: c_glib/test/test-month-interval-array.rb\n##########\n@@ -0,0 +1,65 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestMonthIntervalArray < Test::Unit::TestCase\n+  include Helper::Buildable\n+  include Helper::Omittable\n+\n+  def test_new\n+    after_month = 1\n+    raw_data = [0, after_month]\n+    assert_equal(build_month_interval_array([*raw_data, nil]),\n+                 Arrow::MonthIntervalArray.new(3,\n+                                               Arrow::Buffer.new(raw_data.pack(\"l*\")),\n+                                               Arrow::Buffer.new([0b011].pack(\"C*\")),\n+                                               -1))\n+  end\n+\n+  def test_buffer\n+    before_month = 1\n+    after_month = 12\n+\n+    builder = Arrow::MonthIntervalArrayBuilder.new\n+    builder.append_value(0)\n+    builder.append_value(before_month)\n+    builder.append_value(after_month)\n+    array = builder.finish\n+    assert_equal([0, before_month, after_month].pack(\"l*\"),\n+                 array.buffer.data.to_s)\n+  end\n+\n+  def test_value\n+    after_month = 1\n+\n+    builder = Arrow::MonthIntervalArrayBuilder.new\n+    builder.append_value(after_month)\n+    array = builder.finish\n+    assert_equal(after_month, array.get_value(0))\n+  end\n+\n+  def test_values\n+    before_month = 1\n+    after_month = 12\n+\n+    builder = Arrow::MonthIntervalArrayBuilder.new\n+    builder.append_value(0)\n+    builder.append_value(before_month)\n+    builder.append_value(after_month)\n+    array = builder.finish\n+    assert_equal([0, before_month, after_month], array.values)\n\nReview comment:\n       ```suggestion\r\n       builder.append_value(1)\r\n       builder.append_value(12)\r\n       array = builder.finish\r\n       assert_equal([0, 1, 12], array.values)\r\n   ```\n\n##########\nFile path: c_glib/test/test-day-millisecond.rb\n##########\n@@ -0,0 +1,64 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestDayMillisecond < Test::Unit::TestCase\n+  include Helper::Omittable\n+\n+  def test_equal\n+    day_millisecond = Arrow::DayMillisecond.new(3, 100)\n+    other_day_millisecond1 = Arrow::DayMillisecond.new(3, 100)\n+    other_day_millisecond2 = Arrow::DayMillisecond.new(3, 101)\n+    assert_equal([\n+                   true,\n+                   false,\n+                 ],\n+                 [\n+                   day_millisecond == other_day_millisecond1,\n+                   day_millisecond == other_day_millisecond2,\n+                 ])\n+  end\n+\n+  def test_not_equal\n+    day_millisecond = Arrow::DayMillisecond.new(3, 100)\n+    other_day_millisecond1 = Arrow::DayMillisecond.new(3, 100)\n+    other_day_millisecond2 = Arrow::DayMillisecond.new(3, 101)\n+    assert_equal([\n+                   false,\n+                   true,\n+                 ],\n+                 [\n+                   day_millisecond != other_day_millisecond1,\n+                   day_millisecond != other_day_millisecond2,\n+                 ])\n+  end\n+\n+  def test_less_than\n+    day_millisecond = Arrow::DayMillisecond.new(3, 100)\n+    other_day_millisecond1 = Arrow::DayMillisecond.new(3, 100)\n+    other_day_millisecond2 = Arrow::DayMillisecond.new(3, 101)\n+    assert_equal([\n+                   false,\n+                   true,\n+                   false\n+                 ],\n+                 [\n+                   day_millisecond < other_day_millisecond1,\n+                   day_millisecond < other_day_millisecond2,\n+                   day_millisecond < day_millisecond,\n\nReview comment:\n       Is this redundant?\n\n##########\nFile path: c_glib/test/test-month-day-nano-interval-array.rb\n##########\n@@ -0,0 +1,49 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestMonthDayNanoIntervalArray < Test::Unit::TestCase\n+  include Helper::Buildable\n+\n+  def test_new\n\nReview comment:\n       It seems that this test is redundant.\r\n   Do `test_value` and `test_values` cover this case?\n\n##########\nFile path: c_glib/test/test-month-interval-array.rb\n##########\n@@ -0,0 +1,65 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestMonthIntervalArray < Test::Unit::TestCase\n+  include Helper::Buildable\n+  include Helper::Omittable\n+\n+  def test_new\n+    after_month = 1\n+    raw_data = [0, after_month]\n+    assert_equal(build_month_interval_array([*raw_data, nil]),\n+                 Arrow::MonthIntervalArray.new(3,\n+                                               Arrow::Buffer.new(raw_data.pack(\"l*\")),\n+                                               Arrow::Buffer.new([0b011].pack(\"C*\")),\n+                                               -1))\n+  end\n+\n+  def test_buffer\n+    before_month = 1\n+    after_month = 12\n+\n+    builder = Arrow::MonthIntervalArrayBuilder.new\n+    builder.append_value(0)\n+    builder.append_value(before_month)\n+    builder.append_value(after_month)\n+    array = builder.finish\n+    assert_equal([0, before_month, after_month].pack(\"l*\"),\n+                 array.buffer.data.to_s)\n+  end\n+\n+  def test_value\n+    after_month = 1\n+\n+    builder = Arrow::MonthIntervalArrayBuilder.new\n+    builder.append_value(after_month)\n+    array = builder.finish\n+    assert_equal(after_month, array.get_value(0))\n\nReview comment:\n       ```suggestion\r\n       builder.append_value(1)\r\n       array = builder.finish\r\n       assert_equal(1, array.get_value(0))\r\n   ```\n\n##########\nFile path: c_glib/test/test-month-day-nano-interval-scalar.rb\n##########\n@@ -0,0 +1,47 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestMonthDayNanoIntervalScalar < Test::Unit::TestCase\n+  def setup\n+    @value = Arrow::MonthDayNano.new(3, 10, 100)\n+    @scalar = Arrow::MonthDayNanoIntervalScalar.new(@value)\n+  end\n+\n+  def test_data_type\n+    assert_equal(Arrow::MonthDayNanoIntervalDataType.new,\n+                 @scalar.data_type)\n+  end\n+\n+  def test_valid?\n+    assert do\n+      @scalar.valid?\n+    end\n+  end\n+\n+  def test_equal\n+    assert_equal(Arrow::MonthDayNanoIntervalScalar.new(@value),\n+                 @scalar)\n+  end\n+\n+  def test_to_s\n+    assert_equal(\"3M10d100ns\", @scalar.to_s)\n+  end\n+\n+  def test_value\n+    assert_equal(@value.month, @scalar.value.month)\n\nReview comment:\n       ```suggestion\r\n       assert_equal(@value, @scalar.value)\r\n   ```\n\n##########\nFile path: c_glib/test/test-day-time-interval-scalar.rb\n##########\n@@ -0,0 +1,47 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestDayTimeIntervalScalar < Test::Unit::TestCase\n+  def setup\n+    @value = Arrow::DayMillisecond.new(3, 100)\n+    @scalar = Arrow::DayTimeIntervalScalar.new(@value)\n+  end\n+\n+  def test_data_type\n+    assert_equal(Arrow::DayTimeIntervalDataType.new,\n+                 @scalar.data_type)\n+  end\n+\n+  def test_valid?\n+    assert do\n+      @scalar.valid?\n+    end\n+  end\n+\n+  def test_equal\n+    assert_equal(Arrow::DayTimeIntervalScalar.new(@value),\n+                 @scalar)\n+  end\n+\n+  def test_to_s\n+    assert_equal(\"3d100ms\", @scalar.to_s)\n+  end\n+\n+  def test_value\n+    assert_equal(@value.day, @scalar.value.day)\n\nReview comment:\n       ```suggestion\r\n       assert_equal(@value, @scalar.value)\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-29T02:56:38.279+0000",
                    "updated": "2022-01-29T02:56:38.279+0000",
                    "started": "2022-01-29T02:56:38.279+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "717460",
                    "issueId": "13424925"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424925/worklog/717554",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "okadakk commented on pull request #12269:\nURL: https://github.com/apache/arrow/pull/12269#issuecomment-1024935015\n\n\n   @kou\r\n   Thanks!!\r\n   I remove redundant tests and rebase master!\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-29T15:46:00.539+0000",
                    "updated": "2022-01-29T15:46:00.539+0000",
                    "started": "2022-01-29T15:46:00.539+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "717554",
                    "issueId": "13424925"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424925/worklog/717608",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou closed pull request #12269:\nURL: https://github.com/apache/arrow/pull/12269\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-29T22:47:03.091+0000",
                    "updated": "2022-01-29T22:47:03.091+0000",
                    "started": "2022-01-29T22:47:03.090+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "717608",
                    "issueId": "13424925"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424925/worklog/717609",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #12269:\nURL: https://github.com/apache/arrow/pull/12269#issuecomment-1025001545\n\n\n   Benchmark runs are scheduled for baseline = ff37b7adf21b319c0d08b2eb09ecbd8db0794cbe and contender = cc4e2a54309813e6bbbb36ba50bcd22a7b71d3d9. cc4e2a54309813e6bbbb36ba50bcd22a7b71d3d9 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Scheduled] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/bf5aad5c81904e6a979bea4d22dedebf...e0db596a8d404e35a7afb25e7d9c5778/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/34ce9209b6ff408e9947aab371b1e76b...d30f613631f141388d9bdd6d242d887e/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/b1a5af9b5a8b45b5a6d111befb66981e...d51e04c9b4d34ea6b6c0eee5114e954e/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-29T22:51:26.041+0000",
                    "updated": "2022-01-29T22:51:26.041+0000",
                    "started": "2022-01-29T22:51:26.041+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "717609",
                    "issueId": "13424925"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424925/worklog/717610",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #12269:\nURL: https://github.com/apache/arrow/pull/12269#issuecomment-1025001545\n\n\n   Benchmark runs are scheduled for baseline = ff37b7adf21b319c0d08b2eb09ecbd8db0794cbe and contender = cc4e2a54309813e6bbbb36ba50bcd22a7b71d3d9. cc4e2a54309813e6bbbb36ba50bcd22a7b71d3d9 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/bf5aad5c81904e6a979bea4d22dedebf...e0db596a8d404e35a7afb25e7d9c5778/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/34ce9209b6ff408e9947aab371b1e76b...d30f613631f141388d9bdd6d242d887e/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/b1a5af9b5a8b45b5a6d111befb66981e...d51e04c9b4d34ea6b6c0eee5114e954e/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-29T23:01:41.901+0000",
                    "updated": "2022-01-29T23:01:41.901+0000",
                    "started": "2022-01-29T23:01:41.901+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "717610",
                    "issueId": "13424925"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424925/worklog/717625",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #12269:\nURL: https://github.com/apache/arrow/pull/12269#issuecomment-1025001545\n\n\n   Benchmark runs are scheduled for baseline = ff37b7adf21b319c0d08b2eb09ecbd8db0794cbe and contender = cc4e2a54309813e6bbbb36ba50bcd22a7b71d3d9. cc4e2a54309813e6bbbb36ba50bcd22a7b71d3d9 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/bf5aad5c81904e6a979bea4d22dedebf...e0db596a8d404e35a7afb25e7d9c5778/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/34ce9209b6ff408e9947aab371b1e76b...d30f613631f141388d9bdd6d242d887e/)\n   [Finished :arrow_down:0.04% :arrow_up:0.04%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/b1a5af9b5a8b45b5a6d111befb66981e...d51e04c9b4d34ea6b6c0eee5114e954e/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-30T01:21:34.384+0000",
                    "updated": "2022-01-30T01:21:34.384+0000",
                    "started": "2022-01-30T01:21:34.384+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "717625",
                    "issueId": "13424925"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424925/worklog/717662",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "okadakk commented on pull request #12269:\nURL: https://github.com/apache/arrow/pull/12269#issuecomment-1025147669\n\n\n   I'm sorry I made a pull request all at once. Try to split from the next. Thank you for your quick review!\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-30T13:48:51.147+0000",
                    "updated": "2022-01-30T13:48:51.147+0000",
                    "started": "2022-01-30T13:48:51.146+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "717662",
                    "issueId": "13424925"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424925/worklog/717721",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #12269:\nURL: https://github.com/apache/arrow/pull/12269#issuecomment-1025001545\n\n\n   Benchmark runs are scheduled for baseline = ff37b7adf21b319c0d08b2eb09ecbd8db0794cbe and contender = cc4e2a54309813e6bbbb36ba50bcd22a7b71d3d9. cc4e2a54309813e6bbbb36ba50bcd22a7b71d3d9 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/bf5aad5c81904e6a979bea4d22dedebf...e0db596a8d404e35a7afb25e7d9c5778/)\n   [Finished :arrow_down:0.36% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/34ce9209b6ff408e9947aab371b1e76b...d30f613631f141388d9bdd6d242d887e/)\n   [Finished :arrow_down:0.04% :arrow_up:0.04%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/b1a5af9b5a8b45b5a6d111befb66981e...d51e04c9b4d34ea6b6c0eee5114e954e/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-31T00:21:33.032+0000",
                    "updated": "2022-01-31T00:21:33.032+0000",
                    "started": "2022-01-31T00:21:33.032+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "717721",
                    "issueId": "13424925"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 9000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2636963[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29f24f6a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@768fba6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3c5a6d3e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@a053ca3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5904a645[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@19f1d308[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@76ad7e95[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@556eb4c7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@292406a1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3edaf91e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@239e6186[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9000,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Jan 29 22:46:53 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-01-29T22:46:53.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15462/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-01-26T14:06:38.000+0000",
        "updated": "2022-01-31T00:21:33.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Add GArrow{Month,DayTime,MonthDayNano}Interval{Scalar,Array,ArrayBuilder}",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424925/comment/17484250",
                    "id": "17484250",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 12269\n[https://github.com/apache/arrow/pull/12269]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2022-01-29T22:46:53.011+0000",
                    "updated": "2022-01-29T22:46:53.011+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0yz00:",
        "customfield_12314139": null
    }
}