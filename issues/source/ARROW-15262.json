{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13420908",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908",
    "key": "ARROW-15262",
    "fields": {
        "parent": {
            "id": "13420903",
            "key": "ARROW-15257",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13420903",
            "fields": {
                "summary": "[C++] Simplify ExecPlan's C++ interface",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                    "description": "The issue is open and ready for the assignee to start work on it.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                    "name": "Open",
                    "id": "1",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                        "id": 2,
                        "key": "new",
                        "colorName": "blue-gray",
                        "name": "To Do"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
            "name": "vibhatha",
            "key": "vibhatha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Vibhatha Lakmal Abeykoon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15262/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 28,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/worklog/716351",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha opened a new pull request #12275:\nURL: https://github.com/apache/arrow/pull/12275\n\n\n   This PR includes an addition of a Sink node customized to obtain the output from an streaming execution. \r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T11:00:26.017+0000",
                    "updated": "2022-01-27T11:00:26.017+0000",
                    "started": "2022-01-27T11:00:26.016+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716351",
                    "issueId": "13420908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/worklog/716360",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12275:\nURL: https://github.com/apache/arrow/pull/12275#issuecomment-1023119264\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T11:38:17.515+0000",
                    "updated": "2022-01-27T11:38:17.515+0000",
                    "started": "2022-01-27T11:38:17.515+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716360",
                    "issueId": "13420908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/worklog/716406",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12275:\nURL: https://github.com/apache/arrow/pull/12275#discussion_r793595631\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -232,6 +232,77 @@ class ConsumingSinkNode : public ExecNode {\n   std::shared_ptr<SinkNodeConsumer> consumer_;\n };\n \n+/**\n+ * @brief This node is an extension on ConsumingSinkNode\n+ * to facilitate to get the output from an execution plan\n+ * as a table. We define a custom SinkNodeConsumer to\n+ * enable this functionality.\n+ */\n+\n+struct TableSinkNodeConsumer : public arrow::compute::SinkNodeConsumer {\n+ public:\n+  TableSinkNodeConsumer(std::shared_ptr<Table>* out,\n+                        std::shared_ptr<Schema> output_schema, MemoryPool* pool,\n+                        Future<> finish)\n+      : out_(out),\n+        output_schema_(output_schema),\n+        pool_(pool),\n+        finish_(std::move(finish)) {}\n+\n+  Status Consume(ExecBatch batch) override {\n+    ARROW_ASSIGN_OR_RAISE(auto rb, batch.ToRecordBatch(output_schema_, pool_));\n+    if (rb) {\n\nReview comment:\n       I don't think this can ever return `nullptr`, right?\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -232,6 +232,77 @@ class ConsumingSinkNode : public ExecNode {\n   std::shared_ptr<SinkNodeConsumer> consumer_;\n };\n \n+/**\n+ * @brief This node is an extension on ConsumingSinkNode\n+ * to facilitate to get the output from an execution plan\n+ * as a table. We define a custom SinkNodeConsumer to\n+ * enable this functionality.\n+ */\n+\n+struct TableSinkNodeConsumer : public arrow::compute::SinkNodeConsumer {\n+ public:\n+  TableSinkNodeConsumer(std::shared_ptr<Table>* out,\n+                        std::shared_ptr<Schema> output_schema, MemoryPool* pool,\n+                        Future<> finish)\n+      : out_(out),\n+        output_schema_(output_schema),\n+        pool_(pool),\n+        finish_(std::move(finish)) {}\n+\n+  Status Consume(ExecBatch batch) override {\n+    ARROW_ASSIGN_OR_RAISE(auto rb, batch.ToRecordBatch(output_schema_, pool_));\n+    if (rb) {\n+      batch_vector.push_back(rb);\n+    } else {\n+      return Status::Invalid(\"Invalid ExecBatch consumed\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  Future<> Finish() override {\n+    ARROW_ASSIGN_OR_RAISE(auto table, Table::FromRecordBatches(batch_vector));\n+    *out_ = table;\n+    return finish_;\n+  }\n+\n+ private:\n+  std::shared_ptr<Table>* out_;\n+  std::shared_ptr<Schema> output_schema_;\n+  MemoryPool* pool_;\n+  Future<> finish_;\n+  std::vector<std::shared_ptr<RecordBatch>> batch_vector;\n+};\n+\n+static std::shared_ptr<SinkNodeConsumer> MakeTableSinkConsumer(\n+    std::shared_ptr<Table>* out, std::shared_ptr<Schema> output_schema, MemoryPool* pool,\n+    Future<> finish) {\n+  auto tb_consumer =\n+      std::make_shared<TableSinkNodeConsumer>(out, output_schema, pool, finish);\n+  return std::move(tb_consumer);\n+}\n+\n+class TableConsumingSinkNode : public ConsumingSinkNode {\n\nReview comment:\n       You could even ditch the subclass and just register something like `static Result<ExecNode*> MakeTableConsumingSinkNode()` as a factory. There's no requirement that factories and nodes are 1:1, e.g. look at the scanner: https://github.com/apache/arrow/blob/09e4a5e04c9e39169b5264e0aa98a5cf0945ecba/cpp/src/arrow/dataset/scanner.cc#L838-L859\n\n##########\nFile path: cpp/src/arrow/compute/exec/plan_test.cc\n##########\n@@ -488,6 +488,43 @@ TEST(ExecPlanExecution, SourceConsumingSink) {\n   }\n }\n \n+TEST(ExecPlanExecution, SourceTableConsumingSink) {\n+  for (bool slow : {false, true}) {\n+    SCOPED_TRACE(slow ? \"slowed\" : \"unslowed\");\n+\n+    for (bool parallel : {false, true}) {\n+      SCOPED_TRACE(parallel ? \"parallel\" : \"single threaded\");\n+      ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make());\n+\n+      Future<> finish = Future<>::Make();\n+      std::shared_ptr<Table> out;\n+\n+      auto basic_data = MakeBasicBatches();\n+\n+      TableSinkNodeOptions options{&out, basic_data.schema, finish};\n+\n+      ASSERT_OK_AND_ASSIGN(\n+          auto source, MakeExecNode(\"source\", plan.get(), {},\n+                                    SourceNodeOptions(basic_data.schema,\n+                                                      basic_data.gen(parallel, slow))));\n+      ASSERT_OK(MakeExecNode(\"table_sink\", plan.get(), {source}, options));\n+      ASSERT_OK(plan->StartProducing());\n+      // Source should finish fairly quickly\n+      ASSERT_FINISHES_OK(source->finished());\n+      SleepABit();\n+      ASSERT_OK_AND_ASSIGN(auto actual,\n+                           TableFromExecBatches(basic_data.schema, basic_data.batches));\n+      ASSERT_EQ(5, out->num_rows());\n+      AssertTablesEqual(*actual, *out);\n+      // Consumer isn't finished and so plan shouldn't have finished\n+      AssertNotFinished(plan->finished());\n+      // Mark consumption complete, plan should finish\n+      finish.MarkFinished();\n+      ASSERT_FINISHES_OK(plan->finished());\n\nReview comment:\n       This seems to be testing something irrelevant to the issue at hand. We should just `ASSERT_FINISHES_OK(plan->finished())` then ensure the actual and expected tables are equal.\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -232,6 +232,77 @@ class ConsumingSinkNode : public ExecNode {\n   std::shared_ptr<SinkNodeConsumer> consumer_;\n };\n \n+/**\n+ * @brief This node is an extension on ConsumingSinkNode\n+ * to facilitate to get the output from an execution plan\n+ * as a table. We define a custom SinkNodeConsumer to\n+ * enable this functionality.\n+ */\n+\n+struct TableSinkNodeConsumer : public arrow::compute::SinkNodeConsumer {\n+ public:\n+  TableSinkNodeConsumer(std::shared_ptr<Table>* out,\n+                        std::shared_ptr<Schema> output_schema, MemoryPool* pool,\n+                        Future<> finish)\n+      : out_(out),\n+        output_schema_(output_schema),\n+        pool_(pool),\n+        finish_(std::move(finish)) {}\n+\n+  Status Consume(ExecBatch batch) override {\n+    ARROW_ASSIGN_OR_RAISE(auto rb, batch.ToRecordBatch(output_schema_, pool_));\n+    if (rb) {\n+      batch_vector.push_back(rb);\n+    } else {\n+      return Status::Invalid(\"Invalid ExecBatch consumed\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  Future<> Finish() override {\n+    ARROW_ASSIGN_OR_RAISE(auto table, Table::FromRecordBatches(batch_vector));\n+    *out_ = table;\n\nReview comment:\n       nit, but this can just be `ARROW_ASSIGN_OR_RAISE(*out_, Table::FromRecordBatches(std::move(batch_vector)));`\r\n   \r\n   ARROW_ASSIGN_OR_RAISE effectively lets you put anything on the LHS, there is no need to declare a variable there unless you want to.\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -232,6 +232,77 @@ class ConsumingSinkNode : public ExecNode {\n   std::shared_ptr<SinkNodeConsumer> consumer_;\n };\n \n+/**\n+ * @brief This node is an extension on ConsumingSinkNode\n+ * to facilitate to get the output from an execution plan\n+ * as a table. We define a custom SinkNodeConsumer to\n+ * enable this functionality.\n+ */\n+\n+struct TableSinkNodeConsumer : public arrow::compute::SinkNodeConsumer {\n+ public:\n+  TableSinkNodeConsumer(std::shared_ptr<Table>* out,\n+                        std::shared_ptr<Schema> output_schema, MemoryPool* pool,\n+                        Future<> finish)\n+      : out_(out),\n+        output_schema_(output_schema),\n+        pool_(pool),\n+        finish_(std::move(finish)) {}\n+\n+  Status Consume(ExecBatch batch) override {\n+    ARROW_ASSIGN_OR_RAISE(auto rb, batch.ToRecordBatch(output_schema_, pool_));\n\nReview comment:\n       Don't we need to lock here? ConsumingSinkNode doesn't synchronize calls to Consume.\n\n##########\nFile path: cpp/src/arrow/compute/exec/options.h\n##########\n@@ -270,5 +270,23 @@ class ARROW_EXPORT SelectKSinkNodeOptions : public SinkNodeOptions {\n   SelectKOptions select_k_options;\n };\n \n+/// \\brief Adapt an Table as a sink node\n+///\n+/// plan->exec_context()->executor() will be used to parallelize pushing to\n+/// outputs, if provided.\n\nReview comment:\n       nit: I don't think this bit of the docstring is relevant\n\n##########\nFile path: cpp/src/arrow/compute/exec/options.h\n##########\n@@ -270,5 +270,23 @@ class ARROW_EXPORT SelectKSinkNodeOptions : public SinkNodeOptions {\n   SelectKOptions select_k_options;\n };\n \n+/// \\brief Adapt an Table as a sink node\n+///\n+/// plan->exec_context()->executor() will be used to parallelize pushing to\n+/// outputs, if provided.\n+class ARROW_EXPORT TableSinkNodeOptions : public ExecNodeOptions {\n+ public:\n+  TableSinkNodeOptions(std::shared_ptr<Table>* output_table,\n+                       std::shared_ptr<Schema> output_schema,\n+                       Future<> finish = Future<>::Make())\n\nReview comment:\n       Hmm, I realize the tests do this, but there's no reason to let the user provide `Future<> finish` right? The consumer implementation can manage its own Future instance and mark it finished itself. (Why make the user manually mark the future finished? How is the user even supposed to know when the node finishes?) I think the tests just have this parameter to test things.\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -232,6 +232,77 @@ class ConsumingSinkNode : public ExecNode {\n   std::shared_ptr<SinkNodeConsumer> consumer_;\n };\n \n+/**\n+ * @brief This node is an extension on ConsumingSinkNode\n+ * to facilitate to get the output from an execution plan\n+ * as a table. We define a custom SinkNodeConsumer to\n+ * enable this functionality.\n+ */\n+\n+struct TableSinkNodeConsumer : public arrow::compute::SinkNodeConsumer {\n+ public:\n+  TableSinkNodeConsumer(std::shared_ptr<Table>* out,\n+                        std::shared_ptr<Schema> output_schema, MemoryPool* pool,\n+                        Future<> finish)\n+      : out_(out),\n+        output_schema_(output_schema),\n\nReview comment:\n       nit: `std::move` the schema\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T13:26:54.677+0000",
                    "updated": "2022-01-27T13:26:54.677+0000",
                    "started": "2022-01-27T13:26:54.677+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716406",
                    "issueId": "13420908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/worklog/716412",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12275:\nURL: https://github.com/apache/arrow/pull/12275#discussion_r793615621\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -232,6 +232,77 @@ class ConsumingSinkNode : public ExecNode {\n   std::shared_ptr<SinkNodeConsumer> consumer_;\n };\n \n+/**\n+ * @brief This node is an extension on ConsumingSinkNode\n+ * to facilitate to get the output from an execution plan\n+ * as a table. We define a custom SinkNodeConsumer to\n+ * enable this functionality.\n+ */\n+\n+struct TableSinkNodeConsumer : public arrow::compute::SinkNodeConsumer {\n+ public:\n+  TableSinkNodeConsumer(std::shared_ptr<Table>* out,\n+                        std::shared_ptr<Schema> output_schema, MemoryPool* pool,\n+                        Future<> finish)\n+      : out_(out),\n+        output_schema_(output_schema),\n\nReview comment:\n       missed it, \ud83d\udc4d \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T13:42:14.440+0000",
                    "updated": "2022-01-27T13:42:14.440+0000",
                    "started": "2022-01-27T13:42:14.440+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716412",
                    "issueId": "13420908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/worklog/716607",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12275:\nURL: https://github.com/apache/arrow/pull/12275#discussion_r793908808\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -232,6 +232,77 @@ class ConsumingSinkNode : public ExecNode {\n   std::shared_ptr<SinkNodeConsumer> consumer_;\n };\n \n+/**\n+ * @brief This node is an extension on ConsumingSinkNode\n+ * to facilitate to get the output from an execution plan\n+ * as a table. We define a custom SinkNodeConsumer to\n+ * enable this functionality.\n+ */\n+\n+struct TableSinkNodeConsumer : public arrow::compute::SinkNodeConsumer {\n+ public:\n+  TableSinkNodeConsumer(std::shared_ptr<Table>* out,\n+                        std::shared_ptr<Schema> output_schema, MemoryPool* pool,\n+                        Future<> finish)\n+      : out_(out),\n+        output_schema_(output_schema),\n+        pool_(pool),\n+        finish_(std::move(finish)) {}\n+\n+  Status Consume(ExecBatch batch) override {\n+    ARROW_ASSIGN_OR_RAISE(auto rb, batch.ToRecordBatch(output_schema_, pool_));\n+    if (rb) {\n+      batch_vector.push_back(rb);\n+    } else {\n+      return Status::Invalid(\"Invalid ExecBatch consumed\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  Future<> Finish() override {\n+    ARROW_ASSIGN_OR_RAISE(auto table, Table::FromRecordBatches(batch_vector));\n+    *out_ = table;\n+    return finish_;\n\nReview comment:\n       So the purpose of this callback is for consuming sink implementations that need to do some kind (potentially asynchronous) cleanup after the last batch has arrived.  For example, in the dataset writer, after the last batch has arrived, we need to close all open files.  This is an asynchronous operation and so we return a future that will complete when all those files are closed.\r\n   \r\n   In the ToTable case we only need to create a table from all the batches we have collected.  This does not involve any I/O and so it does not need to be asynchronous.  So you can just return `Future<>::MarkFinished()`.\r\n   \r\n   However, because this happens rather often, we have a [convenience constructor](https://github.com/apache/arrow/blob/03f3cf986314654e932587d01df59ad145faf5b9/cpp/src/arrow/util/future.h#L686) which can implicitly create a finished future from a status.  So you should be able to just return `Status::OK()` (which will get implicitly converted to a completed `Future<>`).\r\n   \r\n   Then you should get rid of `TableSinkNodeOptions::finish`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T18:55:50.398+0000",
                    "updated": "2022-01-27T18:55:50.398+0000",
                    "started": "2022-01-27T18:55:50.397+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716607",
                    "issueId": "13420908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/worklog/716608",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12275:\nURL: https://github.com/apache/arrow/pull/12275#discussion_r793908808\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -232,6 +232,77 @@ class ConsumingSinkNode : public ExecNode {\n   std::shared_ptr<SinkNodeConsumer> consumer_;\n };\n \n+/**\n+ * @brief This node is an extension on ConsumingSinkNode\n+ * to facilitate to get the output from an execution plan\n+ * as a table. We define a custom SinkNodeConsumer to\n+ * enable this functionality.\n+ */\n+\n+struct TableSinkNodeConsumer : public arrow::compute::SinkNodeConsumer {\n+ public:\n+  TableSinkNodeConsumer(std::shared_ptr<Table>* out,\n+                        std::shared_ptr<Schema> output_schema, MemoryPool* pool,\n+                        Future<> finish)\n+      : out_(out),\n+        output_schema_(output_schema),\n+        pool_(pool),\n+        finish_(std::move(finish)) {}\n+\n+  Status Consume(ExecBatch batch) override {\n+    ARROW_ASSIGN_OR_RAISE(auto rb, batch.ToRecordBatch(output_schema_, pool_));\n+    if (rb) {\n+      batch_vector.push_back(rb);\n+    } else {\n+      return Status::Invalid(\"Invalid ExecBatch consumed\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  Future<> Finish() override {\n+    ARROW_ASSIGN_OR_RAISE(auto table, Table::FromRecordBatches(batch_vector));\n+    *out_ = table;\n+    return finish_;\n\nReview comment:\n       So the purpose of this callback is for consuming sink implementations that need to do some kind of (potentially asynchronous) cleanup after the last batch has arrived.  For example, in the dataset writer, after the last batch has arrived, we need to close all open files.  This is an asynchronous operation and so we return a future that will complete when all those files are closed.\r\n   \r\n   In the ToTable case we only need to create a table from all the batches we have collected.  This does not involve any I/O and so it does not need to be asynchronous.  So you can just return `Future<>::MarkFinished()`.\r\n   \r\n   However, because this happens rather often, we have a [convenience constructor](https://github.com/apache/arrow/blob/03f3cf986314654e932587d01df59ad145faf5b9/cpp/src/arrow/util/future.h#L686) which can implicitly create a finished future from a status.  So you should be able to just return `Status::OK()` (which will get implicitly converted to a completed `Future<>`).\r\n   \r\n   Then you should get rid of `TableSinkNodeOptions::finish`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-27T18:56:02.831+0000",
                    "updated": "2022-01-27T18:56:02.831+0000",
                    "started": "2022-01-27T18:56:02.831+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716608",
                    "issueId": "13420908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/worklog/716842",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12275:\nURL: https://github.com/apache/arrow/pull/12275#discussion_r794164776\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -232,6 +232,77 @@ class ConsumingSinkNode : public ExecNode {\n   std::shared_ptr<SinkNodeConsumer> consumer_;\n };\n \n+/**\n+ * @brief This node is an extension on ConsumingSinkNode\n+ * to facilitate to get the output from an execution plan\n+ * as a table. We define a custom SinkNodeConsumer to\n+ * enable this functionality.\n+ */\n+\n+struct TableSinkNodeConsumer : public arrow::compute::SinkNodeConsumer {\n+ public:\n+  TableSinkNodeConsumer(std::shared_ptr<Table>* out,\n+                        std::shared_ptr<Schema> output_schema, MemoryPool* pool,\n+                        Future<> finish)\n+      : out_(out),\n+        output_schema_(output_schema),\n+        pool_(pool),\n+        finish_(std::move(finish)) {}\n+\n+  Status Consume(ExecBatch batch) override {\n+    ARROW_ASSIGN_OR_RAISE(auto rb, batch.ToRecordBatch(output_schema_, pool_));\n+    if (rb) {\n+      batch_vector.push_back(rb);\n+    } else {\n+      return Status::Invalid(\"Invalid ExecBatch consumed\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  Future<> Finish() override {\n+    ARROW_ASSIGN_OR_RAISE(auto table, Table::FromRecordBatches(batch_vector));\n+    *out_ = table;\n+    return finish_;\n\nReview comment:\n       That makes sense \ud83d\udc4d\r\n   I will make the change\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-28T02:46:37.164+0000",
                    "updated": "2022-01-28T02:46:37.164+0000",
                    "started": "2022-01-28T02:46:37.164+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "716842",
                    "issueId": "13420908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/worklog/718419",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12275:\nURL: https://github.com/apache/arrow/pull/12275#discussion_r796269045\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -232,6 +232,77 @@ class ConsumingSinkNode : public ExecNode {\n   std::shared_ptr<SinkNodeConsumer> consumer_;\n };\n \n+/**\n+ * @brief This node is an extension on ConsumingSinkNode\n+ * to facilitate to get the output from an execution plan\n+ * as a table. We define a custom SinkNodeConsumer to\n+ * enable this functionality.\n+ */\n+\n+struct TableSinkNodeConsumer : public arrow::compute::SinkNodeConsumer {\n+ public:\n+  TableSinkNodeConsumer(std::shared_ptr<Table>* out,\n+                        std::shared_ptr<Schema> output_schema, MemoryPool* pool,\n+                        Future<> finish)\n+      : out_(out),\n+        output_schema_(output_schema),\n+        pool_(pool),\n+        finish_(std::move(finish)) {}\n+\n+  Status Consume(ExecBatch batch) override {\n+    ARROW_ASSIGN_OR_RAISE(auto rb, batch.ToRecordBatch(output_schema_, pool_));\n+    if (rb) {\n\nReview comment:\n       Yes, that's correct. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-01T05:16:39.135+0000",
                    "updated": "2022-02-01T05:16:39.135+0000",
                    "started": "2022-02-01T05:16:39.135+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718419",
                    "issueId": "13420908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/worklog/718430",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12275:\nURL: https://github.com/apache/arrow/pull/12275#discussion_r796288293\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -232,6 +232,77 @@ class ConsumingSinkNode : public ExecNode {\n   std::shared_ptr<SinkNodeConsumer> consumer_;\n };\n \n+/**\n+ * @brief This node is an extension on ConsumingSinkNode\n+ * to facilitate to get the output from an execution plan\n+ * as a table. We define a custom SinkNodeConsumer to\n+ * enable this functionality.\n+ */\n+\n+struct TableSinkNodeConsumer : public arrow::compute::SinkNodeConsumer {\n+ public:\n+  TableSinkNodeConsumer(std::shared_ptr<Table>* out,\n+                        std::shared_ptr<Schema> output_schema, MemoryPool* pool,\n+                        Future<> finish)\n+      : out_(out),\n+        output_schema_(output_schema),\n+        pool_(pool),\n+        finish_(std::move(finish)) {}\n+\n+  Status Consume(ExecBatch batch) override {\n+    ARROW_ASSIGN_OR_RAISE(auto rb, batch.ToRecordBatch(output_schema_, pool_));\n+    if (rb) {\n+      batch_vector.push_back(rb);\n+    } else {\n+      return Status::Invalid(\"Invalid ExecBatch consumed\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  Future<> Finish() override {\n+    ARROW_ASSIGN_OR_RAISE(auto table, Table::FromRecordBatches(batch_vector));\n+    *out_ = table;\n+    return finish_;\n+  }\n+\n+ private:\n+  std::shared_ptr<Table>* out_;\n+  std::shared_ptr<Schema> output_schema_;\n+  MemoryPool* pool_;\n+  Future<> finish_;\n+  std::vector<std::shared_ptr<RecordBatch>> batch_vector;\n+};\n+\n+static std::shared_ptr<SinkNodeConsumer> MakeTableSinkConsumer(\n+    std::shared_ptr<Table>* out, std::shared_ptr<Schema> output_schema, MemoryPool* pool,\n+    Future<> finish) {\n+  auto tb_consumer =\n+      std::make_shared<TableSinkNodeConsumer>(out, output_schema, pool, finish);\n+  return std::move(tb_consumer);\n+}\n+\n+class TableConsumingSinkNode : public ConsumingSinkNode {\n\nReview comment:\n       I replaced it as a function. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-01T06:15:47.152+0000",
                    "updated": "2022-02-01T06:15:47.152+0000",
                    "started": "2022-02-01T06:15:47.151+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718430",
                    "issueId": "13420908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/worklog/718440",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12275:\nURL: https://github.com/apache/arrow/pull/12275#discussion_r796296989\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -232,6 +232,77 @@ class ConsumingSinkNode : public ExecNode {\n   std::shared_ptr<SinkNodeConsumer> consumer_;\n };\n \n+/**\n+ * @brief This node is an extension on ConsumingSinkNode\n+ * to facilitate to get the output from an execution plan\n+ * as a table. We define a custom SinkNodeConsumer to\n+ * enable this functionality.\n+ */\n+\n+struct TableSinkNodeConsumer : public arrow::compute::SinkNodeConsumer {\n+ public:\n+  TableSinkNodeConsumer(std::shared_ptr<Table>* out,\n+                        std::shared_ptr<Schema> output_schema, MemoryPool* pool,\n+                        Future<> finish)\n+      : out_(out),\n+        output_schema_(output_schema),\n+        pool_(pool),\n+        finish_(std::move(finish)) {}\n+\n+  Status Consume(ExecBatch batch) override {\n+    ARROW_ASSIGN_OR_RAISE(auto rb, batch.ToRecordBatch(output_schema_, pool_));\n\nReview comment:\n       I added a lock. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-01T06:39:49.624+0000",
                    "updated": "2022-02-01T06:39:49.624+0000",
                    "started": "2022-02-01T06:39:49.624+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718440",
                    "issueId": "13420908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/worklog/718488",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on pull request #12275:\nURL: https://github.com/apache/arrow/pull/12275#issuecomment-1026602470\n\n\n   @westonpace I updated the PR with review comments. But there is an issue when we remove the future from the Consuming sync node, the process hangs without finishing. Looking into it. \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-01T08:48:55.690+0000",
                    "updated": "2022-02-01T08:48:55.690+0000",
                    "started": "2022-02-01T08:48:55.690+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718488",
                    "issueId": "13420908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/worklog/718683",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #12275:\nURL: https://github.com/apache/arrow/pull/12275#issuecomment-1026860426\n\n\n   I don't think we want to remove the Future from ConsumingSinkNode, but we don't need it in TableSinkNodeOptions.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-01T13:46:14.041+0000",
                    "updated": "2022-02-01T13:46:14.041+0000",
                    "started": "2022-02-01T13:46:14.040+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718683",
                    "issueId": "13420908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/worklog/718686",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12275:\nURL: https://github.com/apache/arrow/pull/12275#discussion_r796610755\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -232,6 +232,51 @@ class ConsumingSinkNode : public ExecNode {\n   std::shared_ptr<SinkNodeConsumer> consumer_;\n };\n \n+/**\n+ * @brief This node is an extension on ConsumingSinkNode\n+ * to facilitate to get the output from an execution plan\n+ * as a table. We define a custom SinkNodeConsumer to\n+ * enable this functionality.\n+ */\n+\n+struct TableSinkNodeConsumer : public arrow::compute::SinkNodeConsumer {\n+ public:\n+  TableSinkNodeConsumer(std::shared_ptr<Table>* out,\n+                        std::shared_ptr<Schema> output_schema, MemoryPool* pool)\n+      : out_(out), output_schema_(std::move(output_schema)), pool_(pool) {}\n+\n+  Status Consume(ExecBatch batch) override {\n+    std::lock_guard<std::mutex> guard(consum_mutex);\n+    ARROW_ASSIGN_OR_RAISE(auto rb, batch.ToRecordBatch(output_schema_, pool_));\n+    batch_vector.push_back(rb);\n+    return Status::OK();\n+  }\n+\n+  Future<> Finish() override {\n+    ARROW_ASSIGN_OR_RAISE(*out_, Table::FromRecordBatches(batch_vector));\n+    return Status::OK();\n+  }\n+\n+ private:\n+  std::shared_ptr<Table>* out_;\n+  std::shared_ptr<Schema> output_schema_;\n+  MemoryPool* pool_;\n+  std::vector<std::shared_ptr<RecordBatch>> batch_vector;\n+  std::mutex consum_mutex;\n\nReview comment:\n       Typo? `consume_mutex_`? Or just `mutex_`\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -232,6 +232,51 @@ class ConsumingSinkNode : public ExecNode {\n   std::shared_ptr<SinkNodeConsumer> consumer_;\n };\n \n+/**\n+ * @brief This node is an extension on ConsumingSinkNode\n+ * to facilitate to get the output from an execution plan\n+ * as a table. We define a custom SinkNodeConsumer to\n+ * enable this functionality.\n+ */\n+\n+struct TableSinkNodeConsumer : public arrow::compute::SinkNodeConsumer {\n+ public:\n+  TableSinkNodeConsumer(std::shared_ptr<Table>* out,\n+                        std::shared_ptr<Schema> output_schema, MemoryPool* pool)\n+      : out_(out), output_schema_(std::move(output_schema)), pool_(pool) {}\n+\n+  Status Consume(ExecBatch batch) override {\n+    std::lock_guard<std::mutex> guard(consum_mutex);\n+    ARROW_ASSIGN_OR_RAISE(auto rb, batch.ToRecordBatch(output_schema_, pool_));\n+    batch_vector.push_back(rb);\n+    return Status::OK();\n+  }\n+\n+  Future<> Finish() override {\n+    ARROW_ASSIGN_OR_RAISE(*out_, Table::FromRecordBatches(batch_vector));\n+    return Status::OK();\n+  }\n+\n+ private:\n+  std::shared_ptr<Table>* out_;\n+  std::shared_ptr<Schema> output_schema_;\n+  MemoryPool* pool_;\n+  std::vector<std::shared_ptr<RecordBatch>> batch_vector;\n\nReview comment:\n       nit, but just `batches_`? Generally for private variables we suffix them with `_`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-01T13:48:08.251+0000",
                    "updated": "2022-02-01T13:48:08.251+0000",
                    "started": "2022-02-01T13:48:08.251+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718686",
                    "issueId": "13420908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/worklog/718742",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12275:\nURL: https://github.com/apache/arrow/pull/12275#discussion_r796686678\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/plan_test.cc\n##########\n@@ -488,6 +488,39 @@ TEST(ExecPlanExecution, SourceConsumingSink) {\n   }\n }\n \n+TEST(ExecPlanExecution, SourceTableConsumingSink) {\n+  for (bool slow : {false, true}) {\n+    SCOPED_TRACE(slow ? \"slowed\" : \"unslowed\");\n+\n+    for (bool parallel : {false, true}) {\n+      SCOPED_TRACE(parallel ? \"parallel\" : \"single threaded\");\n+      ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make());\n+\n+      Future<> finish = Future<>::Make();\n\nReview comment:\n       This is unused.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-01T15:03:02.287+0000",
                    "updated": "2022-02-01T15:03:02.287+0000",
                    "started": "2022-02-01T15:03:02.286+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718742",
                    "issueId": "13420908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/worklog/718779",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12275:\nURL: https://github.com/apache/arrow/pull/12275#discussion_r796716792\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -232,6 +232,51 @@ class ConsumingSinkNode : public ExecNode {\n   std::shared_ptr<SinkNodeConsumer> consumer_;\n };\n \n+/**\n+ * @brief This node is an extension on ConsumingSinkNode\n+ * to facilitate to get the output from an execution plan\n+ * as a table. We define a custom SinkNodeConsumer to\n+ * enable this functionality.\n+ */\n+\n+struct TableSinkNodeConsumer : public arrow::compute::SinkNodeConsumer {\n+ public:\n+  TableSinkNodeConsumer(std::shared_ptr<Table>* out,\n+                        std::shared_ptr<Schema> output_schema, MemoryPool* pool)\n+      : out_(out), output_schema_(std::move(output_schema)), pool_(pool) {}\n+\n+  Status Consume(ExecBatch batch) override {\n+    std::lock_guard<std::mutex> guard(consum_mutex);\n+    ARROW_ASSIGN_OR_RAISE(auto rb, batch.ToRecordBatch(output_schema_, pool_));\n+    batch_vector.push_back(rb);\n+    return Status::OK();\n+  }\n+\n+  Future<> Finish() override {\n+    ARROW_ASSIGN_OR_RAISE(*out_, Table::FromRecordBatches(batch_vector));\n+    return Status::OK();\n+  }\n+\n+ private:\n+  std::shared_ptr<Table>* out_;\n+  std::shared_ptr<Schema> output_schema_;\n+  MemoryPool* pool_;\n+  std::vector<std::shared_ptr<RecordBatch>> batch_vector;\n+  std::mutex consum_mutex;\n\nReview comment:\n       Typo. `costume_mutex`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-01T15:32:37.058+0000",
                    "updated": "2022-02-01T15:32:37.058+0000",
                    "started": "2022-02-01T15:32:37.057+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718779",
                    "issueId": "13420908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/worklog/718780",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12275:\nURL: https://github.com/apache/arrow/pull/12275#discussion_r796716792\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -232,6 +232,51 @@ class ConsumingSinkNode : public ExecNode {\n   std::shared_ptr<SinkNodeConsumer> consumer_;\n };\n \n+/**\n+ * @brief This node is an extension on ConsumingSinkNode\n+ * to facilitate to get the output from an execution plan\n+ * as a table. We define a custom SinkNodeConsumer to\n+ * enable this functionality.\n+ */\n+\n+struct TableSinkNodeConsumer : public arrow::compute::SinkNodeConsumer {\n+ public:\n+  TableSinkNodeConsumer(std::shared_ptr<Table>* out,\n+                        std::shared_ptr<Schema> output_schema, MemoryPool* pool)\n+      : out_(out), output_schema_(std::move(output_schema)), pool_(pool) {}\n+\n+  Status Consume(ExecBatch batch) override {\n+    std::lock_guard<std::mutex> guard(consum_mutex);\n+    ARROW_ASSIGN_OR_RAISE(auto rb, batch.ToRecordBatch(output_schema_, pool_));\n+    batch_vector.push_back(rb);\n+    return Status::OK();\n+  }\n+\n+  Future<> Finish() override {\n+    ARROW_ASSIGN_OR_RAISE(*out_, Table::FromRecordBatches(batch_vector));\n+    return Status::OK();\n+  }\n+\n+ private:\n+  std::shared_ptr<Table>* out_;\n+  std::shared_ptr<Schema> output_schema_;\n+  MemoryPool* pool_;\n+  std::vector<std::shared_ptr<RecordBatch>> batch_vector;\n+  std::mutex consum_mutex;\n\nReview comment:\n       Typo. `cosume_mutex`\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -232,6 +232,51 @@ class ConsumingSinkNode : public ExecNode {\n   std::shared_ptr<SinkNodeConsumer> consumer_;\n };\n \n+/**\n+ * @brief This node is an extension on ConsumingSinkNode\n+ * to facilitate to get the output from an execution plan\n+ * as a table. We define a custom SinkNodeConsumer to\n+ * enable this functionality.\n+ */\n+\n+struct TableSinkNodeConsumer : public arrow::compute::SinkNodeConsumer {\n+ public:\n+  TableSinkNodeConsumer(std::shared_ptr<Table>* out,\n+                        std::shared_ptr<Schema> output_schema, MemoryPool* pool)\n+      : out_(out), output_schema_(std::move(output_schema)), pool_(pool) {}\n+\n+  Status Consume(ExecBatch batch) override {\n+    std::lock_guard<std::mutex> guard(consum_mutex);\n+    ARROW_ASSIGN_OR_RAISE(auto rb, batch.ToRecordBatch(output_schema_, pool_));\n+    batch_vector.push_back(rb);\n+    return Status::OK();\n+  }\n+\n+  Future<> Finish() override {\n+    ARROW_ASSIGN_OR_RAISE(*out_, Table::FromRecordBatches(batch_vector));\n+    return Status::OK();\n+  }\n+\n+ private:\n+  std::shared_ptr<Table>* out_;\n+  std::shared_ptr<Schema> output_schema_;\n+  MemoryPool* pool_;\n+  std::vector<std::shared_ptr<RecordBatch>> batch_vector;\n+  std::mutex consum_mutex;\n\nReview comment:\n       Typo. `consume_mutex`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-01T15:33:03.048+0000",
                    "updated": "2022-02-01T15:33:03.048+0000",
                    "started": "2022-02-01T15:33:03.048+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718780",
                    "issueId": "13420908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/worklog/718781",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12275:\nURL: https://github.com/apache/arrow/pull/12275#discussion_r796717543\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -232,6 +232,51 @@ class ConsumingSinkNode : public ExecNode {\n   std::shared_ptr<SinkNodeConsumer> consumer_;\n };\n \n+/**\n+ * @brief This node is an extension on ConsumingSinkNode\n+ * to facilitate to get the output from an execution plan\n+ * as a table. We define a custom SinkNodeConsumer to\n+ * enable this functionality.\n+ */\n+\n+struct TableSinkNodeConsumer : public arrow::compute::SinkNodeConsumer {\n+ public:\n+  TableSinkNodeConsumer(std::shared_ptr<Table>* out,\n+                        std::shared_ptr<Schema> output_schema, MemoryPool* pool)\n+      : out_(out), output_schema_(std::move(output_schema)), pool_(pool) {}\n+\n+  Status Consume(ExecBatch batch) override {\n+    std::lock_guard<std::mutex> guard(consum_mutex);\n+    ARROW_ASSIGN_OR_RAISE(auto rb, batch.ToRecordBatch(output_schema_, pool_));\n+    batch_vector.push_back(rb);\n+    return Status::OK();\n+  }\n+\n+  Future<> Finish() override {\n+    ARROW_ASSIGN_OR_RAISE(*out_, Table::FromRecordBatches(batch_vector));\n+    return Status::OK();\n+  }\n+\n+ private:\n+  std::shared_ptr<Table>* out_;\n+  std::shared_ptr<Schema> output_schema_;\n+  MemoryPool* pool_;\n+  std::vector<std::shared_ptr<RecordBatch>> batch_vector;\n\nReview comment:\n       I will follow that standard. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-01T15:33:25.537+0000",
                    "updated": "2022-02-01T15:33:25.537+0000",
                    "started": "2022-02-01T15:33:25.536+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718781",
                    "issueId": "13420908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/worklog/719409",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12275:\nURL: https://github.com/apache/arrow/pull/12275#discussion_r797660321\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/options.h\n##########\n@@ -270,5 +270,23 @@ class ARROW_EXPORT SelectKSinkNodeOptions : public SinkNodeOptions {\n   SelectKOptions select_k_options;\n };\n \n+/// \\brief Adapt an Table as a sink node\n+///\n+/// plan->exec_context()->executor() will be used to parallelize pushing to\n+/// outputs, if provided.\n+class ARROW_EXPORT TableSinkNodeOptions : public ExecNodeOptions {\n+ public:\n+  TableSinkNodeOptions(std::shared_ptr<Table>* output_table,\n+                       std::shared_ptr<Schema> output_schema,\n+                       Future<> finish = Future<>::Make())\n\nReview comment:\n       This should be removed.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-02T14:28:10.301+0000",
                    "updated": "2022-02-02T14:28:10.301+0000",
                    "started": "2022-02-02T14:28:10.300+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "719409",
                    "issueId": "13420908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/worklog/720611",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12275:\nURL: https://github.com/apache/arrow/pull/12275#discussion_r799121866\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/options.h\n##########\n@@ -270,5 +270,23 @@ class ARROW_EXPORT SelectKSinkNodeOptions : public SinkNodeOptions {\n   SelectKOptions select_k_options;\n };\n \n+/// \\brief Adapt an Table as a sink node\n+///\n+/// plan->exec_context()->executor() will be used to parallelize pushing to\n+/// outputs, if provided.\n+class ARROW_EXPORT TableSinkNodeOptions : public ExecNodeOptions {\n+ public:\n+  TableSinkNodeOptions(std::shared_ptr<Table>* output_table,\n+                       std::shared_ptr<Schema> output_schema,\n+                       Future<> finish = Future<>::Make())\n\nReview comment:\n       I missed this, now updated. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-04T02:37:04.609+0000",
                    "updated": "2022-02-04T02:37:04.609+0000",
                    "started": "2022-02-04T02:37:04.609+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "720611",
                    "issueId": "13420908"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/worklog/720857",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #12275:\nURL: https://github.com/apache/arrow/pull/12275#issuecomment-1029969226\n\n\n   LGTM. I think the Dev failure is just because this branch needs to be rebased/it will go away once merged.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-04T13:06:14.106+0000",
                    "updated": "2022-02-04T13:06:14.106+0000",
                    "started": "2022-02-04T13:06:14.106+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "720857",
                    "issueId": "13420908"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 16800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@78c3619[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1c2625fc[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@71913275[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5cb5f07e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7e979c6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4ff99bfa[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37031aea[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@44c62a74[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@82d5c63[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@b0830d7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24f3af16[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5193b476[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16800,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Feb 04 13:07:01 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-02-04T13:07:01.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15262/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-01-05T19:06:51.000+0000",
        "updated": "2022-02-05T19:02:32.000+0000",
        "timeoriginalestimate": null,
        "description": "The invocation would look something like:\r\n\r\n{code}\r\n  std::shared_ptr<Table> out_table;\r\n  ARROW_RETURN_NOT_OK(arrow::compute::MakeExecNode(\r\n      \"table_sink\", plan, {terminal_node}, arrow::compute::TableSinkOptions{&out_table}));\r\n{code}\r\n\r\nWhen the plan is finished (assuming a successful finish) then {{out_table}} will be the output of the plan collected into a table.  The schema of the table will be {{terminal_node->output_schema()}}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Create a ToTable sink node",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/comment/17482886",
                    "id": "17482886",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "For this one tested an approach by considering an extension to the `consuming_sink`. Since we want to provide the output from the exec system to an outside system or resume outside the exec-plan, this could be sufficient.\u00a0\r\n\r\n[~westonpace] any thoughts?\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-01-27T06:17:07.050+0000",
                    "updated": "2022-01-27T06:17:07.050+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/comment/17482892",
                    "id": "17482892",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Also if we extend the usability further, do we expect this sink to provide some functions like, sorting or k-select features? Or should we leave it from this and let the user program the logic if required down another stream?\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-01-27T06:22:17.356+0000",
                    "updated": "2022-01-27T06:22:17.356+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/comment/17483372",
                    "id": "17483372",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Consuming sink sounds right to me.\r\n\r\nFor now let's not worry about sorting or select-k.  At some point we are going to have to figure out how to support those operations mid-plan and so I think we can come up with a more general solution at that time.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-01-27T18:39:08.609+0000",
                    "updated": "2022-01-27T18:39:08.609+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13420908/comment/17487076",
                    "id": "17487076",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 12275\n[https://github.com/apache/arrow/pull/12275]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-02-04T13:07:01.277+0000",
                    "updated": "2022-02-04T13:07:01.277+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ya9c:",
        "customfield_12314139": null
    }
}