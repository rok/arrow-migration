{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13481159",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13481159",
    "key": "ARROW-17688",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334621",
                "id": "12334621",
                "name": "FlightRPC"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328932",
                "id": "12328932",
                "name": "Format"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 4200,
            "total": 4200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4200,
            "total": 4200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17688/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 7,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13481159/worklog/807994",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13492:\nURL: https://github.com/apache/arrow/pull/13492#issuecomment-1244072845\n\n   https://issues.apache.org/jira/browse/ARROW-17688\n\n\n",
                    "created": "2022-09-12T17:34:03.545+0000",
                    "updated": "2022-09-12T17:34:03.545+0000",
                    "started": "2022-09-12T17:34:03.545+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "807994",
                    "issueId": "13481159"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13481159/worklog/808378",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13492:\nURL: https://github.com/apache/arrow/pull/13492#discussion_r969881049\n\n\n##########\ncpp/src/arrow/flight/sql/example/sqlite_server.cc:\n##########\n@@ -627,28 +674,80 @@ class SQLiteFlightSqlServer::Impl {\n     return DoGetSQLiteQuery(db_, query, SqlSchema::GetCrossReferenceSchema());\n   }\n \n-  Status ExecuteSql(const std::string& sql) {\n+  Status ExecuteSql(const std::string& sql) { return ExecuteSql(db_, sql); }\n+\n+  Status ExecuteSql(sqlite3* db, const std::string& sql) {\n     char* err_msg = nullptr;\n-    int rc = sqlite3_exec(db_, sql.c_str(), nullptr, nullptr, &err_msg);\n+    int rc = sqlite3_exec(db, sql.c_str(), nullptr, nullptr, &err_msg);\n     if (rc != SQLITE_OK) {\n       std::string error_msg;\n       if (err_msg != nullptr) {\n         error_msg = err_msg;\n+        sqlite3_free(err_msg);\n       }\n-      sqlite3_free(err_msg);\n-      return Status::ExecutionError(error_msg);\n+      return Status::IOError(error_msg);\n     }\n+    if (err_msg) sqlite3_free(err_msg);\n     return Status::OK();\n   }\n+\n+  arrow::Result<ActionBeginTransactionResult> BeginTransaction(\n+      const ServerCallContext& context, const ActionBeginTransactionRequest& request) {\n+    std::string handle = GenerateRandomString();\n+    sqlite3* new_db = nullptr;\n+    if (sqlite3_open_v2(db_uri_.c_str(), &new_db,\n+                        SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE | SQLITE_OPEN_URI,\n+                        /*zVfs=*/nullptr) != SQLITE_OK) {\n+      std::string error_message = \"Can't open new connection: \";\n+      if (new_db) {\n+        error_message += sqlite3_errmsg(new_db);\n+        sqlite3_close(new_db);\n+      }\n+      return Status::Invalid(error_message);\n+    }\n+\n+    ARROW_RETURN_NOT_OK(ExecuteSql(new_db, \"BEGIN TRANSACTION\"));\n+\n+    open_transactions_[handle] = new_db;\n\nReview Comment:\n   Should be mutex-protected?\n\n\n\n##########\ncpp/src/arrow/flight/integration_tests/test_integration.cc:\n##########\n@@ -785,10 +1037,292 @@ class FlightSqlScenario : public Scenario {\n         AssertEq(kUpdatePreparedStatementExpectedRows, updated_rows,\n                  \"Wrong number of updated rows for prepared statement ExecuteUpdate\"));\n     ARROW_RETURN_NOT_OK(update_prepared_statement->Close());\n+    return Status::OK();\n+  }\n+};\n+\n+/// \\brief Integration test scenario for validating the Substrait and\n+///    transaction extensions to Flight SQL.\n+class FlightSqlExtensionScenario : public FlightSqlScenario {\n+ public:\n+  Status RunClient(std::unique_ptr<FlightClient> client) override {\n+    sql::FlightSqlClient sql_client(std::move(client));\n+    Status status;\n+    if (!(status = ValidateMetadataRetrieval(&sql_client)).ok()) {\n+      return status.WithMessage(\"MetadataRetrieval failed: \", status.message());\n+    }\n+    if (!(status = ValidateStatementExecution(&sql_client)).ok()) {\n+      return status.WithMessage(\"StatementExecution failed: \", status.message());\n+    }\n+    if (!(status = ValidatePreparedStatementExecution(&sql_client)).ok()) {\n+      return status.WithMessage(\"PreparedStatementExecution failed: \", status.message());\n+    }\n+    if (!(status = ValidateTransactions(&sql_client)).ok()) {\n+      return status.WithMessage(\"Transactions failed: \", status.message());\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status ValidateMetadataRetrieval(sql::FlightSqlClient* sql_client) {\n+    std::unique_ptr<FlightInfo> info;\n+    std::vector<int32_t> sql_info = {\n+        sql::SqlInfoOptions::FLIGHT_SQL_SERVER_SQL,\n+        sql::SqlInfoOptions::FLIGHT_SQL_SERVER_SUBSTRAIT,\n+        sql::SqlInfoOptions::FLIGHT_SQL_SERVER_SUBSTRAIT_MIN_VERSION,\n+        sql::SqlInfoOptions::FLIGHT_SQL_SERVER_SUBSTRAIT_MAX_VERSION,\n+        sql::SqlInfoOptions::FLIGHT_SQL_SERVER_TRANSACTION,\n+        sql::SqlInfoOptions::FLIGHT_SQL_SERVER_CANCEL,\n+        sql::SqlInfoOptions::FLIGHT_SQL_SERVER_STATEMENT_TIMEOUT,\n+        sql::SqlInfoOptions::FLIGHT_SQL_SERVER_TRANSACTION_TIMEOUT,\n+    };\n+    ARROW_ASSIGN_OR_RAISE(info, sql_client->GetSqlInfo({}, sql_info));\n+    ARROW_ASSIGN_OR_RAISE(auto reader,\n+                          sql_client->DoGet({}, info->endpoints()[0].ticket));\n+\n+    ARROW_ASSIGN_OR_RAISE(auto actual_schema, reader->GetSchema());\n+    if (!sql::SqlSchema::GetSqlInfoSchema()->Equals(*actual_schema,\n+                                                    /*check_metadata=*/true)) {\n+      return Status::Invalid(\"Schemas did not match. Expected:\\n\",\n+                             *sql::SqlSchema::GetSqlInfoSchema(), \"\\nActual:\\n\",\n+                             *actual_schema);\n+    }\n+\n+    sql::SqlInfoResultMap info_values;\n+    while (true) {\n+      ARROW_ASSIGN_OR_RAISE(auto chunk, reader->Next());\n+      if (!chunk.data) break;\n+\n+      const UInt32Array& info_name =\n+          static_cast<const UInt32Array&>(*chunk.data->column(0));\n\nReview Comment:\n   Use `checked_cast` here and below?\n\n\n\n##########\ncpp/src/arrow/flight/sql/example/acero_server.cc:\n##########\n@@ -0,0 +1,296 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/sql/example/acero_server.h\"\n+\n+#include <condition_variable>\n+#include <deque>\n+#include <mutex>\n+#include <unordered_map>\n+\n+#include \"arrow/engine/substrait/serde.h\"\n+#include \"arrow/flight/sql/types.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace acero_example {\n+\n+namespace {\n+class GetSchemaSinkNodeConsumer : public compute::SinkNodeConsumer {\n+ public:\n+  Status Init(const std::shared_ptr<Schema>& schema,\n+              compute::BackpressureControl*) override {\n+    schema_ = schema;\n+    return Status::OK();\n+  }\n+  Status Consume(compute::ExecBatch exec_batch) override { return Status::OK(); }\n+  Future<> Finish() override { return Status::OK(); }\n+\n+  const std::shared_ptr<Schema>& schema() const { return schema_; }\n+\n+ private:\n+  std::shared_ptr<Schema> schema_;\n+};\n+\n+class QueuingSinkNodeConsumer : public compute::SinkNodeConsumer {\n+ public:\n+  QueuingSinkNodeConsumer() : schema_(nullptr), finished_(false) {}\n+\n+  Status Init(const std::shared_ptr<Schema>& schema,\n+              compute::BackpressureControl*) override {\n+    schema_ = schema;\n+    return Status::OK();\n+  }\n+\n+  Status Consume(compute::ExecBatch exec_batch) override {\n+    {\n+      std::lock_guard<std::mutex> guard(mutex_);\n+      batches_.push_back(std::move(exec_batch));\n+      batches_added_.notify_all();\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Future<> Finish() override {\n+    {\n+      std::lock_guard<std::mutex> guard(mutex_);\n+      finished_ = true;\n+      batches_added_.notify_all();\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  const std::shared_ptr<Schema>& schema() const { return schema_; }\n+\n+  arrow::Result<std::shared_ptr<RecordBatch>> Next() {\n+    compute::ExecBatch batch;\n+    {\n+      std::unique_lock<std::mutex> guard(mutex_);\n+      batches_added_.wait(guard, [this] { return !batches_.empty() || finished_; });\n+\n+      if (finished_ && batches_.empty()) {\n+        return nullptr;\n+      }\n+      batch = std::move(batches_.front());\n+      batches_.pop_front();\n+    }\n+\n+    return batch.ToRecordBatch(schema_);\n+  }\n+\n+ private:\n+  std::mutex mutex_;\n+  std::condition_variable batches_added_;\n+  std::deque<compute::ExecBatch> batches_;\n+  std::shared_ptr<Schema> schema_;\n+  bool finished_;\n+};\n+\n+class ConsumerBasedRecordBatchReader : public RecordBatchReader {\n+ public:\n+  explicit ConsumerBasedRecordBatchReader(\n+      std::shared_ptr<compute::ExecPlan> plan,\n+      std::shared_ptr<QueuingSinkNodeConsumer> consumer)\n+      : plan_(std::move(plan)), consumer_(std::move(consumer)) {}\n+\n+  std::shared_ptr<Schema> schema() const override { return consumer_->schema(); }\n+\n+  Status ReadNext(std::shared_ptr<RecordBatch>* batch) override {\n+    return consumer_->Next().Value(batch);\n+  }\n+\n+  // TODO(ARROW-17242): FlightDataStream needs to call Close()\n+  Status Close() override { return plan_->finished().status(); }\n+\n+ private:\n+  std::shared_ptr<compute::ExecPlan> plan_;\n+  std::shared_ptr<QueuingSinkNodeConsumer> consumer_;\n+};\n+\n+class AceroFlightSqlServer : public FlightSqlServerBase {\n+ public:\n+  AceroFlightSqlServer() {\n+    RegisterSqlInfo(SqlInfoOptions::SqlInfo::FLIGHT_SQL_SERVER_SUBSTRAIT,\n+                    SqlInfoResult(true));\n+    RegisterSqlInfo(SqlInfoOptions::SqlInfo::FLIGHT_SQL_SERVER_SUBSTRAIT_MIN_VERSION,\n+                    SqlInfoResult(std::string(\"0.6.0\")));\n+    RegisterSqlInfo(SqlInfoOptions::SqlInfo::FLIGHT_SQL_SERVER_SUBSTRAIT_MAX_VERSION,\n+                    SqlInfoResult(std::string(\"0.6.0\")));\n+    RegisterSqlInfo(\n+        SqlInfoOptions::SqlInfo::FLIGHT_SQL_SERVER_TRANSACTION,\n+        SqlInfoResult(\n+            SqlInfoOptions::SqlSupportedTransaction::SQL_SUPPORTED_TRANSACTION_NONE));\n+    RegisterSqlInfo(SqlInfoOptions::SqlInfo::FLIGHT_SQL_SERVER_CANCEL,\n+                    SqlInfoResult(false));\n+  }\n+\n+  arrow::Result<std::unique_ptr<FlightInfo>> GetFlightInfoSubstraitPlan(\n+      const ServerCallContext& context, const StatementSubstraitPlan& command,\n+      const FlightDescriptor& descriptor) override {\n+    if (!command.transaction_id.empty()) {\n+      return Status::NotImplemented(\"Transactions are unsupported\");\n+    }\n+\n+    ARROW_ASSIGN_OR_RAISE(std::shared_ptr<arrow::Schema> output_schema,\n+                          GetPlanSchema(command.plan.plan));\n+\n+    ARROW_LOG(INFO) << \"GetFlightInfoSubstraitPlan: preparing plan with output schema \"\n+                    << *output_schema;\n+\n+    ARROW_ASSIGN_OR_RAISE(auto ticket, CreateStatementQueryTicket(command.plan.plan));\n+    std::vector<FlightEndpoint> endpoints{\n+        FlightEndpoint{Ticket{std::move(ticket)}, /*locations=*/{}}};\n+    ARROW_ASSIGN_OR_RAISE(\n+        auto info, FlightInfo::Make(*output_schema, descriptor, std::move(endpoints),\n+                                    /*total_records=*/-1, /*total_bytes=*/-1));\n+    return std::unique_ptr<FlightInfo>(new FlightInfo(std::move(info)));\n\nReview Comment:\n   Nit, but the logic to create the `FlightInfo` from an encoded substrait plan could perhaps be factored out in a dedicated helper method? (since `GetFlightInfoPreparedStatement` has the same logic inside)\n\n\n\n##########\ncpp/src/arrow/flight/sql/example/acero_server.cc:\n##########\n@@ -0,0 +1,296 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/sql/example/acero_server.h\"\n+\n+#include <condition_variable>\n+#include <deque>\n+#include <mutex>\n+#include <unordered_map>\n+\n+#include \"arrow/engine/substrait/serde.h\"\n+#include \"arrow/flight/sql/types.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace acero_example {\n+\n+namespace {\n+class GetSchemaSinkNodeConsumer : public compute::SinkNodeConsumer {\n\nReview Comment:\n   Would be nice to add docstrings/comments explaining each non-trivial helper class here.\n\n\n\n##########\ncpp/src/arrow/flight/sql/example/sqlite_server.cc:\n##########\n@@ -237,23 +226,82 @@ int32_t GetSqlTypeFromTypeName(const char* sqlite_type) {\n }\n \n class SQLiteFlightSqlServer::Impl {\n+ private:\n   sqlite3* db_;\n-  std::map<std::string, std::shared_ptr<SqliteStatement>> prepared_statements_;\n+  std::string db_uri_;\n\nReview Comment:\n   Nit\r\n   ```suggestion\r\n     const std::string db_uri_;\r\n   ```\n\n\n\n##########\ncpp/src/arrow/flight/sql/example/sqlite_server.cc:\n##########\n@@ -237,23 +226,82 @@ int32_t GetSqlTypeFromTypeName(const char* sqlite_type) {\n }\n \n class SQLiteFlightSqlServer::Impl {\n+ private:\n   sqlite3* db_;\n-  std::map<std::string, std::shared_ptr<SqliteStatement>> prepared_statements_;\n+  std::string db_uri_;\n+  std::mutex mutex_;\n+  std::unordered_map<std::string, std::shared_ptr<SqliteStatement>> prepared_statements_;\n\nReview Comment:\n   I see that accesses to `prepared_statements_` are never mutex-protected, is it right?\n\n\n\n##########\ncpp/src/arrow/flight/sql/example/sqlite_server.cc:\n##########\n@@ -627,28 +674,80 @@ class SQLiteFlightSqlServer::Impl {\n     return DoGetSQLiteQuery(db_, query, SqlSchema::GetCrossReferenceSchema());\n   }\n \n-  Status ExecuteSql(const std::string& sql) {\n+  Status ExecuteSql(const std::string& sql) { return ExecuteSql(db_, sql); }\n+\n+  Status ExecuteSql(sqlite3* db, const std::string& sql) {\n     char* err_msg = nullptr;\n-    int rc = sqlite3_exec(db_, sql.c_str(), nullptr, nullptr, &err_msg);\n+    int rc = sqlite3_exec(db, sql.c_str(), nullptr, nullptr, &err_msg);\n     if (rc != SQLITE_OK) {\n       std::string error_msg;\n       if (err_msg != nullptr) {\n         error_msg = err_msg;\n+        sqlite3_free(err_msg);\n       }\n-      sqlite3_free(err_msg);\n-      return Status::ExecutionError(error_msg);\n+      return Status::IOError(error_msg);\n     }\n+    if (err_msg) sqlite3_free(err_msg);\n     return Status::OK();\n   }\n+\n+  arrow::Result<ActionBeginTransactionResult> BeginTransaction(\n+      const ServerCallContext& context, const ActionBeginTransactionRequest& request) {\n+    std::string handle = GenerateRandomString();\n+    sqlite3* new_db = nullptr;\n+    if (sqlite3_open_v2(db_uri_.c_str(), &new_db,\n+                        SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE | SQLITE_OPEN_URI,\n+                        /*zVfs=*/nullptr) != SQLITE_OK) {\n+      std::string error_message = \"Can't open new connection: \";\n+      if (new_db) {\n+        error_message += sqlite3_errmsg(new_db);\n+        sqlite3_close(new_db);\n+      }\n+      return Status::Invalid(error_message);\n+    }\n+\n+    ARROW_RETURN_NOT_OK(ExecuteSql(new_db, \"BEGIN TRANSACTION\"));\n+\n+    open_transactions_[handle] = new_db;\n+    return ActionBeginTransactionResult{std::move(handle)};\n+  }\n+\n+  Status EndTransaction(const ServerCallContext& context,\n+                        const ActionEndTransactionRequest& request) {\n+    std::lock_guard<std::mutex> guard(mutex_);\n+    auto it = open_transactions_.find(request.transaction_id);\n+    if (it == open_transactions_.end()) {\n+      return Status::KeyError(\"Unknown transaction ID: \", request.transaction_id);\n+    }\n+\n+    Status status;\n+    if (request.action == ActionEndTransactionRequest::kCommit) {\n+      status = ExecuteSql(it->second, \"COMMIT\");\n+    } else {\n+      status = ExecuteSql(it->second, \"ROLLBACK\");\n+    }\n+    sqlite3_close(it->second);\n\nReview Comment:\n   Not sure how efficient you want this to be, but you might release the lock around these lines (and call `open_transactions_.erase` before?).\n\n\n\n",
                    "created": "2022-09-13T17:11:46.819+0000",
                    "updated": "2022-09-13T17:11:46.819+0000",
                    "started": "2022-09-13T17:11:46.818+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "808378",
                    "issueId": "13481159"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13481159/worklog/808407",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #13492:\nURL: https://github.com/apache/arrow/pull/13492#issuecomment-1245811744\n\n   Updated, thanks Antoine!\n\n\n",
                    "created": "2022-09-13T18:37:24.517+0000",
                    "updated": "2022-09-13T18:37:24.517+0000",
                    "started": "2022-09-13T18:37:24.516+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "808407",
                    "issueId": "13481159"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13481159/worklog/809560",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #13492:\nURL: https://github.com/apache/arrow/pull/13492#issuecomment-1249481735\n\n   CI failures here are addressed/fixed elsewhere\n\n\n",
                    "created": "2022-09-16T15:06:00.213+0000",
                    "updated": "2022-09-16T15:06:00.213+0000",
                    "started": "2022-09-16T15:06:00.213+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809560",
                    "issueId": "13481159"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13481159/worklog/809561",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm merged PR #13492:\nURL: https://github.com/apache/arrow/pull/13492\n\n\n",
                    "created": "2022-09-16T15:06:26.169+0000",
                    "updated": "2022-09-16T15:06:26.169+0000",
                    "started": "2022-09-16T15:06:26.168+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809561",
                    "issueId": "13481159"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13481159/worklog/809770",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on PR #13492:\nURL: https://github.com/apache/arrow/pull/13492#issuecomment-1250058817\n\n   Benchmark runs are scheduled for baseline = d571e93ad24d5111800540b42a3b8d56459edd9b and contender = 3ce40143f8a836df058ec5fe1b29d9da5ede169d. 3ce40143f8a836df058ec5fe1b29d9da5ede169d is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/7860b20bcf994f068b28c2a0aedcf926...c9dbe3244d614fc88fbc6abaf923a603/)\n   [Failed :arrow_down:0.1% :arrow_up:0.0%] [test-mac-arm](https://conbench.ursa.dev/compare/runs/d4eb62e784c94de8aa7dfefcb40b9e9e...93e3c6ca16094a30bd0b5d92907934a2/)\n   [Failed :arrow_down:0.28% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/e3688ed6ca0541b8ba610bc97ce43395...eb1836c5c089470aac66c9d897b7eca0/)\n   [Finished :arrow_down:0.21% :arrow_up:0.0%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/4b2ad45505674fcead7871bddc5f3a98...832b9fe58ffe4043aa081237ffcc38ed/)\n   Buildkite builds:\n   [Finished] [`3ce40143` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1502)\n   [Failed] [`3ce40143` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1519)\n   [Failed] [`3ce40143` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1502)\n   [Finished] [`3ce40143` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1516)\n   [Finished] [`d571e93a` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1501)\n   [Failed] [`d571e93a` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1518)\n   [Failed] [`d571e93a` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1501)\n   [Finished] [`d571e93a` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1515)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python, R. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n",
                    "created": "2022-09-17T12:02:33.554+0000",
                    "updated": "2022-09-17T12:02:33.554+0000",
                    "started": "2022-09-17T12:02:33.554+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809770",
                    "issueId": "13481159"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13481159/worklog/809771",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on PR #13492:\nURL: https://github.com/apache/arrow/pull/13492#issuecomment-1250058867\n\n   ['Python', 'R'] benchmarks have high level of regressions.\n   [test-mac-arm](https://conbench.ursa.dev/compare/runs/d4eb62e784c94de8aa7dfefcb40b9e9e...93e3c6ca16094a30bd0b5d92907934a2/)\n   [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/e3688ed6ca0541b8ba610bc97ce43395...eb1836c5c089470aac66c9d897b7eca0/)\n   \n\n\n",
                    "created": "2022-09-17T12:02:52.735+0000",
                    "updated": "2022-09-17T12:02:52.735+0000",
                    "started": "2022-09-17T12:02:52.735+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809771",
                    "issueId": "13481159"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 4200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1fbe8b70[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61b66900[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6aa69337[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@388a190a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@71ab4847[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@33aab0be[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6d4ba2d7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@561b43d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2ea33da6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@48ea478c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7807195c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@704f8a3d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4200,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Sep 16 15:06:26 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-09-16T15:06:26.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17688/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-09-12T17:03:31.000+0000",
        "updated": "2022-09-17T12:02:52.000+0000",
        "timeoriginalestimate": null,
        "description": "See ML: https://lists.apache.org/thread/3k3np6314dwb0n7n1hrfwony5fcy7kzl",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Format][FlightRPC][C++][Java] Add Substrait for Flight SQL",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13481159/comment/17605884",
                    "id": "17605884",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 13492\n[https://github.com/apache/arrow/pull/13492]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-09-16T15:06:26.700+0000",
                    "updated": "2022-09-16T15:06:26.700+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z18hug:",
        "customfield_12314139": null
    }
}