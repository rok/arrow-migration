{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13345700",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345700",
    "key": "ARROW-10889",
    "fields": {
        "parent": {
            "id": "13345697",
            "key": "ARROW-10888",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13345697",
            "fields": {
                "summary": "[Rust] Tracking issue for safety issues",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                    "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                    "name": "Closed",
                    "id": "6",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10889/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 24,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345700/worklog/523455",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8901:\nURL: https://github.com/apache/arrow/pull/8901#issuecomment-743802577\n\n\n   This is funny timing. I just filed ARROW-10889 for this and then saw this PR!\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-12T19:14:29.343+0000",
                    "updated": "2020-12-12T19:14:29.343+0000",
                    "started": "2020-12-12T19:14:29.343+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "523455",
                    "issueId": "13345700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345700/worklog/523457",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on pull request #8901:\nURL: https://github.com/apache/arrow/pull/8901#issuecomment-743803119\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/8901?src=pr&el=h1) Report\n   > Merging [#8901](https://codecov.io/gh/apache/arrow/pull/8901?src=pr&el=desc) (58d9327) into [master](https://codecov.io/gh/apache/arrow/commit/2816f37ff01cfd31101b3ee6cc8574cc9246dd1b?el=desc) (2816f37) will **decrease** coverage by `0.18%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/8901/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/8901?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #8901      +/-   ##\n   ==========================================\n   - Coverage   76.99%   76.81%   -0.19%     \n   ==========================================\n     Files         174      181       +7     \n     Lines       40392    40987     +595     \n   ==========================================\n   + Hits        31099    31483     +384     \n   - Misses       9293     9504     +211     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/8901?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/datafusion/src/optimizer/utils.rs](https://codecov.io/gh/apache/arrow/pull/8901/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvdXRpbHMucnM=) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/datafusion/src/datasource/memory.rs](https://codecov.io/gh/apache/arrow/pull/8901/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9kYXRhc291cmNlL21lbW9yeS5ycw==) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/datafusion/src/execution/context.rs](https://codecov.io/gh/apache/arrow/pull/8901/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vY29udGV4dC5ycw==) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/datafusion/src/logical\\_plan/plan.rs](https://codecov.io/gh/apache/arrow/pull/8901/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vcGxhbi5ycw==) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/datafusion/src/logical\\_plan/builder.rs](https://codecov.io/gh/apache/arrow/pull/8901/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vYnVpbGRlci5ycw==) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/datafusion/src/logical\\_plan/dfschema.rs](https://codecov.io/gh/apache/arrow/pull/8901/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vZGZzY2hlbWEucnM=) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/datafusion/src/physical\\_plan/planner.rs](https://codecov.io/gh/apache/arrow/pull/8901/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3BsYW5uZXIucnM=) | `0.00% <0.00%> (\u00f8)` | |\n   | [...ntegration-testing/src/bin/arrow-stream-to-file.rs](https://codecov.io/gh/apache/arrow/pull/8901/diff?src=pr&el=tree#diff-cnVzdC9pbnRlZ3JhdGlvbi10ZXN0aW5nL3NyYy9iaW4vYXJyb3ctc3RyZWFtLXRvLWZpbGUucnM=) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/parquet\\_derive/src/lib.rs](https://codecov.io/gh/apache/arrow/pull/8901/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0X2Rlcml2ZS9zcmMvbGliLnJz) | `0.00% <0.00%> (\u00f8)` | |\n   | [...ntegration-testing/src/bin/arrow-file-to-stream.rs](https://codecov.io/gh/apache/arrow/pull/8901/diff?src=pr&el=tree#diff-cnVzdC9pbnRlZ3JhdGlvbi10ZXN0aW5nL3NyYy9iaW4vYXJyb3ctZmlsZS10by1zdHJlYW0ucnM=) | `0.00% <0.00%> (\u00f8)` | |\n   | ... and [9 more](https://codecov.io/gh/apache/arrow/pull/8901/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/8901?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/8901?src=pr&el=footer). Last update [2816f37...58d9327](https://codecov.io/gh/apache/arrow/pull/8901?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-12T19:19:16.662+0000",
                    "updated": "2020-12-12T19:19:16.662+0000",
                    "started": "2020-12-12T19:19:16.662+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "523457",
                    "issueId": "13345700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345700/worklog/523458",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8901:\nURL: https://github.com/apache/arrow/pull/8901#issuecomment-743803763\n\n\n   https://issues.apache.org/jira/browse/ARROW-10889\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-12T19:24:20.072+0000",
                    "updated": "2020-12-12T19:24:20.072+0000",
                    "started": "2020-12-12T19:24:20.071+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "523458",
                    "issueId": "13345700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345700/worklog/523460",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on pull request #8901:\nURL: https://github.com/apache/arrow/pull/8901#issuecomment-743803119\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/8901?src=pr&el=h1) Report\n   > Merging [#8901](https://codecov.io/gh/apache/arrow/pull/8901?src=pr&el=desc) (6251d00) into [master](https://codecov.io/gh/apache/arrow/commit/2816f37ff01cfd31101b3ee6cc8574cc9246dd1b?el=desc) (2816f37) will **decrease** coverage by `0.18%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/8901/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/8901?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #8901      +/-   ##\n   ==========================================\n   - Coverage   76.99%   76.81%   -0.19%     \n   ==========================================\n     Files         174      181       +7     \n     Lines       40392    40987     +595     \n   ==========================================\n   + Hits        31099    31483     +384     \n   - Misses       9293     9504     +211     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/8901?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/datafusion/src/optimizer/utils.rs](https://codecov.io/gh/apache/arrow/pull/8901/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvdXRpbHMucnM=) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/datafusion/src/datasource/memory.rs](https://codecov.io/gh/apache/arrow/pull/8901/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9kYXRhc291cmNlL21lbW9yeS5ycw==) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/datafusion/src/execution/context.rs](https://codecov.io/gh/apache/arrow/pull/8901/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vY29udGV4dC5ycw==) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/datafusion/src/logical\\_plan/plan.rs](https://codecov.io/gh/apache/arrow/pull/8901/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vcGxhbi5ycw==) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/datafusion/src/logical\\_plan/builder.rs](https://codecov.io/gh/apache/arrow/pull/8901/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vYnVpbGRlci5ycw==) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/datafusion/src/logical\\_plan/dfschema.rs](https://codecov.io/gh/apache/arrow/pull/8901/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vZGZzY2hlbWEucnM=) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/datafusion/src/physical\\_plan/planner.rs](https://codecov.io/gh/apache/arrow/pull/8901/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3BsYW5uZXIucnM=) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/parquet/src/bin/parquet-rowcount.rs](https://codecov.io/gh/apache/arrow/pull/8901/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9iaW4vcGFycXVldC1yb3djb3VudC5ycw==) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/parquet/src/bin/parquet-schema.rs](https://codecov.io/gh/apache/arrow/pull/8901/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9iaW4vcGFycXVldC1zY2hlbWEucnM=) | `0.00% <0.00%> (\u00f8)` | |\n   | [...ion-testing/src/bin/arrow-json-integration-test.rs](https://codecov.io/gh/apache/arrow/pull/8901/diff?src=pr&el=tree#diff-cnVzdC9pbnRlZ3JhdGlvbi10ZXN0aW5nL3NyYy9iaW4vYXJyb3ctanNvbi1pbnRlZ3JhdGlvbi10ZXN0LnJz) | `0.00% <0.00%> (\u00f8)` | |\n   | ... and [9 more](https://codecov.io/gh/apache/arrow/pull/8901/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/8901?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/8901?src=pr&el=footer). Last update [2816f37...6251d00](https://codecov.io/gh/apache/arrow/pull/8901?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-12T19:33:04.899+0000",
                    "updated": "2020-12-12T19:33:04.899+0000",
                    "started": "2020-12-12T19:33:04.899+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "523460",
                    "issueId": "13345700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345700/worklog/523461",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8901:\nURL: https://github.com/apache/arrow/pull/8901#issuecomment-743806817\n\n\n   It would be really cool to have a GitHub Action that detected `unsafe` in a PR and auto-posted a link to this documentation, as well as tagging the PR with an `unsafe` label. I do not know how feasible that is though.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-12T19:49:42.635+0000",
                    "updated": "2020-12-12T19:49:42.635+0000",
                    "started": "2020-12-12T19:49:42.635+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "523461",
                    "issueId": "13345700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345700/worklog/523469",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on pull request #8901:\nURL: https://github.com/apache/arrow/pull/8901#issuecomment-743827047\n\n\n   Very cool proposal. Will take some time soon to read it in detail. I think currently there is a lot of code violating what is proposed, so that's clearly needed \ud83d\udc4d \r\n   \r\n   I think it also makes sense to keep track of the amount of `unsafe` that is used, and try to reduce it as much as possible by introducing safe APIs that are as performant. An example might be: introducing a safe iterator to avoid bounds checking. \r\n   \r\n   Also I think the unsafe code can /should be more tested, e.g. by having more `debug_asserts` etc. checking for invariants and checking for undefined behavior in the CI.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-12T20:25:19.768+0000",
                    "updated": "2020-12-12T20:25:19.768+0000",
                    "started": "2020-12-12T20:25:19.767+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "523469",
                    "issueId": "13345700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345700/worklog/523536",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8901:\nURL: https://github.com/apache/arrow/pull/8901#discussion_r541865867\n\n\n\n##########\nFile path: rust/arrow/README.md\n##########\n@@ -93,6 +93,79 @@ Arrow uses the following features:\n Other than `simd` all the other features are enabled by default. Disabling `prettyprint` might be necessary in order to\n compile Arrow to the `wasm32-unknown-unknown` WASM target.\n \n+## Guidelines in usage of `unsafe`\n+\n+[`unsafe`](https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html) has a high maintenance cost because debugging and testing it is difficult, time consuming, often requires external tools (e.g. `valgrind`), and requires a higher-than-usual attention to details. Undefined behavior is particularly difficult to identify and test, and usage of `unsafe` is the primary cause of undefined behavior in a program written in Rust `[citation needed]`.\n+\n+This crate only accepts the usage of `unsafe` code upon careful consideration, and strives to avoid it to the largest possible extent.\n+\n+### When can `unsafe` be used?\n+\n+Generally, `unsafe` can only be used when a `safe` counterpart is not available or has performance implications. The following is a summary of the current components of the crate that require `unsafe`:\n+\n+* alloc, dealloc and realloc of buffers along cache lines\n+* Interpreting bytes as certain rust types, for access, representation and compute\n+* Foreign interfaces (C data interface)\n+* Inter-process communication (IPC)\n+* SIMD\n+* Performance\n+\n+#### cache-line aligned memory management\n+\n+The arrow format recommends storing buffers aligned with cache lines, and this crate adopts this behavior.\n+However, Rust's global allocator does not allocates memory aligned with cache-lines. As such, many of the low-level operations related to memory management require `unsafe`.\n+\n+Usage of `unsafe` for the purposes of supporting allocations aligned with cache lines is allowed.\n+\n+#### Interpreting bytes\n+\n+The arrow format is specified in bytes (`u8`), which can be logically represented as certain types\n+depending on the DataType.\n+For many operations, such as access, representation, numerical computation and string manipulation,\n+it is often necessary to interpret bytes as other physical types (e.g. `i32`).\n+\n+Usage of `unsafe` for the purpose of interpreting bytes in their corresponding type (according to the arrow specification) is allowed. Specifically, the pointer to the byte slice must be aligned to the type that it intends to represent and the length of the slice is a multiple of the size of the target type of the transmutation.\n+\n+#### FFI\n+\n+The arrow format declares an ABI for zero-copy from and to libraries that implement the specification\n+(foreign interfaces). In Rust, receiving and sending pointers via FFI requires usage of `unsafe` due to \n+the impossibility of the compiler to derive the invariants (such as lifetime, null pointers, and pointer alignment), from the source code alone as they are part of the FFI contract.\n+\n+Usage of `unsafe` for the purposes of supporting FFI is allowed.\n+\n+#### IPC\n+\n+The arrow format declares a IPC protocol, which this crate supports. IPC is equivalent to a FFI in that the rust compiler can't reason about the contract's invariants.\n+\n+Usage of `unsafe` for the purposes of supporting IPC is allowed.\n+\n+#### SIMD\n+\n+The API provided by the `packed_simd` library is currently `unsafe`. However, SIMD offers a significant performance improvement over non-SIMD operations.\n+\n+Usage of `unsafe` for the purposes of supporting SIMD is allowed.\n+\n+#### Performance\n+\n+Some operations are significantly faster when `unsafe` is used.\n+\n+A common usage of `unsafe` is to offer an API to access the `i`th element of an array (e.g. `UInt32Array`).\n+This requires accessing the values buffer e.g. `array.buffers()[0]`, picking the slice \n+`[i * size_of<i32>(), (i + 1) * size_of<i32>()]`, and then transmuting it to `i32`. In safe Rust, \n+this operation requires boundary checks that are detrimental to performance.\n+\n+Usage of `unsafe` for performance reasons is justified only when the performance difference of a publicly available API is estatistically significantly larger than 10%, as demonstrated by a `bench`.\n\nReview comment:\n       Maybe 10% is a bit arbitrary and depends on context? Maybe it should.bd demonstrated / be likely that it has an impact on real world usage of arrow?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-13T07:24:31.733+0000",
                    "updated": "2020-12-13T07:24:31.733+0000",
                    "started": "2020-12-13T07:24:31.733+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "523536",
                    "issueId": "13345700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345700/worklog/523537",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8901:\nURL: https://github.com/apache/arrow/pull/8901#discussion_r541866432\n\n\n\n##########\nFile path: rust/arrow/README.md\n##########\n@@ -93,6 +93,79 @@ Arrow uses the following features:\n Other than `simd` all the other features are enabled by default. Disabling `prettyprint` might be necessary in order to\n compile Arrow to the `wasm32-unknown-unknown` WASM target.\n \n+## Guidelines in usage of `unsafe`\n+\n+[`unsafe`](https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html) has a high maintenance cost because debugging and testing it is difficult, time consuming, often requires external tools (e.g. `valgrind`), and requires a higher-than-usual attention to details. Undefined behavior is particularly difficult to identify and test, and usage of `unsafe` is the primary cause of undefined behavior in a program written in Rust `[citation needed]`.\n+\n+This crate only accepts the usage of `unsafe` code upon careful consideration, and strives to avoid it to the largest possible extent.\n+\n+### When can `unsafe` be used?\n+\n+Generally, `unsafe` can only be used when a `safe` counterpart is not available or has performance implications. The following is a summary of the current components of the crate that require `unsafe`:\n+\n+* alloc, dealloc and realloc of buffers along cache lines\n+* Interpreting bytes as certain rust types, for access, representation and compute\n+* Foreign interfaces (C data interface)\n+* Inter-process communication (IPC)\n+* SIMD\n+* Performance\n+\n+#### cache-line aligned memory management\n+\n+The arrow format recommends storing buffers aligned with cache lines, and this crate adopts this behavior.\n+However, Rust's global allocator does not allocates memory aligned with cache-lines. As such, many of the low-level operations related to memory management require `unsafe`.\n+\n+Usage of `unsafe` for the purposes of supporting allocations aligned with cache lines is allowed.\n+\n+#### Interpreting bytes\n+\n+The arrow format is specified in bytes (`u8`), which can be logically represented as certain types\n+depending on the DataType.\n+For many operations, such as access, representation, numerical computation and string manipulation,\n+it is often necessary to interpret bytes as other physical types (e.g. `i32`).\n+\n+Usage of `unsafe` for the purpose of interpreting bytes in their corresponding type (according to the arrow specification) is allowed. Specifically, the pointer to the byte slice must be aligned to the type that it intends to represent and the length of the slice is a multiple of the size of the target type of the transmutation.\n+\n+#### FFI\n+\n+The arrow format declares an ABI for zero-copy from and to libraries that implement the specification\n+(foreign interfaces). In Rust, receiving and sending pointers via FFI requires usage of `unsafe` due to \n+the impossibility of the compiler to derive the invariants (such as lifetime, null pointers, and pointer alignment), from the source code alone as they are part of the FFI contract.\n+\n+Usage of `unsafe` for the purposes of supporting FFI is allowed.\n+\n+#### IPC\n+\n+The arrow format declares a IPC protocol, which this crate supports. IPC is equivalent to a FFI in that the rust compiler can't reason about the contract's invariants.\n+\n+Usage of `unsafe` for the purposes of supporting IPC is allowed.\n+\n+#### SIMD\n+\n+The API provided by the `packed_simd` library is currently `unsafe`. However, SIMD offers a significant performance improvement over non-SIMD operations.\n+\n+Usage of `unsafe` for the purposes of supporting SIMD is allowed.\n+\n+#### Performance\n+\n+Some operations are significantly faster when `unsafe` is used.\n+\n+A common usage of `unsafe` is to offer an API to access the `i`th element of an array (e.g. `UInt32Array`).\n+This requires accessing the values buffer e.g. `array.buffers()[0]`, picking the slice \n+`[i * size_of<i32>(), (i + 1) * size_of<i32>()]`, and then transmuting it to `i32`. In safe Rust, \n+this operation requires boundary checks that are detrimental to performance.\n+\n+Usage of `unsafe` for performance reasons is justified only when the performance difference of a publicly available API is estatistically significantly larger than 10%, as demonstrated by a `bench`.\n+\n+### Considerations when introducing `unsafe`\n+\n+Usage of `unsafe` in this crate *must*:\n+\n+* not expose a public API as `safe` when there are necessary invariants for that API to be defined behavior.\n+* have code documentation for why a `safe` is not used / possible (e.g. `// 30% performance degradation if the safe counterpart is used, see bench X`)\n+* have code documentation about which invariant the user needs to enforce to ensure no undefined behavior (e.g. `// this buffer must be constructed according to the arrow specification`)\n+* if applicable, have the necessary `assert`s (not `debug_assert`!) of invariants.\n+\n\nReview comment:\n       I think places that do use unsafe, should have their invariants in a debug assert (as it's often something you want to skill for release builds).\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-13T07:27:48.197+0000",
                    "updated": "2020-12-13T07:27:48.197+0000",
                    "started": "2020-12-13T07:27:48.197+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "523537",
                    "issueId": "13345700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345700/worklog/523570",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8901:\nURL: https://github.com/apache/arrow/pull/8901#discussion_r541866432\n\n\n\n##########\nFile path: rust/arrow/README.md\n##########\n@@ -93,6 +93,79 @@ Arrow uses the following features:\n Other than `simd` all the other features are enabled by default. Disabling `prettyprint` might be necessary in order to\n compile Arrow to the `wasm32-unknown-unknown` WASM target.\n \n+## Guidelines in usage of `unsafe`\n+\n+[`unsafe`](https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html) has a high maintenance cost because debugging and testing it is difficult, time consuming, often requires external tools (e.g. `valgrind`), and requires a higher-than-usual attention to details. Undefined behavior is particularly difficult to identify and test, and usage of `unsafe` is the primary cause of undefined behavior in a program written in Rust `[citation needed]`.\n+\n+This crate only accepts the usage of `unsafe` code upon careful consideration, and strives to avoid it to the largest possible extent.\n+\n+### When can `unsafe` be used?\n+\n+Generally, `unsafe` can only be used when a `safe` counterpart is not available or has performance implications. The following is a summary of the current components of the crate that require `unsafe`:\n+\n+* alloc, dealloc and realloc of buffers along cache lines\n+* Interpreting bytes as certain rust types, for access, representation and compute\n+* Foreign interfaces (C data interface)\n+* Inter-process communication (IPC)\n+* SIMD\n+* Performance\n+\n+#### cache-line aligned memory management\n+\n+The arrow format recommends storing buffers aligned with cache lines, and this crate adopts this behavior.\n+However, Rust's global allocator does not allocates memory aligned with cache-lines. As such, many of the low-level operations related to memory management require `unsafe`.\n+\n+Usage of `unsafe` for the purposes of supporting allocations aligned with cache lines is allowed.\n+\n+#### Interpreting bytes\n+\n+The arrow format is specified in bytes (`u8`), which can be logically represented as certain types\n+depending on the DataType.\n+For many operations, such as access, representation, numerical computation and string manipulation,\n+it is often necessary to interpret bytes as other physical types (e.g. `i32`).\n+\n+Usage of `unsafe` for the purpose of interpreting bytes in their corresponding type (according to the arrow specification) is allowed. Specifically, the pointer to the byte slice must be aligned to the type that it intends to represent and the length of the slice is a multiple of the size of the target type of the transmutation.\n+\n+#### FFI\n+\n+The arrow format declares an ABI for zero-copy from and to libraries that implement the specification\n+(foreign interfaces). In Rust, receiving and sending pointers via FFI requires usage of `unsafe` due to \n+the impossibility of the compiler to derive the invariants (such as lifetime, null pointers, and pointer alignment), from the source code alone as they are part of the FFI contract.\n+\n+Usage of `unsafe` for the purposes of supporting FFI is allowed.\n+\n+#### IPC\n+\n+The arrow format declares a IPC protocol, which this crate supports. IPC is equivalent to a FFI in that the rust compiler can't reason about the contract's invariants.\n+\n+Usage of `unsafe` for the purposes of supporting IPC is allowed.\n+\n+#### SIMD\n+\n+The API provided by the `packed_simd` library is currently `unsafe`. However, SIMD offers a significant performance improvement over non-SIMD operations.\n+\n+Usage of `unsafe` for the purposes of supporting SIMD is allowed.\n+\n+#### Performance\n+\n+Some operations are significantly faster when `unsafe` is used.\n+\n+A common usage of `unsafe` is to offer an API to access the `i`th element of an array (e.g. `UInt32Array`).\n+This requires accessing the values buffer e.g. `array.buffers()[0]`, picking the slice \n+`[i * size_of<i32>(), (i + 1) * size_of<i32>()]`, and then transmuting it to `i32`. In safe Rust, \n+this operation requires boundary checks that are detrimental to performance.\n+\n+Usage of `unsafe` for performance reasons is justified only when the performance difference of a publicly available API is estatistically significantly larger than 10%, as demonstrated by a `bench`.\n+\n+### Considerations when introducing `unsafe`\n+\n+Usage of `unsafe` in this crate *must*:\n+\n+* not expose a public API as `safe` when there are necessary invariants for that API to be defined behavior.\n+* have code documentation for why a `safe` is not used / possible (e.g. `// 30% performance degradation if the safe counterpart is used, see bench X`)\n+* have code documentation about which invariant the user needs to enforce to ensure no undefined behavior (e.g. `// this buffer must be constructed according to the arrow specification`)\n+* if applicable, have the necessary `assert`s (not `debug_assert`!) of invariants.\n+\n\nReview comment:\n       I think places that do use unsafe, should have their invariants in a debug assert (as it's often something you want to skip for release builds).\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-13T10:02:01.301+0000",
                    "updated": "2020-12-13T10:02:01.301+0000",
                    "started": "2020-12-13T10:02:01.300+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "523570",
                    "issueId": "13345700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345700/worklog/523580",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8901:\nURL: https://github.com/apache/arrow/pull/8901#discussion_r541902004\n\n\n\n##########\nFile path: rust/arrow/README.md\n##########\n@@ -93,6 +93,79 @@ Arrow uses the following features:\n Other than `simd` all the other features are enabled by default. Disabling `prettyprint` might be necessary in order to\n compile Arrow to the `wasm32-unknown-unknown` WASM target.\n \n+## Guidelines in usage of `unsafe`\n+\n+[`unsafe`](https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html) has a high maintenance cost because debugging and testing it is difficult, time consuming, often requires external tools (e.g. `valgrind`), and requires a higher-than-usual attention to details. Undefined behavior is particularly difficult to identify and test, and usage of `unsafe` is the primary cause of undefined behavior in a program written in Rust `[citation needed]`.\n+\n\nReview comment:\n       ```suggestion\r\n   For two real world examples of where `unsafe` has consumed time in the past in this project see [#8545](https://github.com/apache/arrow/pull/8645) and [8829](https://github.com/apache/arrow/pull/8829)\r\n   ```\n\n##########\nFile path: rust/arrow/README.md\n##########\n@@ -93,6 +93,79 @@ Arrow uses the following features:\n Other than `simd` all the other features are enabled by default. Disabling `prettyprint` might be necessary in order to\n compile Arrow to the `wasm32-unknown-unknown` WASM target.\n \n+## Guidelines in usage of `unsafe`\n+\n+[`unsafe`](https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html) has a high maintenance cost because debugging and testing it is difficult, time consuming, often requires external tools (e.g. `valgrind`), and requires a higher-than-usual attention to details. Undefined behavior is particularly difficult to identify and test, and usage of `unsafe` is the primary cause of undefined behavior in a program written in Rust `[citation needed]`.\n\nReview comment:\n       https://doc.rust-lang.org/reference/behavior-considered-undefined.html might be a reasonable citation, though it doesn't quantify the sources of unsafetly.\n\n##########\nFile path: rust/arrow/README.md\n##########\n@@ -93,6 +93,79 @@ Arrow uses the following features:\n Other than `simd` all the other features are enabled by default. Disabling `prettyprint` might be necessary in order to\n compile Arrow to the `wasm32-unknown-unknown` WASM target.\n \n+## Guidelines in usage of `unsafe`\n+\n+[`unsafe`](https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html) has a high maintenance cost because debugging and testing it is difficult, time consuming, often requires external tools (e.g. `valgrind`), and requires a higher-than-usual attention to details. Undefined behavior is particularly difficult to identify and test, and usage of `unsafe` is the primary cause of undefined behavior in a program written in Rust `[citation needed]`.\n+\n+This crate only accepts the usage of `unsafe` code upon careful consideration, and strives to avoid it to the largest possible extent.\n+\n+### When can `unsafe` be used?\n+\n+Generally, `unsafe` can only be used when a `safe` counterpart is not available or has performance implications. The following is a summary of the current components of the crate that require `unsafe`:\n+\n\nReview comment:\n       ```suggestion\r\n   Generally, `unsafe` should only be used when a `safe` counterpart is not available and there is no `safe` way to achieve additional performance in that area. The following is a summary of the current components of the crate that require `unsafe`:\r\n   \r\n   ```\n\n##########\nFile path: rust/arrow/README.md\n##########\n@@ -93,6 +93,79 @@ Arrow uses the following features:\n Other than `simd` all the other features are enabled by default. Disabling `prettyprint` might be necessary in order to\n compile Arrow to the `wasm32-unknown-unknown` WASM target.\n \n+## Guidelines in usage of `unsafe`\n+\n+[`unsafe`](https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html) has a high maintenance cost because debugging and testing it is difficult, time consuming, often requires external tools (e.g. `valgrind`), and requires a higher-than-usual attention to details. Undefined behavior is particularly difficult to identify and test, and usage of `unsafe` is the primary cause of undefined behavior in a program written in Rust `[citation needed]`.\n+\n+This crate only accepts the usage of `unsafe` code upon careful consideration, and strives to avoid it to the largest possible extent.\n+\n+### When can `unsafe` be used?\n+\n+Generally, `unsafe` can only be used when a `safe` counterpart is not available or has performance implications. The following is a summary of the current components of the crate that require `unsafe`:\n+\n+* alloc, dealloc and realloc of buffers along cache lines\n+* Interpreting bytes as certain rust types, for access, representation and compute\n+* Foreign interfaces (C data interface)\n+* Inter-process communication (IPC)\n+* SIMD\n+* Performance\n+\n+#### cache-line aligned memory management\n+\n+The arrow format recommends storing buffers aligned with cache lines, and this crate adopts this behavior.\n+However, Rust's global allocator does not allocates memory aligned with cache-lines. As such, many of the low-level operations related to memory management require `unsafe`.\n+\n+Usage of `unsafe` for the purposes of supporting allocations aligned with cache lines is allowed.\n+\n+#### Interpreting bytes\n+\n+The arrow format is specified in bytes (`u8`), which can be logically represented as certain types\n+depending on the DataType.\n+For many operations, such as access, representation, numerical computation and string manipulation,\n+it is often necessary to interpret bytes as other physical types (e.g. `i32`).\n+\n+Usage of `unsafe` for the purpose of interpreting bytes in their corresponding type (according to the arrow specification) is allowed. Specifically, the pointer to the byte slice must be aligned to the type that it intends to represent and the length of the slice is a multiple of the size of the target type of the transmutation.\n+\n+#### FFI\n+\n+The arrow format declares an ABI for zero-copy from and to libraries that implement the specification\n+(foreign interfaces). In Rust, receiving and sending pointers via FFI requires usage of `unsafe` due to \n+the impossibility of the compiler to derive the invariants (such as lifetime, null pointers, and pointer alignment), from the source code alone as they are part of the FFI contract.\n+\n+Usage of `unsafe` for the purposes of supporting FFI is allowed.\n+\n+#### IPC\n+\n+The arrow format declares a IPC protocol, which this crate supports. IPC is equivalent to a FFI in that the rust compiler can't reason about the contract's invariants.\n+\n+Usage of `unsafe` for the purposes of supporting IPC is allowed.\n+\n+#### SIMD\n+\n+The API provided by the `packed_simd` library is currently `unsafe`. However, SIMD offers a significant performance improvement over non-SIMD operations.\n+\n+Usage of `unsafe` for the purposes of supporting SIMD is allowed.\n+\n+#### Performance\n+\n+Some operations are significantly faster when `unsafe` is used.\n+\n+A common usage of `unsafe` is to offer an API to access the `i`th element of an array (e.g. `UInt32Array`).\n+This requires accessing the values buffer e.g. `array.buffers()[0]`, picking the slice \n+`[i * size_of<i32>(), (i + 1) * size_of<i32>()]`, and then transmuting it to `i32`. In safe Rust, \n+this operation requires boundary checks that are detrimental to performance.\n+\n+Usage of `unsafe` for performance reasons is justified only when the performance difference of a publicly available API is estatistically significantly larger than 10%, as demonstrated by a `bench`.\n+\n+### Considerations when introducing `unsafe`\n+\n+Usage of `unsafe` in this crate *must*:\n+\n+* not expose a public API as `safe` when there are necessary invariants for that API to be defined behavior.\n+* have code documentation for why a `safe` is not used / possible (e.g. `// 30% performance degradation if the safe counterpart is used, see bench X`)\n+* have code documentation about which invariant the user needs to enforce to ensure no undefined behavior (e.g. `// this buffer must be constructed according to the arrow specification`)\n+* if applicable, have the necessary `assert`s (not `debug_assert`!) of invariants.\n+\n\nReview comment:\n       I also don't fully understand the mandate about `assert` -- I suggest removing the last bullet point as I think it may be more confusing than helpful\n\n##########\nFile path: rust/arrow/README.md\n##########\n@@ -93,6 +93,79 @@ Arrow uses the following features:\n Other than `simd` all the other features are enabled by default. Disabling `prettyprint` might be necessary in order to\n compile Arrow to the `wasm32-unknown-unknown` WASM target.\n \n+## Guidelines in usage of `unsafe`\n+\n+[`unsafe`](https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html) has a high maintenance cost because debugging and testing it is difficult, time consuming, often requires external tools (e.g. `valgrind`), and requires a higher-than-usual attention to details. Undefined behavior is particularly difficult to identify and test, and usage of `unsafe` is the primary cause of undefined behavior in a program written in Rust `[citation needed]`.\n+\n+This crate only accepts the usage of `unsafe` code upon careful consideration, and strives to avoid it to the largest possible extent.\n+\n+### When can `unsafe` be used?\n+\n+Generally, `unsafe` can only be used when a `safe` counterpart is not available or has performance implications. The following is a summary of the current components of the crate that require `unsafe`:\n+\n+* alloc, dealloc and realloc of buffers along cache lines\n+* Interpreting bytes as certain rust types, for access, representation and compute\n+* Foreign interfaces (C data interface)\n+* Inter-process communication (IPC)\n+* SIMD\n+* Performance\n\nReview comment:\n       I suggest being more explicit here -- maybe \"Omitting bounds checking for performance\" or something\n\n##########\nFile path: rust/arrow/README.md\n##########\n@@ -93,6 +93,79 @@ Arrow uses the following features:\n Other than `simd` all the other features are enabled by default. Disabling `prettyprint` might be necessary in order to\n compile Arrow to the `wasm32-unknown-unknown` WASM target.\n \n+## Guidelines in usage of `unsafe`\n+\n+[`unsafe`](https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html) has a high maintenance cost because debugging and testing it is difficult, time consuming, often requires external tools (e.g. `valgrind`), and requires a higher-than-usual attention to details. Undefined behavior is particularly difficult to identify and test, and usage of `unsafe` is the primary cause of undefined behavior in a program written in Rust `[citation needed]`.\n+\n+This crate only accepts the usage of `unsafe` code upon careful consideration, and strives to avoid it to the largest possible extent.\n+\n+### When can `unsafe` be used?\n+\n+Generally, `unsafe` can only be used when a `safe` counterpart is not available or has performance implications. The following is a summary of the current components of the crate that require `unsafe`:\n+\n+* alloc, dealloc and realloc of buffers along cache lines\n+* Interpreting bytes as certain rust types, for access, representation and compute\n+* Foreign interfaces (C data interface)\n+* Inter-process communication (IPC)\n+* SIMD\n+* Performance\n+\n+#### cache-line aligned memory management\n+\n+The arrow format recommends storing buffers aligned with cache lines, and this crate adopts this behavior.\n+However, Rust's global allocator does not allocates memory aligned with cache-lines. As such, many of the low-level operations related to memory management require `unsafe`.\n+\n+Usage of `unsafe` for the purposes of supporting allocations aligned with cache lines is allowed.\n\nReview comment:\n       stylistically, I think we could remove the 'Usage of `unsafe` for ...' sentences. The rationale for use of unsafe is already explained above so this repetition seems redundant to me.\r\n   \r\n   I also think such wording may give the impression that `unsafe` is always allowed for these operations, when I think the intent is \"unsafe can be used as a last resort\"\n\n##########\nFile path: rust/arrow/README.md\n##########\n@@ -93,6 +93,79 @@ Arrow uses the following features:\n Other than `simd` all the other features are enabled by default. Disabling `prettyprint` might be necessary in order to\n compile Arrow to the `wasm32-unknown-unknown` WASM target.\n \n+## Guidelines in usage of `unsafe`\n+\n+[`unsafe`](https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html) has a high maintenance cost because debugging and testing it is difficult, time consuming, often requires external tools (e.g. `valgrind`), and requires a higher-than-usual attention to details. Undefined behavior is particularly difficult to identify and test, and usage of `unsafe` is the primary cause of undefined behavior in a program written in Rust `[citation needed]`.\n+\n+This crate only accepts the usage of `unsafe` code upon careful consideration, and strives to avoid it to the largest possible extent.\n+\n+### When can `unsafe` be used?\n+\n+Generally, `unsafe` can only be used when a `safe` counterpart is not available or has performance implications. The following is a summary of the current components of the crate that require `unsafe`:\n+\n+* alloc, dealloc and realloc of buffers along cache lines\n+* Interpreting bytes as certain rust types, for access, representation and compute\n+* Foreign interfaces (C data interface)\n+* Inter-process communication (IPC)\n+* SIMD\n+* Performance\n+\n+#### cache-line aligned memory management\n+\n+The arrow format recommends storing buffers aligned with cache lines, and this crate adopts this behavior.\n+However, Rust's global allocator does not allocates memory aligned with cache-lines. As such, many of the low-level operations related to memory management require `unsafe`.\n+\n+Usage of `unsafe` for the purposes of supporting allocations aligned with cache lines is allowed.\n+\n+#### Interpreting bytes\n+\n+The arrow format is specified in bytes (`u8`), which can be logically represented as certain types\n+depending on the DataType.\n+For many operations, such as access, representation, numerical computation and string manipulation,\n+it is often necessary to interpret bytes as other physical types (e.g. `i32`).\n+\n+Usage of `unsafe` for the purpose of interpreting bytes in their corresponding type (according to the arrow specification) is allowed. Specifically, the pointer to the byte slice must be aligned to the type that it intends to represent and the length of the slice is a multiple of the size of the target type of the transmutation.\n+\n+#### FFI\n+\n+The arrow format declares an ABI for zero-copy from and to libraries that implement the specification\n+(foreign interfaces). In Rust, receiving and sending pointers via FFI requires usage of `unsafe` due to \n+the impossibility of the compiler to derive the invariants (such as lifetime, null pointers, and pointer alignment), from the source code alone as they are part of the FFI contract.\n+\n+Usage of `unsafe` for the purposes of supporting FFI is allowed.\n+\n+#### IPC\n+\n+The arrow format declares a IPC protocol, which this crate supports. IPC is equivalent to a FFI in that the rust compiler can't reason about the contract's invariants.\n+\n+Usage of `unsafe` for the purposes of supporting IPC is allowed.\n+\n+#### SIMD\n+\n+The API provided by the `packed_simd` library is currently `unsafe`. However, SIMD offers a significant performance improvement over non-SIMD operations.\n+\n+Usage of `unsafe` for the purposes of supporting SIMD is allowed.\n+\n+#### Performance\n+\n+Some operations are significantly faster when `unsafe` is used.\n+\n+A common usage of `unsafe` is to offer an API to access the `i`th element of an array (e.g. `UInt32Array`).\n+This requires accessing the values buffer e.g. `array.buffers()[0]`, picking the slice \n+`[i * size_of<i32>(), (i + 1) * size_of<i32>()]`, and then transmuting it to `i32`. In safe Rust, \n+this operation requires boundary checks that are detrimental to performance.\n+\n+Usage of `unsafe` for performance reasons is justified only when the performance difference of a publicly available API is estatistically significantly larger than 10%, as demonstrated by a `bench`.\n+\n+### Considerations when introducing `unsafe`\n+\n+Usage of `unsafe` in this crate *must*:\n+\n+* not expose a public API as `safe` when there are necessary invariants for that API to be defined behavior.\n+* have code documentation for why a `safe` is not used / possible (e.g. `// 30% performance degradation if the safe counterpart is used, see bench X`)\n\nReview comment:\n       ```suggestion\r\n   * have code documentation for why `safe` is not used / possible (e.g. `// 30% performance degradation if the safe counterpart is used, see bench X`)\r\n   ```\n\n##########\nFile path: rust/arrow/README.md\n##########\n@@ -93,6 +93,79 @@ Arrow uses the following features:\n Other than `simd` all the other features are enabled by default. Disabling `prettyprint` might be necessary in order to\n compile Arrow to the `wasm32-unknown-unknown` WASM target.\n \n+## Guidelines in usage of `unsafe`\n+\n+[`unsafe`](https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html) has a high maintenance cost because debugging and testing it is difficult, time consuming, often requires external tools (e.g. `valgrind`), and requires a higher-than-usual attention to details. Undefined behavior is particularly difficult to identify and test, and usage of `unsafe` is the primary cause of undefined behavior in a program written in Rust `[citation needed]`.\n+\n+This crate only accepts the usage of `unsafe` code upon careful consideration, and strives to avoid it to the largest possible extent.\n+\n+### When can `unsafe` be used?\n+\n+Generally, `unsafe` can only be used when a `safe` counterpart is not available or has performance implications. The following is a summary of the current components of the crate that require `unsafe`:\n+\n+* alloc, dealloc and realloc of buffers along cache lines\n+* Interpreting bytes as certain rust types, for access, representation and compute\n+* Foreign interfaces (C data interface)\n+* Inter-process communication (IPC)\n+* SIMD\n+* Performance\n+\n+#### cache-line aligned memory management\n+\n+The arrow format recommends storing buffers aligned with cache lines, and this crate adopts this behavior.\n+However, Rust's global allocator does not allocates memory aligned with cache-lines. As such, many of the low-level operations related to memory management require `unsafe`.\n+\n+Usage of `unsafe` for the purposes of supporting allocations aligned with cache lines is allowed.\n+\n+#### Interpreting bytes\n+\n+The arrow format is specified in bytes (`u8`), which can be logically represented as certain types\n+depending on the DataType.\n+For many operations, such as access, representation, numerical computation and string manipulation,\n+it is often necessary to interpret bytes as other physical types (e.g. `i32`).\n+\n+Usage of `unsafe` for the purpose of interpreting bytes in their corresponding type (according to the arrow specification) is allowed. Specifically, the pointer to the byte slice must be aligned to the type that it intends to represent and the length of the slice is a multiple of the size of the target type of the transmutation.\n+\n+#### FFI\n+\n+The arrow format declares an ABI for zero-copy from and to libraries that implement the specification\n+(foreign interfaces). In Rust, receiving and sending pointers via FFI requires usage of `unsafe` due to \n+the impossibility of the compiler to derive the invariants (such as lifetime, null pointers, and pointer alignment), from the source code alone as they are part of the FFI contract.\n+\n+Usage of `unsafe` for the purposes of supporting FFI is allowed.\n+\n+#### IPC\n+\n+The arrow format declares a IPC protocol, which this crate supports. IPC is equivalent to a FFI in that the rust compiler can't reason about the contract's invariants.\n+\n+Usage of `unsafe` for the purposes of supporting IPC is allowed.\n+\n+#### SIMD\n+\n+The API provided by the `packed_simd` library is currently `unsafe`. However, SIMD offers a significant performance improvement over non-SIMD operations.\n+\n+Usage of `unsafe` for the purposes of supporting SIMD is allowed.\n+\n+#### Performance\n+\n+Some operations are significantly faster when `unsafe` is used.\n+\n+A common usage of `unsafe` is to offer an API to access the `i`th element of an array (e.g. `UInt32Array`).\n+This requires accessing the values buffer e.g. `array.buffers()[0]`, picking the slice \n+`[i * size_of<i32>(), (i + 1) * size_of<i32>()]`, and then transmuting it to `i32`. In safe Rust, \n+this operation requires boundary checks that are detrimental to performance.\n+\n+Usage of `unsafe` for performance reasons is justified only when the performance difference of a publicly available API is estatistically significantly larger than 10%, as demonstrated by a `bench`.\n\nReview comment:\n       I agree that this wording would be stronger without a specific bound. I would rather say something like \"usage of unsafe for performance reasons is justified only when all other alternatives have been exhausted and the performance benefits are sufficiently large. Performance benefits should be quantified with a `bench`\".\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-13T11:21:26.058+0000",
                    "updated": "2020-12-13T11:21:26.058+0000",
                    "started": "2020-12-13T11:21:26.057+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "523580",
                    "issueId": "13345700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345700/worklog/523867",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8901:\nURL: https://github.com/apache/arrow/pull/8901#discussion_r542389842\n\n\n\n##########\nFile path: rust/arrow/README.md\n##########\n@@ -93,6 +93,79 @@ Arrow uses the following features:\n Other than `simd` all the other features are enabled by default. Disabling `prettyprint` might be necessary in order to\n compile Arrow to the `wasm32-unknown-unknown` WASM target.\n \n+## Guidelines in usage of `unsafe`\n+\n+[`unsafe`](https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html) has a high maintenance cost because debugging and testing it is difficult, time consuming, often requires external tools (e.g. `valgrind`), and requires a higher-than-usual attention to details. Undefined behavior is particularly difficult to identify and test, and usage of `unsafe` is the primary cause of undefined behavior in a program written in Rust `[citation needed]`.\n+\n+This crate only accepts the usage of `unsafe` code upon careful consideration, and strives to avoid it to the largest possible extent.\n+\n+### When can `unsafe` be used?\n+\n+Generally, `unsafe` can only be used when a `safe` counterpart is not available or has performance implications. The following is a summary of the current components of the crate that require `unsafe`:\n+\n+* alloc, dealloc and realloc of buffers along cache lines\n+* Interpreting bytes as certain rust types, for access, representation and compute\n+* Foreign interfaces (C data interface)\n+* Inter-process communication (IPC)\n+* SIMD\n+* Performance\n+\n+#### cache-line aligned memory management\n+\n+The arrow format recommends storing buffers aligned with cache lines, and this crate adopts this behavior.\n+However, Rust's global allocator does not allocates memory aligned with cache-lines. As such, many of the low-level operations related to memory management require `unsafe`.\n+\n+Usage of `unsafe` for the purposes of supporting allocations aligned with cache lines is allowed.\n+\n+#### Interpreting bytes\n+\n+The arrow format is specified in bytes (`u8`), which can be logically represented as certain types\n+depending on the DataType.\n+For many operations, such as access, representation, numerical computation and string manipulation,\n+it is often necessary to interpret bytes as other physical types (e.g. `i32`).\n+\n+Usage of `unsafe` for the purpose of interpreting bytes in their corresponding type (according to the arrow specification) is allowed. Specifically, the pointer to the byte slice must be aligned to the type that it intends to represent and the length of the slice is a multiple of the size of the target type of the transmutation.\n+\n+#### FFI\n+\n+The arrow format declares an ABI for zero-copy from and to libraries that implement the specification\n+(foreign interfaces). In Rust, receiving and sending pointers via FFI requires usage of `unsafe` due to \n+the impossibility of the compiler to derive the invariants (such as lifetime, null pointers, and pointer alignment), from the source code alone as they are part of the FFI contract.\n+\n+Usage of `unsafe` for the purposes of supporting FFI is allowed.\n+\n+#### IPC\n+\n+The arrow format declares a IPC protocol, which this crate supports. IPC is equivalent to a FFI in that the rust compiler can't reason about the contract's invariants.\n+\n+Usage of `unsafe` for the purposes of supporting IPC is allowed.\n+\n+#### SIMD\n+\n+The API provided by the `packed_simd` library is currently `unsafe`. However, SIMD offers a significant performance improvement over non-SIMD operations.\n+\n+Usage of `unsafe` for the purposes of supporting SIMD is allowed.\n+\n+#### Performance\n+\n+Some operations are significantly faster when `unsafe` is used.\n+\n+A common usage of `unsafe` is to offer an API to access the `i`th element of an array (e.g. `UInt32Array`).\n+This requires accessing the values buffer e.g. `array.buffers()[0]`, picking the slice \n+`[i * size_of<i32>(), (i + 1) * size_of<i32>()]`, and then transmuting it to `i32`. In safe Rust, \n+this operation requires boundary checks that are detrimental to performance.\n+\n+Usage of `unsafe` for performance reasons is justified only when the performance difference of a publicly available API is estatistically significantly larger than 10%, as demonstrated by a `bench`.\n\nReview comment:\n       I understand the sentiment.\r\n   \r\n   My concern is that I am not sure I would like to maintain a complex `unsafe` code for a 6% improvement _at this particular phase_ of the project.\r\n   \r\n   The rational for a concrete number is to impose a bound that we consider to not have the capacity to handle the maintenance cost for \"small\" improvements, and thus people should not try to focus on those types of improvements (again, _at this particular phase_ of the project).\r\n   \r\n   My concern with \"performance benefits are sufficiently large\" is that anything bigger than zero is always \"sufficiently large\" when compared to zero.\r\n   \r\n   What if we write something like\r\n   \r\n   > usage of unsafe for performance reasons is justified only when all other alternatives have been exhausted and the performance benefits are sufficiently large (>~10%)\r\n   \r\n   so that we allow other values, but we offer a number for reference?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-14T13:39:28.862+0000",
                    "updated": "2020-12-14T13:39:28.862+0000",
                    "started": "2020-12-14T13:39:28.862+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "523867",
                    "issueId": "13345700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345700/worklog/523964",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ritchie46 commented on a change in pull request #8901:\nURL: https://github.com/apache/arrow/pull/8901#discussion_r542505339\n\n\n\n##########\nFile path: rust/arrow/README.md\n##########\n@@ -93,6 +93,79 @@ Arrow uses the following features:\n Other than `simd` all the other features are enabled by default. Disabling `prettyprint` might be necessary in order to\n compile Arrow to the `wasm32-unknown-unknown` WASM target.\n \n+## Guidelines in usage of `unsafe`\n+\n+[`unsafe`](https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html) has a high maintenance cost because debugging and testing it is difficult, time consuming, often requires external tools (e.g. `valgrind`), and requires a higher-than-usual attention to details. Undefined behavior is particularly difficult to identify and test, and usage of `unsafe` is the primary cause of undefined behavior in a program written in Rust `[citation needed]`.\n+\n+This crate only accepts the usage of `unsafe` code upon careful consideration, and strives to avoid it to the largest possible extent.\n+\n+### When can `unsafe` be used?\n+\n+Generally, `unsafe` can only be used when a `safe` counterpart is not available or has performance implications. The following is a summary of the current components of the crate that require `unsafe`:\n+\n+* alloc, dealloc and realloc of buffers along cache lines\n+* Interpreting bytes as certain rust types, for access, representation and compute\n+* Foreign interfaces (C data interface)\n+* Inter-process communication (IPC)\n+* SIMD\n+* Performance\n+\n+#### cache-line aligned memory management\n+\n+The arrow format recommends storing buffers aligned with cache lines, and this crate adopts this behavior.\n+However, Rust's global allocator does not allocates memory aligned with cache-lines. As such, many of the low-level operations related to memory management require `unsafe`.\n+\n+Usage of `unsafe` for the purposes of supporting allocations aligned with cache lines is allowed.\n+\n+#### Interpreting bytes\n+\n+The arrow format is specified in bytes (`u8`), which can be logically represented as certain types\n+depending on the DataType.\n+For many operations, such as access, representation, numerical computation and string manipulation,\n+it is often necessary to interpret bytes as other physical types (e.g. `i32`).\n+\n+Usage of `unsafe` for the purpose of interpreting bytes in their corresponding type (according to the arrow specification) is allowed. Specifically, the pointer to the byte slice must be aligned to the type that it intends to represent and the length of the slice is a multiple of the size of the target type of the transmutation.\n+\n+#### FFI\n+\n+The arrow format declares an ABI for zero-copy from and to libraries that implement the specification\n+(foreign interfaces). In Rust, receiving and sending pointers via FFI requires usage of `unsafe` due to \n+the impossibility of the compiler to derive the invariants (such as lifetime, null pointers, and pointer alignment), from the source code alone as they are part of the FFI contract.\n+\n+Usage of `unsafe` for the purposes of supporting FFI is allowed.\n+\n+#### IPC\n+\n+The arrow format declares a IPC protocol, which this crate supports. IPC is equivalent to a FFI in that the rust compiler can't reason about the contract's invariants.\n+\n+Usage of `unsafe` for the purposes of supporting IPC is allowed.\n+\n+#### SIMD\n+\n+The API provided by the `packed_simd` library is currently `unsafe`. However, SIMD offers a significant performance improvement over non-SIMD operations.\n+\n+Usage of `unsafe` for the purposes of supporting SIMD is allowed.\n+\n+#### Performance\n+\n+Some operations are significantly faster when `unsafe` is used.\n+\n+A common usage of `unsafe` is to offer an API to access the `i`th element of an array (e.g. `UInt32Array`).\n+This requires accessing the values buffer e.g. `array.buffers()[0]`, picking the slice \n+`[i * size_of<i32>(), (i + 1) * size_of<i32>()]`, and then transmuting it to `i32`. In safe Rust, \n+this operation requires boundary checks that are detrimental to performance.\n+\n+Usage of `unsafe` for performance reasons is justified only when the performance difference of a publicly available API is estatistically significantly larger than 10%, as demonstrated by a `bench`.\n\nReview comment:\n       Could the improvement be expressed by the **\"hotness\"** of the code? I can imagine that a 6% improvement in the `Buffer`s is much more valuable than a 11% percentage improvement in a specific kernel.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-14T16:07:20.017+0000",
                    "updated": "2020-12-14T16:07:20.017+0000",
                    "started": "2020-12-14T16:07:20.016+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "523964",
                    "issueId": "13345700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345700/worklog/524032",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8901:\nURL: https://github.com/apache/arrow/pull/8901#issuecomment-744624330\n\n\n   @jorgecarleitao  I am not sure what has happened to this PR but it now seemingly includes many changes that are unrelated to the readme improvements:\r\n   <img width=\"1384\" alt=\"Screen Shot 2020-12-14 at 1 24 21 PM\" src=\"https://user-images.githubusercontent.com/490673/102119836-bc543980-3e0f-11eb-93dd-6a8d84c215ed.png\">\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-14T18:25:01.173+0000",
                    "updated": "2020-12-14T18:25:01.173+0000",
                    "started": "2020-12-14T18:25:01.173+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524032",
                    "issueId": "13345700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345700/worklog/524035",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8901:\nURL: https://github.com/apache/arrow/pull/8901#issuecomment-744626848\n\n\n   Some mistake on my part. Fixed\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-14T18:29:41.632+0000",
                    "updated": "2020-12-14T18:29:41.632+0000",
                    "started": "2020-12-14T18:29:41.632+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524035",
                    "issueId": "13345700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345700/worklog/524046",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8901:\nURL: https://github.com/apache/arrow/pull/8901#discussion_r542627788\n\n\n\n##########\nFile path: rust/arrow/README.md\n##########\n@@ -93,6 +93,79 @@ Arrow uses the following features:\n Other than `simd` all the other features are enabled by default. Disabling `prettyprint` might be necessary in order to\n compile Arrow to the `wasm32-unknown-unknown` WASM target.\n \n+## Guidelines in usage of `unsafe`\n+\n+[`unsafe`](https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html) has a high maintenance cost because debugging and testing it is difficult, time consuming, often requires external tools (e.g. `valgrind`), and requires a higher-than-usual attention to details. Undefined behavior is particularly difficult to identify and test, and usage of `unsafe` is the primary cause of undefined behavior in a program written in Rust `[citation needed]`.\n+\n+This crate only accepts the usage of `unsafe` code upon careful consideration, and strives to avoid it to the largest possible extent.\n+\n+### When can `unsafe` be used?\n+\n+Generally, `unsafe` can only be used when a `safe` counterpart is not available or has performance implications. The following is a summary of the current components of the crate that require `unsafe`:\n+\n+* alloc, dealloc and realloc of buffers along cache lines\n+* Interpreting bytes as certain rust types, for access, representation and compute\n+* Foreign interfaces (C data interface)\n+* Inter-process communication (IPC)\n+* SIMD\n+* Performance\n+\n+#### cache-line aligned memory management\n+\n+The arrow format recommends storing buffers aligned with cache lines, and this crate adopts this behavior.\n+However, Rust's global allocator does not allocates memory aligned with cache-lines. As such, many of the low-level operations related to memory management require `unsafe`.\n+\n+Usage of `unsafe` for the purposes of supporting allocations aligned with cache lines is allowed.\n+\n+#### Interpreting bytes\n+\n+The arrow format is specified in bytes (`u8`), which can be logically represented as certain types\n+depending on the DataType.\n+For many operations, such as access, representation, numerical computation and string manipulation,\n+it is often necessary to interpret bytes as other physical types (e.g. `i32`).\n+\n+Usage of `unsafe` for the purpose of interpreting bytes in their corresponding type (according to the arrow specification) is allowed. Specifically, the pointer to the byte slice must be aligned to the type that it intends to represent and the length of the slice is a multiple of the size of the target type of the transmutation.\n+\n+#### FFI\n+\n+The arrow format declares an ABI for zero-copy from and to libraries that implement the specification\n+(foreign interfaces). In Rust, receiving and sending pointers via FFI requires usage of `unsafe` due to \n+the impossibility of the compiler to derive the invariants (such as lifetime, null pointers, and pointer alignment), from the source code alone as they are part of the FFI contract.\n+\n+Usage of `unsafe` for the purposes of supporting FFI is allowed.\n+\n+#### IPC\n+\n+The arrow format declares a IPC protocol, which this crate supports. IPC is equivalent to a FFI in that the rust compiler can't reason about the contract's invariants.\n+\n+Usage of `unsafe` for the purposes of supporting IPC is allowed.\n+\n+#### SIMD\n+\n+The API provided by the `packed_simd` library is currently `unsafe`. However, SIMD offers a significant performance improvement over non-SIMD operations.\n+\n+Usage of `unsafe` for the purposes of supporting SIMD is allowed.\n+\n+#### Performance\n+\n+Some operations are significantly faster when `unsafe` is used.\n+\n+A common usage of `unsafe` is to offer an API to access the `i`th element of an array (e.g. `UInt32Array`).\n+This requires accessing the values buffer e.g. `array.buffers()[0]`, picking the slice \n+`[i * size_of<i32>(), (i + 1) * size_of<i32>()]`, and then transmuting it to `i32`. In safe Rust, \n+this operation requires boundary checks that are detrimental to performance.\n+\n+Usage of `unsafe` for performance reasons is justified only when the performance difference of a publicly available API is estatistically significantly larger than 10%, as demonstrated by a `bench`.\n\nReview comment:\n       I like\r\n   \r\n   > usage of unsafe for performance reasons is justified only when all other alternatives have been exhausted and the performance benefits are sufficiently large (e.g. >~10%)\r\n   \r\n   @ritchie46  I agree with the sentiments that some performance improvements are more important than others, which is why I was suggesting leaving room for interpretation in the writeup\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-14T18:41:50.661+0000",
                    "updated": "2020-12-14T18:41:50.661+0000",
                    "started": "2020-12-14T18:41:50.661+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524046",
                    "issueId": "13345700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345700/worklog/524059",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8901:\nURL: https://github.com/apache/arrow/pull/8901#discussion_r542656133\n\n\n\n##########\nFile path: rust/arrow/README.md\n##########\n@@ -93,6 +93,79 @@ Arrow uses the following features:\n Other than `simd` all the other features are enabled by default. Disabling `prettyprint` might be necessary in order to\n compile Arrow to the `wasm32-unknown-unknown` WASM target.\n \n+## Guidelines in usage of `unsafe`\n+\n+[`unsafe`](https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html) has a high maintenance cost because debugging and testing it is difficult, time consuming, often requires external tools (e.g. `valgrind`), and requires a higher-than-usual attention to details. Undefined behavior is particularly difficult to identify and test, and usage of `unsafe` is the primary cause of undefined behavior in a program written in Rust `[citation needed]`.\n+\n+This crate only accepts the usage of `unsafe` code upon careful consideration, and strives to avoid it to the largest possible extent.\n+\n+### When can `unsafe` be used?\n+\n+Generally, `unsafe` can only be used when a `safe` counterpart is not available or has performance implications. The following is a summary of the current components of the crate that require `unsafe`:\n+\n+* alloc, dealloc and realloc of buffers along cache lines\n+* Interpreting bytes as certain rust types, for access, representation and compute\n+* Foreign interfaces (C data interface)\n+* Inter-process communication (IPC)\n+* SIMD\n+* Performance\n+\n+#### cache-line aligned memory management\n+\n+The arrow format recommends storing buffers aligned with cache lines, and this crate adopts this behavior.\n+However, Rust's global allocator does not allocates memory aligned with cache-lines. As such, many of the low-level operations related to memory management require `unsafe`.\n+\n+Usage of `unsafe` for the purposes of supporting allocations aligned with cache lines is allowed.\n+\n+#### Interpreting bytes\n+\n+The arrow format is specified in bytes (`u8`), which can be logically represented as certain types\n+depending on the DataType.\n+For many operations, such as access, representation, numerical computation and string manipulation,\n+it is often necessary to interpret bytes as other physical types (e.g. `i32`).\n+\n+Usage of `unsafe` for the purpose of interpreting bytes in their corresponding type (according to the arrow specification) is allowed. Specifically, the pointer to the byte slice must be aligned to the type that it intends to represent and the length of the slice is a multiple of the size of the target type of the transmutation.\n+\n+#### FFI\n+\n+The arrow format declares an ABI for zero-copy from and to libraries that implement the specification\n+(foreign interfaces). In Rust, receiving and sending pointers via FFI requires usage of `unsafe` due to \n+the impossibility of the compiler to derive the invariants (such as lifetime, null pointers, and pointer alignment), from the source code alone as they are part of the FFI contract.\n+\n+Usage of `unsafe` for the purposes of supporting FFI is allowed.\n+\n+#### IPC\n+\n+The arrow format declares a IPC protocol, which this crate supports. IPC is equivalent to a FFI in that the rust compiler can't reason about the contract's invariants.\n+\n+Usage of `unsafe` for the purposes of supporting IPC is allowed.\n+\n+#### SIMD\n+\n+The API provided by the `packed_simd` library is currently `unsafe`. However, SIMD offers a significant performance improvement over non-SIMD operations.\n+\n+Usage of `unsafe` for the purposes of supporting SIMD is allowed.\n+\n+#### Performance\n+\n+Some operations are significantly faster when `unsafe` is used.\n+\n+A common usage of `unsafe` is to offer an API to access the `i`th element of an array (e.g. `UInt32Array`).\n+This requires accessing the values buffer e.g. `array.buffers()[0]`, picking the slice \n+`[i * size_of<i32>(), (i + 1) * size_of<i32>()]`, and then transmuting it to `i32`. In safe Rust, \n+this operation requires boundary checks that are detrimental to performance.\n+\n+Usage of `unsafe` for performance reasons is justified only when the performance difference of a publicly available API is estatistically significantly larger than 10%, as demonstrated by a `bench`.\n\nReview comment:\n       Yes, I think it would be preferable to have some room to trade safety for performance and vice versa. A change that makes everything a few percent faster might be acceptable, while a 50% improvement on a micro benchmark might not in some cases. And in some cases you maybe want to reduce the amount of safety, but might want to accept a certain negative performance impact.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-14T19:05:19.436+0000",
                    "updated": "2020-12-14T19:05:19.436+0000",
                    "started": "2020-12-14T19:05:19.436+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524059",
                    "issueId": "13345700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345700/worklog/524523",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8901:\nURL: https://github.com/apache/arrow/pull/8901#issuecomment-745379959\n\n\n   I saw a tweet yesterday from @timClicks showing an example of how the imageproc project documents their unsafe code and I really like it. I think we should do something similiar. Maybe we could add this to the guidelines @jorgecarleitao ?\r\n   \r\n   ```rust\r\n               // JUSTIFICATION\r\n               //  Benefit\r\n               //      Using checked indexing here makes bench_integral_image_rgb take 1.05x as long\r\n               //      (The results are noisy, but this seems to be reproducible. I've not checked the generated assembly.)\r\n               //  Correctness\r\n               //      x and y are within bounds by definition of in_width and in_height\r\n               let input = unsafe { image.unsafe_get_pixel(x, y) };\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-15T15:50:09.629+0000",
                    "updated": "2020-12-15T15:50:09.629+0000",
                    "started": "2020-12-15T15:50:09.629+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524523",
                    "issueId": "13345700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345700/worklog/524525",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on pull request #8901:\nURL: https://github.com/apache/arrow/pull/8901#issuecomment-745383359\n\n\n   > I saw a tweet yesterday from @timClicks showing an example of how the imageproc project documents their unsafe code and I really like it. I think we should do something similiar. Maybe we could add this to the guidelines @jorgecarleitao ?\r\n   > \r\n   > ```rust\r\n   >             // JUSTIFICATION\r\n   >             //  Benefit\r\n   >             //      Using checked indexing here makes bench_integral_image_rgb take 1.05x as long\r\n   >             //      (The results are noisy, but this seems to be reproducible. I've not checked the generated assembly.)\r\n   >             //  Correctness\r\n   >             //      x and y are within bounds by definition of in_width and in_height\r\n   >             let input = unsafe { image.unsafe_get_pixel(x, y) };\r\n   > ```\r\n   \r\n   Saw that too :) I think it's an interesting approach. In this PR https://github.com/apache/arrow/pull/8900 I added a comment with \"SAFETY\", but that misses the benefit part.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-15T15:55:37.038+0000",
                    "updated": "2020-12-15T15:55:37.038+0000",
                    "started": "2020-12-15T15:55:37.038+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524525",
                    "issueId": "13345700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345700/worklog/524641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on a change in pull request #8901:\nURL: https://github.com/apache/arrow/pull/8901#discussion_r543591924\n\n\n\n##########\nFile path: rust/arrow/README.md\n##########\n@@ -96,6 +96,71 @@ Arrow uses the following features:\n Other than `simd` all the other features are enabled by default. Disabling `prettyprint` might be necessary in order to\n compile Arrow to the `wasm32-unknown-unknown` WASM target.\n \n+## Guidelines in usage of `unsafe`\n+\n+[`unsafe`](https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html) has a high maintenance cost because debugging and testing it is difficult, time consuming, often requires external tools (e.g. `valgrind`), and requires a higher-than-usual attention to details. Undefined behavior is particularly difficult to identify and test, and usage of `unsafe` is the [primary cause of undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html) in a program written in Rust.\n+For two real world examples of where `unsafe` has consumed time in the past in this project see [#8545](https://github.com/apache/arrow/pull/8645) and [8829](https://github.com/apache/arrow/pull/8829)\n+This crate only accepts the usage of `unsafe` code upon careful consideration, and strives to avoid it to the largest possible extent.\n+\n+### When can `unsafe` be used?\n+\n+Generally, `unsafe` should only be used when a `safe` counterpart is not available and there is no `safe` way to achieve additional performance in that area. The following is a summary of the current components of the crate that require `unsafe`:\n+\n+* alloc, dealloc and realloc of buffers along cache lines\n+* Interpreting bytes as certain rust types, for access, representation and compute\n+* Foreign interfaces (C data interface)\n+* Inter-process communication (IPC)\n+* SIMD\n+* Performance (e.g. omit bounds checks, use of pointers to avoid bound checks)\n+\n+#### cache-line aligned memory management\n+\n+The arrow format recommends storing buffers aligned with cache lines, and this crate adopts this behavior.\n+However, Rust's global allocator does not allocates memory aligned with cache-lines. As such, many of the low-level operations related to memory management require `unsafe`.\n\nReview comment:\n       ```suggestion\r\n   However, Rust's global allocator does not allocate memory aligned with cache-lines. As such, many of the low-level operations related to memory management require `unsafe`.\r\n   ```\n\n##########\nFile path: rust/arrow/README.md\n##########\n@@ -96,6 +96,71 @@ Arrow uses the following features:\n Other than `simd` all the other features are enabled by default. Disabling `prettyprint` might be necessary in order to\n compile Arrow to the `wasm32-unknown-unknown` WASM target.\n \n+## Guidelines in usage of `unsafe`\n+\n+[`unsafe`](https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html) has a high maintenance cost because debugging and testing it is difficult, time consuming, often requires external tools (e.g. `valgrind`), and requires a higher-than-usual attention to details. Undefined behavior is particularly difficult to identify and test, and usage of `unsafe` is the [primary cause of undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html) in a program written in Rust.\n+For two real world examples of where `unsafe` has consumed time in the past in this project see [#8545](https://github.com/apache/arrow/pull/8645) and [8829](https://github.com/apache/arrow/pull/8829)\n+This crate only accepts the usage of `unsafe` code upon careful consideration, and strives to avoid it to the largest possible extent.\n+\n+### When can `unsafe` be used?\n+\n+Generally, `unsafe` should only be used when a `safe` counterpart is not available and there is no `safe` way to achieve additional performance in that area. The following is a summary of the current components of the crate that require `unsafe`:\n+\n+* alloc, dealloc and realloc of buffers along cache lines\n+* Interpreting bytes as certain rust types, for access, representation and compute\n+* Foreign interfaces (C data interface)\n+* Inter-process communication (IPC)\n+* SIMD\n+* Performance (e.g. omit bounds checks, use of pointers to avoid bound checks)\n+\n+#### cache-line aligned memory management\n+\n+The arrow format recommends storing buffers aligned with cache lines, and this crate adopts this behavior.\n+However, Rust's global allocator does not allocates memory aligned with cache-lines. As such, many of the low-level operations related to memory management require `unsafe`.\n+\n+#### Interpreting bytes\n+\n+The arrow format is specified in bytes (`u8`), which can be logically represented as certain types\n+depending on the DataType.\n\nReview comment:\n       ```suggestion\r\n   depending on the `DataType`.\r\n   ```\n\n##########\nFile path: rust/arrow/README.md\n##########\n@@ -96,6 +96,71 @@ Arrow uses the following features:\n Other than `simd` all the other features are enabled by default. Disabling `prettyprint` might be necessary in order to\n compile Arrow to the `wasm32-unknown-unknown` WASM target.\n \n+## Guidelines in usage of `unsafe`\n+\n+[`unsafe`](https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html) has a high maintenance cost because debugging and testing it is difficult, time consuming, often requires external tools (e.g. `valgrind`), and requires a higher-than-usual attention to details. Undefined behavior is particularly difficult to identify and test, and usage of `unsafe` is the [primary cause of undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html) in a program written in Rust.\n+For two real world examples of where `unsafe` has consumed time in the past in this project see [#8545](https://github.com/apache/arrow/pull/8645) and [8829](https://github.com/apache/arrow/pull/8829)\n+This crate only accepts the usage of `unsafe` code upon careful consideration, and strives to avoid it to the largest possible extent.\n+\n+### When can `unsafe` be used?\n+\n+Generally, `unsafe` should only be used when a `safe` counterpart is not available and there is no `safe` way to achieve additional performance in that area. The following is a summary of the current components of the crate that require `unsafe`:\n+\n+* alloc, dealloc and realloc of buffers along cache lines\n+* Interpreting bytes as certain rust types, for access, representation and compute\n+* Foreign interfaces (C data interface)\n+* Inter-process communication (IPC)\n+* SIMD\n+* Performance (e.g. omit bounds checks, use of pointers to avoid bound checks)\n+\n+#### cache-line aligned memory management\n+\n+The arrow format recommends storing buffers aligned with cache lines, and this crate adopts this behavior.\n+However, Rust's global allocator does not allocates memory aligned with cache-lines. As such, many of the low-level operations related to memory management require `unsafe`.\n+\n+#### Interpreting bytes\n+\n+The arrow format is specified in bytes (`u8`), which can be logically represented as certain types\n+depending on the DataType.\n+For many operations, such as access, representation, numerical computation and string manipulation,\n+it is often necessary to interpret bytes as other physical types (e.g. `i32`).\n+\n+Usage of `unsafe` for the purpose of interpreting bytes in their corresponding type (according to the arrow specification) is allowed. Specifically, the pointer to the byte slice must be aligned to the type that it intends to represent and the length of the slice is a multiple of the size of the target type of the transmutation.\n+\n+#### FFI\n+\n+The arrow format declares an ABI for zero-copy from and to libraries that implement the specification\n+(foreign interfaces). In Rust, receiving and sending pointers via FFI requires usage of `unsafe` due to \n+the impossibility of the compiler to derive the invariants (such as lifetime, null pointers, and pointer alignment), from the source code alone as they are part of the FFI contract.\n\nReview comment:\n       ```suggestion\r\n   the impossibility of the compiler to derive the invariants (such as lifetime, null pointers, and pointer alignment) from the source code alone as they are part of the FFI contract.\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-15T18:45:12.066+0000",
                    "updated": "2020-12-15T18:45:12.066+0000",
                    "started": "2020-12-15T18:45:12.065+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524641",
                    "issueId": "13345700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345700/worklog/524841",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8901:\nURL: https://github.com/apache/arrow/pull/8901#issuecomment-745791950\n\n\n   Thanks all for the suggestions. Really good stuff.\r\n   \r\n   I have incorporated all the changes:\r\n   \r\n   * the change of the requirement for performance was re-written as suggested by @alamb and @Dandandan \r\n   * added a code snipped with the idea from @andygrove\r\n   * fixed typos identified by @paddyhoran \r\n   \r\n   I have used the term `soundness` instead of `correctness` because the former is already defined on an official guide: https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#soundness-of-code--of-a-library and is based on existing literature, while the latter seems to be used only by imageproc.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-16T06:18:53.390+0000",
                    "updated": "2020-12-16T06:18:53.390+0000",
                    "started": "2020-12-16T06:18:53.389+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524841",
                    "issueId": "13345700"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 14400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6ef5f86f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41523e8a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1b72c5d7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4b041e5d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a8f28cf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5b38d34e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5669f983[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3df4f3e5[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6eee6dc4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@73d171f4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6a6d3bec[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@709c869f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 14400,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Dec 16 21:23:49 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-12-16T21:23:49.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10889/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-12-12T19:06:00.000+0000",
        "updated": "2020-12-16T21:44:53.000+0000",
        "timeoriginalestimate": null,
        "description": "It would be helpful to document the project's stance on the use of unsafe code in a prominent location such as in the top-level README so that we can refer people to this when questions are asked about this.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 14400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Document our approach to unsafe code in README",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345700/comment/17250645",
                    "id": "17250645",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 8901\n[https://github.com/apache/arrow/pull/8901]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-12-16T21:23:49.128+0000",
                    "updated": "2020-12-16T21:23:49.128+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0lgiw:",
        "customfield_12314139": null
    }
}