{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13248387",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13248387",
    "key": "ARROW-6101",
    "fields": {
        "parent": {
            "id": "13230559",
            "key": "ARROW-5227",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13230559",
            "fields": {
                "summary": "[Rust] [DataFusion] Re-implement query execution with an extensible physical query plan",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                    "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                    "name": "Closed",
                    "id": "6",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6101/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 17,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13248387/worklog/296806",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5111: ARROW-6101: [Rust] [DataFusion] Create physical plan from logical plan [DRAFT]\nURL: https://github.com/apache/arrow/pull/5111\n \n \n   Creating this PR early so anyone interested can follow along as I get this working.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-17T16:38:43.779+0000",
                    "updated": "2019-08-17T16:38:43.779+0000",
                    "started": "2019-08-17T16:38:43.778+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "296806",
                    "issueId": "13248387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13248387/worklog/308371",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #5111: ARROW-6101: [Rust] [DataFusion] Parallel execution of physical query plan\nURL: https://github.com/apache/arrow/pull/5111#issuecomment-529130440\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/5111?src=pr&el=h1) Report\n   > Merging [#5111](https://codecov.io/gh/apache/arrow/pull/5111?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/9fbbc73f5c91a3d02d3cd1f838b774bec7b8b8d6?src=pr&el=desc) will **decrease** coverage by `4.86%`.\n   > The diff coverage is `80.61%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/5111/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/5111?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #5111       +/-   ##\n   ===========================================\n   - Coverage   87.66%   82.79%    -4.87%     \n   ===========================================\n     Files        1022       92      -930     \n     Lines      146443    25783   -120660     \n     Branches     1437        0     -1437     \n   ===========================================\n   - Hits       128372    21346   -107026     \n   + Misses      17709     4437    -13272     \n   + Partials      362        0      -362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/5111?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [...tafusion/src/execution/physical\\_plan/datasource.rs](https://codecov.io/gh/apache/arrow/pull/5111/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vcGh5c2ljYWxfcGxhbi9kYXRhc291cmNlLnJz) | `76.92% <76.92%> (\u00f8)` | |\n   | [rust/datafusion/src/execution/context.rs](https://codecov.io/gh/apache/arrow/pull/5111/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vY29udGV4dC5ycw==) | `69.83% <81.17%> (+4.38%)` | :arrow_up: |\n   | [python/pyarrow/ipc.pxi](https://codecov.io/gh/apache/arrow/pull/5111/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvaXBjLnB4aQ==) | | |\n   | [cpp/src/parquet/column\\_page.h](https://codecov.io/gh/apache/arrow/pull/5111/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2NvbHVtbl9wYWdlLmg=) | | |\n   | [cpp/src/plasma/test/external\\_store\\_tests.cc](https://codecov.io/gh/apache/arrow/pull/5111/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvdGVzdC9leHRlcm5hbF9zdG9yZV90ZXN0cy5jYw==) | | |\n   | [cpp/src/arrow/array/builder\\_decimal.cc](https://codecov.io/gh/apache/arrow/pull/5111/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS9idWlsZGVyX2RlY2ltYWwuY2M=) | | |\n   | [r/src/symbols.cpp](https://codecov.io/gh/apache/arrow/pull/5111/diff?src=pr&el=tree#diff-ci9zcmMvc3ltYm9scy5jcHA=) | | |\n   | [cpp/src/arrow/flight/internal.cc](https://codecov.io/gh/apache/arrow/pull/5111/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9mbGlnaHQvaW50ZXJuYWwuY2M=) | | |\n   | [cpp/src/arrow/compute/compute\\_test.cc](https://codecov.io/gh/apache/arrow/pull/5111/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2NvbXB1dGVfdGVzdC5jYw==) | | |\n   | [cpp/src/arrow/python/io.cc](https://codecov.io/gh/apache/arrow/pull/5111/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vaW8uY2M=) | | |\n   | ... and [929 more](https://codecov.io/gh/apache/arrow/pull/5111/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/5111?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/5111?src=pr&el=footer). Last update [9fbbc73...7ff8ab7](https://codecov.io/gh/apache/arrow/pull/5111?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-07T17:55:15.148+0000",
                    "updated": "2019-09-07T17:55:15.148+0000",
                    "started": "2019-09-07T17:55:15.147+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "308371",
                    "issueId": "13248387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13248387/worklog/308557",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on issue #5111: ARROW-6101: [Rust] [DataFusion] Parallel execution of physical query plan\nURL: https://github.com/apache/arrow/pull/5111#issuecomment-529242563\n \n \n   Hi @andygrove, I'll catch up on this and other PRs during the week\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-08T21:18:11.404+0000",
                    "updated": "2019-09-08T21:18:11.404+0000",
                    "started": "2019-09-08T21:18:11.403+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "308557",
                    "issueId": "13248387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13248387/worklog/309492",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #5111: ARROW-6101: [Rust] [DataFusion] Parallel execution of physical query plan\nURL: https://github.com/apache/arrow/pull/5111#discussion_r322531923\n \n \n\n ##########\n File path: rust/datafusion/src/execution/context.rs\n ##########\n @@ -210,6 +216,103 @@ impl ExecutionContext {\n         Ok(plan)\n     }\n \n+    /// Create a physical plan from a logical plan\n+    pub fn create_physical_plan(\n+        &mut self,\n+        logical_plan: &Arc<LogicalPlan>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match logical_plan.as_ref() {\n+            LogicalPlan::TableScan {\n+                table_name,\n+                projection,\n+                ..\n+            } => match (*self.datasources).borrow().get(table_name) {\n+                Some(provider) => {\n+                    let partitions = provider.scan(projection, 16 * 1024)?;\n+                    if partitions.is_empty() {\n+                        Err(ExecutionError::General(\n+                            \"Table provider returned no partitions\".to_string(),\n+                        ))\n+                    } else {\n+                        let partition = partitions[0].lock().unwrap();\n+                        let schema = partition.schema();\n+                        let exec =\n+                            DatasourceExec::new(schema.clone(), partitions.clone());\n+                        Ok(Arc::new(exec))\n+                    }\n+                }\n+                _ => panic!(),\n+            },\n+            LogicalPlan::Projection { input, expr, .. } => {\n+                let input = self.create_physical_plan(input)?;\n+                let input_schema = input.as_ref().schema().clone();\n+                //let me = self;\n+                let runtime_expr = expr\n+                    .iter()\n+                    .map(|e| self.create_physical_expr(e, &input_schema))\n+                    .collect::<Result<Vec<_>>>()?;\n+                Ok(Arc::new(ProjectionExec::try_new(runtime_expr, input)?))\n+            }\n+            _ => Err(ExecutionError::General(\n+                \"Unsupported logical plan variant\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    /// Create a physical expression from a logical expression\n+    pub fn create_physical_expr(\n+        &self,\n+        e: &Expr,\n+        _input_schema: &Schema,\n+    ) -> Result<Arc<dyn PhysicalExpr>> {\n+        match e {\n+            Expr::Column(i) => Ok(Arc::new(Column::new(*i))),\n+            _ => Err(ExecutionError::NotImplemented(\n+                \"Unsupported expression\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    /// Execute a physical plan and collect the results in memory\n+    pub fn collect(&self, plan: &dyn ExecutionPlan) -> Result<Vec<RecordBatch>> {\n+        let threads: Vec<JoinHandle<Result<Vec<RecordBatch>>>> = plan\n+            .partitions()?\n+            .iter()\n+            .map(|p| {\n+                let p = p.clone();\n+                thread::spawn(move || {\n+                    let it = p.execute().unwrap();\n \n Review comment:\n   Again do we need to `unwrap` here two lines in a row?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-10T02:52:30.563+0000",
                    "updated": "2019-09-10T02:52:30.563+0000",
                    "started": "2019-09-10T02:52:30.563+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "309492",
                    "issueId": "13248387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13248387/worklog/309493",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #5111: ARROW-6101: [Rust] [DataFusion] Parallel execution of physical query plan\nURL: https://github.com/apache/arrow/pull/5111#discussion_r322531386\n \n \n\n ##########\n File path: rust/datafusion/src/execution/context.rs\n ##########\n @@ -210,6 +216,103 @@ impl ExecutionContext {\n         Ok(plan)\n     }\n \n+    /// Create a physical plan from a logical plan\n+    pub fn create_physical_plan(\n+        &mut self,\n+        logical_plan: &Arc<LogicalPlan>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match logical_plan.as_ref() {\n+            LogicalPlan::TableScan {\n+                table_name,\n+                projection,\n+                ..\n+            } => match (*self.datasources).borrow().get(table_name) {\n+                Some(provider) => {\n+                    let partitions = provider.scan(projection, 16 * 1024)?;\n \n Review comment:\n   What's the rationale for hard coding `16 * 1024`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-10T02:52:30.656+0000",
                    "updated": "2019-09-10T02:52:30.656+0000",
                    "started": "2019-09-10T02:52:30.655+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "309493",
                    "issueId": "13248387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13248387/worklog/309494",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #5111: ARROW-6101: [Rust] [DataFusion] Parallel execution of physical query plan\nURL: https://github.com/apache/arrow/pull/5111#discussion_r322531564\n \n \n\n ##########\n File path: rust/datafusion/src/execution/context.rs\n ##########\n @@ -210,6 +216,103 @@ impl ExecutionContext {\n         Ok(plan)\n     }\n \n+    /// Create a physical plan from a logical plan\n+    pub fn create_physical_plan(\n+        &mut self,\n+        logical_plan: &Arc<LogicalPlan>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match logical_plan.as_ref() {\n+            LogicalPlan::TableScan {\n+                table_name,\n+                projection,\n+                ..\n+            } => match (*self.datasources).borrow().get(table_name) {\n+                Some(provider) => {\n+                    let partitions = provider.scan(projection, 16 * 1024)?;\n+                    if partitions.is_empty() {\n+                        Err(ExecutionError::General(\n+                            \"Table provider returned no partitions\".to_string(),\n+                        ))\n+                    } else {\n+                        let partition = partitions[0].lock().unwrap();\n+                        let schema = partition.schema();\n+                        let exec =\n+                            DatasourceExec::new(schema.clone(), partitions.clone());\n+                        Ok(Arc::new(exec))\n+                    }\n+                }\n+                _ => panic!(),\n+            },\n+            LogicalPlan::Projection { input, expr, .. } => {\n+                let input = self.create_physical_plan(input)?;\n+                let input_schema = input.as_ref().schema().clone();\n+                //let me = self;\n \n Review comment:\n   Remove comment.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-10T02:52:30.659+0000",
                    "updated": "2019-09-10T02:52:30.659+0000",
                    "started": "2019-09-10T02:52:30.659+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "309494",
                    "issueId": "13248387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13248387/worklog/309495",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #5111: ARROW-6101: [Rust] [DataFusion] Parallel execution of physical query plan\nURL: https://github.com/apache/arrow/pull/5111#discussion_r322531493\n \n \n\n ##########\n File path: rust/datafusion/src/execution/context.rs\n ##########\n @@ -210,6 +216,103 @@ impl ExecutionContext {\n         Ok(plan)\n     }\n \n+    /// Create a physical plan from a logical plan\n+    pub fn create_physical_plan(\n+        &mut self,\n+        logical_plan: &Arc<LogicalPlan>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match logical_plan.as_ref() {\n+            LogicalPlan::TableScan {\n+                table_name,\n+                projection,\n+                ..\n+            } => match (*self.datasources).borrow().get(table_name) {\n+                Some(provider) => {\n+                    let partitions = provider.scan(projection, 16 * 1024)?;\n+                    if partitions.is_empty() {\n+                        Err(ExecutionError::General(\n+                            \"Table provider returned no partitions\".to_string(),\n+                        ))\n+                    } else {\n+                        let partition = partitions[0].lock().unwrap();\n+                        let schema = partition.schema();\n+                        let exec =\n+                            DatasourceExec::new(schema.clone(), partitions.clone());\n+                        Ok(Arc::new(exec))\n+                    }\n+                }\n+                _ => panic!(),\n \n Review comment:\n   `panic` should provide some error message\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-10T02:52:30.659+0000",
                    "updated": "2019-09-10T02:52:30.659+0000",
                    "started": "2019-09-10T02:52:30.659+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "309495",
                    "issueId": "13248387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13248387/worklog/309496",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #5111: ARROW-6101: [Rust] [DataFusion] Parallel execution of physical query plan\nURL: https://github.com/apache/arrow/pull/5111#discussion_r322531392\n \n \n\n ##########\n File path: rust/datafusion/src/execution/context.rs\n ##########\n @@ -210,6 +216,103 @@ impl ExecutionContext {\n         Ok(plan)\n     }\n \n+    /// Create a physical plan from a logical plan\n+    pub fn create_physical_plan(\n+        &mut self,\n+        logical_plan: &Arc<LogicalPlan>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match logical_plan.as_ref() {\n+            LogicalPlan::TableScan {\n+                table_name,\n+                projection,\n+                ..\n+            } => match (*self.datasources).borrow().get(table_name) {\n+                Some(provider) => {\n+                    let partitions = provider.scan(projection, 16 * 1024)?;\n+                    if partitions.is_empty() {\n+                        Err(ExecutionError::General(\n+                            \"Table provider returned no partitions\".to_string(),\n+                        ))\n+                    } else {\n+                        let partition = partitions[0].lock().unwrap();\n \n Review comment:\n   Can we avoid the `unwrap` here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-10T02:52:30.722+0000",
                    "updated": "2019-09-10T02:52:30.722+0000",
                    "started": "2019-09-10T02:52:30.722+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "309496",
                    "issueId": "13248387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13248387/worklog/309497",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #5111: ARROW-6101: [Rust] [DataFusion] Parallel execution of physical query plan\nURL: https://github.com/apache/arrow/pull/5111#discussion_r322532104\n \n \n\n ##########\n File path: rust/datafusion/src/execution/context.rs\n ##########\n @@ -210,6 +216,103 @@ impl ExecutionContext {\n         Ok(plan)\n     }\n \n+    /// Create a physical plan from a logical plan\n+    pub fn create_physical_plan(\n+        &mut self,\n+        logical_plan: &Arc<LogicalPlan>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match logical_plan.as_ref() {\n+            LogicalPlan::TableScan {\n+                table_name,\n+                projection,\n+                ..\n+            } => match (*self.datasources).borrow().get(table_name) {\n+                Some(provider) => {\n+                    let partitions = provider.scan(projection, 16 * 1024)?;\n+                    if partitions.is_empty() {\n+                        Err(ExecutionError::General(\n+                            \"Table provider returned no partitions\".to_string(),\n+                        ))\n+                    } else {\n+                        let partition = partitions[0].lock().unwrap();\n+                        let schema = partition.schema();\n+                        let exec =\n+                            DatasourceExec::new(schema.clone(), partitions.clone());\n+                        Ok(Arc::new(exec))\n+                    }\n+                }\n+                _ => panic!(),\n+            },\n+            LogicalPlan::Projection { input, expr, .. } => {\n+                let input = self.create_physical_plan(input)?;\n+                let input_schema = input.as_ref().schema().clone();\n+                //let me = self;\n+                let runtime_expr = expr\n+                    .iter()\n+                    .map(|e| self.create_physical_expr(e, &input_schema))\n+                    .collect::<Result<Vec<_>>>()?;\n+                Ok(Arc::new(ProjectionExec::try_new(runtime_expr, input)?))\n+            }\n+            _ => Err(ExecutionError::General(\n+                \"Unsupported logical plan variant\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    /// Create a physical expression from a logical expression\n+    pub fn create_physical_expr(\n+        &self,\n+        e: &Expr,\n+        _input_schema: &Schema,\n+    ) -> Result<Arc<dyn PhysicalExpr>> {\n+        match e {\n+            Expr::Column(i) => Ok(Arc::new(Column::new(*i))),\n+            _ => Err(ExecutionError::NotImplemented(\n+                \"Unsupported expression\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    /// Execute a physical plan and collect the results in memory\n+    pub fn collect(&self, plan: &dyn ExecutionPlan) -> Result<Vec<RecordBatch>> {\n+        let threads: Vec<JoinHandle<Result<Vec<RecordBatch>>>> = plan\n+            .partitions()?\n+            .iter()\n+            .map(|p| {\n+                let p = p.clone();\n+                thread::spawn(move || {\n+                    let it = p.execute().unwrap();\n+                    let mut it = it.lock().unwrap();\n+                    let mut results: Vec<RecordBatch> = vec![];\n+                    loop {\n+                        match it.next() {\n+                            Ok(Some(batch)) => {\n+                                results.push(batch);\n+                            }\n+                            Ok(None) => {\n+                                // end of result set\n+                                return Ok(results);\n+                            }\n+                            Err(e) => return Err(e),\n+                        }\n+                    }\n+                })\n+            })\n+            .collect();\n+\n+        // combine the results from each thread\n+        let mut combined_results: Vec<RecordBatch> = vec![];\n+        for thread in threads {\n+            let result = thread.join().unwrap();\n \n Review comment:\n   `unwrap` again\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-10T02:52:30.839+0000",
                    "updated": "2019-09-10T02:52:30.839+0000",
                    "started": "2019-09-10T02:52:30.838+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "309497",
                    "issueId": "13248387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13248387/worklog/309809",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5111: ARROW-6101: [Rust] [DataFusion] Parallel execution of physical query plan\nURL: https://github.com/apache/arrow/pull/5111#discussion_r322743733\n \n \n\n ##########\n File path: rust/datafusion/src/execution/context.rs\n ##########\n @@ -210,6 +216,103 @@ impl ExecutionContext {\n         Ok(plan)\n     }\n \n+    /// Create a physical plan from a logical plan\n+    pub fn create_physical_plan(\n+        &mut self,\n+        logical_plan: &Arc<LogicalPlan>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match logical_plan.as_ref() {\n+            LogicalPlan::TableScan {\n+                table_name,\n+                projection,\n+                ..\n+            } => match (*self.datasources).borrow().get(table_name) {\n+                Some(provider) => {\n+                    let partitions = provider.scan(projection, 16 * 1024)?;\n+                    if partitions.is_empty() {\n+                        Err(ExecutionError::General(\n+                            \"Table provider returned no partitions\".to_string(),\n+                        ))\n+                    } else {\n+                        let partition = partitions[0].lock().unwrap();\n \n Review comment:\n   In this case, I think we want the unwrap. From https://doc.rust-lang.org/std/sync/struct.Mutex.html:\r\n   \r\n   ```\r\n   Most usage of a mutex will simply unwrap() these results, propagating panics among threads to ensure that a possibly invalid invariant is not witnessed.\r\n   ```\r\n   \r\n   These queries are now happening on threads, so although a panic here would fail the query, it would not fail the main thread that launched the thread(s) to execute the query.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-10T13:31:25.136+0000",
                    "updated": "2019-09-10T13:31:25.136+0000",
                    "started": "2019-09-10T13:31:25.136+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "309809",
                    "issueId": "13248387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13248387/worklog/309812",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5111: ARROW-6101: [Rust] [DataFusion] Parallel execution of physical query plan\nURL: https://github.com/apache/arrow/pull/5111#discussion_r322747035\n \n \n\n ##########\n File path: rust/datafusion/src/execution/context.rs\n ##########\n @@ -210,6 +216,103 @@ impl ExecutionContext {\n         Ok(plan)\n     }\n \n+    /// Create a physical plan from a logical plan\n+    pub fn create_physical_plan(\n+        &mut self,\n+        logical_plan: &Arc<LogicalPlan>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match logical_plan.as_ref() {\n+            LogicalPlan::TableScan {\n+                table_name,\n+                projection,\n+                ..\n+            } => match (*self.datasources).borrow().get(table_name) {\n+                Some(provider) => {\n+                    let partitions = provider.scan(projection, 16 * 1024)?;\n \n Review comment:\n   I've made this a parameter now.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-10T13:37:58.879+0000",
                    "updated": "2019-09-10T13:37:58.879+0000",
                    "started": "2019-09-10T13:37:58.878+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "309812",
                    "issueId": "13248387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13248387/worklog/309814",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5111: ARROW-6101: [Rust] [DataFusion] Parallel execution of physical query plan\nURL: https://github.com/apache/arrow/pull/5111#discussion_r322750558\n \n \n\n ##########\n File path: rust/datafusion/src/execution/context.rs\n ##########\n @@ -210,6 +216,103 @@ impl ExecutionContext {\n         Ok(plan)\n     }\n \n+    /// Create a physical plan from a logical plan\n+    pub fn create_physical_plan(\n+        &mut self,\n+        logical_plan: &Arc<LogicalPlan>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match logical_plan.as_ref() {\n+            LogicalPlan::TableScan {\n+                table_name,\n+                projection,\n+                ..\n+            } => match (*self.datasources).borrow().get(table_name) {\n+                Some(provider) => {\n+                    let partitions = provider.scan(projection, 16 * 1024)?;\n+                    if partitions.is_empty() {\n+                        Err(ExecutionError::General(\n+                            \"Table provider returned no partitions\".to_string(),\n+                        ))\n+                    } else {\n+                        let partition = partitions[0].lock().unwrap();\n+                        let schema = partition.schema();\n+                        let exec =\n+                            DatasourceExec::new(schema.clone(), partitions.clone());\n+                        Ok(Arc::new(exec))\n+                    }\n+                }\n+                _ => panic!(),\n+            },\n+            LogicalPlan::Projection { input, expr, .. } => {\n+                let input = self.create_physical_plan(input)?;\n+                let input_schema = input.as_ref().schema().clone();\n+                //let me = self;\n+                let runtime_expr = expr\n+                    .iter()\n+                    .map(|e| self.create_physical_expr(e, &input_schema))\n+                    .collect::<Result<Vec<_>>>()?;\n+                Ok(Arc::new(ProjectionExec::try_new(runtime_expr, input)?))\n+            }\n+            _ => Err(ExecutionError::General(\n+                \"Unsupported logical plan variant\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    /// Create a physical expression from a logical expression\n+    pub fn create_physical_expr(\n+        &self,\n+        e: &Expr,\n+        _input_schema: &Schema,\n+    ) -> Result<Arc<dyn PhysicalExpr>> {\n+        match e {\n+            Expr::Column(i) => Ok(Arc::new(Column::new(*i))),\n+            _ => Err(ExecutionError::NotImplemented(\n+                \"Unsupported expression\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    /// Execute a physical plan and collect the results in memory\n+    pub fn collect(&self, plan: &dyn ExecutionPlan) -> Result<Vec<RecordBatch>> {\n+        let threads: Vec<JoinHandle<Result<Vec<RecordBatch>>>> = plan\n+            .partitions()?\n+            .iter()\n+            .map(|p| {\n+                let p = p.clone();\n+                thread::spawn(move || {\n+                    let it = p.execute().unwrap();\n \n Review comment:\n   Fixed.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-10T13:44:17.073+0000",
                    "updated": "2019-09-10T13:44:17.073+0000",
                    "started": "2019-09-10T13:44:17.073+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "309814",
                    "issueId": "13248387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13248387/worklog/309815",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5111: ARROW-6101: [Rust] [DataFusion] Parallel execution of physical query plan\nURL: https://github.com/apache/arrow/pull/5111#discussion_r322750618\n \n \n\n ##########\n File path: rust/datafusion/src/execution/context.rs\n ##########\n @@ -210,6 +216,103 @@ impl ExecutionContext {\n         Ok(plan)\n     }\n \n+    /// Create a physical plan from a logical plan\n+    pub fn create_physical_plan(\n+        &mut self,\n+        logical_plan: &Arc<LogicalPlan>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match logical_plan.as_ref() {\n+            LogicalPlan::TableScan {\n+                table_name,\n+                projection,\n+                ..\n+            } => match (*self.datasources).borrow().get(table_name) {\n+                Some(provider) => {\n+                    let partitions = provider.scan(projection, 16 * 1024)?;\n+                    if partitions.is_empty() {\n+                        Err(ExecutionError::General(\n+                            \"Table provider returned no partitions\".to_string(),\n+                        ))\n+                    } else {\n+                        let partition = partitions[0].lock().unwrap();\n+                        let schema = partition.schema();\n+                        let exec =\n+                            DatasourceExec::new(schema.clone(), partitions.clone());\n+                        Ok(Arc::new(exec))\n+                    }\n+                }\n+                _ => panic!(),\n+            },\n+            LogicalPlan::Projection { input, expr, .. } => {\n+                let input = self.create_physical_plan(input)?;\n+                let input_schema = input.as_ref().schema().clone();\n+                //let me = self;\n+                let runtime_expr = expr\n+                    .iter()\n+                    .map(|e| self.create_physical_expr(e, &input_schema))\n+                    .collect::<Result<Vec<_>>>()?;\n+                Ok(Arc::new(ProjectionExec::try_new(runtime_expr, input)?))\n+            }\n+            _ => Err(ExecutionError::General(\n+                \"Unsupported logical plan variant\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    /// Create a physical expression from a logical expression\n+    pub fn create_physical_expr(\n+        &self,\n+        e: &Expr,\n+        _input_schema: &Schema,\n+    ) -> Result<Arc<dyn PhysicalExpr>> {\n+        match e {\n+            Expr::Column(i) => Ok(Arc::new(Column::new(*i))),\n+            _ => Err(ExecutionError::NotImplemented(\n+                \"Unsupported expression\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    /// Execute a physical plan and collect the results in memory\n+    pub fn collect(&self, plan: &dyn ExecutionPlan) -> Result<Vec<RecordBatch>> {\n+        let threads: Vec<JoinHandle<Result<Vec<RecordBatch>>>> = plan\n+            .partitions()?\n+            .iter()\n+            .map(|p| {\n+                let p = p.clone();\n+                thread::spawn(move || {\n+                    let it = p.execute().unwrap();\n+                    let mut it = it.lock().unwrap();\n+                    let mut results: Vec<RecordBatch> = vec![];\n+                    loop {\n+                        match it.next() {\n+                            Ok(Some(batch)) => {\n+                                results.push(batch);\n+                            }\n+                            Ok(None) => {\n+                                // end of result set\n+                                return Ok(results);\n+                            }\n+                            Err(e) => return Err(e),\n+                        }\n+                    }\n+                })\n+            })\n+            .collect();\n+\n+        // combine the results from each thread\n+        let mut combined_results: Vec<RecordBatch> = vec![];\n+        for thread in threads {\n+            let result = thread.join().unwrap();\n \n Review comment:\n   Fixed\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-10T13:44:24.180+0000",
                    "updated": "2019-09-10T13:44:24.180+0000",
                    "started": "2019-09-10T13:44:24.180+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "309815",
                    "issueId": "13248387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13248387/worklog/309816",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5111: ARROW-6101: [Rust] [DataFusion] Parallel execution of physical query plan\nURL: https://github.com/apache/arrow/pull/5111#discussion_r322750736\n \n \n\n ##########\n File path: rust/datafusion/src/execution/context.rs\n ##########\n @@ -210,6 +216,103 @@ impl ExecutionContext {\n         Ok(plan)\n     }\n \n+    /// Create a physical plan from a logical plan\n+    pub fn create_physical_plan(\n+        &mut self,\n+        logical_plan: &Arc<LogicalPlan>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match logical_plan.as_ref() {\n+            LogicalPlan::TableScan {\n+                table_name,\n+                projection,\n+                ..\n+            } => match (*self.datasources).borrow().get(table_name) {\n+                Some(provider) => {\n+                    let partitions = provider.scan(projection, 16 * 1024)?;\n+                    if partitions.is_empty() {\n+                        Err(ExecutionError::General(\n+                            \"Table provider returned no partitions\".to_string(),\n+                        ))\n+                    } else {\n+                        let partition = partitions[0].lock().unwrap();\n+                        let schema = partition.schema();\n+                        let exec =\n+                            DatasourceExec::new(schema.clone(), partitions.clone());\n+                        Ok(Arc::new(exec))\n+                    }\n+                }\n+                _ => panic!(),\n \n Review comment:\n   Oops. That one was not intentional ... fixed.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-10T13:44:37.367+0000",
                    "updated": "2019-09-10T13:44:37.367+0000",
                    "started": "2019-09-10T13:44:37.365+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "309816",
                    "issueId": "13248387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13248387/worklog/309819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #5111: ARROW-6101: [Rust] [DataFusion] Parallel execution of physical query plan\nURL: https://github.com/apache/arrow/pull/5111#issuecomment-529942465\n \n \n   Thanks @paddyhoran. I have addressed the comments, except for the two uses of `unwrap` when locking mutexes. See my comment above related to that. Let me know what you think.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-10T13:45:44.481+0000",
                    "updated": "2019-09-10T13:45:44.481+0000",
                    "started": "2019-09-10T13:45:44.481+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "309819",
                    "issueId": "13248387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13248387/worklog/310060",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #5111: ARROW-6101: [Rust] [DataFusion] Parallel execution of physical query plan\nURL: https://github.com/apache/arrow/pull/5111#issuecomment-530090699\n \n \n   Travis failure unrelated, so going ahead with merge.\r\n   \r\n   ```+sudo apt-get update\r\n   Hit:1 http://apt.postgresql.org/pub/repos/apt xenial-pgdg InRelease\r\n   Hit:2 http://archive.ubuntu.com/ubuntu xenial InRelease\r\n   Hit:3 http://archive.ubuntu.com/ubuntu xenial-updates InRelease\r\n   Hit:4 http://security.ubuntu.com/ubuntu xenial-security InRelease\r\n   Hit:5 http://archive.ubuntu.com/ubuntu xenial-backports InRelease\r\n   Hit:6 https://apt.llvm.org/xenial llvm-toolchain-xenial-7 InRelease\r\n   Get:7 https://packages.microsoft.com/ubuntu/16.04/prod xenial InRelease [3,226 B]\r\n   Get:8 https://packages.microsoft.com/ubuntu/16.04/prod xenial/main amd64 Packages [108 kB]\r\n   Err:8 https://packages.microsoft.com/ubuntu/16.04/prod xenial/main amd64 Packages\r\n     Hash Sum mismatch\r\n   Fetched 112 kB in 0s (132 kB/s)\r\n   Reading package lists... Done\r\n   E: Failed to fetch https://packages.microsoft.com/ubuntu/16.04/prod/dists/xenial/main/binary-amd64/Packages.gz  Hash Sum mismatch\r\n   E: Some index files failed to download. They have been ignored, or old ones used instead.\r\n   The command \"$TRAVIS_BUILD_DIR/ci/travis_release_test.sh\" exited with 100.```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-10T19:45:25.664+0000",
                    "updated": "2019-09-10T19:45:25.664+0000",
                    "started": "2019-09-10T19:45:25.664+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "310060",
                    "issueId": "13248387"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13248387/worklog/310574",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5111: ARROW-6101: [Rust] [DataFusion] Parallel execution of physical query plan\nURL: https://github.com/apache/arrow/pull/5111\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-11T13:19:18.659+0000",
                    "updated": "2019-09-11T13:19:18.659+0000",
                    "started": "2019-09-11T13:19:18.658+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "310574",
                    "issueId": "13248387"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 9000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1745799a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@720a6ebf[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@13c7f85d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3299030c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@345dc1c7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@dfa8481[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@21538073[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5ba86636[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@121c77d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@58a68554[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@654bd62b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7dca9562[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Sep 11 13:19:20 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-09-11T13:19:20.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6101/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-08-01T16:56:13.000+0000",
        "updated": "2019-09-11T13:19:20.000+0000",
        "timeoriginalestimate": null,
        "description": "Once the physical plan is in place and can be executed, I will implement logic to convert the logical plan to a physical plan and remove the legacy code for directly executing a logical plan.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Create physical plan from logical plan",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13248387/comment/16927559",
                    "id": "16927559",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 5111\n[https://github.com/apache/arrow/pull/5111]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2019-09-11T13:19:20.454+0000",
                    "updated": "2019-09-11T13:19:20.454+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z058zk:",
        "customfield_12314139": null
    }
}