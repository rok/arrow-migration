{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13083372",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372",
    "key": "ARROW-1163",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332956",
                "id": "12332956",
                "name": "C++ - Plasma"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
            "name": "pcmoritz",
            "key": "pcmoritz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Philipp Moritz",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
            "name": "pcmoritz",
            "key": "pcmoritz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Philipp Moritz",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 42600,
            "total": 42600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 42600,
            "total": 42600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1163/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 71,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/worklog/103702",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "salah-man commented on issue #2065: ARROW-1163: [Java] Java client support for plasma\nURL: https://github.com/apache/arrow/pull/2065#issuecomment-390443807\n \n \n   Thanks for your attention @jacques-n. I think the comment from @jacques-n is great, and the java client of plasma better not depend on the DomainDO itself such as ObjectBuffer.java and ObjectId. And the scenes here is simple, so i just delete the data structure of ObjectBuffer and ObjectId and use the byte[] for the input and output of the api. The code is ready and will commit with other changes comment by @pcmoritz later.\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-20T00:21:58.318+0000",
                    "updated": "2018-05-20T00:21:58.318+0000",
                    "started": "2018-05-20T00:21:58.317+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "103702",
                    "issueId": "13083372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/worklog/103703",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "salah-man commented on issue #2065: ARROW-1163: [Java] Java client support for plasma\nURL: https://github.com/apache/arrow/pull/2065#issuecomment-390443807\n \n \n   Thanks for your attention @jacques-n. I think the comment from @jacques-n is great, and the java client of plasma better not depend on the DomainDO itself such as ObjectBuffer and ObjectId. And the scenes here is simple, so i just delete the data structure of ObjectBuffer and ObjectId and use the byte[] for the input and output of the api. The code is ready and will commit with other changes comment by @pcmoritz later.\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-20T00:22:23.997+0000",
                    "updated": "2018-05-20T00:22:23.997+0000",
                    "started": "2018-05-20T00:22:23.996+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "103703",
                    "issueId": "13083372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/worklog/103704",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "salah-man commented on issue #2065: ARROW-1163: [Java] Java client support for plasma\nURL: https://github.com/apache/arrow/pull/2065#issuecomment-390444985\n \n \n   Thank you for your time @pcmoritz. The comment from you really helpful.\r\n   1. I will fix all the linting/test errors on Travis.\r\n   2. I think it is really needed for the test case, and for the java client of plasma, maybe we need to start the standalone process of plasma store to do the test which i will take a moment to try. And do you have any suggestion here?\r\n   3. I will add the Readme.md under the package of plasma for the usage guide\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-20T00:29:44.939+0000",
                    "updated": "2018-05-20T00:29:44.939+0000",
                    "started": "2018-05-20T00:29:44.939+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "103704",
                    "issueId": "13083372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/worklog/103712",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz commented on issue #2065: ARROW-1163: [Java] Java client support for plasma\nURL: https://github.com/apache/arrow/pull/2065#issuecomment-390447372\n \n \n   Thanks, that sounds good!\r\n   \r\n   For 2, we can do the setup similar to how we do it in C++ (see https://github.com/apache/arrow/blob/master/cpp/src/plasma/test/client_tests.cc#L61) and start an instance of the store from the Java tests (and shut it down after the tests are done).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-20T01:05:29.064+0000",
                    "updated": "2018-05-20T01:05:29.064+0000",
                    "started": "2018-05-20T01:05:29.064+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "103712",
                    "issueId": "13083372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/worklog/103714",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jacques-n commented on issue #2065: ARROW-1163: [Java] Java client support for plasma\nURL: https://github.com/apache/arrow/pull/2065#issuecomment-390448919\n \n \n   The public interface (which is fine in a separate patch), should be ValueVector & ArrowBuf based, not byte[] based. Before releasing this functionality we should be making sure that it works in the context of the rest of the Arrow Java code.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-20T01:16:25.197+0000",
                    "updated": "2018-05-20T01:16:25.197+0000",
                    "started": "2018-05-20T01:16:25.197+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "103714",
                    "issueId": "13083372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/worklog/103727",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "robertnishihara commented on issue #2065: ARROW-1163: [Java] Java client support for plasma\nURL: https://github.com/apache/arrow/pull/2065#issuecomment-390460013\n \n \n   In Python, we expose two different object store client APIs.\r\n   1. An API for creating/sealing/getting a writeable buffer (I think it's called `PlasmaBuffer`).\r\n   2. An API for storing/retrieving a Python object.\r\n   \r\n   In Java, I think it makes sense to have analogs of these. The more important one for now is the first one, which could be implemented using Arrow buffers (but the stored data would be blobs and not necessarily need to be data serialized using the Arrow format). The second would use the Arrow format under the hood.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-20T06:00:45.031+0000",
                    "updated": "2018-05-20T06:00:45.031+0000",
                    "started": "2018-05-20T06:00:45.031+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "103727",
                    "issueId": "13083372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/worklog/103738",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "salah-man commented on issue #2065: ARROW-1163: [Java] Java client support for plasma\nURL: https://github.com/apache/arrow/pull/2065#issuecomment-390477265\n \n \n   Yes, i think it is make sense to hava analogs of these the same as python, and we could try to use the Arrow buffers to instead the byte[] in the follow-up PR, which could make sure that it works in the context of the rest of the Arrow Java code. Thank you for your time again, @pcmoritz @jacques-n  @robertnishihara \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-20T12:28:22.983+0000",
                    "updated": "2018-05-20T12:28:22.983+0000",
                    "started": "2018-05-20T12:28:22.982+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "103738",
                    "issueId": "13083372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/worklog/104446",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2065: ARROW-1163: [Java] Java client support for plasma\nURL: https://github.com/apache/arrow/pull/2065#issuecomment-390843749\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2065?src=pr&el=h1) Report\n   > Merging [#2065](https://codecov.io/gh/apache/arrow/pull/2065?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/f319bcad7b3e5ed45b92f2489a6bb2e31ef44005?src=pr&el=desc) will **increase** coverage by `<.01%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2065/graphs/tree.svg?token=LpTCFbqVT1&height=150&src=pr&width=650)](https://codecov.io/gh/apache/arrow/pull/2065?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2065      +/-   ##\n   ==========================================\n   + Coverage   86.28%   86.28%   +<.01%     \n   ==========================================\n     Files         242      242              \n     Lines       41042    41051       +9     \n   ==========================================\n   + Hits        35413    35422       +9     \n     Misses       5629     5629\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2065?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/src/datatypes.rs](https://codecov.io/gh/apache/arrow/pull/2065/diff?src=pr&el=tree#diff-cnVzdC9zcmMvZGF0YXR5cGVzLnJz) | `71.83% <0%> (\u00f8)` | :arrow_up: |\n   | [rust/src/array.rs](https://codecov.io/gh/apache/arrow/pull/2065/diff?src=pr&el=tree#diff-cnVzdC9zcmMvYXJyYXkucnM=) | `84.95% <0%> (+0.68%)` | :arrow_up: |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2065?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2065?src=pr&el=footer). Last update [f319bca...1c327a7](https://codecov.io/gh/apache/arrow/pull/2065?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-22T02:33:22.068+0000",
                    "updated": "2018-05-22T02:33:22.068+0000",
                    "started": "2018-05-22T02:33:22.067+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "104446",
                    "issueId": "13083372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/worklog/104503",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "salah-man commented on issue #2065: ARROW-1163: [Java] Java client support for plasma\nURL: https://github.com/apache/arrow/pull/2065#issuecomment-390880314\n \n \n   As comment, we just fix the problem you have suggest, could you review them again? Thank you very much, @pcmoritz \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-22T06:43:04.519+0000",
                    "updated": "2018-05-22T06:43:04.519+0000",
                    "started": "2018-05-22T06:43:04.519+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "104503",
                    "issueId": "13083372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/worklog/104947",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz commented on a change in pull request #2065: ARROW-1163: [Java] Java client support for plasma\nURL: https://github.com/apache/arrow/pull/2065#discussion_r190112818\n \n \n\n ##########\n File path: java/plasma/test.sh\n ##########\n @@ -35,7 +36,7 @@ pushd ../../cpp\n             -DCMAKE_CXX_FLAGS=\"-g -O3\" \\\n             -DARROW_BUILD_TESTS=off \\\n             -DARROW_HDFS=on \\\n-            -DARROW_BOOST_USE_SHARED=off \\\n+            -DARROW_BOOST_USE_SHARED=on \\\n \n Review comment:\n   I had to do this to make it compile with Ubuntu 16.04, since the boost static libraries that ship with it are compiled without -fPIC.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-23T03:20:55.477+0000",
                    "updated": "2018-05-23T03:20:55.477+0000",
                    "started": "2018-05-23T03:20:55.477+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "104947",
                    "issueId": "13083372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/worklog/104948",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz commented on a change in pull request #2065: ARROW-1163: [Java] Java client support for plasma\nURL: https://github.com/apache/arrow/pull/2065#discussion_r190112917\n \n \n\n ##########\n File path: cpp/src/plasma/CMakeLists.txt\n ##########\n @@ -160,6 +160,41 @@ install(\n   FILES \"${CMAKE_CURRENT_BINARY_DIR}/plasma.pc\"\n   DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig/\")\n \n+if(ARROW_PLASMA_JAVA_CLIENT)\n+  # Plasma java client support\n+  find_package(JNI REQUIRED)\n+  # add jni support\n+  include_directories(${JAVA_INCLUDE_PATH})\n+  include_directories(${JAVA_INCLUDE_PATH2})\n+  if (JNI_FOUND)\n+    message (STATUS \"JNI_INCLUDE_DIRS = ${JNI_INCLUDE_DIRS}\")\n+    message (STATUS \"JNI_LIBRARIES = ${JNI_LIBRARIES}\")\n+  else()\n+    message (WARNING \"Could not find JNI\")\n+  endif()\n+\n+  add_compile_options(\"-I$ENV{JAVA_HOME}/include/\")\n+  if(WIN32)\n+    add_compile_options(\"-I$ENV{JAVA_HOME}/include/win32\")\n+  elseif(APPLE)\n+    add_compile_options(\"-I$ENV{JAVA_HOME}/include/darwin\")\n+  else() # linux\n+    add_compile_options(\"-I$ENV{JAVA_HOME}/include/linux\")\n+  endif()\n+\n+  include_directories(\"${CMAKE_CURRENT_LIST_DIR}/lib/java\")\n+\n+  file(GLOB PLASMA_LIBRARY_EXT_java_SRC\n+    lib/java/*.cc lib/*.cc)\n+  add_library(plasma_java SHARED\n+    ${PLASMA_LIBRARY_EXT_java_SRC})\n+\n+  if(APPLE)\n+    target_link_libraries(plasma_java plasma_static ${PLASMA_LINK_LIBS} \"-undefined dynamic_lookup\" -Wl,-force_load,${FLATBUFFERS_STATIC_LIB} ${FLATBUFFERS_STATIC_LIB} ${PTHREAD_LIBRARY})\n \n Review comment:\n   Why do we need the ` -Wl,-force_load,` part here?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-23T03:21:54.795+0000",
                    "updated": "2018-05-23T03:21:54.795+0000",
                    "started": "2018-05-23T03:21:54.794+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "104948",
                    "issueId": "13083372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/worklog/104949",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz commented on a change in pull request #2065: ARROW-1163: [Java] Java client support for plasma\nURL: https://github.com/apache/arrow/pull/2065#discussion_r190113069\n \n \n\n ##########\n File path: cpp/src/plasma/lib/java/org_apache_arrow_plasma_PlasmaClientJNI.cc\n ##########\n @@ -0,0 +1,311 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n \n Review comment:\n   Let's add this file to the C++ linting/clang-tidy\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-23T03:23:43.074+0000",
                    "updated": "2018-05-23T03:23:43.074+0000",
                    "started": "2018-05-23T03:23:43.074+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "104949",
                    "issueId": "13083372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/worklog/104950",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz commented on a change in pull request #2065: ARROW-1163: [Java] Java client support for plasma\nURL: https://github.com/apache/arrow/pull/2065#discussion_r190113183\n \n \n\n ##########\n File path: cpp/src/plasma/lib/java/org_apache_arrow_plasma_PlasmaClientJNI.cc\n ##########\n @@ -0,0 +1,314 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"plasma/lib/java/org_apache_arrow_plasma_PlasmaClientJNI.h\"\n+\n+#include <pthread.h>\n+#include <stdlib.h>\n+#include <unistd.h>\n+\n+#include <algorithm>\n+#include <cstring>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"plasma/client.h\"\n+\n+const jsize LEN_OF_OBJECTID = sizeof(plasma::ObjectID) / sizeof(jbyte);\n \n Review comment:\n   should this be a constexpr?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-23T03:24:40.431+0000",
                    "updated": "2018-05-23T03:24:40.431+0000",
                    "started": "2018-05-23T03:24:40.430+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "104950",
                    "issueId": "13083372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/worklog/104951",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz commented on a change in pull request #2065: ARROW-1163: [Java] Java client support for plasma\nURL: https://github.com/apache/arrow/pull/2065#discussion_r190113280\n \n \n\n ##########\n File path: cpp/src/plasma/lib/java/org_apache_arrow_plasma_PlasmaClientJNI.cc\n ##########\n @@ -0,0 +1,314 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"plasma/lib/java/org_apache_arrow_plasma_PlasmaClientJNI.h\"\n+\n+#include <pthread.h>\n+#include <stdlib.h>\n+#include <unistd.h>\n+\n+#include <algorithm>\n+#include <cstring>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"plasma/client.h\"\n+\n+const jsize LEN_OF_OBJECTID = sizeof(plasma::ObjectID) / sizeof(jbyte);\n+\n+inline void jbyteArray_to_object_id(JNIEnv* env, jbyteArray a, plasma::ObjectID* oid) {\n+  env->GetByteArrayRegion(a, 0, LEN_OF_OBJECTID, reinterpret_cast<jbyte*>(oid));\n+}\n+\n+inline void object_id_to_jbyteArray(JNIEnv* env, jbyteArray a, plasma::ObjectID* oid) {\n+  env->SetByteArrayRegion(a, 0, LEN_OF_OBJECTID, reinterpret_cast<jbyte*>(oid));\n+}\n+\n+class JByteArrayGetter {\n+ private:\n+  JNIEnv* _env;\n+  jbyteArray _a;\n+  jbyte* bp;\n+\n+ public:\n+  JByteArrayGetter(JNIEnv* env, jbyteArray a, jbyte** out) {\n+    _env = env;\n+    _a = a;\n+\n+    bp = _env->GetByteArrayElements(_a, NULL);\n+    *out = bp;\n+  }\n+\n+  ~JByteArrayGetter() { _env->ReleaseByteArrayElements(_a, bp, 0); }\n+};\n+\n+JNIEXPORT jlong JNICALL Java_org_apache_arrow_plasma_PlasmaClientJNI_connect(\n+    JNIEnv* env, jclass cls, jstring store_socket_name, jstring manager_socket_name,\n+    jint release_delay) {\n+  const char* s_name = env->GetStringUTFChars(store_socket_name, NULL);\n+  const char* m_name = env->GetStringUTFChars(manager_socket_name, NULL);\n+\n+  plasma::PlasmaClient* client = new plasma::PlasmaClient();\n+  ARROW_CHECK_OK(client->Connect(s_name, m_name, release_delay));\n+\n+  env->ReleaseStringUTFChars(store_socket_name, s_name);\n+  env->ReleaseStringUTFChars(manager_socket_name, m_name);\n+  return reinterpret_cast<int64_t>(client);\n+}\n+\n+JNIEXPORT void JNICALL Java_org_apache_arrow_plasma_PlasmaClientJNI_disconnect(\n+    JNIEnv* env, jclass cls, jlong conn) {\n+  plasma::PlasmaClient* client = (plasma::PlasmaClient*)conn;\n \n Review comment:\n   Let's do a reinterpret_cast here, we shouldn't have old style casts\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-23T03:25:46.273+0000",
                    "updated": "2018-05-23T03:25:46.273+0000",
                    "started": "2018-05-23T03:25:46.272+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "104951",
                    "issueId": "13083372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/worklog/104952",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz commented on a change in pull request #2065: ARROW-1163: [Java] Java client support for plasma\nURL: https://github.com/apache/arrow/pull/2065#discussion_r190113326\n \n \n\n ##########\n File path: cpp/src/plasma/lib/java/org_apache_arrow_plasma_PlasmaClientJNI.cc\n ##########\n @@ -0,0 +1,314 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"plasma/lib/java/org_apache_arrow_plasma_PlasmaClientJNI.h\"\n+\n+#include <pthread.h>\n+#include <stdlib.h>\n+#include <unistd.h>\n+\n+#include <algorithm>\n+#include <cstring>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"plasma/client.h\"\n+\n+const jsize LEN_OF_OBJECTID = sizeof(plasma::ObjectID) / sizeof(jbyte);\n+\n+inline void jbyteArray_to_object_id(JNIEnv* env, jbyteArray a, plasma::ObjectID* oid) {\n+  env->GetByteArrayRegion(a, 0, LEN_OF_OBJECTID, reinterpret_cast<jbyte*>(oid));\n+}\n+\n+inline void object_id_to_jbyteArray(JNIEnv* env, jbyteArray a, plasma::ObjectID* oid) {\n+  env->SetByteArrayRegion(a, 0, LEN_OF_OBJECTID, reinterpret_cast<jbyte*>(oid));\n+}\n+\n+class JByteArrayGetter {\n+ private:\n+  JNIEnv* _env;\n+  jbyteArray _a;\n+  jbyte* bp;\n+\n+ public:\n+  JByteArrayGetter(JNIEnv* env, jbyteArray a, jbyte** out) {\n+    _env = env;\n+    _a = a;\n+\n+    bp = _env->GetByteArrayElements(_a, NULL);\n+    *out = bp;\n+  }\n+\n+  ~JByteArrayGetter() { _env->ReleaseByteArrayElements(_a, bp, 0); }\n+};\n+\n+JNIEXPORT jlong JNICALL Java_org_apache_arrow_plasma_PlasmaClientJNI_connect(\n+    JNIEnv* env, jclass cls, jstring store_socket_name, jstring manager_socket_name,\n+    jint release_delay) {\n+  const char* s_name = env->GetStringUTFChars(store_socket_name, NULL);\n+  const char* m_name = env->GetStringUTFChars(manager_socket_name, NULL);\n+\n+  plasma::PlasmaClient* client = new plasma::PlasmaClient();\n+  ARROW_CHECK_OK(client->Connect(s_name, m_name, release_delay));\n+\n+  env->ReleaseStringUTFChars(store_socket_name, s_name);\n+  env->ReleaseStringUTFChars(manager_socket_name, m_name);\n+  return reinterpret_cast<int64_t>(client);\n+}\n+\n+JNIEXPORT void JNICALL Java_org_apache_arrow_plasma_PlasmaClientJNI_disconnect(\n+    JNIEnv* env, jclass cls, jlong conn) {\n+  plasma::PlasmaClient* client = (plasma::PlasmaClient*)conn;\n+\n+  ARROW_CHECK_OK(client->Disconnect());\n+  delete client;\n+  return;\n+}\n+\n+JNIEXPORT jobject JNICALL Java_org_apache_arrow_plasma_PlasmaClientJNI_create(\n+    JNIEnv* env, jclass cls, jlong conn, jbyteArray object_id, jint size,\n+    jbyteArray metadata) {\n+  plasma::PlasmaClient* client = (plasma::PlasmaClient*)conn;\n \n Review comment:\n   ditto\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-23T03:26:06.775+0000",
                    "updated": "2018-05-23T03:26:06.775+0000",
                    "started": "2018-05-23T03:26:06.774+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "104952",
                    "issueId": "13083372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/worklog/104953",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz commented on a change in pull request #2065: ARROW-1163: [Java] Java client support for plasma\nURL: https://github.com/apache/arrow/pull/2065#discussion_r190113421\n \n \n\n ##########\n File path: cpp/src/plasma/lib/java/org_apache_arrow_plasma_PlasmaClientJNI.cc\n ##########\n @@ -0,0 +1,314 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"plasma/lib/java/org_apache_arrow_plasma_PlasmaClientJNI.h\"\n+\n+#include <pthread.h>\n+#include <stdlib.h>\n+#include <unistd.h>\n+\n+#include <algorithm>\n+#include <cstring>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"plasma/client.h\"\n+\n+const jsize LEN_OF_OBJECTID = sizeof(plasma::ObjectID) / sizeof(jbyte);\n+\n+inline void jbyteArray_to_object_id(JNIEnv* env, jbyteArray a, plasma::ObjectID* oid) {\n+  env->GetByteArrayRegion(a, 0, LEN_OF_OBJECTID, reinterpret_cast<jbyte*>(oid));\n+}\n+\n+inline void object_id_to_jbyteArray(JNIEnv* env, jbyteArray a, plasma::ObjectID* oid) {\n+  env->SetByteArrayRegion(a, 0, LEN_OF_OBJECTID, reinterpret_cast<jbyte*>(oid));\n+}\n+\n+class JByteArrayGetter {\n+ private:\n+  JNIEnv* _env;\n+  jbyteArray _a;\n+  jbyte* bp;\n+\n+ public:\n+  JByteArrayGetter(JNIEnv* env, jbyteArray a, jbyte** out) {\n+    _env = env;\n+    _a = a;\n+\n+    bp = _env->GetByteArrayElements(_a, NULL);\n+    *out = bp;\n+  }\n+\n+  ~JByteArrayGetter() { _env->ReleaseByteArrayElements(_a, bp, 0); }\n+};\n+\n+JNIEXPORT jlong JNICALL Java_org_apache_arrow_plasma_PlasmaClientJNI_connect(\n+    JNIEnv* env, jclass cls, jstring store_socket_name, jstring manager_socket_name,\n+    jint release_delay) {\n+  const char* s_name = env->GetStringUTFChars(store_socket_name, NULL);\n+  const char* m_name = env->GetStringUTFChars(manager_socket_name, NULL);\n+\n+  plasma::PlasmaClient* client = new plasma::PlasmaClient();\n+  ARROW_CHECK_OK(client->Connect(s_name, m_name, release_delay));\n+\n+  env->ReleaseStringUTFChars(store_socket_name, s_name);\n+  env->ReleaseStringUTFChars(manager_socket_name, m_name);\n+  return reinterpret_cast<int64_t>(client);\n+}\n+\n+JNIEXPORT void JNICALL Java_org_apache_arrow_plasma_PlasmaClientJNI_disconnect(\n+    JNIEnv* env, jclass cls, jlong conn) {\n+  plasma::PlasmaClient* client = (plasma::PlasmaClient*)conn;\n+\n+  ARROW_CHECK_OK(client->Disconnect());\n+  delete client;\n+  return;\n+}\n+\n+JNIEXPORT jobject JNICALL Java_org_apache_arrow_plasma_PlasmaClientJNI_create(\n+    JNIEnv* env, jclass cls, jlong conn, jbyteArray object_id, jint size,\n+    jbyteArray metadata) {\n+  plasma::PlasmaClient* client = (plasma::PlasmaClient*)conn;\n+  plasma::ObjectID oid;\n+  jbyteArray_to_object_id(env, object_id, &oid);\n+\n+  // prepare metadata buffer\n+  uint8_t* md = NULL;\n+  jsize md_size = 0;\n+  std::unique_ptr<JByteArrayGetter> md_getter;\n+  if (metadata != NULL) {\n+    md_size = env->GetArrayLength(metadata);\n+  }\n+  if (md_size > 0) {\n+    md_getter.reset(new JByteArrayGetter(env, metadata, reinterpret_cast<jbyte**>(&md)));\n+  }\n+\n+  std::shared_ptr<Buffer> data;\n+  Status s = client->Create(oid, size, md, md_size, &data);\n+  if (s.IsPlasmaObjectExists()) {\n+    jclass Exception = env->FindClass(\"org/ray/spi/impl/PlasmaObjectExistsException\");\n \n Review comment:\n   This class needs to be integrated into this PR, right? Can we also add a test that this works?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-23T03:27:02.326+0000",
                    "updated": "2018-05-23T03:27:02.326+0000",
                    "started": "2018-05-23T03:27:02.326+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "104953",
                    "issueId": "13083372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/worklog/104954",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz commented on a change in pull request #2065: ARROW-1163: [Java] Java client support for plasma\nURL: https://github.com/apache/arrow/pull/2065#discussion_r190113438\n \n \n\n ##########\n File path: cpp/src/plasma/lib/java/org_apache_arrow_plasma_PlasmaClientJNI.cc\n ##########\n @@ -0,0 +1,314 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"plasma/lib/java/org_apache_arrow_plasma_PlasmaClientJNI.h\"\n+\n+#include <pthread.h>\n+#include <stdlib.h>\n+#include <unistd.h>\n+\n+#include <algorithm>\n+#include <cstring>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"plasma/client.h\"\n+\n+const jsize LEN_OF_OBJECTID = sizeof(plasma::ObjectID) / sizeof(jbyte);\n+\n+inline void jbyteArray_to_object_id(JNIEnv* env, jbyteArray a, plasma::ObjectID* oid) {\n+  env->GetByteArrayRegion(a, 0, LEN_OF_OBJECTID, reinterpret_cast<jbyte*>(oid));\n+}\n+\n+inline void object_id_to_jbyteArray(JNIEnv* env, jbyteArray a, plasma::ObjectID* oid) {\n+  env->SetByteArrayRegion(a, 0, LEN_OF_OBJECTID, reinterpret_cast<jbyte*>(oid));\n+}\n+\n+class JByteArrayGetter {\n+ private:\n+  JNIEnv* _env;\n+  jbyteArray _a;\n+  jbyte* bp;\n+\n+ public:\n+  JByteArrayGetter(JNIEnv* env, jbyteArray a, jbyte** out) {\n+    _env = env;\n+    _a = a;\n+\n+    bp = _env->GetByteArrayElements(_a, NULL);\n+    *out = bp;\n+  }\n+\n+  ~JByteArrayGetter() { _env->ReleaseByteArrayElements(_a, bp, 0); }\n+};\n+\n+JNIEXPORT jlong JNICALL Java_org_apache_arrow_plasma_PlasmaClientJNI_connect(\n+    JNIEnv* env, jclass cls, jstring store_socket_name, jstring manager_socket_name,\n+    jint release_delay) {\n+  const char* s_name = env->GetStringUTFChars(store_socket_name, NULL);\n+  const char* m_name = env->GetStringUTFChars(manager_socket_name, NULL);\n+\n+  plasma::PlasmaClient* client = new plasma::PlasmaClient();\n+  ARROW_CHECK_OK(client->Connect(s_name, m_name, release_delay));\n+\n+  env->ReleaseStringUTFChars(store_socket_name, s_name);\n+  env->ReleaseStringUTFChars(manager_socket_name, m_name);\n+  return reinterpret_cast<int64_t>(client);\n+}\n+\n+JNIEXPORT void JNICALL Java_org_apache_arrow_plasma_PlasmaClientJNI_disconnect(\n+    JNIEnv* env, jclass cls, jlong conn) {\n+  plasma::PlasmaClient* client = (plasma::PlasmaClient*)conn;\n+\n+  ARROW_CHECK_OK(client->Disconnect());\n+  delete client;\n+  return;\n+}\n+\n+JNIEXPORT jobject JNICALL Java_org_apache_arrow_plasma_PlasmaClientJNI_create(\n+    JNIEnv* env, jclass cls, jlong conn, jbyteArray object_id, jint size,\n+    jbyteArray metadata) {\n+  plasma::PlasmaClient* client = (plasma::PlasmaClient*)conn;\n+  plasma::ObjectID oid;\n+  jbyteArray_to_object_id(env, object_id, &oid);\n+\n+  // prepare metadata buffer\n+  uint8_t* md = NULL;\n+  jsize md_size = 0;\n+  std::unique_ptr<JByteArrayGetter> md_getter;\n+  if (metadata != NULL) {\n+    md_size = env->GetArrayLength(metadata);\n+  }\n+  if (md_size > 0) {\n+    md_getter.reset(new JByteArrayGetter(env, metadata, reinterpret_cast<jbyte**>(&md)));\n+  }\n+\n+  std::shared_ptr<Buffer> data;\n+  Status s = client->Create(oid, size, md, md_size, &data);\n+  if (s.IsPlasmaObjectExists()) {\n+    jclass Exception = env->FindClass(\"org/ray/spi/impl/PlasmaObjectExistsException\");\n+    env->ThrowNew(Exception,\n+                  \"An object with this ID already exists in the plasma store.\");\n+    return NULL;\n+  }\n+  if (s.IsPlasmaStoreFull()) {\n+    jclass Exception = env->FindClass(\"org/ray/spi/impl/PlasmaOutOfMemoryException\");\n \n Review comment:\n   same here\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-23T03:27:14.225+0000",
                    "updated": "2018-05-23T03:27:14.225+0000",
                    "started": "2018-05-23T03:27:14.225+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "104954",
                    "issueId": "13083372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/worklog/104955",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz commented on a change in pull request #2065: ARROW-1163: [Java] Java client support for plasma\nURL: https://github.com/apache/arrow/pull/2065#discussion_r190113456\n \n \n\n ##########\n File path: cpp/src/plasma/lib/java/org_apache_arrow_plasma_PlasmaClientJNI.cc\n ##########\n @@ -0,0 +1,314 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"plasma/lib/java/org_apache_arrow_plasma_PlasmaClientJNI.h\"\n+\n+#include <pthread.h>\n+#include <stdlib.h>\n+#include <unistd.h>\n+\n+#include <algorithm>\n+#include <cstring>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"plasma/client.h\"\n+\n+const jsize LEN_OF_OBJECTID = sizeof(plasma::ObjectID) / sizeof(jbyte);\n+\n+inline void jbyteArray_to_object_id(JNIEnv* env, jbyteArray a, plasma::ObjectID* oid) {\n+  env->GetByteArrayRegion(a, 0, LEN_OF_OBJECTID, reinterpret_cast<jbyte*>(oid));\n+}\n+\n+inline void object_id_to_jbyteArray(JNIEnv* env, jbyteArray a, plasma::ObjectID* oid) {\n+  env->SetByteArrayRegion(a, 0, LEN_OF_OBJECTID, reinterpret_cast<jbyte*>(oid));\n+}\n+\n+class JByteArrayGetter {\n+ private:\n+  JNIEnv* _env;\n+  jbyteArray _a;\n+  jbyte* bp;\n+\n+ public:\n+  JByteArrayGetter(JNIEnv* env, jbyteArray a, jbyte** out) {\n+    _env = env;\n+    _a = a;\n+\n+    bp = _env->GetByteArrayElements(_a, NULL);\n+    *out = bp;\n+  }\n+\n+  ~JByteArrayGetter() { _env->ReleaseByteArrayElements(_a, bp, 0); }\n+};\n+\n+JNIEXPORT jlong JNICALL Java_org_apache_arrow_plasma_PlasmaClientJNI_connect(\n+    JNIEnv* env, jclass cls, jstring store_socket_name, jstring manager_socket_name,\n+    jint release_delay) {\n+  const char* s_name = env->GetStringUTFChars(store_socket_name, NULL);\n+  const char* m_name = env->GetStringUTFChars(manager_socket_name, NULL);\n+\n+  plasma::PlasmaClient* client = new plasma::PlasmaClient();\n+  ARROW_CHECK_OK(client->Connect(s_name, m_name, release_delay));\n+\n+  env->ReleaseStringUTFChars(store_socket_name, s_name);\n+  env->ReleaseStringUTFChars(manager_socket_name, m_name);\n+  return reinterpret_cast<int64_t>(client);\n+}\n+\n+JNIEXPORT void JNICALL Java_org_apache_arrow_plasma_PlasmaClientJNI_disconnect(\n+    JNIEnv* env, jclass cls, jlong conn) {\n+  plasma::PlasmaClient* client = (plasma::PlasmaClient*)conn;\n+\n+  ARROW_CHECK_OK(client->Disconnect());\n+  delete client;\n+  return;\n+}\n+\n+JNIEXPORT jobject JNICALL Java_org_apache_arrow_plasma_PlasmaClientJNI_create(\n+    JNIEnv* env, jclass cls, jlong conn, jbyteArray object_id, jint size,\n+    jbyteArray metadata) {\n+  plasma::PlasmaClient* client = (plasma::PlasmaClient*)conn;\n+  plasma::ObjectID oid;\n+  jbyteArray_to_object_id(env, object_id, &oid);\n+\n+  // prepare metadata buffer\n+  uint8_t* md = NULL;\n+  jsize md_size = 0;\n+  std::unique_ptr<JByteArrayGetter> md_getter;\n+  if (metadata != NULL) {\n+    md_size = env->GetArrayLength(metadata);\n+  }\n+  if (md_size > 0) {\n+    md_getter.reset(new JByteArrayGetter(env, metadata, reinterpret_cast<jbyte**>(&md)));\n+  }\n+\n+  std::shared_ptr<Buffer> data;\n+  Status s = client->Create(oid, size, md, md_size, &data);\n+  if (s.IsPlasmaObjectExists()) {\n+    jclass Exception = env->FindClass(\"org/ray/spi/impl/PlasmaObjectExistsException\");\n+    env->ThrowNew(Exception,\n+                  \"An object with this ID already exists in the plasma store.\");\n+    return NULL;\n+  }\n+  if (s.IsPlasmaStoreFull()) {\n+    jclass Exception = env->FindClass(\"org/ray/spi/impl/PlasmaOutOfMemoryException\");\n+    env->ThrowNew(Exception,\n+                  \"The plasma store ran out of memory and could not create this object.\");\n+    return NULL;\n+  }\n+  ARROW_CHECK(s.ok());\n+\n+  return env->NewDirectByteBuffer(data->mutable_data(), size);\n+}\n+\n+JNIEXPORT jbyteArray JNICALL Java_org_apache_arrow_plasma_PlasmaClientJNI_hash(\n+    JNIEnv* env, jclass cls, jlong conn, jbyteArray object_id) {\n+  plasma::PlasmaClient* client = (plasma::PlasmaClient*)conn;\n \n Review comment:\n   C style cast\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-23T03:27:27.192+0000",
                    "updated": "2018-05-23T03:27:27.192+0000",
                    "started": "2018-05-23T03:27:27.191+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "104955",
                    "issueId": "13083372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/worklog/104956",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "salah-man commented on a change in pull request #2065: ARROW-1163: [Java] Java client support for plasma\nURL: https://github.com/apache/arrow/pull/2065#discussion_r190113465\n \n \n\n ##########\n File path: cpp/src/plasma/lib/java/org_apache_arrow_plasma_PlasmaClientJNI.cc\n ##########\n @@ -0,0 +1,314 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"plasma/lib/java/org_apache_arrow_plasma_PlasmaClientJNI.h\"\n+\n+#include <pthread.h>\n+#include <stdlib.h>\n+#include <unistd.h>\n+\n+#include <algorithm>\n+#include <cstring>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"plasma/client.h\"\n+\n+const jsize LEN_OF_OBJECTID = sizeof(plasma::ObjectID) / sizeof(jbyte);\n \n Review comment:\n   yes, it will not be changed, and worked as constant\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-23T03:27:32.872+0000",
                    "updated": "2018-05-23T03:27:32.872+0000",
                    "started": "2018-05-23T03:27:32.872+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "104956",
                    "issueId": "13083372"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/worklog/104957",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz commented on a change in pull request #2065: ARROW-1163: [Java] Java client support for plasma\nURL: https://github.com/apache/arrow/pull/2065#discussion_r190113480\n \n \n\n ##########\n File path: cpp/src/plasma/lib/java/org_apache_arrow_plasma_PlasmaClientJNI.cc\n ##########\n @@ -0,0 +1,314 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"plasma/lib/java/org_apache_arrow_plasma_PlasmaClientJNI.h\"\n+\n+#include <pthread.h>\n+#include <stdlib.h>\n+#include <unistd.h>\n+\n+#include <algorithm>\n+#include <cstring>\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"plasma/client.h\"\n+\n+const jsize LEN_OF_OBJECTID = sizeof(plasma::ObjectID) / sizeof(jbyte);\n+\n+inline void jbyteArray_to_object_id(JNIEnv* env, jbyteArray a, plasma::ObjectID* oid) {\n+  env->GetByteArrayRegion(a, 0, LEN_OF_OBJECTID, reinterpret_cast<jbyte*>(oid));\n+}\n+\n+inline void object_id_to_jbyteArray(JNIEnv* env, jbyteArray a, plasma::ObjectID* oid) {\n+  env->SetByteArrayRegion(a, 0, LEN_OF_OBJECTID, reinterpret_cast<jbyte*>(oid));\n+}\n+\n+class JByteArrayGetter {\n+ private:\n+  JNIEnv* _env;\n+  jbyteArray _a;\n+  jbyte* bp;\n+\n+ public:\n+  JByteArrayGetter(JNIEnv* env, jbyteArray a, jbyte** out) {\n+    _env = env;\n+    _a = a;\n+\n+    bp = _env->GetByteArrayElements(_a, NULL);\n+    *out = bp;\n+  }\n+\n+  ~JByteArrayGetter() { _env->ReleaseByteArrayElements(_a, bp, 0); }\n+};\n+\n+JNIEXPORT jlong JNICALL Java_org_apache_arrow_plasma_PlasmaClientJNI_connect(\n+    JNIEnv* env, jclass cls, jstring store_socket_name, jstring manager_socket_name,\n+    jint release_delay) {\n+  const char* s_name = env->GetStringUTFChars(store_socket_name, NULL);\n+  const char* m_name = env->GetStringUTFChars(manager_socket_name, NULL);\n+\n+  plasma::PlasmaClient* client = new plasma::PlasmaClient();\n+  ARROW_CHECK_OK(client->Connect(s_name, m_name, release_delay));\n+\n+  env->ReleaseStringUTFChars(store_socket_name, s_name);\n+  env->ReleaseStringUTFChars(manager_socket_name, m_name);\n+  return reinterpret_cast<int64_t>(client);\n+}\n+\n+JNIEXPORT void JNICALL Java_org_apache_arrow_plasma_PlasmaClientJNI_disconnect(\n+    JNIEnv* env, jclass cls, jlong conn) {\n+  plasma::PlasmaClient* client = (plasma::PlasmaClient*)conn;\n+\n+  ARROW_CHECK_OK(client->Disconnect());\n+  delete client;\n+  return;\n+}\n+\n+JNIEXPORT jobject JNICALL Java_org_apache_arrow_plasma_PlasmaClientJNI_create(\n+    JNIEnv* env, jclass cls, jlong conn, jbyteArray object_id, jint size,\n+    jbyteArray metadata) {\n+  plasma::PlasmaClient* client = (plasma::PlasmaClient*)conn;\n+  plasma::ObjectID oid;\n+  jbyteArray_to_object_id(env, object_id, &oid);\n+\n+  // prepare metadata buffer\n+  uint8_t* md = NULL;\n+  jsize md_size = 0;\n+  std::unique_ptr<JByteArrayGetter> md_getter;\n+  if (metadata != NULL) {\n+    md_size = env->GetArrayLength(metadata);\n+  }\n+  if (md_size > 0) {\n+    md_getter.reset(new JByteArrayGetter(env, metadata, reinterpret_cast<jbyte**>(&md)));\n+  }\n+\n+  std::shared_ptr<Buffer> data;\n+  Status s = client->Create(oid, size, md, md_size, &data);\n+  if (s.IsPlasmaObjectExists()) {\n+    jclass Exception = env->FindClass(\"org/ray/spi/impl/PlasmaObjectExistsException\");\n+    env->ThrowNew(Exception,\n+                  \"An object with this ID already exists in the plasma store.\");\n+    return NULL;\n+  }\n+  if (s.IsPlasmaStoreFull()) {\n+    jclass Exception = env->FindClass(\"org/ray/spi/impl/PlasmaOutOfMemoryException\");\n+    env->ThrowNew(Exception,\n+                  \"The plasma store ran out of memory and could not create this object.\");\n+    return NULL;\n+  }\n+  ARROW_CHECK(s.ok());\n+\n+  return env->NewDirectByteBuffer(data->mutable_data(), size);\n+}\n+\n+JNIEXPORT jbyteArray JNICALL Java_org_apache_arrow_plasma_PlasmaClientJNI_hash(\n+    JNIEnv* env, jclass cls, jlong conn, jbyteArray object_id) {\n+  plasma::PlasmaClient* client = (plasma::PlasmaClient*)conn;\n+  plasma::ObjectID oid;\n+  jbyteArray_to_object_id(env, object_id, &oid);\n+\n+  unsigned char digest[plasma::kDigestSize];\n+  bool success = client->Hash(oid, digest).ok();\n+\n+  if (success) {\n+    jbyteArray ret = env->NewByteArray(plasma::kDigestSize);\n+    env->SetByteArrayRegion(ret, 0, plasma::kDigestSize,\n+                            reinterpret_cast<jbyte*>(digest));\n+    return ret;\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+JNIEXPORT void JNICALL Java_org_apache_arrow_plasma_PlasmaClientJNI_seal(\n+    JNIEnv* env, jclass cls, jlong conn, jbyteArray object_id) {\n+  plasma::PlasmaClient* client = (plasma::PlasmaClient*)conn;\n \n Review comment:\n   C style cast\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-23T03:27:45.456+0000",
                    "updated": "2018-05-23T03:27:45.456+0000",
                    "started": "2018-05-23T03:27:45.455+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "104957",
                    "issueId": "13083372"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 42600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@211fd61b[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@33e54b71[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6fa2562d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7605266b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@28bac704[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@fc67840[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@72a844ab[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2dc112eb[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@53bd62b0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6f0514ff[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5f3898a8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7acb8fee[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 42600,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Aug 08 14:22:08 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-05-25T06:57:42.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1163/watchers",
            "watchCount": 7,
            "isWatching": false
        },
        "created": "2017-06-29T06:20:12.000+0000",
        "updated": "2018-08-08T14:22:08.000+0000",
        "timeoriginalestimate": null,
        "description": "We should start thinking about how a Java client for plasma would look like. Given the focus of arrow to support Python, C++ and Java really well, it is the next important target after Python and C++.\n\nMy preliminary thoughts on it are the following ones: We can either go with JNI and wrap the C++ client or (in my opinion preferable) write a pure Java client. It would communicate with the Plasma store via Java flatbuffers over sockets.\n\nIt seems that the only thing blocking a pure Java client at the moment is the way we ship file descriptors for the memory mapped files between store and client (see the file fling.cc in the Plasma repo). We would need to get rid of that because there is no pure Java API that allows transferring file descriptors over a process boundary. So the way to transfer memory mapped files over process boundaries then is probably to use the file system and keep the memory mapped files in the file system instead of unlinking them immediately (as we do at the moment), so they can be opened by the client process via their path.\n\nThe challenge in this case is how to clean the files up and make sure they are not lying around if the plasma store crashes. One option is to store the plasma store PID with the file (i.e. as part of the file name) and let the plasma store clean them up the next time it is started); maybe there is OS level support for temporary files we can reuse.\n\nI probably won't get to this for a while, so if anybody needs this or has free cycles, they should feel free to chime in. Also opinions on the design are appreciated!\n\n-- Philipp.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "11h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 42600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Plasma][Java] Java client for Plasma",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/comment/16068415",
                    "id": "16068415",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Along with the 0.5.0 release, we should have a blog post that explains how the object store works and call for contributions, which might help with recruiting some Java developers to get involved",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-06-29T14:34:05.567+0000",
                    "updated": "2017-06-29T14:34:05.567+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/comment/16242190",
                    "id": "16242190",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=luchy0120",
                        "name": "luchy0120",
                        "key": "luchy0120",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10438",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10438",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10438",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10438"
                        },
                        "displayName": "Lu Qi ",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Hi,Philipp Moritz,\r\nI've been working on reading and writing Tensor in Java for several weeks. I've got Tensor structure like this:\r\nClass Tensor{ private float[] storage; private int[] shape }\r\nI used JNI to leverage plasma C++ client . One good thing is when writing tensor ,there is \r\n\"getPrimitiveArrayCritical\" method which gets the address in Java heap (based on vm impletation),\r\nthus I can construct Tensor in C++ easily without copying, although it stops GC in this process, but \r\nplasma writing is non blocking. On the other side of the world, when reading tensor , I need to copy \r\nthe share memory into java heap, this will cost time.  So, in order to save reading time , pure Java \r\nclient may be a good choice. \r\n\r\nAs to pure Java client , may be we can use jni to get fd first and construct a FileDescriptor .\r\nhttps://stackoverflow.com/questions/4845122/using-a-numbered-file-descriptor-from-java \r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=luchy0120",
                        "name": "luchy0120",
                        "key": "luchy0120",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10438",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10438",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10438",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10438"
                        },
                        "displayName": "Lu Qi ",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-07T15:30:40.599+0000",
                    "updated": "2017-11-07T15:30:40.599+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/comment/16242298",
                    "id": "16242298",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
                        "name": "pcmoritz",
                        "key": "pcmoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Philipp Moritz",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Hey Lu Qi,\r\n\r\nI have very limited experience with Java, here are some thoughts that are I hope are helpful:\r\n\r\nYou can do zero copy reads in Java using an off-heap method like http://xcorpion.tech/2016/09/10/It-s-all-about-buffers-zero-copy-mmap-and-Java-NIO/. Given the data already lives in (in-memory) memory-mapped files, this might be the best way to go forward here.\r\n\r\nWe would essentially define our own Tensor class and then use code like https://github.com/apache/spark/tree/50ada2a4d31609b6c828158cad8e128c2f605b8d/common/unsafe/src/main/java/org/apache/spark/unsafe (see for example https://github.com/apache/spark/blob/50ada2a4d31609b6c828158cad8e128c2f605b8d/common/unsafe/src/main/java/org/apache/spark/unsafe/array/LongArray.java) to access the data without copies.\r\n\r\nArrow already has a Tensor class in C++ that does similar things and the the current Python serialization code uses that to read Tensors in a zero copy way from the object store and expose them as numpy arrays to the user. On the Java side I think not much is available yet for reading tensors; as a point to get started, the code for parsing Tensor metadata is generated here: https://github.com/apache/arrow/blob/82eea49b3eea6047f53478113ab3ff9a38f0d344/java/format/pom.xml#L108\r\n\r\nIf you look at the code for reading C++ Tensors, you should be able to get a prototype of this working. I'm also cc'ing some of the people who have done most work on the Java implementation for more input.\r\n\r\n[~bryanc]  [~siddteotia] [~jnadeau]\r\n\r\n-- Philipp.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
                        "name": "pcmoritz",
                        "key": "pcmoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Philipp Moritz",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-07T16:20:21.215+0000",
                    "updated": "2017-11-07T16:20:21.215+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/comment/16243388",
                    "id": "16243388",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=luchy0120",
                        "name": "luchy0120",
                        "key": "luchy0120",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10438",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10438",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10438",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10438"
                        },
                        "displayName": "Lu Qi ",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Hi, Philipp,\r\nThanks for providing me these material. I see that numpy uses \"PyArray_NewFromDescr\" to wrap a\r\nmemory without copying data. So, on Java side, we will mimic this method and provide a wrapper \r\nclass for viewing or modify the underlying \"mmap\" share memory. But , for now , as in my case,  \r\nI have an already defined Tensor using float array . I have to copy data into it , which is pretty sad.\r\nMaybe one day I can drop my Tensor",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=luchy0120",
                        "name": "luchy0120",
                        "key": "luchy0120",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10438",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10438",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10438",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10438"
                        },
                        "displayName": "Lu Qi ",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-08T05:09:40.322+0000",
                    "updated": "2017-11-08T05:10:45.320+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/comment/16243420",
                    "id": "16243420",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
                        "name": "pcmoritz",
                        "key": "pcmoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Philipp Moritz",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "That makes sense for now and I agree it's a little sad; for the future maybe you can get some insights from https://github.com/deeplearning4j/deeplearning4j on how to write the Tensor class in the \"right\" way; unfortunately Java doesn't really have a long tradition of scientific computing like Python has so there is no good standard Tensor classes like numpy.\r\n\r\nEdit: This is also an opportunity for Arrow, if we had a good Java tensor class it could be widely used because of the increasing importance of deep learning. Another project to look at is https://github.com/intel-analytics/BigDL. We also wrote our own in the past: https://github.com/amplab/SparkNet/blob/master/src/main/scala/libs/NDArray.scala and https://github.com/amplab/SparkNet/blob/master/src/main/java/libs/JavaNDArray.java to interop with Caffe and TensorFlow, but it might not be too useful for shared memory.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
                        "name": "pcmoritz",
                        "key": "pcmoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Philipp Moritz",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-08T05:55:09.874+0000",
                    "updated": "2017-11-08T05:59:04.274+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/comment/16245562",
                    "id": "16245562",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=luchy0120",
                        "name": "luchy0120",
                        "key": "luchy0120",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10438",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10438",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10438",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10438"
                        },
                        "displayName": "Lu Qi ",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I work for BigDL and we are looking for solutions to moving data from python to JAVA",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=luchy0120",
                        "name": "luchy0120",
                        "key": "luchy0120",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10438",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10438",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10438",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10438"
                        },
                        "displayName": "Lu Qi ",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-09T12:30:56.327+0000",
                    "updated": "2017-11-09T12:30:56.327+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/comment/16490324",
                    "id": "16490324",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
                        "name": "pcmoritz",
                        "key": "pcmoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Philipp Moritz",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 2065\n[https://github.com/apache/arrow/pull/2065]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
                        "name": "pcmoritz",
                        "key": "pcmoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Philipp Moritz",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-05-25T06:57:42.284+0000",
                    "updated": "2018-05-25T06:57:42.284+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13083372/comment/16573282",
                    "id": "16573282",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=agibsonccc",
                        "name": "agibsonccc",
                        "key": "agibsonccc",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Adam Gibson",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Hey folks - adam from deeplearning4j here. nd4j is likely the closest thing to a \"numpy\" on the jvm you are going to get.\r\n\r\nThis is on top of being able to directly read numpy and tensorflow arrays directly in memory with zero copy, this is on top of being able to work with\r\n\r\nmkl/cuda while also having a fairly friendly managed buffers story: [https://deeplearning4j.org/workspaces]\r\n\r\nApache tika and apache solr have not been afraid to work with us. I'd encourage folks to reach out to us in the future rather than just skimming and making some assumptions.\r\n\r\nWe'd be more than glad to engage the arrow community. We already have our own support for reading/writing apache arrow tensors:\r\n\r\n[https://github.com/deeplearning4j/deeplearning4j/tree/master/nd4j/nd4j-serde/nd4j-arrow]\r\n\r\nApache mahout also uses our underlying JNI stack javacpp: [https://github.com/apache/mahout/blob/master/viennacl-omp/pom.xml]\r\n\r\nWe've also based our ETL software for pre processing data based on arrow as well:\u00a0\r\n\r\nhttps://github.com/deeplearning4j/deeplearning4j/tree/master/datavec/datavec-local/src/main/java/org/datavec/local/transforms\r\n\r\nWe've done quite a few tricks with the javacpp tensorflow bindings as well to coax tensorflow graphs in to the nd4j environment for graph execution:\r\n\r\n[https://github.com/deeplearning4j/deeplearning4j/tree/master/nd4j/nd4j-tensorflow/src/main/java/org/nd4j/tensorflow/conversion]\r\n\r\nThere is some neat work we could do together here if folks are interested.\u00a0 There doesn't seem to be too much interest in making the java\r\n\r\nbindings work well with tensors (mainly because of the focus on python) but if there's anyone interested in making it work well, we'd be more than glad to support folks with such efforts.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=agibsonccc",
                        "name": "agibsonccc",
                        "key": "agibsonccc",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Adam Gibson",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2018-08-08T14:22:08.340+0000",
                    "updated": "2018-08-08T14:22:08.340+0000"
                }
            ],
            "maxResults": 8,
            "total": 8,
            "startAt": 0
        },
        "customfield_12311820": "0|i3gvov:",
        "customfield_12314139": null
    }
}