{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13442122",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442122",
    "key": "ARROW-16382",
    "fields": {
        "parent": {
            "id": "13442118",
            "key": "ARROW-16379",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13442118",
            "fields": {
                "summary": "[C++][Python] Change Memory Mapping to be off by default",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                    "description": "The issue is open and ready for the assignee to start work on it.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                    "name": "Open",
                    "id": "1",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                        "id": 2,
                        "key": "new",
                        "colorName": "blue-gray",
                        "name": "To Do"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alvinj15",
            "name": "alvinj15",
            "key": "JIRAUSER280323",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Alvin Chunga Mamani",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "aggregateprogress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16382/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 8,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442122/worklog/779751",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13342:\nURL: https://github.com/apache/arrow/pull/13342#issuecomment-1150592513\n\n   https://issues.apache.org/jira/browse/ARROW-16382\n\n\n",
                    "created": "2022-06-09T02:08:47.596+0000",
                    "updated": "2022-06-09T02:08:47.596+0000",
                    "started": "2022-06-09T02:08:47.596+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779751",
                    "issueId": "13442122"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442122/worklog/779752",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13342:\nURL: https://github.com/apache/arrow/pull/13342#issuecomment-1150592521\n\n   :warning: Ticket **has no components in JIRA**, make sure you assign one.\n\n\n",
                    "created": "2022-06-09T02:08:49.583+0000",
                    "updated": "2022-06-09T02:08:49.583+0000",
                    "started": "2022-06-09T02:08:49.583+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779752",
                    "issueId": "13442122"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442122/worklog/780275",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on code in PR #13342:\nURL: https://github.com/apache/arrow/pull/13342#discussion_r894378516\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -399,21 +399,23 @@ cdef class MessageReader(_Weakrefable):\n                         \"instead.\".format(self.__class__.__name__))\n \n     @staticmethod\n-    def open_stream(source):\n+    def open_stream(source, use_memory_map=False):\n\nReview Comment:\n   I think `user_memory_map` here is misleading for a user.\r\n   `source` can be a `PythonFile` or `NativeFile`, in such case the memory map option won't do anything. The option is only effective if the `source` is a string.\r\n   \r\n   Given that the user can pass a `MemoryMappedFile` if they want to explicitly use `memory_map`. I think we should remove the option and explicitly document to use `MemoryMappedFile` as the source if you want to use memory mapping.\n\n\n\n",
                    "created": "2022-06-10T10:19:33.323+0000",
                    "updated": "2022-06-10T10:19:33.323+0000",
                    "started": "2022-06-10T10:19:33.322+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "780275",
                    "issueId": "13442122"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442122/worklog/780276",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on code in PR #13342:\nURL: https://github.com/apache/arrow/pull/13342#discussion_r894379186\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -399,21 +399,23 @@ cdef class MessageReader(_Weakrefable):\n                         \"instead.\".format(self.__class__.__name__))\n \n     @staticmethod\n-    def open_stream(source):\n+    def open_stream(source, use_memory_map=False):\n\nReview Comment:\n   Same applies for the other cases where `_get_input_stream` is used and a `use_memory_map` option was added.\n\n\n\n",
                    "created": "2022-06-10T10:20:28.440+0000",
                    "updated": "2022-06-10T10:20:28.440+0000",
                    "started": "2022-06-10T10:20:28.439+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "780276",
                    "issueId": "13442122"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442122/worklog/781062",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on code in PR #13342:\nURL: https://github.com/apache/arrow/pull/13342#discussion_r896601428\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -792,10 +793,10 @@ cdef class _RecordBatchStreamReader(RecordBatchReader):\n         pass\n \n     def _open(self, source, IpcReadOptions options=IpcReadOptions(),\n-              MemoryPool memory_pool=None):\n+              MemoryPool memory_pool=None, use_memory_map=False):\n\nReview Comment:\n   Let's not change the signature of methods, here too one can pass a `MemoryMappedFile`.\r\n   \r\n   ```suggestion\r\n                 MemoryPool memory_pool=None):\r\n   ```\n\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -839,15 +840,15 @@ cdef class _RecordBatchFileReader(_Weakrefable):\n \n     def _open(self, source, footer_offset=None,\n               IpcReadOptions options=IpcReadOptions(),\n-              MemoryPool memory_pool=None):\n+              MemoryPool memory_pool=None, use_memory_map=False):\n\nReview Comment:\n   ```suggestion\r\n                 MemoryPool memory_pool=None):\r\n   ```\n\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -839,15 +840,15 @@ cdef class _RecordBatchFileReader(_Weakrefable):\n \n     def _open(self, source, footer_offset=None,\n               IpcReadOptions options=IpcReadOptions(),\n-              MemoryPool memory_pool=None):\n+              MemoryPool memory_pool=None, use_memory_map=False):\n         self.options = options.c_options\n         self.options.memory_pool = maybe_unbox_memory_pool(memory_pool)\n         try:\n             source = as_buffer(source)\n         except TypeError:\n             pass\n \n-        get_reader(source, True, &self.file)\n+        get_reader(source, use_memory_map, &self.file)\n\nReview Comment:\n   As previous cases it should support `MemoryMappedFile`\r\n   \r\n   ```suggestion\r\n           get_reader(source, False, &self.file)\r\n   ```\n\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -1075,6 +1076,8 @@ def read_schema(obj, DictionaryMemo dictionary_memo=None):\n     dictionary_memo : DictionaryMemo, optional\n         Needed to be able to reconstruct dictionary-encoded fields\n         with read_record_batch\n+    use_memory_map : boolean, default False\n+        Use memory mapping when opening file on disk\n\nReview Comment:\n   ```suggestion\r\n   ```\n\n\n\n##########\npython/pyarrow/ipc.py:\n##########\n@@ -44,11 +44,16 @@ class RecordBatchStreamReader(lib._RecordBatchStreamReader):\n         If None, default values will be used.\n     memory_pool : MemoryPool, default None\n         If None, default memory pool is used.\n+    use_memory_map : bool, default False\n+        If the source is a file path, use a memory map to read file, which can\n+        improve performance in some environments.\n\nReview Comment:\n   Let's add to the `source` parameter documentation that you are expected to use a `MemoryMappedFile` if you want to rely on memory mapping.\r\n   \r\n   ```suggestion\r\n   ```\n\n\n\n##########\npython/pyarrow/ipc.py:\n##########\n@@ -44,11 +44,16 @@ class RecordBatchStreamReader(lib._RecordBatchStreamReader):\n         If None, default values will be used.\n     memory_pool : MemoryPool, default None\n         If None, default memory pool is used.\n+    use_memory_map : bool, default False\n+        If the source is a file path, use a memory map to read file, which can\n+        improve performance in some environments.\n     \"\"\"\n \n-    def __init__(self, source, *, options=None, memory_pool=None):\n+    def __init__(self, source, *, options=None, memory_pool=None,\n+                 use_memory_map=False):\n         options = _ensure_default_ipc_read_options(options)\n-        self._open(source, options=options, memory_pool=memory_pool)\n+        self._open(source, options=options, memory_pool=memory_pool,\n+                   use_memory_map=use_memory_map)\n\nReview Comment:\n   ```suggestion\r\n           self._open(source, options=options, memory_pool=memory_pool)\r\n   ```\n\n\n\n##########\npython/pyarrow/ipc.py:\n##########\n@@ -100,13 +105,16 @@ class RecordBatchFileReader(lib._RecordBatchFileReader):\n         If None, default values will be used.\n     memory_pool : MemoryPool, default None\n         If None, default memory pool is used.\n+    use_memory_map : boolean, default False\n+        Use memory mapping when opening file on disk\n     \"\"\"\n \n     def __init__(self, source, footer_offset=None, *, options=None,\n-                 memory_pool=None):\n+                 memory_pool=None, use_memory_map=False):\n         options = _ensure_default_ipc_read_options(options)\n         self._open(source, footer_offset=footer_offset,\n-                   options=options, memory_pool=memory_pool)\n+                   options=options, memory_pool=memory_pool,\n+                   use_memory_map=use_memory_map)\n\nReview Comment:\n   ```suggestion\r\n                      options=options, memory_pool=memory_pool)\r\n   ```\n\n\n\n##########\npython/pyarrow/serialization.pxi:\n##########\n@@ -425,7 +425,7 @@ def serialize_to(object value, sink, SerializationContext context=None):\n     serialized.write_to(sink)\n \n \n-def read_serialized(source, base=None):\n+def read_serialized(source, base=None, use_memory_map=False):\n\nReview Comment:\n   ```suggestion\r\n   def read_serialized(source, base=None):\r\n   ```\n\n\n\n##########\npython/pyarrow/serialization.pxi:\n##########\n@@ -442,18 +442,20 @@ def read_serialized(source, base=None):\n     base : object\n         This object will be the base object of all the numpy arrays\n         contained in the sequence.\n+    use_memory_map : boolean, default False\n+        Use memory mapping when opening file on disk\n \n     Returns\n     -------\n     serialized : the serialized data\n     \"\"\"\n     _deprecate_serialization(\"read_serialized\")\n-    return _read_serialized(source, base=base)\n+    return _read_serialized(source, base=base, use_memory_map=use_memory_map)\n\nReview Comment:\n   ```suggestion\r\n       return _read_serialized(source, base=base)\r\n   ```\n\n\n\n##########\npython/pyarrow/serialization.pxi:\n##########\n@@ -485,14 +487,17 @@ def deserialize_from(source, object base, SerializationContext context=None):\n         contained in the sequence.\n     context : SerializationContext\n         Custom serialization and deserialization context.\n+    use_memory_map : boolean, default False\n+        Use memory mapping when opening file on disk\n \n     Returns\n     -------\n     object\n         Python object for the deserialized sequence.\n     \"\"\"\n     _deprecate_serialization(\"deserialize_from\")\n-    serialized = _read_serialized(source, base=base)\n+    serialized = _read_serialized(\n+        source, base=base, use_memory_map=use_memory_map)\n\nReview Comment:\n   ```suggestion\r\n       serialized = _read_serialized(source, base=base)\r\n   ```\n\n\n\n##########\npython/pyarrow/serialization.pxi:\n##########\n@@ -550,7 +555,8 @@ def deserialize(obj, SerializationContext context=None):\n     return _deserialize(obj, context=context)\n \n \n-def _deserialize(obj, SerializationContext context=None):\n+def _deserialize(obj, SerializationContext context=None, use_memory_map=False):\n\nReview Comment:\n   ```suggestion\r\n   def _deserialize(obj, SerializationContext context=None):\r\n   ```\n\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -399,21 +399,23 @@ cdef class MessageReader(_Weakrefable):\n                         \"instead.\".format(self.__class__.__name__))\n \n     @staticmethod\n-    def open_stream(source):\n+    def open_stream(source, use_memory_map=False):\n\nReview Comment:\n   ```suggestion\r\n       def open_stream(source):\r\n   ```\n\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -562,14 +564,14 @@ cdef class _RecordBatchStreamWriter(_CRecordBatchWriter):\n                                  self.options))\n \n \n-cdef _get_input_stream(object source, shared_ptr[CInputStream]* out):\n+cdef _get_input_stream(object source, shared_ptr[CInputStream]* out, use_memory_map=False):\n\nReview Comment:\n   ```suggestion\r\n   cdef _get_input_stream(object source, shared_ptr[CInputStream]* out):\r\n   ```\n\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -792,10 +793,10 @@ cdef class _RecordBatchStreamReader(RecordBatchReader):\n         pass\n \n     def _open(self, source, IpcReadOptions options=IpcReadOptions(),\n-              MemoryPool memory_pool=None):\n+              MemoryPool memory_pool=None, use_memory_map=False):\n         self.options = options.c_options\n         self.options.memory_pool = maybe_unbox_memory_pool(memory_pool)\n-        _get_input_stream(source, &self.in_stream)\n+        _get_input_stream(source, &self.in_stream, use_memory_map)\n\nReview Comment:\n   `_get_input_stream` has no `use_memory_map` argument\r\n   \r\n   ```suggestion\r\n           _get_input_stream(source, &self.in_stream)\r\n   ```\n\n\n\n##########\npython/pyarrow/ipc.py:\n##########\n@@ -44,11 +44,16 @@ class RecordBatchStreamReader(lib._RecordBatchStreamReader):\n         If None, default values will be used.\n     memory_pool : MemoryPool, default None\n         If None, default memory pool is used.\n+    use_memory_map : bool, default False\n+        If the source is a file path, use a memory map to read file, which can\n+        improve performance in some environments.\n     \"\"\"\n \n-    def __init__(self, source, *, options=None, memory_pool=None):\n+    def __init__(self, source, *, options=None, memory_pool=None,\n+                 use_memory_map=False):\n\nReview Comment:\n   ```suggestion\r\n       def __init__(self, source, *, options=None, memory_pool=None):\r\n   ```\n\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -1089,7 +1092,7 @@ def read_schema(obj, DictionaryMemo dictionary_memo=None):\n     if isinstance(obj, Message):\n         raise NotImplementedError(type(obj))\n \n-    get_reader(obj, True, &cpp_file)\n+    get_reader(obj, use_memory_map, &cpp_file)\n\nReview Comment:\n   ```suggestion\r\n       get_reader(obj, False, &cpp_file)\r\n   ```\n\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -1065,7 +1066,7 @@ def read_message(source):\n     return result\n \n \n-def read_schema(obj, DictionaryMemo dictionary_memo=None):\n+def read_schema(obj, DictionaryMemo dictionary_memo=None, use_memory_map=False):\n\nReview Comment:\n   ```suggestion\r\n   def read_schema(obj, DictionaryMemo dictionary_memo=None):\r\n   ```\r\n   \r\n   This is expected to work on `buffer` or `Message`, none of them can be memory_mapped\n\n\n\n##########\npython/pyarrow/ipc.py:\n##########\n@@ -100,13 +105,16 @@ class RecordBatchFileReader(lib._RecordBatchFileReader):\n         If None, default values will be used.\n     memory_pool : MemoryPool, default None\n         If None, default memory pool is used.\n+    use_memory_map : boolean, default False\n+        Use memory mapping when opening file on disk\n     \"\"\"\n \n     def __init__(self, source, footer_offset=None, *, options=None,\n-                 memory_pool=None):\n+                 memory_pool=None, use_memory_map=False):\n\nReview Comment:\n   ```suggestion\r\n                    memory_pool=None):\r\n   ```\n\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -562,14 +564,14 @@ cdef class _RecordBatchStreamWriter(_CRecordBatchWriter):\n                                  self.options))\n \n \n-cdef _get_input_stream(object source, shared_ptr[CInputStream]* out):\n+cdef _get_input_stream(object source, shared_ptr[CInputStream]* out, use_memory_map=False):\n     try:\n         source = as_buffer(source)\n     except TypeError:\n         # Non-buffer-like\n         pass\n \n-    get_input_stream(source, True, out)\n+    get_input_stream(source, use_memory_map, out)\n\nReview Comment:\n   ```suggestion\r\n       get_input_stream(source, False, out)\r\n   ```\n\n\n\n##########\npython/pyarrow/ipc.py:\n##########\n@@ -100,13 +105,16 @@ class RecordBatchFileReader(lib._RecordBatchFileReader):\n         If None, default values will be used.\n     memory_pool : MemoryPool, default None\n         If None, default memory pool is used.\n+    use_memory_map : boolean, default False\n+        Use memory mapping when opening file on disk\n\nReview Comment:\n   ```suggestion\r\n   ```\r\n   \r\n   As for previous cases, let's add to `source` documentation that it can be a `MemoryMappedFile`\n\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -399,21 +399,23 @@ cdef class MessageReader(_Weakrefable):\n                         \"instead.\".format(self.__class__.__name__))\n \n     @staticmethod\n-    def open_stream(source):\n+    def open_stream(source, use_memory_map=False):\n         \"\"\"\n         Open stream from source.\n \n         Parameters\n         ----------\n         source\n             A readable source, like an InputStream\n+        use_memory_map : boolean, default False\n+            Use memory mapping when opening file on disk\n\nReview Comment:\n   Let's add to the `source` docstring that you can pass `MemoryMappedFile` if you want to use memory mapping.\n\n\n\n##########\npython/pyarrow/serialization.pxi:\n##########\n@@ -442,18 +442,20 @@ def read_serialized(source, base=None):\n     base : object\n         This object will be the base object of all the numpy arrays\n         contained in the sequence.\n+    use_memory_map : boolean, default False\n+        Use memory mapping when opening file on disk\n \n     Returns\n     -------\n     serialized : the serialized data\n     \"\"\"\n     _deprecate_serialization(\"read_serialized\")\n-    return _read_serialized(source, base=base)\n+    return _read_serialized(source, base=base, use_memory_map=use_memory_map)\n \n \n-def _read_serialized(source, base=None):\n+def _read_serialized(source, base=None, use_memory_map=False):\n     cdef shared_ptr[CRandomAccessFile] stream\n-    get_reader(source, True, &stream)\n+    get_reader(source, use_memory_map, &stream)\n\nReview Comment:\n   ```suggestion\r\n       get_reader(source, False, &stream)\r\n   ```\n\n\n\n##########\npython/pyarrow/serialization.pxi:\n##########\n@@ -442,18 +442,20 @@ def read_serialized(source, base=None):\n     base : object\n         This object will be the base object of all the numpy arrays\n         contained in the sequence.\n+    use_memory_map : boolean, default False\n+        Use memory mapping when opening file on disk\n \n     Returns\n     -------\n     serialized : the serialized data\n     \"\"\"\n     _deprecate_serialization(\"read_serialized\")\n-    return _read_serialized(source, base=base)\n+    return _read_serialized(source, base=base, use_memory_map=use_memory_map)\n \n \n-def _read_serialized(source, base=None):\n+def _read_serialized(source, base=None, use_memory_map=False):\n\nReview Comment:\n   ```suggestion\r\n   def _read_serialized(source, base=None):\r\n   ```\n\n\n\n##########\npython/pyarrow/serialization.pxi:\n##########\n@@ -442,18 +442,20 @@ def read_serialized(source, base=None):\n     base : object\n         This object will be the base object of all the numpy arrays\n         contained in the sequence.\n+    use_memory_map : boolean, default False\n+        Use memory mapping when opening file on disk\n\nReview Comment:\n   ```suggestion\r\n   ```\n\n\n\n##########\npython/pyarrow/serialization.pxi:\n##########\n@@ -485,14 +487,17 @@ def deserialize_from(source, object base, SerializationContext context=None):\n         contained in the sequence.\n     context : SerializationContext\n         Custom serialization and deserialization context.\n+    use_memory_map : boolean, default False\n+        Use memory mapping when opening file on disk\n\nReview Comment:\n   ```suggestion\r\n   ```\n\n\n\n##########\npython/pyarrow/serialization.pxi:\n##########\n@@ -463,7 +465,7 @@ def _read_serialized(source, base=None):\n     return serialized\n \n \n-def deserialize_from(source, object base, SerializationContext context=None):\n+def deserialize_from(source, object base, SerializationContext context=None, use_memory_map=False):\n\nReview Comment:\n   ```suggestion\r\n   def deserialize_from(source, object base, SerializationContext context=None):\r\n   ```\n\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -399,21 +399,23 @@ cdef class MessageReader(_Weakrefable):\n                         \"instead.\".format(self.__class__.__name__))\n \n     @staticmethod\n-    def open_stream(source):\n+    def open_stream(source, use_memory_map=False):\n         \"\"\"\n         Open stream from source.\n \n         Parameters\n         ----------\n         source\n             A readable source, like an InputStream\n+        use_memory_map : boolean, default False\n+            Use memory mapping when opening file on disk\n\nReview Comment:\n   ```suggestion\r\n   ```\n\n\n\n##########\npython/pyarrow/ipc.pxi:\n##########\n@@ -399,21 +399,23 @@ cdef class MessageReader(_Weakrefable):\n                         \"instead.\".format(self.__class__.__name__))\n \n     @staticmethod\n-    def open_stream(source):\n+    def open_stream(source, use_memory_map=False):\n         \"\"\"\n         Open stream from source.\n \n         Parameters\n         ----------\n         source\n             A readable source, like an InputStream\n+        use_memory_map : boolean, default False\n+            Use memory mapping when opening file on disk\n         \"\"\"\n         cdef:\n             MessageReader result = MessageReader.__new__(MessageReader)\n             shared_ptr[CInputStream] in_stream\n             unique_ptr[CMessageReader] reader\n \n-        _get_input_stream(source, &in_stream)\n+        _get_input_stream(source, &in_stream, use_memory_map)\n\nReview Comment:\n   ```suggestion\r\n           _get_input_stream(source, &in_stream)\r\n   ```\n\n\n\n##########\npython/pyarrow/serialization.pxi:\n##########\n@@ -550,7 +555,8 @@ def deserialize(obj, SerializationContext context=None):\n     return _deserialize(obj, context=context)\n \n \n-def _deserialize(obj, SerializationContext context=None):\n+def _deserialize(obj, SerializationContext context=None, use_memory_map=False):\n     source = BufferReader(obj)\n-    serialized = _read_serialized(source, base=obj)\n+    serialized = _read_serialized(\n+        source, base=obj, use_memory_map=use_memory_map)\n\nReview Comment:\n   ```suggestion\r\n       serialized = _read_serialized(source, base=obj)\r\n   ```\n\n\n\n",
                    "created": "2022-06-14T09:55:44.347+0000",
                    "updated": "2022-06-14T09:55:44.347+0000",
                    "started": "2022-06-14T09:55:44.347+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "781062",
                    "issueId": "13442122"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442122/worklog/783037",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- merged PR #13342:\nURL: https://github.com/apache/arrow/pull/13342\n\n\n",
                    "created": "2022-06-20T15:39:45.753+0000",
                    "updated": "2022-06-20T15:39:45.753+0000",
                    "started": "2022-06-20T15:39:45.752+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "783037",
                    "issueId": "13442122"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442122/worklog/788455",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlvinJ15 commented on PR #13342:\nURL: https://github.com/apache/arrow/pull/13342#issuecomment-1176957627\n\n   @ursabot please benchmark\n\n\n",
                    "created": "2022-07-07T02:02:04.034+0000",
                    "updated": "2022-07-07T02:02:04.034+0000",
                    "started": "2022-07-07T02:02:04.034+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "788455",
                    "issueId": "13442122"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442122/worklog/788456",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on PR #13342:\nURL: https://github.com/apache/arrow/pull/13342#issuecomment-1176957707\n\n   Benchmark runs are scheduled for baseline = dc11d4394a51850e0039f9f30940a6a81d3385b7 and contender = 2185f221e1b941f032a546b1f77935665ba4e172. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Scheduled] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/210ff72fdcb1463a919e11e623348ae5...771a882c9b1a4ceca3a9ee6a6141dd3f/)\n   [Scheduled] [test-mac-arm](https://conbench.ursa.dev/compare/runs/b3c9886c7e824bada777f4fddcb41e82...3763506f894a4daa8d322087b4d9c06b/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/c026cdd927314ebc9069a29318f6f79a...eea651d4c0d140d1b722e4e38e61e08f/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/e9f99ef4e3ae4984bb1ad795f9b86d1a...d721d422e44041c4a45dc9254b23ad18/)\n   Buildkite builds:\n   [Scheduled] [`2185f221` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1063)\n   [Scheduled] [`2185f221` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1061)\n   [Scheduled] [`2185f221` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1046)\n   [Scheduled] [`2185f221` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1068)\n   [Finished] [`dc11d439` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/919)\n   [Finished] [`dc11d439` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/919)\n   [Finished] [`dc11d439` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/909)\n   [Finished] [`dc11d439` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/921)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python, R. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n",
                    "created": "2022-07-07T02:02:12.961+0000",
                    "updated": "2022-07-07T02:02:12.961+0000",
                    "started": "2022-07-07T02:02:12.961+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "788456",
                    "issueId": "13442122"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 4800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@65bc934c[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@28523ff9[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1bc8de6f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@225c9718[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@17f22e73[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@753b7770[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@28ddf41e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6e7f424a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@68787840[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@46d612c8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@16c7308[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@15950c7d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4800,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jun 20 15:39:46 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-06-20T15:39:46.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16382/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-04-27T15:45:37.000+0000",
        "updated": "2022-07-07T02:02:13.000+0000",
        "timeoriginalestimate": null,
        "description": "All read and writes in PyArrow should be done without memory mapping unless explicitly enabled",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Disable memory mapping by default in pyarrow",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442122/comment/17556430",
                    "id": "17556430",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
                        "name": "amol-",
                        "key": "amol-",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
                        },
                        "displayName": "Alessandro Molina",
                        "active": true,
                        "timeZone": "Europe/Rome"
                    },
                    "body": "Issue resolved by pull request 13342\n[https://github.com/apache/arrow/pull/13342]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
                        "name": "amol-",
                        "key": "amol-",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
                        },
                        "displayName": "Alessandro Molina",
                        "active": true,
                        "timeZone": "Europe/Rome"
                    },
                    "created": "2022-06-20T15:39:46.776+0000",
                    "updated": "2022-06-20T15:39:46.776+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z11vps:",
        "customfield_12314139": null
    }
}