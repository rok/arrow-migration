{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13263571",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263571",
    "key": "ARROW-6951",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "dataset",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12575635",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12575635",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "outwardIssue": {
                    "id": "13260363",
                    "key": "ARROW-6786",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13260363",
                    "fields": {
                        "summary": "[C++] arrow-dataset-file-parquet-test is slow",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
            "name": "fsaintjacques",
            "key": "fsaintjacques",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
            },
            "displayName": "Francois Saint-Jacques",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
            "name": "fsaintjacques",
            "key": "fsaintjacques",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
            },
            "displayName": "Francois Saint-Jacques",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6951/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 25,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263571/worklog/334191",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5735: ARROW-6951: [C++] Column projection in ParquetFragment\nURL: https://github.com/apache/arrow/pull/5735\n \n \n   Extract the indices of columns excluding those which need not be loaded (neither projected nor referenced by the filter expression) so that the parquet reader can avoid unnecessary IO.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-25T15:05:53.490+0000",
                    "updated": "2019-10-25T15:05:53.490+0000",
                    "started": "2019-10-25T15:05:53.490+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "334191",
                    "issueId": "13263571"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263571/worklog/334193",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #5735: ARROW-6951: [C++] Column projection in ParquetFragment\nURL: https://github.com/apache/arrow/pull/5735#issuecomment-546395747\n \n \n   https://issues.apache.org/jira/browse/ARROW-6951\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-25T15:16:44.650+0000",
                    "updated": "2019-10-25T15:16:44.650+0000",
                    "started": "2019-10-25T15:16:44.650+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "334193",
                    "issueId": "13263571"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263571/worklog/334239",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5735: ARROW-6951: [C++] Column projection in ParquetFragment\nURL: https://github.com/apache/arrow/pull/5735#discussion_r339106100\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -149,9 +150,22 @@ class ParquetScanTaskIterator {\n   static Status InferColumnProjection(const parquet::FileMetaData& metadata,\n                                       const std::shared_ptr<ScanOptions>& options,\n                                       std::vector<int>* out) {\n-    // TODO(fsaintjacques): Compute intersection _and_ validity\n-    *out = internal::Iota(metadata.num_columns());\n+    if (options->projector == nullptr || options->schema == nullptr) {\n+      *out = internal::Iota(metadata.num_columns());\n+      return Status::OK();\n+    }\n \n+    // union fields in expression and fields in projector\n+    auto projector_schema = options->projector->schema();\n+    auto filter_schema =\n+        SchemaFromColumnNames(options->schema, FieldsInExpression(options->filter));\n+    ARROW_ASSIGN_OR_RAISE(auto merged, MergeSchemas({projector_schema, filter_schema}));\n+\n+    // get column indices\n+    out->clear();\n+    for (const auto& field : merged->fields()) {\n+      out->push_back(options->schema->GetFieldIndex(field->name()));\n \n Review comment:\n   The options' schema is given by the user via ScannerBuilder, this is different from the parquet file's arrow::Schema from the metadata object. The metadata schema should be used since indices positions might be different. Add a unit test for this. It might be worth adding a method ParquetScanTaskIterator::schema. \r\n   \r\n   Even if we ignore missing/dropped/compatible-but-not-equal-types columns for now, we have to deal with the order. The parquet format thrift definition says that the RowGroup might have a subset of the columns, but the order should be preserved from the top-level FileMetadata's schema, assuming writers respect this invariant. This imply that the indices might change depending on the RowGroup, and we might have to break the multiples row-group per ScanTask.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-25T17:21:21.296+0000",
                    "updated": "2019-10-25T17:21:21.296+0000",
                    "started": "2019-10-25T17:21:21.295+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "334239",
                    "issueId": "13263571"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263571/worklog/334240",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5735: ARROW-6951: [C++] Column projection in ParquetFragment\nURL: https://github.com/apache/arrow/pull/5735#discussion_r339155983\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -149,9 +150,22 @@ class ParquetScanTaskIterator {\n   static Status InferColumnProjection(const parquet::FileMetaData& metadata,\n                                       const std::shared_ptr<ScanOptions>& options,\n                                       std::vector<int>* out) {\n-    // TODO(fsaintjacques): Compute intersection _and_ validity\n-    *out = internal::Iota(metadata.num_columns());\n+    if (options->projector == nullptr || options->schema == nullptr) {\n+      *out = internal::Iota(metadata.num_columns());\n+      return Status::OK();\n+    }\n \n+    // union fields in expression and fields in projector\n+    auto projector_schema = options->projector->schema();\n+    auto filter_schema =\n+        SchemaFromColumnNames(options->schema, FieldsInExpression(options->filter));\n \n Review comment:\n   I don't think we should \"merge\" the schema with validation, the validation is already done in layers above. This should only make sure that the referenced column names in the filter are found in `options->schema`, if not, append. to it.\r\n   \r\n   ```\r\n   std::vector<std::string> fields_in_schema = options->schema->field_names();\r\n   std::vector<std::string> fields_in_filter = FieldsInExpression(...);\r\n   \r\n   for (auto missing_field: set(fields_in_filter) - set(fields_in_schema)) {\r\n     fields_in_schema.append(missing_field);\r\n   }\r\n   \r\n   // Use fields_in_schema for the indices resolution loop.\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-25T17:21:21.320+0000",
                    "updated": "2019-10-25T17:21:21.320+0000",
                    "started": "2019-10-25T17:21:21.320+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "334240",
                    "issueId": "13263571"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263571/worklog/334241",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5735: ARROW-6951: [C++] Column projection in ParquetFragment\nURL: https://github.com/apache/arrow/pull/5735#discussion_r339110720\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet_test.cc\n ##########\n @@ -173,6 +174,41 @@ TEST_F(TestParquetFileFormat, ScanRecordBatchReader) {\n   ASSERT_EQ(row_count, kNumRows);\n }\n \n+TEST_F(TestParquetFileFormat, ScanRecordBatchReaderProjected) {\n+  schema_ = schema({field(\"f64\", float64()), field(\"i64\", int64()),\n+                    field(\"f32\", float32()), field(\"i32\", int32())});\n+\n+  opts_->schema = schema_;\n+  opts_->projector = std::make_shared<RecordBatchProjector>(\n+      default_memory_pool(), SchemaFromColumnNames(schema_, {\"f64\"}));\n+  opts_->filter = equal(field_ref(\"i32\"), scalar(3));\n+\n+  // NB: projector is applied by the scanner; ParquetFragment does not evaluate it so\n+  // we will not drop \"i32\" even though it is not in the projector's schema\n+  auto expected_schema = schema({field(\"f64\", float64()), field(\"i32\", int32())});\n+\n+  auto reader = GetRecordBatchReader();\n+  auto source = GetFileSource(reader.get());\n+  auto fragment = std::make_shared<ParquetFragment>(*source, opts_);\n+\n+  ScanTaskIterator it;\n+  ASSERT_OK(fragment->Scan(ctx_, &it));\n+  int64_t row_count = 0;\n+\n+  ASSERT_OK(\n \n Review comment:\n   We have the for-loop construct now, I think it's more readable.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-25T17:21:21.387+0000",
                    "updated": "2019-10-25T17:21:21.387+0000",
                    "started": "2019-10-25T17:21:21.387+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "334241",
                    "issueId": "13263571"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263571/worklog/334332",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5735: ARROW-6951: [C++] Column projection in ParquetFragment\nURL: https://github.com/apache/arrow/pull/5735#discussion_r339200372\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -149,9 +150,22 @@ class ParquetScanTaskIterator {\n   static Status InferColumnProjection(const parquet::FileMetaData& metadata,\n                                       const std::shared_ptr<ScanOptions>& options,\n                                       std::vector<int>* out) {\n-    // TODO(fsaintjacques): Compute intersection _and_ validity\n-    *out = internal::Iota(metadata.num_columns());\n+    if (options->projector == nullptr || options->schema == nullptr) {\n+      *out = internal::Iota(metadata.num_columns());\n+      return Status::OK();\n+    }\n \n+    // union fields in expression and fields in projector\n+    auto projector_schema = options->projector->schema();\n+    auto filter_schema =\n+        SchemaFromColumnNames(options->schema, FieldsInExpression(options->filter));\n+    ARROW_ASSIGN_OR_RAISE(auto merged, MergeSchemas({projector_schema, filter_schema}));\n+\n+    // get column indices\n+    out->clear();\n+    for (const auto& field : merged->fields()) {\n+      out->push_back(options->schema->GetFieldIndex(field->name()));\n \n Review comment:\n   Alright, I'll push projection inference down to row group level and use each row group's schema.\r\n   \r\n   Fields absent from the row group's schema will be added by the projector as a column of nulls. If they are referenced by the filter then that field will be null at predicate pushdown time and the simplified filter expression will not reference it anymore. I'll add tests for these\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-25T19:12:56.427+0000",
                    "updated": "2019-10-25T19:12:56.427+0000",
                    "started": "2019-10-25T19:12:56.426+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "334332",
                    "issueId": "13263571"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263571/worklog/334333",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5735: ARROW-6951: [C++] Column projection in ParquetFragment\nURL: https://github.com/apache/arrow/pull/5735#discussion_r339200613\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet_test.cc\n ##########\n @@ -173,6 +174,41 @@ TEST_F(TestParquetFileFormat, ScanRecordBatchReader) {\n   ASSERT_EQ(row_count, kNumRows);\n }\n \n+TEST_F(TestParquetFileFormat, ScanRecordBatchReaderProjected) {\n+  schema_ = schema({field(\"f64\", float64()), field(\"i64\", int64()),\n+                    field(\"f32\", float32()), field(\"i32\", int32())});\n+\n+  opts_->schema = schema_;\n+  opts_->projector = std::make_shared<RecordBatchProjector>(\n+      default_memory_pool(), SchemaFromColumnNames(schema_, {\"f64\"}));\n+  opts_->filter = equal(field_ref(\"i32\"), scalar(3));\n+\n+  // NB: projector is applied by the scanner; ParquetFragment does not evaluate it so\n+  // we will not drop \"i32\" even though it is not in the projector's schema\n+  auto expected_schema = schema({field(\"f64\", float64()), field(\"i32\", int32())});\n+\n+  auto reader = GetRecordBatchReader();\n+  auto source = GetFileSource(reader.get());\n+  auto fragment = std::make_shared<ParquetFragment>(*source, opts_);\n+\n+  ScanTaskIterator it;\n+  ASSERT_OK(fragment->Scan(ctx_, &it));\n+  int64_t row_count = 0;\n+\n+  ASSERT_OK(\n \n Review comment:\n   I'll rewrite the tests in this file to use for loops\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-25T19:13:38.692+0000",
                    "updated": "2019-10-25T19:13:38.692+0000",
                    "started": "2019-10-25T19:13:38.691+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "334333",
                    "issueId": "13263571"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263571/worklog/334334",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5735: ARROW-6951: [C++] Column projection in ParquetFragment\nURL: https://github.com/apache/arrow/pull/5735#discussion_r339203208\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -149,9 +150,22 @@ class ParquetScanTaskIterator {\n   static Status InferColumnProjection(const parquet::FileMetaData& metadata,\n                                       const std::shared_ptr<ScanOptions>& options,\n                                       std::vector<int>* out) {\n-    // TODO(fsaintjacques): Compute intersection _and_ validity\n-    *out = internal::Iota(metadata.num_columns());\n+    if (options->projector == nullptr || options->schema == nullptr) {\n+      *out = internal::Iota(metadata.num_columns());\n+      return Status::OK();\n+    }\n \n+    // union fields in expression and fields in projector\n+    auto projector_schema = options->projector->schema();\n+    auto filter_schema =\n+        SchemaFromColumnNames(options->schema, FieldsInExpression(options->filter));\n \n Review comment:\n   It seems you're asking for `MergeSchemas` to be inlined. I can do that but it seemed useful enough to be reused later. I don't think a redundant validation will hurt performance here\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-25T19:20:53.409+0000",
                    "updated": "2019-10-25T19:20:53.409+0000",
                    "started": "2019-10-25T19:20:53.409+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "334334",
                    "issueId": "13263571"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263571/worklog/334927",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5735: ARROW-6951: [C++] Column projection in ParquetFragment\nURL: https://github.com/apache/arrow/pull/5735#discussion_r339551693\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -149,9 +150,22 @@ class ParquetScanTaskIterator {\n   static Status InferColumnProjection(const parquet::FileMetaData& metadata,\n                                       const std::shared_ptr<ScanOptions>& options,\n                                       std::vector<int>* out) {\n-    // TODO(fsaintjacques): Compute intersection _and_ validity\n-    *out = internal::Iota(metadata.num_columns());\n+    if (options->projector == nullptr || options->schema == nullptr) {\n+      *out = internal::Iota(metadata.num_columns());\n+      return Status::OK();\n+    }\n \n+    // union fields in expression and fields in projector\n+    auto projector_schema = options->projector->schema();\n+    auto filter_schema =\n+        SchemaFromColumnNames(options->schema, FieldsInExpression(options->filter));\n+    ARROW_ASSIGN_OR_RAISE(auto merged, MergeSchemas({projector_schema, filter_schema}));\n+\n+    // get column indices\n+    out->clear();\n+    for (const auto& field : merged->fields()) {\n+      out->push_back(options->schema->GetFieldIndex(field->name()));\n \n Review comment:\n   Relying on the optimizer to elide the field is a brittle and false assumption to make, e.g. the following filter will almost always pass even if the column is missing `IF(RAND(1, 10000) < 2, missing_col > 2, true)`. We need to account (and not fail?) for this in the column selection.\r\n   \r\n   It make me realize that we sometimes have to inject a projector _before_ the filter. This will be part of the Schema normalization sub-project.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-28T13:07:33.812+0000",
                    "updated": "2019-10-28T13:07:33.812+0000",
                    "started": "2019-10-28T13:07:33.812+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "334927",
                    "issueId": "13263571"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263571/worklog/334928",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5735: ARROW-6951: [C++] Column projection in ParquetFragment\nURL: https://github.com/apache/arrow/pull/5735#discussion_r339551693\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -149,9 +150,22 @@ class ParquetScanTaskIterator {\n   static Status InferColumnProjection(const parquet::FileMetaData& metadata,\n                                       const std::shared_ptr<ScanOptions>& options,\n                                       std::vector<int>* out) {\n-    // TODO(fsaintjacques): Compute intersection _and_ validity\n-    *out = internal::Iota(metadata.num_columns());\n+    if (options->projector == nullptr || options->schema == nullptr) {\n+      *out = internal::Iota(metadata.num_columns());\n+      return Status::OK();\n+    }\n \n+    // union fields in expression and fields in projector\n+    auto projector_schema = options->projector->schema();\n+    auto filter_schema =\n+        SchemaFromColumnNames(options->schema, FieldsInExpression(options->filter));\n+    ARROW_ASSIGN_OR_RAISE(auto merged, MergeSchemas({projector_schema, filter_schema}));\n+\n+    // get column indices\n+    out->clear();\n+    for (const auto& field : merged->fields()) {\n+      out->push_back(options->schema->GetFieldIndex(field->name()));\n \n Review comment:\n   Relying on the optimizer to elide the field is a brittle and false assumption to make, e.g. the following filter will almost always pass even if the column is missing `IF(RAND(1, 10000) < 2, missing_col > 2, true)`. We need to account (and not fail?) for this in the column selection.\r\n   \r\n   It make me realize that we sometimes have to inject a projector _before_ the filter operator. This will be part of the Schema normalization sub-project.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-28T13:08:01.647+0000",
                    "updated": "2019-10-28T13:08:01.647+0000",
                    "started": "2019-10-28T13:08:01.646+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "334928",
                    "issueId": "13263571"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263571/worklog/334977",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5735: ARROW-6951: [C++] Column projection in ParquetFragment\nURL: https://github.com/apache/arrow/pull/5735#discussion_r339609719\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -149,9 +150,22 @@ class ParquetScanTaskIterator {\n   static Status InferColumnProjection(const parquet::FileMetaData& metadata,\n                                       const std::shared_ptr<ScanOptions>& options,\n                                       std::vector<int>* out) {\n-    // TODO(fsaintjacques): Compute intersection _and_ validity\n-    *out = internal::Iota(metadata.num_columns());\n+    if (options->projector == nullptr || options->schema == nullptr) {\n+      *out = internal::Iota(metadata.num_columns());\n+      return Status::OK();\n+    }\n \n+    // union fields in expression and fields in projector\n+    auto projector_schema = options->projector->schema();\n+    auto filter_schema =\n+        SchemaFromColumnNames(options->schema, FieldsInExpression(options->filter));\n+    ARROW_ASSIGN_OR_RAISE(auto merged, MergeSchemas({projector_schema, filter_schema}));\n+\n+    // get column indices\n+    out->clear();\n+    for (const auto& field : merged->fields()) {\n+      out->push_back(options->schema->GetFieldIndex(field->name()));\n \n Review comment:\n   I'm not sure how this is brittle; that case would simplify as follows:\r\n   ```\r\n   If(Rand(1, 10000) < 2, \"missing_col\"_ > 2, true)\r\n   If(Rand(1, 10000) < 2, null > 2, true)\r\n   If(Rand(1, 10000) < 2, null, true)\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-28T14:54:47.386+0000",
                    "updated": "2019-10-28T14:54:47.386+0000",
                    "started": "2019-10-28T14:54:47.386+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "334977",
                    "issueId": "13263571"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263571/worklog/335079",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5735: ARROW-6951: [C++] Column projection in ParquetFragment\nURL: https://github.com/apache/arrow/pull/5735#discussion_r339715393\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -149,9 +150,22 @@ class ParquetScanTaskIterator {\n   static Status InferColumnProjection(const parquet::FileMetaData& metadata,\n                                       const std::shared_ptr<ScanOptions>& options,\n                                       std::vector<int>* out) {\n-    // TODO(fsaintjacques): Compute intersection _and_ validity\n-    *out = internal::Iota(metadata.num_columns());\n+    if (options->projector == nullptr || options->schema == nullptr) {\n+      *out = internal::Iota(metadata.num_columns());\n+      return Status::OK();\n+    }\n \n+    // union fields in expression and fields in projector\n+    auto projector_schema = options->projector->schema();\n+    auto filter_schema =\n+        SchemaFromColumnNames(options->schema, FieldsInExpression(options->filter));\n+    ARROW_ASSIGN_OR_RAISE(auto merged, MergeSchemas({projector_schema, filter_schema}));\n \n Review comment:\n   This function tries to apply an optimization, if it can't it shouldn't error but simply fallback to the slow-path, e.g. `*out = internal::Iota(metadata.num_columns());`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-28T18:08:29.870+0000",
                    "updated": "2019-10-28T18:08:29.870+0000",
                    "started": "2019-10-28T18:08:29.870+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "335079",
                    "issueId": "13263571"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263571/worklog/336935",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5735: ARROW-6951: [C++][Dataset] Column projection in ParquetFragment\nURL: https://github.com/apache/arrow/pull/5735#discussion_r341266656\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -36,38 +37,91 @@ namespace dataset {\n /// \\brief A ScanTask backed by a parquet file and a subset of RowGroups.\n class ParquetScanTask : public ScanTask {\n  public:\n-  ParquetScanTask(std::vector<int> row_groups, std::vector<int> columns_projection,\n+  ParquetScanTask(std::vector<int> row_groups,\n                   std::shared_ptr<parquet::arrow::FileReader> reader,\n                   std::shared_ptr<ScanOptions> options,\n                   std::shared_ptr<ScanContext> context)\n-      : row_groups_(std::move(row_groups)),\n-        columns_projection_(std::move(columns_projection)),\n-        reader_(reader),\n-        options_(std::move(options)),\n-        context_(std::move(context)) {}\n+      : reader_(reader), options_(std::move(options)), context_(std::move(context)) {\n+    size_t i = 0;\n+    row_groups_ = MakeFunctionIterator([row_groups, i](int** out) mutable {\n+      if (i < row_groups.size()) {\n+        *out = &row_groups[i++];\n+      } else {\n+        *out = nullptr;\n+      }\n+      return Status::OK();\n+    });\n+  }\n \n   RecordBatchIterator Scan() {\n+    auto options = options_;\n+    auto reader = reader_;\n+    auto batches_it = MakeMaybeMapIterator(\n+        [reader, options](int* row_group, RecordBatchIterator* out) {\n+          return ScanRowGroup(*row_group, reader, options, out);\n+        },\n+        std::move(row_groups_));\n+    return MakeFlattenIterator(std::move(batches_it));\n+  }\n+\n+ private:\n+  static Status ScanRowGroup(int row_group,\n+                             const std::shared_ptr<parquet::arrow::FileReader>& reader,\n+                             const std::shared_ptr<ScanOptions>& options,\n+                             RecordBatchIterator* out) {\n+    auto metadata = reader->parquet_reader()->metadata()->RowGroup(row_group);\n+    std::vector<int> columns_projection;\n+    if (!InferColumnProjection(*metadata, options, &columns_projection).ok()) {\n+      // fall back to trivial projection\n+      columns_projection = internal::Iota(metadata->num_columns());\n \n Review comment:\n   I'd move the fallback into InferColumnProjection in order to distinguish from a real error (if any in the future).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-31T17:19:13.734+0000",
                    "updated": "2019-10-31T17:19:13.734+0000",
                    "started": "2019-10-31T17:19:13.733+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "336935",
                    "issueId": "13263571"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263571/worklog/336936",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5735: ARROW-6951: [C++][Dataset] Column projection in ParquetFragment\nURL: https://github.com/apache/arrow/pull/5735#discussion_r341255879\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet_test.cc\n ##########\n @@ -158,17 +170,91 @@ TEST_F(TestParquetFileFormat, ScanRecordBatchReader) {\n   auto source = GetFileSource(reader.get());\n   auto fragment = std::make_shared<ParquetFragment>(*source, opts_);\n \n-  ScanTaskIterator it;\n-  ASSERT_OK(fragment->Scan(ctx_, &it));\n+  ScanTaskIterator scan_task_it;\n+  ASSERT_OK(fragment->Scan(ctx_, &scan_task_it));\n   int64_t row_count = 0;\n \n-  ASSERT_OK(it.Visit([&row_count](std::unique_ptr<ScanTask> task) -> Status {\n-    auto batch_it = task->Scan();\n-    return batch_it.Visit([&row_count](std::shared_ptr<RecordBatch> batch) -> Status {\n+  for (auto maybe_task : scan_task_it) {\n+    ASSERT_OK_AND_ASSIGN(auto task, std::move(maybe_task));\n+    for (auto maybe_batch : task->Scan()) {\n+      ASSERT_OK_AND_ASSIGN(auto batch, std::move(maybe_batch));\n       row_count += batch->num_rows();\n-      return Status::OK();\n-    });\n-  }));\n+    }\n+  }\n+\n+  ASSERT_EQ(row_count, kNumRows);\n+}\n+\n+TEST_F(TestParquetFileFormat, ScanRecordBatchReaderProjected) {\n+  schema_ = schema({field(\"f64\", float64()), field(\"i64\", int64()),\n+                    field(\"f32\", float32()), field(\"i32\", int32())});\n+\n+  opts_->schema = schema_;\n \n Review comment:\n   The projector's schema should match the schema.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-31T17:19:13.738+0000",
                    "updated": "2019-10-31T17:19:13.738+0000",
                    "started": "2019-10-31T17:19:13.738+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "336936",
                    "issueId": "13263571"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263571/worklog/336937",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5735: ARROW-6951: [C++][Dataset] Column projection in ParquetFragment\nURL: https://github.com/apache/arrow/pull/5735#discussion_r341259285\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -36,38 +37,91 @@ namespace dataset {\n /// \\brief A ScanTask backed by a parquet file and a subset of RowGroups.\n class ParquetScanTask : public ScanTask {\n  public:\n-  ParquetScanTask(std::vector<int> row_groups, std::vector<int> columns_projection,\n+  ParquetScanTask(std::vector<int> row_groups,\n                   std::shared_ptr<parquet::arrow::FileReader> reader,\n                   std::shared_ptr<ScanOptions> options,\n                   std::shared_ptr<ScanContext> context)\n-      : row_groups_(std::move(row_groups)),\n-        columns_projection_(std::move(columns_projection)),\n-        reader_(reader),\n-        options_(std::move(options)),\n-        context_(std::move(context)) {}\n+      : reader_(reader), options_(std::move(options)), context_(std::move(context)) {\n+    size_t i = 0;\n+    row_groups_ = MakeFunctionIterator([row_groups, i](int** out) mutable {\n+      if (i < row_groups.size()) {\n+        *out = &row_groups[i++];\n+      } else {\n+        *out = nullptr;\n+      }\n+      return Status::OK();\n+    });\n+  }\n \n   RecordBatchIterator Scan() {\n+    auto options = options_;\n+    auto reader = reader_;\n+    auto batches_it = MakeMaybeMapIterator(\n+        [reader, options](int* row_group, RecordBatchIterator* out) {\n+          return ScanRowGroup(*row_group, reader, options, out);\n+        },\n+        std::move(row_groups_));\n+    return MakeFlattenIterator(std::move(batches_it));\n+  }\n+\n+ private:\n+  static Status ScanRowGroup(int row_group,\n+                             const std::shared_ptr<parquet::arrow::FileReader>& reader,\n+                             const std::shared_ptr<ScanOptions>& options,\n+                             RecordBatchIterator* out) {\n+    auto metadata = reader->parquet_reader()->metadata()->RowGroup(row_group);\n+    std::vector<int> columns_projection;\n+    if (!InferColumnProjection(*metadata, options, &columns_projection).ok()) {\n+      // fall back to trivial projection\n+      columns_projection = internal::Iota(metadata->num_columns());\n+    }\n+\n     // The construction of parquet's RecordBatchReader is deferred here to\n     // control the memory usage of consumers who materialize all ScanTasks\n     // before dispatching them, e.g. for scheduling purposes.\n     //\n     // Thus the memory incurred by the RecordBatchReader is allocated when\n     // Scan is called.\n     std::unique_ptr<RecordBatchReader> record_batch_reader;\n-    auto status = reader_->GetRecordBatchReader(row_groups_, columns_projection_,\n-                                                &record_batch_reader);\n-    // Propagate the previous error as an error iterator.\n-    if (!status.ok()) {\n-      return MakeErrorIterator<std::shared_ptr<RecordBatch>>(std::move(status));\n+    RETURN_NOT_OK(reader->GetRecordBatchReader({row_group}, columns_projection,\n+                                               &record_batch_reader));\n+    *out = MakePointerIterator(std::move(record_batch_reader));\n+    return Status::OK();\n+  }\n+\n+  // Compute the column projection out of an optional arrow::Schema\n+  static Status InferColumnProjection(const parquet::RowGroupMetaData& metadata,\n+                                      const std::shared_ptr<ScanOptions>& options,\n+                                      std::vector<int>* out) {\n+    if (options->projector == nullptr) {\n+      return Status::Invalid(\"no projector available\");\n     }\n \n-    return MakePointerIterator(std::move(record_batch_reader));\n+    // union fields in expression and fields in projector\n+    auto projector_schema = options->projector->schema();\n \n Review comment:\n   I don't understand the logic of mixing the projector's schema and the option's schema. Why can't it just use the option schema?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-31T17:19:13.763+0000",
                    "updated": "2019-10-31T17:19:13.763+0000",
                    "started": "2019-10-31T17:19:13.762+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "336937",
                    "issueId": "13263571"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263571/worklog/337017",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5735: ARROW-6951: [C++][Dataset] Column projection in ParquetFragment\nURL: https://github.com/apache/arrow/pull/5735#discussion_r341340183\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -36,38 +37,91 @@ namespace dataset {\n /// \\brief A ScanTask backed by a parquet file and a subset of RowGroups.\n class ParquetScanTask : public ScanTask {\n  public:\n-  ParquetScanTask(std::vector<int> row_groups, std::vector<int> columns_projection,\n+  ParquetScanTask(std::vector<int> row_groups,\n                   std::shared_ptr<parquet::arrow::FileReader> reader,\n                   std::shared_ptr<ScanOptions> options,\n                   std::shared_ptr<ScanContext> context)\n-      : row_groups_(std::move(row_groups)),\n-        columns_projection_(std::move(columns_projection)),\n-        reader_(reader),\n-        options_(std::move(options)),\n-        context_(std::move(context)) {}\n+      : reader_(reader), options_(std::move(options)), context_(std::move(context)) {\n+    size_t i = 0;\n+    row_groups_ = MakeFunctionIterator([row_groups, i](int** out) mutable {\n+      if (i < row_groups.size()) {\n+        *out = &row_groups[i++];\n+      } else {\n+        *out = nullptr;\n+      }\n+      return Status::OK();\n+    });\n+  }\n \n   RecordBatchIterator Scan() {\n+    auto options = options_;\n+    auto reader = reader_;\n+    auto batches_it = MakeMaybeMapIterator(\n+        [reader, options](int* row_group, RecordBatchIterator* out) {\n+          return ScanRowGroup(*row_group, reader, options, out);\n+        },\n+        std::move(row_groups_));\n+    return MakeFlattenIterator(std::move(batches_it));\n+  }\n+\n+ private:\n+  static Status ScanRowGroup(int row_group,\n+                             const std::shared_ptr<parquet::arrow::FileReader>& reader,\n+                             const std::shared_ptr<ScanOptions>& options,\n+                             RecordBatchIterator* out) {\n+    auto metadata = reader->parquet_reader()->metadata()->RowGroup(row_group);\n+    std::vector<int> columns_projection;\n+    if (!InferColumnProjection(*metadata, options, &columns_projection).ok()) {\n+      // fall back to trivial projection\n+      columns_projection = internal::Iota(metadata->num_columns());\n \n Review comment:\n   If column projection cannot be inferred (for whatever reason), shouldn't we always fall back to trivial projection? As you said, this is just an optimization\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-31T20:01:29.905+0000",
                    "updated": "2019-10-31T20:01:29.905+0000",
                    "started": "2019-10-31T20:01:29.905+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "337017",
                    "issueId": "13263571"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263571/worklog/337296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5735: ARROW-6951: [C++][Dataset] Column projection in ParquetFragment\nURL: https://github.com/apache/arrow/pull/5735#discussion_r341553229\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -36,38 +37,91 @@ namespace dataset {\n /// \\brief A ScanTask backed by a parquet file and a subset of RowGroups.\n class ParquetScanTask : public ScanTask {\n  public:\n-  ParquetScanTask(std::vector<int> row_groups, std::vector<int> columns_projection,\n+  ParquetScanTask(std::vector<int> row_groups,\n                   std::shared_ptr<parquet::arrow::FileReader> reader,\n                   std::shared_ptr<ScanOptions> options,\n                   std::shared_ptr<ScanContext> context)\n-      : row_groups_(std::move(row_groups)),\n-        columns_projection_(std::move(columns_projection)),\n-        reader_(reader),\n-        options_(std::move(options)),\n-        context_(std::move(context)) {}\n+      : reader_(reader), options_(std::move(options)), context_(std::move(context)) {\n+    size_t i = 0;\n+    row_groups_ = MakeFunctionIterator([row_groups, i](int** out) mutable {\n+      if (i < row_groups.size()) {\n+        *out = &row_groups[i++];\n+      } else {\n+        *out = nullptr;\n+      }\n+      return Status::OK();\n+    });\n+  }\n \n   RecordBatchIterator Scan() {\n+    auto options = options_;\n+    auto reader = reader_;\n+    auto batches_it = MakeMaybeMapIterator(\n+        [reader, options](int* row_group, RecordBatchIterator* out) {\n+          return ScanRowGroup(*row_group, reader, options, out);\n+        },\n+        std::move(row_groups_));\n+    return MakeFlattenIterator(std::move(batches_it));\n+  }\n+\n+ private:\n+  static Status ScanRowGroup(int row_group,\n+                             const std::shared_ptr<parquet::arrow::FileReader>& reader,\n+                             const std::shared_ptr<ScanOptions>& options,\n+                             RecordBatchIterator* out) {\n+    auto metadata = reader->parquet_reader()->metadata()->RowGroup(row_group);\n+    std::vector<int> columns_projection;\n+    if (!InferColumnProjection(*metadata, options, &columns_projection).ok()) {\n+      // fall back to trivial projection\n+      columns_projection = internal::Iota(metadata->num_columns());\n+    }\n+\n     // The construction of parquet's RecordBatchReader is deferred here to\n     // control the memory usage of consumers who materialize all ScanTasks\n     // before dispatching them, e.g. for scheduling purposes.\n     //\n     // Thus the memory incurred by the RecordBatchReader is allocated when\n     // Scan is called.\n     std::unique_ptr<RecordBatchReader> record_batch_reader;\n-    auto status = reader_->GetRecordBatchReader(row_groups_, columns_projection_,\n-                                                &record_batch_reader);\n-    // Propagate the previous error as an error iterator.\n-    if (!status.ok()) {\n-      return MakeErrorIterator<std::shared_ptr<RecordBatch>>(std::move(status));\n+    RETURN_NOT_OK(reader->GetRecordBatchReader({row_group}, columns_projection,\n+                                               &record_batch_reader));\n+    *out = MakePointerIterator(std::move(record_batch_reader));\n+    return Status::OK();\n+  }\n+\n+  // Compute the column projection out of an optional arrow::Schema\n+  static Status InferColumnProjection(const parquet::RowGroupMetaData& metadata,\n+                                      const std::shared_ptr<ScanOptions>& options,\n+                                      std::vector<int>* out) {\n+    if (options->projector == nullptr) {\n+      return Status::Invalid(\"no projector available\");\n     }\n \n-    return MakePointerIterator(std::move(record_batch_reader));\n+    // union fields in expression and fields in projector\n+    auto projector_schema = options->projector->schema();\n+    auto filter_schema =\n+        SchemaFromColumnNames(options->schema, FieldsInExpression(options->filter));\n+    ARROW_ASSIGN_OR_RAISE(auto merged, MergeSchemas({projector_schema, filter_schema}));\n+\n+    std::shared_ptr<Schema> row_group_schema;\n+    RETURN_NOT_OK(parquet::arrow::FromParquetSchema(\n+        metadata.schema(), parquet::default_arrow_reader_properties(),\n+        &row_group_schema));\n+\n+    // get column indices relative to row_group_schema\n+    out->clear();\n+    for (const auto& field : merged->fields()) {\n+      auto field_index = row_group_schema->GetFieldIndex(field->name());\n \n Review comment:\n   I'm kinda realizing that the column_indices expected by the parquet::arrow::FileReader are leaves indices. This works works in our example because we don't use nested data, but will quickly collapse. I think it's worth a followup ticket.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-01T12:30:11.849+0000",
                    "updated": "2019-11-01T12:30:11.849+0000",
                    "started": "2019-11-01T12:30:11.849+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "337296",
                    "issueId": "13263571"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263571/worklog/338415",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #5735: ARROW-6951: [C++][Dataset] Column projection in ParquetFragment\nURL: https://github.com/apache/arrow/pull/5735#issuecomment-549600732\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/5735?src=pr&el=h1) Report\n   > Merging [#5735](https://codecov.io/gh/apache/arrow/pull/5735?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/b07f5cd73beae575f9a4389e476db6262b3aae72?src=pr&el=desc) will **increase** coverage by `0.5%`.\n   > The diff coverage is `69.09%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/5735/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/5735?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #5735      +/-   ##\n   ==========================================\n   + Coverage   88.98%   89.49%    +0.5%     \n   ==========================================\n     Files        1004      813     -191     \n     Lines      137359   122031   -15328     \n     Branches     1501        0    -1501     \n   ==========================================\n   - Hits       122230   109208   -13022     \n   + Misses      14764    12823    -1941     \n   + Partials      365        0     -365\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/5735?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/parquet/arrow/reader.h](https://codecov.io/gh/apache/arrow/pull/5735/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Fycm93L3JlYWRlci5o) | `63.15% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/type.h](https://codecov.io/gh/apache/arrow/pull/5735/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90eXBlLmg=) | `93.11% <\u00f8> (-0.04%)` | :arrow_down: |\n   | [cpp/src/parquet/arrow/reader\\_internal.h](https://codecov.io/gh/apache/arrow/pull/5735/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Fycm93L3JlYWRlcl9pbnRlcm5hbC5o) | `100% <\u00f8> (+6.97%)` | :arrow_up: |\n   | [cpp/src/arrow/dataset/file\\_parquet.h](https://codecov.io/gh/apache/arrow/pull/5735/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9kYXRhc2V0L2ZpbGVfcGFycXVldC5o) | `50% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/arrow/reader\\_internal.cc](https://codecov.io/gh/apache/arrow/pull/5735/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Fycm93L3JlYWRlcl9pbnRlcm5hbC5jYw==) | `85.54% <1.85%> (-6.65%)` | :arrow_down: |\n   | [cpp/src/arrow/dataset/file\\_parquet\\_test.cc](https://codecov.io/gh/apache/arrow/pull/5735/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9kYXRhc2V0L2ZpbGVfcGFycXVldF90ZXN0LmNj) | `96.66% <100%> (+3.01%)` | :arrow_up: |\n   | [cpp/src/arrow/dataset/scanner\\_test.cc](https://codecov.io/gh/apache/arrow/pull/5735/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9kYXRhc2V0L3NjYW5uZXJfdGVzdC5jYw==) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/arrow/writer.cc](https://codecov.io/gh/apache/arrow/pull/5735/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Fycm93L3dyaXRlci5jYw==) | `94.9% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/dataset/dataset\\_internal.h](https://codecov.io/gh/apache/arrow/pull/5735/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9kYXRhc2V0L2RhdGFzZXRfaW50ZXJuYWwuaA==) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/dataset/scanner.cc](https://codecov.io/gh/apache/arrow/pull/5735/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9kYXRhc2V0L3NjYW5uZXIuY2M=) | `96.59% <100%> (-0.08%)` | :arrow_down: |\n   | ... and [207 more](https://codecov.io/gh/apache/arrow/pull/5735/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/5735?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/5735?src=pr&el=footer). Last update [b07f5cd...97c3d4d](https://codecov.io/gh/apache/arrow/pull/5735?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-04T23:55:23.700+0000",
                    "updated": "2019-11-04T23:55:23.700+0000",
                    "started": "2019-11-04T23:55:23.699+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338415",
                    "issueId": "13263571"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263571/worklog/340100",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5735: ARROW-6951: [C++][Dataset] Column projection in ParquetFragment\nURL: https://github.com/apache/arrow/pull/5735#discussion_r343818965\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -149,8 +172,45 @@ class ParquetScanTaskIterator {\n   static Status InferColumnProjection(const parquet::FileMetaData& metadata,\n                                       const std::shared_ptr<ScanOptions>& options,\n                                       std::vector<int>* out) {\n-    // TODO(fsaintjacques): Compute intersection _and_ validity\n-    *out = internal::Iota(metadata.num_columns());\n+    // fall back to no push down projection\n \n Review comment:\n   I retract my previous comments, let's just return `std::vector<int>`. It'll simplify the function.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-07T19:22:11.405+0000",
                    "updated": "2019-11-07T19:22:11.405+0000",
                    "started": "2019-11-07T19:22:11.404+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "340100",
                    "issueId": "13263571"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263571/worklog/340101",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5735: ARROW-6951: [C++][Dataset] Column projection in ParquetFragment\nURL: https://github.com/apache/arrow/pull/5735#discussion_r343826082\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -149,8 +172,45 @@ class ParquetScanTaskIterator {\n   static Status InferColumnProjection(const parquet::FileMetaData& metadata,\n                                       const std::shared_ptr<ScanOptions>& options,\n                                       std::vector<int>* out) {\n-    // TODO(fsaintjacques): Compute intersection _and_ validity\n-    *out = internal::Iota(metadata.num_columns());\n+    // fall back to no push down projection\n+    auto fall_back = [&] {\n+      *out = internal::Iota(metadata.num_columns());\n+      return Status::OK();\n+    };\n+\n+    if (options->projector == nullptr) return fall_back();\n+\n+    // get column indices\n+    out->clear();\n+    auto filter_fields = FieldsInExpression(options->filter);\n+\n+    SchemaManifest manifest;\n+    if (!SchemaManifest::Make(metadata.schema(), nullptr,\n+                              parquet::default_arrow_reader_properties(), &manifest)\n+             .ok())\n+      return fall_back();\n+\n+    for (const auto& schema_field : manifest.schema_fields) {\n+      auto field = schema_field.field;\n+      auto parquet_column_index = schema_field.column_index;\n+\n+      // Ignore nested fields.\n+      if (field->type()->num_children() != 0 || parquet_column_index == -1) {\n \n Review comment:\n   The goal of using SchemaManifest is that we can project nested fields.\r\n   \r\n   ```\r\n   auto is_referenced = [] (const string& field_name) { ... };\r\n   std::vector<int> parquet_column_indices;\r\n   for (const auto& schema_field : manifest.schema_fields) {\r\n     if (is_referenced(schema_field.field()->name()) {\r\n       // The following function recurse a SchemaField's children if !is_leaf() or else it push_back column_index.\r\n       AddColumnIndices(schema_field, &parquet_column_indices);\r\n     }\r\n   }\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-07T19:22:11.407+0000",
                    "updated": "2019-11-07T19:22:11.407+0000",
                    "started": "2019-11-07T19:22:11.407+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "340101",
                    "issueId": "13263571"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 12600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@33a399bf[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4ea151c9[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@a55a574[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4e3e92ee[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@40a17171[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4045e383[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@679c90fa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5d8fc705[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@166e1f3c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7958af89[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a40eb18[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@59d4acba[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12600,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Nov 09 05:55:08 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-11-09T05:55:08.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6951/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-10-21T14:43:02.000+0000",
        "updated": "2020-04-10T15:32:59.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Dataset] Ensure column projection is passed to ParquetDataFragment",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263571/comment/16970729",
                    "id": "16970729",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 5735\n[https://github.com/apache/arrow/pull/5735]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2019-11-09T05:55:08.308+0000",
                    "updated": "2019-11-09T05:55:08.308+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z07ss8:",
        "customfield_12314139": null
    }
}