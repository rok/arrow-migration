{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13390776",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776",
    "key": "ARROW-13390",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "kernel",
            "pull-request-available",
            "types"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12622663",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12622663",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13399868",
                    "key": "ARROW-13931",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399868",
                    "fields": {
                        "summary": "[C++] Coalesce kernel missing support for list/struct types",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            },
            {
                "id": "12619561",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12619561",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13384941",
                    "key": "ARROW-13136",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384941",
                    "fields": {
                        "summary": "[C++] Add a \"coalesce\" variadic scalar kernel",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12623823",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12623823",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13400118",
                    "key": "ARROW-13946",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400118",
                    "fields": {
                        "summary": "[C++] choose kernel missing support for list/struct types",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            },
            {
                "id": "12623851",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12623851",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13400129",
                    "key": "ARROW-13951",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400129",
                    "fields": {
                        "summary": "[C++] replace_with_mask support missing for list/fixed_size_list/large_list/struct",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            },
            {
                "id": "12623512",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12623512",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13402989",
                    "key": "ARROW-14105",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402989",
                    "fields": {
                        "summary": "[C++] Reconcile type promotion rules between if_else, case_when, coalesce, select",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12619563",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12619563",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13390078",
                    "key": "ARROW-13358",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390078",
                    "fields": {
                        "summary": "[C++] Extend type support for if_else kernel",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12623825",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12623825",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13404067",
                    "key": "ARROW-14167",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404067",
                    "fields": {
                        "summary": "[C++] Support dictionaries directly in coalesce kernel",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12623840",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12623840",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13404093",
                    "key": "ARROW-14172",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13404093",
                    "fields": {
                        "summary": "[C++] Improve type support for 'replace_with_mask' kernel",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13390/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 20,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/worklog/646440",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11080:\nURL: https://github.com/apache/arrow/pull/11080#issuecomment-912754192\n\n\n   https://issues.apache.org/jira/browse/ARROW-13390\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-03T19:13:31.052+0000",
                    "updated": "2021-09-03T19:13:31.052+0000",
                    "started": "2021-09-03T19:13:31.052+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "646440",
                    "issueId": "13390776"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/worklog/647520",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11080:\nURL: https://github.com/apache/arrow/pull/11080#issuecomment-914538318\n\n\n   Converting to draft while I work out the Windows CI issues.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-07T18:42:12.891+0000",
                    "updated": "2021-09-07T18:42:12.891+0000",
                    "started": "2021-09-07T18:42:12.890+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "647520",
                    "issueId": "13390776"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/worklog/649028",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11080:\nURL: https://github.com/apache/arrow/pull/11080#discussion_r705892680\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -1988,6 +1988,65 @@ Status ExecBinaryCoalesce(KernelContext* ctx, Datum left, Datum right, int64_t l\n   return Status::OK();\n }\n \n+template <typename AppendScalar>\n+static Status ExecVarWidthCoalesceImpl(KernelContext* ctx, const ExecBatch& batch,\n+                                       Datum* out,\n+                                       std::function<Status(ArrayBuilder*)> reserve_data,\n+                                       AppendScalar append_scalar) {\n+  // Special case: grab any leading non-null scalar or array arguments\n+  for (const auto& datum : batch.values) {\n+    if (datum.is_scalar()) {\n+      if (!datum.scalar()->is_valid) continue;\n+      ARROW_ASSIGN_OR_RAISE(\n+          *out, MakeArrayFromScalar(*datum.scalar(), batch.length, ctx->memory_pool()));\n+      return Status::OK();\n+    } else if (datum.is_array() && !datum.array()->MayHaveNulls()) {\n+      *out = datum;\n+      return Status::OK();\n+    }\n+    break;\n\nReview comment:\n       The loop iterates for Scalars but not for Arrays?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-10T04:45:57.148+0000",
                    "updated": "2021-09-10T04:45:57.148+0000",
                    "started": "2021-09-10T04:45:57.147+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "649028",
                    "issueId": "13390776"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/worklog/649029",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11080:\nURL: https://github.com/apache/arrow/pull/11080#discussion_r705892971\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -1988,6 +1988,65 @@ Status ExecBinaryCoalesce(KernelContext* ctx, Datum left, Datum right, int64_t l\n   return Status::OK();\n }\n \n+template <typename AppendScalar>\n+static Status ExecVarWidthCoalesceImpl(KernelContext* ctx, const ExecBatch& batch,\n+                                       Datum* out,\n+                                       std::function<Status(ArrayBuilder*)> reserve_data,\n+                                       AppendScalar append_scalar) {\n+  // Special case: grab any leading non-null scalar or array arguments\n+  for (const auto& datum : batch.values) {\n+    if (datum.is_scalar()) {\n+      if (!datum.scalar()->is_valid) continue;\n+      ARROW_ASSIGN_OR_RAISE(\n+          *out, MakeArrayFromScalar(*datum.scalar(), batch.length, ctx->memory_pool()));\n+      return Status::OK();\n+    } else if (datum.is_array() && !datum.array()->MayHaveNulls()) {\n+      *out = datum;\n+      return Status::OK();\n+    }\n+    break;\n+  }\n+  ArrayData* output = out->mutable_array();\n+  std::unique_ptr<ArrayBuilder> raw_builder;\n+  RETURN_NOT_OK(MakeBuilder(ctx->memory_pool(), out->type(), &raw_builder));\n+  RETURN_NOT_OK(raw_builder->Reserve(batch.length));\n+  RETURN_NOT_OK(reserve_data(raw_builder.get()));\n+\n+  for (int64_t i = 0; i < batch.length; i++) {\n+    bool set = false;\n+    for (const auto& datum : batch.values) {\n+      if (datum.is_scalar()) {\n+        if (datum.scalar()->is_valid) {\n+          RETURN_NOT_OK(append_scalar(raw_builder.get(), *datum.scalar()));\n+          set = true;\n+          break;\n+        }\n+      } else {\n+        const ArrayData& source = *datum.array();\n\nReview comment:\n       Nit: In the first loop, you check for `datum.is_array()` but not here.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-10T04:46:50.476+0000",
                    "updated": "2021-09-10T04:46:50.476+0000",
                    "started": "2021-09-10T04:46:50.475+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "649029",
                    "issueId": "13390776"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/worklog/649188",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11080:\nURL: https://github.com/apache/arrow/pull/11080#discussion_r706137934\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -1988,6 +1988,65 @@ Status ExecBinaryCoalesce(KernelContext* ctx, Datum left, Datum right, int64_t l\n   return Status::OK();\n }\n \n+template <typename AppendScalar>\n+static Status ExecVarWidthCoalesceImpl(KernelContext* ctx, const ExecBatch& batch,\n+                                       Datum* out,\n+                                       std::function<Status(ArrayBuilder*)> reserve_data,\n+                                       AppendScalar append_scalar) {\n+  // Special case: grab any leading non-null scalar or array arguments\n+  for (const auto& datum : batch.values) {\n+    if (datum.is_scalar()) {\n+      if (!datum.scalar()->is_valid) continue;\n+      ARROW_ASSIGN_OR_RAISE(\n+          *out, MakeArrayFromScalar(*datum.scalar(), batch.length, ctx->memory_pool()));\n+      return Status::OK();\n+    } else if (datum.is_array() && !datum.array()->MayHaveNulls()) {\n+      *out = datum;\n+      return Status::OK();\n+    }\n+    break;\n\nReview comment:\n       Note the stated purpose of the loop. This is to optimize a special case where we have 0 or more all-null arguments followed by an all-non-null argument.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -1988,6 +1988,65 @@ Status ExecBinaryCoalesce(KernelContext* ctx, Datum left, Datum right, int64_t l\n   return Status::OK();\n }\n \n+template <typename AppendScalar>\n+static Status ExecVarWidthCoalesceImpl(KernelContext* ctx, const ExecBatch& batch,\n+                                       Datum* out,\n+                                       std::function<Status(ArrayBuilder*)> reserve_data,\n+                                       AppendScalar append_scalar) {\n+  // Special case: grab any leading non-null scalar or array arguments\n+  for (const auto& datum : batch.values) {\n+    if (datum.is_scalar()) {\n+      if (!datum.scalar()->is_valid) continue;\n+      ARROW_ASSIGN_OR_RAISE(\n+          *out, MakeArrayFromScalar(*datum.scalar(), batch.length, ctx->memory_pool()));\n+      return Status::OK();\n+    } else if (datum.is_array() && !datum.array()->MayHaveNulls()) {\n+      *out = datum;\n+      return Status::OK();\n+    }\n+    break;\n+  }\n+  ArrayData* output = out->mutable_array();\n+  std::unique_ptr<ArrayBuilder> raw_builder;\n+  RETURN_NOT_OK(MakeBuilder(ctx->memory_pool(), out->type(), &raw_builder));\n+  RETURN_NOT_OK(raw_builder->Reserve(batch.length));\n+  RETURN_NOT_OK(reserve_data(raw_builder.get()));\n+\n+  for (int64_t i = 0; i < batch.length; i++) {\n+    bool set = false;\n+    for (const auto& datum : batch.values) {\n+      if (datum.is_scalar()) {\n+        if (datum.scalar()->is_valid) {\n+          RETURN_NOT_OK(append_scalar(raw_builder.get(), *datum.scalar()));\n+          set = true;\n+          break;\n+        }\n+      } else {\n+        const ArrayData& source = *datum.array();\n\nReview comment:\n       The check above is not just for array. Here there is no need since we know it is either an array or a scalar.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-10T12:26:10.995+0000",
                    "updated": "2021-09-10T12:26:10.995+0000",
                    "started": "2021-09-10T12:26:10.995+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "649188",
                    "issueId": "13390776"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/worklog/651761",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11080:\nURL: https://github.com/apache/arrow/pull/11080#discussion_r710192494\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -2063,51 +2122,173 @@ struct CoalesceFunctor<Type, enable_if_base_binary<Type>> {\n   }\n \n   static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n-    // Special case: grab any leading non-null scalar or array arguments\n+    return ExecVarWidthCoalesceImpl(\n+        ctx, batch, out,\n+        [&](ArrayBuilder* builder) {\n+          int64_t reservation = 0;\n+          for (const auto& datum : batch.values) {\n+            if (datum.is_array()) {\n+              const ArrayType array(datum.array());\n+              reservation = std::max<int64_t>(reservation, array.total_values_length());\n+            } else {\n+              const auto& scalar = *datum.scalar();\n+              if (scalar.is_valid) {\n+                const int64_t size = UnboxScalar<Type>::Unbox(scalar).size();\n+                reservation = std::max<int64_t>(reservation, batch.length * size);\n+              }\n+            }\n+          }\n+          return checked_cast<BuilderType*>(builder)->ReserveData(reservation);\n+        },\n+        [&](ArrayBuilder* builder, const Scalar& scalar) {\n+          return checked_cast<BuilderType*>(builder)->Append(\n+              UnboxScalar<Type>::Unbox(scalar));\n+        });\n+  }\n+};\n+\n+template <>\n+struct CoalesceFunctor<FixedSizeListType> {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n     for (const auto& datum : batch.values) {\n-      if (datum.is_scalar()) {\n-        if (!datum.scalar()->is_valid) continue;\n-        ARROW_ASSIGN_OR_RAISE(\n-            *out, MakeArrayFromScalar(*datum.scalar(), batch.length, ctx->memory_pool()));\n-        return Status::OK();\n-      } else if (datum.is_array() && !datum.array()->MayHaveNulls()) {\n-        *out = datum;\n-        return Status::OK();\n+      if (datum.is_array()) {\n+        return ExecArray(ctx, batch, out);\n+      }\n+    }\n+    return ExecScalarCoalesce(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::function<Status(ArrayBuilder*)> reserve_data = ReserveNoData;\n+    return ExecVarWidthCoalesce(ctx, batch, out, reserve_data);\n+  }\n+};\n+\n+template <typename Type>\n+struct CoalesceFunctor<Type, enable_if_var_size_list<Type>> {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    for (const auto& datum : batch.values) {\n+      if (datum.is_array()) {\n+        return ExecArray(ctx, batch, out);\n       }\n-      break;\n     }\n+    return ExecScalarCoalesce(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::function<Status(ArrayBuilder*)> reserve_data = ReserveNoData;\n+    return ExecVarWidthCoalesce(ctx, batch, out, reserve_data);\n+  }\n+};\n+\n+template <>\n+struct CoalesceFunctor<MapType> {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    for (const auto& datum : batch.values) {\n+      if (datum.is_array()) {\n+        return ExecArray(ctx, batch, out);\n+      }\n+    }\n+    return ExecScalarCoalesce(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::function<Status(ArrayBuilder*)> reserve_data = ReserveNoData;\n+    return ExecVarWidthCoalesce(ctx, batch, out, reserve_data);\n+  }\n+};\n+\n+template <>\n+struct CoalesceFunctor<StructType> {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    for (const auto& datum : batch.values) {\n+      if (datum.is_array()) {\n+        return ExecArray(ctx, batch, out);\n+      }\n+    }\n+    return ExecScalarCoalesce(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::function<Status(ArrayBuilder*)> reserve_data = ReserveNoData;\n+    return ExecVarWidthCoalesce(ctx, batch, out, reserve_data);\n+  }\n+};\n+\n+template <typename Type>\n+struct CoalesceFunctor<Type, enable_if_union<Type>> {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    // Unions don't have top-level nulls, so a specialized implementation is needed\n+    for (const auto& datum : batch.values) {\n+      if (datum.is_array()) {\n+        return ExecArray(ctx, batch, out);\n+      }\n+    }\n+    return ExecScalar(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n     ArrayData* output = out->mutable_array();\n-    BuilderType builder(batch[0].type(), ctx->memory_pool());\n-    RETURN_NOT_OK(builder.Reserve(batch.length));\n+    std::unique_ptr<ArrayBuilder> raw_builder;\n+    RETURN_NOT_OK(MakeBuilder(ctx->memory_pool(), out->type(), &raw_builder));\n+    RETURN_NOT_OK(raw_builder->Reserve(batch.length));\n+\n+    // TODO: make sure differing union types are rejected\n\nReview comment:\n       Do you mean to add a test for this?\n\n##########\nFile path: c_glib/test/test-sparse-union-scalar.rb\n##########\n@@ -49,7 +49,7 @@ def test_equal\n   end\n \n   def test_to_s\n-    assert_equal(\"...\", @scalar.to_s)\n+    assert_equal(\"(2: number: int8 = -29)\", @scalar.to_s)\n\nReview comment:\n       This is a bit cryptic if you don't know a union is expected. What about e.g. `union{number: int8 = -29}`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -1988,6 +1988,65 @@ Status ExecBinaryCoalesce(KernelContext* ctx, Datum left, Datum right, int64_t l\n   return Status::OK();\n }\n \n+template <typename AppendScalar>\n+static Status ExecVarWidthCoalesceImpl(KernelContext* ctx, const ExecBatch& batch,\n+                                       Datum* out,\n+                                       std::function<Status(ArrayBuilder*)> reserve_data,\n+                                       AppendScalar append_scalar) {\n+  // Special case: grab any leading non-null scalar or array arguments\n+  for (const auto& datum : batch.values) {\n+    if (datum.is_scalar()) {\n+      if (!datum.scalar()->is_valid) continue;\n+      ARROW_ASSIGN_OR_RAISE(\n+          *out, MakeArrayFromScalar(*datum.scalar(), batch.length, ctx->memory_pool()));\n+      return Status::OK();\n+    } else if (datum.is_array() && !datum.array()->MayHaveNulls()) {\n+      *out = datum;\n+      return Status::OK();\n+    }\n+    break;\n+  }\n+  ArrayData* output = out->mutable_array();\n+  std::unique_ptr<ArrayBuilder> raw_builder;\n+  RETURN_NOT_OK(MakeBuilder(ctx->memory_pool(), out->type(), &raw_builder));\n+  RETURN_NOT_OK(raw_builder->Reserve(batch.length));\n+  RETURN_NOT_OK(reserve_data(raw_builder.get()));\n+\n+  for (int64_t i = 0; i < batch.length; i++) {\n+    bool set = false;\n+    for (const auto& datum : batch.values) {\n+      if (datum.is_scalar()) {\n+        if (datum.scalar()->is_valid) {\n+          RETURN_NOT_OK(append_scalar(raw_builder.get(), *datum.scalar()));\n+          set = true;\n+          break;\n+        }\n+      } else {\n+        const ArrayData& source = *datum.array();\n+        if (!source.MayHaveNulls() ||\n+            BitUtil::GetBit(source.buffers[0]->data(), source.offset + i)) {\n+          RETURN_NOT_OK(raw_builder->AppendArraySlice(source, i, /*length=*/1));\n\nReview comment:\n       I assume this isn't going to be very performant compared to e.g. `raw_builder->Append(source_array.GetView(i))`. Not necessarily worth addressing.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-16T14:49:12.176+0000",
                    "updated": "2021-09-16T14:49:12.176+0000",
                    "started": "2021-09-16T14:49:12.175+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651761",
                    "issueId": "13390776"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/worklog/651992",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11080:\nURL: https://github.com/apache/arrow/pull/11080#discussion_r710466286\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -1988,6 +1988,65 @@ Status ExecBinaryCoalesce(KernelContext* ctx, Datum left, Datum right, int64_t l\n   return Status::OK();\n }\n \n+template <typename AppendScalar>\n+static Status ExecVarWidthCoalesceImpl(KernelContext* ctx, const ExecBatch& batch,\n+                                       Datum* out,\n+                                       std::function<Status(ArrayBuilder*)> reserve_data,\n+                                       AppendScalar append_scalar) {\n+  // Special case: grab any leading non-null scalar or array arguments\n+  for (const auto& datum : batch.values) {\n+    if (datum.is_scalar()) {\n+      if (!datum.scalar()->is_valid) continue;\n+      ARROW_ASSIGN_OR_RAISE(\n+          *out, MakeArrayFromScalar(*datum.scalar(), batch.length, ctx->memory_pool()));\n+      return Status::OK();\n+    } else if (datum.is_array() && !datum.array()->MayHaveNulls()) {\n+      *out = datum;\n+      return Status::OK();\n+    }\n+    break;\n+  }\n+  ArrayData* output = out->mutable_array();\n+  std::unique_ptr<ArrayBuilder> raw_builder;\n+  RETURN_NOT_OK(MakeBuilder(ctx->memory_pool(), out->type(), &raw_builder));\n+  RETURN_NOT_OK(raw_builder->Reserve(batch.length));\n+  RETURN_NOT_OK(reserve_data(raw_builder.get()));\n+\n+  for (int64_t i = 0; i < batch.length; i++) {\n+    bool set = false;\n+    for (const auto& datum : batch.values) {\n+      if (datum.is_scalar()) {\n+        if (datum.scalar()->is_valid) {\n+          RETURN_NOT_OK(append_scalar(raw_builder.get(), *datum.scalar()));\n+          set = true;\n+          break;\n+        }\n+      } else {\n+        const ArrayData& source = *datum.array();\n+        if (!source.MayHaveNulls() ||\n+            BitUtil::GetBit(source.buffers[0]->data(), source.offset + i)) {\n+          RETURN_NOT_OK(raw_builder->AppendArraySlice(source, i, /*length=*/1));\n\nReview comment:\n       Right, we'd have the overhead of a virtual call and some other bookkeeping vs just a direct append call. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-16T20:47:27.336+0000",
                    "updated": "2021-09-16T20:47:27.336+0000",
                    "started": "2021-09-16T20:47:27.335+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651992",
                    "issueId": "13390776"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/worklog/651994",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11080:\nURL: https://github.com/apache/arrow/pull/11080#discussion_r710467457\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -2063,51 +2122,173 @@ struct CoalesceFunctor<Type, enable_if_base_binary<Type>> {\n   }\n \n   static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n-    // Special case: grab any leading non-null scalar or array arguments\n+    return ExecVarWidthCoalesceImpl(\n+        ctx, batch, out,\n+        [&](ArrayBuilder* builder) {\n+          int64_t reservation = 0;\n+          for (const auto& datum : batch.values) {\n+            if (datum.is_array()) {\n+              const ArrayType array(datum.array());\n+              reservation = std::max<int64_t>(reservation, array.total_values_length());\n+            } else {\n+              const auto& scalar = *datum.scalar();\n+              if (scalar.is_valid) {\n+                const int64_t size = UnboxScalar<Type>::Unbox(scalar).size();\n+                reservation = std::max<int64_t>(reservation, batch.length * size);\n+              }\n+            }\n+          }\n+          return checked_cast<BuilderType*>(builder)->ReserveData(reservation);\n+        },\n+        [&](ArrayBuilder* builder, const Scalar& scalar) {\n+          return checked_cast<BuilderType*>(builder)->Append(\n+              UnboxScalar<Type>::Unbox(scalar));\n+        });\n+  }\n+};\n+\n+template <>\n+struct CoalesceFunctor<FixedSizeListType> {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n     for (const auto& datum : batch.values) {\n-      if (datum.is_scalar()) {\n-        if (!datum.scalar()->is_valid) continue;\n-        ARROW_ASSIGN_OR_RAISE(\n-            *out, MakeArrayFromScalar(*datum.scalar(), batch.length, ctx->memory_pool()));\n-        return Status::OK();\n-      } else if (datum.is_array() && !datum.array()->MayHaveNulls()) {\n-        *out = datum;\n-        return Status::OK();\n+      if (datum.is_array()) {\n+        return ExecArray(ctx, batch, out);\n+      }\n+    }\n+    return ExecScalarCoalesce(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::function<Status(ArrayBuilder*)> reserve_data = ReserveNoData;\n+    return ExecVarWidthCoalesce(ctx, batch, out, reserve_data);\n+  }\n+};\n+\n+template <typename Type>\n+struct CoalesceFunctor<Type, enable_if_var_size_list<Type>> {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    for (const auto& datum : batch.values) {\n+      if (datum.is_array()) {\n+        return ExecArray(ctx, batch, out);\n       }\n-      break;\n     }\n+    return ExecScalarCoalesce(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::function<Status(ArrayBuilder*)> reserve_data = ReserveNoData;\n+    return ExecVarWidthCoalesce(ctx, batch, out, reserve_data);\n+  }\n+};\n+\n+template <>\n+struct CoalesceFunctor<MapType> {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    for (const auto& datum : batch.values) {\n+      if (datum.is_array()) {\n+        return ExecArray(ctx, batch, out);\n+      }\n+    }\n+    return ExecScalarCoalesce(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::function<Status(ArrayBuilder*)> reserve_data = ReserveNoData;\n+    return ExecVarWidthCoalesce(ctx, batch, out, reserve_data);\n+  }\n+};\n+\n+template <>\n+struct CoalesceFunctor<StructType> {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    for (const auto& datum : batch.values) {\n+      if (datum.is_array()) {\n+        return ExecArray(ctx, batch, out);\n+      }\n+    }\n+    return ExecScalarCoalesce(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::function<Status(ArrayBuilder*)> reserve_data = ReserveNoData;\n+    return ExecVarWidthCoalesce(ctx, batch, out, reserve_data);\n+  }\n+};\n+\n+template <typename Type>\n+struct CoalesceFunctor<Type, enable_if_union<Type>> {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    // Unions don't have top-level nulls, so a specialized implementation is needed\n+    for (const auto& datum : batch.values) {\n+      if (datum.is_array()) {\n+        return ExecArray(ctx, batch, out);\n+      }\n+    }\n+    return ExecScalar(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n     ArrayData* output = out->mutable_array();\n-    BuilderType builder(batch[0].type(), ctx->memory_pool());\n-    RETURN_NOT_OK(builder.Reserve(batch.length));\n+    std::unique_ptr<ArrayBuilder> raw_builder;\n+    RETURN_NOT_OK(MakeBuilder(ctx->memory_pool(), out->type(), &raw_builder));\n+    RETURN_NOT_OK(raw_builder->Reserve(batch.length));\n+\n+    // TODO: make sure differing union types are rejected\n\nReview comment:\n       Whoops, thanks for the catch. After looking things over I ended up reworking DispatchBest here, adding checks to ensure parameterized types have the same parameters, and adding some basic tests of the helpers we use for promotions.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-16T20:48:43.916+0000",
                    "updated": "2021-09-16T20:48:43.916+0000",
                    "started": "2021-09-16T20:48:43.916+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651994",
                    "issueId": "13390776"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/worklog/651996",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11080:\nURL: https://github.com/apache/arrow/pull/11080#discussion_r710470727\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -2063,51 +2122,173 @@ struct CoalesceFunctor<Type, enable_if_base_binary<Type>> {\n   }\n \n   static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n-    // Special case: grab any leading non-null scalar or array arguments\n+    return ExecVarWidthCoalesceImpl(\n+        ctx, batch, out,\n+        [&](ArrayBuilder* builder) {\n+          int64_t reservation = 0;\n+          for (const auto& datum : batch.values) {\n+            if (datum.is_array()) {\n+              const ArrayType array(datum.array());\n+              reservation = std::max<int64_t>(reservation, array.total_values_length());\n+            } else {\n+              const auto& scalar = *datum.scalar();\n+              if (scalar.is_valid) {\n+                const int64_t size = UnboxScalar<Type>::Unbox(scalar).size();\n+                reservation = std::max<int64_t>(reservation, batch.length * size);\n+              }\n+            }\n+          }\n+          return checked_cast<BuilderType*>(builder)->ReserveData(reservation);\n+        },\n+        [&](ArrayBuilder* builder, const Scalar& scalar) {\n+          return checked_cast<BuilderType*>(builder)->Append(\n+              UnboxScalar<Type>::Unbox(scalar));\n+        });\n+  }\n+};\n+\n+template <>\n+struct CoalesceFunctor<FixedSizeListType> {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n     for (const auto& datum : batch.values) {\n-      if (datum.is_scalar()) {\n-        if (!datum.scalar()->is_valid) continue;\n-        ARROW_ASSIGN_OR_RAISE(\n-            *out, MakeArrayFromScalar(*datum.scalar(), batch.length, ctx->memory_pool()));\n-        return Status::OK();\n-      } else if (datum.is_array() && !datum.array()->MayHaveNulls()) {\n-        *out = datum;\n-        return Status::OK();\n+      if (datum.is_array()) {\n+        return ExecArray(ctx, batch, out);\n+      }\n+    }\n+    return ExecScalarCoalesce(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::function<Status(ArrayBuilder*)> reserve_data = ReserveNoData;\n+    return ExecVarWidthCoalesce(ctx, batch, out, reserve_data);\n+  }\n+};\n+\n+template <typename Type>\n+struct CoalesceFunctor<Type, enable_if_var_size_list<Type>> {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    for (const auto& datum : batch.values) {\n+      if (datum.is_array()) {\n+        return ExecArray(ctx, batch, out);\n       }\n-      break;\n     }\n+    return ExecScalarCoalesce(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::function<Status(ArrayBuilder*)> reserve_data = ReserveNoData;\n+    return ExecVarWidthCoalesce(ctx, batch, out, reserve_data);\n+  }\n+};\n+\n+template <>\n+struct CoalesceFunctor<MapType> {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    for (const auto& datum : batch.values) {\n+      if (datum.is_array()) {\n+        return ExecArray(ctx, batch, out);\n+      }\n+    }\n+    return ExecScalarCoalesce(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::function<Status(ArrayBuilder*)> reserve_data = ReserveNoData;\n+    return ExecVarWidthCoalesce(ctx, batch, out, reserve_data);\n+  }\n+};\n+\n+template <>\n+struct CoalesceFunctor<StructType> {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    for (const auto& datum : batch.values) {\n+      if (datum.is_array()) {\n+        return ExecArray(ctx, batch, out);\n+      }\n+    }\n+    return ExecScalarCoalesce(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::function<Status(ArrayBuilder*)> reserve_data = ReserveNoData;\n+    return ExecVarWidthCoalesce(ctx, batch, out, reserve_data);\n+  }\n+};\n+\n+template <typename Type>\n+struct CoalesceFunctor<Type, enable_if_union<Type>> {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    // Unions don't have top-level nulls, so a specialized implementation is needed\n+    for (const auto& datum : batch.values) {\n+      if (datum.is_array()) {\n+        return ExecArray(ctx, batch, out);\n+      }\n+    }\n+    return ExecScalar(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n     ArrayData* output = out->mutable_array();\n-    BuilderType builder(batch[0].type(), ctx->memory_pool());\n-    RETURN_NOT_OK(builder.Reserve(batch.length));\n+    std::unique_ptr<ArrayBuilder> raw_builder;\n+    RETURN_NOT_OK(MakeBuilder(ctx->memory_pool(), out->type(), &raw_builder));\n+    RETURN_NOT_OK(raw_builder->Reserve(batch.length));\n+\n+    // TODO: make sure differing union types are rejected\n\nReview comment:\n       Actually, one more thing I want to do now is have CheckDispatchBest also ensure that the promoted ValueDescrs from DispatchBest match the ones given to the test.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-16T20:52:05.296+0000",
                    "updated": "2021-09-16T20:52:05.296+0000",
                    "started": "2021-09-16T20:52:05.296+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651996",
                    "issueId": "13390776"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/worklog/652318",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11080:\nURL: https://github.com/apache/arrow/pull/11080#discussion_r711073279\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -2063,51 +2122,173 @@ struct CoalesceFunctor<Type, enable_if_base_binary<Type>> {\n   }\n \n   static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n-    // Special case: grab any leading non-null scalar or array arguments\n+    return ExecVarWidthCoalesceImpl(\n+        ctx, batch, out,\n+        [&](ArrayBuilder* builder) {\n+          int64_t reservation = 0;\n+          for (const auto& datum : batch.values) {\n+            if (datum.is_array()) {\n+              const ArrayType array(datum.array());\n+              reservation = std::max<int64_t>(reservation, array.total_values_length());\n+            } else {\n+              const auto& scalar = *datum.scalar();\n+              if (scalar.is_valid) {\n+                const int64_t size = UnboxScalar<Type>::Unbox(scalar).size();\n+                reservation = std::max<int64_t>(reservation, batch.length * size);\n+              }\n+            }\n+          }\n+          return checked_cast<BuilderType*>(builder)->ReserveData(reservation);\n+        },\n+        [&](ArrayBuilder* builder, const Scalar& scalar) {\n+          return checked_cast<BuilderType*>(builder)->Append(\n+              UnboxScalar<Type>::Unbox(scalar));\n+        });\n+  }\n+};\n+\n+template <>\n+struct CoalesceFunctor<FixedSizeListType> {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n     for (const auto& datum : batch.values) {\n-      if (datum.is_scalar()) {\n-        if (!datum.scalar()->is_valid) continue;\n-        ARROW_ASSIGN_OR_RAISE(\n-            *out, MakeArrayFromScalar(*datum.scalar(), batch.length, ctx->memory_pool()));\n-        return Status::OK();\n-      } else if (datum.is_array() && !datum.array()->MayHaveNulls()) {\n-        *out = datum;\n-        return Status::OK();\n+      if (datum.is_array()) {\n+        return ExecArray(ctx, batch, out);\n+      }\n+    }\n+    return ExecScalarCoalesce(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::function<Status(ArrayBuilder*)> reserve_data = ReserveNoData;\n+    return ExecVarWidthCoalesce(ctx, batch, out, reserve_data);\n+  }\n+};\n+\n+template <typename Type>\n+struct CoalesceFunctor<Type, enable_if_var_size_list<Type>> {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    for (const auto& datum : batch.values) {\n+      if (datum.is_array()) {\n+        return ExecArray(ctx, batch, out);\n       }\n-      break;\n     }\n+    return ExecScalarCoalesce(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::function<Status(ArrayBuilder*)> reserve_data = ReserveNoData;\n+    return ExecVarWidthCoalesce(ctx, batch, out, reserve_data);\n+  }\n+};\n+\n+template <>\n+struct CoalesceFunctor<MapType> {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    for (const auto& datum : batch.values) {\n+      if (datum.is_array()) {\n+        return ExecArray(ctx, batch, out);\n+      }\n+    }\n+    return ExecScalarCoalesce(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::function<Status(ArrayBuilder*)> reserve_data = ReserveNoData;\n+    return ExecVarWidthCoalesce(ctx, batch, out, reserve_data);\n+  }\n+};\n+\n+template <>\n+struct CoalesceFunctor<StructType> {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    for (const auto& datum : batch.values) {\n+      if (datum.is_array()) {\n+        return ExecArray(ctx, batch, out);\n+      }\n+    }\n+    return ExecScalarCoalesce(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::function<Status(ArrayBuilder*)> reserve_data = ReserveNoData;\n+    return ExecVarWidthCoalesce(ctx, batch, out, reserve_data);\n+  }\n+};\n+\n+template <typename Type>\n+struct CoalesceFunctor<Type, enable_if_union<Type>> {\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    // Unions don't have top-level nulls, so a specialized implementation is needed\n+    for (const auto& datum : batch.values) {\n+      if (datum.is_array()) {\n+        return ExecArray(ctx, batch, out);\n+      }\n+    }\n+    return ExecScalar(ctx, batch, out);\n+  }\n+\n+  static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n     ArrayData* output = out->mutable_array();\n-    BuilderType builder(batch[0].type(), ctx->memory_pool());\n-    RETURN_NOT_OK(builder.Reserve(batch.length));\n+    std::unique_ptr<ArrayBuilder> raw_builder;\n+    RETURN_NOT_OK(MakeBuilder(ctx->memory_pool(), out->type(), &raw_builder));\n+    RETURN_NOT_OK(raw_builder->Reserve(batch.length));\n+\n+    // TODO: make sure differing union types are rejected\n\nReview comment:\n       Done - I also adjusted some tests and added a set of tests specifically for the type promotion helpers we use.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-17T13:49:52.015+0000",
                    "updated": "2021-09-17T13:49:52.015+0000",
                    "started": "2021-09-17T13:49:52.015+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "652318",
                    "issueId": "13390776"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/worklog/653542",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11080:\nURL: https://github.com/apache/arrow/pull/11080#discussion_r712990750\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.cc\n##########\n@@ -155,24 +161,44 @@ std::shared_ptr<DataType> CommonNumeric(const ValueDescr* begin, size_t count) {\n \n std::shared_ptr<DataType> CommonTimestamp(const std::vector<ValueDescr>& descrs) {\n   TimeUnit::type finest_unit = TimeUnit::SECOND;\n+  const std::string* timezone = nullptr;\n+  bool saw_date32 = false;\n+  bool saw_date64 = false;\n \n   for (const auto& descr : descrs) {\n     auto id = descr.type->id();\n     // a common timestamp is only possible if all types are timestamp like\n     switch (id) {\n       case Type::DATE32:\n+        // Date32's unit is days, but the coarsest we have is seconds\n+        saw_date32 = true;\n+        continue;\n       case Type::DATE64:\n+        finest_unit = std::max(finest_unit, TimeUnit::MILLI);\n+        saw_date64 = true;\n         continue;\n-      case Type::TIMESTAMP:\n-        finest_unit =\n-            std::max(finest_unit, checked_cast<const TimestampType&>(*descr.type).unit());\n+      case Type::TIMESTAMP: {\n+        const auto& ty = checked_cast<const TimestampType&>(*descr.type);\n+        // Don't cast to common timezone by default (may not make\n+        // sense for all kernels)\n+        if (timezone && *timezone != ty.timezone()) return nullptr;\n+        timezone = &ty.timezone();\n+        finest_unit = std::max(finest_unit, ty.unit());\n         continue;\n+      }\n       default:\n         return nullptr;\n     }\n   }\n \n-  return timestamp(finest_unit);\n+  if (timezone) {\n+    // At least one timestamp seen\n+    return timestamp(finest_unit, *timezone);\n+  } else if (saw_date32 && saw_date64) {\n\nReview comment:\n       Hmm... if `saw_date64` is true but `saw_date32` false, we should still return date64, right?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal_test.cc\n##########\n@@ -0,0 +1,109 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/compute/kernels/codegen_internal.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_fwd.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+TEST(TestDispatchBest, CastBinaryDecimalArgs) {\n+  std::vector<ValueDescr> args;\n+  std::vector<DecimalPromotion> modes = {\n+      DecimalPromotion::kAdd, DecimalPromotion::kMultiply, DecimalPromotion::kDivide};\n+\n+  // Any float -> all float\n+  for (auto mode : modes) {\n+    args = {decimal128(3, 2), float64()};\n+    ASSERT_OK(CastBinaryDecimalArgs(mode, &args));\n+    AssertTypeEqual(args[0].type, float64());\n+    AssertTypeEqual(args[1].type, float64());\n+  }\n+\n+  // Integer -> decimal with common scale\n+  args = {decimal128(1, 0), int64()};\n+  ASSERT_OK(CastBinaryDecimalArgs(DecimalPromotion::kAdd, &args));\n+  AssertTypeEqual(args[0].type, decimal128(1, 0));\n+  AssertTypeEqual(args[1].type, decimal128(19, 0));\n+}\n+\n+TEST(TestDispatchBest, CastDecimalArgs) {\n\nReview comment:\n       Should negative scales be tested? They are allowed in Arrow.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal_test.cc\n##########\n@@ -0,0 +1,109 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/compute/kernels/codegen_internal.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_fwd.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+TEST(TestDispatchBest, CastBinaryDecimalArgs) {\n+  std::vector<ValueDescr> args;\n+  std::vector<DecimalPromotion> modes = {\n+      DecimalPromotion::kAdd, DecimalPromotion::kMultiply, DecimalPromotion::kDivide};\n+\n+  // Any float -> all float\n+  for (auto mode : modes) {\n+    args = {decimal128(3, 2), float64()};\n+    ASSERT_OK(CastBinaryDecimalArgs(mode, &args));\n+    AssertTypeEqual(args[0].type, float64());\n+    AssertTypeEqual(args[1].type, float64());\n+  }\n+\n+  // Integer -> decimal with common scale\n+  args = {decimal128(1, 0), int64()};\n+  ASSERT_OK(CastBinaryDecimalArgs(DecimalPromotion::kAdd, &args));\n+  AssertTypeEqual(args[0].type, decimal128(1, 0));\n+  AssertTypeEqual(args[1].type, decimal128(19, 0));\n+}\n+\n+TEST(TestDispatchBest, CastDecimalArgs) {\n+  std::vector<ValueDescr> args;\n+\n+  // Any float -> all float\n+  args = {decimal128(3, 2), float64()};\n+  ASSERT_OK(CastDecimalArgs(args.data(), args.size()));\n+  AssertTypeEqual(args[0].type, float64());\n+  AssertTypeEqual(args[1].type, float64());\n+\n+  // Promote to common decimal width\n+  args = {decimal128(3, 2), decimal256(3, 2)};\n+  ASSERT_OK(CastDecimalArgs(args.data(), args.size()));\n+  AssertTypeEqual(args[0].type, decimal256(3, 2));\n+  AssertTypeEqual(args[1].type, decimal256(3, 2));\n+\n+  // Rescale so all have common scale/precision\n+  args = {decimal128(3, 2), decimal128(3, 0)};\n+  ASSERT_OK(CastDecimalArgs(args.data(), args.size()));\n+  AssertTypeEqual(args[0].type, decimal128(5, 2));\n+  AssertTypeEqual(args[1].type, decimal128(5, 2));\n+\n+  // Integer -> decimal with appropriate precision\n+  args = {decimal128(3, 0), int64()};\n+  ASSERT_OK(CastDecimalArgs(args.data(), args.size()));\n+  AssertTypeEqual(args[0].type, decimal128(19, 0));\n+  AssertTypeEqual(args[1].type, decimal128(19, 0));\n+\n+  args = {decimal128(3, 1), int64()};\n+  ASSERT_OK(CastDecimalArgs(args.data(), args.size()));\n+  AssertTypeEqual(args[0].type, decimal128(20, 1));\n+  AssertTypeEqual(args[1].type, decimal128(20, 1));\n+\n+  // Overflow decimal128 max precision -> promote to decimal256\n+  args = {decimal128(38, 0), decimal128(37, 2)};\n+  ASSERT_OK(CastDecimalArgs(args.data(), args.size()));\n+  AssertTypeEqual(args[0].type, decimal256(40, 2));\n+  AssertTypeEqual(args[1].type, decimal256(40, 2));\n+}\n+\n+TEST(TestDispatchBest, CommonTimestamp) {\n+  AssertTypeEqual(\n+      timestamp(TimeUnit::NANO),\n+      CommonTimestamp({timestamp(TimeUnit::SECOND), timestamp(TimeUnit::NANO)}));\n+  AssertTypeEqual(timestamp(TimeUnit::NANO, \"UTC\"),\n+                  CommonTimestamp({timestamp(TimeUnit::SECOND, \"UTC\"),\n+                                   timestamp(TimeUnit::NANO, \"UTC\")}));\n+  AssertTypeEqual(timestamp(TimeUnit::NANO),\n+                  CommonTimestamp({date32(), timestamp(TimeUnit::NANO)}));\n+  AssertTypeEqual(timestamp(TimeUnit::MILLI),\n+                  CommonTimestamp({date64(), timestamp(TimeUnit::SECOND)}));\n+  AssertTypeEqual(date64(), CommonTimestamp({date32(), date64()}));\n\nReview comment:\n       Note this makes the name of the function a bit weird ;-)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else_test.cc\n##########\n@@ -1675,6 +1858,234 @@ TEST(TestCoalesce, FixedSizeBinary) {\n               ArrayFromJSON(type, R\"([\"mno\", \"def\", \"ghi\", \"jkl\"])\"));\n   CheckScalar(\"coalesce\", {scalar1, values1},\n               ArrayFromJSON(type, R\"([\"abc\", \"abc\", \"abc\", \"abc\"])\"));\n+\n+  EXPECT_RAISES_WITH_MESSAGE_THAT(\n+      TypeError,\n+      ::testing::HasSubstr(\"coalesce: all types must be identical, expected: \"\n\nReview comment:\n       Should we replace \"identical\" with \"compatible\"? After all, some implicit casting is allowed.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.h\n##########\n@@ -1278,6 +1278,9 @@ void ReplaceNullWithOtherType(std::vector<ValueDescr>* descrs);\n ARROW_EXPORT\n void ReplaceTypes(const std::shared_ptr<DataType>&, std::vector<ValueDescr>* descrs);\n \n+ARROW_EXPORT\n+void ReplaceTypes(const std::shared_ptr<DataType>&, ValueDescr* descrs, size_t count);\n\nReview comment:\n       Probably a reminder that we'd like a `std::span` backport at some point ;-)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.cc\n##########\n@@ -285,6 +311,59 @@ Status CastBinaryDecimalArgs(DecimalPromotion promotion,\n   return Status::OK();\n }\n \n+Status CastDecimalArgs(ValueDescr* begin, size_t count) {\n+  Type::type casted_type_id = Type::DECIMAL128;\n+  auto* end = begin + count;\n+\n+  int32_t max_scale = 0;\n+  for (auto* it = begin; it != end; ++it) {\n+    const auto& ty = *it->type;\n+    if (is_floating(ty.id())) {\n+      // Decimal + float = float\n+      ReplaceTypes(float64(), begin, count);\n\nReview comment:\n       We should still examine other types in case they are incompatible, no?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.cc\n##########\n@@ -155,24 +161,44 @@ std::shared_ptr<DataType> CommonNumeric(const ValueDescr* begin, size_t count) {\n \n std::shared_ptr<DataType> CommonTimestamp(const std::vector<ValueDescr>& descrs) {\n   TimeUnit::type finest_unit = TimeUnit::SECOND;\n+  const std::string* timezone = nullptr;\n+  bool saw_date32 = false;\n+  bool saw_date64 = false;\n \n   for (const auto& descr : descrs) {\n     auto id = descr.type->id();\n     // a common timestamp is only possible if all types are timestamp like\n     switch (id) {\n       case Type::DATE32:\n+        // Date32's unit is days, but the coarsest we have is seconds\n+        saw_date32 = true;\n+        continue;\n       case Type::DATE64:\n+        finest_unit = std::max(finest_unit, TimeUnit::MILLI);\n+        saw_date64 = true;\n         continue;\n-      case Type::TIMESTAMP:\n-        finest_unit =\n-            std::max(finest_unit, checked_cast<const TimestampType&>(*descr.type).unit());\n+      case Type::TIMESTAMP: {\n+        const auto& ty = checked_cast<const TimestampType&>(*descr.type);\n+        // Don't cast to common timezone by default (may not make\n+        // sense for all kernels)\n+        if (timezone && *timezone != ty.timezone()) return nullptr;\n+        timezone = &ty.timezone();\n+        finest_unit = std::max(finest_unit, ty.unit());\n         continue;\n+      }\n       default:\n         return nullptr;\n     }\n   }\n \n-  return timestamp(finest_unit);\n+  if (timezone) {\n+    // At least one timestamp seen\n+    return timestamp(finest_unit, *timezone);\n+  } else if (saw_date32 && saw_date64) {\n+    // Saw mixed date types\n+    return date64();\n+  }\n+  return nullptr;\n\nReview comment:\n       Why not return date32 here?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal_test.cc\n##########\n@@ -0,0 +1,109 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/compute/kernels/codegen_internal.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_fwd.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+TEST(TestDispatchBest, CastBinaryDecimalArgs) {\n+  std::vector<ValueDescr> args;\n+  std::vector<DecimalPromotion> modes = {\n+      DecimalPromotion::kAdd, DecimalPromotion::kMultiply, DecimalPromotion::kDivide};\n+\n+  // Any float -> all float\n+  for (auto mode : modes) {\n+    args = {decimal128(3, 2), float64()};\n+    ASSERT_OK(CastBinaryDecimalArgs(mode, &args));\n+    AssertTypeEqual(args[0].type, float64());\n+    AssertTypeEqual(args[1].type, float64());\n+  }\n+\n+  // Integer -> decimal with common scale\n+  args = {decimal128(1, 0), int64()};\n+  ASSERT_OK(CastBinaryDecimalArgs(DecimalPromotion::kAdd, &args));\n+  AssertTypeEqual(args[0].type, decimal128(1, 0));\n+  AssertTypeEqual(args[1].type, decimal128(19, 0));\n+}\n+\n+TEST(TestDispatchBest, CastDecimalArgs) {\n+  std::vector<ValueDescr> args;\n+\n+  // Any float -> all float\n+  args = {decimal128(3, 2), float64()};\n+  ASSERT_OK(CastDecimalArgs(args.data(), args.size()));\n+  AssertTypeEqual(args[0].type, float64());\n+  AssertTypeEqual(args[1].type, float64());\n+\n+  // Promote to common decimal width\n+  args = {decimal128(3, 2), decimal256(3, 2)};\n+  ASSERT_OK(CastDecimalArgs(args.data(), args.size()));\n+  AssertTypeEqual(args[0].type, decimal256(3, 2));\n+  AssertTypeEqual(args[1].type, decimal256(3, 2));\n+\n+  // Rescale so all have common scale/precision\n+  args = {decimal128(3, 2), decimal128(3, 0)};\n+  ASSERT_OK(CastDecimalArgs(args.data(), args.size()));\n+  AssertTypeEqual(args[0].type, decimal128(5, 2));\n+  AssertTypeEqual(args[1].type, decimal128(5, 2));\n+\n+  // Integer -> decimal with appropriate precision\n+  args = {decimal128(3, 0), int64()};\n+  ASSERT_OK(CastDecimalArgs(args.data(), args.size()));\n+  AssertTypeEqual(args[0].type, decimal128(19, 0));\n+  AssertTypeEqual(args[1].type, decimal128(19, 0));\n+\n+  args = {decimal128(3, 1), int64()};\n+  ASSERT_OK(CastDecimalArgs(args.data(), args.size()));\n+  AssertTypeEqual(args[0].type, decimal128(20, 1));\n+  AssertTypeEqual(args[1].type, decimal128(20, 1));\n+\n+  // Overflow decimal128 max precision -> promote to decimal256\n+  args = {decimal128(38, 0), decimal128(37, 2)};\n+  ASSERT_OK(CastDecimalArgs(args.data(), args.size()));\n+  AssertTypeEqual(args[0].type, decimal256(40, 2));\n+  AssertTypeEqual(args[1].type, decimal256(40, 2));\n+}\n+\n+TEST(TestDispatchBest, CommonTimestamp) {\n+  AssertTypeEqual(\n+      timestamp(TimeUnit::NANO),\n+      CommonTimestamp({timestamp(TimeUnit::SECOND), timestamp(TimeUnit::NANO)}));\n+  AssertTypeEqual(timestamp(TimeUnit::NANO, \"UTC\"),\n+                  CommonTimestamp({timestamp(TimeUnit::SECOND, \"UTC\"),\n+                                   timestamp(TimeUnit::NANO, \"UTC\")}));\n+  AssertTypeEqual(timestamp(TimeUnit::NANO),\n+                  CommonTimestamp({date32(), timestamp(TimeUnit::NANO)}));\n+  AssertTypeEqual(timestamp(TimeUnit::MILLI),\n+                  CommonTimestamp({date64(), timestamp(TimeUnit::SECOND)}));\n+  AssertTypeEqual(date64(), CommonTimestamp({date32(), date64()}));\n+  ASSERT_EQ(nullptr, CommonTimestamp({date32(), date32()}));\n\nReview comment:\n       But why?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -2063,51 +2146,178 @@ struct CoalesceFunctor<Type, enable_if_base_binary<Type>> {\n   }\n \n   static Status ExecArray(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n-    // Special case: grab any leading non-null scalar or array arguments\n+    return ExecVarWidthCoalesceImpl(\n+        ctx, batch, out,\n+        [&](ArrayBuilder* builder) {\n+          int64_t reservation = 0;\n+          for (const auto& datum : batch.values) {\n+            if (datum.is_array()) {\n+              const ArrayType array(datum.array());\n+              reservation = std::max<int64_t>(reservation, array.total_values_length());\n+            } else {\n+              const auto& scalar = *datum.scalar();\n+              if (scalar.is_valid) {\n+                const int64_t size = UnboxScalar<Type>::Unbox(scalar).size();\n+                reservation = std::max<int64_t>(reservation, batch.length * size);\n+              }\n+            }\n+          }\n+          return checked_cast<BuilderType*>(builder)->ReserveData(reservation);\n+        },\n+        [&](ArrayBuilder* builder, const Scalar& scalar) {\n+          return checked_cast<BuilderType*>(builder)->Append(\n+              UnboxScalar<Type>::Unbox(scalar));\n+        });\n+  }\n+};\n+\n+template <>\n+struct CoalesceFunctor<FixedSizeListType> {\n\nReview comment:\n       It seems you could simply have:\r\n   ```c++\r\n   template <typename Type>\r\n   struct CoalesceFunctor<Type,\r\n       std::enable_if<is_nested_type<Type>::value && !is_union_type<Type>::value>::type> {\r\n     // common implementation for non-union nested types\r\n   };\r\n   ```\r\n   \n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.cc\n##########\n@@ -285,6 +311,59 @@ Status CastBinaryDecimalArgs(DecimalPromotion promotion,\n   return Status::OK();\n }\n \n+Status CastDecimalArgs(ValueDescr* begin, size_t count) {\n+  Type::type casted_type_id = Type::DECIMAL128;\n+  auto* end = begin + count;\n+\n+  int32_t max_scale = 0;\n+  for (auto* it = begin; it != end; ++it) {\n+    const auto& ty = *it->type;\n+    if (is_floating(ty.id())) {\n+      // Decimal + float = float\n+      ReplaceTypes(float64(), begin, count);\n+      return Status::OK();\n+    } else if (is_integer(ty.id())) {\n+      // Nothing to do here\n+    } else if (is_decimal(ty.id())) {\n+      max_scale = std::max(max_scale, checked_cast<const DecimalType&>(ty).scale());\n+      if (ty.id() == Type::DECIMAL256) {\n+        casted_type_id = Type::DECIMAL256;\n+      }\n+    } else {\n+      // Non-numeric, can't cast\n+      return Status::OK();\n+    }\n+  }\n+\n+  // All integer and decimal, rescale\n+  int32_t common_precision = 0;\n+  for (auto* it = begin; it != end; ++it) {\n+    const auto& ty = *it->type;\n+    if (is_integer(ty.id())) {\n+      ARROW_ASSIGN_OR_RAISE(auto precision, MaxDecimalDigitsForInteger(ty.id()));\n+      precision += max_scale;\n+      common_precision = std::max(common_precision, precision);\n+    } else if (is_decimal(ty.id())) {\n+      const auto& decimal_ty = checked_cast<const DecimalType&>(ty);\n+      auto precision = decimal_ty.precision();\n+      const auto scale = decimal_ty.scale();\n+      precision += max_scale - scale;\n+      common_precision = std::max(common_precision, precision);\n+    }\n+  }\n+\n+  if (common_precision > BasicDecimal128::kMaxPrecision) {\n\nReview comment:\n       Should there be an error in case `BasicDecimal256::kMaxPrecision` is exceeded?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-21T13:03:13.380+0000",
                    "updated": "2021-09-21T13:03:13.380+0000",
                    "started": "2021-09-21T13:03:13.380+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "653542",
                    "issueId": "13390776"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/worklog/654200",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11080:\nURL: https://github.com/apache/arrow/pull/11080#discussion_r714193210\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.cc\n##########\n@@ -155,24 +161,44 @@ std::shared_ptr<DataType> CommonNumeric(const ValueDescr* begin, size_t count) {\n \n std::shared_ptr<DataType> CommonTimestamp(const std::vector<ValueDescr>& descrs) {\n   TimeUnit::type finest_unit = TimeUnit::SECOND;\n+  const std::string* timezone = nullptr;\n+  bool saw_date32 = false;\n+  bool saw_date64 = false;\n \n   for (const auto& descr : descrs) {\n     auto id = descr.type->id();\n     // a common timestamp is only possible if all types are timestamp like\n     switch (id) {\n       case Type::DATE32:\n+        // Date32's unit is days, but the coarsest we have is seconds\n+        saw_date32 = true;\n+        continue;\n       case Type::DATE64:\n+        finest_unit = std::max(finest_unit, TimeUnit::MILLI);\n+        saw_date64 = true;\n         continue;\n-      case Type::TIMESTAMP:\n-        finest_unit =\n-            std::max(finest_unit, checked_cast<const TimestampType&>(*descr.type).unit());\n+      case Type::TIMESTAMP: {\n+        const auto& ty = checked_cast<const TimestampType&>(*descr.type);\n+        // Don't cast to common timezone by default (may not make\n+        // sense for all kernels)\n+        if (timezone && *timezone != ty.timezone()) return nullptr;\n+        timezone = &ty.timezone();\n+        finest_unit = std::max(finest_unit, ty.unit());\n         continue;\n+      }\n       default:\n         return nullptr;\n     }\n   }\n \n-  return timestamp(finest_unit);\n+  if (timezone) {\n+    // At least one timestamp seen\n+    return timestamp(finest_unit, *timezone);\n+  } else if (saw_date32 && saw_date64) {\n+    // Saw mixed date types\n+    return date64();\n+  }\n+  return nullptr;\n\nReview comment:\n       nullptr is returned to indicate that no common temporal type was found; returning date32 here would mean `CommonTemporal(float64(), utf8()) === date32()`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-22T18:11:55.569+0000",
                    "updated": "2021-09-22T18:11:55.569+0000",
                    "started": "2021-09-22T18:11:55.569+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "654200",
                    "issueId": "13390776"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/worklog/654202",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11080:\nURL: https://github.com/apache/arrow/pull/11080#discussion_r714194260\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.h\n##########\n@@ -1278,6 +1278,9 @@ void ReplaceNullWithOtherType(std::vector<ValueDescr>* descrs);\n ARROW_EXPORT\n void ReplaceTypes(const std::shared_ptr<DataType>&, std::vector<ValueDescr>* descrs);\n \n+ARROW_EXPORT\n+void ReplaceTypes(const std::shared_ptr<DataType>&, ValueDescr* descrs, size_t count);\n\nReview comment:\n       https://issues.apache.org/jira/browse/ARROW-14083\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-22T18:13:22.851+0000",
                    "updated": "2021-09-22T18:13:22.851+0000",
                    "started": "2021-09-22T18:13:22.851+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "654202",
                    "issueId": "13390776"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/worklog/654217",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11080:\nURL: https://github.com/apache/arrow/pull/11080#discussion_r714197277\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -1622,61 +1622,80 @@ TEST(TestBinaryDecimalArithmetic, DispatchBest) {\n     }\n   }\n \n-  // decimal, integer\n-  for (std::string name : {\"add\", \"subtract\", \"multiply\", \"divide\"}) {\n+  // decimal, decimal -> decimal and decimal, integer -> decimal\n\nReview comment:\n       nit: easier to read\r\n   ```suggestion\r\n     // decimal, decimal -> decimal\r\n     // decimal, integer -> decimal\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -1622,61 +1622,80 @@ TEST(TestBinaryDecimalArithmetic, DispatchBest) {\n     }\n   }\n \n-  // decimal, integer\n-  for (std::string name : {\"add\", \"subtract\", \"multiply\", \"divide\"}) {\n+  // decimal, decimal -> decimal and decimal, integer -> decimal\n+  for (std::string name : {\"add\", \"subtract\"}) {\n     for (std::string suffix : {\"\", \"_checked\"}) {\n       name += suffix;\n \n       CheckDispatchBest(name, {int64(), decimal128(1, 0)},\n-                        {decimal128(1, 0), decimal128(1, 0)});\n+                        {decimal128(19, 0), decimal128(1, 0)});\n       CheckDispatchBest(name, {decimal128(1, 0), int64()},\n-                        {decimal128(1, 0), decimal128(1, 0)});\n-    }\n-  }\n-\n-  // decimal, decimal\n-  for (std::string name : {\"add\", \"subtract\"}) {\n-    for (std::string suffix : {\"\", \"_checked\"}) {\n-      name += suffix;\n+                        {decimal128(1, 0), decimal128(19, 0)});\n \n       CheckDispatchBest(name, {decimal128(2, 1), decimal128(2, 1)},\n-                        {decimal128(3, 1), decimal128(3, 1)});\n+                        {decimal128(2, 1), decimal128(2, 1)});\n       CheckDispatchBest(name, {decimal256(2, 1), decimal256(2, 1)},\n-                        {decimal256(3, 1), decimal256(3, 1)});\n+                        {decimal256(2, 1), decimal256(2, 1)});\n\nReview comment:\n       This is surprising to me. Could you comment on why the implicit cast is no longer necessary?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-22T18:41:37.894+0000",
                    "updated": "2021-09-22T18:41:37.894+0000",
                    "started": "2021-09-22T18:41:37.894+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "654217",
                    "issueId": "13390776"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/worklog/654218",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11080:\nURL: https://github.com/apache/arrow/pull/11080#discussion_r714193210\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.cc\n##########\n@@ -155,24 +161,44 @@ std::shared_ptr<DataType> CommonNumeric(const ValueDescr* begin, size_t count) {\n \n std::shared_ptr<DataType> CommonTimestamp(const std::vector<ValueDescr>& descrs) {\n   TimeUnit::type finest_unit = TimeUnit::SECOND;\n+  const std::string* timezone = nullptr;\n+  bool saw_date32 = false;\n+  bool saw_date64 = false;\n \n   for (const auto& descr : descrs) {\n     auto id = descr.type->id();\n     // a common timestamp is only possible if all types are timestamp like\n     switch (id) {\n       case Type::DATE32:\n+        // Date32's unit is days, but the coarsest we have is seconds\n+        saw_date32 = true;\n+        continue;\n       case Type::DATE64:\n+        finest_unit = std::max(finest_unit, TimeUnit::MILLI);\n+        saw_date64 = true;\n         continue;\n-      case Type::TIMESTAMP:\n-        finest_unit =\n-            std::max(finest_unit, checked_cast<const TimestampType&>(*descr.type).unit());\n+      case Type::TIMESTAMP: {\n+        const auto& ty = checked_cast<const TimestampType&>(*descr.type);\n+        // Don't cast to common timezone by default (may not make\n+        // sense for all kernels)\n+        if (timezone && *timezone != ty.timezone()) return nullptr;\n+        timezone = &ty.timezone();\n+        finest_unit = std::max(finest_unit, ty.unit());\n         continue;\n+      }\n       default:\n         return nullptr;\n     }\n   }\n \n-  return timestamp(finest_unit);\n+  if (timezone) {\n+    // At least one timestamp seen\n+    return timestamp(finest_unit, *timezone);\n+  } else if (saw_date32 && saw_date64) {\n+    // Saw mixed date types\n+    return date64();\n+  }\n+  return nullptr;\n\nReview comment:\n       ~~nullptr is returned to indicate that no common temporal type was found; returning date32 here would mean `CommonTemporal(float64(), utf8()) === date32()`~~\r\n   \r\n   nvm, on closer reading I'd expect this to be unreachable\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-22T18:44:43.246+0000",
                    "updated": "2021-09-22T18:44:43.246+0000",
                    "started": "2021-09-22T18:44:43.244+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "654218",
                    "issueId": "13390776"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/worklog/654219",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11080:\nURL: https://github.com/apache/arrow/pull/11080#discussion_r714216439\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -1622,61 +1622,80 @@ TEST(TestBinaryDecimalArithmetic, DispatchBest) {\n     }\n   }\n \n-  // decimal, integer\n-  for (std::string name : {\"add\", \"subtract\", \"multiply\", \"divide\"}) {\n+  // decimal, decimal -> decimal and decimal, integer -> decimal\n+  for (std::string name : {\"add\", \"subtract\"}) {\n     for (std::string suffix : {\"\", \"_checked\"}) {\n       name += suffix;\n \n       CheckDispatchBest(name, {int64(), decimal128(1, 0)},\n-                        {decimal128(1, 0), decimal128(1, 0)});\n+                        {decimal128(19, 0), decimal128(1, 0)});\n       CheckDispatchBest(name, {decimal128(1, 0), int64()},\n-                        {decimal128(1, 0), decimal128(1, 0)});\n-    }\n-  }\n-\n-  // decimal, decimal\n-  for (std::string name : {\"add\", \"subtract\"}) {\n-    for (std::string suffix : {\"\", \"_checked\"}) {\n-      name += suffix;\n+                        {decimal128(1, 0), decimal128(19, 0)});\n \n       CheckDispatchBest(name, {decimal128(2, 1), decimal128(2, 1)},\n-                        {decimal128(3, 1), decimal128(3, 1)});\n+                        {decimal128(2, 1), decimal128(2, 1)});\n       CheckDispatchBest(name, {decimal256(2, 1), decimal256(2, 1)},\n-                        {decimal256(3, 1), decimal256(3, 1)});\n+                        {decimal256(2, 1), decimal256(2, 1)});\n\nReview comment:\n       DispatchBest in this case doesn't actually promote either argument. When I adjusted CheckDispatchBest to actually compare the final types against the given types, it exposed discrepancies like this that I fixed. In the logic here, for add/subtract, we do not scale up with the scales are the same: https://github.com/apache/arrow/blob/3317f83526cf6cfc6c749748b3e836114262a8d0/cpp/src/arrow/compute/kernels/codegen_internal.cc#L268-L273\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-22T18:44:46.468+0000",
                    "updated": "2021-09-22T18:44:46.468+0000",
                    "started": "2021-09-22T18:44:46.468+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "654219",
                    "issueId": "13390776"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/worklog/656331",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11080:\nURL: https://github.com/apache/arrow/pull/11080#issuecomment-929518333\n\n\n   Just a ping here for either @pitrou or @bkietz :slightly_smiling_face: \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T18:32:02.037+0000",
                    "updated": "2021-09-28T18:32:02.037+0000",
                    "started": "2021-09-28T18:32:02.037+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656331",
                    "issueId": "13390776"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/worklog/656522",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11080:\nURL: https://github.com/apache/arrow/pull/11080#issuecomment-929518333\n\n\n   Just a ping here for either @pitrou or @bkietz :slightly_smiling_face: \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T19:56:44.444+0000",
                    "updated": "2021-09-28T19:56:44.444+0000",
                    "started": "2021-09-28T19:56:44.444+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656522",
                    "issueId": "13390776"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/worklog/657048",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #11080:\nURL: https://github.com/apache/arrow/pull/11080\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-29T08:04:23.646+0000",
                    "updated": "2021-09-29T08:04:23.646+0000",
                    "started": "2021-09-29T08:04:23.645+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657048",
                    "issueId": "13390776"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/worklog/658046",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #11080:\nURL: https://github.com/apache/arrow/pull/11080\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T00:48:45.231+0000",
                    "updated": "2021-09-30T00:48:45.231+0000",
                    "started": "2021-09-30T00:48:45.231+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "658046",
                    "issueId": "13390776"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 12000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5aa5437d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@414716b4[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4d7a2002[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@34f16daf[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@75b11a19[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@698a916f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@756cc66c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4a4f417b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3753ebf9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@aef1595[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@19a3ed02[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@295733d4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Sep 29 08:04:22 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-09-29T08:04:22.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13390/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-07-19T21:22:24.000+0000",
        "updated": "2021-09-30T00:48:46.000+0000",
        "timeoriginalestimate": null,
        "description": "* Direct support for dictionaries (unifying dictionaries or building a new dictionary as necessary)\r\n * Fixed-length list\r\n * Union, struct, list, other variable-width types",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Improve type support for 'coalesce' kernel",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/comment/17419507",
                    "id": "17419507",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Will this fix also add list/struct support for \"choose\" and \"replace_with_mask\"?  They seem similar and lack the same type supports.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-09-24T00:22:37.328+0000",
                    "updated": "2021-09-24T00:22:37.328+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/comment/17419508",
                    "id": "17419508",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "No, 'choose' at least should be straightforward once this is done (they use the same underlying helpers); 'replace_with_mask' may need some refactoring (it should be able to use the same helpers). We should file separate issues.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-09-24T00:24:18.320+0000",
                    "updated": "2021-09-24T00:24:18.320+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390776/comment/17421997",
                    "id": "17421997",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 11080\n[https://github.com/apache/arrow/pull/11080]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-09-29T08:04:22.066+0000",
                    "updated": "2021-09-29T08:04:22.066+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0t534:",
        "customfield_12314139": null
    }
}