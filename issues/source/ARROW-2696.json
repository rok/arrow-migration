{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13165376",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13165376",
    "key": "ARROW-2696",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vancobuca",
            "name": "vancobuca",
            "key": "vancobuca",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=vancobuca&avatarId=33916",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=vancobuca&avatarId=33916",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=vancobuca&avatarId=33916",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=vancobuca&avatarId=33916"
            },
            "displayName": "Vanco Buca",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vancobuca",
            "name": "vancobuca",
            "key": "vancobuca",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=vancobuca&avatarId=33916",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=vancobuca&avatarId=33916",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=vancobuca&avatarId=33916",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=vancobuca&avatarId=33916"
            },
            "displayName": "Vanco Buca",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vancobuca",
            "name": "vancobuca",
            "key": "vancobuca",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=vancobuca&avatarId=33916",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=vancobuca&avatarId=33916",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=vancobuca&avatarId=33916",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=vancobuca&avatarId=33916"
            },
            "displayName": "Vanco Buca",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2696/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 12,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13165376/worklog/111177",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vancobuca commented on a change in pull request #2133: ARROW-2696: [JAVA] enhance AllocationListener with an onFailedAllocation() call\nURL: https://github.com/apache/arrow/pull/2133#discussion_r194838935\n \n \n\n ##########\n File path: java/memory/src/test/java/org/apache/arrow/memory/TestBaseAllocator.java\n ##########\n @@ -222,7 +222,122 @@ public void testRootAllocator_createChildDontClose() throws Exception {\n     }\n   }\n \n-  private static void allocateAndFree(final BufferAllocator allocator) {\n+  // Allocation listener\n+  // It counts the number of times it has been invoked, and how much memory allocation it has seen\n+  // When set to 'expand on fail', it attempts to expand the associated allocator's limit\n+  static class TestAllocationListener implements AllocationListener {\n \n Review comment:\n   done\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-06-12T18:13:18.543+0000",
                    "updated": "2018-06-12T18:13:18.543+0000",
                    "started": "2018-06-12T18:13:18.543+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "111177",
                    "issueId": "13165376"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13165376/worklog/111182",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vancobuca commented on a change in pull request #2133: ARROW-2696: [JAVA] enhance AllocationListener with an onFailedAllocation() call\nURL: https://github.com/apache/arrow/pull/2133#discussion_r194841037\n \n \n\n ##########\n File path: java/memory/src/test/java/org/apache/arrow/memory/TestBaseAllocator.java\n ##########\n @@ -222,7 +222,122 @@ public void testRootAllocator_createChildDontClose() throws Exception {\n     }\n   }\n \n-  private static void allocateAndFree(final BufferAllocator allocator) {\n+  // Allocation listener\n+  // It counts the number of times it has been invoked, and how much memory allocation it has seen\n+  // When set to 'expand on fail', it attempts to expand the associated allocator's limit\n+  static class TestAllocationListener implements AllocationListener {\n+    private int numCalls;\n+    private long totalMem;\n+    private boolean expandOnFail;\n+    BufferAllocator expandAlloc;\n+    long expandLimit;\n+\n+    TestAllocationListener() {\n+      this.numCalls = 0;\n+      this.totalMem = 0;\n+      this.expandOnFail = false;\n+      this.expandAlloc = null;\n+      this.expandLimit = 0;\n+    }\n+\n+    @Override\n+    public void onAllocation(long size) {\n+      numCalls++;\n+      totalMem += size;\n+    }\n+\n+    @Override\n+    public boolean onFailedAllocation(long size,  Accountant.AllocationOutcome outcome) {\n+      if (expandOnFail) {\n+        expandAlloc.setLimit(expandLimit);\n+        return true;\n+      }\n+      return false;\n+    }\n+\n+    void setExpandOnFail(BufferAllocator expandAlloc, long expandLimit) {\n+      this.expandOnFail = true;\n+      this.expandAlloc = expandAlloc;\n+      this.expandLimit = expandLimit;\n+    }\n+\n+    int getNumCalls() {\n+      return numCalls;\n \n Review comment:\n   True, and in fact I had it like that initially. However, I found I was repeating code again and again in the mocks, and it was much easier to just build a custom listener.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-06-12T18:28:36.391+0000",
                    "updated": "2018-06-12T18:28:36.391+0000",
                    "started": "2018-06-12T18:28:36.391+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "111182",
                    "issueId": "13165376"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13165376/worklog/111183",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vancobuca commented on a change in pull request #2133: ARROW-2696: [JAVA] enhance AllocationListener with an onFailedAllocation() call\nURL: https://github.com/apache/arrow/pull/2133#discussion_r194840891\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\n ##########\n @@ -333,22 +337,32 @@ public BufferAllocator newChildAllocator(\n       final String name,\n       final long initReservation,\n       final long maxAllocation) {\n+    return newChildAllocator(name, this.listener, initReservation, maxAllocation);\n+  }\n+\n+  @Override\n+  public BufferAllocator newChildAllocator(\n+      final String name,\n+      final AllocationListener listener,\n+      final long initReservation,\n+      final long maxAllocation) {\n     assertOpen();\n \n-    final ChildAllocator childAllocator = new ChildAllocator(this, name, initReservation,\n-        maxAllocation);\n+    final ChildAllocator childAllocator = new ChildAllocator(listener,this, name, initReservation,\n+                                                             maxAllocation);\n \n Review comment:\n   Fixed. Please note that this passed the check style\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-06-12T18:28:36.535+0000",
                    "updated": "2018-06-12T18:28:36.535+0000",
                    "started": "2018-06-12T18:28:36.534+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "111183",
                    "issueId": "13165376"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13165376/worklog/111184",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vancobuca commented on a change in pull request #2133: ARROW-2696: [JAVA] enhance AllocationListener with an onFailedAllocation() call\nURL: https://github.com/apache/arrow/pull/2133#discussion_r194843567\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\n ##########\n @@ -72,7 +72,7 @@ protected BaseAllocator(\n     this(parentAllocator.listener, parentAllocator, name, initReservation, maxAllocation);\n   }\n \n-  private BaseAllocator(\n+  protected BaseAllocator(\n \n Review comment:\n   I'm not sure how to update/consolidate, short of removing the previous two protected constructors -- which breaks the public interface, and thus probably not the best idea. I cannot use the existing constructors since I need to support listener instances that are not common to the entire hierarchy.\r\n   Suggestions are welcome. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-06-12T18:28:36.698+0000",
                    "updated": "2018-06-12T18:28:36.698+0000",
                    "started": "2018-06-12T18:28:36.697+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "111184",
                    "issueId": "13165376"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13165376/worklog/111185",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vancobuca commented on a change in pull request #2133: ARROW-2696: [JAVA] enhance AllocationListener with an onFailedAllocation() call\nURL: https://github.com/apache/arrow/pull/2133#discussion_r194841549\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\n ##########\n @@ -275,6 +275,10 @@ public ArrowBuf buffer(final int initialRequestSize, BufferManager manager) {\n         nextPowerOfTwo(initialRequestSize)\n         : initialRequestSize;\n     AllocationOutcome outcome = this.allocateBytes(actualRequestSize);\n+    if (!outcome.isOk() && listener.onFailedAllocation(actualRequestSize, outcome)) {\n+      // Second try, in case the listener can do something about it\n+      outcome = this.allocateBytes(actualRequestSize);\n+    }\n     if (!outcome.isOk()) {\n \n Review comment:\n   done\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-06-12T18:28:36.717+0000",
                    "updated": "2018-06-12T18:28:36.717+0000",
                    "started": "2018-06-12T18:28:36.717+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "111185",
                    "issueId": "13165376"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13165376/worklog/111271",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2133: ARROW-2696: [JAVA] enhance AllocationListener with an onFailedAllocation() call\nURL: https://github.com/apache/arrow/pull/2133#issuecomment-396403014\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2133?src=pr&el=h1) Report\n   > Merging [#2133](https://codecov.io/gh/apache/arrow/pull/2133?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/34890cc133d6761bdedc53e0b88374ccd7641c55?src=pr&el=desc) will **increase** coverage by `0.01%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2133/graphs/tree.svg?token=LpTCFbqVT1&src=pr&height=150&width=650)](https://codecov.io/gh/apache/arrow/pull/2133?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2133      +/-   ##\n   ==========================================\n   + Coverage   86.39%   86.41%   +0.01%     \n   ==========================================\n     Files         242      242              \n     Lines       41475    41488      +13     \n   ==========================================\n   + Hits        35832    35851      +19     \n   + Misses       5643     5637       -6\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2133?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [python/pyarrow/tests/test\\_table.py](https://codecov.io/gh/apache/arrow/pull/2133/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF90YWJsZS5weQ==) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_parquet.py](https://codecov.io/gh/apache/arrow/pull/2133/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9wYXJxdWV0LnB5) | `95.54% <0%> (+0.01%)` | :arrow_up: |\n   | [python/pyarrow/table.pxi](https://codecov.io/gh/apache/arrow/pull/2133/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGFibGUucHhp) | `69% <0%> (+0.33%)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/cast.cc](https://codecov.io/gh/apache/arrow/pull/2133/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvY2FzdC5jYw==) | `89.87% <0%> (+0.51%)` | :arrow_up: |\n   | [python/pyarrow/public-api.pxi](https://codecov.io/gh/apache/arrow/pull/2133/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvcHVibGljLWFwaS5weGk=) | `52.17% <0%> (+2.89%)` | :arrow_up: |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2133?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2133?src=pr&el=footer). Last update [34890cc...fc97506](https://codecov.io/gh/apache/arrow/pull/2133?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-06-12T20:48:27.024+0000",
                    "updated": "2018-06-12T20:48:27.024+0000",
                    "started": "2018-06-12T20:48:27.024+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "111271",
                    "issueId": "13165376"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13165376/worklog/111321",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2133: ARROW-2696: [JAVA] enhance AllocationListener with an onFailedAllocation() call\nURL: https://github.com/apache/arrow/pull/2133#discussion_r194911626\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\n ##########\n @@ -333,9 +339,18 @@ public BufferAllocator newChildAllocator(\n       final String name,\n       final long initReservation,\n       final long maxAllocation) {\n+    return newChildAllocator(name, this.listener, initReservation, maxAllocation);\n+  }\n+\n+  @Override\n+  public BufferAllocator newChildAllocator(\n+      final String name,\n+      final AllocationListener listener,\n+      final long initReservation,\n+      final long maxAllocation) {\n     assertOpen();\n \n-    final ChildAllocator childAllocator = new ChildAllocator(this, name, initReservation,\n+    final ChildAllocator childAllocator = new ChildAllocator(listener,this, name, initReservation,\n \n Review comment:\n   missing a space between `listener,this`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-06-12T23:09:13.786+0000",
                    "updated": "2018-06-12T23:09:13.786+0000",
                    "started": "2018-06-12T23:09:13.785+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "111321",
                    "issueId": "13165376"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13165376/worklog/111574",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2133: ARROW-2696: [JAVA] enhance AllocationListener with an onFailedAllocation() call\nURL: https://github.com/apache/arrow/pull/2133#issuecomment-396403014\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2133?src=pr&el=h1) Report\n   > Merging [#2133](https://codecov.io/gh/apache/arrow/pull/2133?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/34890cc133d6761bdedc53e0b88374ccd7641c55?src=pr&el=desc) will **increase** coverage by `0.02%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2133/graphs/tree.svg?token=LpTCFbqVT1&width=650&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2133?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2133      +/-   ##\n   ==========================================\n   + Coverage   86.39%   86.41%   +0.02%     \n   ==========================================\n     Files         242      242              \n     Lines       41475    41496      +21     \n   ==========================================\n   + Hits        35832    35859      +27     \n   + Misses       5643     5637       -6\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2133?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [python/pyarrow/tests/test\\_table.py](https://codecov.io/gh/apache/arrow/pull/2133/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF90YWJsZS5weQ==) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_parquet.py](https://codecov.io/gh/apache/arrow/pull/2133/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9wYXJxdWV0LnB5) | `95.54% <0%> (+0.01%)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_convert\\_pandas.py](https://codecov.io/gh/apache/arrow/pull/2133/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9jb252ZXJ0X3BhbmRhcy5weQ==) | `94.85% <0%> (+0.01%)` | :arrow_up: |\n   | [python/pyarrow/pandas\\_compat.py](https://codecov.io/gh/apache/arrow/pull/2133/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvcGFuZGFzX2NvbXBhdC5weQ==) | `97.85% <0%> (+0.02%)` | :arrow_up: |\n   | [python/pyarrow/table.pxi](https://codecov.io/gh/apache/arrow/pull/2133/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGFibGUucHhp) | `69% <0%> (+0.33%)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/cast.cc](https://codecov.io/gh/apache/arrow/pull/2133/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvY2FzdC5jYw==) | `89.87% <0%> (+0.51%)` | :arrow_up: |\n   | [python/pyarrow/public-api.pxi](https://codecov.io/gh/apache/arrow/pull/2133/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvcHVibGljLWFwaS5weGk=) | `52.17% <0%> (+2.89%)` | :arrow_up: |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2133?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2133?src=pr&el=footer). Last update [34890cc...ac0b81f](https://codecov.io/gh/apache/arrow/pull/2133?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-06-13T17:39:32.194+0000",
                    "updated": "2018-06-13T17:39:32.194+0000",
                    "started": "2018-06-13T17:39:32.194+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "111574",
                    "issueId": "13165376"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13165376/worklog/111585",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jacques-n commented on a change in pull request #2133: ARROW-2696: [JAVA] enhance AllocationListener with an onFailedAllocation() call\nURL: https://github.com/apache/arrow/pull/2133#discussion_r195181913\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\n ##########\n @@ -72,7 +72,7 @@ protected BaseAllocator(\n     this(parentAllocator.listener, parentAllocator, name, initReservation, maxAllocation);\n   }\n \n-  private BaseAllocator(\n+  protected BaseAllocator(\n \n Review comment:\n   I think it is okay changing the constructor signature of BaseAllocator and consolidate overlap\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-06-13T18:02:44.728+0000",
                    "updated": "2018-06-13T18:02:44.728+0000",
                    "started": "2018-06-13T18:02:44.727+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "111585",
                    "issueId": "13165376"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13165376/worklog/111586",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jacques-n commented on a change in pull request #2133: ARROW-2696: [JAVA] enhance AllocationListener with an onFailedAllocation() call\nURL: https://github.com/apache/arrow/pull/2133#discussion_r195182005\n \n \n\n ##########\n File path: java/memory/src/test/java/org/apache/arrow/memory/TestBaseAllocator.java\n ##########\n @@ -222,7 +222,122 @@ public void testRootAllocator_createChildDontClose() throws Exception {\n     }\n   }\n \n-  private static void allocateAndFree(final BufferAllocator allocator) {\n+  // Allocation listener\n+  // It counts the number of times it has been invoked, and how much memory allocation it has seen\n+  // When set to 'expand on fail', it attempts to expand the associated allocator's limit\n+  static class TestAllocationListener implements AllocationListener {\n+    private int numCalls;\n+    private long totalMem;\n+    private boolean expandOnFail;\n+    BufferAllocator expandAlloc;\n+    long expandLimit;\n+\n+    TestAllocationListener() {\n+      this.numCalls = 0;\n+      this.totalMem = 0;\n+      this.expandOnFail = false;\n+      this.expandAlloc = null;\n+      this.expandLimit = 0;\n+    }\n+\n+    @Override\n+    public void onAllocation(long size) {\n+      numCalls++;\n+      totalMem += size;\n+    }\n+\n+    @Override\n+    public boolean onFailedAllocation(long size,  Accountant.AllocationOutcome outcome) {\n+      if (expandOnFail) {\n+        expandAlloc.setLimit(expandLimit);\n+        return true;\n+      }\n+      return false;\n+    }\n+\n+    void setExpandOnFail(BufferAllocator expandAlloc, long expandLimit) {\n+      this.expandOnFail = true;\n+      this.expandAlloc = expandAlloc;\n+      this.expandLimit = expandLimit;\n+    }\n+\n+    int getNumCalls() {\n+      return numCalls;\n \n Review comment:\n   ack\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-06-13T18:03:00.974+0000",
                    "updated": "2018-06-13T18:03:00.974+0000",
                    "started": "2018-06-13T18:03:00.974+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "111586",
                    "issueId": "13165376"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13165376/worklog/111618",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2133: ARROW-2696: [JAVA] enhance AllocationListener with an onFailedAllocation() call\nURL: https://github.com/apache/arrow/pull/2133#issuecomment-396403014\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2133?src=pr&el=h1) Report\n   > Merging [#2133](https://codecov.io/gh/apache/arrow/pull/2133?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/34890cc133d6761bdedc53e0b88374ccd7641c55?src=pr&el=desc) will **increase** coverage by `0.02%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2133/graphs/tree.svg?src=pr&token=LpTCFbqVT1&width=650&height=150)](https://codecov.io/gh/apache/arrow/pull/2133?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2133      +/-   ##\n   ==========================================\n   + Coverage   86.39%   86.41%   +0.02%     \n   ==========================================\n     Files         242      242              \n     Lines       41475    41496      +21     \n   ==========================================\n   + Hits        35832    35859      +27     \n   + Misses       5643     5637       -6\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2133?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [python/pyarrow/tests/test\\_table.py](https://codecov.io/gh/apache/arrow/pull/2133/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF90YWJsZS5weQ==) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_parquet.py](https://codecov.io/gh/apache/arrow/pull/2133/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9wYXJxdWV0LnB5) | `95.54% <0%> (+0.01%)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_convert\\_pandas.py](https://codecov.io/gh/apache/arrow/pull/2133/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9jb252ZXJ0X3BhbmRhcy5weQ==) | `94.85% <0%> (+0.01%)` | :arrow_up: |\n   | [python/pyarrow/pandas\\_compat.py](https://codecov.io/gh/apache/arrow/pull/2133/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvcGFuZGFzX2NvbXBhdC5weQ==) | `97.85% <0%> (+0.02%)` | :arrow_up: |\n   | [python/pyarrow/table.pxi](https://codecov.io/gh/apache/arrow/pull/2133/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGFibGUucHhp) | `69% <0%> (+0.33%)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/cast.cc](https://codecov.io/gh/apache/arrow/pull/2133/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvY2FzdC5jYw==) | `89.87% <0%> (+0.51%)` | :arrow_up: |\n   | [python/pyarrow/public-api.pxi](https://codecov.io/gh/apache/arrow/pull/2133/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvcHVibGljLWFwaS5weGk=) | `52.17% <0%> (+2.89%)` | :arrow_up: |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2133?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2133?src=pr&el=footer). Last update [34890cc...4f64f96](https://codecov.io/gh/apache/arrow/pull/2133?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-06-13T19:14:55.783+0000",
                    "updated": "2018-06-13T19:14:55.783+0000",
                    "started": "2018-06-13T19:14:55.783+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "111618",
                    "issueId": "13165376"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13165376/worklog/112394",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "siddharthteotia closed pull request #2133: ARROW-2696: [JAVA] enhance AllocationListener with an onFailedAllocation() call\nURL: https://github.com/apache/arrow/pull/2133\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/java/memory/src/main/java/org/apache/arrow/memory/AllocationListener.java b/java/memory/src/main/java/org/apache/arrow/memory/AllocationListener.java\nindex d36cb37fc2..de181df247 100644\n--- a/java/memory/src/main/java/org/apache/arrow/memory/AllocationListener.java\n+++ b/java/memory/src/main/java/org/apache/arrow/memory/AllocationListener.java\n@@ -21,8 +21,8 @@\n /**\n  * An allocation listener being notified for allocation/deallocation\n  * <p>\n- * It is expected to be called from multiple threads and as such,\n- * provider should take care of making the implementation thread-safe\n+ * It might be called from multiple threads if the allocator hierarchy shares a listener, in which\n+ * case, the provider should take care of making the implementation thread-safe.\n  */\n public interface AllocationListener {\n \n@@ -30,6 +30,11 @@\n     @Override\n     public void onAllocation(long size) {\n     }\n+\n+    @Override\n+    public boolean onFailedAllocation(long size, Accountant.AllocationOutcome outcome) {\n+      return false;\n+    }\n   };\n \n   /**\n@@ -39,4 +44,15 @@ public void onAllocation(long size) {\n    */\n   void onAllocation(long size);\n \n+  /**\n+   * Called whenever an allocation failed, giving the caller a chance to create some space in the allocator\n+   * (either by freeing some resource, or by changing the limit), and, if successful, allowing the allocator\n+   * to retry the allocation.\n+   *\n+   * @param size     the buffer size that was being allocated\n+   * @param outcome  the outcome of the failed allocation. Carries information of what failed\n+   * @return true, if the allocation can be retried; false if the allocation should fail\n+   */\n+  boolean onFailedAllocation(long size, Accountant.AllocationOutcome outcome);\n+\n }\ndiff --git a/java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java b/java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\nindex 4804b6b02a..6acbc1e12f 100644\n--- a/java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\n+++ b/java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\n@@ -56,28 +56,21 @@\n   private final HistoricalLog historicalLog;\n   private volatile boolean isClosed = false; // the allocator has been closed\n \n+  /**\n+   * Initialize an allocator\n+   * @param parentAllocator   parent allocator. null if defining a root allocator\n+   * @param listener          listener callback. Must be non-null -- use {@link AllocationListener#NOOP} if no listener\n+   *                          desired\n+   * @param name              name of this allocator\n+   * @param initReservation   initial reservation. Cannot be modified after construction\n+   * @param maxAllocation     limit. Allocations past the limit fail. Can be modified after construction\n+   */\n   protected BaseAllocator(\n-      final AllocationListener listener,\n-      final String name,\n-      final long initReservation,\n-      final long maxAllocation) throws OutOfMemoryException {\n-    this(listener, null, name, initReservation, maxAllocation);\n-  }\n-\n-  protected BaseAllocator(\n-      final BaseAllocator parentAllocator,\n-      final String name,\n-      final long initReservation,\n-      final long maxAllocation) throws OutOfMemoryException {\n-    this(parentAllocator.listener, parentAllocator, name, initReservation, maxAllocation);\n-  }\n-\n-  private BaseAllocator(\n-      final AllocationListener listener,\n-      final BaseAllocator parentAllocator,\n-      final String name,\n-      final long initReservation,\n-      final long maxAllocation) throws OutOfMemoryException {\n+          final BaseAllocator parentAllocator,\n+          final AllocationListener listener,\n+          final String name,\n+          final long initReservation,\n+          final long maxAllocation) throws OutOfMemoryException {\n     super(parentAllocator, initReservation, maxAllocation);\n \n     this.listener = listener;\n@@ -276,7 +269,13 @@ public ArrowBuf buffer(final int initialRequestSize, BufferManager manager) {\n         : initialRequestSize;\n     AllocationOutcome outcome = this.allocateBytes(actualRequestSize);\n     if (!outcome.isOk()) {\n-      throw new OutOfMemoryException(createErrorMsg(this, actualRequestSize, initialRequestSize));\n+      if (listener.onFailedAllocation(actualRequestSize, outcome)) {\n+        // Second try, in case the listener can do something about it\n+        outcome = this.allocateBytes(actualRequestSize);\n+      }\n+      if (!outcome.isOk()) {\n+        throw new OutOfMemoryException(createErrorMsg(this, actualRequestSize, initialRequestSize));\n+      }\n     }\n \n     boolean success = false;\n@@ -333,9 +332,18 @@ public BufferAllocator newChildAllocator(\n       final String name,\n       final long initReservation,\n       final long maxAllocation) {\n+    return newChildAllocator(name, this.listener, initReservation, maxAllocation);\n+  }\n+\n+  @Override\n+  public BufferAllocator newChildAllocator(\n+      final String name,\n+      final AllocationListener listener,\n+      final long initReservation,\n+      final long maxAllocation) {\n     assertOpen();\n \n-    final ChildAllocator childAllocator = new ChildAllocator(this, name, initReservation,\n+    final ChildAllocator childAllocator = new ChildAllocator(listener, this, name, initReservation,\n         maxAllocation);\n \n     if (DEBUG) {\ndiff --git a/java/memory/src/main/java/org/apache/arrow/memory/BufferAllocator.java b/java/memory/src/main/java/org/apache/arrow/memory/BufferAllocator.java\nindex b23a6e4bd8..94ea62e6aa 100644\n--- a/java/memory/src/main/java/org/apache/arrow/memory/BufferAllocator.java\n+++ b/java/memory/src/main/java/org/apache/arrow/memory/BufferAllocator.java\n@@ -68,6 +68,17 @@\n    */\n   public BufferAllocator newChildAllocator(String name, long initReservation, long maxAllocation);\n \n+  /**\n+   * Create a new child allocator.\n+   *\n+   * @param name            the name of the allocator.\n+   * @param listener        allocation listener for the newly created child\n+   * @param initReservation the initial space reservation (obtained from this allocator)\n+   * @param maxAllocation   maximum amount of space the new allocator can allocate\n+   * @return the new allocator, or null if it can't be created\n+   */\n+  public BufferAllocator newChildAllocator(String name, AllocationListener listener, long initReservation, long maxAllocation);\n+\n   /**\n    * Close and release all buffers generated from this buffer pool.\n    *\ndiff --git a/java/memory/src/main/java/org/apache/arrow/memory/ChildAllocator.java b/java/memory/src/main/java/org/apache/arrow/memory/ChildAllocator.java\nindex f9a6dc72ec..03ec268d35 100644\n--- a/java/memory/src/main/java/org/apache/arrow/memory/ChildAllocator.java\n+++ b/java/memory/src/main/java/org/apache/arrow/memory/ChildAllocator.java\n@@ -32,6 +32,7 @@\n   /**\n    * Constructor.\n    *\n+   * @param listener        Allocation listener to be used in this child\n    * @param parentAllocator parent allocator -- the one creating this child\n    * @param name            the name of this child allocator\n    * @param initReservation initial amount of space to reserve (obtained from the parent)\n@@ -41,11 +42,12 @@\n    *                        allocation policy in force, even less memory may be available\n    */\n   ChildAllocator(\n+      AllocationListener listener,\n       BaseAllocator parentAllocator,\n       String name,\n       long initReservation,\n       long maxAllocation) {\n-    super(parentAllocator, name, initReservation, maxAllocation);\n+    super(parentAllocator, listener, name, initReservation, maxAllocation);\n   }\n \n \ndiff --git a/java/memory/src/main/java/org/apache/arrow/memory/RootAllocator.java b/java/memory/src/main/java/org/apache/arrow/memory/RootAllocator.java\nindex 1dc6bf0c92..161b81a58b 100644\n--- a/java/memory/src/main/java/org/apache/arrow/memory/RootAllocator.java\n+++ b/java/memory/src/main/java/org/apache/arrow/memory/RootAllocator.java\n@@ -31,7 +31,7 @@ public RootAllocator(final long limit) {\n   }\n \n   public RootAllocator(final AllocationListener listener, final long limit) {\n-    super(listener, \"ROOT\", 0, limit);\n+    super(null, listener, \"ROOT\", 0, limit);\n   }\n \n   /**\ndiff --git a/java/memory/src/test/java/org/apache/arrow/memory/TestBaseAllocator.java b/java/memory/src/test/java/org/apache/arrow/memory/TestBaseAllocator.java\nindex 76f2c501cf..62b0046b2a 100644\n--- a/java/memory/src/test/java/org/apache/arrow/memory/TestBaseAllocator.java\n+++ b/java/memory/src/test/java/org/apache/arrow/memory/TestBaseAllocator.java\n@@ -222,7 +222,122 @@ public void testRootAllocator_createChildDontClose() throws Exception {\n     }\n   }\n \n-  private static void allocateAndFree(final BufferAllocator allocator) {\n+  // Allocation listener\n+  // It counts the number of times it has been invoked, and how much memory allocation it has seen\n+  // When set to 'expand on fail', it attempts to expand the associated allocator's limit\n+  private static final class TestAllocationListener implements AllocationListener {\n+    private int numCalls;\n+    private long totalMem;\n+    private boolean expandOnFail;\n+    BufferAllocator expandAlloc;\n+    long expandLimit;\n+\n+    TestAllocationListener() {\n+      this.numCalls = 0;\n+      this.totalMem = 0;\n+      this.expandOnFail = false;\n+      this.expandAlloc = null;\n+      this.expandLimit = 0;\n+    }\n+\n+    @Override\n+    public void onAllocation(long size) {\n+      numCalls++;\n+      totalMem += size;\n+    }\n+\n+    @Override\n+    public boolean onFailedAllocation(long size,  Accountant.AllocationOutcome outcome) {\n+      if (expandOnFail) {\n+        expandAlloc.setLimit(expandLimit);\n+        return true;\n+      }\n+      return false;\n+    }\n+\n+    void setExpandOnFail(BufferAllocator expandAlloc, long expandLimit) {\n+      this.expandOnFail = true;\n+      this.expandAlloc = expandAlloc;\n+      this.expandLimit = expandLimit;\n+    }\n+\n+    int getNumCalls() {\n+      return numCalls;\n+    }\n+\n+    long getTotalMem() {\n+      return totalMem;\n+    }\n+  }\n+\n+  @Test\n+  public void testRootAllocator_listeners() throws Exception {\n+    TestAllocationListener l1 = new TestAllocationListener();\n+    assertEquals(0, l1.getNumCalls());\n+    assertEquals(0, l1.getTotalMem());\n+    TestAllocationListener l2 = new TestAllocationListener();\n+    assertEquals(0, l2.getNumCalls());\n+    assertEquals(0, l2.getTotalMem());\n+    // root and first-level child share the first listener\n+    // second-level and third-level child share the second listener\n+    try (final RootAllocator rootAllocator = new RootAllocator(l1, MAX_ALLOCATION)) {\n+      try (final BufferAllocator c1 = rootAllocator.newChildAllocator(\"c1\", 0, MAX_ALLOCATION)) {\n+        final ArrowBuf buf1 = c1.buffer(16);\n+        assertNotNull(\"allocation failed\", buf1);\n+        assertEquals(1, l1.getNumCalls());\n+        assertEquals(16, l1.getTotalMem());\n+        buf1.release();\n+        try (final BufferAllocator c2 = c1.newChildAllocator(\"c2\", l2, 0, MAX_ALLOCATION)) {\n+          final ArrowBuf buf2 = c2.buffer(32);\n+          assertNotNull(\"allocation failed\", buf2);\n+          assertEquals(1, l1.getNumCalls());\n+          assertEquals(16, l1.getTotalMem());\n+          assertEquals(1, l2.getNumCalls());\n+          assertEquals(32, l2.getTotalMem());\n+          buf2.release();\n+          try (final BufferAllocator c3 = c2.newChildAllocator(\"c3\", 0, MAX_ALLOCATION)) {\n+            final ArrowBuf buf3 = c3.buffer(64);\n+            assertNotNull(\"allocation failed\", buf3);\n+            assertEquals(1, l1.getNumCalls());\n+            assertEquals(16, l1.getTotalMem());\n+            assertEquals(2, l2.getNumCalls());\n+            assertEquals(32 + 64, l2.getTotalMem());\n+            buf3.release();\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testRootAllocator_listenerAllocationFail() throws Exception {\n+    TestAllocationListener l1 = new TestAllocationListener();\n+    assertEquals(0, l1.getNumCalls());\n+    assertEquals(0, l1.getTotalMem());\n+    // Test attempts to allocate too much from a child whose limit is set to half of the max allocation\n+    // The listener's callback triggers, expanding the child allocator's limit, so then the allocation succeeds\n+    try (final RootAllocator rootAllocator = new RootAllocator(MAX_ALLOCATION)) {\n+      try (final BufferAllocator c1 = rootAllocator.newChildAllocator(\"c1\", l1,0, MAX_ALLOCATION / 2)) {\n+        try {\n+          c1.buffer(MAX_ALLOCATION);\n+          fail(\"allocated memory beyond max allowed\");\n+        } catch (OutOfMemoryException e) {\n+          // expected\n+        }\n+        assertEquals(0, l1.getNumCalls());\n+        assertEquals(0, l1.getTotalMem());\n+\n+        l1.setExpandOnFail(c1, MAX_ALLOCATION);\n+        ArrowBuf arrowBuf = c1.buffer(MAX_ALLOCATION);\n+        assertNotNull(\"allocation failed\", arrowBuf);\n+        assertEquals(1, l1.getNumCalls());\n+        assertEquals(MAX_ALLOCATION, l1.getTotalMem());\n+        arrowBuf.release();\n+      }\n+    }\n+  }\n+\n+    private static void allocateAndFree(final BufferAllocator allocator) {\n     final ArrowBuf arrowBuf = allocator.buffer(512);\n     assertNotNull(\"allocation failed\", arrowBuf);\n     arrowBuf.release();\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-06-15T17:28:04.722+0000",
                    "updated": "2018-06-15T17:28:04.722+0000",
                    "started": "2018-06-15T17:28:04.722+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "112394",
                    "issueId": "13165376"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3d917fde[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4aaa0131[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20c4d3cd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3a7dfd6d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6d52d7a4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@123a1488[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1466f7b9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4125f6cd[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a31f6ba[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@786d3b20[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b95c0ab[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@35e8d68a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7200,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jul 02 17:57:52 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-07-02T17:57:52.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2696/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-06-11T17:16:38.000+0000",
        "updated": "2018-07-27T18:43:18.000+0000",
        "timeoriginalestimate": null,
        "description": "If an allocation fails, there might be an action taken by user code that will free up some memory before the allocation can be retried again. This action could include flushing some temporary buffers, getting rid of some temporarily cached data, or even spilling state to disk.\r\n\r\nToday's code is forced to catch out-of-memory exceptions, and then retry the operation at a high level. A more elegant way to do this is to have a callback whenever allocation failed. The callback would inform the allocator whether or not to retry the allocation.\r\n\r\nSince the allocator already has an AllocationListener, it makes sense to enhance the existing listener with a new method.\r\n\r\n{{The proposed signature is:}}\r\n\r\n{{\u00a0 boolean onAllocationFailed(long allocationSize);}}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[JAVA] enhance AllocationListener with an onFailedAllocation() call",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13165376/comment/16530243",
                    "id": "16530243",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=siddteotia",
                        "name": "siddteotia",
                        "key": "siddteotia",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=siddteotia&avatarId=32343",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=siddteotia&avatarId=32343",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=siddteotia&avatarId=32343",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=siddteotia&avatarId=32343"
                        },
                        "displayName": "Siddharth Teotia",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Resolved with PR\u00a0https://github.com/apache/arrow/pull/2133",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=siddteotia",
                        "name": "siddteotia",
                        "key": "siddteotia",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=siddteotia&avatarId=32343",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=siddteotia&avatarId=32343",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=siddteotia&avatarId=32343",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=siddteotia&avatarId=32343"
                        },
                        "displayName": "Siddharth Teotia",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-07-02T17:57:52.874+0000",
                    "updated": "2018-07-02T17:57:52.874+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3uqkf:",
        "customfield_12314139": null
    }
}