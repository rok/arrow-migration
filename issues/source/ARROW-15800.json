{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13431013",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431013",
    "key": "ARROW-15800",
    "fields": {
        "parent": {
            "id": "13431014",
            "key": "ARROW-15801",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13431014",
            "fields": {
                "summary": "[R] Implement bindings for lubridate date-time helpers",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12638988",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12638988",
                "type": {
                    "id": "12310660",
                    "name": "Completes",
                    "inward": "is fixed by",
                    "outward": "fixes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310660"
                },
                "outwardIssue": {
                    "id": "13431006",
                    "key": "ARROW-15799",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431006",
                    "fields": {
                        "summary": "[R] Update as.Date() to support an origin different from epoch",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            },
            {
                "id": "12636260",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12636260",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13417456",
                    "key": "ARROW-15098",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417456",
                    "fields": {
                        "summary": "[R] Add binding for lubridate::duration() and/or as.difftime()",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=dragosmg",
            "name": "dragosmg",
            "key": "dragosmg",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34061",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34061",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34061",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34061"
            },
            "displayName": "Drago\u0219 Moldovan-Gr\u00fcnfeld",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=dragosmg",
            "name": "dragosmg",
            "key": "dragosmg",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34061",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34061",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34061",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34061"
            },
            "displayName": "Drago\u0219 Moldovan-Gr\u00fcnfeld",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=dragosmg",
            "name": "dragosmg",
            "key": "dragosmg",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34061",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34061",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34061",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34061"
            },
            "displayName": "Drago\u0219 Moldovan-Gr\u00fcnfeld",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 35400,
            "total": 35400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 35400,
            "total": 35400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15800/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 59,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431013/worklog/745190",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12677:\nURL: https://github.com/apache/arrow/pull/12677#issuecomment-1074057986\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-21T15:41:44.964+0000",
                    "updated": "2022-03-21T15:41:44.964+0000",
                    "started": "2022-03-21T15:41:44.963+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745190",
                    "issueId": "13431013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431013/worklog/748859",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #12677:\nURL: https://github.com/apache/arrow/pull/12677#discussion_r836786450\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-funcs-datetime.R\n##########\n@@ -1213,3 +1213,203 @@ test_that(\"as.difftime()\", {\n       collect()\n   )\n })\n+\n+test_that(\"as.Date() converts successfully from date, timestamp, integer, char and double\", {\n+  test_df <- tibble::tibble(\n+    posixct_var = as.POSIXct(\"2022-02-25 00:00:01\", tz = \"Europe/London\"),\n+    date_var = as.Date(\"2022-02-25\"),\n+    character_ymd_var = \"2022-02-25 00:00:01\",\n+    character_ydm_var = \"2022/25/02 00:00:01\",\n+    integer_var = 32L,\n+    integerish_var = 32,\n+    double_var = 34.56\n+  )\n+\n+  # casting from POSIXct treated separately so we can skip on Windows\n+  # TODO move the test for casting from POSIXct below once ARROW-13168 is done\n+  compare_dplyr_binding(\n+    .input %>%\n+      mutate(\n+        date_dv = as.Date(date_var),\n+        date_char_ymd = as.Date(character_ymd_var, format = \"%Y-%m-%d %H:%M:%S\"),\n+        date_char_ydm = as.Date(character_ydm_var, format = \"%Y/%d/%m %H:%M:%S\"),\n+        date_int = as.Date(integer_var, origin = \"1970-01-01\"),\n+        date_integerish = as.Date(integerish_var, origin = \"1970-01-01\")\n+      ) %>%\n+      collect(),\n+    test_df\n+  )\n+\n+  # currently we do not support an origin different to \"1970-01-01\"\n+  compare_dplyr_binding(\n+    .input %>%\n+      mutate(date_int = as.Date(integer_var, origin = \"1970-01-03\")) %>%\n+      collect(),\n+    test_df,\n+    warning = TRUE\n+  )\n+\n+  # we do not support multiple tryFormats\n+  compare_dplyr_binding(\n+    .input %>%\n+      mutate(date_char_ymd = as.Date(character_ymd_var,\n+                                     tryFormats = c(\"%Y-%m-%d\", \"%Y/%m/%d\"))) %>%\n+      collect(),\n+    test_df,\n+    warning = TRUE\n+  )\n+\n+  expect_error(\n+    test_df %>%\n+      arrow_table() %>%\n+      mutate(date_char_ymd = as.Date(character_ymd_var)) %>%\n+      collect(),\n+    regexp = \"Failed to parse string: '2022-02-25 00:00:01' as a scalar of type timestamp[s]\",\n+    fixed = TRUE\n+  )\n+\n+  # we do not support as.Date() with double/ float (error surfaced from C++)\n+  expect_error(\n+    test_df %>%\n+      arrow_table() %>%\n+      mutate(date_double = as.Date(double_var, origin = \"1970-01-01\")) %>%\n+      collect()\n+  )\n+\n+  skip_on_os(\"windows\") # https://issues.apache.org/jira/browse/ARROW-13168\n+  compare_dplyr_binding(\n+    .input %>%\n+      mutate(\n+        date_pv = as.Date(posixct_var),\n+        date_pv_tz = as.Date(posixct_var, tz = \"Pacific/Marquesas\")\n+      ) %>%\n+      collect(),\n+    test_df\n+  )\n+})\n+\n+test_that(\"as_date()\", {\n+  test_df <- tibble::tibble(\n+    posixct_var = as.POSIXct(\"2022-02-25 00:00:01\", tz = \"Pacific/Marquesas\"),\n+    date_var = as.Date(\"2022-02-25\"),\n+    difference_date = ymd_hms(\"2010-08-03 00:50:50\", tz= \"Pacific/Marquesas\"),\n+    character_ymd_var = \"2022-02-25 00:00:01\",\n+    character_ydm_var = \"2022/25/02 00:00:01\",\n+    integer_var = 32L,\n+    integerish_var = 32,\n+    double_var = 34.56\n+  )\n\nReview comment:\n       This fixture looks very similar (though subtly different in some ways) as the one for `as.Date()` would it make sense to combine them into a single test_that block so they can use one fixture and we don't have to redefine it + make sure we update it in both places, etc?\r\n   \r\n   If that's not feasible, should we move the fixture out to `helpers-data.R` so that it's reusable?\n\n##########\nFile path: r/R/dplyr-funcs-datetime.R\n##########\n@@ -239,66 +303,108 @@ register_bindings_duration <- function() {\n                                        tz = \"UTC\") {\n     call_binding(\"make_datetime\", year, month, day, hour, min, sec, tz)\n   })\n-  register_binding(\"difftime\", function(time1,\n-                                        time2,\n-                                        tz,\n-                                        units = \"secs\") {\n-    if (units != \"secs\") {\n-      abort(\"`difftime()` with units other than `secs` not supported in Arrow\")\n-    }\n+  register_binding(\"as.Date\", function(x,\n+                                       format = NULL,\n+                                       tryFormats = \"%Y-%m-%d\",\n+                                       origin = \"1970-01-01\",\n+                                       tz = \"UTC\") {\n \n-    if (!missing(tz)) {\n-      warn(\"`tz` argument is not supported in Arrow, so it will be ignored\")\n+    # the origin argument will be better supported once we implement temporal\n+    # arithmetic (https://issues.apache.org/jira/browse/ARROW-14947)\n+    # TODO revisit once the above has been sorted\n+    if (call_binding(\"is.numeric\", x) & origin != \"1970-01-01\") {\n+      abort(\"`as.Date()` with an `origin` different than '1970-01-01' is not supported in Arrow\")\n     }\n \n-    # cast to timestamp if time1 and time2 are not dates or timestamp expressions\n-    # (the subtraction of which would output a `duration`)\n-    if (!call_binding(\"is.instant\", time1)) {\n-      time1 <- build_expr(\"cast\", time1, options = cast_options(to_type = timestamp(timezone = \"UTC\")))\n+    # this could be improved with tryFormats once strptime returns NA and we\n+    # can use coalesce - https://issues.apache.org/jira/browse/ARROW-15659\n+    # TODO revisit once https://issues.apache.org/jira/browse/ARROW-15659 is done\n+    if (is.null(format) && length(tryFormats) > 1) {\n+      abort(\"`as.Date()` with multiple `tryFormats` is not supported in Arrow\")\n     }\n \n-    if (!call_binding(\"is.instant\", time2)) {\n-      time2 <- build_expr(\"cast\", time2, options = cast_options(to_type = timestamp(timezone = \"UTC\")))\n-    }\n+    if (call_binding(\"is.Date\", x)) {\n+      return(x)\n \n-    # we need to go build the subtract expression instead of `time1 - time2` to\n-    # prevent complaints when we try to subtract an R object from an Expression\n-    subtract_output <- build_expr(\"-\", time1, time2)\n-    build_expr(\"cast\", subtract_output, options = cast_options(to_type = duration(\"s\")))\n+      # cast from POSIXct\n+    } else if (call_binding(\"is.POSIXct\", x)) {\n+      # base::as.Date() first converts to the desired timezone and then extracts\n+      # the date, which is why we need to go through timestamp() first\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = timestamp(timezone = tz)))\n+\n+      # cast from character\n+    } else if (call_binding(\"is.character\", x)) {\n+      format <- format %||% tryFormats[[1]]\n+      # unit = 0L is the identifier for seconds in valid_time32_units\n+      x <- build_expr(\"strptime\", x, options = list(format = format, unit = 0L))\n+\n+      # cast from numeric\n+    } else if (call_binding(\"is.numeric\", x) & !call_binding(\"is.integer\", x)) {\n+      # Arrow does not support direct casting from double to date32(), but for\n+      # integer-like values we can go via int32()\n+      # https://issues.apache.org/jira/browse/ARROW-15798\n+      # TODO revisit if arrow decides to support double -> date casting\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = int32()))\n+    }\n+    build_expr(\"cast\", x, options = cast_options(to_type = date32()))\n   })\n-  register_binding(\"as.difftime\", function(x,\n-                                           format = \"%X\",\n-                                           units = \"secs\") {\n-    # windows doesn't seem to like \"%X\"\n-    if (format == \"%X\" & tolower(Sys.info()[[\"sysname\"]]) == \"windows\") {\n-      format <- \"%H:%M:%S\"\n+  register_binding(\"as_date\", function(x,\n+                                       format = NULL,\n+                                       origin = \"1970-01-01\",\n+                                       tz = \"UTC\") {\n+    # the origin argument will be better supported once we implement temporal\n+    # arithmetic (https://issues.apache.org/jira/browse/ARROW-14947)\n+    # TODO revisit once the above has been sorted\n+    if (call_binding(\"is.numeric\", x) & origin != \"1970-01-01\") {\n+      abort(\"`as.Date()` with an `origin` different than '1970-01-01' is not supported in Arrow\")\n     }\n \n-    if (units != \"secs\") {\n-      abort(\"`as.difftime()` with units other than 'secs' not supported in Arrow\")\n+    # assume format is ISO if unspecified (to align with lubridate::as_date)\n+    if (is.null(format)) {\n+      format <- \"%Y-%m-%d\"\n     }\n \n-    if (call_binding(\"is.character\", x)) {\n-      x <- build_expr(\"strptime\", x, options = list(format = format, unit = 0L))\n-      # complex casting only due to cast type restrictions: time64 -> int64 -> duration(us)\n-      # and then we cast to duration (\"s\") at the end\n-      x <- x$cast(time64(\"us\"))$cast(int64())$cast(duration(\"us\"))\n-    }\n+    if (call_binding(\"is.Date\", x)) {\n+      return(x)\n \n-    # numeric -> duration not supported in Arrow yet so we use int64() as an\n-    # intermediate step\n-    # TODO revisit if https://issues.apache.org/jira/browse/ARROW-15862 results\n-    # in numeric -> duration support\n+      # cast from POSIXct\n+    } else if (call_binding(\"is.POSIXct\", x)) {\n+      # this is where as_date() differs from as.Date()\n+      if (!missing(tz)) {\n+        x <- build_expr(\"cast\", x, options = cast_options(to_type = timestamp(timezone = tz)))\n+      }\n+      # POSIXct is of type double -> we need this to prevent going down the\n+      # \"double\" branch\n+      x <- x\n+\n+      # cast from character\n+    } else if (call_binding(\"is.character\", x)) {\n+      # unit = 0L is the identifier for seconds in valid_time32_units\n+      x <- build_expr(\"strptime\", x, options = list(format = format, unit = 0L))\n \n+      # cast from numeric\n+    } else if (call_binding(\"is.numeric\", x) & !call_binding(\"is.integer\", x)) {\n+      # Arrow does not support direct casting from double to date32(), but for\n+      # integer-like values we can go via int32()\n+      # https://issues.apache.org/jira/browse/ARROW-15798\n+      # TODO revisit if arrow decides to support double -> date casting\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = int32()))\n+    }\n+    build_expr(\"cast\", x, options = cast_options(to_type = date32()))\n+  })\n+  register_binding(\"as_datetime\", function(x,\n+                                           origin = \"1970-01-01\",\n+                                           tz = \"UTC\") {\n     if (call_binding(\"is.numeric\", x)) {\n-      # coerce x to be int64(). it should work for integer-like doubles and fail\n-      # for pure doubles\n-      # if we abort for all doubles, we risk erroring in cases in which\n-      # coercion to int64() would work\n+      delta <- call_binding(\"difftime\", origin, \"1970-01-01\")\n+      delta <- build_expr(\"cast\", delta, options = cast_options(to_type = int64()))\n       x <- build_expr(\"cast\", x, options = cast_options(to_type = int64()))\n+      output <- build_expr(\"+\", x, delta)\n+      output <- build_expr(\"cast\", output, options = cast_options(to_type = timestamp()))\n+    } else {\n+      output <- build_expr(\"cast\", x, options = cast_options(to_type = timestamp()))\n     }\n-\n-    build_expr(\"cast\", x, options = cast_options(to_type = duration(unit = \"s\")))\n+    build_expr(\"assume_timezone\", output, options = list(timezone = tz))\n\nReview comment:\n       I can't suggest an edit here for some reason, but could we not rename to `output` here and then have one line that does `build_expr(\"cast\", x, options = cast_options(to_type = timestamp()))` for both? (which could be outside of the if|else entirely, and we wouldn't even need an `else` at all?)\n\n##########\nFile path: r/R/dplyr-funcs-datetime.R\n##########\n@@ -239,66 +303,108 @@ register_bindings_duration <- function() {\n                                        tz = \"UTC\") {\n     call_binding(\"make_datetime\", year, month, day, hour, min, sec, tz)\n   })\n-  register_binding(\"difftime\", function(time1,\n-                                        time2,\n-                                        tz,\n-                                        units = \"secs\") {\n-    if (units != \"secs\") {\n-      abort(\"`difftime()` with units other than `secs` not supported in Arrow\")\n-    }\n+  register_binding(\"as.Date\", function(x,\n+                                       format = NULL,\n+                                       tryFormats = \"%Y-%m-%d\",\n+                                       origin = \"1970-01-01\",\n+                                       tz = \"UTC\") {\n \n-    if (!missing(tz)) {\n-      warn(\"`tz` argument is not supported in Arrow, so it will be ignored\")\n+    # the origin argument will be better supported once we implement temporal\n+    # arithmetic (https://issues.apache.org/jira/browse/ARROW-14947)\n+    # TODO revisit once the above has been sorted\n+    if (call_binding(\"is.numeric\", x) & origin != \"1970-01-01\") {\n+      abort(\"`as.Date()` with an `origin` different than '1970-01-01' is not supported in Arrow\")\n     }\n \n-    # cast to timestamp if time1 and time2 are not dates or timestamp expressions\n-    # (the subtraction of which would output a `duration`)\n-    if (!call_binding(\"is.instant\", time1)) {\n-      time1 <- build_expr(\"cast\", time1, options = cast_options(to_type = timestamp(timezone = \"UTC\")))\n+    # this could be improved with tryFormats once strptime returns NA and we\n+    # can use coalesce - https://issues.apache.org/jira/browse/ARROW-15659\n+    # TODO revisit once https://issues.apache.org/jira/browse/ARROW-15659 is done\n+    if (is.null(format) && length(tryFormats) > 1) {\n+      abort(\"`as.Date()` with multiple `tryFormats` is not supported in Arrow\")\n     }\n \n-    if (!call_binding(\"is.instant\", time2)) {\n-      time2 <- build_expr(\"cast\", time2, options = cast_options(to_type = timestamp(timezone = \"UTC\")))\n-    }\n+    if (call_binding(\"is.Date\", x)) {\n+      return(x)\n \n-    # we need to go build the subtract expression instead of `time1 - time2` to\n-    # prevent complaints when we try to subtract an R object from an Expression\n-    subtract_output <- build_expr(\"-\", time1, time2)\n-    build_expr(\"cast\", subtract_output, options = cast_options(to_type = duration(\"s\")))\n+      # cast from POSIXct\n+    } else if (call_binding(\"is.POSIXct\", x)) {\n+      # base::as.Date() first converts to the desired timezone and then extracts\n+      # the date, which is why we need to go through timestamp() first\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = timestamp(timezone = tz)))\n+\n+      # cast from character\n+    } else if (call_binding(\"is.character\", x)) {\n+      format <- format %||% tryFormats[[1]]\n+      # unit = 0L is the identifier for seconds in valid_time32_units\n+      x <- build_expr(\"strptime\", x, options = list(format = format, unit = 0L))\n+\n+      # cast from numeric\n+    } else if (call_binding(\"is.numeric\", x) & !call_binding(\"is.integer\", x)) {\n+      # Arrow does not support direct casting from double to date32(), but for\n+      # integer-like values we can go via int32()\n+      # https://issues.apache.org/jira/browse/ARROW-15798\n+      # TODO revisit if arrow decides to support double -> date casting\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = int32()))\n+    }\n+    build_expr(\"cast\", x, options = cast_options(to_type = date32()))\n   })\n-  register_binding(\"as.difftime\", function(x,\n-                                           format = \"%X\",\n-                                           units = \"secs\") {\n-    # windows doesn't seem to like \"%X\"\n-    if (format == \"%X\" & tolower(Sys.info()[[\"sysname\"]]) == \"windows\") {\n-      format <- \"%H:%M:%S\"\n+  register_binding(\"as_date\", function(x,\n+                                       format = NULL,\n+                                       origin = \"1970-01-01\",\n+                                       tz = \"UTC\") {\n+    # the origin argument will be better supported once we implement temporal\n+    # arithmetic (https://issues.apache.org/jira/browse/ARROW-14947)\n+    # TODO revisit once the above has been sorted\n+    if (call_binding(\"is.numeric\", x) & origin != \"1970-01-01\") {\n+      abort(\"`as.Date()` with an `origin` different than '1970-01-01' is not supported in Arrow\")\n     }\n \n-    if (units != \"secs\") {\n-      abort(\"`as.difftime()` with units other than 'secs' not supported in Arrow\")\n+    # assume format is ISO if unspecified (to align with lubridate::as_date)\n+    if (is.null(format)) {\n+      format <- \"%Y-%m-%d\"\n     }\n \n-    if (call_binding(\"is.character\", x)) {\n-      x <- build_expr(\"strptime\", x, options = list(format = format, unit = 0L))\n-      # complex casting only due to cast type restrictions: time64 -> int64 -> duration(us)\n-      # and then we cast to duration (\"s\") at the end\n-      x <- x$cast(time64(\"us\"))$cast(int64())$cast(duration(\"us\"))\n-    }\n+    if (call_binding(\"is.Date\", x)) {\n+      return(x)\n \n-    # numeric -> duration not supported in Arrow yet so we use int64() as an\n-    # intermediate step\n-    # TODO revisit if https://issues.apache.org/jira/browse/ARROW-15862 results\n-    # in numeric -> duration support\n+      # cast from POSIXct\n+    } else if (call_binding(\"is.POSIXct\", x)) {\n+      # this is where as_date() differs from as.Date()\n+      if (!missing(tz)) {\n+        x <- build_expr(\"cast\", x, options = cast_options(to_type = timestamp(timezone = tz)))\n+      }\n+      # POSIXct is of type double -> we need this to prevent going down the\n+      # \"double\" branch\n+      x <- x\n+\n+      # cast from character\n+    } else if (call_binding(\"is.character\", x)) {\n+      # unit = 0L is the identifier for seconds in valid_time32_units\n+      x <- build_expr(\"strptime\", x, options = list(format = format, unit = 0L))\n \n+      # cast from numeric\n+    } else if (call_binding(\"is.numeric\", x) & !call_binding(\"is.integer\", x)) {\n+      # Arrow does not support direct casting from double to date32(), but for\n+      # integer-like values we can go via int32()\n+      # https://issues.apache.org/jira/browse/ARROW-15798\n+      # TODO revisit if arrow decides to support double -> date casting\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = int32()))\n+    }\n+    build_expr(\"cast\", x, options = cast_options(to_type = date32()))\n+  })\n\nReview comment:\n       It looks like a lot of this functionality is duplicated in `as.Date` up above, could we factor those out into an abstract function that does both?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T19:44:58.215+0000",
                    "updated": "2022-03-28T19:44:58.215+0000",
                    "started": "2022-03-28T19:44:58.214+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748859",
                    "issueId": "13431013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431013/worklog/748884",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on a change in pull request #12677:\nURL: https://github.com/apache/arrow/pull/12677#discussion_r836821414\n\n\n\n##########\nFile path: r/R/dplyr-funcs-datetime.R\n##########\n@@ -239,66 +303,108 @@ register_bindings_duration <- function() {\n                                        tz = \"UTC\") {\n     call_binding(\"make_datetime\", year, month, day, hour, min, sec, tz)\n   })\n-  register_binding(\"difftime\", function(time1,\n-                                        time2,\n-                                        tz,\n-                                        units = \"secs\") {\n-    if (units != \"secs\") {\n-      abort(\"`difftime()` with units other than `secs` not supported in Arrow\")\n-    }\n+  register_binding(\"as.Date\", function(x,\n+                                       format = NULL,\n+                                       tryFormats = \"%Y-%m-%d\",\n+                                       origin = \"1970-01-01\",\n+                                       tz = \"UTC\") {\n \n-    if (!missing(tz)) {\n-      warn(\"`tz` argument is not supported in Arrow, so it will be ignored\")\n+    # the origin argument will be better supported once we implement temporal\n+    # arithmetic (https://issues.apache.org/jira/browse/ARROW-14947)\n+    # TODO revisit once the above has been sorted\n+    if (call_binding(\"is.numeric\", x) & origin != \"1970-01-01\") {\n+      abort(\"`as.Date()` with an `origin` different than '1970-01-01' is not supported in Arrow\")\n     }\n \n-    # cast to timestamp if time1 and time2 are not dates or timestamp expressions\n-    # (the subtraction of which would output a `duration`)\n-    if (!call_binding(\"is.instant\", time1)) {\n-      time1 <- build_expr(\"cast\", time1, options = cast_options(to_type = timestamp(timezone = \"UTC\")))\n+    # this could be improved with tryFormats once strptime returns NA and we\n+    # can use coalesce - https://issues.apache.org/jira/browse/ARROW-15659\n+    # TODO revisit once https://issues.apache.org/jira/browse/ARROW-15659 is done\n+    if (is.null(format) && length(tryFormats) > 1) {\n+      abort(\"`as.Date()` with multiple `tryFormats` is not supported in Arrow\")\n     }\n \n-    if (!call_binding(\"is.instant\", time2)) {\n-      time2 <- build_expr(\"cast\", time2, options = cast_options(to_type = timestamp(timezone = \"UTC\")))\n-    }\n+    if (call_binding(\"is.Date\", x)) {\n+      return(x)\n \n-    # we need to go build the subtract expression instead of `time1 - time2` to\n-    # prevent complaints when we try to subtract an R object from an Expression\n-    subtract_output <- build_expr(\"-\", time1, time2)\n-    build_expr(\"cast\", subtract_output, options = cast_options(to_type = duration(\"s\")))\n+      # cast from POSIXct\n+    } else if (call_binding(\"is.POSIXct\", x)) {\n+      # base::as.Date() first converts to the desired timezone and then extracts\n+      # the date, which is why we need to go through timestamp() first\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = timestamp(timezone = tz)))\n+\n+      # cast from character\n+    } else if (call_binding(\"is.character\", x)) {\n+      format <- format %||% tryFormats[[1]]\n+      # unit = 0L is the identifier for seconds in valid_time32_units\n+      x <- build_expr(\"strptime\", x, options = list(format = format, unit = 0L))\n+\n+      # cast from numeric\n+    } else if (call_binding(\"is.numeric\", x) & !call_binding(\"is.integer\", x)) {\n+      # Arrow does not support direct casting from double to date32(), but for\n+      # integer-like values we can go via int32()\n+      # https://issues.apache.org/jira/browse/ARROW-15798\n+      # TODO revisit if arrow decides to support double -> date casting\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = int32()))\n+    }\n+    build_expr(\"cast\", x, options = cast_options(to_type = date32()))\n   })\n-  register_binding(\"as.difftime\", function(x,\n-                                           format = \"%X\",\n-                                           units = \"secs\") {\n-    # windows doesn't seem to like \"%X\"\n-    if (format == \"%X\" & tolower(Sys.info()[[\"sysname\"]]) == \"windows\") {\n-      format <- \"%H:%M:%S\"\n+  register_binding(\"as_date\", function(x,\n+                                       format = NULL,\n+                                       origin = \"1970-01-01\",\n+                                       tz = \"UTC\") {\n+    # the origin argument will be better supported once we implement temporal\n+    # arithmetic (https://issues.apache.org/jira/browse/ARROW-14947)\n+    # TODO revisit once the above has been sorted\n+    if (call_binding(\"is.numeric\", x) & origin != \"1970-01-01\") {\n+      abort(\"`as.Date()` with an `origin` different than '1970-01-01' is not supported in Arrow\")\n     }\n \n-    if (units != \"secs\") {\n-      abort(\"`as.difftime()` with units other than 'secs' not supported in Arrow\")\n+    # assume format is ISO if unspecified (to align with lubridate::as_date)\n+    if (is.null(format)) {\n+      format <- \"%Y-%m-%d\"\n     }\n \n-    if (call_binding(\"is.character\", x)) {\n-      x <- build_expr(\"strptime\", x, options = list(format = format, unit = 0L))\n-      # complex casting only due to cast type restrictions: time64 -> int64 -> duration(us)\n-      # and then we cast to duration (\"s\") at the end\n-      x <- x$cast(time64(\"us\"))$cast(int64())$cast(duration(\"us\"))\n-    }\n+    if (call_binding(\"is.Date\", x)) {\n+      return(x)\n \n-    # numeric -> duration not supported in Arrow yet so we use int64() as an\n-    # intermediate step\n-    # TODO revisit if https://issues.apache.org/jira/browse/ARROW-15862 results\n-    # in numeric -> duration support\n+      # cast from POSIXct\n+    } else if (call_binding(\"is.POSIXct\", x)) {\n+      # this is where as_date() differs from as.Date()\n+      if (!missing(tz)) {\n+        x <- build_expr(\"cast\", x, options = cast_options(to_type = timestamp(timezone = tz)))\n+      }\n+      # POSIXct is of type double -> we need this to prevent going down the\n+      # \"double\" branch\n+      x <- x\n+\n+      # cast from character\n+    } else if (call_binding(\"is.character\", x)) {\n+      # unit = 0L is the identifier for seconds in valid_time32_units\n+      x <- build_expr(\"strptime\", x, options = list(format = format, unit = 0L))\n \n+      # cast from numeric\n+    } else if (call_binding(\"is.numeric\", x) & !call_binding(\"is.integer\", x)) {\n+      # Arrow does not support direct casting from double to date32(), but for\n+      # integer-like values we can go via int32()\n+      # https://issues.apache.org/jira/browse/ARROW-15798\n+      # TODO revisit if arrow decides to support double -> date casting\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = int32()))\n+    }\n+    build_expr(\"cast\", x, options = cast_options(to_type = date32()))\n+  })\n\nReview comment:\n       @jonkeane You're 100% right. I hadn't realised how much all the rebasing and moving around have complicated this PR. I have decided to start over at #12738. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T20:28:53.734+0000",
                    "updated": "2022-03-28T20:28:53.734+0000",
                    "started": "2022-03-28T20:28:53.733+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748884",
                    "issueId": "13431013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431013/worklog/748885",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on a change in pull request #12738:\nURL: https://github.com/apache/arrow/pull/12738#discussion_r836823620\n\n\n\n##########\nFile path: r/R/dplyr-funcs-type.R\n##########\n@@ -114,14 +113,74 @@ register_bindings_type_cast <- function() {\n \n     # cast from numeric\n     } else if (call_binding(\"is.numeric\", x) & !call_binding(\"is.integer\", x)) {\n-      # Arrow does not support direct casting from double to date32()\n+      # Arrow does not support direct casting from double to date32(), but for\n+      # integer-like values we can go via int32()\n+      # https://issues.apache.org/jira/browse/ARROW-15798\n+      # TODO revisit if arrow decides to support double -> date casting\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = int32()))\n+    }\n+    build_expr(\"cast\", x, options = cast_options(to_type = date32()))\n+  })\n+\n+  register_binding(\"as_date\", function(x,\n+                                       format = NULL,\n+                                       origin = \"1970-01-01\",\n+                                       tz = \"UTC\") {\n+    # the origin argument will be better supported once we implement temporal\n+    # arithmetic (https://issues.apache.org/jira/browse/ARROW-14947)\n+    # TODO revisit once the above has been sorted\n+    if (call_binding(\"is.numeric\", x) & origin != \"1970-01-01\") {\n+      abort(\"`as.Date()` with an `origin` different than '1970-01-01' is not supported in Arrow\")\n+    }\n+\n+    # assume format is ISO if unspecified (to align with lubridate::as_date)\n+    if (is.null(format)) {\n+      format <- \"%Y-%m-%d\"\n+    }\n+\n+    if (call_binding(\"is.Date\", x)) {\n+      return(x)\n+\n+      # cast from POSIXct\n+    } else if (call_binding(\"is.POSIXct\", x)) {\n+      if (!missing(tz)) {\n+        x <- build_expr(\"cast\", x, options = cast_options(to_type = timestamp(timezone = tz)))\n+      }\n+      # POSIXct is of type double -> we need this to prevent going down the\n+      # \"double\" branch\n+      x <- x\n+\n+      # cast from character\n+    } else if (call_binding(\"is.character\", x)) {\n+      # unit = 0L is the identifier for seconds in valid_time32_units\n+      x <- build_expr(\"strptime\", x, options = list(format = format, unit = 0L))\n+\n+      # cast from numeric\n+    } else if (call_binding(\"is.numeric\", x) & !call_binding(\"is.integer\", x)) {\n+      # Arrow does not support direct casting from double to date32(), but for\n+      # integer-like values we can go via int32()\n       # https://issues.apache.org/jira/browse/ARROW-15798\n       # TODO revisit if arrow decides to support double -> date casting\n-      abort(\"`as.Date()` with double/float is not supported in Arrow\")\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = int32()))\n     }\n     build_expr(\"cast\", x, options = cast_options(to_type = date32()))\n   })\n \n+  register_binding(\"as_datetime\", function(x,\n+                                           origin = \"1970-01-01\",\n+                                           tz = \"UTC\") {\n+    if (call_binding(\"is.numeric\", x)) {\n+      delta <- call_binding(\"difftime\", origin, \"1970-01-01\")\n+      delta <- build_expr(\"cast\", delta, options = cast_options(to_type = int64()))\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = int64()))\n+      output <- build_expr(\"+\", x, delta)\n+      output <- build_expr(\"cast\", output, options = cast_options(to_type = timestamp()))\n+    } else {\n+      output <- build_expr(\"cast\", x, options = cast_options(to_type = timestamp()))\n+    }\n+    build_expr(\"assume_timezone\", output, options = list(timezone = tz))\n\nReview comment:\n       [Jon's comment](https://github.com/apache/arrow/pull/12677#discussion_r836783740) on the original PR: \r\n   > I can't suggest an edit here for some reason, but could we not rename to output here and then have one line that does build_expr(\"cast\", x, options = cast_options(to_type = timestamp())) for both? (which could be outside of the if|else entirely, and we wouldn't even need an else at all?)\r\n    \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T20:31:39.279+0000",
                    "updated": "2022-03-28T20:31:39.279+0000",
                    "started": "2022-03-28T20:31:39.279+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748885",
                    "issueId": "13431013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431013/worklog/748888",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on a change in pull request #12738:\nURL: https://github.com/apache/arrow/pull/12738#discussion_r836824917\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-funcs-type.R\n##########\n@@ -875,6 +877,134 @@ test_that(\"as.Date() converts successfully from date, timestamp, integer, char a\n   )\n })\n \n+test_that(\"as_date()\", {\n+  test_df <- tibble::tibble(\n+    posixct_var = as.POSIXct(\"2022-02-25 00:00:01\", tz = \"Pacific/Marquesas\"),\n+    date_var = as.Date(\"2022-02-25\"),\n+    difference_date = ymd_hms(\"2010-08-03 00:50:50\", tz = \"Pacific/Marquesas\"),\n+    character_ymd_var = \"2022-02-25 00:00:01\",\n+    character_ydm_var = \"2022/25/02 00:00:01\",\n+    integer_var = 32L,\n+    integerish_var = 32,\n+    double_var = 34.56\n+  )\n+\n\nReview comment:\n       [Jon's comment](https://github.com/apache/arrow/pull/12677#discussion_r836786450) on the original PR:\r\n   > This fixture looks very similar (though subtly different in some ways) as the one for as.Date() would it make sense to combine them into a single test_that block so they can use one fixture and we don't have to redefine it + make sure we update it in both places, etc?\r\n   \r\n   >If that's not feasible, should we move the fixture out to helpers-data.R so that it's reusable?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T20:32:45.362+0000",
                    "updated": "2022-03-28T20:32:45.362+0000",
                    "started": "2022-03-28T20:32:45.361+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748888",
                    "issueId": "13431013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431013/worklog/748889",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on a change in pull request #12738:\nURL: https://github.com/apache/arrow/pull/12738#discussion_r836826265\n\n\n\n##########\nFile path: r/R/dplyr-funcs-type.R\n##########\n@@ -114,14 +113,74 @@ register_bindings_type_cast <- function() {\n \n     # cast from numeric\n     } else if (call_binding(\"is.numeric\", x) & !call_binding(\"is.integer\", x)) {\n-      # Arrow does not support direct casting from double to date32()\n+      # Arrow does not support direct casting from double to date32(), but for\n+      # integer-like values we can go via int32()\n+      # https://issues.apache.org/jira/browse/ARROW-15798\n+      # TODO revisit if arrow decides to support double -> date casting\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = int32()))\n+    }\n+    build_expr(\"cast\", x, options = cast_options(to_type = date32()))\n+  })\n+\n+  register_binding(\"as_date\", function(x,\n+                                       format = NULL,\n+                                       origin = \"1970-01-01\",\n+                                       tz = \"UTC\") {\n+    # the origin argument will be better supported once we implement temporal\n+    # arithmetic (https://issues.apache.org/jira/browse/ARROW-14947)\n+    # TODO revisit once the above has been sorted\n+    if (call_binding(\"is.numeric\", x) & origin != \"1970-01-01\") {\n+      abort(\"`as.Date()` with an `origin` different than '1970-01-01' is not supported in Arrow\")\n+    }\n+\n+    # assume format is ISO if unspecified (to align with lubridate::as_date)\n+    if (is.null(format)) {\n+      format <- \"%Y-%m-%d\"\n+    }\n+\n+    if (call_binding(\"is.Date\", x)) {\n+      return(x)\n+\n+      # cast from POSIXct\n+    } else if (call_binding(\"is.POSIXct\", x)) {\n+      if (!missing(tz)) {\n+        x <- build_expr(\"cast\", x, options = cast_options(to_type = timestamp(timezone = tz)))\n+      }\n+      # POSIXct is of type double -> we need this to prevent going down the\n+      # \"double\" branch\n+      x <- x\n+\n+      # cast from character\n+    } else if (call_binding(\"is.character\", x)) {\n+      # unit = 0L is the identifier for seconds in valid_time32_units\n+      x <- build_expr(\"strptime\", x, options = list(format = format, unit = 0L))\n+\n+      # cast from numeric\n+    } else if (call_binding(\"is.numeric\", x) & !call_binding(\"is.integer\", x)) {\n+      # Arrow does not support direct casting from double to date32(), but for\n+      # integer-like values we can go via int32()\n       # https://issues.apache.org/jira/browse/ARROW-15798\n       # TODO revisit if arrow decides to support double -> date casting\n-      abort(\"`as.Date()` with double/float is not supported in Arrow\")\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = int32()))\n     }\n     build_expr(\"cast\", x, options = cast_options(to_type = date32()))\n   })\n \n\nReview comment:\n       [Jon's comment](https://github.com/apache/arrow/pull/12677#discussion_r836782444) on the[ original PR](https://github.com/apache/arrow/pull/12677):\r\n   >It looks like a lot of this functionality is duplicated in as.Date up above, could we factor those out into an abstract function that does both?\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T20:34:22.482+0000",
                    "updated": "2022-03-28T20:34:22.482+0000",
                    "started": "2022-03-28T20:34:22.482+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748889",
                    "issueId": "13431013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431013/worklog/748890",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on a change in pull request #12738:\nURL: https://github.com/apache/arrow/pull/12738#discussion_r836824917\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-funcs-type.R\n##########\n@@ -875,6 +877,134 @@ test_that(\"as.Date() converts successfully from date, timestamp, integer, char a\n   )\n })\n \n+test_that(\"as_date()\", {\n+  test_df <- tibble::tibble(\n+    posixct_var = as.POSIXct(\"2022-02-25 00:00:01\", tz = \"Pacific/Marquesas\"),\n+    date_var = as.Date(\"2022-02-25\"),\n+    difference_date = ymd_hms(\"2010-08-03 00:50:50\", tz = \"Pacific/Marquesas\"),\n+    character_ymd_var = \"2022-02-25 00:00:01\",\n+    character_ydm_var = \"2022/25/02 00:00:01\",\n+    integer_var = 32L,\n+    integerish_var = 32,\n+    double_var = 34.56\n+  )\n+\n\nReview comment:\n       [Jon's comment](https://github.com/apache/arrow/pull/12677#discussion_r836786450) on the [original PR](https://github.com/apache/arrow/pull/12677):\r\n   > This fixture looks very similar (though subtly different in some ways) as the one for as.Date() would it make sense to combine them into a single test_that block so they can use one fixture and we don't have to redefine it + make sure we update it in both places, etc?\r\n   \r\n   >If that's not feasible, should we move the fixture out to helpers-data.R so that it's reusable?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T20:34:46.997+0000",
                    "updated": "2022-03-28T20:34:46.997+0000",
                    "started": "2022-03-28T20:34:46.997+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748890",
                    "issueId": "13431013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431013/worklog/748891",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on a change in pull request #12738:\nURL: https://github.com/apache/arrow/pull/12738#discussion_r836823620\n\n\n\n##########\nFile path: r/R/dplyr-funcs-type.R\n##########\n@@ -114,14 +113,74 @@ register_bindings_type_cast <- function() {\n \n     # cast from numeric\n     } else if (call_binding(\"is.numeric\", x) & !call_binding(\"is.integer\", x)) {\n-      # Arrow does not support direct casting from double to date32()\n+      # Arrow does not support direct casting from double to date32(), but for\n+      # integer-like values we can go via int32()\n+      # https://issues.apache.org/jira/browse/ARROW-15798\n+      # TODO revisit if arrow decides to support double -> date casting\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = int32()))\n+    }\n+    build_expr(\"cast\", x, options = cast_options(to_type = date32()))\n+  })\n+\n+  register_binding(\"as_date\", function(x,\n+                                       format = NULL,\n+                                       origin = \"1970-01-01\",\n+                                       tz = \"UTC\") {\n+    # the origin argument will be better supported once we implement temporal\n+    # arithmetic (https://issues.apache.org/jira/browse/ARROW-14947)\n+    # TODO revisit once the above has been sorted\n+    if (call_binding(\"is.numeric\", x) & origin != \"1970-01-01\") {\n+      abort(\"`as.Date()` with an `origin` different than '1970-01-01' is not supported in Arrow\")\n+    }\n+\n+    # assume format is ISO if unspecified (to align with lubridate::as_date)\n+    if (is.null(format)) {\n+      format <- \"%Y-%m-%d\"\n+    }\n+\n+    if (call_binding(\"is.Date\", x)) {\n+      return(x)\n+\n+      # cast from POSIXct\n+    } else if (call_binding(\"is.POSIXct\", x)) {\n+      if (!missing(tz)) {\n+        x <- build_expr(\"cast\", x, options = cast_options(to_type = timestamp(timezone = tz)))\n+      }\n+      # POSIXct is of type double -> we need this to prevent going down the\n+      # \"double\" branch\n+      x <- x\n+\n+      # cast from character\n+    } else if (call_binding(\"is.character\", x)) {\n+      # unit = 0L is the identifier for seconds in valid_time32_units\n+      x <- build_expr(\"strptime\", x, options = list(format = format, unit = 0L))\n+\n+      # cast from numeric\n+    } else if (call_binding(\"is.numeric\", x) & !call_binding(\"is.integer\", x)) {\n+      # Arrow does not support direct casting from double to date32(), but for\n+      # integer-like values we can go via int32()\n       # https://issues.apache.org/jira/browse/ARROW-15798\n       # TODO revisit if arrow decides to support double -> date casting\n-      abort(\"`as.Date()` with double/float is not supported in Arrow\")\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = int32()))\n     }\n     build_expr(\"cast\", x, options = cast_options(to_type = date32()))\n   })\n \n+  register_binding(\"as_datetime\", function(x,\n+                                           origin = \"1970-01-01\",\n+                                           tz = \"UTC\") {\n+    if (call_binding(\"is.numeric\", x)) {\n+      delta <- call_binding(\"difftime\", origin, \"1970-01-01\")\n+      delta <- build_expr(\"cast\", delta, options = cast_options(to_type = int64()))\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = int64()))\n+      output <- build_expr(\"+\", x, delta)\n+      output <- build_expr(\"cast\", output, options = cast_options(to_type = timestamp()))\n+    } else {\n+      output <- build_expr(\"cast\", x, options = cast_options(to_type = timestamp()))\n+    }\n+    build_expr(\"assume_timezone\", output, options = list(timezone = tz))\n\nReview comment:\n       [Jon's comment](https://github.com/apache/arrow/pull/12677#discussion_r836783740) on the [original PR](https://github.com/apache/arrow/pull/12677): \r\n   > I can't suggest an edit here for some reason, but could we not rename to output here and then have one line that does build_expr(\"cast\", x, options = cast_options(to_type = timestamp())) for both? (which could be outside of the if|else entirely, and we wouldn't even need an else at all?)\r\n    \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T20:35:09.659+0000",
                    "updated": "2022-03-28T20:35:09.659+0000",
                    "started": "2022-03-28T20:35:09.659+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748891",
                    "issueId": "13431013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431013/worklog/748904",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg closed pull request #12677:\nURL: https://github.com/apache/arrow/pull/12677\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T20:45:24.021+0000",
                    "updated": "2022-03-28T20:45:24.021+0000",
                    "started": "2022-03-28T20:45:24.021+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748904",
                    "issueId": "13431013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431013/worklog/748935",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12738:\nURL: https://github.com/apache/arrow/pull/12738#issuecomment-1081154272\n\n\n   https://issues.apache.org/jira/browse/ARROW-15800\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T21:12:01.413+0000",
                    "updated": "2022-03-28T21:12:01.413+0000",
                    "started": "2022-03-28T21:12:01.413+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748935",
                    "issueId": "13431013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431013/worklog/749325",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on a change in pull request #12738:\nURL: https://github.com/apache/arrow/pull/12738#discussion_r837470311\n\n\n\n##########\nFile path: r/R/dplyr-funcs-type.R\n##########\n@@ -114,14 +113,74 @@ register_bindings_type_cast <- function() {\n \n     # cast from numeric\n     } else if (call_binding(\"is.numeric\", x) & !call_binding(\"is.integer\", x)) {\n-      # Arrow does not support direct casting from double to date32()\n+      # Arrow does not support direct casting from double to date32(), but for\n+      # integer-like values we can go via int32()\n+      # https://issues.apache.org/jira/browse/ARROW-15798\n+      # TODO revisit if arrow decides to support double -> date casting\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = int32()))\n+    }\n+    build_expr(\"cast\", x, options = cast_options(to_type = date32()))\n+  })\n+\n+  register_binding(\"as_date\", function(x,\n+                                       format = NULL,\n+                                       origin = \"1970-01-01\",\n+                                       tz = \"UTC\") {\n+    # the origin argument will be better supported once we implement temporal\n+    # arithmetic (https://issues.apache.org/jira/browse/ARROW-14947)\n+    # TODO revisit once the above has been sorted\n+    if (call_binding(\"is.numeric\", x) & origin != \"1970-01-01\") {\n+      abort(\"`as.Date()` with an `origin` different than '1970-01-01' is not supported in Arrow\")\n+    }\n+\n+    # assume format is ISO if unspecified (to align with lubridate::as_date)\n+    if (is.null(format)) {\n+      format <- \"%Y-%m-%d\"\n+    }\n+\n+    if (call_binding(\"is.Date\", x)) {\n+      return(x)\n+\n+      # cast from POSIXct\n+    } else if (call_binding(\"is.POSIXct\", x)) {\n+      if (!missing(tz)) {\n+        x <- build_expr(\"cast\", x, options = cast_options(to_type = timestamp(timezone = tz)))\n+      }\n+      # POSIXct is of type double -> we need this to prevent going down the\n+      # \"double\" branch\n+      x <- x\n+\n+      # cast from character\n+    } else if (call_binding(\"is.character\", x)) {\n+      # unit = 0L is the identifier for seconds in valid_time32_units\n+      x <- build_expr(\"strptime\", x, options = list(format = format, unit = 0L))\n+\n+      # cast from numeric\n+    } else if (call_binding(\"is.numeric\", x) & !call_binding(\"is.integer\", x)) {\n+      # Arrow does not support direct casting from double to date32(), but for\n+      # integer-like values we can go via int32()\n       # https://issues.apache.org/jira/browse/ARROW-15798\n       # TODO revisit if arrow decides to support double -> date casting\n-      abort(\"`as.Date()` with double/float is not supported in Arrow\")\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = int32()))\n     }\n     build_expr(\"cast\", x, options = cast_options(to_type = date32()))\n   })\n \n+  register_binding(\"as_datetime\", function(x,\n+                                           origin = \"1970-01-01\",\n+                                           tz = \"UTC\") {\n+    if (call_binding(\"is.numeric\", x)) {\n+      delta <- call_binding(\"difftime\", origin, \"1970-01-01\")\n+      delta <- build_expr(\"cast\", delta, options = cast_options(to_type = int64()))\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = int64()))\n+      output <- build_expr(\"+\", x, delta)\n+      output <- build_expr(\"cast\", output, options = cast_options(to_type = timestamp()))\n+    } else {\n+      output <- build_expr(\"cast\", x, options = cast_options(to_type = timestamp()))\n+    }\n+    build_expr(\"assume_timezone\", output, options = list(timezone = tz))\n\nReview comment:\n       Done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-29T13:23:53.319+0000",
                    "updated": "2022-03-29T13:23:53.319+0000",
                    "started": "2022-03-29T13:23:53.319+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "749325",
                    "issueId": "13431013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431013/worklog/749387",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on a change in pull request #12738:\nURL: https://github.com/apache/arrow/pull/12738#discussion_r837595683\n\n\n\n##########\nFile path: r/R/dplyr-funcs-type.R\n##########\n@@ -114,14 +113,74 @@ register_bindings_type_cast <- function() {\n \n     # cast from numeric\n     } else if (call_binding(\"is.numeric\", x) & !call_binding(\"is.integer\", x)) {\n-      # Arrow does not support direct casting from double to date32()\n+      # Arrow does not support direct casting from double to date32(), but for\n+      # integer-like values we can go via int32()\n+      # https://issues.apache.org/jira/browse/ARROW-15798\n+      # TODO revisit if arrow decides to support double -> date casting\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = int32()))\n+    }\n+    build_expr(\"cast\", x, options = cast_options(to_type = date32()))\n+  })\n+\n+  register_binding(\"as_date\", function(x,\n+                                       format = NULL,\n+                                       origin = \"1970-01-01\",\n+                                       tz = \"UTC\") {\n+    # the origin argument will be better supported once we implement temporal\n+    # arithmetic (https://issues.apache.org/jira/browse/ARROW-14947)\n+    # TODO revisit once the above has been sorted\n+    if (call_binding(\"is.numeric\", x) & origin != \"1970-01-01\") {\n+      abort(\"`as.Date()` with an `origin` different than '1970-01-01' is not supported in Arrow\")\n+    }\n+\n+    # assume format is ISO if unspecified (to align with lubridate::as_date)\n+    if (is.null(format)) {\n+      format <- \"%Y-%m-%d\"\n+    }\n+\n+    if (call_binding(\"is.Date\", x)) {\n+      return(x)\n+\n+      # cast from POSIXct\n+    } else if (call_binding(\"is.POSIXct\", x)) {\n+      if (!missing(tz)) {\n+        x <- build_expr(\"cast\", x, options = cast_options(to_type = timestamp(timezone = tz)))\n+      }\n+      # POSIXct is of type double -> we need this to prevent going down the\n+      # \"double\" branch\n+      x <- x\n+\n+      # cast from character\n+    } else if (call_binding(\"is.character\", x)) {\n+      # unit = 0L is the identifier for seconds in valid_time32_units\n+      x <- build_expr(\"strptime\", x, options = list(format = format, unit = 0L))\n+\n+      # cast from numeric\n+    } else if (call_binding(\"is.numeric\", x) & !call_binding(\"is.integer\", x)) {\n+      # Arrow does not support direct casting from double to date32(), but for\n+      # integer-like values we can go via int32()\n       # https://issues.apache.org/jira/browse/ARROW-15798\n       # TODO revisit if arrow decides to support double -> date casting\n-      abort(\"`as.Date()` with double/float is not supported in Arrow\")\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = int32()))\n     }\n     build_expr(\"cast\", x, options = cast_options(to_type = date32()))\n   })\n \n\nReview comment:\n       Done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-29T15:10:45.163+0000",
                    "updated": "2022-03-29T15:10:45.163+0000",
                    "started": "2022-03-29T15:10:45.163+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "749387",
                    "issueId": "13431013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431013/worklog/749394",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on a change in pull request #12738:\nURL: https://github.com/apache/arrow/pull/12738#discussion_r837610189\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-funcs-type.R\n##########\n@@ -875,6 +877,134 @@ test_that(\"as.Date() converts successfully from date, timestamp, integer, char a\n   )\n })\n \n+test_that(\"as_date()\", {\n+  test_df <- tibble::tibble(\n+    posixct_var = as.POSIXct(\"2022-02-25 00:00:01\", tz = \"Pacific/Marquesas\"),\n+    date_var = as.Date(\"2022-02-25\"),\n+    difference_date = ymd_hms(\"2010-08-03 00:50:50\", tz = \"Pacific/Marquesas\"),\n+    character_ymd_var = \"2022-02-25 00:00:01\",\n+    character_ydm_var = \"2022/25/02 00:00:01\",\n+    integer_var = 32L,\n+    integerish_var = 32,\n+    double_var = 34.56\n+  )\n+\n\nReview comment:\n       Done. I combined the tests for `as.Date()` and `as_date()` into a single `test_that` block.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-29T15:23:17.341+0000",
                    "updated": "2022-03-29T15:23:17.341+0000",
                    "started": "2022-03-29T15:23:17.341+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "749394",
                    "issueId": "13431013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431013/worklog/752718",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on code in PR #12738:\nURL: https://github.com/apache/arrow/pull/12738#discussion_r842529031\n\n\n##########\nr/R/dplyr-funcs-type.R:\n##########\n@@ -82,44 +82,40 @@ register_bindings_type_cast <- function() {\n                                        tryFormats = \"%Y-%m-%d\",\n                                        origin = \"1970-01-01\",\n                                        tz = \"UTC\") {\n+    binding_as_date(\n+      x = x,\n+      format = format,\n+      tryFormats = tryFormats,\n+      origin = origin,\n+      tz = tz,\n+      base = TRUE\n+    )\n+  })\n \n-    # the origin argument will be better supported once we implement temporal\n-    # arithmetic (https://issues.apache.org/jira/browse/ARROW-14947)\n-    # TODO revisit once the above has been sorted\n-    if (call_binding(\"is.numeric\", x) & origin != \"1970-01-01\") {\n-      abort(\"`as.Date()` with an `origin` different than '1970-01-01' is not supported in Arrow\")\n-    }\n-\n-    # this could be improved with tryFormats once strptime returns NA and we\n-    # can use coalesce - https://issues.apache.org/jira/browse/ARROW-15659\n-    # TODO revisit once https://issues.apache.org/jira/browse/ARROW-15659 is done\n-    if (is.null(format) && length(tryFormats) > 1) {\n-      abort(\"`as.Date()` with multiple `tryFormats` is not supported in Arrow\")\n-    }\n-\n-    if (call_binding(\"is.Date\", x)) {\n-      return(x)\n-\n-    # cast from POSIXct\n-    } else if (call_binding(\"is.POSIXct\", x)) {\n-      # base::as.Date() first converts to the desired timezone and then extracts\n-      # the date, which is why we need to go through timestamp() first\n-      x <- build_expr(\"cast\", x, options = cast_options(to_type = timestamp(timezone = tz)))\n-\n-    # cast from character\n-    } else if (call_binding(\"is.character\", x)) {\n-      format <- format %||% tryFormats[[1]]\n-      # unit = 0L is the identifier for seconds in valid_time32_units\n-      x <- build_expr(\"strptime\", x, options = list(format = format, unit = 0L))\n+  register_binding(\"as_date\", function(x,\n+                                       format = NULL,\n+                                       origin = \"1970-01-01\",\n+                                       tz = \"UTC\") {\n+    binding_as_date(\n+      x = x,\n+      format = format,\n+      origin = origin,\n+      tz = tz,\n+      base = FALSE\n+    )\n+  })\n \n-    # cast from numeric\n-    } else if (call_binding(\"is.numeric\", x) & !call_binding(\"is.integer\", x)) {\n-      # Arrow does not support direct casting from double to date32()\n-      # https://issues.apache.org/jira/browse/ARROW-15798\n-      # TODO revisit if arrow decides to support double -> date casting\n-      abort(\"`as.Date()` with double/float is not supported in Arrow\")\n+  register_binding(\"as_datetime\", function(x,\n+                                           origin = \"1970-01-01\",\n+                                           tz = \"UTC\") {\n\nReview Comment:\n   I would think `as_date` accepts any `tz` and `as_datetime` has a default `tz` set to UTC?\r\n   \r\n   Also, how come `as_datetime` doesn't accept `format` - I am wondering how come you did not use `binding_as_date` for `as_datetime` also?\n\n\n\n##########\nr/R/dplyr-funcs-datetime.R:\n##########\n@@ -263,11 +263,11 @@ register_bindings_duration <- function() {\n     # cast to timestamp if time1 and time2 are not dates or timestamp expressions\n     # (the subtraction of which would output a `duration`)\n     if (!call_binding(\"is.instant\", time1)) {\n-      time1 <- build_expr(\"cast\", time1, options = cast_options(to_type = timestamp(timezone = \"UTC\")))\n+      time1 <- build_expr(\"cast\", time1, options = cast_options(to_type = timestamp()))\n     }\n \n     if (!call_binding(\"is.instant\", time2)) {\n-      time2 <- build_expr(\"cast\", time2, options = cast_options(to_type = timestamp(timezone = \"UTC\")))\n+      time2 <- build_expr(\"cast\", time2, options = cast_options(to_type = timestamp()))\n\nReview Comment:\n   Are this changes necessary for this PR or is this a part of something else?\n\n\n\n",
                    "created": "2022-04-05T08:55:17.964+0000",
                    "updated": "2022-04-05T08:55:17.964+0000",
                    "started": "2022-04-05T08:55:17.964+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "752718",
                    "issueId": "13431013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431013/worklog/756278",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on code in PR #12738:\nURL: https://github.com/apache/arrow/pull/12738#discussion_r849282435\n\n\n##########\nr/R/dplyr-funcs-datetime.R:\n##########\n@@ -263,11 +263,11 @@ register_bindings_duration <- function() {\n     # cast to timestamp if time1 and time2 are not dates or timestamp expressions\n     # (the subtraction of which would output a `duration`)\n     if (!call_binding(\"is.instant\", time1)) {\n-      time1 <- build_expr(\"cast\", time1, options = cast_options(to_type = timestamp(timezone = \"UTC\")))\n+      time1 <- build_expr(\"cast\", time1, options = cast_options(to_type = timestamp()))\n     }\n \n     if (!call_binding(\"is.instant\", time2)) {\n-      time2 <- build_expr(\"cast\", time2, options = cast_options(to_type = timestamp(timezone = \"UTC\")))\n+      time2 <- build_expr(\"cast\", time2, options = cast_options(to_type = timestamp()))\n\nReview Comment:\n   Necessary for this PR. \n\n\n\n",
                    "created": "2022-04-13T09:35:07.955+0000",
                    "updated": "2022-04-13T09:35:07.955+0000",
                    "started": "2022-04-13T09:35:07.954+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "756278",
                    "issueId": "13431013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431013/worklog/756346",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on code in PR #12738:\nURL: https://github.com/apache/arrow/pull/12738#discussion_r849406482\n\n\n##########\nr/R/dplyr-funcs-type.R:\n##########\n@@ -82,44 +82,40 @@ register_bindings_type_cast <- function() {\n                                        tryFormats = \"%Y-%m-%d\",\n                                        origin = \"1970-01-01\",\n                                        tz = \"UTC\") {\n+    binding_as_date(\n+      x = x,\n+      format = format,\n+      tryFormats = tryFormats,\n+      origin = origin,\n+      tz = tz,\n+      base = TRUE\n+    )\n+  })\n \n-    # the origin argument will be better supported once we implement temporal\n-    # arithmetic (https://issues.apache.org/jira/browse/ARROW-14947)\n-    # TODO revisit once the above has been sorted\n-    if (call_binding(\"is.numeric\", x) & origin != \"1970-01-01\") {\n-      abort(\"`as.Date()` with an `origin` different than '1970-01-01' is not supported in Arrow\")\n-    }\n-\n-    # this could be improved with tryFormats once strptime returns NA and we\n-    # can use coalesce - https://issues.apache.org/jira/browse/ARROW-15659\n-    # TODO revisit once https://issues.apache.org/jira/browse/ARROW-15659 is done\n-    if (is.null(format) && length(tryFormats) > 1) {\n-      abort(\"`as.Date()` with multiple `tryFormats` is not supported in Arrow\")\n-    }\n-\n-    if (call_binding(\"is.Date\", x)) {\n-      return(x)\n-\n-    # cast from POSIXct\n-    } else if (call_binding(\"is.POSIXct\", x)) {\n-      # base::as.Date() first converts to the desired timezone and then extracts\n-      # the date, which is why we need to go through timestamp() first\n-      x <- build_expr(\"cast\", x, options = cast_options(to_type = timestamp(timezone = tz)))\n-\n-    # cast from character\n-    } else if (call_binding(\"is.character\", x)) {\n-      format <- format %||% tryFormats[[1]]\n-      # unit = 0L is the identifier for seconds in valid_time32_units\n-      x <- build_expr(\"strptime\", x, options = list(format = format, unit = 0L))\n+  register_binding(\"as_date\", function(x,\n+                                       format = NULL,\n+                                       origin = \"1970-01-01\",\n+                                       tz = \"UTC\") {\n+    binding_as_date(\n+      x = x,\n+      format = format,\n+      origin = origin,\n+      tz = tz,\n+      base = FALSE\n+    )\n+  })\n \n-    # cast from numeric\n-    } else if (call_binding(\"is.numeric\", x) & !call_binding(\"is.integer\", x)) {\n-      # Arrow does not support direct casting from double to date32()\n-      # https://issues.apache.org/jira/browse/ARROW-15798\n-      # TODO revisit if arrow decides to support double -> date casting\n-      abort(\"`as.Date()` with double/float is not supported in Arrow\")\n+  register_binding(\"as_datetime\", function(x,\n+                                           origin = \"1970-01-01\",\n+                                           tz = \"UTC\") {\n\nReview Comment:\n   * I would think `as_date` accepts any `tz` and `as_datetime` has a default tz set to UTC?\r\n   **Correct**: the default value for `tz` in `as_datetime()` is `\"UTC\"` & `as_date()` accepts any `tz`. I changed the default value for `tz` in `as_date()` to `NULL`.\r\n   \r\n   * How come `as_datetime()` doesn't accept `format`?\r\n   Oversight, I added support for `format`\r\n   \r\n   * Why I didn't use `binding_as_date()` for `as_datetime`? \r\n   `x` for `as_datetime()` might have a `time` component and `binding_as_date()` won't parse it. \n\n\n\n",
                    "created": "2022-04-13T12:07:44.711+0000",
                    "updated": "2022-04-13T12:07:44.711+0000",
                    "started": "2022-04-13T12:07:44.710+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "756346",
                    "issueId": "13431013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431013/worklog/756347",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on code in PR #12738:\nURL: https://github.com/apache/arrow/pull/12738#discussion_r849409272\n\n\n##########\nr/R/dplyr-funcs-type.R:\n##########\n@@ -82,44 +82,40 @@ register_bindings_type_cast <- function() {\n                                        tryFormats = \"%Y-%m-%d\",\n                                        origin = \"1970-01-01\",\n                                        tz = \"UTC\") {\n+    binding_as_date(\n+      x = x,\n+      format = format,\n+      tryFormats = tryFormats,\n+      origin = origin,\n+      tz = tz,\n+      base = TRUE\n+    )\n+  })\n \n-    # the origin argument will be better supported once we implement temporal\n-    # arithmetic (https://issues.apache.org/jira/browse/ARROW-14947)\n-    # TODO revisit once the above has been sorted\n-    if (call_binding(\"is.numeric\", x) & origin != \"1970-01-01\") {\n-      abort(\"`as.Date()` with an `origin` different than '1970-01-01' is not supported in Arrow\")\n-    }\n-\n-    # this could be improved with tryFormats once strptime returns NA and we\n-    # can use coalesce - https://issues.apache.org/jira/browse/ARROW-15659\n-    # TODO revisit once https://issues.apache.org/jira/browse/ARROW-15659 is done\n-    if (is.null(format) && length(tryFormats) > 1) {\n-      abort(\"`as.Date()` with multiple `tryFormats` is not supported in Arrow\")\n-    }\n-\n-    if (call_binding(\"is.Date\", x)) {\n-      return(x)\n-\n-    # cast from POSIXct\n-    } else if (call_binding(\"is.POSIXct\", x)) {\n-      # base::as.Date() first converts to the desired timezone and then extracts\n-      # the date, which is why we need to go through timestamp() first\n-      x <- build_expr(\"cast\", x, options = cast_options(to_type = timestamp(timezone = tz)))\n-\n-    # cast from character\n-    } else if (call_binding(\"is.character\", x)) {\n-      format <- format %||% tryFormats[[1]]\n-      # unit = 0L is the identifier for seconds in valid_time32_units\n-      x <- build_expr(\"strptime\", x, options = list(format = format, unit = 0L))\n+  register_binding(\"as_date\", function(x,\n+                                       format = NULL,\n+                                       origin = \"1970-01-01\",\n+                                       tz = \"UTC\") {\n+    binding_as_date(\n+      x = x,\n+      format = format,\n+      origin = origin,\n+      tz = tz,\n+      base = FALSE\n+    )\n+  })\n \n-    # cast from numeric\n-    } else if (call_binding(\"is.numeric\", x) & !call_binding(\"is.integer\", x)) {\n-      # Arrow does not support direct casting from double to date32()\n-      # https://issues.apache.org/jira/browse/ARROW-15798\n-      # TODO revisit if arrow decides to support double -> date casting\n-      abort(\"`as.Date()` with double/float is not supported in Arrow\")\n+  register_binding(\"as_datetime\", function(x,\n+                                           origin = \"1970-01-01\",\n+                                           tz = \"UTC\") {\n\nReview Comment:\n   Done\n\n\n\n",
                    "created": "2022-04-13T12:10:55.017+0000",
                    "updated": "2022-04-13T12:10:55.017+0000",
                    "started": "2022-04-13T12:10:55.017+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "756347",
                    "issueId": "13431013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431013/worklog/756348",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on PR #12738:\nURL: https://github.com/apache/arrow/pull/12738#issuecomment-1097976828\n\n   @AlenkaF I think this is ready for another look. Thanks!\n\n\n",
                    "created": "2022-04-13T12:11:14.562+0000",
                    "updated": "2022-04-13T12:11:14.562+0000",
                    "started": "2022-04-13T12:11:14.562+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "756348",
                    "issueId": "13431013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431013/worklog/756845",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dragosmg commented on PR #12738:\nURL: https://github.com/apache/arrow/pull/12738#issuecomment-1098772419\n\n   Thanks @AlenkaF. @thisisnic @jonkeane @nealrichardson would you be able to have a look and merge if everything is ok?\n\n\n",
                    "created": "2022-04-14T06:56:45.289+0000",
                    "updated": "2022-04-14T06:56:45.289+0000",
                    "started": "2022-04-14T06:56:45.288+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "756845",
                    "issueId": "13431013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431013/worklog/757905",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on code in PR #12738:\nURL: https://github.com/apache/arrow/pull/12738#discussion_r852157664\n\n\n##########\nr/R/dplyr-funcs-datetime.R:\n##########\n@@ -372,3 +372,50 @@ binding_format_datetime <- function(x, format = \"\", tz = \"\", usetz = FALSE) {\n \n   build_expr(\"strftime\", x, options = list(format = format, locale = Sys.getlocale(\"LC_TIME\")))\n }\n+\n+binding_as_date <- function(x,\n+                            format = NULL,\n+                            tryFormats = \"%Y-%m-%d\",\n+                            origin = \"1970-01-01\",\n+                            tz = \"UTC\",\n+                            base = TRUE) {\n+\n+  if (is.null(format) && length(tryFormats) > 1) {\n+    abort(\"`as.Date()` with multiple `tryFormats` is not supported in Arrow\")\n+  }\n+\n+  if (call_binding(\"is.Date\", x)) {\n+    return(x)\n+\n+    # cast from POSIXct\n+  } else if (call_binding(\"is.POSIXct\", x)) {\n+    # base::as.Date() first converts to the desired timezone and then extracts\n+    # the date, which is why we need to go through timestamp() first\n+    if (base || !is.null(tz)) {\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = timestamp(timezone = tz)))\n+    }\n\nReview Comment:\n   Would it be possible to put this exceptional case in the binding for `as.Date` before then calling `binding_as_date`? I'm not 100% sure it would be cleaner, necessarily, but it would make this helper function much cleaner, and keep the exceptional part of the binding with the binding declaration bit.\n\n\n\n##########\nr/tests/testthat/test-dplyr-funcs-type.R:\n##########\n@@ -854,21 +874,94 @@ test_that(\"as.Date() converts successfully from date, timestamp, integer, char a\n     fixed = TRUE\n   )\n \n-  # we do not support as.Date() with double/ float\n-  compare_dplyr_binding(\n-     .input %>%\n+\n+  # we do not support as.Date() with double/ float (error surfaced from C++)\n+  # TODO revisit after https://issues.apache.org/jira/browse/ARROW-15798\n+  expect_error(\n+    test_df %>%\n+      arrow_table() %>%\n       mutate(date_double = as.Date(double_var, origin = \"1970-01-01\")) %>%\n+      collect()\n+  )\n+\n+  # we do not support as_date with double/ float (error surfaced from C++)\n+  # TODO revisit after https://issues.apache.org/jira/browse/ARROW-15798\n\nReview Comment:\n   ```suggestion\r\n     # TODO: revisit after https://issues.apache.org/jira/browse/ARROW-15798\r\n   ```\n\n\n\n##########\nr/tests/testthat/test-dplyr-funcs-type.R:\n##########\n@@ -854,21 +874,94 @@ test_that(\"as.Date() converts successfully from date, timestamp, integer, char a\n     fixed = TRUE\n   )\n \n-  # we do not support as.Date() with double/ float\n-  compare_dplyr_binding(\n-     .input %>%\n+\n+  # we do not support as.Date() with double/ float (error surfaced from C++)\n+  # TODO revisit after https://issues.apache.org/jira/browse/ARROW-15798\n+  expect_error(\n+    test_df %>%\n+      arrow_table() %>%\n       mutate(date_double = as.Date(double_var, origin = \"1970-01-01\")) %>%\n+      collect()\n+  )\n+\n+  # we do not support as_date with double/ float (error surfaced from C++)\n+  # TODO revisit after https://issues.apache.org/jira/browse/ARROW-15798\n+  expect_error(\n+    test_df %>%\n+      arrow_table() %>%\n+      mutate(date_double = as_date(double_var, origin = \"1970-01-01\")) %>%\n+      collect()\n+  )\n+\n+  # difference between as.Date() and as_date():\n+  #`as.Date()` ignores the `tzone` attribute and uses the value of the `tz` arg\n+  # to `as.Date()`\n+  # `as_date()` does the opposite: uses the tzone attribute of the POSIXct object\n+  # passsed if`tz` is NULL\n+  compare_dplyr_binding(\n+    .input %>%\n+      transmute(\n+        date_diff_lubridate = as_date(difference_date),\n+        date_diff_base = as.Date(difference_date)\n+      ) %>%\n+      collect(),\n+    test_df\n+  )\n+})\n+\n+test_that(\"`as_datetime()`\", {\n+  test_df <- tibble(\n+    date = as.Date(c(\"2022-03-22\", \"2021-07-30\", NA)),\n+    char_date = c(\"2022-03-22\", \"2021-07-30 14:32:47\", NA),\n+    char_date_non_iso = c(\"2022-22-03 12:34:56\", \"2021-30-07 14:32:47\", NA),\n+    int_date = c(10L, 25L, NA),\n+    integerish_date = c(10, 25, NA),\n+    double_date = c(10.1, 25.2, NA)\n+  )\n+\n+  test_df %>%\n+    arrow_table() %>%\n+    mutate(\n+      ddate = as_datetime(date),\n+      dchar_date_no_tz = as_datetime(char_date),\n+      dchar_date_non_iso = as_datetime(char_date_non_iso, format = \"%Y-%d-%m %H:%M:%S\"),\n+      dint_date = as_datetime(int_date, origin = \"1970-01-02\"),\n+      dintegerish_date = as_datetime(integerish_date, origin = \"1970-01-02\"),\n+      dintegerish_date2 = as_datetime(integerish_date, origin = \"1970-01-01\")\n+    ) %>%\n+    collect()\n+\n+  compare_dplyr_binding(\n+    .input %>%\n+      mutate(\n+        ddate = as_datetime(date),\n+        dchar_date_no_tz = as_datetime(char_date),\n+        dint_date = as_datetime(int_date, origin = \"1970-01-02\"),\n+        dintegerish_date = as_datetime(integerish_date, origin = \"1970-01-02\"),\n+        dintegerish_date2 = as_datetime(integerish_date, origin = \"1970-01-01\")\n+      ) %>%\n+      collect(),\n+    test_df\n+  )\n+\n+  # Arrow does not support conversion of double to date\n+  # the below should error with an error message originating in the C++ code\n+  expect_error(\n+    test_df %>%\n+      arrow_table() %>%\n+      mutate(\n+        ddouble_date = as_datetime(double_date)\n+      ) %>%\n       collect(),\n-     test_df,\n-     warning = TRUE\n+    regexp = \"Float value 10.1 was truncated converting to int64\"\n   )\n \n+  # separate tz test so we can skip on Windows\n   skip_on_os(\"windows\") # https://issues.apache.org/jira/browse/ARROW-13168\n\nReview Comment:\n   We shouldn't need to skip on windows anymore, right?\n\n\n\n##########\nr/R/dplyr-funcs-datetime.R:\n##########\n@@ -372,3 +372,50 @@ binding_format_datetime <- function(x, format = \"\", tz = \"\", usetz = FALSE) {\n \n   build_expr(\"strftime\", x, options = list(format = format, locale = Sys.getlocale(\"LC_TIME\")))\n }\n+\n+binding_as_date <- function(x,\n+                            format = NULL,\n+                            tryFormats = \"%Y-%m-%d\",\n+                            origin = \"1970-01-01\",\n+                            tz = \"UTC\",\n+                            base = TRUE) {\n+\n+  if (is.null(format) && length(tryFormats) > 1) {\n+    abort(\"`as.Date()` with multiple `tryFormats` is not supported in Arrow\")\n+  }\n+\n+  if (call_binding(\"is.Date\", x)) {\n+    return(x)\n+\n+    # cast from POSIXct\n+  } else if (call_binding(\"is.POSIXct\", x)) {\n+    # base::as.Date() first converts to the desired timezone and then extracts\n+    # the date, which is why we need to go through timestamp() first\n+    if (base || !is.null(tz)) {\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = timestamp(timezone = tz)))\n+    }\n+    # POSIXct is of type double -> we need this to prevent going down the\n+    # \"double\" branch\n+    x <- x\n+\n+    # cast from character\n+  } else if (call_binding(\"is.character\", x)) {\n+    format <- format %||% tryFormats[[1]]\n+    # unit = 0L is the identifier for seconds in valid_time32_units\n+    x <- build_expr(\"strptime\", x, options = list(format = format, unit = 0L))\n+\n+    # cast from numeric\n+  } else if (call_binding(\"is.numeric\", x) &\n+             (!call_binding(\"is.integer\", x) | origin != \"1970-01-01\")) {\n+    # Arrow does not support direct casting from double to date32(), but for\n+    # integer-like values we can go via int32()\n+    # https://issues.apache.org/jira/browse/ARROW-15798\n+    # TODO revisit if arrow decides to support double -> date casting\n+    x <- build_expr(\"cast\", x, options = cast_options(to_type = int32()))\n+    delta_in_sec <- call_binding(\"difftime\", origin, \"1970-01-01\")\n+    delta_in_sec <- build_expr(\"cast\", delta_in_sec, options = cast_options(to_type = int64()))\n+    delta_in_days <- (delta_in_sec / 86400L)$cast(int32())\n+    x <- build_expr(\"+\", x, delta_in_days)\n\nReview Comment:\n   I'm a little bit confused about this section. I suspect that we might be conflating a few things together which is making this hard(er) to read than it needs to be:\r\n   \r\n   * For the condition, we trigger this block if `x` is numeric and either (or both) x is not an integer or the origin is non-default. And that means we are conflating our float work around with allowing a non-default origin. I bet if we separated these two out, that would make this clearer + easier to maintain. Feel free to break this out into a separate smaller help function if that's beneficial.\r\n   * The casting on `delta_in_sec` seems off \u2014 is there a reason you want|need to case that to int64, and then later divide by something that can fit in int32, then bast it to int32? Could you start off as int32 on line 416?\r\n    \n\n\n\n##########\nr/R/dplyr-funcs-datetime.R:\n##########\n@@ -372,3 +372,50 @@ binding_format_datetime <- function(x, format = \"\", tz = \"\", usetz = FALSE) {\n \n   build_expr(\"strftime\", x, options = list(format = format, locale = Sys.getlocale(\"LC_TIME\")))\n }\n+\n+binding_as_date <- function(x,\n+                            format = NULL,\n+                            tryFormats = \"%Y-%m-%d\",\n+                            origin = \"1970-01-01\",\n+                            tz = \"UTC\",\n+                            base = TRUE) {\n+\n+  if (is.null(format) && length(tryFormats) > 1) {\n+    abort(\"`as.Date()` with multiple `tryFormats` is not supported in Arrow\")\n+  }\n+\n+  if (call_binding(\"is.Date\", x)) {\n+    return(x)\n+\n+    # cast from POSIXct\n+  } else if (call_binding(\"is.POSIXct\", x)) {\n+    # base::as.Date() first converts to the desired timezone and then extracts\n+    # the date, which is why we need to go through timestamp() first\n+    if (base || !is.null(tz)) {\n+      x <- build_expr(\"cast\", x, options = cast_options(to_type = timestamp(timezone = tz)))\n+    }\n+    # POSIXct is of type double -> we need this to prevent going down the\n+    # \"double\" branch\n+    x <- x\n\nReview Comment:\n   I'm not sure I follow what happens if we don't have this self assignment? This shouldn't be needed (and honestly shouldn't have any effect)\n\n\n\n",
                    "created": "2022-04-18T14:36:19.280+0000",
                    "updated": "2022-04-18T14:36:19.280+0000",
                    "started": "2022-04-18T14:36:19.280+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "757905",
                    "issueId": "13431013"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 35400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@9ff5358[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58bbc5e3[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b59ae68[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2dcbf23d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4d6199b3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6f91c1a6[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@9dd08d2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7b7549ce[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a18fb12[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5b659106[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a1f8920[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6b758c94[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 35400,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Apr 22 16:09:09 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-04-22T16:09:09.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15800/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-02-28T15:11:49.000+0000",
        "updated": "2022-04-28T15:15:19.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "9h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 35400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Implement bindings for lubridate::as_date() and lubridate::as_datetime()",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13431013/comment/17526528",
                    "id": "17526528",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 12738\n[https://github.com/apache/arrow/pull/12738]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-04-22T16:09:09.381+0000",
                    "updated": "2022-04-22T16:09:09.381+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z100bk:",
        "customfield_12314139": null
    }
}