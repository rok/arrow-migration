{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13136678",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678",
    "key": "ARROW-2102",
    "fields": {
        "parent": {
            "id": "13061965",
            "key": "ARROW-772",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13061965",
            "fields": {
                "summary": "[C++] Implement take kernel functions",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12526419",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12526419",
                "type": {
                    "id": "10020",
                    "name": "Cloners",
                    "inward": "is cloned by",
                    "outward": "is a clone of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10020"
                },
                "inwardIssue": {
                    "id": "13136679",
                    "key": "ARROW-2103",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136679",
                    "fields": {
                        "summary": "[C++] Implement take kernel functions - string/binary value type",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alphalfalfa",
            "name": "alphalfalfa",
            "key": "alphalfalfa",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Jingyuan Wang",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alphalfalfa",
            "name": "alphalfalfa",
            "key": "alphalfalfa",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Jingyuan Wang",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 42000,
            "total": 42000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 42000,
            "total": 42000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2102/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 86,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/worklog/197577",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563#discussion_r255535846\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take.h\n ##########\n @@ -0,0 +1,65 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_COMPUTE_KERNELS_TAKE_H\n+#define ARROW_COMPUTE_KERNELS_TAKE_H\n+\n+#include <memory>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+#include \"arrow/compute/kernel.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class ChunkedArray;\n+class Column;\n+class DataType;\n+\n+namespace compute {\n+\n+struct ARROW_EXPORT TakeOptions {\n+  enum OutOfBoundMode { RAISE, WRAP, CLIP };\n \n Review comment:\n   Add comments describing the behavior of each options.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T14:18:59.821+0000",
                    "updated": "2019-02-12T14:18:59.821+0000",
                    "started": "2019-02-12T14:18:59.820+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197577",
                    "issueId": "13136678"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/worklog/197578",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563#discussion_r255951673\n \n \n\n ##########\n File path: cpp/src/arrow/compute/compute-test.cc\n ##########\n @@ -1120,5 +1121,207 @@ TEST_F(TestHashKernel, ChunkedArrayInvoke) {\n   ASSERT_TRUE(encoded_out.chunked_array()->Equals(*dict_carr));\n }\n \n+class TestTake : public ComputeFixture, public TestBase {\n+ public:\n+  void CheckPass(const Array& input,\n+                 const Array& indices,\n+                 const Array& expected,\n+                 const TakeOptions& options) {\n+    shared_ptr<Array> result;\n+    ASSERT_OK(Take(&ctx_, input, indices, options, &result));\n+    ASSERT_ARRAYS_EQUAL(expected, *result);\n+  }\n+\n+  void CheckPass(const Array& input,\n+                 const int64_t& index,\n+                 const Array& expected,\n+                 const TakeOptions& options) {\n+    shared_ptr<Array> result;\n+    ASSERT_OK(Take(&ctx_, input, index, options, &result));\n+    ASSERT_ARRAYS_EQUAL(expected, *result);\n+  }\n+\n+  void CheckFails(const Array& input,\n+                  const Array& indices,\n+                  const Array& expected,\n+                  const TakeOptions& options) {\n+    shared_ptr<Array> result;\n+    ASSERT_RAISES(NotImplemented, Take(&ctx_, input, indices, options, &result));\n+  }\n+\n+  template <typename ValueType, typename V, typename IndexType, typename I>\n+  void CheckCase(const shared_ptr<DataType>& value_type,\n+                 const vector<V>& input,\n+                 const vector<bool>& is_valid_input,\n+                 const shared_ptr<DataType>& index_type,\n+                 const vector<I>& indices,\n+                 const vector<bool>& is_valid_indices,\n+                 const vector<V>& expect,\n+                 const vector<bool>& is_valid_expect,\n+                 const TakeOptions& options) {\n+    shared_ptr<Array> input_a, indices_a, expect_a;\n+    if (is_valid_input.empty()) {\n \n Review comment:\n   Is there a reason why the empty check is done? You can still pass a vector with zero elements.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T14:19:00.799+0000",
                    "updated": "2019-02-12T14:19:00.799+0000",
                    "started": "2019-02-12T14:19:00.798+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197578",
                    "issueId": "13136678"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/worklog/197579",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563#discussion_r255951995\n \n \n\n ##########\n File path: cpp/src/arrow/compute/compute-test.cc\n ##########\n @@ -1120,5 +1121,207 @@ TEST_F(TestHashKernel, ChunkedArrayInvoke) {\n   ASSERT_TRUE(encoded_out.chunked_array()->Equals(*dict_carr));\n }\n \n+class TestTake : public ComputeFixture, public TestBase {\n+ public:\n+  void CheckPass(const Array& input,\n+                 const Array& indices,\n+                 const Array& expected,\n+                 const TakeOptions& options) {\n+    shared_ptr<Array> result;\n+    ASSERT_OK(Take(&ctx_, input, indices, options, &result));\n+    ASSERT_ARRAYS_EQUAL(expected, *result);\n+  }\n+\n+  void CheckPass(const Array& input,\n+                 const int64_t& index,\n+                 const Array& expected,\n+                 const TakeOptions& options) {\n+    shared_ptr<Array> result;\n+    ASSERT_OK(Take(&ctx_, input, index, options, &result));\n+    ASSERT_ARRAYS_EQUAL(expected, *result);\n+  }\n+\n+  void CheckFails(const Array& input,\n+                  const Array& indices,\n+                  const Array& expected,\n+                  const TakeOptions& options) {\n+    shared_ptr<Array> result;\n+    ASSERT_RAISES(NotImplemented, Take(&ctx_, input, indices, options, &result));\n+  }\n+\n+  template <typename ValueType, typename V, typename IndexType, typename I>\n \n Review comment:\n   Consider using default argument to templates to simplify the callsite, e.g.\r\n   \r\n   ```\r\n   template <typename ValueType, typename V = ValueType::c_type, typename IndexType, typename I = IndexType::c_type>\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T14:19:00.842+0000",
                    "updated": "2019-02-12T14:19:00.842+0000",
                    "started": "2019-02-12T14:19:00.841+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197579",
                    "issueId": "13136678"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/worklog/197580",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563#discussion_r255951515\n \n \n\n ##########\n File path: cpp/src/arrow/compute/compute-test.cc\n ##########\n @@ -1120,5 +1121,207 @@ TEST_F(TestHashKernel, ChunkedArrayInvoke) {\n   ASSERT_TRUE(encoded_out.chunked_array()->Equals(*dict_carr));\n }\n \n+class TestTake : public ComputeFixture, public TestBase {\n+ public:\n+  void CheckPass(const Array& input,\n+                 const Array& indices,\n+                 const Array& expected,\n+                 const TakeOptions& options) {\n+    shared_ptr<Array> result;\n+    ASSERT_OK(Take(&ctx_, input, indices, options, &result));\n+    ASSERT_ARRAYS_EQUAL(expected, *result);\n+  }\n+\n+  void CheckPass(const Array& input,\n+                 const int64_t& index,\n+                 const Array& expected,\n+                 const TakeOptions& options) {\n+    shared_ptr<Array> result;\n+    ASSERT_OK(Take(&ctx_, input, index, options, &result));\n+    ASSERT_ARRAYS_EQUAL(expected, *result);\n+  }\n+\n+  void CheckFails(const Array& input,\n+                  const Array& indices,\n+                  const Array& expected,\n+                  const TakeOptions& options) {\n+    shared_ptr<Array> result;\n+    ASSERT_RAISES(NotImplemented, Take(&ctx_, input, indices, options, &result));\n+  }\n+\n+  template <typename ValueType, typename V, typename IndexType, typename I>\n+  void CheckCase(const shared_ptr<DataType>& value_type,\n+                 const vector<V>& input,\n+                 const vector<bool>& is_valid_input,\n+                 const shared_ptr<DataType>& index_type,\n+                 const vector<I>& indices,\n+                 const vector<bool>& is_valid_indices,\n+                 const vector<V>& expect,\n+                 const vector<bool>& is_valid_expect,\n+                 const TakeOptions& options) {\n+    shared_ptr<Array> input_a, indices_a, expect_a;\n+    if (is_valid_input.empty()) {\n+      ArrayFromVector<ValueType, V>(value_type, input, &input_a);\n+    } else {\n+      ArrayFromVector<ValueType, V>(value_type, is_valid_input, input, &input_a);\n+    }\n+    if (is_valid_indices.empty()) {\n+      ArrayFromVector<IndexType, I>(index_type, indices, &indices_a);\n+    } else {\n+      ArrayFromVector<IndexType, I>(index_type, is_valid_indices, indices, &indices_a);\n+    }\n+    if (is_valid_expect.empty()) {\n+      ArrayFromVector<ValueType, V>(value_type, expect, &expect_a);\n+    } else {\n+      ArrayFromVector<ValueType, V>(value_type, is_valid_expect, expect, &expect_a);\n+    }\n+    CheckPass(*input_a, *indices_a, *expect_a, options);\n+  }\n+};\n+\n+TEST_F(TestTake, NumericValueTypeCases) {\n \n Review comment:\n   This could be simplified with GTest templated tests feature (and type_traits.h).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T14:19:00.995+0000",
                    "updated": "2019-02-12T14:19:00.995+0000",
                    "started": "2019-02-12T14:19:00.994+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197580",
                    "issueId": "13136678"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/worklog/197581",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563#discussion_r255953898\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take.cc\n ##########\n @@ -0,0 +1,351 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/take.h\"\n+\n+#include <sstream>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compare.h\"\n+#include \"arrow/util/logging.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+\n+#ifdef ARROW_EXTRA_ERROR_CONTEXT\n+\n+#define FUNC_RETURN_NOT_OK(s)                                                       \\\n+  do {                                                                              \\\n+    Status _s = (s);                                                                \\\n+    if (ARROW_PREDICT_FALSE(!_s.ok())) {                                            \\\n+      std::stringstream ss;                                                         \\\n+      ss << __FILE__ << \":\" << __LINE__ << \" code: \" << #s << \"\\n\" << _s.message(); \\\n+      ctx->SetStatus(Status(_s.code(), ss.str()));                                  \\\n+      return;                                                                       \\\n+    }                                                                               \\\n+  } while (0)\n+\n+#else\n+\n+#define FUNC_RETURN_NOT_OK(s)            \\\n+  do {                                   \\\n+    Status _s = (s);                     \\\n+    if (ARROW_PREDICT_FALSE(!_s.ok())) { \\\n+      ctx->SetStatus(_s);                \\\n+      return;                            \\\n+    }                                    \\\n+  } while (0)\n+\n+#endif  // ARROW_EXTRA_ERROR_CONTEXT\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename T>\n+using enable_if_index_valid =\n+typename std::enable_if<std::is_base_of<Integer, T>::value>::type;\n+\n+template <typename ValueType, typename IndexType, typename Enable = void>\n+struct TakeFunctor {};\n+\n+template <typename V, typename I>\n+struct TakeFunctor<V, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {\n+    using value_type = typename V::c_type;\n+    using index_type = typename I::c_type;\n+    auto in_data = GetValues<value_type>(input, 1);\n+    auto index_data = GetValues<index_type>(indices, 1);\n+\n+    auto out_data = GetMutableValues<value_type>(output, 1);\n+    for (int64_t i = 0; i < indices.length; ++i) {\n+      *out_data++ = *(in_data + (*index_data++));\n+    }\n+  }\n+};\n+\n+template <typename I>\n+struct TakeFunctor<BooleanType, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {\n+    auto index_data = GetValues<int32_t>(indices, 1);\n+    const uint8_t* input_data = input.buffers[1]->data();\n+    uint8_t* out_data = output->buffers[1]->mutable_data();\n+    internal::BitmapWriter bit_writer(out_data, output->offset, indices.length);\n+    for (int64_t i = 0; i < indices.length; ++i) {\n+      if (BitUtil::GetBit(input_data, *index_data++)) {\n+        bit_writer.Set();\n+      } else {\n+        bit_writer.Clear();\n+      }\n+      bit_writer.Next();\n+    }\n+    bit_writer.Finish();\n+  }\n+};\n+\n+template <typename I>\n+struct TakeFunctor<NullType, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {}\n+};\n+\n+// ----------------------------------------------------------------------\n+\n+typedef std::function<void(FunctionContext*,\n+                           const TakeOptions& options,\n+                           const ArrayData&,\n+                           const ArrayData&,\n+                           ArrayData*)>\n+    TakeFunction;\n+\n+static Status AllocateIfNotPreallocated(FunctionContext* ctx,\n+                                        const int64_t length,\n+                                        ArrayData* out) {\n+  if (out->buffers.size() == 2) { // pre-allocated\n+    return Status::OK();\n+  } else {\n+    DCHECK_EQ(0, out->buffers.size());\n+  }\n+\n+  std::shared_ptr<Buffer> validity_bitmap;\n+  int64_t bitmap_size = BitUtil::BytesForBits(length);\n+  RETURN_NOT_OK(ctx->Allocate(bitmap_size, &validity_bitmap));\n+  if (out->type->id() == Type::NA) {\n+    out->null_count = length;\n+    memset(validity_bitmap->mutable_data(), 0, bitmap_size);\n+  } else {\n+    out->null_count = 0;\n+    memset(validity_bitmap->mutable_data(), 0xFF, bitmap_size); // preset all to valid\n+  }\n+\n+  const Type::type type_id = out->type->id();\n+  if (!(is_primitive(type_id) || type_id == Type::FIXED_SIZE_BINARY ||\n+      type_id == Type::DECIMAL)) {\n+    std::stringstream ss;\n+    ss << \"Cannot pre-allocate memory for type: \" << out->type->ToString();\n+    return Status::NotImplemented(ss.str());\n+  }\n+\n+  std::shared_ptr<Buffer> out_data;\n+  if (type_id != Type::NA) {\n+    const auto& fw_type = static_cast<const FixedWidthType&>(*out->type);\n+    int bit_width = fw_type.bit_width();\n+    int64_t buffer_size = 0;\n+    if (bit_width == 1) {\n+      buffer_size = BitUtil::BytesForBits(length);\n+    } else if (bit_width % 8 == 0) {\n+      buffer_size = length * fw_type.bit_width() / 8;\n+    } else {\n+      DCHECK(false);\n+    }\n+    RETURN_NOT_OK(ctx->Allocate(buffer_size, &out_data));\n+    memset(out_data->mutable_data(), 0, buffer_size);\n+  }\n+\n+  out->buffers.push_back(validity_bitmap);\n+  out->buffers.push_back(out_data);\n+\n+  return Status::OK();\n+}\n+\n+template <typename IndexType>\n+class TakeKernel : public UnaryKernel {};\n+\n+template <>\n+class TakeKernel<Int32Type> : public UnaryKernel {\n+ public:\n+  TakeKernel(const TakeOptions& options, const TakeFunction& func,\n+             const std::shared_ptr<DataType>& index_type)\n+      : options_(options),\n+        func_(func),\n+        index_type_(index_type) {}\n+\n+  Status Call(FunctionContext* ctx, const Datum& input, Datum* out) override {\n+    DCHECK_EQ(Datum::COLLECTION, input.kind());\n+\n+    const std::vector<Datum>& input_datums = input.collection();\n+    auto input_array = input_datums[0].array();\n+    auto indies_array = input_datums[1].array();\n+\n+    ArrayData* result;\n+    if (out->kind() == Datum::NONE) {\n+      out->value = ArrayData::Make(input_array->type, indies_array->length);\n+    }\n+    result = out->array().get();\n+    RETURN_NOT_OK(AllocateIfNotPreallocated(ctx, indies_array->length, result));\n+\n+    func_(ctx, options_, *input_array, *indies_array, result);\n+\n+    RETURN_IF_ERROR(ctx);\n+    return Status::OK();\n+  }\n+\n+ private:\n+  TakeOptions options_;\n+  TakeFunction func_;\n+  std::shared_ptr<DataType> index_type_;\n+};\n+\n+#define TAKE_CASE(ValueType, IndexType)                                                 \\\n+  case IndexType::type_id:                                                              \\\n+    func = [](FunctionContext* ctx, const TakeOptions& options, const ArrayData& input, \\\n+              const ArrayData& indices, ArrayData* out) {                               \\\n+      TakeFunctor<ValueType, IndexType> func;                                           \\\n+      func(ctx, options, input, indices, out);                                          \\\n+    };                                                                                  \\\n+    break;\n+\n+#define PRIMITIVE_CASES(FN, VALUE_TYPE) \\\n+  FN(VALUE_TYPE, Int8Type);           \\\n+  FN(VALUE_TYPE, UInt8Type);          \\\n+  FN(VALUE_TYPE, Int16Type);          \\\n+  FN(VALUE_TYPE, UInt16Type);         \\\n+  FN(VALUE_TYPE, Int32Type);          \\\n+  FN(VALUE_TYPE, UInt32Type);         \\\n+  FN(VALUE_TYPE, Int64Type);          \\\n+  FN(VALUE_TYPE, UInt64Type);\n+\n+#define GET_TAKE_FUNCTION(CASE_GENERATOR, ValueType)                           \\\n+  static std::unique_ptr<UnaryKernel> Get##ValueType##TakeFunc(                \\\n+      const std::shared_ptr<DataType>& index_type,                             \\\n+      const TakeOptions& options) {                                            \\\n+    TakeFunction func;                                                         \\\n+    switch (index_type->id()) {                                                \\\n+      CASE_GENERATOR(TAKE_CASE, ValueType);                                    \\\n+      default:                                                                 \\\n+        break;                                                                 \\\n+    }                                                                          \\\n+    if (func != nullptr) {                                                     \\\n+      return std::unique_ptr<UnaryKernel>(new TakeKernel<Int32Type>(           \\\n+          options, func, index_type));                                         \\\n+    }                                                                          \\\n+    return nullptr;                                                            \\\n+  }\n+\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, NullType);\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, BooleanType);\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, UInt8Type);\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, Int8Type);\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, UInt16Type);\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, Int16Type);\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, Int32Type);\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, UInt32Type);\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, Int64Type);\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, UInt64Type);\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, FloatType);\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, DoubleType);\n+\n+#define TAKE_FUNCTION_CASE(ValueType)                                    \\\n+  case ValueType::type_id:                                               \\\n+    *kernel = Get##ValueType##TakeFunc(index_type, options);             \\\n+    break\n+\n+\n+Status GetTakeFunction(const std::shared_ptr<DataType>& value_type,\n+                       const std::shared_ptr<DataType>& index_type,\n+                       const TakeOptions& options,\n+                       std::unique_ptr<UnaryKernel>* kernel) {\n+  switch (value_type->id()) {\n+    TAKE_FUNCTION_CASE(NullType);\n+    TAKE_FUNCTION_CASE(BooleanType);\n+    TAKE_FUNCTION_CASE(UInt8Type);\n+    TAKE_FUNCTION_CASE(Int8Type);\n+    TAKE_FUNCTION_CASE(UInt16Type);\n+    TAKE_FUNCTION_CASE(Int16Type);\n+    TAKE_FUNCTION_CASE(UInt32Type);\n+    TAKE_FUNCTION_CASE(Int32Type);\n+    TAKE_FUNCTION_CASE(UInt64Type);\n+    TAKE_FUNCTION_CASE(Int64Type);\n+    TAKE_FUNCTION_CASE(FloatType);\n+    TAKE_FUNCTION_CASE(DoubleType);\n+    default:\n+      break;\n+  }\n+  if (*kernel == nullptr) {\n+    std::stringstream ss;\n+    ss << \"No take implemented of value type (\" << value_type->ToString()\n+       << \") with index type (\" << index_type->ToString() << \")\";\n+    return Status::NotImplemented(ss.str());\n+  }\n+  return Status::OK();\n+}\n+\n+Status Take(FunctionContext* context,\n+            const Datum& in,\n+            const Datum& indices,\n+            const TakeOptions& options,\n+            Datum* out) {\n+  std::vector<Datum> input_datums;\n+  input_datums.emplace_back(in);\n+  input_datums.emplace_back(indices);\n+\n+  std::unique_ptr<UnaryKernel> func;\n+  RETURN_NOT_OK(GetTakeFunction(in.type(), indices.type(), {}, &func));\n \n Review comment:\n   Did you forget to pass options? Which begs the questions, are the different option tested?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T14:19:00.996+0000",
                    "updated": "2019-02-12T14:19:00.996+0000",
                    "started": "2019-02-12T14:19:00.965+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197581",
                    "issueId": "13136678"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/worklog/197582",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563#discussion_r255953085\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take.h\n ##########\n @@ -0,0 +1,65 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_COMPUTE_KERNELS_TAKE_H\n+#define ARROW_COMPUTE_KERNELS_TAKE_H\n+\n+#include <memory>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+#include \"arrow/compute/kernel.h\"\n+\n+namespace arrow {\n+\n+class Array;\n \n Review comment:\n   Only `Array` is used, the rest is unused in this file.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T14:19:01.103+0000",
                    "updated": "2019-02-12T14:19:01.103+0000",
                    "started": "2019-02-12T14:19:01.102+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197582",
                    "issueId": "13136678"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/worklog/197583",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563#discussion_r255957620\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take.cc\n ##########\n @@ -0,0 +1,351 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/take.h\"\n+\n+#include <sstream>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compare.h\"\n+#include \"arrow/util/logging.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+\n+#ifdef ARROW_EXTRA_ERROR_CONTEXT\n+\n+#define FUNC_RETURN_NOT_OK(s)                                                       \\\n+  do {                                                                              \\\n+    Status _s = (s);                                                                \\\n+    if (ARROW_PREDICT_FALSE(!_s.ok())) {                                            \\\n+      std::stringstream ss;                                                         \\\n+      ss << __FILE__ << \":\" << __LINE__ << \" code: \" << #s << \"\\n\" << _s.message(); \\\n+      ctx->SetStatus(Status(_s.code(), ss.str()));                                  \\\n+      return;                                                                       \\\n+    }                                                                               \\\n+  } while (0)\n+\n+#else\n+\n+#define FUNC_RETURN_NOT_OK(s)            \\\n+  do {                                   \\\n+    Status _s = (s);                     \\\n+    if (ARROW_PREDICT_FALSE(!_s.ok())) { \\\n+      ctx->SetStatus(_s);                \\\n+      return;                            \\\n+    }                                    \\\n+  } while (0)\n+\n+#endif  // ARROW_EXTRA_ERROR_CONTEXT\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename T>\n+using enable_if_index_valid =\n+typename std::enable_if<std::is_base_of<Integer, T>::value>::type;\n+\n+template <typename ValueType, typename IndexType, typename Enable = void>\n+struct TakeFunctor {};\n+\n+template <typename V, typename I>\n+struct TakeFunctor<V, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {\n+    using value_type = typename V::c_type;\n+    using index_type = typename I::c_type;\n+    auto in_data = GetValues<value_type>(input, 1);\n+    auto index_data = GetValues<index_type>(indices, 1);\n+\n+    auto out_data = GetMutableValues<value_type>(output, 1);\n+    for (int64_t i = 0; i < indices.length; ++i) {\n+      *out_data++ = *(in_data + (*index_data++));\n+    }\n+  }\n+};\n+\n+template <typename I>\n+struct TakeFunctor<BooleanType, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {\n+    auto index_data = GetValues<int32_t>(indices, 1);\n+    const uint8_t* input_data = input.buffers[1]->data();\n+    uint8_t* out_data = output->buffers[1]->mutable_data();\n+    internal::BitmapWriter bit_writer(out_data, output->offset, indices.length);\n+    for (int64_t i = 0; i < indices.length; ++i) {\n+      if (BitUtil::GetBit(input_data, *index_data++)) {\n+        bit_writer.Set();\n+      } else {\n+        bit_writer.Clear();\n+      }\n+      bit_writer.Next();\n+    }\n+    bit_writer.Finish();\n+  }\n+};\n+\n+template <typename I>\n+struct TakeFunctor<NullType, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {}\n+};\n+\n+// ----------------------------------------------------------------------\n+\n+typedef std::function<void(FunctionContext*,\n+                           const TakeOptions& options,\n+                           const ArrayData&,\n+                           const ArrayData&,\n+                           ArrayData*)>\n+    TakeFunction;\n+\n+static Status AllocateIfNotPreallocated(FunctionContext* ctx,\n+                                        const int64_t length,\n+                                        ArrayData* out) {\n+  if (out->buffers.size() == 2) { // pre-allocated\n+    return Status::OK();\n+  } else {\n+    DCHECK_EQ(0, out->buffers.size());\n+  }\n+\n+  std::shared_ptr<Buffer> validity_bitmap;\n+  int64_t bitmap_size = BitUtil::BytesForBits(length);\n+  RETURN_NOT_OK(ctx->Allocate(bitmap_size, &validity_bitmap));\n+  if (out->type->id() == Type::NA) {\n+    out->null_count = length;\n+    memset(validity_bitmap->mutable_data(), 0, bitmap_size);\n+  } else {\n+    out->null_count = 0;\n+    memset(validity_bitmap->mutable_data(), 0xFF, bitmap_size); // preset all to valid\n+  }\n+\n+  const Type::type type_id = out->type->id();\n+  if (!(is_primitive(type_id) || type_id == Type::FIXED_SIZE_BINARY ||\n+      type_id == Type::DECIMAL)) {\n+    std::stringstream ss;\n+    ss << \"Cannot pre-allocate memory for type: \" << out->type->ToString();\n+    return Status::NotImplemented(ss.str());\n+  }\n+\n+  std::shared_ptr<Buffer> out_data;\n+  if (type_id != Type::NA) {\n+    const auto& fw_type = static_cast<const FixedWidthType&>(*out->type);\n+    int bit_width = fw_type.bit_width();\n+    int64_t buffer_size = 0;\n+    if (bit_width == 1) {\n+      buffer_size = BitUtil::BytesForBits(length);\n+    } else if (bit_width % 8 == 0) {\n+      buffer_size = length * fw_type.bit_width() / 8;\n+    } else {\n+      DCHECK(false);\n+    }\n+    RETURN_NOT_OK(ctx->Allocate(buffer_size, &out_data));\n+    memset(out_data->mutable_data(), 0, buffer_size);\n+  }\n+\n+  out->buffers.push_back(validity_bitmap);\n+  out->buffers.push_back(out_data);\n+\n+  return Status::OK();\n+}\n+\n+template <typename IndexType>\n+class TakeKernel : public UnaryKernel {};\n+\n+template <>\n+class TakeKernel<Int32Type> : public UnaryKernel {\n+ public:\n+  TakeKernel(const TakeOptions& options, const TakeFunction& func,\n+             const std::shared_ptr<DataType>& index_type)\n+      : options_(options),\n+        func_(func),\n+        index_type_(index_type) {}\n+\n+  Status Call(FunctionContext* ctx, const Datum& input, Datum* out) override {\n+    DCHECK_EQ(Datum::COLLECTION, input.kind());\n+\n+    const std::vector<Datum>& input_datums = input.collection();\n+    auto input_array = input_datums[0].array();\n+    auto indies_array = input_datums[1].array();\n+\n+    ArrayData* result;\n+    if (out->kind() == Datum::NONE) {\n+      out->value = ArrayData::Make(input_array->type, indies_array->length);\n+    }\n+    result = out->array().get();\n+    RETURN_NOT_OK(AllocateIfNotPreallocated(ctx, indies_array->length, result));\n+\n+    func_(ctx, options_, *input_array, *indies_array, result);\n+\n+    RETURN_IF_ERROR(ctx);\n+    return Status::OK();\n+  }\n+\n+ private:\n+  TakeOptions options_;\n+  TakeFunction func_;\n+  std::shared_ptr<DataType> index_type_;\n+};\n+\n+#define TAKE_CASE(ValueType, IndexType)                                                 \\\n+  case IndexType::type_id:                                                              \\\n+    func = [](FunctionContext* ctx, const TakeOptions& options, const ArrayData& input, \\\n+              const ArrayData& indices, ArrayData* out) {                               \\\n+      TakeFunctor<ValueType, IndexType> func;                                           \\\n+      func(ctx, options, input, indices, out);                                          \\\n+    };                                                                                  \\\n+    break;\n+\n+#define PRIMITIVE_CASES(FN, VALUE_TYPE) \\\n+  FN(VALUE_TYPE, Int8Type);           \\\n+  FN(VALUE_TYPE, UInt8Type);          \\\n+  FN(VALUE_TYPE, Int16Type);          \\\n+  FN(VALUE_TYPE, UInt16Type);         \\\n+  FN(VALUE_TYPE, Int32Type);          \\\n+  FN(VALUE_TYPE, UInt32Type);         \\\n+  FN(VALUE_TYPE, Int64Type);          \\\n+  FN(VALUE_TYPE, UInt64Type);\n+\n+#define GET_TAKE_FUNCTION(CASE_GENERATOR, ValueType)                           \\\n+  static std::unique_ptr<UnaryKernel> Get##ValueType##TakeFunc(                \\\n+      const std::shared_ptr<DataType>& index_type,                             \\\n+      const TakeOptions& options) {                                            \\\n+    TakeFunction func;                                                         \\\n+    switch (index_type->id()) {                                                \\\n+      CASE_GENERATOR(TAKE_CASE, ValueType);                                    \\\n+      default:                                                                 \\\n+        break;                                                                 \\\n+    }                                                                          \\\n+    if (func != nullptr) {                                                     \\\n+      return std::unique_ptr<UnaryKernel>(new TakeKernel<Int32Type>(           \\\n+          options, func, index_type));                                         \\\n+    }                                                                          \\\n+    return nullptr;                                                            \\\n+  }\n+\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, NullType);\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, BooleanType);\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, UInt8Type);\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, Int8Type);\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, UInt16Type);\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, Int16Type);\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, Int32Type);\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, UInt32Type);\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, Int64Type);\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, UInt64Type);\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, FloatType);\n+GET_TAKE_FUNCTION(PRIMITIVE_CASES, DoubleType);\n+\n+#define TAKE_FUNCTION_CASE(ValueType)                                    \\\n+  case ValueType::type_id:                                               \\\n+    *kernel = Get##ValueType##TakeFunc(index_type, options);             \\\n+    break\n+\n+\n+Status GetTakeFunction(const std::shared_ptr<DataType>& value_type,\n+                       const std::shared_ptr<DataType>& index_type,\n+                       const TakeOptions& options,\n+                       std::unique_ptr<UnaryKernel>* kernel) {\n+  switch (value_type->id()) {\n+    TAKE_FUNCTION_CASE(NullType);\n+    TAKE_FUNCTION_CASE(BooleanType);\n+    TAKE_FUNCTION_CASE(UInt8Type);\n+    TAKE_FUNCTION_CASE(Int8Type);\n+    TAKE_FUNCTION_CASE(UInt16Type);\n+    TAKE_FUNCTION_CASE(Int16Type);\n+    TAKE_FUNCTION_CASE(UInt32Type);\n+    TAKE_FUNCTION_CASE(Int32Type);\n+    TAKE_FUNCTION_CASE(UInt64Type);\n+    TAKE_FUNCTION_CASE(Int64Type);\n+    TAKE_FUNCTION_CASE(FloatType);\n+    TAKE_FUNCTION_CASE(DoubleType);\n+    default:\n+      break;\n+  }\n+  if (*kernel == nullptr) {\n+    std::stringstream ss;\n \n Review comment:\n   No need to use stringstream anymore, `Status::NotImplemented(\"No take implemented of value type (\", value_type,\") with index type (\", index_type, \")\");`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T14:19:01.113+0000",
                    "updated": "2019-02-12T14:19:01.113+0000",
                    "started": "2019-02-12T14:19:01.113+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197583",
                    "issueId": "13136678"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/worklog/197584",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563#discussion_r255952609\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/util-internal.cc\n ##########\n @@ -33,7 +33,7 @@ namespace detail {\n \n Status InvokeUnaryArrayKernel(FunctionContext* ctx, UnaryKernel* kernel,\n                               const Datum& value, std::vector<Datum>* outputs) {\n-  if (value.kind() == Datum::ARRAY) {\n+  if (value.kind() == Datum::ARRAY || value.kind() == Datum::COLLECTION) {\n \n Review comment:\n   Don't change this for now as it'll could silently break other kernels.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T14:19:01.126+0000",
                    "updated": "2019-02-12T14:19:01.126+0000",
                    "started": "2019-02-12T14:19:01.126+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197584",
                    "issueId": "13136678"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/worklog/197585",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563#discussion_r255966455\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take.cc\n ##########\n @@ -0,0 +1,351 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/take.h\"\n+\n+#include <sstream>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compare.h\"\n+#include \"arrow/util/logging.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+\n+#ifdef ARROW_EXTRA_ERROR_CONTEXT\n+\n+#define FUNC_RETURN_NOT_OK(s)                                                       \\\n+  do {                                                                              \\\n+    Status _s = (s);                                                                \\\n+    if (ARROW_PREDICT_FALSE(!_s.ok())) {                                            \\\n+      std::stringstream ss;                                                         \\\n+      ss << __FILE__ << \":\" << __LINE__ << \" code: \" << #s << \"\\n\" << _s.message(); \\\n+      ctx->SetStatus(Status(_s.code(), ss.str()));                                  \\\n+      return;                                                                       \\\n+    }                                                                               \\\n+  } while (0)\n+\n+#else\n+\n+#define FUNC_RETURN_NOT_OK(s)            \\\n+  do {                                   \\\n+    Status _s = (s);                     \\\n+    if (ARROW_PREDICT_FALSE(!_s.ok())) { \\\n+      ctx->SetStatus(_s);                \\\n+      return;                            \\\n+    }                                    \\\n+  } while (0)\n+\n+#endif  // ARROW_EXTRA_ERROR_CONTEXT\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename T>\n+using enable_if_index_valid =\n+typename std::enable_if<std::is_base_of<Integer, T>::value>::type;\n+\n+template <typename ValueType, typename IndexType, typename Enable = void>\n+struct TakeFunctor {};\n+\n+template <typename V, typename I>\n+struct TakeFunctor<V, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {\n+    using value_type = typename V::c_type;\n+    using index_type = typename I::c_type;\n+    auto in_data = GetValues<value_type>(input, 1);\n+    auto index_data = GetValues<index_type>(indices, 1);\n+\n+    auto out_data = GetMutableValues<value_type>(output, 1);\n+    for (int64_t i = 0; i < indices.length; ++i) {\n+      *out_data++ = *(in_data + (*index_data++));\n+    }\n+  }\n+};\n+\n+template <typename I>\n+struct TakeFunctor<BooleanType, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {\n+    auto index_data = GetValues<int32_t>(indices, 1);\n+    const uint8_t* input_data = input.buffers[1]->data();\n+    uint8_t* out_data = output->buffers[1]->mutable_data();\n+    internal::BitmapWriter bit_writer(out_data, output->offset, indices.length);\n+    for (int64_t i = 0; i < indices.length; ++i) {\n+      if (BitUtil::GetBit(input_data, *index_data++)) {\n \n Review comment:\n   Ditto with null bitmap.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T14:19:01.270+0000",
                    "updated": "2019-02-12T14:19:01.270+0000",
                    "started": "2019-02-12T14:19:01.269+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197585",
                    "issueId": "13136678"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/worklog/197586",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563#discussion_r255958242\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take.cc\n ##########\n @@ -0,0 +1,351 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/take.h\"\n+\n+#include <sstream>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compare.h\"\n+#include \"arrow/util/logging.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+\n+#ifdef ARROW_EXTRA_ERROR_CONTEXT\n \n Review comment:\n   This is probably clutter from debugging?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T14:19:01.289+0000",
                    "updated": "2019-02-12T14:19:01.289+0000",
                    "started": "2019-02-12T14:19:01.283+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197586",
                    "issueId": "13136678"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/worklog/197587",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563#discussion_r255970961\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take.cc\n ##########\n @@ -0,0 +1,351 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/take.h\"\n+\n+#include <sstream>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compare.h\"\n+#include \"arrow/util/logging.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+\n+#ifdef ARROW_EXTRA_ERROR_CONTEXT\n+\n+#define FUNC_RETURN_NOT_OK(s)                                                       \\\n+  do {                                                                              \\\n+    Status _s = (s);                                                                \\\n+    if (ARROW_PREDICT_FALSE(!_s.ok())) {                                            \\\n+      std::stringstream ss;                                                         \\\n+      ss << __FILE__ << \":\" << __LINE__ << \" code: \" << #s << \"\\n\" << _s.message(); \\\n+      ctx->SetStatus(Status(_s.code(), ss.str()));                                  \\\n+      return;                                                                       \\\n+    }                                                                               \\\n+  } while (0)\n+\n+#else\n+\n+#define FUNC_RETURN_NOT_OK(s)            \\\n+  do {                                   \\\n+    Status _s = (s);                     \\\n+    if (ARROW_PREDICT_FALSE(!_s.ok())) { \\\n+      ctx->SetStatus(_s);                \\\n+      return;                            \\\n+    }                                    \\\n+  } while (0)\n+\n+#endif  // ARROW_EXTRA_ERROR_CONTEXT\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename T>\n+using enable_if_index_valid =\n+typename std::enable_if<std::is_base_of<Integer, T>::value>::type;\n+\n+template <typename ValueType, typename IndexType, typename Enable = void>\n+struct TakeFunctor {};\n+\n+template <typename V, typename I>\n+struct TakeFunctor<V, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {\n+    using value_type = typename V::c_type;\n+    using index_type = typename I::c_type;\n+    auto in_data = GetValues<value_type>(input, 1);\n+    auto index_data = GetValues<index_type>(indices, 1);\n+\n+    auto out_data = GetMutableValues<value_type>(output, 1);\n+    for (int64_t i = 0; i < indices.length; ++i) {\n+      *out_data++ = *(in_data + (*index_data++));\n+    }\n+  }\n+};\n+\n+template <typename I>\n+struct TakeFunctor<BooleanType, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {\n+    auto index_data = GetValues<int32_t>(indices, 1);\n+    const uint8_t* input_data = input.buffers[1]->data();\n+    uint8_t* out_data = output->buffers[1]->mutable_data();\n+    internal::BitmapWriter bit_writer(out_data, output->offset, indices.length);\n+    for (int64_t i = 0; i < indices.length; ++i) {\n+      if (BitUtil::GetBit(input_data, *index_data++)) {\n+        bit_writer.Set();\n+      } else {\n+        bit_writer.Clear();\n+      }\n+      bit_writer.Next();\n+    }\n+    bit_writer.Finish();\n+  }\n+};\n+\n+template <typename I>\n+struct TakeFunctor<NullType, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {}\n+};\n+\n+// ----------------------------------------------------------------------\n+\n+typedef std::function<void(FunctionContext*,\n+                           const TakeOptions& options,\n+                           const ArrayData&,\n+                           const ArrayData&,\n+                           ArrayData*)>\n+    TakeFunction;\n+\n+static Status AllocateIfNotPreallocated(FunctionContext* ctx,\n+                                        const int64_t length,\n+                                        ArrayData* out) {\n+  if (out->buffers.size() == 2) { // pre-allocated\n+    return Status::OK();\n+  } else {\n+    DCHECK_EQ(0, out->buffers.size());\n+  }\n+\n+  std::shared_ptr<Buffer> validity_bitmap;\n+  int64_t bitmap_size = BitUtil::BytesForBits(length);\n+  RETURN_NOT_OK(ctx->Allocate(bitmap_size, &validity_bitmap));\n+  if (out->type->id() == Type::NA) {\n+    out->null_count = length;\n+    memset(validity_bitmap->mutable_data(), 0, bitmap_size);\n+  } else {\n+    out->null_count = 0;\n+    memset(validity_bitmap->mutable_data(), 0xFF, bitmap_size); // preset all to valid\n+  }\n+\n+  const Type::type type_id = out->type->id();\n+  if (!(is_primitive(type_id) || type_id == Type::FIXED_SIZE_BINARY ||\n+      type_id == Type::DECIMAL)) {\n+    std::stringstream ss;\n+    ss << \"Cannot pre-allocate memory for type: \" << out->type->ToString();\n+    return Status::NotImplemented(ss.str());\n+  }\n+\n+  std::shared_ptr<Buffer> out_data;\n+  if (type_id != Type::NA) {\n+    const auto& fw_type = static_cast<const FixedWidthType&>(*out->type);\n+    int bit_width = fw_type.bit_width();\n+    int64_t buffer_size = 0;\n+    if (bit_width == 1) {\n+      buffer_size = BitUtil::BytesForBits(length);\n+    } else if (bit_width % 8 == 0) {\n+      buffer_size = length * fw_type.bit_width() / 8;\n+    } else {\n+      DCHECK(false);\n+    }\n+    RETURN_NOT_OK(ctx->Allocate(buffer_size, &out_data));\n+    memset(out_data->mutable_data(), 0, buffer_size);\n+  }\n+\n+  out->buffers.push_back(validity_bitmap);\n+  out->buffers.push_back(out_data);\n+\n+  return Status::OK();\n+}\n+\n+template <typename IndexType>\n+class TakeKernel : public UnaryKernel {};\n+\n+template <>\n+class TakeKernel<Int32Type> : public UnaryKernel {\n+ public:\n+  TakeKernel(const TakeOptions& options, const TakeFunction& func,\n+             const std::shared_ptr<DataType>& index_type)\n+      : options_(options),\n+        func_(func),\n+        index_type_(index_type) {}\n+\n+  Status Call(FunctionContext* ctx, const Datum& input, Datum* out) override {\n+    DCHECK_EQ(Datum::COLLECTION, input.kind());\n+\n+    const std::vector<Datum>& input_datums = input.collection();\n+    auto input_array = input_datums[0].array();\n+    auto indies_array = input_datums[1].array();\n+\n+    ArrayData* result;\n+    if (out->kind() == Datum::NONE) {\n+      out->value = ArrayData::Make(input_array->type, indies_array->length);\n+    }\n+    result = out->array().get();\n+    RETURN_NOT_OK(AllocateIfNotPreallocated(ctx, indies_array->length, result));\n+\n+    func_(ctx, options_, *input_array, *indies_array, result);\n+\n+    RETURN_IF_ERROR(ctx);\n+    return Status::OK();\n+  }\n+\n+ private:\n+  TakeOptions options_;\n+  TakeFunction func_;\n+  std::shared_ptr<DataType> index_type_;\n+};\n+\n+#define TAKE_CASE(ValueType, IndexType)                                                 \\\n+  case IndexType::type_id:                                                              \\\n+    func = [](FunctionContext* ctx, const TakeOptions& options, const ArrayData& input, \\\n+              const ArrayData& indices, ArrayData* out) {                               \\\n+      TakeFunctor<ValueType, IndexType> func;                                           \\\n+      func(ctx, options, input, indices, out);                                          \\\n \n Review comment:\n   There's way too much `func` shadowing involved here.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T14:19:01.310+0000",
                    "updated": "2019-02-12T14:19:01.310+0000",
                    "started": "2019-02-12T14:19:01.310+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197587",
                    "issueId": "13136678"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/worklog/197588",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563#discussion_r255955107\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take.cc\n ##########\n @@ -0,0 +1,351 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/take.h\"\n+\n+#include <sstream>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compare.h\"\n+#include \"arrow/util/logging.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+\n+#ifdef ARROW_EXTRA_ERROR_CONTEXT\n+\n+#define FUNC_RETURN_NOT_OK(s)                                                       \\\n+  do {                                                                              \\\n+    Status _s = (s);                                                                \\\n+    if (ARROW_PREDICT_FALSE(!_s.ok())) {                                            \\\n+      std::stringstream ss;                                                         \\\n+      ss << __FILE__ << \":\" << __LINE__ << \" code: \" << #s << \"\\n\" << _s.message(); \\\n+      ctx->SetStatus(Status(_s.code(), ss.str()));                                  \\\n+      return;                                                                       \\\n+    }                                                                               \\\n+  } while (0)\n+\n+#else\n+\n+#define FUNC_RETURN_NOT_OK(s)            \\\n+  do {                                   \\\n+    Status _s = (s);                     \\\n+    if (ARROW_PREDICT_FALSE(!_s.ok())) { \\\n+      ctx->SetStatus(_s);                \\\n+      return;                            \\\n+    }                                    \\\n+  } while (0)\n+\n+#endif  // ARROW_EXTRA_ERROR_CONTEXT\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename T>\n+using enable_if_index_valid =\n+typename std::enable_if<std::is_base_of<Integer, T>::value>::type;\n+\n+template <typename ValueType, typename IndexType, typename Enable = void>\n+struct TakeFunctor {};\n+\n+template <typename V, typename I>\n+struct TakeFunctor<V, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {\n+    using value_type = typename V::c_type;\n+    using index_type = typename I::c_type;\n+    auto in_data = GetValues<value_type>(input, 1);\n+    auto index_data = GetValues<index_type>(indices, 1);\n+\n+    auto out_data = GetMutableValues<value_type>(output, 1);\n+    for (int64_t i = 0; i < indices.length; ++i) {\n+      *out_data++ = *(in_data + (*index_data++));\n+    }\n+  }\n+};\n+\n+template <typename I>\n+struct TakeFunctor<BooleanType, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {\n+    auto index_data = GetValues<int32_t>(indices, 1);\n+    const uint8_t* input_data = input.buffers[1]->data();\n+    uint8_t* out_data = output->buffers[1]->mutable_data();\n+    internal::BitmapWriter bit_writer(out_data, output->offset, indices.length);\n+    for (int64_t i = 0; i < indices.length; ++i) {\n+      if (BitUtil::GetBit(input_data, *index_data++)) {\n+        bit_writer.Set();\n+      } else {\n+        bit_writer.Clear();\n+      }\n+      bit_writer.Next();\n+    }\n+    bit_writer.Finish();\n+  }\n+};\n+\n+template <typename I>\n+struct TakeFunctor<NullType, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {}\n+};\n+\n+// ----------------------------------------------------------------------\n+\n+typedef std::function<void(FunctionContext*,\n+                           const TakeOptions& options,\n+                           const ArrayData&,\n+                           const ArrayData&,\n+                           ArrayData*)>\n+    TakeFunction;\n+\n+static Status AllocateIfNotPreallocated(FunctionContext* ctx,\n+                                        const int64_t length,\n+                                        ArrayData* out) {\n+  if (out->buffers.size() == 2) { // pre-allocated\n+    return Status::OK();\n+  } else {\n+    DCHECK_EQ(0, out->buffers.size());\n+  }\n+\n+  std::shared_ptr<Buffer> validity_bitmap;\n+  int64_t bitmap_size = BitUtil::BytesForBits(length);\n+  RETURN_NOT_OK(ctx->Allocate(bitmap_size, &validity_bitmap));\n+  if (out->type->id() == Type::NA) {\n+    out->null_count = length;\n+    memset(validity_bitmap->mutable_data(), 0, bitmap_size);\n+  } else {\n+    out->null_count = 0;\n+    memset(validity_bitmap->mutable_data(), 0xFF, bitmap_size); // preset all to valid\n+  }\n+\n+  const Type::type type_id = out->type->id();\n+  if (!(is_primitive(type_id) || type_id == Type::FIXED_SIZE_BINARY ||\n+      type_id == Type::DECIMAL)) {\n+    std::stringstream ss;\n+    ss << \"Cannot pre-allocate memory for type: \" << out->type->ToString();\n+    return Status::NotImplemented(ss.str());\n+  }\n+\n+  std::shared_ptr<Buffer> out_data;\n+  if (type_id != Type::NA) {\n+    const auto& fw_type = static_cast<const FixedWidthType&>(*out->type);\n+    int bit_width = fw_type.bit_width();\n+    int64_t buffer_size = 0;\n+    if (bit_width == 1) {\n+      buffer_size = BitUtil::BytesForBits(length);\n+    } else if (bit_width % 8 == 0) {\n+      buffer_size = length * fw_type.bit_width() / 8;\n+    } else {\n+      DCHECK(false);\n+    }\n+    RETURN_NOT_OK(ctx->Allocate(buffer_size, &out_data));\n+    memset(out_data->mutable_data(), 0, buffer_size);\n+  }\n+\n+  out->buffers.push_back(validity_bitmap);\n+  out->buffers.push_back(out_data);\n+\n+  return Status::OK();\n+}\n+\n+template <typename IndexType>\n+class TakeKernel : public UnaryKernel {};\n+\n+template <>\n+class TakeKernel<Int32Type> : public UnaryKernel {\n+ public:\n+  TakeKernel(const TakeOptions& options, const TakeFunction& func,\n+             const std::shared_ptr<DataType>& index_type)\n+      : options_(options),\n+        func_(func),\n+        index_type_(index_type) {}\n+\n+  Status Call(FunctionContext* ctx, const Datum& input, Datum* out) override {\n+    DCHECK_EQ(Datum::COLLECTION, input.kind());\n+\n+    const std::vector<Datum>& input_datums = input.collection();\n+    auto input_array = input_datums[0].array();\n+    auto indies_array = input_datums[1].array();\n \n Review comment:\n   Typo `indices`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T14:19:01.317+0000",
                    "updated": "2019-02-12T14:19:01.317+0000",
                    "started": "2019-02-12T14:19:01.317+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197588",
                    "issueId": "13136678"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/worklog/197589",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563#discussion_r255959809\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take.cc\n ##########\n @@ -0,0 +1,351 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/take.h\"\n+\n+#include <sstream>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compare.h\"\n+#include \"arrow/util/logging.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+\n+#ifdef ARROW_EXTRA_ERROR_CONTEXT\n+\n+#define FUNC_RETURN_NOT_OK(s)                                                       \\\n+  do {                                                                              \\\n+    Status _s = (s);                                                                \\\n+    if (ARROW_PREDICT_FALSE(!_s.ok())) {                                            \\\n+      std::stringstream ss;                                                         \\\n+      ss << __FILE__ << \":\" << __LINE__ << \" code: \" << #s << \"\\n\" << _s.message(); \\\n+      ctx->SetStatus(Status(_s.code(), ss.str()));                                  \\\n+      return;                                                                       \\\n+    }                                                                               \\\n+  } while (0)\n+\n+#else\n+\n+#define FUNC_RETURN_NOT_OK(s)            \\\n+  do {                                   \\\n+    Status _s = (s);                     \\\n+    if (ARROW_PREDICT_FALSE(!_s.ok())) { \\\n+      ctx->SetStatus(_s);                \\\n+      return;                            \\\n+    }                                    \\\n+  } while (0)\n+\n+#endif  // ARROW_EXTRA_ERROR_CONTEXT\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename T>\n+using enable_if_index_valid =\n+typename std::enable_if<std::is_base_of<Integer, T>::value>::type;\n+\n+template <typename ValueType, typename IndexType, typename Enable = void>\n+struct TakeFunctor {};\n+\n+template <typename V, typename I>\n+struct TakeFunctor<V, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {\n+    using value_type = typename V::c_type;\n+    using index_type = typename I::c_type;\n+    auto in_data = GetValues<value_type>(input, 1);\n+    auto index_data = GetValues<index_type>(indices, 1);\n+\n+    auto out_data = GetMutableValues<value_type>(output, 1);\n+    for (int64_t i = 0; i < indices.length; ++i) {\n+      *out_data++ = *(in_data + (*index_data++));\n \n Review comment:\n   - That's an odd way to write it, `out_data[i] = in_data[index_data[i]];` is more idiomatic and is more likely to be recognized by the compiler as a gather sequence.\r\n   - There's no bound check, very easy to trigger a segfault/undefined behavior. You need to clamp the index. I'd consider adding an safe/unsafe mode (maybe this is what the options are?).\r\n   - The null bitmap is silently dropped, you need to carry the null bit.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T14:19:01.344+0000",
                    "updated": "2019-02-12T14:19:01.344+0000",
                    "started": "2019-02-12T14:19:01.343+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197589",
                    "issueId": "13136678"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/worklog/197590",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563#discussion_r255970624\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take.cc\n ##########\n @@ -0,0 +1,351 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/take.h\"\n+\n+#include <sstream>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compare.h\"\n+#include \"arrow/util/logging.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+\n+#ifdef ARROW_EXTRA_ERROR_CONTEXT\n+\n+#define FUNC_RETURN_NOT_OK(s)                                                       \\\n+  do {                                                                              \\\n+    Status _s = (s);                                                                \\\n+    if (ARROW_PREDICT_FALSE(!_s.ok())) {                                            \\\n+      std::stringstream ss;                                                         \\\n+      ss << __FILE__ << \":\" << __LINE__ << \" code: \" << #s << \"\\n\" << _s.message(); \\\n+      ctx->SetStatus(Status(_s.code(), ss.str()));                                  \\\n+      return;                                                                       \\\n+    }                                                                               \\\n+  } while (0)\n+\n+#else\n+\n+#define FUNC_RETURN_NOT_OK(s)            \\\n+  do {                                   \\\n+    Status _s = (s);                     \\\n+    if (ARROW_PREDICT_FALSE(!_s.ok())) { \\\n+      ctx->SetStatus(_s);                \\\n+      return;                            \\\n+    }                                    \\\n+  } while (0)\n+\n+#endif  // ARROW_EXTRA_ERROR_CONTEXT\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename T>\n+using enable_if_index_valid =\n+typename std::enable_if<std::is_base_of<Integer, T>::value>::type;\n+\n+template <typename ValueType, typename IndexType, typename Enable = void>\n+struct TakeFunctor {};\n+\n+template <typename V, typename I>\n+struct TakeFunctor<V, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {\n+    using value_type = typename V::c_type;\n+    using index_type = typename I::c_type;\n+    auto in_data = GetValues<value_type>(input, 1);\n+    auto index_data = GetValues<index_type>(indices, 1);\n+\n+    auto out_data = GetMutableValues<value_type>(output, 1);\n+    for (int64_t i = 0; i < indices.length; ++i) {\n+      *out_data++ = *(in_data + (*index_data++));\n+    }\n+  }\n+};\n+\n+template <typename I>\n+struct TakeFunctor<BooleanType, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {\n+    auto index_data = GetValues<int32_t>(indices, 1);\n+    const uint8_t* input_data = input.buffers[1]->data();\n+    uint8_t* out_data = output->buffers[1]->mutable_data();\n+    internal::BitmapWriter bit_writer(out_data, output->offset, indices.length);\n+    for (int64_t i = 0; i < indices.length; ++i) {\n+      if (BitUtil::GetBit(input_data, *index_data++)) {\n+        bit_writer.Set();\n+      } else {\n+        bit_writer.Clear();\n+      }\n+      bit_writer.Next();\n+    }\n+    bit_writer.Finish();\n+  }\n+};\n+\n+template <typename I>\n+struct TakeFunctor<NullType, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {}\n+};\n+\n+// ----------------------------------------------------------------------\n+\n+typedef std::function<void(FunctionContext*,\n+                           const TakeOptions& options,\n+                           const ArrayData&,\n+                           const ArrayData&,\n+                           ArrayData*)>\n+    TakeFunction;\n+\n+static Status AllocateIfNotPreallocated(FunctionContext* ctx,\n+                                        const int64_t length,\n+                                        ArrayData* out) {\n+  if (out->buffers.size() == 2) { // pre-allocated\n+    return Status::OK();\n+  } else {\n+    DCHECK_EQ(0, out->buffers.size());\n+  }\n+\n+  std::shared_ptr<Buffer> validity_bitmap;\n+  int64_t bitmap_size = BitUtil::BytesForBits(length);\n+  RETURN_NOT_OK(ctx->Allocate(bitmap_size, &validity_bitmap));\n+  if (out->type->id() == Type::NA) {\n+    out->null_count = length;\n+    memset(validity_bitmap->mutable_data(), 0, bitmap_size);\n+  } else {\n+    out->null_count = 0;\n+    memset(validity_bitmap->mutable_data(), 0xFF, bitmap_size); // preset all to valid\n+  }\n+\n+  const Type::type type_id = out->type->id();\n+  if (!(is_primitive(type_id) || type_id == Type::FIXED_SIZE_BINARY ||\n+      type_id == Type::DECIMAL)) {\n+    std::stringstream ss;\n+    ss << \"Cannot pre-allocate memory for type: \" << out->type->ToString();\n+    return Status::NotImplemented(ss.str());\n+  }\n+\n+  std::shared_ptr<Buffer> out_data;\n+  if (type_id != Type::NA) {\n+    const auto& fw_type = static_cast<const FixedWidthType&>(*out->type);\n+    int bit_width = fw_type.bit_width();\n+    int64_t buffer_size = 0;\n+    if (bit_width == 1) {\n+      buffer_size = BitUtil::BytesForBits(length);\n+    } else if (bit_width % 8 == 0) {\n+      buffer_size = length * fw_type.bit_width() / 8;\n+    } else {\n+      DCHECK(false);\n+    }\n+    RETURN_NOT_OK(ctx->Allocate(buffer_size, &out_data));\n+    memset(out_data->mutable_data(), 0, buffer_size);\n+  }\n+\n+  out->buffers.push_back(validity_bitmap);\n+  out->buffers.push_back(out_data);\n+\n+  return Status::OK();\n+}\n+\n+template <typename IndexType>\n+class TakeKernel : public UnaryKernel {};\n+\n+template <>\n+class TakeKernel<Int32Type> : public UnaryKernel {\n+ public:\n+  TakeKernel(const TakeOptions& options, const TakeFunction& func,\n+             const std::shared_ptr<DataType>& index_type)\n+      : options_(options),\n+        func_(func),\n+        index_type_(index_type) {}\n+\n+  Status Call(FunctionContext* ctx, const Datum& input, Datum* out) override {\n+    DCHECK_EQ(Datum::COLLECTION, input.kind());\n+\n+    const std::vector<Datum>& input_datums = input.collection();\n+    auto input_array = input_datums[0].array();\n+    auto indies_array = input_datums[1].array();\n+\n+    ArrayData* result;\n+    if (out->kind() == Datum::NONE) {\n+      out->value = ArrayData::Make(input_array->type, indies_array->length);\n+    }\n+    result = out->array().get();\n+    RETURN_NOT_OK(AllocateIfNotPreallocated(ctx, indies_array->length, result));\n+\n+    func_(ctx, options_, *input_array, *indies_array, result);\n+\n+    RETURN_IF_ERROR(ctx);\n+    return Status::OK();\n+  }\n+\n+ private:\n+  TakeOptions options_;\n+  TakeFunction func_;\n+  std::shared_ptr<DataType> index_type_;\n+};\n+\n+#define TAKE_CASE(ValueType, IndexType)                                                 \\\n+  case IndexType::type_id:                                                              \\\n+    func = [](FunctionContext* ctx, const TakeOptions& options, const ArrayData& input, \\\n+              const ArrayData& indices, ArrayData* out) {                               \\\n+      TakeFunctor<ValueType, IndexType> func;                                           \\\n+      func(ctx, options, input, indices, out);                                          \\\n+    };                                                                                  \\\n+    break;\n+\n+#define PRIMITIVE_CASES(FN, VALUE_TYPE) \\\n+  FN(VALUE_TYPE, Int8Type);           \\\n+  FN(VALUE_TYPE, UInt8Type);          \\\n+  FN(VALUE_TYPE, Int16Type);          \\\n+  FN(VALUE_TYPE, UInt16Type);         \\\n+  FN(VALUE_TYPE, Int32Type);          \\\n+  FN(VALUE_TYPE, UInt32Type);         \\\n+  FN(VALUE_TYPE, Int64Type);          \\\n+  FN(VALUE_TYPE, UInt64Type);\n+\n+#define GET_TAKE_FUNCTION(CASE_GENERATOR, ValueType)                           \\\n+  static std::unique_ptr<UnaryKernel> Get##ValueType##TakeFunc(                \\\n \n Review comment:\n   I'd make this function return Status and pass the unique_ptr by output parameter (as the parent callsite is also doing).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T14:19:01.348+0000",
                    "updated": "2019-02-12T14:19:01.348+0000",
                    "started": "2019-02-12T14:19:01.347+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197590",
                    "issueId": "13136678"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/worklog/197591",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563#discussion_r255969732\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take.cc\n ##########\n @@ -0,0 +1,351 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/take.h\"\n+\n+#include <sstream>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compare.h\"\n+#include \"arrow/util/logging.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+\n+#ifdef ARROW_EXTRA_ERROR_CONTEXT\n+\n+#define FUNC_RETURN_NOT_OK(s)                                                       \\\n+  do {                                                                              \\\n+    Status _s = (s);                                                                \\\n+    if (ARROW_PREDICT_FALSE(!_s.ok())) {                                            \\\n+      std::stringstream ss;                                                         \\\n+      ss << __FILE__ << \":\" << __LINE__ << \" code: \" << #s << \"\\n\" << _s.message(); \\\n+      ctx->SetStatus(Status(_s.code(), ss.str()));                                  \\\n+      return;                                                                       \\\n+    }                                                                               \\\n+  } while (0)\n+\n+#else\n+\n+#define FUNC_RETURN_NOT_OK(s)            \\\n+  do {                                   \\\n+    Status _s = (s);                     \\\n+    if (ARROW_PREDICT_FALSE(!_s.ok())) { \\\n+      ctx->SetStatus(_s);                \\\n+      return;                            \\\n+    }                                    \\\n+  } while (0)\n+\n+#endif  // ARROW_EXTRA_ERROR_CONTEXT\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename T>\n+using enable_if_index_valid =\n+typename std::enable_if<std::is_base_of<Integer, T>::value>::type;\n+\n+template <typename ValueType, typename IndexType, typename Enable = void>\n+struct TakeFunctor {};\n+\n+template <typename V, typename I>\n+struct TakeFunctor<V, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {\n+    using value_type = typename V::c_type;\n+    using index_type = typename I::c_type;\n+    auto in_data = GetValues<value_type>(input, 1);\n+    auto index_data = GetValues<index_type>(indices, 1);\n+\n+    auto out_data = GetMutableValues<value_type>(output, 1);\n+    for (int64_t i = 0; i < indices.length; ++i) {\n+      *out_data++ = *(in_data + (*index_data++));\n+    }\n+  }\n+};\n+\n+template <typename I>\n+struct TakeFunctor<BooleanType, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {\n+    auto index_data = GetValues<int32_t>(indices, 1);\n+    const uint8_t* input_data = input.buffers[1]->data();\n+    uint8_t* out_data = output->buffers[1]->mutable_data();\n+    internal::BitmapWriter bit_writer(out_data, output->offset, indices.length);\n+    for (int64_t i = 0; i < indices.length; ++i) {\n+      if (BitUtil::GetBit(input_data, *index_data++)) {\n+        bit_writer.Set();\n+      } else {\n+        bit_writer.Clear();\n+      }\n+      bit_writer.Next();\n+    }\n+    bit_writer.Finish();\n+  }\n+};\n+\n+template <typename I>\n+struct TakeFunctor<NullType, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {}\n+};\n+\n+// ----------------------------------------------------------------------\n+\n+typedef std::function<void(FunctionContext*,\n+                           const TakeOptions& options,\n+                           const ArrayData&,\n+                           const ArrayData&,\n+                           ArrayData*)>\n+    TakeFunction;\n+\n+static Status AllocateIfNotPreallocated(FunctionContext* ctx,\n+                                        const int64_t length,\n+                                        ArrayData* out) {\n+  if (out->buffers.size() == 2) { // pre-allocated\n+    return Status::OK();\n+  } else {\n+    DCHECK_EQ(0, out->buffers.size());\n+  }\n+\n+  std::shared_ptr<Buffer> validity_bitmap;\n+  int64_t bitmap_size = BitUtil::BytesForBits(length);\n+  RETURN_NOT_OK(ctx->Allocate(bitmap_size, &validity_bitmap));\n+  if (out->type->id() == Type::NA) {\n+    out->null_count = length;\n+    memset(validity_bitmap->mutable_data(), 0, bitmap_size);\n+  } else {\n+    out->null_count = 0;\n+    memset(validity_bitmap->mutable_data(), 0xFF, bitmap_size); // preset all to valid\n+  }\n+\n+  const Type::type type_id = out->type->id();\n+  if (!(is_primitive(type_id) || type_id == Type::FIXED_SIZE_BINARY ||\n+      type_id == Type::DECIMAL)) {\n+    std::stringstream ss;\n+    ss << \"Cannot pre-allocate memory for type: \" << out->type->ToString();\n+    return Status::NotImplemented(ss.str());\n+  }\n+\n+  std::shared_ptr<Buffer> out_data;\n+  if (type_id != Type::NA) {\n+    const auto& fw_type = static_cast<const FixedWidthType&>(*out->type);\n+    int bit_width = fw_type.bit_width();\n+    int64_t buffer_size = 0;\n+    if (bit_width == 1) {\n+      buffer_size = BitUtil::BytesForBits(length);\n+    } else if (bit_width % 8 == 0) {\n+      buffer_size = length * fw_type.bit_width() / 8;\n+    } else {\n+      DCHECK(false);\n+    }\n+    RETURN_NOT_OK(ctx->Allocate(buffer_size, &out_data));\n+    memset(out_data->mutable_data(), 0, buffer_size);\n+  }\n+\n+  out->buffers.push_back(validity_bitmap);\n+  out->buffers.push_back(out_data);\n+\n+  return Status::OK();\n+}\n+\n+template <typename IndexType>\n+class TakeKernel : public UnaryKernel {};\n+\n+template <>\n+class TakeKernel<Int32Type> : public UnaryKernel {\n \n Review comment:\n   Why `Int32Type`, this seems fishy as it doesn't seem used in the rest of the code.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T14:19:01.357+0000",
                    "updated": "2019-02-12T14:19:01.357+0000",
                    "started": "2019-02-12T14:19:01.357+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197591",
                    "issueId": "13136678"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/worklog/197592",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563#discussion_r255952346\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take.h\n ##########\n @@ -0,0 +1,65 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_COMPUTE_KERNELS_TAKE_H\n+#define ARROW_COMPUTE_KERNELS_TAKE_H\n+\n+#include <memory>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+#include \"arrow/compute/kernel.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class ChunkedArray;\n+class Column;\n+class DataType;\n+\n+namespace compute {\n+\n+struct ARROW_EXPORT TakeOptions {\n+  enum OutOfBoundMode { RAISE, WRAP, CLIP };\n+  TakeOptions() : mode(RAISE) {}\n+\n+  OutOfBoundMode mode;\n+};\n+\n+// Integer array indices\n+ARROW_EXPORT\n+Status Take(FunctionContext* context, const Datum& in, const Array& indices,\n+            const TakeOptions& options, Datum* out);\n+\n+ARROW_EXPORT\n+Status Take(FunctionContext* context, const Array& in, const Array& indices,\n+            const TakeOptions& options, std::shared_ptr<Array>* out);\n+\n+// Single integer index\n \n Review comment:\n   Why does it require a special case for a single element? I think it adds a lot of clutter, if it's for testing purpose, consider using ArrayFromVector (you already do) or ArrayFromJSON in tests.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T14:19:01.366+0000",
                    "updated": "2019-02-12T14:19:01.366+0000",
                    "started": "2019-02-12T14:19:01.366+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197592",
                    "issueId": "13136678"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/worklog/197593",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563#discussion_r255961664\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take.cc\n ##########\n @@ -0,0 +1,351 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/take.h\"\n+\n+#include <sstream>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compare.h\"\n+#include \"arrow/util/logging.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+\n+#ifdef ARROW_EXTRA_ERROR_CONTEXT\n+\n+#define FUNC_RETURN_NOT_OK(s)                                                       \\\n+  do {                                                                              \\\n+    Status _s = (s);                                                                \\\n+    if (ARROW_PREDICT_FALSE(!_s.ok())) {                                            \\\n+      std::stringstream ss;                                                         \\\n+      ss << __FILE__ << \":\" << __LINE__ << \" code: \" << #s << \"\\n\" << _s.message(); \\\n+      ctx->SetStatus(Status(_s.code(), ss.str()));                                  \\\n+      return;                                                                       \\\n+    }                                                                               \\\n+  } while (0)\n+\n+#else\n+\n+#define FUNC_RETURN_NOT_OK(s)            \\\n+  do {                                   \\\n+    Status _s = (s);                     \\\n+    if (ARROW_PREDICT_FALSE(!_s.ok())) { \\\n+      ctx->SetStatus(_s);                \\\n+      return;                            \\\n+    }                                    \\\n+  } while (0)\n+\n+#endif  // ARROW_EXTRA_ERROR_CONTEXT\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename T>\n+using enable_if_index_valid =\n+typename std::enable_if<std::is_base_of<Integer, T>::value>::type;\n+\n+template <typename ValueType, typename IndexType, typename Enable = void>\n+struct TakeFunctor {};\n+\n+template <typename V, typename I>\n+struct TakeFunctor<V, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {\n+    using value_type = typename V::c_type;\n+    using index_type = typename I::c_type;\n+    auto in_data = GetValues<value_type>(input, 1);\n+    auto index_data = GetValues<index_type>(indices, 1);\n+\n+    auto out_data = GetMutableValues<value_type>(output, 1);\n+    for (int64_t i = 0; i < indices.length; ++i) {\n+      *out_data++ = *(in_data + (*index_data++));\n+    }\n+  }\n+};\n+\n+template <typename I>\n+struct TakeFunctor<BooleanType, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {\n+    auto index_data = GetValues<int32_t>(indices, 1);\n+    const uint8_t* input_data = input.buffers[1]->data();\n+    uint8_t* out_data = output->buffers[1]->mutable_data();\n+    internal::BitmapWriter bit_writer(out_data, output->offset, indices.length);\n+    for (int64_t i = 0; i < indices.length; ++i) {\n+      if (BitUtil::GetBit(input_data, *index_data++)) {\n+        bit_writer.Set();\n+      } else {\n+        bit_writer.Clear();\n+      }\n+      bit_writer.Next();\n+    }\n+    bit_writer.Finish();\n+  }\n+};\n+\n+template <typename I>\n+struct TakeFunctor<NullType, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {}\n+};\n+\n+// ----------------------------------------------------------------------\n+\n+typedef std::function<void(FunctionContext*,\n+                           const TakeOptions& options,\n+                           const ArrayData&,\n+                           const ArrayData&,\n+                           ArrayData*)>\n+    TakeFunction;\n+\n+static Status AllocateIfNotPreallocated(FunctionContext* ctx,\n+                                        const int64_t length,\n+                                        ArrayData* out) {\n+  if (out->buffers.size() == 2) { // pre-allocated\n+    return Status::OK();\n+  } else {\n+    DCHECK_EQ(0, out->buffers.size());\n+  }\n+\n+  std::shared_ptr<Buffer> validity_bitmap;\n+  int64_t bitmap_size = BitUtil::BytesForBits(length);\n+  RETURN_NOT_OK(ctx->Allocate(bitmap_size, &validity_bitmap));\n+  if (out->type->id() == Type::NA) {\n+    out->null_count = length;\n+    memset(validity_bitmap->mutable_data(), 0, bitmap_size);\n+  } else {\n+    out->null_count = 0;\n+    memset(validity_bitmap->mutable_data(), 0xFF, bitmap_size); // preset all to valid\n+  }\n+\n+  const Type::type type_id = out->type->id();\n+  if (!(is_primitive(type_id) || type_id == Type::FIXED_SIZE_BINARY ||\n+      type_id == Type::DECIMAL)) {\n+    std::stringstream ss;\n+    ss << \"Cannot pre-allocate memory for type: \" << out->type->ToString();\n+    return Status::NotImplemented(ss.str());\n+  }\n+\n+  std::shared_ptr<Buffer> out_data;\n+  if (type_id != Type::NA) {\n+    const auto& fw_type = static_cast<const FixedWidthType&>(*out->type);\n+    int bit_width = fw_type.bit_width();\n+    int64_t buffer_size = 0;\n+    if (bit_width == 1) {\n+      buffer_size = BitUtil::BytesForBits(length);\n+    } else if (bit_width % 8 == 0) {\n+      buffer_size = length * fw_type.bit_width() / 8;\n+    } else {\n+      DCHECK(false);\n+    }\n+    RETURN_NOT_OK(ctx->Allocate(buffer_size, &out_data));\n+    memset(out_data->mutable_data(), 0, buffer_size);\n+  }\n+\n+  out->buffers.push_back(validity_bitmap);\n+  out->buffers.push_back(out_data);\n+\n+  return Status::OK();\n+}\n+\n+template <typename IndexType>\n+class TakeKernel : public UnaryKernel {};\n+\n+template <>\n+class TakeKernel<Int32Type> : public UnaryKernel {\n+ public:\n+  TakeKernel(const TakeOptions& options, const TakeFunction& func,\n+             const std::shared_ptr<DataType>& index_type)\n+      : options_(options),\n+        func_(func),\n+        index_type_(index_type) {}\n+\n+  Status Call(FunctionContext* ctx, const Datum& input, Datum* out) override {\n+    DCHECK_EQ(Datum::COLLECTION, input.kind());\n+\n+    const std::vector<Datum>& input_datums = input.collection();\n \n Review comment:\n   It seems to be that what is implemented here is a binary kernel since it has 2 arguments, so the trick is not to receive a collection, but 2 inputs and extend BinaryKernel instead.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T14:19:01.385+0000",
                    "updated": "2019-02-12T14:19:01.385+0000",
                    "started": "2019-02-12T14:19:01.385+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197593",
                    "issueId": "13136678"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/worklog/197594",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563#discussion_r255967029\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take.cc\n ##########\n @@ -0,0 +1,351 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/take.h\"\n+\n+#include <sstream>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compare.h\"\n+#include \"arrow/util/logging.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+\n+#ifdef ARROW_EXTRA_ERROR_CONTEXT\n+\n+#define FUNC_RETURN_NOT_OK(s)                                                       \\\n+  do {                                                                              \\\n+    Status _s = (s);                                                                \\\n+    if (ARROW_PREDICT_FALSE(!_s.ok())) {                                            \\\n+      std::stringstream ss;                                                         \\\n+      ss << __FILE__ << \":\" << __LINE__ << \" code: \" << #s << \"\\n\" << _s.message(); \\\n+      ctx->SetStatus(Status(_s.code(), ss.str()));                                  \\\n+      return;                                                                       \\\n+    }                                                                               \\\n+  } while (0)\n+\n+#else\n+\n+#define FUNC_RETURN_NOT_OK(s)            \\\n+  do {                                   \\\n+    Status _s = (s);                     \\\n+    if (ARROW_PREDICT_FALSE(!_s.ok())) { \\\n+      ctx->SetStatus(_s);                \\\n+      return;                            \\\n+    }                                    \\\n+  } while (0)\n+\n+#endif  // ARROW_EXTRA_ERROR_CONTEXT\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename T>\n+using enable_if_index_valid =\n+typename std::enable_if<std::is_base_of<Integer, T>::value>::type;\n+\n+template <typename ValueType, typename IndexType, typename Enable = void>\n+struct TakeFunctor {};\n+\n+template <typename V, typename I>\n+struct TakeFunctor<V, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {\n+    using value_type = typename V::c_type;\n+    using index_type = typename I::c_type;\n+    auto in_data = GetValues<value_type>(input, 1);\n+    auto index_data = GetValues<index_type>(indices, 1);\n+\n+    auto out_data = GetMutableValues<value_type>(output, 1);\n+    for (int64_t i = 0; i < indices.length; ++i) {\n+      *out_data++ = *(in_data + (*index_data++));\n+    }\n+  }\n+};\n+\n+template <typename I>\n+struct TakeFunctor<BooleanType, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {\n+    auto index_data = GetValues<int32_t>(indices, 1);\n+    const uint8_t* input_data = input.buffers[1]->data();\n+    uint8_t* out_data = output->buffers[1]->mutable_data();\n+    internal::BitmapWriter bit_writer(out_data, output->offset, indices.length);\n+    for (int64_t i = 0; i < indices.length; ++i) {\n+      if (BitUtil::GetBit(input_data, *index_data++)) {\n+        bit_writer.Set();\n+      } else {\n+        bit_writer.Clear();\n+      }\n+      bit_writer.Next();\n+    }\n+    bit_writer.Finish();\n+  }\n+};\n+\n+template <typename I>\n+struct TakeFunctor<NullType, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {}\n+};\n+\n+// ----------------------------------------------------------------------\n+\n+typedef std::function<void(FunctionContext*,\n+                           const TakeOptions& options,\n+                           const ArrayData&,\n+                           const ArrayData&,\n+                           ArrayData*)>\n+    TakeFunction;\n+\n+static Status AllocateIfNotPreallocated(FunctionContext* ctx,\n+                                        const int64_t length,\n+                                        ArrayData* out) {\n+  if (out->buffers.size() == 2) { // pre-allocated\n+    return Status::OK();\n+  } else {\n+    DCHECK_EQ(0, out->buffers.size());\n+  }\n+\n+  std::shared_ptr<Buffer> validity_bitmap;\n+  int64_t bitmap_size = BitUtil::BytesForBits(length);\n+  RETURN_NOT_OK(ctx->Allocate(bitmap_size, &validity_bitmap));\n+  if (out->type->id() == Type::NA) {\n+    out->null_count = length;\n+    memset(validity_bitmap->mutable_data(), 0, bitmap_size);\n+  } else {\n+    out->null_count = 0;\n+    memset(validity_bitmap->mutable_data(), 0xFF, bitmap_size); // preset all to valid\n+  }\n+\n+  const Type::type type_id = out->type->id();\n+  if (!(is_primitive(type_id) || type_id == Type::FIXED_SIZE_BINARY ||\n+      type_id == Type::DECIMAL)) {\n+    std::stringstream ss;\n \n Review comment:\n   No need stringstream, see other comment on the subject.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T14:19:01.393+0000",
                    "updated": "2019-02-12T14:19:01.393+0000",
                    "started": "2019-02-12T14:19:01.385+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197594",
                    "issueId": "13136678"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/worklog/197595",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563#discussion_r255968959\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take.cc\n ##########\n @@ -0,0 +1,351 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/take.h\"\n+\n+#include <sstream>\n+#include <vector>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compare.h\"\n+#include \"arrow/util/logging.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+\n+#ifdef ARROW_EXTRA_ERROR_CONTEXT\n+\n+#define FUNC_RETURN_NOT_OK(s)                                                       \\\n+  do {                                                                              \\\n+    Status _s = (s);                                                                \\\n+    if (ARROW_PREDICT_FALSE(!_s.ok())) {                                            \\\n+      std::stringstream ss;                                                         \\\n+      ss << __FILE__ << \":\" << __LINE__ << \" code: \" << #s << \"\\n\" << _s.message(); \\\n+      ctx->SetStatus(Status(_s.code(), ss.str()));                                  \\\n+      return;                                                                       \\\n+    }                                                                               \\\n+  } while (0)\n+\n+#else\n+\n+#define FUNC_RETURN_NOT_OK(s)            \\\n+  do {                                   \\\n+    Status _s = (s);                     \\\n+    if (ARROW_PREDICT_FALSE(!_s.ok())) { \\\n+      ctx->SetStatus(_s);                \\\n+      return;                            \\\n+    }                                    \\\n+  } while (0)\n+\n+#endif  // ARROW_EXTRA_ERROR_CONTEXT\n+\n+namespace arrow {\n+namespace compute {\n+\n+template <typename T>\n+using enable_if_index_valid =\n+typename std::enable_if<std::is_base_of<Integer, T>::value>::type;\n+\n+template <typename ValueType, typename IndexType, typename Enable = void>\n+struct TakeFunctor {};\n+\n+template <typename V, typename I>\n+struct TakeFunctor<V, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {\n+    using value_type = typename V::c_type;\n+    using index_type = typename I::c_type;\n+    auto in_data = GetValues<value_type>(input, 1);\n+    auto index_data = GetValues<index_type>(indices, 1);\n+\n+    auto out_data = GetMutableValues<value_type>(output, 1);\n+    for (int64_t i = 0; i < indices.length; ++i) {\n+      *out_data++ = *(in_data + (*index_data++));\n+    }\n+  }\n+};\n+\n+template <typename I>\n+struct TakeFunctor<BooleanType, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {\n+    auto index_data = GetValues<int32_t>(indices, 1);\n+    const uint8_t* input_data = input.buffers[1]->data();\n+    uint8_t* out_data = output->buffers[1]->mutable_data();\n+    internal::BitmapWriter bit_writer(out_data, output->offset, indices.length);\n+    for (int64_t i = 0; i < indices.length; ++i) {\n+      if (BitUtil::GetBit(input_data, *index_data++)) {\n+        bit_writer.Set();\n+      } else {\n+        bit_writer.Clear();\n+      }\n+      bit_writer.Next();\n+    }\n+    bit_writer.Finish();\n+  }\n+};\n+\n+template <typename I>\n+struct TakeFunctor<NullType, I, enable_if_index_valid<I>> {\n+  void operator()(FunctionContext* ctx, const TakeOptions& options,\n+                  const ArrayData& input, const ArrayData& indices, ArrayData* output) {}\n+};\n+\n+// ----------------------------------------------------------------------\n+\n+typedef std::function<void(FunctionContext*,\n \n Review comment:\n   Why the typedef, can it just pass the Functor arround?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T14:19:01.397+0000",
                    "updated": "2019-02-12T14:19:01.397+0000",
                    "started": "2019-02-12T14:19:01.397+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197595",
                    "issueId": "13136678"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/worklog/197637",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563#issuecomment-462796618\n \n \n   As this PR is over a year old I think it probably needs a fresh start\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T15:10:48.954+0000",
                    "updated": "2019-02-12T15:10:48.954+0000",
                    "started": "2019-02-12T15:10:48.953+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197637",
                    "issueId": "13136678"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 42000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@41367ff1[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@9155ce8[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f644a65[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2c35b57d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4f7b78a4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@49fc4b38[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@64660700[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6579c8ac[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@71d332ff[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5a5d0276[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e57403a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2540c5f4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 42000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Apr 09 16:12:49 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-04-09T16:12:49.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2102/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-02-06T21:56:50.000+0000",
        "updated": "2019-04-09T16:13:13.000+0000",
        "timeoriginalestimate": null,
        "description": "Should implement the basic functionality of take kernel and support primitive value types.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "11h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 42000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement take kernel functions - primitive value type",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/comment/16354648",
                    "id": "16354648",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "alphalfalfa opened a new pull request #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563\n \n \n   Currently the take kernel supports:\r\n   - Primitive value types (NA, Boolean and numeric types)\r\n   - Single numeric index\r\n   - Multiple flat indices in an array\r\n   \r\n   The kernel does not yet handle special indices including negative integers or out-of-bound indices. ARROW-2105 is created for such feature.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-06T22:27:32.683+0000",
                    "updated": "2018-02-06T22:27:32.683+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/comment/16354650",
                    "id": "16354650",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "alphalfalfa commented on issue #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563#issuecomment-363586769\n \n \n   @wesm @xuepanchen \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-06T22:28:09.141+0000",
                    "updated": "2018-02-06T22:28:09.141+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/comment/16361337",
                    "id": "16361337",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1563: ARROW-2102: [C++] Implement take kernel functions - primitive value type\nURL: https://github.com/apache/arrow/pull/1563#issuecomment-365038467\n \n \n   @alphalfalfa thank you for starting on these kernels; I'm sorry it's taken me a little while to get down to review but I intend to do so this week\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-12T19:41:41.239+0000",
                    "updated": "2018-02-12T19:41:41.239+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13136678/comment/16813583",
                    "id": "16813583",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 3880\n[https://github.com/apache/arrow/pull/3880]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-04-09T16:12:49.873+0000",
                    "updated": "2019-04-09T16:12:49.873+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|i3pv9r:",
        "customfield_12314139": null
    }
}