{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13185661",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185661",
    "key": "ARROW-3256",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
            "name": "paul.e.taylor",
            "key": "paul.e.taylor",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paul Taylor",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332552",
                "id": "12332552",
                "name": "JavaScript"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 1200,
            "total": 1200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 1200,
            "total": 1200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3256/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 2,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185661/worklog/148401",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "TheNeuralBit commented on issue #2616: ARROW-3256,3304: [JS] fix file footer inconsistency, yield all messages from the stream reader\nURL: https://github.com/apache/arrow/pull/2616#issuecomment-424879420\n \n \n   :+1: LGTM\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-26T21:41:45.760+0000",
                    "updated": "2018-09-26T21:41:45.760+0000",
                    "started": "2018-09-26T21:41:45.760+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "148401",
                    "issueId": "13185661"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185661/worklog/148668",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2616: ARROW-3256,3304: [JS] fix file footer inconsistency, yield all messages from the stream reader\nURL: https://github.com/apache/arrow/pull/2616\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/js/src/Arrow.ts b/js/src/Arrow.ts\nindex 52b9b257b6..61556c4a5b 100644\n--- a/js/src/Arrow.ts\n+++ b/js/src/Arrow.ts\n@@ -30,6 +30,7 @@ import { Schema, Field, Type } from './type';\n import { Table, DataFrame, NextFunc, BindFunc, CountByResult } from './table';\n import { fromReadableStream } from './ipc/reader/node';\n import { read, readAsync, readStream } from './ipc/reader/arrow';\n+import { readBuffersAsync, readRecordBatchesAsync } from './ipc/reader/arrow';\n import { serializeFile, serializeStream } from './ipc/writer/binary';\n \n export import View = vector_.View;\n@@ -41,6 +42,7 @@ export import TypedArrayConstructor = type_.TypedArrayConstructor;\n \n export { fromReadableStream };\n export { read, readAsync, readStream };\n+export { readBuffersAsync, readRecordBatchesAsync };\n export { serializeFile, serializeStream };\n export { Table, DataFrame, NextFunc, BindFunc, CountByResult };\n export { Field, Schema, RecordBatch, Vector, Type };\n@@ -213,6 +215,8 @@ try {\n         Arrow['readAsync'] = readAsync;\n         Arrow['readStream'] = readStream;\n         Arrow['fromReadableStream'] = fromReadableStream;\n+        Arrow['readBuffersAsync'] = readBuffersAsync;\n+        Arrow['readRecordBatchesAsync'] = readRecordBatchesAsync;\n \n         Arrow['serializeFile'] = serializeFile;\n         Arrow['serializeStream'] = serializeStream;\ndiff --git a/js/src/ipc/metadata.ts b/js/src/ipc/metadata.ts\nindex 25b94b1dd5..025b051734 100644\n--- a/js/src/ipc/metadata.ts\n+++ b/js/src/ipc/metadata.ts\n@@ -17,7 +17,6 @@\n \n /* tslint:disable:class-name */\n \n-import { align } from '../util/bit';\n import { Schema, Long, MessageHeader, MetadataVersion } from '../type';\n \n export class Footer {\n@@ -53,7 +52,7 @@ export class RecordBatchMetadata extends Message {\n     public buffers: BufferMetadata[];\n     constructor(version: MetadataVersion, length: Long | number, nodes: FieldMetadata[], buffers: BufferMetadata[], bodyLength?: Long | number) {\n         if (bodyLength === void(0)) {\n-            bodyLength = buffers.reduce((s, b) => align(s + b.length + (b.offset - s), 8), 0);\n+            bodyLength = buffers.reduce((bodyLength, buffer) => bodyLength + buffer.length, 0);\n         }\n         super(version, bodyLength, MessageHeader.RecordBatch);\n         this.nodes = nodes;\ndiff --git a/js/src/ipc/reader/binary.ts b/js/src/ipc/reader/binary.ts\nindex 65dc91a769..988ce606b2 100644\n--- a/js/src/ipc/reader/binary.ts\n+++ b/js/src/ipc/reader/binary.ts\n@@ -39,7 +39,7 @@ import {\n \n import ByteBuffer = flatbuffers.ByteBuffer;\n \n-type MessageReader = (bb: ByteBuffer) => IterableIterator<RecordBatchMetadata | DictionaryBatch>;\n+type MessageReader = (bb: ByteBuffer) => IterableIterator<Message>;\n \n export function* readBuffers<T extends Uint8Array | Buffer | string>(sources: Iterable<T> | Uint8Array | Buffer | string) {\n     let schema: Schema | null = null;\n@@ -56,8 +56,8 @@ export function* readBuffers<T extends Uint8Array | Buffer | string>(sources: It\n                     schema, message,\n                     loader: new BinaryDataLoader(\n                         bb,\n-                        arrayIterator(message.nodes),\n-                        arrayIterator(message.buffers),\n+                        arrayIterator((message as any).nodes || []),\n+                        arrayIterator((message as any).buffers || []),\n                         dictionaries\n                     )\n                 };\n@@ -78,8 +78,8 @@ export async function* readBuffersAsync<T extends Uint8Array | Buffer | string>(\n                     schema, message,\n                     loader: new BinaryDataLoader(\n                         bb,\n-                        arrayIterator(message.nodes),\n-                        arrayIterator(message.buffers),\n+                        arrayIterator((message as any).nodes || []),\n+                        arrayIterator((message as any).buffers || []),\n                         dictionaries\n                     )\n                 };\n@@ -148,7 +148,7 @@ function* readStreamMessages(bb: ByteBuffer) {\n         } else if (Message.isDictionaryBatch(message)) {\n             yield message;\n         } else {\n-            continue;\n+            yield message;\n         }\n         // position the buffer after the body to read the next message\n         bb.setPosition(bb.position() + message.bodyLength);\ndiff --git a/js/src/ipc/reader/node.ts b/js/src/ipc/reader/node.ts\nindex 8a455e900d..24295c81cb 100644\n--- a/js/src/ipc/reader/node.ts\n+++ b/js/src/ipc/reader/node.ts\n@@ -29,6 +29,10 @@ export async function* fromReadableStream(stream: NodeJS.ReadableStream) {\n \n     for await (let chunk of (stream as any as AsyncIterable<Uint8Array | Buffer | string>)) {\n \n+        if (chunk == null) {\n+            continue;\n+        }\n+\n         const grown = new Uint8Array(bytes.byteLength + chunk.length);\n \n         if (typeof chunk !== 'string') {\n@@ -54,7 +58,7 @@ export async function* fromReadableStream(stream: NodeJS.ReadableStream) {\n             messageLength = new DataView(bytes.buffer).getInt32(0, true);\n         }\n \n-        while (messageLength < bytes.byteLength) {\n+        while (messageLength > 0 && messageLength <= bytes.byteLength) {\n             if (!message) {\n                 (bb = new ByteBuffer(bytes)).setPosition(4);\n                 if (message = _Message.getRootAsMessage(bb)) {\ndiff --git a/js/src/ipc/writer/binary.ts b/js/src/ipc/writer/binary.ts\nindex 2bab4286bb..4be3dc7c1d 100644\n--- a/js/src/ipc/writer/binary.ts\n+++ b/js/src/ipc/writer/binary.ts\n@@ -54,7 +54,7 @@ export function* serializeFile(table: Table) {\n \n     // First yield the magic string (aligned)\n     let buffer = new Uint8Array(align(magicLength, 8));\n-    let metadataLength, byteLength = buffer.byteLength;\n+    let metadataLength, bodyLength, byteLength = buffer.byteLength;\n     buffer.set(MAGIC, 0);\n     yield buffer;\n \n@@ -66,15 +66,15 @@ export function* serializeFile(table: Table) {\n     for (const [id, field] of table.schema.dictionaries) {\n         const vec = table.getColumn(field.name) as DictionaryVector;\n         if (vec && vec.dictionary) {\n-            ({ metadataLength, buffer } = serializeDictionaryBatch(vec.dictionary, id));\n-            dictionaryBatches.push(new FileBlock(metadataLength, buffer.byteLength, byteLength));\n+            ({ metadataLength, bodyLength, buffer } = serializeDictionaryBatch(vec.dictionary, id));\n+            dictionaryBatches.push(new FileBlock(metadataLength, bodyLength, byteLength));\n             byteLength += buffer.byteLength;\n             yield buffer;\n         }\n     }\n     for (const recordBatch of table.batches) {\n-        ({ metadataLength, buffer } = serializeRecordBatch(recordBatch));\n-        recordBatches.push(new FileBlock(metadataLength, buffer.byteLength, byteLength));\n+        ({ metadataLength, bodyLength, buffer } = serializeRecordBatch(recordBatch));\n+        recordBatches.push(new FileBlock(metadataLength, bodyLength, byteLength));\n         byteLength += buffer.byteLength;\n         yield buffer;\n     }\n@@ -127,7 +127,7 @@ export function serializeMessage(message: Message, data?: Uint8Array) {\n     (data && dataByteLength > 0) && messageBytes.set(data, metadataLength);\n     // if (messageBytes.byteLength % 8 !== 0) { debugger; }\n     // Return the metadata length because we need to write it into each FileBlock also\n-    return { metadataLength, buffer: messageBytes };\n+    return { metadataLength, bodyLength: message.bodyLength, buffer: messageBytes };\n }\n \n export function serializeFooter(footer: Footer) {\ndiff --git a/js/src/util/node.ts b/js/src/util/node.ts\nindex 8e58f6b972..e5c506692a 100644\n--- a/js/src/util/node.ts\n+++ b/js/src/util/node.ts\n@@ -88,6 +88,6 @@ function wait(stream: NodeJS.WritableStream, done: boolean, write: (x?: any) =>\n         stream['once']('error', write);\n         stream['once']('drain', write);\n     } else if (!(!p || stream === p.stdout) && !(stream as any)['isTTY']) {\n-        stream['end'](<any> null);\n+        stream['end']();\n     }\n }\ndiff --git a/js/test/integration/validate-tests.ts b/js/test/integration/validate-tests.ts\nindex c301d6553b..5d0d3ff42b 100644\n--- a/js/test/integration/validate-tests.ts\n+++ b/js/test/integration/validate-tests.ts\n@@ -22,10 +22,15 @@ import Arrow from '../Arrow';\n import { zip } from 'ix/iterable/zip';\n import { toArray } from 'ix/iterable/toarray';\n \n+import { AsyncIterableX } from 'ix/asynciterable/asynciterablex';\n+import { zip as zipAsync } from 'ix/asynciterable/zip';\n+import { toArray as toArrayAsync } from 'ix/asynciterable/toarray';\n+\n /* tslint:disable */\n const { parse: bignumJSONParse } = require('json-bignum');\n \n const { Table, read } = Arrow;\n+const { fromReadableStream, readBuffersAsync, readRecordBatchesAsync } = Arrow;\n \n if (!process.env.JSON_PATHS || !process.env.ARROW_PATHS) {\n     throw new Error('Integration tests need paths to both json and arrow files');\n@@ -125,6 +130,7 @@ describe(`Integration`, () => {\n             testTableToBuffersIntegration('binary', 'stream')(json, arrowBuffer);\n         });\n     }\n+    testReadingMultipleTablesFromTheSameStream();\n });\n \n function testReaderIntegration(jsonData: any, arrowBuffer: Uint8Array) {\n@@ -183,3 +189,79 @@ function testTableToBuffersIntegration(srcFormat: 'json' | 'binary', arrowFormat\n         });\n     }\n }\n+\n+function testReadingMultipleTablesFromTheSameStream() {\n+\n+    test('Can read multiple tables from the same stream with a special stream reader', async () => {\n+\n+        async function* allTablesReadableStream() {\n+            for (const [, arrowPath] of jsonAndArrowPaths) {\n+                for await (const buffer of fs.createReadStream(arrowPath)) {\n+                    yield buffer as Uint8Array;\n+                }\n+            }\n+        }\n+\n+        const pathsAsync = AsyncIterableX.from(jsonAndArrowPaths);\n+        const batchesAsync = readBatches(allTablesReadableStream());\n+        const pathsAndBatches = zipAsync(pathsAsync, batchesAsync);\n+\n+        for await (const [[jsonFilePath, arrowFilePath], batches] of pathsAndBatches) {\n+\n+            const streamTable = new Table(await toArrayAsync(batches));\n+            const binaryTable = Table.from(getOrReadFileBuffer(arrowFilePath) as Uint8Array);\n+            const jsonTable = Table.from(bignumJSONParse(getOrReadFileBuffer(jsonFilePath, 'utf8')));\n+\n+            expect(streamTable.length).toEqual(jsonTable.length);\n+            expect(streamTable.length).toEqual(binaryTable.length);\n+            expect(streamTable.numCols).toEqual(jsonTable.numCols);\n+            expect(streamTable.numCols).toEqual(binaryTable.numCols);\n+            for (let i = -1, n = streamTable.numCols; ++i < n;) {\n+                const v1 = streamTable.getColumnAt(i);\n+                const v2 = jsonTable.getColumnAt(i);\n+                const v3 = binaryTable.getColumnAt(i);\n+                const name = streamTable.schema.fields[i].name;\n+                (expect([v1, `stream`, name]) as any).toEqualVector([v2, `json`]);\n+                (expect([v1, `stream`, name]) as any).toEqualVector([v3, `binary`]);\n+            }\n+        }\n+    });\n+\n+    async function* readBatches(stream: AsyncIterable<Uint8Array>) {\n+\n+        let message: any, done = false, broke = false;\n+        let source = buffers(fromReadableStream(stream as any));\n+    \n+        do {\n+            yield readRecordBatchesAsync(messages({\n+                next(x: any) { return source.next(x); },\n+                throw(x: any) { return source.throw!(x); },\n+                [Symbol.asyncIterator]() { return this; },\n+            }));\n+        } while (!done || (message = null));\n+    \n+        source.return && (await source.return());\n+    \n+        async function* messages(source: AsyncIterableIterator<Uint8Array>) {\n+            for await (message of readBuffersAsync(source)) {\n+                if (broke = message.message.headerType === 1) {\n+                    break;\n+                }\n+                yield message;\n+                message = null;\n+            }\n+            done = done || !broke;\n+            broke = false;\n+        }\n+    \n+        async function* buffers(source: AsyncIterableIterator<Uint8Array>) {\n+            while (!done) {\n+                message && (yield message.loader.bytes);\n+                const next = await source.next();\n+                if (!(done = next.done)) {\n+                    yield next.value;\n+                }\n+            }\n+        }\n+    }\n+}\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-27T09:46:04.018+0000",
                    "updated": "2018-09-27T09:46:04.018+0000",
                    "started": "2018-09-27T09:46:04.018+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "148668",
                    "issueId": "13185661"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 1200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@34a679e0[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1389813d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@30b360ce[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6fec9f8c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5f422cb4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3765976[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@28e8ecc6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@23f316a8[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6d9aa9ee[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5c16e0c2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3377a95a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@80abfca[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 1200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Sep 27 09:45:54 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-09-27T09:45:54.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3256/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-09-17T22:59:47.000+0000",
        "updated": "2018-09-27T09:46:07.000+0000",
        "timeoriginalestimate": null,
        "description": "I added some assertions to the C++ library and found that the body length in the file footer and the IPC message were different\r\n\r\n{code}\r\n##########################################################\r\nJS producing, C++ consuming\r\n##########################################################\r\n==========================================================\r\nTesting file /home/travis/build/apache/arrow/integration/data/struct_example.json\r\n==========================================================\r\n-- Creating binary inputs\r\nnode --no-warnings /home/travis/build/apache/arrow/js/bin/json-to-arrow.js -a /tmp/tmplbm3vbwz/3d2269c960f148b6b94e5f881c0bf9ca_struct_example.json_to_arrow -j /home/travis/build/apache/arrow/integration/data/struct_example.json\r\n-- Validating file\r\n/home/travis/build/apache/arrow/cpp-build/debug/json-integration-test --integration --arrow=/tmp/tmplbm3vbwz/3d2269c960f148b6b94e5f881c0bf9ca_struct_example.json_to_arrow --json=/home/travis/build/apache/arrow/integration/data/struct_example.json --mode=VALIDATE\r\nCommand failed: /home/travis/build/apache/arrow/cpp-build/debug/json-integration-test --integration --arrow=/tmp/tmplbm3vbwz/3d2269c960f148b6b94e5f881c0bf9ca_struct_example.json_to_arrow --json=/home/travis/build/apache/arrow/integration/data/struct_example.json --mode=VALIDATE\r\nWith output:\r\n--------------\r\n/home/travis/build/apache/arrow/cpp/src/arrow/ipc/reader.cc:581 Check failed: (message->body_length()) == (block.body_length)\r\n{code}\r\n\r\nI'm not sure what's wrong. I'll remove the assertions for now",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 1200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[JS] File footer and message metadata is inconsistent",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185661/comment/16625361",
                    "id": "16625361",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
                        "name": "paul.e.taylor",
                        "key": "paul.e.taylor",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paul Taylor",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "[~wesmckinn] It looks like this line[1] sets the FileBlock's bodyLength to the length of the serialized RecordBatch buffer. Should it be `buffer.byteLength - metadataLength` instead?\r\n\r\n1. https://github.com/apache/arrow/blob/391516df8ce084c279e854cf52c8beb4a4fc444a/js/src/ipc/writer/binary.ts#L77",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
                        "name": "paul.e.taylor",
                        "key": "paul.e.taylor",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paul Taylor",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2018-09-24T04:18:32.622+0000",
                    "updated": "2018-09-25T00:38:14.079+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185661/comment/16625494",
                    "id": "16625494",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Yeah, the sum of metadata length and body length should be the total size of the block",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-09-24T07:59:53.134+0000",
                    "updated": "2018-09-24T07:59:53.134+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185661/comment/16626629",
                    "id": "16626629",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
                        "name": "paul.e.taylor",
                        "key": "paul.e.taylor",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paul Taylor",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "[~wesmckinn] -The current  behavior is metadata length + body length, aligned to the next-highest multiple of 8. This includes the 4 bytes used to store the metadata length. Do you recall the difference between the expected total size and the total size JS is creating? If so I can work backwards from that to figure out what to add or subtract.-\r\n\r\nEdit: I misunderstood the original bug -- I now understand you mean the body_length of the Message that the JS writer creates is different from the body_length of the FileBlock it lives in. I thought you meant there was a difference between JS and CPP. I can take a look soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
                        "name": "paul.e.taylor",
                        "key": "paul.e.taylor",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paul Taylor",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2018-09-25T00:43:57.512+0000",
                    "updated": "2018-09-25T00:49:15.423+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185661/comment/16626962",
                    "id": "16626962",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "So the bug is that the body length reported in the record batch header is different than the one in the file footer. So we should have:\r\n\r\n{code}\r\n4 bytes length\r\nflatbuffer header\r\npadding\r\nbody\r\n{code}\r\n\r\nIt's possible that one of the body lengths is rounded up to multiple or 8 but the other not. I can post one of the offending files if that helps",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-09-25T07:57:36.686+0000",
                    "updated": "2018-09-25T07:57:36.686+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185661/comment/16627755",
                    "id": "16627755",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
                        "name": "paul.e.taylor",
                        "key": "paul.e.taylor",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paul Taylor",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Yeah, looking at it now it makes sense why they're different. The JS is setting the FileBlock's body_length to the size of the entire serialized IPC message, not just the size of the data buffers.\r\n\r\nThe body_length in the RecordBatch header currently is the total aligned sizes of the buffers in the batch, which I copied from here: https://github.com/apache/arrow/blob/516750216bfd48489b20988ad181e61823ecbb2f/cpp/src/arrow/ipc/writer.cc#L179\r\n\r\nAlso looking at where the body_length from a FileBlock is used, I see this: https://github.com/apache/arrow/blob/516750216bfd48489b20988ad181e61823ecbb2f/cpp/src/arrow/ipc/writer.cc#L866 \r\n\r\nThat looks like the body_length field in the message header is the sum size of all the buffers. The size of the IPC message is then metadata_length + body_length + padding, and is written to the first 4 bytes of the ipc message. Have I misunderstood how the the C++ writer is computing the body_length?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
                        "name": "paul.e.taylor",
                        "key": "paul.e.taylor",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paul Taylor",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2018-09-25T18:17:53.351+0000",
                    "updated": "2018-09-25T18:17:53.351+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185661/comment/16628002",
                    "id": "16628002",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "The first 4 bytes of the IPC message contain only the size of the metadata plus padding to the desired alignment. So if we wanted 64-byte alignment, and the metadata is 200 bytes, then we write 52 bytes of padding, and the first 4 bytes has the integer 252. So 4 + 252 + body",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-09-25T22:23:58.677+0000",
                    "updated": "2018-09-25T22:23:58.677+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185661/comment/16628085",
                    "id": "16628085",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
                        "name": "paul.e.taylor",
                        "key": "paul.e.taylor",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paul Taylor",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Sorry for the confusion Wes, I got distracted while rewriting that sentence and forgot to remove the last half when I came back to it.\r\n\r\nDoes this change look like a fix? https://github.com/apache/arrow/pull/2616/commits/2095e4ebffeb9f51f04d1b9500c958dbbca9bedd#diff-64a9bfd33e2b9cdeaf61082d9fde8a0dR77",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paul.e.taylor",
                        "name": "paul.e.taylor",
                        "key": "paul.e.taylor",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paul Taylor",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2018-09-26T00:28:28.040+0000",
                    "updated": "2018-09-26T00:28:28.040+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13185661/comment/16630076",
                    "id": "16630076",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2616\n[https://github.com/apache/arrow/pull/2616]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-09-27T09:45:54.893+0000",
                    "updated": "2018-09-27T09:45:54.893+0000"
                }
            ],
            "maxResults": 8,
            "total": 8,
            "startAt": 0
        },
        "customfield_12311820": "0|i3y6rr:",
        "customfield_12314139": null
    }
}