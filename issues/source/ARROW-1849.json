{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13120341",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120341",
    "key": "ARROW-1849",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1849/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2946aa14[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@724b1318[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@79e73d01[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@539e22f6[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@77075f04[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7b0bfceb[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3bc4d9be[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@19efc5a2[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@54dd56e4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@70951430[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6d812ab5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@aa42072[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Nov 24 15:13:57 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2017-11-24T14:32:45.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1849/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2017-11-22T22:02:35.000+0000",
        "updated": "2017-11-24T15:13:57.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Add input checks to GArrowRecordBatch",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120341/comment/16263427",
                    "id": "16263427",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "kou opened a new pull request #1351: ARROW-1849: [GLib] Add input checks to GArrowRecordBatch\nURL: https://github.com/apache/arrow/pull/1351\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T22:03:28.349+0000",
                    "updated": "2017-11-22T22:03:28.349+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120341/comment/16264490",
                    "id": "16264490",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1351: ARROW-1849: [GLib] Add input checks to GArrowRecordBatch\nURL: https://github.com/apache/arrow/pull/1351#issuecomment-346650167\n \n \n   The Go build failed\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-23T15:43:48.391+0000",
                    "updated": "2017-11-23T15:43:48.391+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120341/comment/16264970",
                    "id": "16264970",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "kou commented on issue #1351: ARROW-1849: [GLib] Add input checks to GArrowRecordBatch\nURL: https://github.com/apache/arrow/pull/1351#issuecomment-346751555\n \n \n   Oh, I didn't notice it.\r\n   I've fixed.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-24T06:22:59.871+0000",
                    "updated": "2017-11-24T06:22:59.871+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120341/comment/16265333",
                    "id": "16265333",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1351: ARROW-1849: [GLib] Add input checks to GArrowRecordBatch\nURL: https://github.com/apache/arrow/pull/1351#discussion_r152981597\n \n \n\n ##########\n File path: c_glib/arrow-glib/record-batch.cpp\n ##########\n @@ -152,7 +171,12 @@ garrow_record_batch_new(GArrowSchema *schema,\n   auto arrow_record_batch =\n     arrow::RecordBatch::Make(garrow_schema_get_raw(schema),\n                              n_rows, arrow_columns);\n-  return garrow_record_batch_new_raw(&arrow_record_batch);\n+  auto status = arrow_record_batch->Validate();\n \n Review comment:\n   This also checks the schema types match the field types. If that becomes too expensive we might add a faster validation function\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-24T14:32:07.035+0000",
                    "updated": "2017-11-24T14:32:07.035+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120341/comment/16265336",
                    "id": "16265336",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1351\n[https://github.com/apache/arrow/pull/1351]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-11-24T14:32:45.125+0000",
                    "updated": "2017-11-24T14:32:45.125+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120341/comment/16265337",
                    "id": "16265337",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1351: ARROW-1849: [GLib] Add input checks to GArrowRecordBatch\nURL: https://github.com/apache/arrow/pull/1351\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/c_glib/arrow-glib/record-batch.cpp b/c_glib/arrow-glib/record-batch.cpp\nindex f23a0cf75..64f2020ad 100644\n--- a/c_glib/arrow-glib/record-batch.cpp\n+++ b/c_glib/arrow-glib/record-batch.cpp\n@@ -28,6 +28,23 @@\n \n #include <sstream>\n \n+static inline bool\n+garrow_record_batch_adjust_index(const std::shared_ptr<arrow::RecordBatch> arrow_record_batch,\n+                                 gint &i)\n+{\n+  auto n_columns = arrow_record_batch->num_columns();\n+  if (i < 0) {\n+    i += n_columns;\n+    if (i < 0) {\n+      return false;\n+    }\n+  }\n+  if (i >= n_columns) {\n+    return false;\n+  }\n+  return true;\n+}\n+\n G_BEGIN_DECLS\n \n /**\n@@ -135,13 +152,15 @@ garrow_record_batch_class_init(GArrowRecordBatchClass *klass)\n  * @schema: The schema of the record batch.\n  * @n_rows: The number of the rows in the record batch.\n  * @columns: (element-type GArrowArray): The columns in the record batch.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n- * Returns: A newly created #GArrowRecordBatch.\n+ * Returns: (nullable): A newly created #GArrowRecordBatch or %NULL on error.\n  */\n GArrowRecordBatch *\n garrow_record_batch_new(GArrowSchema *schema,\n                         guint32 n_rows,\n-                        GList *columns)\n+                        GList *columns,\n+                        GError **error)\n {\n   std::vector<std::shared_ptr<arrow::Array>> arrow_columns;\n   for (GList *node = columns; node; node = node->next) {\n@@ -152,7 +171,12 @@ garrow_record_batch_new(GArrowSchema *schema,\n   auto arrow_record_batch =\n     arrow::RecordBatch::Make(garrow_schema_get_raw(schema),\n                              n_rows, arrow_columns);\n-  return garrow_record_batch_new_raw(&arrow_record_batch);\n+  auto status = arrow_record_batch->Validate();\n+  if (garrow_error_check(error, status, \"[record-batch][new]\")) {\n+    return garrow_record_batch_new_raw(&arrow_record_batch);\n+  } else {\n+    return NULL;\n+  }\n }\n \n /**\n@@ -192,15 +216,21 @@ garrow_record_batch_get_schema(GArrowRecordBatch *record_batch)\n /**\n  * garrow_record_batch_get_column:\n  * @record_batch: A #GArrowRecordBatch.\n- * @i: The index of the target column.\n+ * @i: The index of the target column. If it's negative, index is\n+ *   counted backward from the end of the columns. `-1` means the last\n+ *   column.\n  *\n- * Returns: (transfer full): The i-th column in the record batch.\n+ * Returns: (transfer full) (nullable): The i-th column in the record batch\n+ *   on success, %NULL on out of index.\n  */\n GArrowArray *\n garrow_record_batch_get_column(GArrowRecordBatch *record_batch,\n-                               guint i)\n+                               gint i)\n {\n   const auto arrow_record_batch = garrow_record_batch_get_raw(record_batch);\n+  if (!garrow_record_batch_adjust_index(arrow_record_batch, i)) {\n+    return NULL;\n+  }\n   auto arrow_column = arrow_record_batch->column(i);\n   return garrow_array_new_raw(&arrow_column);\n }\n@@ -230,15 +260,21 @@ garrow_record_batch_get_columns(GArrowRecordBatch *record_batch)\n /**\n  * garrow_record_batch_get_column_name:\n  * @record_batch: A #GArrowRecordBatch.\n- * @i: The index of the target column.\n+ * @i: The index of the target column. If it's negative, index is\n+ *   counted backward from the end of the columns. `-1` means the last\n+ *   column.\n  *\n- * Returns: The name of the i-th column in the record batch.\n+ * Returns: (nullable): The name of the i-th column in the record batch\n+ *   on success, %NULL on out of index\n  */\n const gchar *\n garrow_record_batch_get_column_name(GArrowRecordBatch *record_batch,\n-                                    guint i)\n+                                    gint i)\n {\n   const auto arrow_record_batch = garrow_record_batch_get_raw(record_batch);\n+  if (!garrow_record_batch_adjust_index(arrow_record_batch, i)) {\n+    return NULL;\n+  }\n   return arrow_record_batch->column_name(i).c_str();\n }\n \ndiff --git a/c_glib/arrow-glib/record-batch.h b/c_glib/arrow-glib/record-batch.h\nindex 021f894f3..d31edf439 100644\n--- a/c_glib/arrow-glib/record-batch.h\n+++ b/c_glib/arrow-glib/record-batch.h\n@@ -68,17 +68,18 @@ GType garrow_record_batch_get_type(void) G_GNUC_CONST;\n \n GArrowRecordBatch *garrow_record_batch_new(GArrowSchema *schema,\n                                            guint32 n_rows,\n-                                           GList *columns);\n+                                           GList *columns,\n+                                           GError **error);\n \n gboolean garrow_record_batch_equal(GArrowRecordBatch *record_batch,\n                                    GArrowRecordBatch *other_record_batch);\n \n GArrowSchema *garrow_record_batch_get_schema     (GArrowRecordBatch *record_batch);\n GArrowArray  *garrow_record_batch_get_column     (GArrowRecordBatch *record_batch,\n-                                                  guint i);\n+                                                  gint i);\n GList        *garrow_record_batch_get_columns    (GArrowRecordBatch *record_batch);\n const gchar  *garrow_record_batch_get_column_name(GArrowRecordBatch *record_batch,\n-                                                  guint i);\n+                                                  gint i);\n guint         garrow_record_batch_get_n_columns  (GArrowRecordBatch *record_batch);\n gint64        garrow_record_batch_get_n_rows     (GArrowRecordBatch *record_batch);\n GArrowRecordBatch *garrow_record_batch_slice     (GArrowRecordBatch *record_batch,\ndiff --git a/c_glib/example/go/read-batch.go b/c_glib/example/go/read-batch.go\nindex ef1a7fb5a..1472939cd 100644\n--- a/c_glib/example/go/read-batch.go\n+++ b/c_glib/example/go/read-batch.go\n@@ -57,8 +57,8 @@ func PrintColumnValue(column *arrow.Array, i int64) {\n func PrintRecordBatch(recordBatch *arrow.RecordBatch) {\n \tnColumns := recordBatch.GetNColumns()\n \tfor i := uint32(0); i < nColumns; i++ {\n-\t\tcolumn := recordBatch.GetColumn(i)\n-\t\tcolumnName := recordBatch.GetColumnName(i)\n+\t\tcolumn := recordBatch.GetColumn(int32(i))\n+\t\tcolumnName := recordBatch.GetColumnName(int32(i))\n \t\tfmt.Printf(\"  %s: [\", columnName)\n \t\tnRows := recordBatch.GetNRows()\n \t\tfor j := int64(0); j < nRows; j++ {\ndiff --git a/c_glib/example/go/read-stream.go b/c_glib/example/go/read-stream.go\nindex 7bd076473..ed75a96c9 100644\n--- a/c_glib/example/go/read-stream.go\n+++ b/c_glib/example/go/read-stream.go\n@@ -57,8 +57,8 @@ func PrintColumnValue(column *arrow.Array, i int64) {\n func PrintRecordBatch(recordBatch *arrow.RecordBatch) {\n \tnColumns := recordBatch.GetNColumns()\n \tfor i := uint32(0); i < nColumns; i++ {\n-\t\tcolumn := recordBatch.GetColumn(i)\n-\t\tcolumnName := recordBatch.GetColumnName(i)\n+\t\tcolumn := recordBatch.GetColumn(int32(i))\n+\t\tcolumnName := recordBatch.GetColumnName(int32(i))\n \t\tfmt.Printf(\"  %s: [\", columnName)\n \t\tnRows := recordBatch.GetNRows()\n \t\tfor j := int64(0); j < nRows; j++ {\ndiff --git a/c_glib/example/go/write-batch.go b/c_glib/example/go/write-batch.go\nindex 9dbc3c00a..f4d03ed92 100644\n--- a/c_glib/example/go/write-batch.go\n+++ b/c_glib/example/go/write-batch.go\n@@ -188,7 +188,10 @@ func main() {\n \t\tBuildDoubleArray(),\n \t}\n \n-\trecordBatch := arrow.NewRecordBatch(schema, 4, columns)\n+\trecordBatch, err := arrow.NewRecordBatch(schema, 4, columns)\n+\tif err != nil {\n+\t\tlog.Fatalf(\"Failed to create record batch #1: %v\", err)\n+\t}\n \t_, err = writer.WriteRecordBatch(recordBatch)\n \tif err != nil {\n \t\tlog.Fatalf(\"Failed to write record batch #1: %v\", err)\n@@ -198,7 +201,10 @@ func main() {\n \tfor i, column := range columns {\n \t\tslicedColumns[i] = column.Slice(1, 3)\n \t}\n-\trecordBatch = arrow.NewRecordBatch(schema, 3, slicedColumns)\n+\trecordBatch, err = arrow.NewRecordBatch(schema, 3, slicedColumns)\n+\tif err != nil {\n+\t\tlog.Fatalf(\"Failed to create record batch #2: %v\", err)\n+\t}\n \t_, err = writer.WriteRecordBatch(recordBatch)\n \tif err != nil {\n \t\tlog.Fatalf(\"Failed to write record batch #2: %v\", err)\ndiff --git a/c_glib/example/go/write-stream.go b/c_glib/example/go/write-stream.go\nindex 244741e8c..7225156a7 100644\n--- a/c_glib/example/go/write-stream.go\n+++ b/c_glib/example/go/write-stream.go\n@@ -188,7 +188,10 @@ func main() {\n \t\tBuildDoubleArray(),\n \t}\n \n-\trecordBatch := arrow.NewRecordBatch(schema, 4, columns)\n+\trecordBatch, err := arrow.NewRecordBatch(schema, 4, columns)\n+\tif err != nil {\n+\t\tlog.Fatalf(\"Failed to create record batch #1: %v\", err)\n+\t}\n \t_, err = writer.WriteRecordBatch(recordBatch)\n \tif err != nil {\n \t\tlog.Fatalf(\"Failed to write record batch #1: %v\", err)\n@@ -198,7 +201,10 @@ func main() {\n \tfor i, column := range columns {\n \t\tslicedColumns[i] = column.Slice(1, 3)\n \t}\n-\trecordBatch = arrow.NewRecordBatch(schema, 3, slicedColumns)\n+\trecordBatch, err = arrow.NewRecordBatch(schema, 3, slicedColumns)\n+\tif err != nil {\n+\t\tlog.Fatalf(\"Failed to create record batch #2: %v\", err)\n+\t}\n \twriter.WriteRecordBatch(recordBatch)\n \t_, err = writer.WriteRecordBatch(recordBatch)\n \tif err != nil {\ndiff --git a/c_glib/test/test-record-batch.rb b/c_glib/test/test-record-batch.rb\nindex 9fd34b7d4..365922f49 100644\n--- a/c_glib/test/test-record-batch.rb\n+++ b/c_glib/test/test-record-batch.rb\n@@ -18,32 +18,53 @@\n class TestTable < Test::Unit::TestCase\n   include Helper::Buildable\n \n-  def test_new\n-    fields = [\n-      Arrow::Field.new(\"visible\", Arrow::BooleanDataType.new),\n-      Arrow::Field.new(\"valid\", Arrow::BooleanDataType.new),\n-    ]\n-    schema = Arrow::Schema.new(fields)\n-    columns = [\n-      build_boolean_array([true]),\n-      build_boolean_array([false]),\n-    ]\n-    record_batch = Arrow::RecordBatch.new(schema, 1, columns)\n-    assert_equal(1, record_batch.n_rows)\n+  sub_test_case(\".new\") do\n+    def test_valid\n+      fields = [\n+        Arrow::Field.new(\"visible\", Arrow::BooleanDataType.new),\n+        Arrow::Field.new(\"valid\", Arrow::BooleanDataType.new),\n+      ]\n+      schema = Arrow::Schema.new(fields)\n+      columns = [\n+        build_boolean_array([true]),\n+        build_boolean_array([false]),\n+      ]\n+      record_batch = Arrow::RecordBatch.new(schema, 1, columns)\n+      assert_equal(1, record_batch.n_rows)\n+    end\n+\n+    def test_no_columns\n+      fields = [\n+        Arrow::Field.new(\"visible\", Arrow::BooleanDataType.new),\n+      ]\n+      schema = Arrow::Schema.new(fields)\n+      message = \"[record-batch][new]: \" +\n+        \"Invalid: Number of columns did not match schema\"\n+      assert_raise(Arrow::Error::Invalid.new(message)) do\n+        Arrow::RecordBatch.new(schema, 0, [])\n+      end\n+    end\n   end\n \n   sub_test_case(\"instance methods\") do\n     def setup\n+      @visible_field = Arrow::Field.new(\"visible\", Arrow::BooleanDataType.new)\n+      @visible_values = [true, false, true, false, true]\n+      @valid_field = Arrow::Field.new(\"valid\", Arrow::BooleanDataType.new)\n+      @valid_values = [false, true, false, true, false]\n+\n       fields = [\n-        Arrow::Field.new(\"visible\", Arrow::BooleanDataType.new),\n-        Arrow::Field.new(\"valid\", Arrow::BooleanDataType.new),\n+        @visible_field,\n+        @valid_field,\n       ]\n       schema = Arrow::Schema.new(fields)\n       columns = [\n-        build_boolean_array([true, false, true, false, true, false]),\n-        build_boolean_array([false, true, false, true, false]),\n+        build_boolean_array(@visible_values),\n+        build_boolean_array(@valid_values),\n       ]\n-      @record_batch = Arrow::RecordBatch.new(schema, 5, columns)\n+      @record_batch = Arrow::RecordBatch.new(schema,\n+                                             @visible_values.size,\n+                                             columns)\n     end\n \n     def test_equal\n@@ -53,7 +74,7 @@ def test_equal\n       ]\n       schema = Arrow::Schema.new(fields)\n       columns = [\n-        build_boolean_array([true, false, true, false, true, false]),\n+        build_boolean_array([true, false, true, false, true]),\n         build_boolean_array([false, true, false, true, false]),\n       ]\n       other_record_batch = Arrow::RecordBatch.new(schema, 5, columns)\n@@ -66,12 +87,28 @@ def test_schema\n                    @record_batch.schema.fields.collect(&:name))\n     end\n \n-    def test_column\n-      assert_equal(5, @record_batch.get_column(1).length)\n+    sub_test_case(\"#column\") do\n+      def test_positive\n+        assert_equal(build_boolean_array(@valid_values),\n+                     @record_batch.get_column(1))\n+      end\n+\n+      def test_negative\n+        assert_equal(build_boolean_array(@visible_values),\n+                     @record_batch.get_column(-2))\n+      end\n+\n+      def test_positive_out_of_index\n+        assert_nil(@record_batch.get_column(2))\n+      end\n+\n+      def test_negative_out_of_index\n+        assert_nil(@record_batch.get_column(-3))\n+      end\n     end\n \n     def test_columns\n-      assert_equal([6, 5],\n+      assert_equal([5, 5],\n                    @record_batch.columns.collect(&:length))\n     end\n \n@@ -94,7 +131,7 @@ def test_slice\n \n     def test_to_s\n       assert_equal(<<-PRETTY_PRINT, @record_batch.to_s)\n-visible: [true, false, true, false, true, false]\n+visible: [true, false, true, false, true]\n valid: [false, true, false, true, false]\n       PRETTY_PRINT\n     end\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-24T14:32:45.997+0000",
                    "updated": "2017-11-24T14:32:45.997+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120341/comment/16265358",
                    "id": "16265358",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "kou commented on a change in pull request #1351: ARROW-1849: [GLib] Add input checks to GArrowRecordBatch\nURL: https://github.com/apache/arrow/pull/1351#discussion_r152989211\n \n \n\n ##########\n File path: c_glib/arrow-glib/record-batch.cpp\n ##########\n @@ -152,7 +171,12 @@ garrow_record_batch_new(GArrowSchema *schema,\n   auto arrow_record_batch =\n     arrow::RecordBatch::Make(garrow_schema_get_raw(schema),\n                              n_rows, arrow_columns);\n-  return garrow_record_batch_new_raw(&arrow_record_batch);\n+  auto status = arrow_record_batch->Validate();\n \n Review comment:\n   OK. I'll create a JIRA ticket when it's too expensive.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-24T15:13:57.713+0000",
                    "updated": "2017-11-24T15:13:57.713+0000"
                }
            ],
            "maxResults": 7,
            "total": 7,
            "startAt": 0
        },
        "customfield_12311820": "0|i3n49b:",
        "customfield_12314139": null
    }
}