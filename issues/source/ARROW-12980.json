{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13382227",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382227",
    "key": "ARROW-12980",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12618168",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12618168",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13306872",
                    "key": "ARROW-8894",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13306872",
                    "fields": {
                        "summary": "[C++] C++ array kernels framework and execution buildout (umbrella issue)",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
            "name": "rokm",
            "key": "rokm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Rok Mihevc",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
            "name": "rokm",
            "key": "rokm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Rok Mihevc",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
            "name": "rokm",
            "key": "rokm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Rok Mihevc",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "aggregateprogress": {
            "progress": 42000,
            "total": 42000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 42000,
            "total": 42000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12980/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 70,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382227/worklog/607353",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok opened a new pull request #10457:\nURL: https://github.com/apache/arrow/pull/10457\n\n\n   https://issues.apache.org/jira/browse/ARROW-12980\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-04T22:09:01.205+0000",
                    "updated": "2021-06-04T22:09:01.205+0000",
                    "started": "2021-06-04T22:09:01.205+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "607353",
                    "issueId": "13382227"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382227/worklog/607354",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10457:\nURL: https://github.com/apache/arrow/pull/10457#issuecomment-855033521\n\n\n   <!--\n     Licensed to the Apache Software Foundation (ASF) under one\n     or more contributor license agreements.  See the NOTICE file\n     distributed with this work for additional information\n     regarding copyright ownership.  The ASF licenses this file\n     to you under the Apache License, Version 2.0 (the\n     \"License\"); you may not use this file except in compliance\n     with the License.  You may obtain a copy of the License at\n   \n       http://www.apache.org/licenses/LICENSE-2.0\n   \n     Unless required by applicable law or agreed to in writing,\n     software distributed under the License is distributed on an\n     \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n     KIND, either express or implied.  See the License for the\n     specific language governing permissions and limitations\n     under the License.\n   -->\n   \n   Thanks for opening a pull request!\n   \n   If this is not a [minor PR](https://github.com/apache/arrow/blob/master/CONTRIBUTING.md#Minor-Fixes). Could you open an issue for this pull request on JIRA? https://issues.apache.org/jira/browse/ARROW\n   \n   Opening JIRAs ahead of time contributes to the [Openness](http://theapacheway.com/open/#:~:text=Openness%20allows%20new%20users%20the,must%20happen%20in%20the%20open.) of the Apache Arrow project.\n   \n   Then could you also rename pull request title in the following format?\n   \n       ARROW-${JIRA_ID}: [${COMPONENT}] ${SUMMARY}\n   \n   or\n   \n       MINOR: [${COMPONENT}] ${SUMMARY}\n   \n   See also:\n   \n     * [Other pull requests](https://github.com/apache/arrow/pulls/)\n     * [Contribution Guidelines - How to contribute patches](https://arrow.apache.org/docs/developers/contributing.html#how-to-contribute-patches)\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-04T22:09:24.766+0000",
                    "updated": "2021-06-04T22:09:24.766+0000",
                    "started": "2021-06-04T22:09:24.765+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "607354",
                    "issueId": "13382227"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382227/worklog/607355",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10457:\nURL: https://github.com/apache/arrow/pull/10457#issuecomment-855033992\n\n\n   https://issues.apache.org/jira/browse/ARROW-12980\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-04T22:09:57.869+0000",
                    "updated": "2021-06-04T22:09:57.869+0000",
                    "started": "2021-06-04T22:09:57.869+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "607355",
                    "issueId": "13382227"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382227/worklog/607485",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on pull request #10457:\nURL: https://github.com/apache/arrow/pull/10457#issuecomment-855387981\n\n\n   Errors appear to be due to windows builds not finding tz database. [See.](https://github.com/HowardHinnant/date/issues/641)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-06T12:02:38.318+0000",
                    "updated": "2021-06-06T12:02:38.318+0000",
                    "started": "2021-06-06T12:02:38.317+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "607485",
                    "issueId": "13382227"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382227/worklog/609529",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #10457:\nURL: https://github.com/apache/arrow/pull/10457#issuecomment-858395074\n\n\n   I think it would be good to write some tests in python as well, as currently the C++ tests are very hard to verify since we don't yet have the ability to parse strings localized in the timezone (I mean: the strings in the tests are interpreted as UTC and not the \"Australia/Broken_Hill\" timezone. And thus as a result, the expected values can't be read/verified from the strings). \r\n   \r\n   Given that, it might also make sense to first add a \"localize\" kernel for converting timestamps from naive to a certain timezone.\r\n    \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-10T07:47:12.122+0000",
                    "updated": "2021-06-10T07:47:12.122+0000",
                    "started": "2021-06-10T07:47:12.122+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609529",
                    "issueId": "13382227"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382227/worklog/609530",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche edited a comment on pull request #10457:\nURL: https://github.com/apache/arrow/pull/10457#issuecomment-858395074\n\n\n   I think it would be good to write some tests in python as well, as currently the C++ tests are very hard to verify since we don't yet have the ability to parse strings localized in the timezone (I mean: the strings in the tests are interpreted as UTC and not the \"Australia/Broken_Hill\" timezone. And thus as a result, the expected values can't be read/verified from the strings). \r\n   (while in python we could create the localized input timestamps with pandas)\r\n   \r\n   Given that, it might also make sense to first add a \"localize\" kernel for converting timestamps from naive to a certain timezone.\r\n    \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-10T07:47:45.395+0000",
                    "updated": "2021-06-10T07:47:45.395+0000",
                    "started": "2021-06-10T07:47:45.395+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609530",
                    "issueId": "13382227"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382227/worklog/609588",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on pull request #10457:\nURL: https://github.com/apache/arrow/pull/10457#issuecomment-858470970\n\n\n   > I think it would be good to write some tests in python as well, as currently the C++ tests are very hard to verify since we don't yet have the ability to parse strings localized in the timezone (I mean: the strings in the tests are interpreted as UTC and not the \"Australia/Broken_Hill\" timezone. And thus as a result, the expected values can't be read/verified from the strings).\r\n   > (while in python we could create the localized input timestamps with pandas)\r\n   \r\n   Indeed! I've used that approach to generate data in [ARROW-11759](https://github.com/apache/arrow/pull/10176) by pandas already and I'll just adopt that code here.\r\n   It did lead me to an [odd issue? in pandas](https://github.com/pandas-dev/pandas/issues/41834) that I cant quite explain. We'll either need to address it or avoid it in tests ..\r\n   \r\n   > Given that, it might also make sense to first add a \"localize\" kernel for converting timestamps from naive to a certain timezone.\r\n   \r\n   Localize kernel would be great. I suppose we'd need a scalar and a vector one depending if timezone is shared between rows or not? Vector version would apply [here](https://issues.apache.org/jira/browse/ARROW-5912).\r\n   \r\n   Also strptime kernel ignores timezones at the moment.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-10T09:36:25.872+0000",
                    "updated": "2021-06-10T09:36:25.872+0000",
                    "started": "2021-06-10T09:36:25.872+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609588",
                    "issueId": "13382227"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382227/worklog/609607",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #10457:\nURL: https://github.com/apache/arrow/pull/10457#issuecomment-858486248\n\n\n   > Localize kernel would be great. I suppose we'd need a scalar and a vector one depending if timezone is shared between rows or not?\r\n   \r\n   I think a scalar kernel is the most important (with signature like `localize(array[timestamp], string tz) -> array[timestamp, tz]`, where array can also be chunked array or scalar of course). Mixed timezones is a rather corner case (and in principle also could be done as a scalar kernel if the second `tz` argument is also an array). I think ARROW-5912 is more a bug in the python->arrow conversion code, and not necessarily related / fixable by a localize kernel.\r\n   \r\n   I opened https://issues.apache.org/jira/browse/ARROW-13033 for this.\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-10T09:58:24.415+0000",
                    "updated": "2021-06-10T09:58:24.415+0000",
                    "started": "2021-06-10T09:58:24.415+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609607",
                    "issueId": "13382227"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382227/worklog/609611",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #10457:\nURL: https://github.com/apache/arrow/pull/10457#issuecomment-858491335\n\n\n   Another question: is the `locate_zone` configurable in some way to give some hints where to find the tz database?\r\n   \r\n   The database is not always available on the system (as you noticed for windows). But depending on the application / binding language, it might already be available elsewhere. For example, in recent Python versions, there is now support for this in the standard library, automatically using the `tzdata` package if there is no system database. I am wondering if pyarrow should be able to instruct the kernel where to look for the database (https://www.python.org/dev/peps/pep-0615/#search-path-configuration in python). \r\n   Or does the vendored `date.h` also include functionalities to automatically download the data if not available on the system?\r\n   \r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-10T10:05:14.502+0000",
                    "updated": "2021-06-10T10:05:14.502+0000",
                    "started": "2021-06-10T10:05:14.501+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609611",
                    "issueId": "13382227"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382227/worklog/609618",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on pull request #10457:\nURL: https://github.com/apache/arrow/pull/10457#issuecomment-858500316\n\n\n   > I opened https://issues.apache.org/jira/browse/ARROW-13033 for this.\r\n   \r\n   Nice, I was also writing it just now :)\r\n   The strptime timzone ignoring issue is [here](https://issues.apache.org/jira/browse/ARROW-12820).\r\n   \r\n   > Or does the vendored date.h also include functionalities to automatically download the data if not available on the system?\r\n   \r\n   As per HowardHinnant's [answer](https://github.com/HowardHinnant/date/issues/641#issuecomment-765732206):\r\n   \r\n   > The library can be configured to not go to the internet for tzdata. tzdata can either be downloaded manually, and this lib can find it, or (on non-Windows systems), the OS-supplied tzdata can be used.\r\n   \r\n   I suppose we could have the kernel try getting data online. If that fails try OS and as a final fallback use arrow bundled tz db (which we would have to add in this PR).\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-10T10:17:37.125+0000",
                    "updated": "2021-06-10T10:17:37.125+0000",
                    "started": "2021-06-10T10:17:37.124+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609618",
                    "issueId": "13382227"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382227/worklog/609748",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on pull request #10457:\nURL: https://github.com/apache/arrow/pull/10457#issuecomment-858694911\n\n\n   @jorisvandenbossche added the [python tests](https://github.com/apache/arrow/pull/10457/commits/83b1e21a187c88d13e2b7a7589eac80f0a77a5b0). Will add some more for timezone naive and if needed make another PR :).\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-10T14:56:47.250+0000",
                    "updated": "2021-06-10T14:56:47.250+0000",
                    "started": "2021-06-10T14:56:47.249+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609748",
                    "issueId": "13382227"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382227/worklog/609859",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on pull request #10457:\nURL: https://github.com/apache/arrow/pull/10457#issuecomment-858854459\n\n\n   Added the timezone-naive test for component extractions.\r\n   I'll wait for the consensus to build on the timezone handling discussions before closing the PR and moving the python tests to a new PR.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-10T18:08:11.351+0000",
                    "updated": "2021-06-10T18:08:11.351+0000",
                    "started": "2021-06-10T18:08:11.350+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609859",
                    "issueId": "13382227"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382227/worklog/610718",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #10457:\nURL: https://github.com/apache/arrow/pull/10457#discussion_r651034869\n\n\n\n##########\nFile path: python/pyarrow/tests/test_compute.py\n##########\n@@ -1212,6 +1212,80 @@ def test_strptime():\n     assert got == expected\n \n \n+def _check_datetime_components(ts):\n+    tsa = [pa.array(ts)]\n+    subseconds = ((ts.microsecond * 10**3 + ts.nanosecond) *\n+                  10**-9).values.round(9)\n+    iso_calendar_fields = [\n+        pa.field('iso_year', pa.int64()),\n+        pa.field('iso_week', pa.int64()),\n+        pa.field('iso_day_of_week', pa.int64())\n+    ]\n+    iso_calendar = pa.StructArray.from_arrays([\n+        ts.isocalendar()[\"year\"].astype(int),\n+        ts.isocalendar()[\"week\"].astype(int),\n+        ts.isocalendar()[\"day\"].astype(int)],\n+        fields=iso_calendar_fields)\n+\n+    assert pc.call_function(\"year\", tsa).equals(pa.array(ts.year))\n\nReview comment:\n       You can directly use `pc.year(..)` instead of `pc.call_function(\"year\", ..)` (and the same for the others below)\n\n##########\nFile path: python/pyarrow/tests/test_compute.py\n##########\n@@ -1212,6 +1212,80 @@ def test_strptime():\n     assert got == expected\n \n \n+def _check_datetime_components(ts):\n+    tsa = [pa.array(ts)]\n+    subseconds = ((ts.microsecond * 10**3 + ts.nanosecond) *\n+                  10**-9).values.round(9)\n+    iso_calendar_fields = [\n+        pa.field('iso_year', pa.int64()),\n+        pa.field('iso_week', pa.int64()),\n+        pa.field('iso_day_of_week', pa.int64())\n+    ]\n+    iso_calendar = pa.StructArray.from_arrays([\n+        ts.isocalendar()[\"year\"].astype(int),\n+        ts.isocalendar()[\"week\"].astype(int),\n+        ts.isocalendar()[\"day\"].astype(int)],\n+        fields=iso_calendar_fields)\n+\n+    assert pc.call_function(\"year\", tsa).equals(pa.array(ts.year))\n+    assert pc.call_function(\"month\", tsa).equals(pa.array(ts.month))\n+    assert pc.call_function(\"day\", tsa).equals(pa.array(ts.day))\n+    assert pc.call_function(\"day_of_week\", tsa).equals(\n+        pa.array(ts.day_of_week))\n+    assert pc.call_function(\"day_of_year\", tsa).equals(\n+        pa.array(ts.day_of_year))\n+    assert pc.call_function(\"iso_year\", tsa).equals(\n+        pa.array(ts.isocalendar()[\"year\"].astype(int)))\n+    assert pc.call_function(\"iso_week\", tsa).equals(\n+        pa.array(ts.isocalendar()[\"week\"].astype(int)))\n+    assert pc.call_function(\"iso_calendar\", tsa).equals(iso_calendar)\n+    assert pc.call_function(\"quarter\", tsa).equals(pa.array(ts.quarter))\n+    assert pc.call_function(\"hour\", tsa).equals(pa.array(ts.hour))\n+    assert pc.call_function(\"minute\", tsa).equals(pa.array(ts.minute))\n+    assert pc.call_function(\"second\", tsa).equals(pa.array(ts.second.values))\n+    assert pc.call_function(\"millisecond\", tsa).equals(\n+        pa.array(ts.microsecond // 10**3))\n+    assert pc.call_function(\"microsecond\", tsa).equals(\n+        pa.array(ts.microsecond % 10**3))\n+    assert pc.call_function(\"nanosecond\", tsa).equals(pa.array(ts.nanosecond))\n+    assert pc.call_function(\"subsecond\", tsa).equals(pa.array(subseconds))\n+\n+\n+@pytest.mark.pandas\n+def test_extract_datetime_components():\n+    import pandas as pd\n+\n+    # TODO: see https://github.com/pandas-dev/pandas/issues/41834\n+    # \"1899-01-01T00:59:20.001001001\"\n+    timestamps = [\"1970-01-01T00:00:59.123456789\",\n+                  \"2000-02-29T23:23:23.999999999\",\n+                  \"2033-05-18T03:33:20.000000000\",\n+                  \"2020-01-01T01:05:05.001\",\n+                  \"2019-12-31T02:10:10.002\",\n+                  \"2019-12-30T03:15:15.003\",\n+                  \"2009-12-31T04:20:20.004132\",\n+                  \"2010-01-01T05:25:25.005321\",\n+                  \"2010-01-03T06:30:30.006163\",\n+                  \"2010-01-04T07:35:35\",\n+                  \"2006-01-01T08:40:40\",\n+                  \"2005-12-31T09:45:45\",\n+                  \"2008-12-28\",\n+                  \"2008-12-29\",\n+                  \"2012-01-01 01:02:03\"]\n+    timezones = [\"US/Central\", \"Pacific/Marquesas\", \"Asia/Kolkata\",\n+                 \"Etc/GMT-4\", \"Etc/GMT+4\", \"Pacific/Marquesas\",\n+                 \"Australia/Broken_Hill\"]\n+\n+    # Test timezone naive timestamp array\n+    ts = pd.to_datetime(timestamps)\n+    _check_datetime_components(ts)\n+\n+    # Test timezone aware timestamp array\n+    for timezone in timezones:\n+        ts = pd.to_datetime(timestamps).tz_localize(\"UTC\").tz_convert(timezone)\n\nReview comment:\n       ```suggestion\r\n           ts = pd.to_datetime(timestamps).tz_localize(timezone)\r\n   ```\r\n   \r\n   Otherwise the \"local\" timestamps might change, and some of the corner cases might be shifted to another day.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-14T15:11:27.243+0000",
                    "updated": "2021-06-14T15:11:27.243+0000",
                    "started": "2021-06-14T15:11:27.242+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "610718",
                    "issueId": "13382227"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382227/worklog/610719",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #10457:\nURL: https://github.com/apache/arrow/pull/10457#issuecomment-860765541\n\n\n   > I'll wait for the consensus to build on the timezone handling discussions before closing the PR and moving the python tests to a new PR.\r\n   \r\n   I think there was no opposition for this one (i.e. that the field extraction should yield local hour/minute/etc), so I don't think there is a need to close the PR.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-14T15:13:43.012+0000",
                    "updated": "2021-06-14T15:13:43.012+0000",
                    "started": "2021-06-14T15:13:43.011+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "610719",
                    "issueId": "13382227"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382227/worklog/610893",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on a change in pull request #10457:\nURL: https://github.com/apache/arrow/pull/10457#discussion_r651241888\n\n\n\n##########\nFile path: python/pyarrow/tests/test_compute.py\n##########\n@@ -1212,6 +1212,80 @@ def test_strptime():\n     assert got == expected\n \n \n+def _check_datetime_components(ts):\n+    tsa = [pa.array(ts)]\n+    subseconds = ((ts.microsecond * 10**3 + ts.nanosecond) *\n+                  10**-9).values.round(9)\n+    iso_calendar_fields = [\n+        pa.field('iso_year', pa.int64()),\n+        pa.field('iso_week', pa.int64()),\n+        pa.field('iso_day_of_week', pa.int64())\n+    ]\n+    iso_calendar = pa.StructArray.from_arrays([\n+        ts.isocalendar()[\"year\"].astype(int),\n+        ts.isocalendar()[\"week\"].astype(int),\n+        ts.isocalendar()[\"day\"].astype(int)],\n+        fields=iso_calendar_fields)\n+\n+    assert pc.call_function(\"year\", tsa).equals(pa.array(ts.year))\n\nReview comment:\n       Done.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-14T20:07:44.708+0000",
                    "updated": "2021-06-14T20:07:44.708+0000",
                    "started": "2021-06-14T20:07:44.708+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "610893",
                    "issueId": "13382227"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382227/worklog/610946",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on pull request #10457:\nURL: https://github.com/apache/arrow/pull/10457#issuecomment-861007346\n\n\n   > I think there was no opposition for this one (i.e. that the field extraction should yield local hour/minute/etc), so I don't think there is a need to close the PR.\r\n   \r\n   Huh, I forget exactly what I was thinking there and you appear to be right.\r\n   \r\n   I think the main remaining task is the tz db issue. I'll take a look at it tomorrow.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-14T21:26:30.220+0000",
                    "updated": "2021-06-14T21:26:30.220+0000",
                    "started": "2021-06-14T21:26:30.219+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "610946",
                    "issueId": "13382227"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382227/worklog/610950",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on a change in pull request #10457:\nURL: https://github.com/apache/arrow/pull/10457#discussion_r651290261\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal_test.cc\n##########\n@@ -143,39 +142,202 @@ TEST(ScalarTemporalTest, TestTemporalComponentExtractionWithDifferentUnits) {\n     CheckScalarUnary(\"quarter\", unit, times, int64(), quarter);\n     CheckScalarUnary(\"hour\", unit, times, int64(), hour);\n     CheckScalarUnary(\"minute\", unit, times, int64(), minute);\n-    CheckScalarUnary(\"second\", unit, times, float64(), second);\n+    CheckScalarUnary(\"second\", unit, times, int64(), second);\n     CheckScalarUnary(\"millisecond\", unit, times, int64(), zeros);\n     CheckScalarUnary(\"microsecond\", unit, times, int64(), zeros);\n     CheckScalarUnary(\"nanosecond\", unit, times, int64(), zeros);\n     CheckScalarUnary(\"subsecond\", unit, times, float64(), zeros);\n   }\n }\n \n-TEST(ScalarTemporalTest, TestZonedTemporalComponentExtraction) {\n-  std::string timezone = \"Asia/Kolkata\";\n-  const char* times = R\"([\"1970-01-01T00:00:59\", null])\";\n+TEST(ScalarTemporalTest, TestZoned1) {\n+  const char* times =\n+      R\"([\"1970-01-01T00:00:59.123456789\",\"2000-02-29T23:23:23.999999999\",\n+          \"1899-01-01T00:59:20.001001001\",\"2033-05-18T03:33:20.000000000\",\n+          \"2020-01-01T01:05:05.001\", \"2019-12-31T02:10:10.002\",\n+          \"2019-12-30T03:15:15.003\", \"2009-12-31T04:20:20.004132\",\n+          \"2010-01-01T05:25:25.005321\", \"2010-01-03T06:30:30.006163\",\n+          \"2010-01-04T07:35:35\", \"2006-01-01T08:40:40\", \"2005-12-31T09:45:45\",\n+          \"2008-12-28\", \"2008-12-29\", \"2012-01-01 01:02:03\", null])\";\n+  auto unit = timestamp(TimeUnit::NANO, \"Pacific/Marquesas\");\n+  auto iso_calendar_type =\n+      struct_({field(\"iso_year\", int64()), field(\"iso_week\", int64()),\n+               field(\"iso_day_of_week\", int64())});\n+  auto year =\n+      \"[1969, 2000, 1898, 2033, 2019, 2019, 2019, 2009, 2009, 2010, 2010, 2005, 2005, \"\n+      \"2008, 2008, 2011, null]\";\n+  auto month = \"[12, 2, 12, 5, 12, 12, 12, 12, 12, 1, 1, 12, 12, 12, 12, 12, null]\";\n+  auto day = \"[31, 29, 31, 17, 31, 30, 29, 30, 31, 2, 3, 31, 31, 27, 28, 31, null]\";\n+  auto day_of_week = \"[2, 1, 5, 1, 1, 0, 6, 2, 3, 5, 6, 5, 5, 5, 6, 5, null]\";\n+  auto day_of_year =\n+      \"[365, 60, 365, 137, 365, 364, 363, 364, 365, 2, 3, 365, 365, 362, 363, 365, null]\";\n+  auto iso_year =\n+      \"[1970, 2000, 1898, 2033, 2020, 2020, 2019, 2009, 2009, 2009, 2009, 2005, 2005, \"\n+      \"2008, 2008, 2011, null]\";\n+  auto iso_week = \"[1, 9, 52, 20, 1, 1, 52, 53, 53, 53, 53, 52, 52, 52, 52, 52, null]\";\n+  auto iso_calendar =\n+      ArrayFromJSON(iso_calendar_type,\n+                    R\"([{\"iso_year\": 1970, \"iso_week\": 1, \"iso_day_of_week\": 3},\n+                        {\"iso_year\": 2000, \"iso_week\": 9, \"iso_day_of_week\": 2},\n+                        {\"iso_year\": 1898, \"iso_week\": 52, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2033, \"iso_week\": 20, \"iso_day_of_week\": 2},\n+                        {\"iso_year\": 2020, \"iso_week\": 1, \"iso_day_of_week\": 2},\n+                        {\"iso_year\": 2020, \"iso_week\": 1, \"iso_day_of_week\": 1},\n+                        {\"iso_year\": 2019, \"iso_week\": 52, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 3},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 4},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2005, \"iso_week\": 52, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2005, \"iso_week\": 52, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2008, \"iso_week\": 52, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2008, \"iso_week\": 52, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2011, \"iso_week\": 52, \"iso_day_of_week\": 6}, null])\");\n+  auto quarter = \"[4, 1, 4, 2, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 4, null]\";\n+  auto hour = \"[14, 13, 15, 18, 15, 16, 17, 18, 19, 21, 22, 23, 0, 14, 14, 15, null]\";\n+  auto minute = \"[30, 53, 41, 3, 35, 40, 45, 50, 55, 0, 5, 10, 15, 30, 30, 32, null]\";\n+  auto second = \"[59, 23, 20, 20, 5, 10, 15, 20, 25, 30, 35, 40, 45, 0, 0, 3, null]\";\n+  auto millisecond = \"[123, 999, 1, 0, 1, 2, 3, 4, 5, 6, 0, 0, 0, 0, 0, 0, null]\";\n+  auto microsecond = \"[456, 999, 1, 0, 0, 0, 0, 132, 321, 163, 0, 0, 0, 0, 0, 0, null]\";\n+  auto nanosecond = \"[789, 999, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, null]\";\n+  auto subsecond =\n+      \"[0.123456789, 0.999999999, 0.001001001, 0.0, 0.001, 0.002, 0.003, 0.004132, \"\n+      \"0.005321, 0.006163, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, null]\";\n \n-  for (auto u : internal::AllTimeUnits()) {\n-    auto unit = timestamp(u, timezone);\n-    auto timestamps = ArrayFromJSON(unit, times);\n-\n-    ASSERT_RAISES(Invalid, Year(timestamps));\n-    ASSERT_RAISES(Invalid, Month(timestamps));\n-    ASSERT_RAISES(Invalid, Day(timestamps));\n-    ASSERT_RAISES(Invalid, DayOfWeek(timestamps));\n-    ASSERT_RAISES(Invalid, DayOfYear(timestamps));\n-    ASSERT_RAISES(Invalid, ISOYear(timestamps));\n-    ASSERT_RAISES(Invalid, ISOWeek(timestamps));\n-    ASSERT_RAISES(Invalid, ISOCalendar(timestamps));\n-    ASSERT_RAISES(Invalid, Quarter(timestamps));\n-    ASSERT_RAISES(Invalid, Hour(timestamps));\n-    ASSERT_RAISES(Invalid, Minute(timestamps));\n-    ASSERT_RAISES(Invalid, Second(timestamps));\n-    ASSERT_RAISES(Invalid, Millisecond(timestamps));\n-    ASSERT_RAISES(Invalid, Microsecond(timestamps));\n-    ASSERT_RAISES(Invalid, Nanosecond(timestamps));\n-    ASSERT_RAISES(Invalid, Subsecond(timestamps));\n-  }\n+  CheckScalarUnary(\"year\", unit, times, int64(), year);\n+  CheckScalarUnary(\"month\", unit, times, int64(), month);\n+  CheckScalarUnary(\"day\", unit, times, int64(), day);\n+  CheckScalarUnary(\"day_of_week\", unit, times, int64(), day_of_week);\n+  CheckScalarUnary(\"day_of_year\", unit, times, int64(), day_of_year);\n+  CheckScalarUnary(\"iso_year\", unit, times, int64(), iso_year);\n+  CheckScalarUnary(\"iso_week\", unit, times, int64(), iso_week);\n+  CheckScalarUnary(\"iso_calendar\", ArrayFromJSON(unit, times), iso_calendar);\n+  CheckScalarUnary(\"quarter\", unit, times, int64(), quarter);\n+  CheckScalarUnary(\"hour\", unit, times, int64(), hour);\n+  CheckScalarUnary(\"minute\", unit, times, int64(), minute);\n+  CheckScalarUnary(\"second\", unit, times, int64(), second);\n+  CheckScalarUnary(\"millisecond\", unit, times, int64(), millisecond);\n+  CheckScalarUnary(\"microsecond\", unit, times, int64(), microsecond);\n+  CheckScalarUnary(\"nanosecond\", unit, times, int64(), nanosecond);\n+  CheckScalarUnary(\"subsecond\", unit, times, float64(), subsecond);\n+}\n+\n+TEST(ScalarTemporalTest, TestZoned2) {\n+  const char* times =\n+      R\"([\"1970-01-01T00:00:59.123456789\",\"2000-02-29T23:23:23.999999999\",\n+          \"1899-01-01T00:59:20.001001001\",\"2033-05-18T03:33:20.000000000\",\n+          \"2020-01-01T01:05:05.001\", \"2019-12-31T02:10:10.002\",\n+          \"2019-12-30T03:15:15.003\", \"2009-12-31T04:20:20.004132\",\n+          \"2010-01-01T05:25:25.005321\", \"2010-01-03T06:30:30.006163\",\n+          \"2010-01-04T07:35:35\", \"2006-01-01T08:40:40\", \"2005-12-31T09:45:45\",\n+          \"2008-12-28\", \"2008-12-29\", \"2012-01-01 01:02:03\", null])\";\n+  auto unit = timestamp(TimeUnit::NANO, \"Australia/Broken_Hill\");\n+  auto iso_calendar_type =\n+      struct_({field(\"iso_year\", int64()), field(\"iso_week\", int64()),\n+               field(\"iso_day_of_week\", int64())});\n+  auto year =\n+      \"[1970, 2000, 1899, 2033, 2020, 2019, 2019, 2009, 2010, 2010, 2010, 2006, 2005, \"\n+      \"2008, 2008, 2012, null]\";\n+  auto month = \"[1, 3, 1, 5, 1, 12, 12, 12, 1, 1, 1, 1, 12, 12, 12, 1, null]\";\n+  auto day = \"[1, 1, 1, 18, 1, 31, 30, 31, 1, 3, 4, 1, 31, 28, 29, 1, null]\";\n+  auto day_of_week = \"[3, 2, 6, 2, 2, 1, 0, 3, 4, 6, 0, 6, 5, 6, 0, 6, null]\";\n+  auto day_of_year =\n+      \"[1, 61, 1, 138, 1, 365, 364, 365, 1, 3, 4, 1, 365, 363, 364, 1, null]\";\n+  auto iso_year =\n+      \"[1970, 2000, 1898, 2033, 2020, 2020, 2020, 2009, 2009, 2009, 2010, 2005, 2005, \"\n+      \"2008, 2009, 2011, null]\";\n+  auto iso_week = \"[1, 9, 52, 20, 1, 1, 1, 53, 53, 53, 1, 52, 52, 52, 1, 52, null]\";\n+  auto iso_calendar =\n+      ArrayFromJSON(iso_calendar_type,\n+                    R\"([{\"iso_year\": 1970, \"iso_week\": 1, \"iso_day_of_week\": 4},\n+                        {\"iso_year\": 2000, \"iso_week\": 9, \"iso_day_of_week\": 3},\n+                        {\"iso_year\": 1898, \"iso_week\": 52, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2033, \"iso_week\": 20, \"iso_day_of_week\": 3},\n+                        {\"iso_year\": 2020, \"iso_week\": 1, \"iso_day_of_week\": 3},\n+                        {\"iso_year\": 2020, \"iso_week\": 1, \"iso_day_of_week\": 2},\n+                        {\"iso_year\": 2020, \"iso_week\": 1, \"iso_day_of_week\": 1},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 4},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 5},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2010, \"iso_week\": 1, \"iso_day_of_week\": 1},\n+                        {\"iso_year\": 2005, \"iso_week\": 52, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2005, \"iso_week\": 52, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2008, \"iso_week\": 52, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2009, \"iso_week\": 1, \"iso_day_of_week\": 1},\n+                        {\"iso_year\": 2011, \"iso_week\": 52, \"iso_day_of_week\": 7}, null])\");\n+  auto quarter = \"[1, 1, 1, 2, 1, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 1, null]\";\n+  auto hour = \"[9, 9, 9, 13, 11, 12, 13, 14, 15, 17, 18, 19, 20, 10, 10, 11, null]\";\n+  auto minute = \"[30, 53, 59, 3, 35, 40, 45, 50, 55, 0, 5, 10, 15, 30, 30, 32, null]\";\n+  auto second = \"[59, 23, 20, 20, 5, 10, 15, 20, 25, 30, 35, 40, 45, 0, 0, 3, null]\";\n+  auto millisecond = \"[123, 999, 1, 0, 1, 2, 3, 4, 5, 6, 0, 0, 0, 0, 0, 0, null]\";\n+  auto microsecond = \"[456, 999, 1, 0, 0, 0, 0, 132, 321, 163, 0, 0, 0, 0, 0, 0, null]\";\n+  auto nanosecond = \"[789, 999, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, null]\";\n+  auto subsecond =\n+      \"[0.123456789, 0.999999999, 0.001001001, 0.0, 0.001, 0.002, 0.003, 0.004132, \"\n+      \"0.005321, 0.006163, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, null]\";\n+\n+  CheckScalarUnary(\"year\", unit, times, int64(), year);\n+  CheckScalarUnary(\"month\", unit, times, int64(), month);\n+  CheckScalarUnary(\"day\", unit, times, int64(), day);\n+  CheckScalarUnary(\"day_of_week\", unit, times, int64(), day_of_week);\n+  CheckScalarUnary(\"day_of_year\", unit, times, int64(), day_of_year);\n+  CheckScalarUnary(\"iso_year\", unit, times, int64(), iso_year);\n+  CheckScalarUnary(\"iso_week\", unit, times, int64(), iso_week);\n+  CheckScalarUnary(\"iso_calendar\", ArrayFromJSON(unit, times), iso_calendar);\n+  CheckScalarUnary(\"quarter\", unit, times, int64(), quarter);\n+  CheckScalarUnary(\"hour\", unit, times, int64(), hour);\n+  CheckScalarUnary(\"minute\", unit, times, int64(), minute);\n+  CheckScalarUnary(\"second\", unit, times, int64(), second);\n+  CheckScalarUnary(\"millisecond\", unit, times, int64(), millisecond);\n+  CheckScalarUnary(\"microsecond\", unit, times, int64(), microsecond);\n+  CheckScalarUnary(\"nanosecond\", unit, times, int64(), nanosecond);\n+  CheckScalarUnary(\"subsecond\", unit, times, float64(), subsecond);\n+}\n+\n+TEST(ScalarTemporalTest, TestOverflow) {\n+  const char* times = R\"([\"1677-09-20T00:00:59.123456789\", \"2262-04-13T23:23:23.999999999\"])\";\n+\n+  auto unit = timestamp(TimeUnit::NANO);\n+  auto iso_calendar_type =\n+      struct_({field(\"iso_year\", int64()), field(\"iso_week\", int64()),\n+               field(\"iso_day_of_week\", int64())});\n+\n+  auto year = \"[2262, 1677]\";\n+  auto month = \"[4, 9]\";\n+  auto day = \"[10, 22]\";\n+  auto day_of_week = \"[3, 2]\";\n+  auto day_of_year = \"[100, 265]\";\n+  auto iso_year = \"[2262, 1677]\";\n+  auto iso_week = \"[15, 38]\";\n+  auto iso_calendar =\n+      ArrayFromJSON(iso_calendar_type,\n+                    R\"([{\"iso_year\": 2262, \"iso_week\": 15, \"iso_day_of_week\": 4},\n+                        {\"iso_year\": 1677, \"iso_week\": 38, \"iso_day_of_week\": 3}])\");\n+  auto quarter = \"[2, 3]\";\n+  auto hour = \"[23, 23]\";\n+  auto minute = \"[35, 48]\";\n+  auto second = \"[32, 50]\";\n+  auto millisecond = \"[833, 290]\";\n+  auto microsecond = \"[8, 448]\";\n+  auto nanosecond = \"[405, 383]\";\n+  auto subsecond = \"[0.833008405, 0.290448383]\";\n+\n+  CheckScalarUnary(\"year\", unit, times, int64(), year);\n+  CheckScalarUnary(\"month\", unit, times, int64(), month);\n+  CheckScalarUnary(\"day\", unit, times, int64(), day);\n+  CheckScalarUnary(\"day_of_week\", unit, times, int64(), day_of_week);\n+  CheckScalarUnary(\"day_of_year\", unit, times, int64(), day_of_year);\n+  CheckScalarUnary(\"iso_year\", unit, times, int64(), iso_year);\n+  CheckScalarUnary(\"iso_week\", unit, times, int64(), iso_week);\n+  CheckScalarUnary(\"iso_calendar\", ArrayFromJSON(unit, times), iso_calendar);\n+  CheckScalarUnary(\"quarter\", unit, times, int64(), quarter);\n+  CheckScalarUnary(\"hour\", unit, times, int64(), hour);\n+  CheckScalarUnary(\"minute\", unit, times, int64(), minute);\n+  CheckScalarUnary(\"second\", unit, times, int64(), second);\n+  CheckScalarUnary(\"millisecond\", unit, times, int64(), millisecond);\n+  CheckScalarUnary(\"microsecond\", unit, times, int64(), microsecond);\n+  CheckScalarUnary(\"nanosecond\", unit, times, int64(), nanosecond);\n+  CheckScalarUnary(\"subsecond\", unit, times, float64(), subsecond);\n }\n\nReview comment:\n       It this what you had in mind [here](https://github.com/apache/arrow/pull/10176#issuecomment-858392898).\n\n##########\nFile path: python/pyarrow/tests/test_compute.py\n##########\n@@ -1255,6 +1255,78 @@ def test_strptime():\n     assert got == expected\n \n \n+def _check_datetime_components(timestamps, timezone=None):\n+    import pandas as pd\n+\n+    if timezone:\n+        ts = pd.to_datetime(timestamps).tz_localize(timezone).to_series()\n+    else:\n+        ts = pd.to_datetime(timestamps).to_series()\n+\n+    tsa = pa.array(ts)\n+\n+    subseconds = ((ts.dt.microsecond * 10**3 +\n+                  ts.dt.nanosecond) * 10**-9).round(9)\n+    iso_calendar_fields = [\n+        pa.field('iso_year', pa.int64()),\n+        pa.field('iso_week', pa.int64()),\n+        pa.field('iso_day_of_week', pa.int64())\n+    ]\n+\n+    iso_year = ts.dt.isocalendar()[\"year\"].astype(int)\n+    iso_week = ts.dt.isocalendar()[\"week\"].astype(int)\n+    iso_day = ts.dt.isocalendar()[\"day\"].astype(int)\n+    iso_calendar = pa.StructArray.from_arrays(\n+        [iso_year, iso_week, iso_day], fields=iso_calendar_fields)\n+\n+    assert pc.year(tsa).equals(pa.array(ts.dt.year))\n+    assert pc.month(tsa).equals(pa.array(ts.dt.month))\n+    assert pc.day(tsa).equals(pa.array(ts.dt.day))\n+    assert pc.day_of_week(tsa).equals(pa.array(ts.dt.day_of_week))\n+    assert pc.day_of_year(tsa).equals(pa.array(ts.dt.day_of_year))\n+    assert pc.iso_year(tsa).equals(pa.array(iso_year))\n+    assert pc.iso_week(tsa).equals(pa.array(iso_week))\n+    assert pc.iso_calendar(tsa).equals(iso_calendar)\n+    assert pc.quarter(tsa).equals(pa.array(ts.dt.quarter))\n+    assert pc.hour(tsa).equals(pa.array(ts.dt.hour))\n+    assert pc.minute(tsa).equals(pa.array(ts.dt.minute))\n+    assert pc.second(tsa).equals(pa.array(ts.dt.second.values))\n+    assert pc.millisecond(tsa).equals(pa.array(ts.dt.microsecond // 10**3))\n+    assert pc.microsecond(tsa).equals(pa.array(ts.dt.microsecond % 10**3))\n+    assert pc.nanosecond(tsa).equals(pa.array(ts.dt.nanosecond))\n+    assert pc.subsecond(tsa).equals(pa.array(subseconds))\n+\n+\n+@pytest.mark.pandas\n+def test_extract_datetime_components():\n+    # TODO: see https://github.com/pandas-dev/pandas/issues/41834\n+    # \"1899-01-01T00:59:20.001001001\"\n\nReview comment:\n       Probably best to remove this since I believe pandas is wrong and it's not really our TODO.\r\n   It's kinda hard to confirm who is right.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-14T21:32:28.135+0000",
                    "updated": "2021-06-14T21:32:28.135+0000",
                    "started": "2021-06-14T21:32:28.134+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "610950",
                    "issueId": "13382227"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382227/worklog/611291",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #10457:\nURL: https://github.com/apache/arrow/pull/10457#discussion_r651752002\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal_test.cc\n##########\n@@ -143,39 +142,202 @@ TEST(ScalarTemporalTest, TestTemporalComponentExtractionWithDifferentUnits) {\n     CheckScalarUnary(\"quarter\", unit, times, int64(), quarter);\n     CheckScalarUnary(\"hour\", unit, times, int64(), hour);\n     CheckScalarUnary(\"minute\", unit, times, int64(), minute);\n-    CheckScalarUnary(\"second\", unit, times, float64(), second);\n+    CheckScalarUnary(\"second\", unit, times, int64(), second);\n     CheckScalarUnary(\"millisecond\", unit, times, int64(), zeros);\n     CheckScalarUnary(\"microsecond\", unit, times, int64(), zeros);\n     CheckScalarUnary(\"nanosecond\", unit, times, int64(), zeros);\n     CheckScalarUnary(\"subsecond\", unit, times, float64(), zeros);\n   }\n }\n \n-TEST(ScalarTemporalTest, TestZonedTemporalComponentExtraction) {\n-  std::string timezone = \"Asia/Kolkata\";\n-  const char* times = R\"([\"1970-01-01T00:00:59\", null])\";\n+TEST(ScalarTemporalTest, TestZoned1) {\n+  const char* times =\n+      R\"([\"1970-01-01T00:00:59.123456789\",\"2000-02-29T23:23:23.999999999\",\n+          \"1899-01-01T00:59:20.001001001\",\"2033-05-18T03:33:20.000000000\",\n+          \"2020-01-01T01:05:05.001\", \"2019-12-31T02:10:10.002\",\n+          \"2019-12-30T03:15:15.003\", \"2009-12-31T04:20:20.004132\",\n+          \"2010-01-01T05:25:25.005321\", \"2010-01-03T06:30:30.006163\",\n+          \"2010-01-04T07:35:35\", \"2006-01-01T08:40:40\", \"2005-12-31T09:45:45\",\n+          \"2008-12-28\", \"2008-12-29\", \"2012-01-01 01:02:03\", null])\";\n+  auto unit = timestamp(TimeUnit::NANO, \"Pacific/Marquesas\");\n+  auto iso_calendar_type =\n+      struct_({field(\"iso_year\", int64()), field(\"iso_week\", int64()),\n+               field(\"iso_day_of_week\", int64())});\n+  auto year =\n+      \"[1969, 2000, 1898, 2033, 2019, 2019, 2019, 2009, 2009, 2010, 2010, 2005, 2005, \"\n+      \"2008, 2008, 2011, null]\";\n+  auto month = \"[12, 2, 12, 5, 12, 12, 12, 12, 12, 1, 1, 12, 12, 12, 12, 12, null]\";\n+  auto day = \"[31, 29, 31, 17, 31, 30, 29, 30, 31, 2, 3, 31, 31, 27, 28, 31, null]\";\n+  auto day_of_week = \"[2, 1, 5, 1, 1, 0, 6, 2, 3, 5, 6, 5, 5, 5, 6, 5, null]\";\n+  auto day_of_year =\n+      \"[365, 60, 365, 137, 365, 364, 363, 364, 365, 2, 3, 365, 365, 362, 363, 365, null]\";\n+  auto iso_year =\n+      \"[1970, 2000, 1898, 2033, 2020, 2020, 2019, 2009, 2009, 2009, 2009, 2005, 2005, \"\n+      \"2008, 2008, 2011, null]\";\n+  auto iso_week = \"[1, 9, 52, 20, 1, 1, 52, 53, 53, 53, 53, 52, 52, 52, 52, 52, null]\";\n+  auto iso_calendar =\n+      ArrayFromJSON(iso_calendar_type,\n+                    R\"([{\"iso_year\": 1970, \"iso_week\": 1, \"iso_day_of_week\": 3},\n+                        {\"iso_year\": 2000, \"iso_week\": 9, \"iso_day_of_week\": 2},\n+                        {\"iso_year\": 1898, \"iso_week\": 52, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2033, \"iso_week\": 20, \"iso_day_of_week\": 2},\n+                        {\"iso_year\": 2020, \"iso_week\": 1, \"iso_day_of_week\": 2},\n+                        {\"iso_year\": 2020, \"iso_week\": 1, \"iso_day_of_week\": 1},\n+                        {\"iso_year\": 2019, \"iso_week\": 52, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 3},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 4},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2005, \"iso_week\": 52, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2005, \"iso_week\": 52, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2008, \"iso_week\": 52, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2008, \"iso_week\": 52, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2011, \"iso_week\": 52, \"iso_day_of_week\": 6}, null])\");\n+  auto quarter = \"[4, 1, 4, 2, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 4, null]\";\n+  auto hour = \"[14, 13, 15, 18, 15, 16, 17, 18, 19, 21, 22, 23, 0, 14, 14, 15, null]\";\n+  auto minute = \"[30, 53, 41, 3, 35, 40, 45, 50, 55, 0, 5, 10, 15, 30, 30, 32, null]\";\n+  auto second = \"[59, 23, 20, 20, 5, 10, 15, 20, 25, 30, 35, 40, 45, 0, 0, 3, null]\";\n+  auto millisecond = \"[123, 999, 1, 0, 1, 2, 3, 4, 5, 6, 0, 0, 0, 0, 0, 0, null]\";\n+  auto microsecond = \"[456, 999, 1, 0, 0, 0, 0, 132, 321, 163, 0, 0, 0, 0, 0, 0, null]\";\n+  auto nanosecond = \"[789, 999, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, null]\";\n+  auto subsecond =\n+      \"[0.123456789, 0.999999999, 0.001001001, 0.0, 0.001, 0.002, 0.003, 0.004132, \"\n+      \"0.005321, 0.006163, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, null]\";\n \n-  for (auto u : internal::AllTimeUnits()) {\n-    auto unit = timestamp(u, timezone);\n-    auto timestamps = ArrayFromJSON(unit, times);\n-\n-    ASSERT_RAISES(Invalid, Year(timestamps));\n-    ASSERT_RAISES(Invalid, Month(timestamps));\n-    ASSERT_RAISES(Invalid, Day(timestamps));\n-    ASSERT_RAISES(Invalid, DayOfWeek(timestamps));\n-    ASSERT_RAISES(Invalid, DayOfYear(timestamps));\n-    ASSERT_RAISES(Invalid, ISOYear(timestamps));\n-    ASSERT_RAISES(Invalid, ISOWeek(timestamps));\n-    ASSERT_RAISES(Invalid, ISOCalendar(timestamps));\n-    ASSERT_RAISES(Invalid, Quarter(timestamps));\n-    ASSERT_RAISES(Invalid, Hour(timestamps));\n-    ASSERT_RAISES(Invalid, Minute(timestamps));\n-    ASSERT_RAISES(Invalid, Second(timestamps));\n-    ASSERT_RAISES(Invalid, Millisecond(timestamps));\n-    ASSERT_RAISES(Invalid, Microsecond(timestamps));\n-    ASSERT_RAISES(Invalid, Nanosecond(timestamps));\n-    ASSERT_RAISES(Invalid, Subsecond(timestamps));\n-  }\n+  CheckScalarUnary(\"year\", unit, times, int64(), year);\n+  CheckScalarUnary(\"month\", unit, times, int64(), month);\n+  CheckScalarUnary(\"day\", unit, times, int64(), day);\n+  CheckScalarUnary(\"day_of_week\", unit, times, int64(), day_of_week);\n+  CheckScalarUnary(\"day_of_year\", unit, times, int64(), day_of_year);\n+  CheckScalarUnary(\"iso_year\", unit, times, int64(), iso_year);\n+  CheckScalarUnary(\"iso_week\", unit, times, int64(), iso_week);\n+  CheckScalarUnary(\"iso_calendar\", ArrayFromJSON(unit, times), iso_calendar);\n+  CheckScalarUnary(\"quarter\", unit, times, int64(), quarter);\n+  CheckScalarUnary(\"hour\", unit, times, int64(), hour);\n+  CheckScalarUnary(\"minute\", unit, times, int64(), minute);\n+  CheckScalarUnary(\"second\", unit, times, int64(), second);\n+  CheckScalarUnary(\"millisecond\", unit, times, int64(), millisecond);\n+  CheckScalarUnary(\"microsecond\", unit, times, int64(), microsecond);\n+  CheckScalarUnary(\"nanosecond\", unit, times, int64(), nanosecond);\n+  CheckScalarUnary(\"subsecond\", unit, times, float64(), subsecond);\n+}\n+\n+TEST(ScalarTemporalTest, TestZoned2) {\n+  const char* times =\n+      R\"([\"1970-01-01T00:00:59.123456789\",\"2000-02-29T23:23:23.999999999\",\n+          \"1899-01-01T00:59:20.001001001\",\"2033-05-18T03:33:20.000000000\",\n+          \"2020-01-01T01:05:05.001\", \"2019-12-31T02:10:10.002\",\n+          \"2019-12-30T03:15:15.003\", \"2009-12-31T04:20:20.004132\",\n+          \"2010-01-01T05:25:25.005321\", \"2010-01-03T06:30:30.006163\",\n+          \"2010-01-04T07:35:35\", \"2006-01-01T08:40:40\", \"2005-12-31T09:45:45\",\n+          \"2008-12-28\", \"2008-12-29\", \"2012-01-01 01:02:03\", null])\";\n+  auto unit = timestamp(TimeUnit::NANO, \"Australia/Broken_Hill\");\n+  auto iso_calendar_type =\n+      struct_({field(\"iso_year\", int64()), field(\"iso_week\", int64()),\n+               field(\"iso_day_of_week\", int64())});\n+  auto year =\n+      \"[1970, 2000, 1899, 2033, 2020, 2019, 2019, 2009, 2010, 2010, 2010, 2006, 2005, \"\n+      \"2008, 2008, 2012, null]\";\n+  auto month = \"[1, 3, 1, 5, 1, 12, 12, 12, 1, 1, 1, 1, 12, 12, 12, 1, null]\";\n+  auto day = \"[1, 1, 1, 18, 1, 31, 30, 31, 1, 3, 4, 1, 31, 28, 29, 1, null]\";\n+  auto day_of_week = \"[3, 2, 6, 2, 2, 1, 0, 3, 4, 6, 0, 6, 5, 6, 0, 6, null]\";\n+  auto day_of_year =\n+      \"[1, 61, 1, 138, 1, 365, 364, 365, 1, 3, 4, 1, 365, 363, 364, 1, null]\";\n+  auto iso_year =\n+      \"[1970, 2000, 1898, 2033, 2020, 2020, 2020, 2009, 2009, 2009, 2010, 2005, 2005, \"\n+      \"2008, 2009, 2011, null]\";\n+  auto iso_week = \"[1, 9, 52, 20, 1, 1, 1, 53, 53, 53, 1, 52, 52, 52, 1, 52, null]\";\n+  auto iso_calendar =\n+      ArrayFromJSON(iso_calendar_type,\n+                    R\"([{\"iso_year\": 1970, \"iso_week\": 1, \"iso_day_of_week\": 4},\n+                        {\"iso_year\": 2000, \"iso_week\": 9, \"iso_day_of_week\": 3},\n+                        {\"iso_year\": 1898, \"iso_week\": 52, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2033, \"iso_week\": 20, \"iso_day_of_week\": 3},\n+                        {\"iso_year\": 2020, \"iso_week\": 1, \"iso_day_of_week\": 3},\n+                        {\"iso_year\": 2020, \"iso_week\": 1, \"iso_day_of_week\": 2},\n+                        {\"iso_year\": 2020, \"iso_week\": 1, \"iso_day_of_week\": 1},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 4},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 5},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2010, \"iso_week\": 1, \"iso_day_of_week\": 1},\n+                        {\"iso_year\": 2005, \"iso_week\": 52, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2005, \"iso_week\": 52, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2008, \"iso_week\": 52, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2009, \"iso_week\": 1, \"iso_day_of_week\": 1},\n+                        {\"iso_year\": 2011, \"iso_week\": 52, \"iso_day_of_week\": 7}, null])\");\n+  auto quarter = \"[1, 1, 1, 2, 1, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 1, null]\";\n+  auto hour = \"[9, 9, 9, 13, 11, 12, 13, 14, 15, 17, 18, 19, 20, 10, 10, 11, null]\";\n+  auto minute = \"[30, 53, 59, 3, 35, 40, 45, 50, 55, 0, 5, 10, 15, 30, 30, 32, null]\";\n+  auto second = \"[59, 23, 20, 20, 5, 10, 15, 20, 25, 30, 35, 40, 45, 0, 0, 3, null]\";\n+  auto millisecond = \"[123, 999, 1, 0, 1, 2, 3, 4, 5, 6, 0, 0, 0, 0, 0, 0, null]\";\n+  auto microsecond = \"[456, 999, 1, 0, 0, 0, 0, 132, 321, 163, 0, 0, 0, 0, 0, 0, null]\";\n+  auto nanosecond = \"[789, 999, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, null]\";\n+  auto subsecond =\n+      \"[0.123456789, 0.999999999, 0.001001001, 0.0, 0.001, 0.002, 0.003, 0.004132, \"\n+      \"0.005321, 0.006163, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, null]\";\n+\n+  CheckScalarUnary(\"year\", unit, times, int64(), year);\n+  CheckScalarUnary(\"month\", unit, times, int64(), month);\n+  CheckScalarUnary(\"day\", unit, times, int64(), day);\n+  CheckScalarUnary(\"day_of_week\", unit, times, int64(), day_of_week);\n+  CheckScalarUnary(\"day_of_year\", unit, times, int64(), day_of_year);\n+  CheckScalarUnary(\"iso_year\", unit, times, int64(), iso_year);\n+  CheckScalarUnary(\"iso_week\", unit, times, int64(), iso_week);\n+  CheckScalarUnary(\"iso_calendar\", ArrayFromJSON(unit, times), iso_calendar);\n+  CheckScalarUnary(\"quarter\", unit, times, int64(), quarter);\n+  CheckScalarUnary(\"hour\", unit, times, int64(), hour);\n+  CheckScalarUnary(\"minute\", unit, times, int64(), minute);\n+  CheckScalarUnary(\"second\", unit, times, int64(), second);\n+  CheckScalarUnary(\"millisecond\", unit, times, int64(), millisecond);\n+  CheckScalarUnary(\"microsecond\", unit, times, int64(), microsecond);\n+  CheckScalarUnary(\"nanosecond\", unit, times, int64(), nanosecond);\n+  CheckScalarUnary(\"subsecond\", unit, times, float64(), subsecond);\n+}\n+\n+TEST(ScalarTemporalTest, TestOverflow) {\n+  const char* times = R\"([\"1677-09-20T00:00:59.123456789\", \"2262-04-13T23:23:23.999999999\"])\";\n+\n+  auto unit = timestamp(TimeUnit::NANO);\n+  auto iso_calendar_type =\n+      struct_({field(\"iso_year\", int64()), field(\"iso_week\", int64()),\n+               field(\"iso_day_of_week\", int64())});\n+\n+  auto year = \"[2262, 1677]\";\n+  auto month = \"[4, 9]\";\n+  auto day = \"[10, 22]\";\n+  auto day_of_week = \"[3, 2]\";\n+  auto day_of_year = \"[100, 265]\";\n+  auto iso_year = \"[2262, 1677]\";\n+  auto iso_week = \"[15, 38]\";\n+  auto iso_calendar =\n+      ArrayFromJSON(iso_calendar_type,\n+                    R\"([{\"iso_year\": 2262, \"iso_week\": 15, \"iso_day_of_week\": 4},\n+                        {\"iso_year\": 1677, \"iso_week\": 38, \"iso_day_of_week\": 3}])\");\n+  auto quarter = \"[2, 3]\";\n+  auto hour = \"[23, 23]\";\n+  auto minute = \"[35, 48]\";\n+  auto second = \"[32, 50]\";\n+  auto millisecond = \"[833, 290]\";\n+  auto microsecond = \"[8, 448]\";\n+  auto nanosecond = \"[405, 383]\";\n+  auto subsecond = \"[0.833008405, 0.290448383]\";\n+\n+  CheckScalarUnary(\"year\", unit, times, int64(), year);\n+  CheckScalarUnary(\"month\", unit, times, int64(), month);\n+  CheckScalarUnary(\"day\", unit, times, int64(), day);\n+  CheckScalarUnary(\"day_of_week\", unit, times, int64(), day_of_week);\n+  CheckScalarUnary(\"day_of_year\", unit, times, int64(), day_of_year);\n+  CheckScalarUnary(\"iso_year\", unit, times, int64(), iso_year);\n+  CheckScalarUnary(\"iso_week\", unit, times, int64(), iso_week);\n+  CheckScalarUnary(\"iso_calendar\", ArrayFromJSON(unit, times), iso_calendar);\n+  CheckScalarUnary(\"quarter\", unit, times, int64(), quarter);\n+  CheckScalarUnary(\"hour\", unit, times, int64(), hour);\n+  CheckScalarUnary(\"minute\", unit, times, int64(), minute);\n+  CheckScalarUnary(\"second\", unit, times, int64(), second);\n+  CheckScalarUnary(\"millisecond\", unit, times, int64(), millisecond);\n+  CheckScalarUnary(\"microsecond\", unit, times, int64(), microsecond);\n+  CheckScalarUnary(\"nanosecond\", unit, times, int64(), nanosecond);\n+  CheckScalarUnary(\"subsecond\", unit, times, float64(), subsecond);\n }\n\nReview comment:\n       Yes, thanks!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T12:43:43.328+0000",
                    "updated": "2021-06-15T12:43:43.328+0000",
                    "started": "2021-06-15T12:43:43.328+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611291",
                    "issueId": "13382227"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382227/worklog/611292",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #10457:\nURL: https://github.com/apache/arrow/pull/10457#discussion_r651752620\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal_test.cc\n##########\n@@ -143,39 +142,202 @@ TEST(ScalarTemporalTest, TestTemporalComponentExtractionWithDifferentUnits) {\n     CheckScalarUnary(\"quarter\", unit, times, int64(), quarter);\n     CheckScalarUnary(\"hour\", unit, times, int64(), hour);\n     CheckScalarUnary(\"minute\", unit, times, int64(), minute);\n-    CheckScalarUnary(\"second\", unit, times, float64(), second);\n+    CheckScalarUnary(\"second\", unit, times, int64(), second);\n     CheckScalarUnary(\"millisecond\", unit, times, int64(), zeros);\n     CheckScalarUnary(\"microsecond\", unit, times, int64(), zeros);\n     CheckScalarUnary(\"nanosecond\", unit, times, int64(), zeros);\n     CheckScalarUnary(\"subsecond\", unit, times, float64(), zeros);\n   }\n }\n \n-TEST(ScalarTemporalTest, TestZonedTemporalComponentExtraction) {\n-  std::string timezone = \"Asia/Kolkata\";\n-  const char* times = R\"([\"1970-01-01T00:00:59\", null])\";\n+TEST(ScalarTemporalTest, TestZoned1) {\n+  const char* times =\n+      R\"([\"1970-01-01T00:00:59.123456789\",\"2000-02-29T23:23:23.999999999\",\n+          \"1899-01-01T00:59:20.001001001\",\"2033-05-18T03:33:20.000000000\",\n+          \"2020-01-01T01:05:05.001\", \"2019-12-31T02:10:10.002\",\n+          \"2019-12-30T03:15:15.003\", \"2009-12-31T04:20:20.004132\",\n+          \"2010-01-01T05:25:25.005321\", \"2010-01-03T06:30:30.006163\",\n+          \"2010-01-04T07:35:35\", \"2006-01-01T08:40:40\", \"2005-12-31T09:45:45\",\n+          \"2008-12-28\", \"2008-12-29\", \"2012-01-01 01:02:03\", null])\";\n+  auto unit = timestamp(TimeUnit::NANO, \"Pacific/Marquesas\");\n+  auto iso_calendar_type =\n+      struct_({field(\"iso_year\", int64()), field(\"iso_week\", int64()),\n+               field(\"iso_day_of_week\", int64())});\n+  auto year =\n+      \"[1969, 2000, 1898, 2033, 2019, 2019, 2019, 2009, 2009, 2010, 2010, 2005, 2005, \"\n+      \"2008, 2008, 2011, null]\";\n+  auto month = \"[12, 2, 12, 5, 12, 12, 12, 12, 12, 1, 1, 12, 12, 12, 12, 12, null]\";\n+  auto day = \"[31, 29, 31, 17, 31, 30, 29, 30, 31, 2, 3, 31, 31, 27, 28, 31, null]\";\n+  auto day_of_week = \"[2, 1, 5, 1, 1, 0, 6, 2, 3, 5, 6, 5, 5, 5, 6, 5, null]\";\n+  auto day_of_year =\n+      \"[365, 60, 365, 137, 365, 364, 363, 364, 365, 2, 3, 365, 365, 362, 363, 365, null]\";\n+  auto iso_year =\n+      \"[1970, 2000, 1898, 2033, 2020, 2020, 2019, 2009, 2009, 2009, 2009, 2005, 2005, \"\n+      \"2008, 2008, 2011, null]\";\n+  auto iso_week = \"[1, 9, 52, 20, 1, 1, 52, 53, 53, 53, 53, 52, 52, 52, 52, 52, null]\";\n+  auto iso_calendar =\n+      ArrayFromJSON(iso_calendar_type,\n+                    R\"([{\"iso_year\": 1970, \"iso_week\": 1, \"iso_day_of_week\": 3},\n+                        {\"iso_year\": 2000, \"iso_week\": 9, \"iso_day_of_week\": 2},\n+                        {\"iso_year\": 1898, \"iso_week\": 52, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2033, \"iso_week\": 20, \"iso_day_of_week\": 2},\n+                        {\"iso_year\": 2020, \"iso_week\": 1, \"iso_day_of_week\": 2},\n+                        {\"iso_year\": 2020, \"iso_week\": 1, \"iso_day_of_week\": 1},\n+                        {\"iso_year\": 2019, \"iso_week\": 52, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 3},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 4},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2005, \"iso_week\": 52, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2005, \"iso_week\": 52, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2008, \"iso_week\": 52, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2008, \"iso_week\": 52, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2011, \"iso_week\": 52, \"iso_day_of_week\": 6}, null])\");\n+  auto quarter = \"[4, 1, 4, 2, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 4, null]\";\n+  auto hour = \"[14, 13, 15, 18, 15, 16, 17, 18, 19, 21, 22, 23, 0, 14, 14, 15, null]\";\n+  auto minute = \"[30, 53, 41, 3, 35, 40, 45, 50, 55, 0, 5, 10, 15, 30, 30, 32, null]\";\n+  auto second = \"[59, 23, 20, 20, 5, 10, 15, 20, 25, 30, 35, 40, 45, 0, 0, 3, null]\";\n+  auto millisecond = \"[123, 999, 1, 0, 1, 2, 3, 4, 5, 6, 0, 0, 0, 0, 0, 0, null]\";\n+  auto microsecond = \"[456, 999, 1, 0, 0, 0, 0, 132, 321, 163, 0, 0, 0, 0, 0, 0, null]\";\n+  auto nanosecond = \"[789, 999, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, null]\";\n+  auto subsecond =\n+      \"[0.123456789, 0.999999999, 0.001001001, 0.0, 0.001, 0.002, 0.003, 0.004132, \"\n+      \"0.005321, 0.006163, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, null]\";\n \n-  for (auto u : internal::AllTimeUnits()) {\n-    auto unit = timestamp(u, timezone);\n-    auto timestamps = ArrayFromJSON(unit, times);\n-\n-    ASSERT_RAISES(Invalid, Year(timestamps));\n-    ASSERT_RAISES(Invalid, Month(timestamps));\n-    ASSERT_RAISES(Invalid, Day(timestamps));\n-    ASSERT_RAISES(Invalid, DayOfWeek(timestamps));\n-    ASSERT_RAISES(Invalid, DayOfYear(timestamps));\n-    ASSERT_RAISES(Invalid, ISOYear(timestamps));\n-    ASSERT_RAISES(Invalid, ISOWeek(timestamps));\n-    ASSERT_RAISES(Invalid, ISOCalendar(timestamps));\n-    ASSERT_RAISES(Invalid, Quarter(timestamps));\n-    ASSERT_RAISES(Invalid, Hour(timestamps));\n-    ASSERT_RAISES(Invalid, Minute(timestamps));\n-    ASSERT_RAISES(Invalid, Second(timestamps));\n-    ASSERT_RAISES(Invalid, Millisecond(timestamps));\n-    ASSERT_RAISES(Invalid, Microsecond(timestamps));\n-    ASSERT_RAISES(Invalid, Nanosecond(timestamps));\n-    ASSERT_RAISES(Invalid, Subsecond(timestamps));\n-  }\n+  CheckScalarUnary(\"year\", unit, times, int64(), year);\n+  CheckScalarUnary(\"month\", unit, times, int64(), month);\n+  CheckScalarUnary(\"day\", unit, times, int64(), day);\n+  CheckScalarUnary(\"day_of_week\", unit, times, int64(), day_of_week);\n+  CheckScalarUnary(\"day_of_year\", unit, times, int64(), day_of_year);\n+  CheckScalarUnary(\"iso_year\", unit, times, int64(), iso_year);\n+  CheckScalarUnary(\"iso_week\", unit, times, int64(), iso_week);\n+  CheckScalarUnary(\"iso_calendar\", ArrayFromJSON(unit, times), iso_calendar);\n+  CheckScalarUnary(\"quarter\", unit, times, int64(), quarter);\n+  CheckScalarUnary(\"hour\", unit, times, int64(), hour);\n+  CheckScalarUnary(\"minute\", unit, times, int64(), minute);\n+  CheckScalarUnary(\"second\", unit, times, int64(), second);\n+  CheckScalarUnary(\"millisecond\", unit, times, int64(), millisecond);\n+  CheckScalarUnary(\"microsecond\", unit, times, int64(), microsecond);\n+  CheckScalarUnary(\"nanosecond\", unit, times, int64(), nanosecond);\n+  CheckScalarUnary(\"subsecond\", unit, times, float64(), subsecond);\n+}\n+\n+TEST(ScalarTemporalTest, TestZoned2) {\n+  const char* times =\n+      R\"([\"1970-01-01T00:00:59.123456789\",\"2000-02-29T23:23:23.999999999\",\n+          \"1899-01-01T00:59:20.001001001\",\"2033-05-18T03:33:20.000000000\",\n+          \"2020-01-01T01:05:05.001\", \"2019-12-31T02:10:10.002\",\n+          \"2019-12-30T03:15:15.003\", \"2009-12-31T04:20:20.004132\",\n+          \"2010-01-01T05:25:25.005321\", \"2010-01-03T06:30:30.006163\",\n+          \"2010-01-04T07:35:35\", \"2006-01-01T08:40:40\", \"2005-12-31T09:45:45\",\n+          \"2008-12-28\", \"2008-12-29\", \"2012-01-01 01:02:03\", null])\";\n+  auto unit = timestamp(TimeUnit::NANO, \"Australia/Broken_Hill\");\n+  auto iso_calendar_type =\n+      struct_({field(\"iso_year\", int64()), field(\"iso_week\", int64()),\n+               field(\"iso_day_of_week\", int64())});\n+  auto year =\n+      \"[1970, 2000, 1899, 2033, 2020, 2019, 2019, 2009, 2010, 2010, 2010, 2006, 2005, \"\n+      \"2008, 2008, 2012, null]\";\n+  auto month = \"[1, 3, 1, 5, 1, 12, 12, 12, 1, 1, 1, 1, 12, 12, 12, 1, null]\";\n+  auto day = \"[1, 1, 1, 18, 1, 31, 30, 31, 1, 3, 4, 1, 31, 28, 29, 1, null]\";\n+  auto day_of_week = \"[3, 2, 6, 2, 2, 1, 0, 3, 4, 6, 0, 6, 5, 6, 0, 6, null]\";\n+  auto day_of_year =\n+      \"[1, 61, 1, 138, 1, 365, 364, 365, 1, 3, 4, 1, 365, 363, 364, 1, null]\";\n+  auto iso_year =\n+      \"[1970, 2000, 1898, 2033, 2020, 2020, 2020, 2009, 2009, 2009, 2010, 2005, 2005, \"\n+      \"2008, 2009, 2011, null]\";\n+  auto iso_week = \"[1, 9, 52, 20, 1, 1, 1, 53, 53, 53, 1, 52, 52, 52, 1, 52, null]\";\n+  auto iso_calendar =\n+      ArrayFromJSON(iso_calendar_type,\n+                    R\"([{\"iso_year\": 1970, \"iso_week\": 1, \"iso_day_of_week\": 4},\n+                        {\"iso_year\": 2000, \"iso_week\": 9, \"iso_day_of_week\": 3},\n+                        {\"iso_year\": 1898, \"iso_week\": 52, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2033, \"iso_week\": 20, \"iso_day_of_week\": 3},\n+                        {\"iso_year\": 2020, \"iso_week\": 1, \"iso_day_of_week\": 3},\n+                        {\"iso_year\": 2020, \"iso_week\": 1, \"iso_day_of_week\": 2},\n+                        {\"iso_year\": 2020, \"iso_week\": 1, \"iso_day_of_week\": 1},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 4},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 5},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2010, \"iso_week\": 1, \"iso_day_of_week\": 1},\n+                        {\"iso_year\": 2005, \"iso_week\": 52, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2005, \"iso_week\": 52, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2008, \"iso_week\": 52, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2009, \"iso_week\": 1, \"iso_day_of_week\": 1},\n+                        {\"iso_year\": 2011, \"iso_week\": 52, \"iso_day_of_week\": 7}, null])\");\n+  auto quarter = \"[1, 1, 1, 2, 1, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 1, null]\";\n+  auto hour = \"[9, 9, 9, 13, 11, 12, 13, 14, 15, 17, 18, 19, 20, 10, 10, 11, null]\";\n+  auto minute = \"[30, 53, 59, 3, 35, 40, 45, 50, 55, 0, 5, 10, 15, 30, 30, 32, null]\";\n+  auto second = \"[59, 23, 20, 20, 5, 10, 15, 20, 25, 30, 35, 40, 45, 0, 0, 3, null]\";\n+  auto millisecond = \"[123, 999, 1, 0, 1, 2, 3, 4, 5, 6, 0, 0, 0, 0, 0, 0, null]\";\n+  auto microsecond = \"[456, 999, 1, 0, 0, 0, 0, 132, 321, 163, 0, 0, 0, 0, 0, 0, null]\";\n+  auto nanosecond = \"[789, 999, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, null]\";\n+  auto subsecond =\n+      \"[0.123456789, 0.999999999, 0.001001001, 0.0, 0.001, 0.002, 0.003, 0.004132, \"\n+      \"0.005321, 0.006163, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, null]\";\n+\n+  CheckScalarUnary(\"year\", unit, times, int64(), year);\n+  CheckScalarUnary(\"month\", unit, times, int64(), month);\n+  CheckScalarUnary(\"day\", unit, times, int64(), day);\n+  CheckScalarUnary(\"day_of_week\", unit, times, int64(), day_of_week);\n+  CheckScalarUnary(\"day_of_year\", unit, times, int64(), day_of_year);\n+  CheckScalarUnary(\"iso_year\", unit, times, int64(), iso_year);\n+  CheckScalarUnary(\"iso_week\", unit, times, int64(), iso_week);\n+  CheckScalarUnary(\"iso_calendar\", ArrayFromJSON(unit, times), iso_calendar);\n+  CheckScalarUnary(\"quarter\", unit, times, int64(), quarter);\n+  CheckScalarUnary(\"hour\", unit, times, int64(), hour);\n+  CheckScalarUnary(\"minute\", unit, times, int64(), minute);\n+  CheckScalarUnary(\"second\", unit, times, int64(), second);\n+  CheckScalarUnary(\"millisecond\", unit, times, int64(), millisecond);\n+  CheckScalarUnary(\"microsecond\", unit, times, int64(), microsecond);\n+  CheckScalarUnary(\"nanosecond\", unit, times, int64(), nanosecond);\n+  CheckScalarUnary(\"subsecond\", unit, times, float64(), subsecond);\n+}\n+\n+TEST(ScalarTemporalTest, TestOverflow) {\n+  const char* times = R\"([\"1677-09-20T00:00:59.123456789\", \"2262-04-13T23:23:23.999999999\"])\";\n+\n+  auto unit = timestamp(TimeUnit::NANO);\n+  auto iso_calendar_type =\n+      struct_({field(\"iso_year\", int64()), field(\"iso_week\", int64()),\n+               field(\"iso_day_of_week\", int64())});\n+\n+  auto year = \"[2262, 1677]\";\n+  auto month = \"[4, 9]\";\n+  auto day = \"[10, 22]\";\n+  auto day_of_week = \"[3, 2]\";\n+  auto day_of_year = \"[100, 265]\";\n+  auto iso_year = \"[2262, 1677]\";\n+  auto iso_week = \"[15, 38]\";\n+  auto iso_calendar =\n+      ArrayFromJSON(iso_calendar_type,\n+                    R\"([{\"iso_year\": 2262, \"iso_week\": 15, \"iso_day_of_week\": 4},\n+                        {\"iso_year\": 1677, \"iso_week\": 38, \"iso_day_of_week\": 3}])\");\n+  auto quarter = \"[2, 3]\";\n+  auto hour = \"[23, 23]\";\n+  auto minute = \"[35, 48]\";\n+  auto second = \"[32, 50]\";\n+  auto millisecond = \"[833, 290]\";\n+  auto microsecond = \"[8, 448]\";\n+  auto nanosecond = \"[405, 383]\";\n+  auto subsecond = \"[0.833008405, 0.290448383]\";\n+\n+  CheckScalarUnary(\"year\", unit, times, int64(), year);\n+  CheckScalarUnary(\"month\", unit, times, int64(), month);\n+  CheckScalarUnary(\"day\", unit, times, int64(), day);\n+  CheckScalarUnary(\"day_of_week\", unit, times, int64(), day_of_week);\n+  CheckScalarUnary(\"day_of_year\", unit, times, int64(), day_of_year);\n+  CheckScalarUnary(\"iso_year\", unit, times, int64(), iso_year);\n+  CheckScalarUnary(\"iso_week\", unit, times, int64(), iso_week);\n+  CheckScalarUnary(\"iso_calendar\", ArrayFromJSON(unit, times), iso_calendar);\n+  CheckScalarUnary(\"quarter\", unit, times, int64(), quarter);\n+  CheckScalarUnary(\"hour\", unit, times, int64(), hour);\n+  CheckScalarUnary(\"minute\", unit, times, int64(), minute);\n+  CheckScalarUnary(\"second\", unit, times, int64(), second);\n+  CheckScalarUnary(\"millisecond\", unit, times, int64(), millisecond);\n+  CheckScalarUnary(\"microsecond\", unit, times, int64(), microsecond);\n+  CheckScalarUnary(\"nanosecond\", unit, times, int64(), nanosecond);\n+  CheckScalarUnary(\"subsecond\", unit, times, float64(), subsecond);\n }\n\nReview comment:\n       Apart from that you should be using a different unit as NANO? \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T12:44:26.735+0000",
                    "updated": "2021-06-15T12:44:26.735+0000",
                    "started": "2021-06-15T12:44:26.735+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611292",
                    "issueId": "13382227"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382227/worklog/611313",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on a change in pull request #10457:\nURL: https://github.com/apache/arrow/pull/10457#discussion_r651779895\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal_test.cc\n##########\n@@ -143,39 +142,202 @@ TEST(ScalarTemporalTest, TestTemporalComponentExtractionWithDifferentUnits) {\n     CheckScalarUnary(\"quarter\", unit, times, int64(), quarter);\n     CheckScalarUnary(\"hour\", unit, times, int64(), hour);\n     CheckScalarUnary(\"minute\", unit, times, int64(), minute);\n-    CheckScalarUnary(\"second\", unit, times, float64(), second);\n+    CheckScalarUnary(\"second\", unit, times, int64(), second);\n     CheckScalarUnary(\"millisecond\", unit, times, int64(), zeros);\n     CheckScalarUnary(\"microsecond\", unit, times, int64(), zeros);\n     CheckScalarUnary(\"nanosecond\", unit, times, int64(), zeros);\n     CheckScalarUnary(\"subsecond\", unit, times, float64(), zeros);\n   }\n }\n \n-TEST(ScalarTemporalTest, TestZonedTemporalComponentExtraction) {\n-  std::string timezone = \"Asia/Kolkata\";\n-  const char* times = R\"([\"1970-01-01T00:00:59\", null])\";\n+TEST(ScalarTemporalTest, TestZoned1) {\n+  const char* times =\n+      R\"([\"1970-01-01T00:00:59.123456789\",\"2000-02-29T23:23:23.999999999\",\n+          \"1899-01-01T00:59:20.001001001\",\"2033-05-18T03:33:20.000000000\",\n+          \"2020-01-01T01:05:05.001\", \"2019-12-31T02:10:10.002\",\n+          \"2019-12-30T03:15:15.003\", \"2009-12-31T04:20:20.004132\",\n+          \"2010-01-01T05:25:25.005321\", \"2010-01-03T06:30:30.006163\",\n+          \"2010-01-04T07:35:35\", \"2006-01-01T08:40:40\", \"2005-12-31T09:45:45\",\n+          \"2008-12-28\", \"2008-12-29\", \"2012-01-01 01:02:03\", null])\";\n+  auto unit = timestamp(TimeUnit::NANO, \"Pacific/Marquesas\");\n+  auto iso_calendar_type =\n+      struct_({field(\"iso_year\", int64()), field(\"iso_week\", int64()),\n+               field(\"iso_day_of_week\", int64())});\n+  auto year =\n+      \"[1969, 2000, 1898, 2033, 2019, 2019, 2019, 2009, 2009, 2010, 2010, 2005, 2005, \"\n+      \"2008, 2008, 2011, null]\";\n+  auto month = \"[12, 2, 12, 5, 12, 12, 12, 12, 12, 1, 1, 12, 12, 12, 12, 12, null]\";\n+  auto day = \"[31, 29, 31, 17, 31, 30, 29, 30, 31, 2, 3, 31, 31, 27, 28, 31, null]\";\n+  auto day_of_week = \"[2, 1, 5, 1, 1, 0, 6, 2, 3, 5, 6, 5, 5, 5, 6, 5, null]\";\n+  auto day_of_year =\n+      \"[365, 60, 365, 137, 365, 364, 363, 364, 365, 2, 3, 365, 365, 362, 363, 365, null]\";\n+  auto iso_year =\n+      \"[1970, 2000, 1898, 2033, 2020, 2020, 2019, 2009, 2009, 2009, 2009, 2005, 2005, \"\n+      \"2008, 2008, 2011, null]\";\n+  auto iso_week = \"[1, 9, 52, 20, 1, 1, 52, 53, 53, 53, 53, 52, 52, 52, 52, 52, null]\";\n+  auto iso_calendar =\n+      ArrayFromJSON(iso_calendar_type,\n+                    R\"([{\"iso_year\": 1970, \"iso_week\": 1, \"iso_day_of_week\": 3},\n+                        {\"iso_year\": 2000, \"iso_week\": 9, \"iso_day_of_week\": 2},\n+                        {\"iso_year\": 1898, \"iso_week\": 52, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2033, \"iso_week\": 20, \"iso_day_of_week\": 2},\n+                        {\"iso_year\": 2020, \"iso_week\": 1, \"iso_day_of_week\": 2},\n+                        {\"iso_year\": 2020, \"iso_week\": 1, \"iso_day_of_week\": 1},\n+                        {\"iso_year\": 2019, \"iso_week\": 52, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 3},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 4},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2005, \"iso_week\": 52, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2005, \"iso_week\": 52, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2008, \"iso_week\": 52, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2008, \"iso_week\": 52, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2011, \"iso_week\": 52, \"iso_day_of_week\": 6}, null])\");\n+  auto quarter = \"[4, 1, 4, 2, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 4, null]\";\n+  auto hour = \"[14, 13, 15, 18, 15, 16, 17, 18, 19, 21, 22, 23, 0, 14, 14, 15, null]\";\n+  auto minute = \"[30, 53, 41, 3, 35, 40, 45, 50, 55, 0, 5, 10, 15, 30, 30, 32, null]\";\n+  auto second = \"[59, 23, 20, 20, 5, 10, 15, 20, 25, 30, 35, 40, 45, 0, 0, 3, null]\";\n+  auto millisecond = \"[123, 999, 1, 0, 1, 2, 3, 4, 5, 6, 0, 0, 0, 0, 0, 0, null]\";\n+  auto microsecond = \"[456, 999, 1, 0, 0, 0, 0, 132, 321, 163, 0, 0, 0, 0, 0, 0, null]\";\n+  auto nanosecond = \"[789, 999, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, null]\";\n+  auto subsecond =\n+      \"[0.123456789, 0.999999999, 0.001001001, 0.0, 0.001, 0.002, 0.003, 0.004132, \"\n+      \"0.005321, 0.006163, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, null]\";\n \n-  for (auto u : internal::AllTimeUnits()) {\n-    auto unit = timestamp(u, timezone);\n-    auto timestamps = ArrayFromJSON(unit, times);\n-\n-    ASSERT_RAISES(Invalid, Year(timestamps));\n-    ASSERT_RAISES(Invalid, Month(timestamps));\n-    ASSERT_RAISES(Invalid, Day(timestamps));\n-    ASSERT_RAISES(Invalid, DayOfWeek(timestamps));\n-    ASSERT_RAISES(Invalid, DayOfYear(timestamps));\n-    ASSERT_RAISES(Invalid, ISOYear(timestamps));\n-    ASSERT_RAISES(Invalid, ISOWeek(timestamps));\n-    ASSERT_RAISES(Invalid, ISOCalendar(timestamps));\n-    ASSERT_RAISES(Invalid, Quarter(timestamps));\n-    ASSERT_RAISES(Invalid, Hour(timestamps));\n-    ASSERT_RAISES(Invalid, Minute(timestamps));\n-    ASSERT_RAISES(Invalid, Second(timestamps));\n-    ASSERT_RAISES(Invalid, Millisecond(timestamps));\n-    ASSERT_RAISES(Invalid, Microsecond(timestamps));\n-    ASSERT_RAISES(Invalid, Nanosecond(timestamps));\n-    ASSERT_RAISES(Invalid, Subsecond(timestamps));\n-  }\n+  CheckScalarUnary(\"year\", unit, times, int64(), year);\n+  CheckScalarUnary(\"month\", unit, times, int64(), month);\n+  CheckScalarUnary(\"day\", unit, times, int64(), day);\n+  CheckScalarUnary(\"day_of_week\", unit, times, int64(), day_of_week);\n+  CheckScalarUnary(\"day_of_year\", unit, times, int64(), day_of_year);\n+  CheckScalarUnary(\"iso_year\", unit, times, int64(), iso_year);\n+  CheckScalarUnary(\"iso_week\", unit, times, int64(), iso_week);\n+  CheckScalarUnary(\"iso_calendar\", ArrayFromJSON(unit, times), iso_calendar);\n+  CheckScalarUnary(\"quarter\", unit, times, int64(), quarter);\n+  CheckScalarUnary(\"hour\", unit, times, int64(), hour);\n+  CheckScalarUnary(\"minute\", unit, times, int64(), minute);\n+  CheckScalarUnary(\"second\", unit, times, int64(), second);\n+  CheckScalarUnary(\"millisecond\", unit, times, int64(), millisecond);\n+  CheckScalarUnary(\"microsecond\", unit, times, int64(), microsecond);\n+  CheckScalarUnary(\"nanosecond\", unit, times, int64(), nanosecond);\n+  CheckScalarUnary(\"subsecond\", unit, times, float64(), subsecond);\n+}\n+\n+TEST(ScalarTemporalTest, TestZoned2) {\n+  const char* times =\n+      R\"([\"1970-01-01T00:00:59.123456789\",\"2000-02-29T23:23:23.999999999\",\n+          \"1899-01-01T00:59:20.001001001\",\"2033-05-18T03:33:20.000000000\",\n+          \"2020-01-01T01:05:05.001\", \"2019-12-31T02:10:10.002\",\n+          \"2019-12-30T03:15:15.003\", \"2009-12-31T04:20:20.004132\",\n+          \"2010-01-01T05:25:25.005321\", \"2010-01-03T06:30:30.006163\",\n+          \"2010-01-04T07:35:35\", \"2006-01-01T08:40:40\", \"2005-12-31T09:45:45\",\n+          \"2008-12-28\", \"2008-12-29\", \"2012-01-01 01:02:03\", null])\";\n+  auto unit = timestamp(TimeUnit::NANO, \"Australia/Broken_Hill\");\n+  auto iso_calendar_type =\n+      struct_({field(\"iso_year\", int64()), field(\"iso_week\", int64()),\n+               field(\"iso_day_of_week\", int64())});\n+  auto year =\n+      \"[1970, 2000, 1899, 2033, 2020, 2019, 2019, 2009, 2010, 2010, 2010, 2006, 2005, \"\n+      \"2008, 2008, 2012, null]\";\n+  auto month = \"[1, 3, 1, 5, 1, 12, 12, 12, 1, 1, 1, 1, 12, 12, 12, 1, null]\";\n+  auto day = \"[1, 1, 1, 18, 1, 31, 30, 31, 1, 3, 4, 1, 31, 28, 29, 1, null]\";\n+  auto day_of_week = \"[3, 2, 6, 2, 2, 1, 0, 3, 4, 6, 0, 6, 5, 6, 0, 6, null]\";\n+  auto day_of_year =\n+      \"[1, 61, 1, 138, 1, 365, 364, 365, 1, 3, 4, 1, 365, 363, 364, 1, null]\";\n+  auto iso_year =\n+      \"[1970, 2000, 1898, 2033, 2020, 2020, 2020, 2009, 2009, 2009, 2010, 2005, 2005, \"\n+      \"2008, 2009, 2011, null]\";\n+  auto iso_week = \"[1, 9, 52, 20, 1, 1, 1, 53, 53, 53, 1, 52, 52, 52, 1, 52, null]\";\n+  auto iso_calendar =\n+      ArrayFromJSON(iso_calendar_type,\n+                    R\"([{\"iso_year\": 1970, \"iso_week\": 1, \"iso_day_of_week\": 4},\n+                        {\"iso_year\": 2000, \"iso_week\": 9, \"iso_day_of_week\": 3},\n+                        {\"iso_year\": 1898, \"iso_week\": 52, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2033, \"iso_week\": 20, \"iso_day_of_week\": 3},\n+                        {\"iso_year\": 2020, \"iso_week\": 1, \"iso_day_of_week\": 3},\n+                        {\"iso_year\": 2020, \"iso_week\": 1, \"iso_day_of_week\": 2},\n+                        {\"iso_year\": 2020, \"iso_week\": 1, \"iso_day_of_week\": 1},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 4},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 5},\n+                        {\"iso_year\": 2009, \"iso_week\": 53, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2010, \"iso_week\": 1, \"iso_day_of_week\": 1},\n+                        {\"iso_year\": 2005, \"iso_week\": 52, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2005, \"iso_week\": 52, \"iso_day_of_week\": 6},\n+                        {\"iso_year\": 2008, \"iso_week\": 52, \"iso_day_of_week\": 7},\n+                        {\"iso_year\": 2009, \"iso_week\": 1, \"iso_day_of_week\": 1},\n+                        {\"iso_year\": 2011, \"iso_week\": 52, \"iso_day_of_week\": 7}, null])\");\n+  auto quarter = \"[1, 1, 1, 2, 1, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 1, null]\";\n+  auto hour = \"[9, 9, 9, 13, 11, 12, 13, 14, 15, 17, 18, 19, 20, 10, 10, 11, null]\";\n+  auto minute = \"[30, 53, 59, 3, 35, 40, 45, 50, 55, 0, 5, 10, 15, 30, 30, 32, null]\";\n+  auto second = \"[59, 23, 20, 20, 5, 10, 15, 20, 25, 30, 35, 40, 45, 0, 0, 3, null]\";\n+  auto millisecond = \"[123, 999, 1, 0, 1, 2, 3, 4, 5, 6, 0, 0, 0, 0, 0, 0, null]\";\n+  auto microsecond = \"[456, 999, 1, 0, 0, 0, 0, 132, 321, 163, 0, 0, 0, 0, 0, 0, null]\";\n+  auto nanosecond = \"[789, 999, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, null]\";\n+  auto subsecond =\n+      \"[0.123456789, 0.999999999, 0.001001001, 0.0, 0.001, 0.002, 0.003, 0.004132, \"\n+      \"0.005321, 0.006163, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, null]\";\n+\n+  CheckScalarUnary(\"year\", unit, times, int64(), year);\n+  CheckScalarUnary(\"month\", unit, times, int64(), month);\n+  CheckScalarUnary(\"day\", unit, times, int64(), day);\n+  CheckScalarUnary(\"day_of_week\", unit, times, int64(), day_of_week);\n+  CheckScalarUnary(\"day_of_year\", unit, times, int64(), day_of_year);\n+  CheckScalarUnary(\"iso_year\", unit, times, int64(), iso_year);\n+  CheckScalarUnary(\"iso_week\", unit, times, int64(), iso_week);\n+  CheckScalarUnary(\"iso_calendar\", ArrayFromJSON(unit, times), iso_calendar);\n+  CheckScalarUnary(\"quarter\", unit, times, int64(), quarter);\n+  CheckScalarUnary(\"hour\", unit, times, int64(), hour);\n+  CheckScalarUnary(\"minute\", unit, times, int64(), minute);\n+  CheckScalarUnary(\"second\", unit, times, int64(), second);\n+  CheckScalarUnary(\"millisecond\", unit, times, int64(), millisecond);\n+  CheckScalarUnary(\"microsecond\", unit, times, int64(), microsecond);\n+  CheckScalarUnary(\"nanosecond\", unit, times, int64(), nanosecond);\n+  CheckScalarUnary(\"subsecond\", unit, times, float64(), subsecond);\n+}\n+\n+TEST(ScalarTemporalTest, TestOverflow) {\n+  const char* times = R\"([\"1677-09-20T00:00:59.123456789\", \"2262-04-13T23:23:23.999999999\"])\";\n+\n+  auto unit = timestamp(TimeUnit::NANO);\n+  auto iso_calendar_type =\n+      struct_({field(\"iso_year\", int64()), field(\"iso_week\", int64()),\n+               field(\"iso_day_of_week\", int64())});\n+\n+  auto year = \"[2262, 1677]\";\n+  auto month = \"[4, 9]\";\n+  auto day = \"[10, 22]\";\n+  auto day_of_week = \"[3, 2]\";\n+  auto day_of_year = \"[100, 265]\";\n+  auto iso_year = \"[2262, 1677]\";\n+  auto iso_week = \"[15, 38]\";\n+  auto iso_calendar =\n+      ArrayFromJSON(iso_calendar_type,\n+                    R\"([{\"iso_year\": 2262, \"iso_week\": 15, \"iso_day_of_week\": 4},\n+                        {\"iso_year\": 1677, \"iso_week\": 38, \"iso_day_of_week\": 3}])\");\n+  auto quarter = \"[2, 3]\";\n+  auto hour = \"[23, 23]\";\n+  auto minute = \"[35, 48]\";\n+  auto second = \"[32, 50]\";\n+  auto millisecond = \"[833, 290]\";\n+  auto microsecond = \"[8, 448]\";\n+  auto nanosecond = \"[405, 383]\";\n+  auto subsecond = \"[0.833008405, 0.290448383]\";\n+\n+  CheckScalarUnary(\"year\", unit, times, int64(), year);\n+  CheckScalarUnary(\"month\", unit, times, int64(), month);\n+  CheckScalarUnary(\"day\", unit, times, int64(), day);\n+  CheckScalarUnary(\"day_of_week\", unit, times, int64(), day_of_week);\n+  CheckScalarUnary(\"day_of_year\", unit, times, int64(), day_of_year);\n+  CheckScalarUnary(\"iso_year\", unit, times, int64(), iso_year);\n+  CheckScalarUnary(\"iso_week\", unit, times, int64(), iso_week);\n+  CheckScalarUnary(\"iso_calendar\", ArrayFromJSON(unit, times), iso_calendar);\n+  CheckScalarUnary(\"quarter\", unit, times, int64(), quarter);\n+  CheckScalarUnary(\"hour\", unit, times, int64(), hour);\n+  CheckScalarUnary(\"minute\", unit, times, int64(), minute);\n+  CheckScalarUnary(\"second\", unit, times, int64(), second);\n+  CheckScalarUnary(\"millisecond\", unit, times, int64(), millisecond);\n+  CheckScalarUnary(\"microsecond\", unit, times, int64(), microsecond);\n+  CheckScalarUnary(\"nanosecond\", unit, times, int64(), nanosecond);\n+  CheckScalarUnary(\"subsecond\", unit, times, float64(), subsecond);\n }\n\nReview comment:\n       Oh, now I understand the intent.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T13:16:47.125+0000",
                    "updated": "2021-06-15T13:16:47.125+0000",
                    "started": "2021-06-15T13:16:47.125+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611313",
                    "issueId": "13382227"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 42000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@394e1e8c[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a0c858a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61b60f24[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2fd8e64d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@722c79ef[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@74996ada[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@25079442[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4d85e421[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5cf71f7f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@63076181[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a3b4c27[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@187d1bad[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 42000,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Aug 16 17:52:50 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-08-16T17:52:50.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12980/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-06-04T21:02:15.000+0000",
        "updated": "2021-08-17T14:14:26.000+0000",
        "timeoriginalestimate": null,
        "description": "As followup to ARROW-11759 datetime component extraction kernels should return localized time components if timezone property is present.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "11h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 42000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Kernels to extract datetime components should be timezone aware",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382227/comment/17399892",
                    "id": "17399892",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 10457\n[https://github.com/apache/arrow/pull/10457]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-08-16T17:52:50.697+0000",
                    "updated": "2021-08-16T17:52:50.697+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0rofk:",
        "customfield_12314139": null
    }
}