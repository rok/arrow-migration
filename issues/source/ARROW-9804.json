{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13323606",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606",
    "key": "ARROW-9804",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12597214",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12597214",
                "type": {
                    "id": "12310461",
                    "name": "Dependency",
                    "inward": "Dependency",
                    "outward": "Dependency",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310461"
                },
                "outwardIssue": {
                    "id": "13323608",
                    "key": "ARROW-9805",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323608",
                    "fields": {
                        "summary": "[FlightRPC] Handshake Extension",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12597213",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12597213",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13279438",
                    "key": "ARROW-7579",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279438",
                    "fields": {
                        "summary": "[FlightRPC] Make Handshake optional",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12602716",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12602716",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13338723",
                    "key": "ARROW-10486",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338723",
                    "fields": {
                        "summary": "[FlightRPC][C++][Python] Header-based authentication",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12602281",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12602281",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13338221",
                    "key": "ARROW-10452",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338221",
                    "fields": {
                        "summary": "[FlightRPC] Deprecate old authentication mechanism",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jduong",
            "name": "jduong",
            "key": "jduong",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "James Duong",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334621",
                "id": "12334621",
                "name": "FlightRPC"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jduong",
            "name": "jduong",
            "key": "jduong",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "James Duong",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jduong",
            "name": "jduong",
            "key": "jduong",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "James Duong",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 18600,
            "total": 18600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18600,
            "total": 18600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9804/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 31,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606/worklog/472605",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7994:\nURL: https://github.com/apache/arrow/pull/7994#issuecomment-676625519\n\n\n   https://issues.apache.org/jira/browse/ARROW-9804\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-19T19:46:55.820+0000",
                    "updated": "2020-08-19T19:46:55.820+0000",
                    "started": "2020-08-19T19:46:55.819+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "472605",
                    "issueId": "13323606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606/worklog/474573",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #7994:\nURL: https://github.com/apache/arrow/pull/7994#discussion_r476883835\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/grpc/ServerInterceptorAdapter.java\n##########\n@@ -87,10 +87,12 @@ public ServerInterceptorAdapter(List<KeyFactory<?>> factories) {\n     // Use LinkedHashMap to preserve insertion order\n     final Map<FlightServerMiddleware.Key<?>, FlightServerMiddleware> middlewareMap = new LinkedHashMap<>();\n     final MetadataAdapter headerAdapter = new MetadataAdapter(headers);\n+    Context currentContext = Context.current();\n     for (final KeyFactory<?> factory : factories) {\n       final FlightServerMiddleware m;\n       try {\n         m = factory.factory.onCallStarted(info, headerAdapter);\n+        currentContext = m.onAuthenticationSuccess(currentContext);\n\nReview comment:\n       The issue here is there's no way to alter the Context from onCallStarted. We can get the context but can't get the ServerInterceptorAdapter to use the context.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-25T23:54:53.201+0000",
                    "updated": "2020-08-25T23:54:53.201+0000",
                    "started": "2020-08-25T23:54:53.201+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474573",
                    "issueId": "13323606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606/worklog/474574",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #7994:\nURL: https://github.com/apache/arrow/pull/7994#discussion_r476884889\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/auth/ServerAuthMiddleware.java\n##########\n@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.auth;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.arrow.flight.CallHeaders;\n+import org.apache.arrow.flight.CallInfo;\n+import org.apache.arrow.flight.CallStatus;\n+import org.apache.arrow.flight.FlightRuntimeException;\n+import org.apache.arrow.flight.FlightServerMiddleware;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.grpc.Context;\n+\n+/**\n+ * Middleware that's used to validate credentials during the handshake and verify\n+ * the bearer token in subsequent requests.\n+ */\n+public class ServerAuthMiddleware implements FlightServerMiddleware {\n+  private static final Logger logger = LoggerFactory.getLogger(ServerAuthMiddleware.class);\n+\n+  /**\n+   * Factory for accessing ServerAuthMiddleware.\n+   */\n+  public static class Factory implements FlightServerMiddleware.Factory<ServerAuthMiddleware> {\n+    private final ServerAuthHandler authHandler;\n+    private final GeneratedBearerTokenAuthHandler bearerTokenAuthHandler = new GeneratedBearerTokenAuthHandler();\n+    private final Map<String, String> tokenToIdentityMap = new ConcurrentHashMap<>();\n+\n+    public Factory(ServerAuthHandler authHandler) {\n+      this.authHandler = authHandler;\n+    }\n+\n+    public String getPeerForBearer(String bearerToken) {\n+      return bearerTokenAuthHandler.getIdentityForBearerToken(bearerToken);\n+    }\n+\n+    @Override\n+    public ServerAuthMiddleware onCallStarted(CallInfo callInfo, CallHeaders incomingHeaders) {\n+      logger.debug(\"Call name: {}\", callInfo.method().name());\n+      if (callInfo.method().name().equals(AuthConstants.HANDSHAKE_DESCRIPTOR_NAME)) {\n+        final ServerAuthHandler.HandshakeResult result = authHandler.authenticate(incomingHeaders);\n+        final String bearerToken = bearerTokenAuthHandler.registerBearer(result);\n+        return new ServerAuthMiddleware(result.getPeerIdentity(), bearerToken);\n+      }\n+\n+      final String bearerToken = AuthUtilities.getValueFromAuthHeader(incomingHeaders, AuthConstants.BEARER_PREFIX);\n+      // No bearer token provided. Auth handler may explicitly allow this.\n+      if (bearerToken == null) {\n+        if (authHandler.validateBearer(null)) {\n+          return new ServerAuthMiddleware(\"\", null);\n+        }\n+        logger.info(\"Client did not supply a bearer token.\");\n+        throw new FlightRuntimeException(CallStatus.UNAUTHENTICATED);\n+      }\n+\n+      if (!authHandler.validateBearer(bearerToken) && !bearerTokenAuthHandler.validateBearer(bearerToken)) {\n+        logger.info(\"Bearer token supplied by client was not authorized.\");\n+        throw new FlightRuntimeException(CallStatus.UNAUTHORIZED);\n+      }\n+\n+      final String peerIdentity = bearerTokenAuthHandler.getIdentityForBearerToken(bearerToken);\n+      return new ServerAuthMiddleware(peerIdentity, null);\n\nReview comment:\n       Let's get agreement on the design before focusing too much on optimizations.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-25T23:55:49.882+0000",
                    "updated": "2020-08-25T23:55:49.882+0000",
                    "started": "2020-08-25T23:55:49.882+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474574",
                    "issueId": "13323606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606/worklog/474575",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #7994:\nURL: https://github.com/apache/arrow/pull/7994#discussion_r476900989\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/auth/BasicAuthCallCredentials.java\n##########\n@@ -17,42 +17,39 @@\n \n package org.apache.arrow.flight.auth;\n \n-import java.util.Iterator;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.concurrent.Executor;\n \n-import org.apache.arrow.flight.impl.Flight.BasicAuth;\n+import io.grpc.CallCredentials;\n+import io.grpc.Metadata;\n \n /**\n  * A client auth handler that supports username and password.\n  */\n-public class BasicClientAuthHandler implements ClientAuthHandler {\n+public final class BasicAuthCallCredentials extends CallCredentials {\n\nReview comment:\n       > I started looking at the changes, but IMO, this can be done a different way.\r\n   > \r\n   > If the goal here is to be able to use standard gRPC call credentials and the standard Authorization header, then there are only a few changes needed:\r\n   > \r\n   > `flight-grpc` should re-export `GrpcCallOption`. This would let you define a custom call option that injects a gRPC CallCredentials.\r\n   > https://github.com/apache/arrow/blob/maint-1.0.x/java/flight/flight-core/src/main/java/org/apache/arrow/flight/CallOptions.java#L59\r\n   > \r\n   > FlightClient should have an option or a way to specify default call options, so you could add the auth call option on every call.\r\n   > \r\n   > Then, on the server side, you can use `flight-grpc` to get the gRPC service instance and register it with your own gRPC server, and configure authentication there. Your custom auth interceptor could still put the identity of the user in AuthConstants.PEER_IDENTITY_KEY, so that you could still read it from the Flight CallContext.\r\n   > \r\n   > This PR includes default implementations of various auth options. Those could be included as part of flight-grpc.\r\n   > \r\n   > I admit I don't love the current auth implementation (specifically, Handshake causes issues because it's intentionally unauthenticated and we should use the standard Authorization header, and we can't handle more complex things like WWW-Authenticate and multiple authentication headers, X-Forwarded-* headers, etc.), but as is, this PR breaks compatibility and re-exports a lot of gRPC types from the Flight core.\r\n   \r\n   Hi David, just want to clarify comments about not re-exporting gRPC types. Currently flight-grpc has very little -- just FlightGrpcUtils. flight-core however has a package that has several gRPC dependencies such as MetadataAdapter, ClientInterceptorAdapter, etc.\r\n   \r\n   Is the intent to move these to flight-grpc? Should I move any new classes I add that depend on gRPC there?\r\n   \r\n   FlightServer itself depends on gRPC as well, and it is in flight-core and not in the gRPC package.\r\n   Would a separate PR be a better place for cleaning up separation of flight-core from grpc?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-26T00:12:51.476+0000",
                    "updated": "2020-08-26T00:12:51.476+0000",
                    "started": "2020-08-26T00:12:51.476+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474575",
                    "issueId": "13323606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606/worklog/474978",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #7994:\nURL: https://github.com/apache/arrow/pull/7994#discussion_r477542825\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/grpc/ServerInterceptorAdapter.java\n##########\n@@ -87,10 +87,12 @@ public ServerInterceptorAdapter(List<KeyFactory<?>> factories) {\n     // Use LinkedHashMap to preserve insertion order\n     final Map<FlightServerMiddleware.Key<?>, FlightServerMiddleware> middlewareMap = new LinkedHashMap<>();\n     final MetadataAdapter headerAdapter = new MetadataAdapter(headers);\n+    Context currentContext = Context.current();\n     for (final KeyFactory<?> factory : factories) {\n       final FlightServerMiddleware m;\n       try {\n         m = factory.factory.onCallStarted(info, headerAdapter);\n+        currentContext = m.onAuthenticationSuccess(currentContext);\n\nReview comment:\n       I created a facade for this and supplied it as an input to onCallStarted.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-26T19:37:04.176+0000",
                    "updated": "2020-08-26T19:37:04.176+0000",
                    "started": "2020-08-26T19:37:04.176+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474978",
                    "issueId": "13323606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606/worklog/474979",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #7994:\nURL: https://github.com/apache/arrow/pull/7994#discussion_r477543461\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/FlightClient.java\n##########\n@@ -156,23 +150,12 @@\n   }\n \n   /**\n-   * Authenticates with a username and password.\n\nReview comment:\n       I renamed authenticate() to handshake() now, because authentication is now supplied as a CallOption. I brought back authenticateBasic() and also now have it return a CallOption containing the bearer token credentials if the server sent it back.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-26T19:38:19.301+0000",
                    "updated": "2020-08-26T19:38:19.301+0000",
                    "started": "2020-08-26T19:38:19.300+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474979",
                    "issueId": "13323606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606/worklog/474980",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #7994:\nURL: https://github.com/apache/arrow/pull/7994#discussion_r477543928\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/FlightClient.java\n##########\n@@ -84,18 +81,15 @@\n    * Create a Flight client from an allocator and a gRPC channel.\n    */\n   FlightClient(BufferAllocator incomingAllocator, ManagedChannel channel,\n-      List<FlightClientMiddleware.Factory> middleware) {\n+      List<FlightClientMiddleware.Factory> middleware, CallCredentials callCredentials) {\n     this.allocator = incomingAllocator.newChildAllocator(\"flight-client\", 0, Long.MAX_VALUE);\n     this.channel = channel;\n \n-    final ClientInterceptor[] interceptors;\n-    interceptors = new ClientInterceptor[]{authInterceptor, new ClientInterceptorAdapter(middleware)};\n-\n     // Create a channel with interceptors pre-applied for DoGet and DoPut\n-    this.interceptedChannel = ClientInterceptors.intercept(channel, interceptors);\n+    this.interceptedChannel = ClientInterceptors.intercept(channel, new ClientInterceptorAdapter(middleware));\n \n-    blockingStub = FlightServiceGrpc.newBlockingStub(interceptedChannel);\n-    asyncStub = FlightServiceGrpc.newStub(interceptedChannel);\n+    blockingStub = FlightServiceGrpc.newBlockingStub(interceptedChannel).withCallCredentials(callCredentials);\n\nReview comment:\n       I've added a CredentialCallOptions class which creates and adds CallCredentials to the gRPC stub.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-26T19:39:13.311+0000",
                    "updated": "2020-08-26T19:39:13.311+0000",
                    "started": "2020-08-26T19:39:13.311+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474980",
                    "issueId": "13323606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606/worklog/475015",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #7994:\nURL: https://github.com/apache/arrow/pull/7994#discussion_r477591584\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/CallOptions.java\n##########\n@@ -56,7 +56,7 @@ public static CallOption timeout(long duration, TimeUnit unit) {\n   /**\n    * CallOptions specific to GRPC stubs.\n    */\n-  interface GrpcCallOption extends CallOption {\n+  public interface GrpcCallOption extends CallOption {\n\nReview comment:\n       This can't be public in this module - it should have a public subinterface in flight-grpc.\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/CallContext.java\n##########\n@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+/**\n+ * Tracks variables about the current request.\n+ */\n+public interface CallContext {\n\nReview comment:\n       Let's try not to rename existing classes unnecessarily and instead come up with new names. \n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/FlightRuntimeException.java\n##########\n@@ -29,7 +29,7 @@\n   /**\n    * Create a new exception from the given status.\n    */\n-  FlightRuntimeException(CallStatus status) {\n+  public FlightRuntimeException(CallStatus status) {\n\nReview comment:\n       This shouldn't need to be public, a CallStatus has a toRuntimeException method already\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-26T21:17:48.270+0000",
                    "updated": "2020-08-26T21:17:48.270+0000",
                    "started": "2020-08-26T21:17:48.270+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "475015",
                    "issueId": "13323606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606/worklog/475069",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #7994:\nURL: https://github.com/apache/arrow/pull/7994#discussion_r477766787\n\n\n\n##########\nFile path: java/flight/flight-core/src/test/java/org/apache/arrow/flight/auth/TestBasicAuth.java\n##########\n@@ -44,29 +44,38 @@\n import org.junit.Ignore;\n import org.junit.Test;\n \n+import com.google.common.base.Strings;\n import com.google.common.collect.ImmutableList;\n \n public class TestBasicAuth {\n \n   private static final String USERNAME = \"flight\";\n   private static final String PASSWORD = \"woohoo\";\n-  private static final byte[] VALID_TOKEN = \"my_token\".getBytes(StandardCharsets.UTF_8);\n+  private static final String VALID_TOKEN = \"my_token\";\n \n+  private FlightClient.Builder clientBuilder;\n   private FlightClient client;\n   private FlightServer server;\n   private BufferAllocator allocator;\n \n   @Test\n   public void validAuth() {\n-    client.authenticateBasic(USERNAME, PASSWORD);\n-    Assert.assertTrue(ImmutableList.copyOf(client.listFlights(Criteria.ALL)).size() == 0);\n+    try {\n+      client = clientBuilder.callCredentials(new BasicAuthCallCredentials(USERNAME, PASSWORD)).build();\n+      client.handshake();\n+      Assert.assertTrue(ImmutableList.copyOf(client.listFlights(Criteria.ALL)).size() == 0);\n\nReview comment:\n       Changed to assertTrue(isEmpty()). But let's focus on the design given this is a POC.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-27T00:26:06.572+0000",
                    "updated": "2020-08-27T00:26:06.572+0000",
                    "started": "2020-08-27T00:26:06.571+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "475069",
                    "issueId": "13323606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606/worklog/475071",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #7994:\nURL: https://github.com/apache/arrow/pull/7994#discussion_r477768470\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/grpc/ServerInterceptorAdapter.java\n##########\n@@ -87,10 +87,12 @@ public ServerInterceptorAdapter(List<KeyFactory<?>> factories) {\n     // Use LinkedHashMap to preserve insertion order\n     final Map<FlightServerMiddleware.Key<?>, FlightServerMiddleware> middlewareMap = new LinkedHashMap<>();\n     final MetadataAdapter headerAdapter = new MetadataAdapter(headers);\n+    Context currentContext = Context.current();\n     for (final KeyFactory<?> factory : factories) {\n       final FlightServerMiddleware m;\n       try {\n         m = factory.factory.onCallStarted(info, headerAdapter);\n+        currentContext = m.onAuthenticationSuccess(currentContext);\n\nReview comment:\n       I added another input to onCallStarted() that the implementor can use to write context-specific variable values.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-27T00:27:02.133+0000",
                    "updated": "2020-08-27T00:27:02.133+0000",
                    "started": "2020-08-27T00:27:02.133+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "475071",
                    "issueId": "13323606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606/worklog/475534",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #7994:\nURL: https://github.com/apache/arrow/pull/7994#discussion_r478675271\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/example/integration/AuthBasicProtoScenario.java\n##########\n@@ -58,40 +58,37 @@ public void doAction(CallContext context, Action action, StreamListener<Result>\n   public void buildServer(FlightServer.Builder builder) {\n     builder.authHandler(new BasicServerAuthHandler(new BasicServerAuthHandler.BasicAuthValidator() {\n       @Override\n-      public byte[] getToken(String username, String password) throws Exception {\n+      public Optional<String> validateCredentials(String username, String password) throws Exception {\n+        if (Strings.isNullOrEmpty(username)) {\n+          throw CallStatus.UNAUTHORIZED.withDescription(\"Credentials not supplied\").toRuntimeException();\n+        }\n+\n         if (!USERNAME.equals(username) || !PASSWORD.equals(password)) {\n-          throw CallStatus.UNAUTHENTICATED.withDescription(\"Username or password is invalid.\").toRuntimeException();\n+          throw CallStatus.UNAUTHORIZED.withDescription(\"Username or password is invalid.\").toRuntimeException();\n         }\n-        return (\"valid:\" + username).getBytes(StandardCharsets.UTF_8);\n+        return Optional.of(\"valid:\" + username);\n       }\n \n       @Override\n-      public Optional<String> isValid(byte[] token) {\n-        if (token != null) {\n-          final String credential = new String(token, StandardCharsets.UTF_8);\n-          if (credential.startsWith(\"valid:\")) {\n-            return Optional.of(credential.substring(6));\n-          }\n+      public Optional<String> isValid(String token) {\n+        if (token.startsWith(\"valid:\")) {\n+          return Optional.of(token.substring(6));\n         }\n         return Optional.empty();\n       }\n     }));\n   }\n \n   @Override\n-  public void client(BufferAllocator allocator, Location location, FlightClient client) {\n-    final FlightRuntimeException e = IntegrationAssertions.assertThrows(FlightRuntimeException.class, () -> {\n-      client.listActions().forEach(act -> {\n-      });\n-    });\n-    if (!FlightStatusCode.UNAUTHENTICATED.equals(e.status().code())) {\n-      throw new AssertionError(\"Expected UNAUTHENTICATED but found \" + e.status().code(), e);\n-    }\n-\n-    client.authenticate(new BasicClientAuthHandler(USERNAME, PASSWORD));\n-    final Result result = client.doAction(new Action(\"\")).next();\n-    if (!USERNAME.equals(new String(result.getBody(), StandardCharsets.UTF_8))) {\n-      throw new AssertionError(\"Expected \" + USERNAME + \" but got \" + Arrays.toString(result.getBody()));\n+  public void client(BufferAllocator allocator, Location location, FlightClient.Builder clientBuilder) {\n\nReview comment:\n       We should still test what happens if the client tries to make an unauthenticated request.\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/grpc/ContextAdapter.java\n##########\n@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.grpc;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.arrow.flight.CallContext;\n+import org.apache.arrow.flight.auth.AuthConstants;\n+\n+import io.grpc.Context;\n+\n+/**\n+ * Adapter class for gRPC contexts.\n+ */\n+public class ContextAdapter implements CallContext {\n+  // gRPC uses reference equality when looking up keys in a Context. Cache used keys in this static map\n+  // so that look ups can succeed.\n+  private static final Map<String, Context.Key<String>> usedKeys = new HashMap<>();\n\nReview comment:\n       An internal synchronized cache may be surprising...I'd say if we have to have a cache, it should just use ConcurrentHashMap, and preferably, we should just wrap Context.Key<T> ourselves.\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/auth/ClientHandshakeWrapper.java\n##########\n@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.auth;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.apache.arrow.flight.grpc.StatusUtils;\n+import org.apache.arrow.flight.impl.Flight.HandshakeRequest;\n+import org.apache.arrow.flight.impl.Flight.HandshakeResponse;\n+import org.apache.arrow.flight.impl.FlightServiceGrpc.FlightServiceStub;\n+\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+\n+/**\n+ * Utility class for executing a handshake with a FlightServer.\n+ */\n+public class ClientHandshakeWrapper {\n+  private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(ClientHandshakeWrapper.class);\n+\n+  /**\n+   * Do handshake for a client.  The stub will be authenticated after this method returns.\n+   *\n+   * @param stub The service stub.\n+   */\n+  public static void doClientHandshake(FlightServiceStub stub) {\n+    final HandshakeObserver observer = new HandshakeObserver();\n+    try {\n+      observer.requestObserver = stub.handshake(observer);\n+      observer.requestObserver.onNext(HandshakeRequest.newBuilder().build());\n+      observer.requestObserver.onCompleted();\n+      try {\n+        if (!observer.completed.get()) {\n+          // TODO: ARROW-5681\n+          throw new RuntimeException(\"Unauthenticated\");\n+        }\n+      } catch (InterruptedException ex) {\n+        Thread.currentThread().interrupt();\n+        throw ex;\n\nReview comment:\n       Does this actually build? We're throwing a checked exception here\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/auth/ServerAuthMiddleware.java\n##########\n@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.auth;\n+\n+import org.apache.arrow.flight.CallContext;\n+import org.apache.arrow.flight.CallHeaders;\n+import org.apache.arrow.flight.CallInfo;\n+import org.apache.arrow.flight.CallStatus;\n+import org.apache.arrow.flight.FlightServerMiddleware;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Middleware that's used to validate credentials during the handshake and verify\n+ * the bearer token in subsequent requests.\n+ */\n+public class ServerAuthMiddleware implements FlightServerMiddleware {\n+  private static final Logger logger = LoggerFactory.getLogger(ServerAuthMiddleware.class);\n+\n+  /**\n+   * Factory for accessing ServerAuthMiddleware.\n+   */\n+  public static class Factory implements FlightServerMiddleware.Factory<ServerAuthMiddleware> {\n+    private final ServerAuthHandler authHandler;\n+    private final GeneratedBearerTokenAuthHandler bearerTokenAuthHandler;\n+\n+    /**\n+     * Construct a factory with the given auth handler.\n+     * @param authHandler The auth handler what will be used for authenticating requests.\n+     */\n+    public Factory(ServerAuthHandler authHandler) {\n+      this.authHandler = authHandler;\n+      bearerTokenAuthHandler = authHandler.enableCachedCredentials() ?\n+          new GeneratedBearerTokenAuthHandler() : null;\n+    }\n+\n+    @Override\n+    public ServerAuthMiddleware onCallStarted(CallInfo callInfo, CallHeaders incomingHeaders, CallContext context) {\n+      logger.debug(\"Call name: {}\", callInfo.method().name());\n\nReview comment:\n       Let's maybe not spam logs here; logging should go into dedicated logging middleware.\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/auth/ServerAuthMiddleware.java\n##########\n@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.auth;\n+\n+import org.apache.arrow.flight.CallContext;\n+import org.apache.arrow.flight.CallHeaders;\n+import org.apache.arrow.flight.CallInfo;\n+import org.apache.arrow.flight.CallStatus;\n+import org.apache.arrow.flight.FlightServerMiddleware;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Middleware that's used to validate credentials during the handshake and verify\n+ * the bearer token in subsequent requests.\n+ */\n+public class ServerAuthMiddleware implements FlightServerMiddleware {\n+  private static final Logger logger = LoggerFactory.getLogger(ServerAuthMiddleware.class);\n+\n+  /**\n+   * Factory for accessing ServerAuthMiddleware.\n+   */\n+  public static class Factory implements FlightServerMiddleware.Factory<ServerAuthMiddleware> {\n+    private final ServerAuthHandler authHandler;\n+    private final GeneratedBearerTokenAuthHandler bearerTokenAuthHandler;\n+\n+    /**\n+     * Construct a factory with the given auth handler.\n+     * @param authHandler The auth handler what will be used for authenticating requests.\n+     */\n+    public Factory(ServerAuthHandler authHandler) {\n+      this.authHandler = authHandler;\n+      bearerTokenAuthHandler = authHandler.enableCachedCredentials() ?\n+          new GeneratedBearerTokenAuthHandler() : null;\n+    }\n+\n+    @Override\n+    public ServerAuthMiddleware onCallStarted(CallInfo callInfo, CallHeaders incomingHeaders, CallContext context) {\n+      logger.debug(\"Call name: {}\", callInfo.method().name());\n+      // Check if bearer token auth is being used, and if we've enabled use of server-generated\n+      // bearer tokens.\n+      if (authHandler.enableCachedCredentials()) {\n\nReview comment:\n       Is it possible for logic like this to be handled by the auth handler itself? I don't see the value of hardcoding a particular caching strategy here.\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/auth/ClientHandshakeWrapper.java\n##########\n@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.auth;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.apache.arrow.flight.grpc.StatusUtils;\n+import org.apache.arrow.flight.impl.Flight.HandshakeRequest;\n+import org.apache.arrow.flight.impl.Flight.HandshakeResponse;\n+import org.apache.arrow.flight.impl.FlightServiceGrpc.FlightServiceStub;\n+\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+\n+/**\n+ * Utility class for executing a handshake with a FlightServer.\n+ */\n+public class ClientHandshakeWrapper {\n+  private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(ClientHandshakeWrapper.class);\n+\n+  /**\n+   * Do handshake for a client.  The stub will be authenticated after this method returns.\n+   *\n+   * @param stub The service stub.\n+   */\n+  public static void doClientHandshake(FlightServiceStub stub) {\n+    final HandshakeObserver observer = new HandshakeObserver();\n+    try {\n+      observer.requestObserver = stub.handshake(observer);\n+      observer.requestObserver.onNext(HandshakeRequest.newBuilder().build());\n+      observer.requestObserver.onCompleted();\n+      try {\n+        if (!observer.completed.get()) {\n+          // TODO: ARROW-5681\n+          throw new RuntimeException(\"Unauthenticated\");\n+        }\n+      } catch (InterruptedException ex) {\n+        Thread.currentThread().interrupt();\n+        throw ex;\n\nReview comment:\n       Oh I see, it gets caught and rethrown below\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/auth/ServerAuthMiddleware.java\n##########\n@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.auth;\n+\n+import org.apache.arrow.flight.CallContext;\n+import org.apache.arrow.flight.CallHeaders;\n+import org.apache.arrow.flight.CallInfo;\n+import org.apache.arrow.flight.CallStatus;\n+import org.apache.arrow.flight.FlightServerMiddleware;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Middleware that's used to validate credentials during the handshake and verify\n+ * the bearer token in subsequent requests.\n+ */\n+public class ServerAuthMiddleware implements FlightServerMiddleware {\n+  private static final Logger logger = LoggerFactory.getLogger(ServerAuthMiddleware.class);\n+\n+  /**\n+   * Factory for accessing ServerAuthMiddleware.\n+   */\n+  public static class Factory implements FlightServerMiddleware.Factory<ServerAuthMiddleware> {\n+    private final ServerAuthHandler authHandler;\n+    private final GeneratedBearerTokenAuthHandler bearerTokenAuthHandler;\n+\n+    /**\n+     * Construct a factory with the given auth handler.\n+     * @param authHandler The auth handler what will be used for authenticating requests.\n+     */\n+    public Factory(ServerAuthHandler authHandler) {\n+      this.authHandler = authHandler;\n+      bearerTokenAuthHandler = authHandler.enableCachedCredentials() ?\n+          new GeneratedBearerTokenAuthHandler() : null;\n+    }\n+\n+    @Override\n+    public ServerAuthMiddleware onCallStarted(CallInfo callInfo, CallHeaders incomingHeaders, CallContext context) {\n+      logger.debug(\"Call name: {}\", callInfo.method().name());\n+      // Check if bearer token auth is being used, and if we've enabled use of server-generated\n+      // bearer tokens.\n+      if (authHandler.enableCachedCredentials()) {\n+        final String bearerTokenFromHeaders =\n+            AuthUtilities.getValueFromAuthHeader(incomingHeaders, AuthConstants.BEARER_PREFIX);\n+        if (bearerTokenFromHeaders != null) {\n+          final ServerAuthHandler.AuthResult result = bearerTokenAuthHandler.authenticate(incomingHeaders);\n+          context.put(AuthConstants.PEER_IDENTITY_KEY, result.getPeerIdentity());\n+          return new ServerAuthMiddleware(result.getPeerIdentity(), result.getBearerToken().get());\n+        }\n+      }\n+\n+      // Delegate to server auth handler to do the validation.\n+      final ServerAuthHandler.AuthResult result = authHandler.authenticate(incomingHeaders);\n+      final String bearerToken;\n+      if (authHandler.enableCachedCredentials()) {\n+        bearerToken = bearerTokenAuthHandler.registerBearer(result);\n+      } else {\n+        bearerToken = result.getBearerToken().get();\n+      }\n+      context.put(AuthConstants.PEER_IDENTITY_KEY, result.getPeerIdentity());\n+      return new ServerAuthMiddleware(result.getPeerIdentity(), bearerToken);\n+    }\n+  }\n+\n+  private final String bearerToken;\n+  private final String peerIdentity;\n+\n+  public ServerAuthMiddleware(String peerIdentity, String bearerToken) {\n+    this.peerIdentity = peerIdentity;\n+    this.bearerToken = bearerToken;\n+  }\n+\n+  @Override\n+  public void onBeforeSendingHeaders(CallHeaders outgoingHeaders) {\n+    if (bearerToken != null &&\n\nReview comment:\n       The same goes for outbound headers - an auth handler should be able to send whatever outbound headers it might need, instead of hardcoding a particular header here. SPNEGO is an example of an auth scheme that uses WWW-Negotiate instead of Authorization in responses, for example.\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/auth/ClientHandshakeWrapper.java\n##########\n@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.auth;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.apache.arrow.flight.grpc.StatusUtils;\n+import org.apache.arrow.flight.impl.Flight.HandshakeRequest;\n+import org.apache.arrow.flight.impl.Flight.HandshakeResponse;\n+import org.apache.arrow.flight.impl.FlightServiceGrpc.FlightServiceStub;\n+\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+\n+/**\n+ * Utility class for executing a handshake with a FlightServer.\n+ */\n+public class ClientHandshakeWrapper {\n+  private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(ClientHandshakeWrapper.class);\n+\n+  /**\n+   * Do handshake for a client.  The stub will be authenticated after this method returns.\n+   *\n+   * @param stub The service stub.\n+   */\n+  public static void doClientHandshake(FlightServiceStub stub) {\n+    final HandshakeObserver observer = new HandshakeObserver();\n+    try {\n+      observer.requestObserver = stub.handshake(observer);\n+      observer.requestObserver.onNext(HandshakeRequest.newBuilder().build());\n+      observer.requestObserver.onCompleted();\n+      try {\n+        if (!observer.completed.get()) {\n+          // TODO: ARROW-5681\n+          throw new RuntimeException(\"Unauthenticated\");\n+        }\n+      } catch (InterruptedException ex) {\n+        Thread.currentThread().interrupt();\n+        throw ex;\n+      } catch (ExecutionException ex) {\n+        logger.error(\"Failed on completing future\", ex.getCause());\n+        throw ex.getCause();\n\nReview comment:\n       This should probably be `StatusUtils.fromThrowable(ex.getCause())`\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/example/integration/AuthBasicProtoScenario.java\n##########\n@@ -58,40 +58,37 @@ public void doAction(CallContext context, Action action, StreamListener<Result>\n   public void buildServer(FlightServer.Builder builder) {\n     builder.authHandler(new BasicServerAuthHandler(new BasicServerAuthHandler.BasicAuthValidator() {\n       @Override\n-      public byte[] getToken(String username, String password) throws Exception {\n+      public Optional<String> validateCredentials(String username, String password) throws Exception {\n+        if (Strings.isNullOrEmpty(username)) {\n+          throw CallStatus.UNAUTHORIZED.withDescription(\"Credentials not supplied\").toRuntimeException();\n\nReview comment:\n       Unauthorized != Unauthenticated, this should be Unauthenticated. The same goes on like 67 below.\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/auth/BearerTokenAuthHandler.java\n##########\n@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.auth;\n+\n+import java.util.Optional;\n+\n+import org.apache.arrow.flight.CallHeaders;\n+import org.apache.arrow.flight.CallStatus;\n+import org.apache.arrow.flight.FlightRuntimeException;\n+\n+/**\n+ * Partial implementation of ServerAuthHandler for bearer-token based authentication.\n+ */\n+abstract class BearerTokenAuthHandler implements ServerAuthHandler {\n+  @Override\n+  public AuthResult authenticate(CallHeaders headers) {\n+    final String bearerToken = AuthUtilities.getValueFromAuthHeader(headers, AuthConstants.BEARER_PREFIX);\n+    if (bearerToken == null) {\n+      throw new FlightRuntimeException(CallStatus.UNAUTHENTICATED);\n+    }\n+\n+    if (!validateBearer(bearerToken)) {\n+      throw new FlightRuntimeException(CallStatus.UNAUTHORIZED);\n\nReview comment:\n       This should also be Unauthenticated\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-27T20:34:25.772+0000",
                    "updated": "2020-08-27T20:34:25.772+0000",
                    "started": "2020-08-27T20:34:25.772+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "475534",
                    "issueId": "13323606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606/worklog/475546",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #7994:\nURL: https://github.com/apache/arrow/pull/7994#discussion_r478695524\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/grpc/ContextAdapter.java\n##########\n@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.grpc;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.arrow.flight.CallContext;\n+import org.apache.arrow.flight.auth.AuthConstants;\n+\n+import io.grpc.Context;\n+\n+/**\n+ * Adapter class for gRPC contexts.\n+ */\n+public class ContextAdapter implements CallContext {\n+  // gRPC uses reference equality when looking up keys in a Context. Cache used keys in this static map\n+  // so that look ups can succeed.\n+  private static final Map<String, Context.Key<String>> usedKeys = new HashMap<>();\n\nReview comment:\n       Yeah I wasn't really happy about this.\r\n   \r\n   I'm not sure what you mean by wrapping Context.Key here. The issue is that Context.key(\"foo\") != Context.key(\"foo\") when invoking key.getValue() since gRPC uses reference equality for context keys. We need to reference the _same_ Context.key when writing the value in the middleware and getting the value to set the peer identity before executing Flight calls. However neither side should be aware that they are using gRPC Contexts so we can't a shared static value representing the key as we did before these changes.\r\n   \r\n   Does ConcurrentHashMap allow for atomic writes of the same key if you use putIfAbsent?\r\n   \r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-27T21:06:25.749+0000",
                    "updated": "2020-08-27T21:06:25.749+0000",
                    "started": "2020-08-27T21:06:25.749+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "475546",
                    "issueId": "13323606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606/worklog/475577",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on pull request #7994:\nURL: https://github.com/apache/arrow/pull/7994#issuecomment-682225959\n\n\n   > Some minor notes...I think we should resolve how exactly to treat Handshake in the design docs, though\r\n   \r\n   @lidavidm @pitrou , I've added a comment in the design doc about how we can change the handshake proposal as well as how sessions would fit into this.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-27T22:39:01.477+0000",
                    "updated": "2020-08-27T22:39:01.477+0000",
                    "started": "2020-08-27T22:39:01.477+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "475577",
                    "issueId": "13323606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606/worklog/476152",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #7994:\nURL: https://github.com/apache/arrow/pull/7994#discussion_r479681106\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/grpc/ContextAdapter.java\n##########\n@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.grpc;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.arrow.flight.CallContext;\n+import org.apache.arrow.flight.auth.AuthConstants;\n+\n+import io.grpc.Context;\n+\n+/**\n+ * Adapter class for gRPC contexts.\n+ */\n+public class ContextAdapter implements CallContext {\n+  // gRPC uses reference equality when looking up keys in a Context. Cache used keys in this static map\n+  // so that look ups can succeed.\n+  private static final Map<String, Context.Key<String>> usedKeys = new HashMap<>();\n\nReview comment:\n       You could implement a \r\n   ```java\r\n   class ContextKey<T> {\r\n       private final Context.Key<T> key;\r\n   }\r\n   ```\r\n   and give it the same restriction (instances are compared by identity, not value), right?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-29T19:18:52.731+0000",
                    "updated": "2020-08-29T19:18:52.731+0000",
                    "started": "2020-08-29T19:18:52.731+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "476152",
                    "issueId": "13323606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606/worklog/478007",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "keeratsingh commented on a change in pull request #7994:\nURL: https://github.com/apache/arrow/pull/7994#discussion_r482255128\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/auth/BasicServerAuthHandler.java\n##########\n@@ -39,37 +41,62 @@ public BasicServerAuthHandler(BasicAuthValidator authValidator) {\n     this.authValidator = authValidator;\n   }\n \n-  /**\n-   * Interface that this handler delegates for determining if credentials are valid.\n-   */\n-  public interface BasicAuthValidator {\n+  @Override\n+  public AuthResult authenticate(CallHeaders headers) {\n+    final String authEncoded = AuthUtilities.getValueFromAuthHeader(headers, AuthConstants.BASIC_PREFIX);\n+    if (authEncoded == null) {\n+      throw new FlightRuntimeException(CallStatus.UNAUTHENTICATED);\n+    }\n \n-    byte[] getToken(String username, String password) throws Exception;\n+    try {\n+      // The value has the format Base64(<username>:<password>)\n+      final String authDecoded = new String(Base64.getDecoder().decode(authEncoded), StandardCharsets.UTF_8);\n+      final int colonPos = authDecoded.indexOf(':');\n+      if (colonPos == -1) {\n+        throw new FlightRuntimeException(CallStatus.UNAUTHORIZED);\n+      }\n \n-    Optional<String> isValid(byte[] token);\n+      final String user = authDecoded.substring(0, colonPos);\n+      final String password = authDecoded.substring(colonPos + 1);\n+      final Optional<String> bearerToken = authValidator.validateCredentials(user, password);\n+      return new AuthResult() {\n+        @Override\n+        public String getPeerIdentity() {\n+          return user;\n+        }\n \n-  }\n+        @Override\n+        public Optional<String> getBearerToken() {\n+          return bearerToken;\n+        }\n+      };\n \n-  @Override\n-  public boolean authenticate(ServerAuthSender outgoing, Iterator<byte[]> incoming) {\n-    byte[] bytes = incoming.next();\n-    try {\n-      BasicAuth auth = BasicAuth.parseFrom(bytes);\n-      byte[] token = authValidator.getToken(auth.getUsername(), auth.getPassword());\n-      outgoing.send(token);\n-      return true;\n-    } catch (InvalidProtocolBufferException e) {\n-      logger.debug(\"Failure parsing auth message.\", e);\n-    } catch (Exception e) {\n-      logger.debug(\"Unknown error during authorization.\", e);\n+    } catch (UnsupportedEncodingException ex) {\n+      throw new FlightRuntimeException(CallStatus.INTERNAL.withCause(ex));\n+    } catch (FlightRuntimeException ex) {\n+      throw ex;\n+    } catch (Exception ex) {\n+      throw new FlightRuntimeException(CallStatus.UNAUTHORIZED.withCause(ex));\n     }\n+  }\n \n+  @Override\n+  public boolean validateBearer(String bearerToken) {\n     return false;\n   }\n \n   @Override\n-  public Optional<String> isValid(byte[] token) {\n-    return authValidator.isValid(token);\n+  public boolean enableCachedCredentials() {\n+    return true;\n   }\n \n+  /**\n+   * Interface that this handler delegates to forS determining if credentials are valid.\n\nReview comment:\n       Nit: should be for?\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/auth/ServerAuthMiddleware.java\n##########\n@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.auth;\n+\n+import org.apache.arrow.flight.CallContext;\n+import org.apache.arrow.flight.CallHeaders;\n+import org.apache.arrow.flight.CallInfo;\n+import org.apache.arrow.flight.CallStatus;\n+import org.apache.arrow.flight.FlightServerMiddleware;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Middleware that's used to validate credentials during the handshake and verify\n+ * the bearer token in subsequent requests.\n+ */\n+public class ServerAuthMiddleware implements FlightServerMiddleware {\n+  private static final Logger logger = LoggerFactory.getLogger(ServerAuthMiddleware.class);\n+\n+  /**\n+   * Factory for accessing ServerAuthMiddleware.\n+   */\n+  public static class Factory implements FlightServerMiddleware.Factory<ServerAuthMiddleware> {\n+    private final ServerAuthHandler authHandler;\n+    private final GeneratedBearerTokenAuthHandler bearerTokenAuthHandler;\n+\n+    /**\n+     * Construct a factory with the given auth handler.\n+     * @param authHandler The auth handler what will be used for authenticating requests.\n+     */\n+    public Factory(ServerAuthHandler authHandler) {\n+      this.authHandler = authHandler;\n+      bearerTokenAuthHandler = authHandler.enableCachedCredentials() ?\n+          new GeneratedBearerTokenAuthHandler() : null;\n+    }\n+\n+    @Override\n+    public ServerAuthMiddleware onCallStarted(CallInfo callInfo, CallHeaders incomingHeaders, CallContext context) {\n+      logger.debug(\"Call name: {}\", callInfo.method().name());\n+      // Check if bearer token auth is being used, and if we've enabled use of server-generated\n+      // bearer tokens.\n+      if (authHandler.enableCachedCredentials()) {\n+        final String bearerTokenFromHeaders =\n+            AuthUtilities.getValueFromAuthHeader(incomingHeaders, AuthConstants.BEARER_PREFIX);\n+        if (bearerTokenFromHeaders != null) {\n+          final ServerAuthHandler.AuthResult result = bearerTokenAuthHandler.authenticate(incomingHeaders);\n\nReview comment:\n       @jduo Should the authenticate method take a token as an argument instead of the incoming headers, as we execute the method `getValueFromAuthHeader` again in the authenticate method to get the token from the incoming headers?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-02T17:54:02.232+0000",
                    "updated": "2020-09-02T17:54:02.232+0000",
                    "started": "2020-09-02T17:54:02.232+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "478007",
                    "issueId": "13323606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606/worklog/478011",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #7994:\nURL: https://github.com/apache/arrow/pull/7994#discussion_r482260625\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/auth/ServerAuthMiddleware.java\n##########\n@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.auth;\n+\n+import org.apache.arrow.flight.CallContext;\n+import org.apache.arrow.flight.CallHeaders;\n+import org.apache.arrow.flight.CallInfo;\n+import org.apache.arrow.flight.CallStatus;\n+import org.apache.arrow.flight.FlightServerMiddleware;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Middleware that's used to validate credentials during the handshake and verify\n+ * the bearer token in subsequent requests.\n+ */\n+public class ServerAuthMiddleware implements FlightServerMiddleware {\n+  private static final Logger logger = LoggerFactory.getLogger(ServerAuthMiddleware.class);\n+\n+  /**\n+   * Factory for accessing ServerAuthMiddleware.\n+   */\n+  public static class Factory implements FlightServerMiddleware.Factory<ServerAuthMiddleware> {\n+    private final ServerAuthHandler authHandler;\n+    private final GeneratedBearerTokenAuthHandler bearerTokenAuthHandler;\n+\n+    /**\n+     * Construct a factory with the given auth handler.\n+     * @param authHandler The auth handler what will be used for authenticating requests.\n+     */\n+    public Factory(ServerAuthHandler authHandler) {\n+      this.authHandler = authHandler;\n+      bearerTokenAuthHandler = authHandler.enableCachedCredentials() ?\n+          new GeneratedBearerTokenAuthHandler() : null;\n+    }\n+\n+    @Override\n+    public ServerAuthMiddleware onCallStarted(CallInfo callInfo, CallHeaders incomingHeaders, CallContext context) {\n+      logger.debug(\"Call name: {}\", callInfo.method().name());\n+      // Check if bearer token auth is being used, and if we've enabled use of server-generated\n+      // bearer tokens.\n+      if (authHandler.enableCachedCredentials()) {\n+        final String bearerTokenFromHeaders =\n+            AuthUtilities.getValueFromAuthHeader(incomingHeaders, AuthConstants.BEARER_PREFIX);\n+        if (bearerTokenFromHeaders != null) {\n+          final ServerAuthHandler.AuthResult result = bearerTokenAuthHandler.authenticate(incomingHeaders);\n\nReview comment:\n       No, the idea is you don't know which header you need to authenticate from. We're going to change this such that bearer token generation is moved out of this middleware and into an implementation of ServerAuthHandler which will make this more claer.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-02T17:57:38.548+0000",
                    "updated": "2020-09-02T17:57:38.548+0000",
                    "started": "2020-09-02T17:57:38.547+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "478011",
                    "issueId": "13323606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606/worklog/501703",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "keeratsingh commented on a change in pull request #7994:\nURL: https://github.com/apache/arrow/pull/7994#discussion_r506756240\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/CallOptions.java\n##########\n@@ -56,7 +56,7 @@ public static CallOption timeout(long duration, TimeUnit unit) {\n   /**\n    * CallOptions specific to GRPC stubs.\n    */\n-  interface GrpcCallOption extends CallOption {\n+  public interface GrpcCallOption extends CallOption {\n\nReview comment:\n       @lidavidm Moving `GrpcCallOption` to `flight-grpc` adds a circular dependency since `flight-grpc` is dependent on `flight-core` for FlightProducer and FlightClient.\r\n   \r\n   Is the intention behind this comment to:\r\n   - move all grpc related dependencies to `flight-grpc` module?\r\n   - Or just move the `GrpcCallOption` to `org.apache.arrow.flight.grpc` package ?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-16T23:03:47.201+0000",
                    "updated": "2020-10-16T23:03:47.201+0000",
                    "started": "2020-10-16T23:03:47.201+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501703",
                    "issueId": "13323606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606/worklog/501706",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #7994:\nURL: https://github.com/apache/arrow/pull/7994#discussion_r506759118\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/CallOptions.java\n##########\n@@ -56,7 +56,7 @@ public static CallOption timeout(long duration, TimeUnit unit) {\n   /**\n    * CallOptions specific to GRPC stubs.\n    */\n-  interface GrpcCallOption extends CallOption {\n+  public interface GrpcCallOption extends CallOption {\n\nReview comment:\n       Hmm, that is a problem. We also don't want to expose gRPC details from the core package, though...leaving this as-is is probably simplest, though, seeing as a non-gRPC flight implementation is still a ways off.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-16T23:16:59.843+0000",
                    "updated": "2020-10-16T23:16:59.843+0000",
                    "started": "2020-10-16T23:16:59.843+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501706",
                    "issueId": "13323606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606/worklog/502372",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "keeratsingh commented on a change in pull request #7994:\nURL: https://github.com/apache/arrow/pull/7994#discussion_r507971481\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/CallOptions.java\n##########\n@@ -56,7 +56,7 @@ public static CallOption timeout(long duration, TimeUnit unit) {\n   /**\n    * CallOptions specific to GRPC stubs.\n    */\n-  interface GrpcCallOption extends CallOption {\n+  public interface GrpcCallOption extends CallOption {\n\nReview comment:\n       Thank you for the prompt response @lidavidm, keeping this as-is.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-19T18:25:08.394+0000",
                    "updated": "2020-10-19T18:25:08.394+0000",
                    "started": "2020-10-19T18:25:08.393+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "502372",
                    "issueId": "13323606"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606/worklog/502373",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "keeratsingh commented on a change in pull request #7994:\nURL: https://github.com/apache/arrow/pull/7994#discussion_r507971603\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/FlightRuntimeException.java\n##########\n@@ -29,7 +29,7 @@\n   /**\n    * Create a new exception from the given status.\n    */\n-  FlightRuntimeException(CallStatus status) {\n+  public FlightRuntimeException(CallStatus status) {\n\nReview comment:\n       Addressed in commit:\r\n   https://github.com/apache/arrow/pull/7994/commits/f60fc4a27cfadedc4583548debde52369c725c4a\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-19T18:25:21.431+0000",
                    "updated": "2020-10-19T18:25:21.431+0000",
                    "started": "2020-10-19T18:25:21.430+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "502373",
                    "issueId": "13323606"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 18600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@68c8232a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@53aeeaa6[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@198ccef9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3d53ecb4[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d909e3a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6ea22abc[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1126ca97[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@33b2a24b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4aaa8b49[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@35a2bf6a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1277a93b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3471f1c4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18600,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Nov 02 14:34:15 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-11-02T14:34:15.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9804/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2020-08-19T19:29:59.000+0000",
        "updated": "2020-11-09T21:54:32.000+0000",
        "timeoriginalestimate": null,
        "description": "Redesign the authentication process to:\r\n * Decouple authentication from the handshake\r\n * Provide better integration with standard HTTP authentication mechanisms.\r\n * Simplify the handshake process:\r\n ** Make this single-stage rather than potentially multi-stage.\r\n ** Remove auth payloads.\r\n\r\nPlease see this\u00a0[document|https://docs.google.com/document/d/1k3hdbGeE89jiMZ2oKpoIZEs7HAQmVs_RWOmU7fTpLjQ/] and [PR|https://github.com/apache/arrow/pull/7994]",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[FlightRPC] Authentication Redesign",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606/comment/17180778",
                    "id": "17180778",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jduong",
                        "name": "jduong",
                        "key": "jduong",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "James Duong",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "The work done here to decouple auth from the handshake makes it much easier to implement ARROW-7579.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jduong",
                        "name": "jduong",
                        "key": "jduong",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "James Duong",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-08-19T19:33:49.391+0000",
                    "updated": "2020-08-19T19:33:49.391+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13323606/comment/17224689",
                    "id": "17224689",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 7994\n[https://github.com/apache/arrow/pull/7994]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-11-02T14:34:15.160+0000",
                    "updated": "2020-11-02T14:34:15.160+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0hxbc:",
        "customfield_12314139": null
    }
}