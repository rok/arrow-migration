{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13341893",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341893",
    "key": "ARROW-10673",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 3000,
            "total": 3000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 3000,
            "total": 3000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10673/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 5,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341893/worklog/514983",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao opened a new pull request #8730:\nURL: https://github.com/apache/arrow/pull/8730\n\n\n   Currently, we `collect` and `sort` the record batches from the incoming part of `Sort` on `execute`. However, there is no need to do so: we can postpone that to the stream, like we do for our aggregates. This allow executors to postpone the heavy operation of collecting to when they want the first (and only) batch of the stream.\r\n   \r\n   This PR does exactly this: it postpones the execution to when needed.\r\n   \r\n   This code's design is based on HashAggregate, that also uses a one shot channel.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-21T07:51:35.721+0000",
                    "updated": "2020-11-21T07:51:35.721+0000",
                    "started": "2020-11-21T07:51:35.720+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "514983",
                    "issueId": "13341893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341893/worklog/514984",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8730:\nURL: https://github.com/apache/arrow/pull/8730#issuecomment-731525971\n\n\n   https://issues.apache.org/jira/browse/ARROW-10673\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-21T08:06:03.645+0000",
                    "updated": "2020-11-21T08:06:03.645+0000",
                    "started": "2020-11-21T08:06:03.645+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "514984",
                    "issueId": "13341893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341893/worklog/515057",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8730:\nURL: https://github.com/apache/arrow/pull/8730#discussion_r528189265\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/sort.rs\n##########\n@@ -114,60 +121,128 @@ impl ExecutionPlan for SortExec {\n                 \"SortExec requires a single input partition\".to_owned(),\n             ));\n         }\n-        let it = self.input.execute(0).await?;\n-        let batches = common::collect(it).await?;\n-\n-        // combine all record batches into one for each column\n-        let combined_batch = RecordBatch::try_new(\n-            self.schema(),\n-            self.schema()\n-                .fields()\n-                .iter()\n-                .enumerate()\n-                .map(|(i, _)| -> Result<ArrayRef> {\n-                    Ok(concat(\n-                        &batches\n-                            .iter()\n-                            .map(|batch| batch.columns()[i].clone())\n-                            .collect::<Vec<ArrayRef>>(),\n-                    )?)\n-                })\n-                .collect::<Result<Vec<ArrayRef>>>()?,\n-        )?;\n+        let input = self.input.execute(0).await?;\n \n-        // sort combined record batch\n-        let indices = lexsort_to_indices(\n-            &self\n-                .expr\n-                .iter()\n-                .map(|e| e.evaluate_to_sort_column(&combined_batch))\n-                .collect::<Result<Vec<SortColumn>>>()?,\n-        )?;\n+        Ok(Box::pin(SortStream::new(input, self.expr.clone())))\n+    }\n+}\n \n-        // reorder all rows based on sorted indices\n-        let sorted_batch = RecordBatch::try_new(\n-            self.schema(),\n-            combined_batch\n-                .columns()\n-                .iter()\n-                .map(|column| -> Result<ArrayRef> {\n-                    Ok(take(\n-                        column,\n-                        &indices,\n-                        // disable bound check overhead since indices are already generated from\n-                        // the same record batch\n-                        Some(TakeOptions {\n-                            check_bounds: false,\n-                        }),\n-                    )?)\n-                })\n-                .collect::<Result<Vec<ArrayRef>>>()?,\n-        )?;\n+fn sort_batches(\n+    batches: &Vec<RecordBatch>,\n\nReview comment:\n       could be `&[RecordBatch]` here? just like expr.\n\n##########\nFile path: rust/datafusion/src/physical_plan/sort.rs\n##########\n@@ -114,60 +121,128 @@ impl ExecutionPlan for SortExec {\n                 \"SortExec requires a single input partition\".to_owned(),\n             ));\n         }\n-        let it = self.input.execute(0).await?;\n-        let batches = common::collect(it).await?;\n-\n-        // combine all record batches into one for each column\n-        let combined_batch = RecordBatch::try_new(\n-            self.schema(),\n-            self.schema()\n-                .fields()\n-                .iter()\n-                .enumerate()\n-                .map(|(i, _)| -> Result<ArrayRef> {\n-                    Ok(concat(\n-                        &batches\n-                            .iter()\n-                            .map(|batch| batch.columns()[i].clone())\n-                            .collect::<Vec<ArrayRef>>(),\n-                    )?)\n-                })\n-                .collect::<Result<Vec<ArrayRef>>>()?,\n-        )?;\n+        let input = self.input.execute(0).await?;\n \n-        // sort combined record batch\n-        let indices = lexsort_to_indices(\n-            &self\n-                .expr\n-                .iter()\n-                .map(|e| e.evaluate_to_sort_column(&combined_batch))\n-                .collect::<Result<Vec<SortColumn>>>()?,\n-        )?;\n+        Ok(Box::pin(SortStream::new(input, self.expr.clone())))\n+    }\n+}\n \n-        // reorder all rows based on sorted indices\n-        let sorted_batch = RecordBatch::try_new(\n-            self.schema(),\n-            combined_batch\n-                .columns()\n-                .iter()\n-                .map(|column| -> Result<ArrayRef> {\n-                    Ok(take(\n-                        column,\n-                        &indices,\n-                        // disable bound check overhead since indices are already generated from\n-                        // the same record batch\n-                        Some(TakeOptions {\n-                            check_bounds: false,\n-                        }),\n-                    )?)\n-                })\n-                .collect::<Result<Vec<ArrayRef>>>()?,\n-        )?;\n+fn sort_batches(\n+    batches: &Vec<RecordBatch>,\n+    schema: &SchemaRef,\n+    expr: &[PhysicalSortExpr],\n+) -> ArrowResult<RecordBatch> {\n+    // combine all record batches into one for each column\n+    let combined_batch = RecordBatch::try_new(\n+        schema.clone(),\n+        schema\n+            .fields()\n+            .iter()\n+            .enumerate()\n+            .map(|(i, _)| {\n+                concat(\n+                    &batches\n+                        .iter()\n+                        .map(|batch| batch.columns()[i].clone())\n+                        .collect::<Vec<ArrayRef>>(),\n+                )\n+            })\n+            .collect::<ArrowResult<Vec<ArrayRef>>>()?,\n+    )?;\n+\n+    // sort combined record batch\n+    let indices = lexsort_to_indices(\n+        &expr\n+            .iter()\n+            .map(|e| e.evaluate_to_sort_column(&combined_batch))\n+            .collect::<Result<Vec<SortColumn>>>()\n+            .map_err(DataFusionError::into_arrow_external_error)?,\n+    )?;\n+\n+    // reorder all rows based on sorted indices\n+    RecordBatch::try_new(\n+        schema.clone(),\n+        combined_batch\n+            .columns()\n+            .iter()\n+            .map(|column| {\n+                take(\n+                    column,\n+                    &indices,\n+                    // disable bound check overhead since indices are already generated from\n+                    // the same record batch\n+                    Some(TakeOptions {\n+                        check_bounds: false,\n+                    }),\n+                )\n+            })\n+            .collect::<ArrowResult<Vec<ArrayRef>>>()?,\n+    )\n+}\n+\n+pin_project! {\n+    struct SortStream {\n+        #[pin]\n+        output: futures::channel::oneshot::Receiver<ArrowResult<RecordBatch>>,\n+        finished: bool,\n+        schema: SchemaRef,\n+    }\n+}\n+\n+impl SortStream {\n+    fn new(input: SendableRecordBatchStream, expr: Vec<PhysicalSortExpr>) -> Self {\n\nReview comment:\n       Could be `&[PhysicalSortExpr]`  here?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-21T14:03:24.638+0000",
                    "updated": "2020-11-21T14:03:24.638+0000",
                    "started": "2020-11-21T14:03:24.638+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515057",
                    "issueId": "13341893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341893/worklog/515067",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8730:\nURL: https://github.com/apache/arrow/pull/8730#discussion_r528201530\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/sort.rs\n##########\n@@ -114,60 +121,128 @@ impl ExecutionPlan for SortExec {\n                 \"SortExec requires a single input partition\".to_owned(),\n             ));\n         }\n-        let it = self.input.execute(0).await?;\n-        let batches = common::collect(it).await?;\n-\n-        // combine all record batches into one for each column\n-        let combined_batch = RecordBatch::try_new(\n-            self.schema(),\n-            self.schema()\n-                .fields()\n-                .iter()\n-                .enumerate()\n-                .map(|(i, _)| -> Result<ArrayRef> {\n-                    Ok(concat(\n-                        &batches\n-                            .iter()\n-                            .map(|batch| batch.columns()[i].clone())\n-                            .collect::<Vec<ArrayRef>>(),\n-                    )?)\n-                })\n-                .collect::<Result<Vec<ArrayRef>>>()?,\n-        )?;\n+        let input = self.input.execute(0).await?;\n \n-        // sort combined record batch\n-        let indices = lexsort_to_indices(\n-            &self\n-                .expr\n-                .iter()\n-                .map(|e| e.evaluate_to_sort_column(&combined_batch))\n-                .collect::<Result<Vec<SortColumn>>>()?,\n-        )?;\n+        Ok(Box::pin(SortStream::new(input, self.expr.clone())))\n+    }\n+}\n \n-        // reorder all rows based on sorted indices\n-        let sorted_batch = RecordBatch::try_new(\n-            self.schema(),\n-            combined_batch\n-                .columns()\n-                .iter()\n-                .map(|column| -> Result<ArrayRef> {\n-                    Ok(take(\n-                        column,\n-                        &indices,\n-                        // disable bound check overhead since indices are already generated from\n-                        // the same record batch\n-                        Some(TakeOptions {\n-                            check_bounds: false,\n-                        }),\n-                    )?)\n-                })\n-                .collect::<Result<Vec<ArrayRef>>>()?,\n-        )?;\n+fn sort_batches(\n+    batches: &Vec<RecordBatch>,\n+    schema: &SchemaRef,\n+    expr: &[PhysicalSortExpr],\n+) -> ArrowResult<RecordBatch> {\n+    // combine all record batches into one for each column\n+    let combined_batch = RecordBatch::try_new(\n+        schema.clone(),\n+        schema\n+            .fields()\n+            .iter()\n+            .enumerate()\n+            .map(|(i, _)| {\n+                concat(\n+                    &batches\n+                        .iter()\n+                        .map(|batch| batch.columns()[i].clone())\n+                        .collect::<Vec<ArrayRef>>(),\n+                )\n+            })\n+            .collect::<ArrowResult<Vec<ArrayRef>>>()?,\n+    )?;\n+\n+    // sort combined record batch\n+    let indices = lexsort_to_indices(\n+        &expr\n+            .iter()\n+            .map(|e| e.evaluate_to_sort_column(&combined_batch))\n+            .collect::<Result<Vec<SortColumn>>>()\n+            .map_err(DataFusionError::into_arrow_external_error)?,\n+    )?;\n+\n+    // reorder all rows based on sorted indices\n+    RecordBatch::try_new(\n+        schema.clone(),\n+        combined_batch\n+            .columns()\n+            .iter()\n+            .map(|column| {\n+                take(\n+                    column,\n+                    &indices,\n+                    // disable bound check overhead since indices are already generated from\n+                    // the same record batch\n+                    Some(TakeOptions {\n+                        check_bounds: false,\n+                    }),\n+                )\n+            })\n+            .collect::<ArrowResult<Vec<ArrayRef>>>()?,\n+    )\n+}\n+\n+pin_project! {\n+    struct SortStream {\n+        #[pin]\n+        output: futures::channel::oneshot::Receiver<ArrowResult<RecordBatch>>,\n+        finished: bool,\n+        schema: SchemaRef,\n+    }\n+}\n+\n+impl SortStream {\n+    fn new(input: SendableRecordBatchStream, expr: Vec<PhysicalSortExpr>) -> Self {\n+        let (tx, rx) = futures::channel::oneshot::channel();\n+\n+        let schema = input.schema();\n+        tokio::spawn(async move {\n+            let schema = input.schema();\n+            let sorted_batch = common::collect(input)\n\nReview comment:\n       this is good -- it also only starts fetching the input when a call to `execute` is made (aka when the parent operator is read for data from the sort). \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-21T14:21:23.306+0000",
                    "updated": "2020-11-21T14:21:23.306+0000",
                    "started": "2020-11-21T14:21:23.306+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515067",
                    "issueId": "13341893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341893/worklog/515170",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb closed pull request #8730:\nURL: https://github.com/apache/arrow/pull/8730\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-21T23:07:11.818+0000",
                    "updated": "2020-11-21T23:07:11.818+0000",
                    "started": "2020-11-21T23:07:11.818+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515170",
                    "issueId": "13341893"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 3000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4abb8a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f3c5199[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a1a6ddd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@77c7579e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@50184843[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@570c70b6[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1e319b0f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@538754f0[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@414f5493[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@757205cc[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6789018e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@ec0f95b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 3000,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Nov 21 23:07:02 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-11-21T23:07:02.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10673/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-11-21T07:47:00.000+0000",
        "updated": "2020-11-21T23:07:12.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 3000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Make sort be computed on the stream",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341893/comment/17236811",
                    "id": "17236811",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 8730\n[https://github.com/apache/arrow/pull/8730]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-11-21T23:07:02.470+0000",
                    "updated": "2020-11-21T23:07:02.470+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0kt3c:",
        "customfield_12314139": null
    }
}