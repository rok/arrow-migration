{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13155690",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155690",
    "key": "ARROW-2517",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=teddy.choi",
            "name": "teddy.choi",
            "key": "teddy.choi",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=teddy.choi&avatarId=17686",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=teddy.choi&avatarId=17686",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=teddy.choi&avatarId=17686",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=teddy.choi&avatarId=17686"
            },
            "displayName": "Teddy Choi",
            "active": true,
            "timeZone": "Asia/Seoul"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=teddy.choi",
            "name": "teddy.choi",
            "key": "teddy.choi",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=teddy.choi&avatarId=17686",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=teddy.choi&avatarId=17686",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=teddy.choi&avatarId=17686",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=teddy.choi&avatarId=17686"
            },
            "displayName": "Teddy Choi",
            "active": true,
            "timeZone": "Asia/Seoul"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=teddy.choi",
            "name": "teddy.choi",
            "key": "teddy.choi",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=teddy.choi&avatarId=17686",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=teddy.choi&avatarId=17686",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=teddy.choi&avatarId=17686",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=teddy.choi&avatarId=17686"
            },
            "displayName": "Teddy Choi",
            "active": true,
            "timeZone": "Asia/Seoul"
        },
        "aggregateprogress": {
            "progress": 1200,
            "total": 1200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 1200,
            "total": 1200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2517/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 2,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155690/worklog/100966",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pudidic commented on a change in pull request #1965: ARROW-2517: [Java] Add list<decimal> writer\nURL: https://github.com/apache/arrow/pull/1965#discussion_r187506451\n \n \n\n ##########\n File path: java/vector/src/main/codegen/templates/AbstractPromotableFieldWriter.java\n ##########\n @@ -45,6 +46,7 @@\n    * @return the corresponding field writer\n    */\n   abstract protected FieldWriter getWriter(MinorType type);\n+  abstract protected FieldWriter getWriter(MinorType type, ArrowType arrowType);\n \n Review comment:\n   I wrote it to write PromotableWriter.getWriter originally. However, it doesn't need to have it. I will remove it. Thanks for feedback.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-11T02:23:00.872+0000",
                    "updated": "2018-05-11T02:23:00.872+0000",
                    "started": "2018-05-11T02:23:00.872+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "100966",
                    "issueId": "13155690"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155690/worklog/101346",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "siddharthteotia closed pull request #1965: ARROW-2517: [Java] Add list<decimal> writer\nURL: https://github.com/apache/arrow/pull/1965\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/java/vector/src/main/codegen/templates/AbstractPromotableFieldWriter.java b/java/vector/src/main/codegen/templates/AbstractPromotableFieldWriter.java\nindex f2aefd1226..c39074229a 100644\n--- a/java/vector/src/main/codegen/templates/AbstractPromotableFieldWriter.java\n+++ b/java/vector/src/main/codegen/templates/AbstractPromotableFieldWriter.java\n@@ -18,6 +18,7 @@\n \n import io.netty.buffer.ArrowBuf;\n import org.apache.arrow.vector.types.Types;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.drill.common.types.TypeProtos.MinorType;\n \n <@pp.dropOutputFile />\ndiff --git a/java/vector/src/main/codegen/templates/UnionListWriter.java b/java/vector/src/main/codegen/templates/UnionListWriter.java\nindex eebf04431c..d41da20b18 100644\n--- a/java/vector/src/main/codegen/templates/UnionListWriter.java\n+++ b/java/vector/src/main/codegen/templates/UnionListWriter.java\n@@ -16,7 +16,12 @@\n  * limitations under the License.\n  */\n \n+import io.netty.buffer.ArrowBuf;\n+import org.apache.arrow.vector.complex.writer.DecimalWriter;\n+import org.apache.arrow.vector.holders.DecimalHolder;\n+\n import java.lang.UnsupportedOperationException;\n+import java.math.BigDecimal;\n \n <@pp.dropOutputFile />\n <@pp.changeOutputFile name=\"/org/apache/arrow/vector/complex/impl/UnionListWriter.java\" />\n@@ -107,6 +112,21 @@ public void setPosition(int index) {\n   </#if>\n   </#list></#list>\n \n+  @Override\n+  public DecimalWriter decimal() {\n+    return this;\n+  }\n+\n+  @Override\n+  public DecimalWriter decimal(String name, int scale, int precision) {\n+    return writer.decimal(name, scale, precision);\n+  }\n+\n+  @Override\n+  public DecimalWriter decimal(String name) {\n+    return writer.decimal(name);\n+  }\n+\n   @Override\n   public StructWriter struct() {\n     inStruct = true;\n@@ -153,6 +173,22 @@ public void end() {\n     inStruct = false;\n   }\n \n+  @Override\n+  public void write(DecimalHolder holder) {\n+    writer.write(holder);\n+    writer.setPosition(writer.idx()+1);\n+  }\n+\n+  public void writeDecimal(int start, ArrowBuf buffer) {\n+    writer.writeDecimal(start, buffer);\n+    writer.setPosition(writer.idx()+1);\n+  }\n+\n+  public void writeDecimal(BigDecimal value) {\n+    writer.writeDecimal(value);\n+    writer.setPosition(writer.idx()+1);\n+  }\n+\n   <#list vv.types as type>\n     <#list type.minor as minor>\n       <#assign name = minor.class?cap_first />\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/PromotableWriter.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/PromotableWriter.java\nindex c2121f143a..ab00db2d7d 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/PromotableWriter.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/PromotableWriter.java\n@@ -18,6 +18,7 @@\n \n package org.apache.arrow.vector.complex.impl;\n \n+import io.netty.buffer.ArrowBuf;\n import org.apache.arrow.vector.FieldVector;\n import org.apache.arrow.vector.ValueVector;\n import org.apache.arrow.vector.ZeroVector;\n@@ -26,11 +27,15 @@\n import org.apache.arrow.vector.complex.StructVector;\n import org.apache.arrow.vector.complex.UnionVector;\n import org.apache.arrow.vector.complex.writer.FieldWriter;\n+import org.apache.arrow.vector.holders.DecimalHolder;\n import org.apache.arrow.vector.types.Types.MinorType;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.arrow.vector.types.pojo.Field;\n import org.apache.arrow.vector.types.pojo.FieldType;\n import org.apache.arrow.vector.util.TransferPair;\n \n+import java.math.BigDecimal;\n+\n /**\n  * This FieldWriter implementation delegates all FieldWriter API calls to an inner FieldWriter. This inner field writer\n  * can start as a specific type, and this class will promote the writer to a UnionWriter if a call is made that the specifically\n@@ -43,12 +48,14 @@\n   private final ListVector listVector;\n   private final NullableStructWriterFactory nullableStructWriterFactory;\n   private int position;\n+  private final static int MAX_DECIMAL_PRECISION = 38;\n \n   private enum State {\n     UNTYPED, SINGLE, UNION\n   }\n \n   private MinorType type;\n+  private ArrowType arrowType;\n   private ValueVector vector;\n   private UnionVector unionVector;\n   private State state;\n@@ -89,9 +96,14 @@ private void init(ValueVector v) {\n   }\n \n   private void setWriter(ValueVector v) {\n+    setWriter(v, null);\n+  }\n+\n+  private void setWriter(ValueVector v, ArrowType arrowType) {\n     state = State.SINGLE;\n     vector = v;\n     type = v.getMinorType();\n+    this.arrowType = arrowType;\n     switch (type) {\n       case STRUCT:\n         writer = nullableStructWriterFactory.build((StructVector) vector);\n@@ -120,6 +132,10 @@ public void setPosition(int index) {\n   }\n \n   protected FieldWriter getWriter(MinorType type) {\n+    return getWriter(type, null);\n+  }\n+\n+  protected FieldWriter getWriter(MinorType type, ArrowType arrowType) {\n     if (state == State.UNION) {\n       ((UnionWriter) writer).getWriter(type);\n     } else if (state == State.UNTYPED) {\n@@ -127,9 +143,12 @@ protected FieldWriter getWriter(MinorType type) {\n         // ???\n         return null;\n       }\n-      ValueVector v = listVector.addOrGetVector(FieldType.nullable(type.getType())).getVector();\n+      if (arrowType == null) {\n+        arrowType = type.getType();\n+      }\n+      ValueVector v = listVector.addOrGetVector(FieldType.nullable(arrowType)).getVector();\n       v.allocateNew();\n-      setWriter(v);\n+      setWriter(v, arrowType);\n       writer.setPosition(position);\n     } else if (type != this.type) {\n       promoteToUnion();\n@@ -169,6 +188,36 @@ private FieldWriter promoteToUnion() {\n     return writer;\n   }\n \n+  @Override\n+  public void write(DecimalHolder holder) {\n+    // Infer decimal scale and precision\n+    if (arrowType == null) {\n+      arrowType = new ArrowType.Decimal(MAX_DECIMAL_PRECISION, holder.scale);\n+    }\n+\n+    getWriter(MinorType.DECIMAL, arrowType).write(holder);\n+  }\n+\n+  @Override\n+  public void writeDecimal(int start, ArrowBuf buffer) {\n+    // Cannot infer decimal scale and precision\n+    if (arrowType == null) {\n+      throw new IllegalStateException(\"Cannot infer decimal scale and precision\");\n+    }\n+\n+    getWriter(MinorType.DECIMAL, arrowType).writeDecimal(start, buffer);\n+  }\n+\n+  @Override\n+  public void writeDecimal(BigDecimal value) {\n+    // Infer decimal scale and precision\n+    if (arrowType == null) {\n+      arrowType = new ArrowType.Decimal(MAX_DECIMAL_PRECISION, value.scale());\n+    }\n+\n+    getWriter(MinorType.DECIMAL, arrowType).writeDecimal(value);\n+  }\n+\n   @Override\n   public void allocate() {\n     getWriter().allocate();\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/complex/writer/TestComplexWriter.java b/java/vector/src/test/java/org/apache/arrow/vector/complex/writer/TestComplexWriter.java\nindex e6475c390a..59035b99bb 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/complex/writer/TestComplexWriter.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/complex/writer/TestComplexWriter.java\n@@ -20,6 +20,7 @@\n \n import static org.junit.Assert.*;\n \n+import java.math.BigDecimal;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -52,6 +53,7 @@\n import org.apache.arrow.vector.complex.writer.BaseWriter.ComplexWriter;\n import org.apache.arrow.vector.complex.writer.BaseWriter.ListWriter;\n import org.apache.arrow.vector.complex.writer.BaseWriter.StructWriter;\n+import org.apache.arrow.vector.holders.DecimalHolder;\n import org.apache.arrow.vector.holders.IntHolder;\n import org.apache.arrow.vector.holders.NullableTimeStampNanoTZHolder;\n import org.apache.arrow.vector.types.pojo.ArrowType;\n@@ -65,6 +67,7 @@\n import org.apache.arrow.vector.types.pojo.FieldType;\n import org.apache.arrow.vector.util.CallBack;\n import org.apache.arrow.vector.util.DateUtility;\n+import org.apache.arrow.vector.util.DecimalUtility;\n import org.apache.arrow.vector.util.JsonStringArrayList;\n import org.apache.arrow.vector.util.JsonStringHashMap;\n import org.apache.arrow.vector.util.Text;\n@@ -248,6 +251,41 @@ public void listScalarType() {\n     }\n   }\n \n+  @Test\n+  public void listDecimalType() {\n+    ListVector listVector = ListVector.empty(\"list\", allocator);\n+    listVector.allocateNew();\n+    UnionListWriter listWriter = new UnionListWriter(listVector);\n+    DecimalHolder holder = new DecimalHolder();\n+    holder.buffer = allocator.buffer(DecimalUtility.DECIMAL_BYTE_LENGTH);\n+    for (int i = 0; i < COUNT; i++) {\n+      listWriter.startList();\n+      for (int j = 0; j < i % 7; j++) {\n+        if (j % 2 == 0) {\n+          listWriter.writeDecimal(new BigDecimal(j));\n+        } else {\n+          DecimalUtility.writeBigDecimalToArrowBuf(new BigDecimal(j), holder.buffer, 0);\n+          holder.start = 0;\n+          holder.scale = 0;\n+          holder.precision = 10;\n+          listWriter.write(holder);\n+        }\n+      }\n+      listWriter.endList();\n+    }\n+    listWriter.setValueCount(COUNT);\n+    UnionListReader listReader = new UnionListReader(listVector);\n+    for (int i = 0; i < COUNT; i++) {\n+      listReader.setPosition(i);\n+      for (int j = 0; j < i % 7; j++) {\n+        listReader.next();\n+        Object expected = new BigDecimal(j);\n+        Object actual = listReader.reader().readBigDecimal();\n+        assertEquals(expected, actual);\n+      }\n+    }\n+  }\n+\n   @Test\n   public void listScalarTypeNullable() {\n     ListVector listVector = ListVector.empty(\"list\", allocator);\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-11T23:04:57.615+0000",
                    "updated": "2018-05-11T23:04:57.615+0000",
                    "started": "2018-05-11T23:04:57.615+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "101346",
                    "issueId": "13155690"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 1200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@31cb47d4[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@642f5071[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@11ea0998[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@f587f0c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42880622[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1801612a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@59e61d7b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@158ab954[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@17b114d1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@42a3f3c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6dcef707[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2dceb3f3[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 1200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Mar 14 06:04:52 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-06-27T06:46:23.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2517/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2018-04-27T12:06:15.000+0000",
        "updated": "2019-06-27T06:46:23.000+0000",
        "timeoriginalestimate": null,
        "description": "Apache Arrow have writer interface for list of decimal\u00a0without implementation. It will follow\u00a0the current interface and will infer the scale from BigDecimal or DecimalHolder if it can.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 1200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Add list<decimal> writer",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155690/comment/16464827",
                    "id": "16464827",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jnadeau",
                        "name": "jnadeau",
                        "key": "jnadeau",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Jacques Nadeau",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Big question here from my perspective is how we want to represent this since you could have a mixed decimal. For example: decimal(30,2) and decimal (20,4) or something. This means the union concept needs to support\u00a0multiple scale/precisions somehow.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jnadeau",
                        "name": "jnadeau",
                        "key": "jnadeau",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Jacques Nadeau",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2018-05-05T16:29:19.344+0000",
                    "updated": "2018-05-05T16:29:19.344+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13155690/comment/16792371",
                    "id": "16792371",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Looks like this was merged.\u00a0https://github.com/apache/arrow/pull/1965",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-03-14T06:04:52.842+0000",
                    "updated": "2019-03-14T06:04:52.842+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|i3t3qf:",
        "customfield_12314139": null
    }
}