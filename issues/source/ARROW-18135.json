{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13489345",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13489345",
    "key": "ARROW-18135",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12352360",
                "id": "12352360",
                "description": "",
                "name": "11.0.0",
                "archived": false,
                "released": false
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
            "name": "rtpsw",
            "key": "JIRAUSER284707",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
            },
            "displayName": "Yaron Gvili",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
            "name": "rtpsw",
            "key": "JIRAUSER284707",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
            },
            "displayName": "Yaron Gvili",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
            "name": "rtpsw",
            "key": "JIRAUSER284707",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
            },
            "displayName": "Yaron Gvili",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-18135/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 8,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13489345/worklog/819398",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw opened a new pull request, #14480:\nURL: https://github.com/apache/arrow/pull/14480\n\n   See https://issues.apache.org/jira/browse/ARROW-18135\n\n\n",
                    "created": "2022-10-23T07:20:07.028+0000",
                    "updated": "2022-10-23T07:20:07.028+0000",
                    "started": "2022-10-23T07:20:07.028+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "819398",
                    "issueId": "13489345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13489345/worklog/819399",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14480:\nURL: https://github.com/apache/arrow/pull/14480#issuecomment-1288034727\n\n   https://issues.apache.org/jira/browse/ARROW-18135\n\n\n",
                    "created": "2022-10-23T07:20:25.052+0000",
                    "updated": "2022-10-23T07:20:25.052+0000",
                    "started": "2022-10-23T07:20:25.051+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "819399",
                    "issueId": "13489345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13489345/worklog/819772",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw commented on PR #14480:\nURL: https://github.com/apache/arrow/pull/14480#issuecomment-1289311266\n\n   @lidavidm, would you be able to review this, once the release work is done?\n\n\n",
                    "created": "2022-10-24T16:46:08.582+0000",
                    "updated": "2022-10-24T16:46:08.582+0000",
                    "started": "2022-10-24T16:46:08.582+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "819772",
                    "issueId": "13489345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13489345/worklog/819928",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #14480:\nURL: https://github.com/apache/arrow/pull/14480#discussion_r1004119438\n\n\n##########\ncpp/src/arrow/compute/exec/exec_plan.cc:\n##########\n@@ -602,7 +602,9 @@ Future<std::vector<ExecBatch>> DeclarationToExecBatchesAsync(Declaration declara\n       .Then([collected_fut, exec_plan]() -> Result<std::vector<ExecBatch>> {\n         ARROW_ASSIGN_OR_RAISE(auto collected, collected_fut.result());\n         return ::arrow::internal::MapVector(\n-            [](std::optional<ExecBatch> batch) { return std::move(*batch); },\n+            [](std::optional<ExecBatch> batch) {\n+              return ARROW_PREDICT_TRUE(batch) ? std::move(*batch) : ExecBatch();\n\nReview Comment:\n   This is fine with me, but could also use https://en.cppreference.com/w/cpp/utility/optional/value_or for concision.\n\n\n\n",
                    "created": "2022-10-25T07:45:48.690+0000",
                    "updated": "2022-10-25T07:45:48.690+0000",
                    "started": "2022-10-25T07:45:48.690+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "819928",
                    "issueId": "13489345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13489345/worklog/820029",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw commented on code in PR #14480:\nURL: https://github.com/apache/arrow/pull/14480#discussion_r1004481381\n\n\n##########\ncpp/src/arrow/compute/exec/exec_plan.cc:\n##########\n@@ -602,7 +602,9 @@ Future<std::vector<ExecBatch>> DeclarationToExecBatchesAsync(Declaration declara\n       .Then([collected_fut, exec_plan]() -> Result<std::vector<ExecBatch>> {\n         ARROW_ASSIGN_OR_RAISE(auto collected, collected_fut.result());\n         return ::arrow::internal::MapVector(\n-            [](std::optional<ExecBatch> batch) { return std::move(*batch); },\n+            [](std::optional<ExecBatch> batch) {\n+              return ARROW_PREDICT_TRUE(batch) ? std::move(*batch) : ExecBatch();\n\nReview Comment:\n   Does `value_or` use something like `ARROW_PREDICT_TRUE` underneath? Granted, the code changes here are not in performance-critical code, though they such code may follow the example set here. Bottom line, if you want the conciseness change, I'd be OK doing it.\n\n\n\n",
                    "created": "2022-10-25T13:21:51.204+0000",
                    "updated": "2022-10-25T13:21:51.204+0000",
                    "started": "2022-10-25T13:21:51.204+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820029",
                    "issueId": "13489345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13489345/worklog/820047",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #14480:\nURL: https://github.com/apache/arrow/pull/14480#discussion_r1004535775\n\n\n##########\ncpp/src/arrow/compute/exec/exec_plan.cc:\n##########\n@@ -602,7 +602,9 @@ Future<std::vector<ExecBatch>> DeclarationToExecBatchesAsync(Declaration declara\n       .Then([collected_fut, exec_plan]() -> Result<std::vector<ExecBatch>> {\n         ARROW_ASSIGN_OR_RAISE(auto collected, collected_fut.result());\n         return ::arrow::internal::MapVector(\n-            [](std::optional<ExecBatch> batch) { return std::move(*batch); },\n+            [](std::optional<ExecBatch> batch) {\n+              return ARROW_PREDICT_TRUE(batch) ? std::move(*batch) : ExecBatch();\n\nReview Comment:\n   > Does value_or use something like ARROW_PREDICT_TRUE underneath?\r\n   \r\n   Probably not, but that probably doesn't matter either.\n\n\n\n",
                    "created": "2022-10-25T14:05:25.214+0000",
                    "updated": "2022-10-25T14:05:25.214+0000",
                    "started": "2022-10-25T14:05:25.214+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820047",
                    "issueId": "13489345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13489345/worklog/820468",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou merged PR #14480:\nURL: https://github.com/apache/arrow/pull/14480\n\n\n",
                    "created": "2022-10-26T12:11:55.334+0000",
                    "updated": "2022-10-26T12:11:55.334+0000",
                    "started": "2022-10-26T12:11:55.334+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820468",
                    "issueId": "13489345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13489345/worklog/821460",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on PR #14480:\nURL: https://github.com/apache/arrow/pull/14480#issuecomment-1295064155\n\n   Benchmark runs are scheduled for baseline = ede0b594468b997212f599455620649925eab8fd and contender = 53023b3b8634f22f5ec8fd7b7035d98ed54f315e. 53023b3b8634f22f5ec8fd7b7035d98ed54f315e is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/95b2f0d82df6491f98799c7034c19a90...e95aafef15ed49b9a3c272e96e6d2d76/)\n   [Failed :arrow_down:0.0% :arrow_up:0.0%] [test-mac-arm](https://conbench.ursa.dev/compare/runs/efc7ec36e2f84cf495e26c7d8fba271a...a4caeb72a9b442999ad644cc4287b6fd/)\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/6e557d94d5884802a941f7f779bd0b1b...cdae57d0e81e48d68d7c7622e3f246d0/)\n   [Finished :arrow_down:0.61% :arrow_up:0.0%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/141a089661e84d32940c13d85c1a46fe...aabe63f542634dea877f79c7d91e3fa6/)\n   Buildkite builds:\n   [Finished] [`53023b3b` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1766)\n   [Failed] [`53023b3b` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1787)\n   [Finished] [`53023b3b` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1753)\n   [Finished] [`53023b3b` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1779)\n   [Finished] [`ede0b594` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1765)\n   [Failed] [`ede0b594` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1786)\n   [Finished] [`ede0b594` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1752)\n   [Finished] [`ede0b594` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1778)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python, R. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n",
                    "created": "2022-10-28T14:22:44.621+0000",
                    "updated": "2022-10-28T14:22:44.621+0000",
                    "started": "2022-10-28T14:22:44.620+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "821460",
                    "issueId": "13489345"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 4800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@582f8c28[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a44ecb6[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ccfc51c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@11e3bb6f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@260ca1cb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@343ca746[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@56b963f8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5a8d9283[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@194c62e0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@489be018[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55a0ec50[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@638f65ed[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Oct 26 12:11:55 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": [
            "C++"
        ],
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-10-26T12:11:55.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-18135/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-10-23T06:43:36.000+0000",
        "updated": "2022-10-28T14:22:44.000+0000",
        "timeoriginalestimate": null,
        "description": "Here is a build log of the master branch that shows the warnings:\r\n{code:java}\r\n[131/534] Building CXX object src/arrow/CMakeFiles/arrow_objlib.dir/compute/exec/exec_plan.cc.o\r\nIn file included from /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/exec/exec_plan.cc:25:\r\nIn constructor \u2018arrow::compute::ExecBatch::ExecBatch(arrow::compute::ExecBatch&&)\u2019,\r\n\u00a0 \u00a0 inlined from \u2018arrow::compute::DeclarationToExecBatchesAsync(arrow::compute::Declaration, arrow::compute::ExecContext*)::<lambda()>::<lambda(std::optional<arrow::compute::ExecBatch>)>\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/exec/exec_plan.cc:605:73,\r\n\u00a0 \u00a0 inlined from \u2018_OIter std::transform(_IIter, _IIter, _OIter, _UnaryOperation) [with _IIter = std::move_iterator<__gnu_cxx::__normal_iterator<std::optional<arrow::compute::ExecBatch>*, std::vector<std::optional<arrow::compute::ExecBatch>, std::allocator<std::optional<arrow::compute::ExecBatch> > > > >; _OIter = std::back_insert_iterator<std::vector<arrow::compute::ExecBatch> >; _UnaryOperation = arrow::compute::DeclarationToExecBatchesAsync(arrow::compute::Declaration, arrow::compute::ExecContext*)::<lambda()>::<lambda(std::optional<arrow::compute::ExecBatch>)>]\u2019 at /usr/include/c++/11/bits/stl_algo.h:4296:12,\r\n\u00a0 \u00a0 inlined from \u2018std::vector<To> arrow::internal::MapVector(Fn&&, std::vector<_ValT>&&) [with Fn = arrow::compute::DeclarationToExecBatchesAsync(arrow::compute::Declaration, arrow::compute::ExecContext*)::<lambda()>::<lambda(std::optional<arrow::compute::ExecBatch>)>; From = std::optional<arrow::compute::ExecBatch>; To = arrow::compute::ExecBatch]\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/util/vector.h:102:17,\r\n\u00a0 \u00a0 inlined from \u2018arrow::compute::DeclarationToExecBatchesAsync(arrow::compute::Declaration, arrow::compute::ExecContext*)::<lambda()>\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/exec/exec_plan.cc:604:44,\r\n\u00a0 \u00a0 inlined from \u2018typename std::enable_if<(((! std::is_void<ContinueResult>::value) && (! arrow::detail::is_future<ContinueResult>::value)) && ((! NextFuture::is_empty) || std::is_same<ContinueResult, arrow::Status>::value))>::type arrow::detail::ContinueFuture::operator()(NextFuture, ContinueFunc&&, Args&& ...) const [with ContinueFunc = arrow::compute::DeclarationToExecBatchesAsync(arrow::compute::Declaration, arrow::compute::ExecContext*)::<lambda()>; Args = {}; ContinueResult = arrow::Result<std::vector<arrow::compute::ExecBatch> >; NextFuture = arrow::Future<std::vector<arrow::compute::ExecBatch> >]\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/util/future.h:150:22,\r\n\u00a0 \u00a0 inlined from \u2018void arrow::detail::ContinueFuture::IgnoringArgsIf(std::true_type, NextFuture&&, ContinueFunc&&, Args&& ...) const [with ContinueFunc = arrow::compute::DeclarationToExecBatchesAsync(arrow::compute::Declaration, arrow::compute::ExecContext*)::<lambda()>; NextFuture = arrow::Future<std::vector<arrow::compute::ExecBatch> >; Args = {const arrow::internal::Empty&}]\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/util/future.h:188:15,\r\n\u00a0 \u00a0 inlined from \u2018void arrow::Future<T>::ThenOnComplete<OnSuccess, OnFailure>::operator()(const arrow::Result<T>&) && [with OnSuccess = arrow::compute::DeclarationToExecBatchesAsync(arrow::compute::Declaration, arrow::compute::ExecContext*)::<lambda()>; OnFailure = arrow::Future<>::PassthruOnFailure<arrow::compute::DeclarationToExecBatchesAsync(arrow::compute::Declaration, arrow::compute::ExecContext*)::<lambda()> >; T = arrow::internal::Empty]\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/util/future.h:545:39:\r\n/mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/exec.h:179:21: warning: \u2018*(arrow::compute::ExecBatch*)((char*)&<unnamed> + offsetof(std::optional<arrow::compute::ExecBatch>,std::optional<arrow::compute::ExecBatch>::<unnamed>.std::_Optional_base<arrow::compute::ExecBatch, false, false>::<unnamed>)).arrow::compute::ExecBatch::length\u2019 may be used uninitialized [-Wmaybe-uninitialized]\r\n\u00a0 179 | struct ARROW_EXPORT ExecBatch {\r\n\u00a0 \u00a0 \u00a0 | \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ^~~~~~~~~\r\nIn file included from /usr/include/c++/11/functional:65,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/exec/exec_plan.h:22,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/exec/exec_plan.cc:18:\r\n/usr/include/c++/11/bits/stl_algo.h: In member function \u2018void arrow::Future<T>::ThenOnComplete<OnSuccess, OnFailure>::operator()(const arrow::Result<T>&) && [with OnSuccess = arrow::compute::DeclarationToExecBatchesAsync(arrow::compute::Declaration, arrow::compute::ExecContext*)::<lambda()>; OnFailure = arrow::Future<>::PassthruOnFailure<arrow::compute::DeclarationToExecBatchesAsync(arrow::compute::Declaration, arrow::compute::ExecContext*)::<lambda()> >; T = arrow::internal::Empty]\u2019:\r\n/usr/include/c++/11/bits/stl_algo.h:4296:31: note: \u2018<anonymous>\u2019 declared here\r\n\u00a04296 | \u00a0 \u00a0 \u00a0 \u00a0 *__result = __unary_op(*__first);\r\n\u00a0 \u00a0 \u00a0 | \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ~~~~~~~~~~^~~~~~~~~~\r\n[247/534] Building CXX object src/arrow/CMakeFiles/arrow_testing_objlib.dir/compute/exec/test_util.cc.o\r\nIn file included from /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/exec/test_util.h:29,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/exec/test_util.cc:18:\r\nIn constructor \u2018arrow::compute::ExecBatch::ExecBatch(arrow::compute::ExecBatch&&)\u2019,\r\n\u00a0 \u00a0 inlined from \u2018arrow::compute::StartAndCollect(arrow::compute::ExecPlan*, arrow::AsyncGenerator<std::optional<arrow::compute::ExecBatch> >)::<lambda()>::<lambda(std::optional<arrow::compute::ExecBatch>)>\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/exec/test_util.cc:192:73,\r\n\u00a0 \u00a0 inlined from \u2018_OIter std::transform(_IIter, _IIter, _OIter, _UnaryOperation) [with _IIter = std::move_iterator<__gnu_cxx::__normal_iterator<std::optional<arrow::compute::ExecBatch>*, std::vector<std::optional<arrow::compute::ExecBatch>, std::allocator<std::optional<arrow::compute::ExecBatch> > > > >; _OIter = std::back_insert_iterator<std::vector<arrow::compute::ExecBatch> >; _UnaryOperation = arrow::compute::StartAndCollect(arrow::compute::ExecPlan*, arrow::AsyncGenerator<std::optional<arrow::compute::ExecBatch> >)::<lambda()>::<lambda(std::optional<arrow::compute::ExecBatch>)>]\u2019 at /usr/include/c++/11/bits/stl_algo.h:4296:12,\r\n\u00a0 \u00a0 inlined from \u2018std::vector<To> arrow::internal::MapVector(Fn&&, std::vector<From>&&) [with Fn = arrow::compute::StartAndCollect(arrow::compute::ExecPlan*, arrow::AsyncGenerator<std::optional<arrow::compute::ExecBatch> >)::<lambda()>::<lambda(std::optional<arrow::compute::ExecBatch>)>; From = std::optional<arrow::compute::ExecBatch>; To = arrow::compute::ExecBatch]\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/util/vector.h:102:17,\r\n\u00a0 \u00a0 inlined from \u2018arrow::compute::StartAndCollect(arrow::compute::ExecPlan*, arrow::AsyncGenerator<std::optional<arrow::compute::ExecBatch> >)::<lambda()>\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/exec/test_util.cc:191:44,\r\n\u00a0 \u00a0 inlined from \u2018typename std::enable_if<(((! std::is_void<ContinueResult>::value) && (! arrow::detail::is_future<ContinueResult>::value)) && ((! NextFuture::is_empty) || std::is_same<ContinueResult, arrow::Status>::value))>::type arrow::detail::ContinueFuture::operator()(NextFuture, ContinueFunc&&, Args&& ...) const [with ContinueFunc = arrow::compute::StartAndCollect(arrow::compute::ExecPlan*, arrow::AsyncGenerator<std::optional<arrow::compute::ExecBatch> >)::<lambda()>; Args = {}; ContinueResult = arrow::Result<std::vector<arrow::compute::ExecBatch> >; NextFuture = arrow::Future<std::vector<arrow::compute::ExecBatch> >]\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/util/future.h:150:22,\r\n\u00a0 \u00a0 inlined from \u2018void arrow::detail::ContinueFuture::IgnoringArgsIf(std::true_type, NextFuture&&, ContinueFunc&&, Args&& ...) const [with ContinueFunc = arrow::compute::StartAndCollect(arrow::compute::ExecPlan*, arrow::AsyncGenerator<std::optional<arrow::compute::ExecBatch> >)::<lambda()>; NextFuture = arrow::Future<std::vector<arrow::compute::ExecBatch> >; Args = {const arrow::internal::Empty&}]\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/util/future.h:188:15,\r\n\u00a0 \u00a0 inlined from \u2018void arrow::Future<T>::ThenOnComplete<OnSuccess, OnFailure>::operator()(const arrow::Result<T>&) && [with OnSuccess = arrow::compute::StartAndCollect(arrow::compute::ExecPlan*, arrow::AsyncGenerator<std::optional<arrow::compute::ExecBatch> >)::<lambda()>; OnFailure = arrow::Future<>::PassthruOnFailure<arrow::compute::StartAndCollect(arrow::compute::ExecPlan*, arrow::AsyncGenerator<std::optional<arrow::compute::ExecBatch> >)::<lambda()> >; T = arrow::internal::Empty]\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/util/future.h:545:39,\r\n\u00a0 \u00a0 inlined from \u2018void arrow::Future<T>::WrapResultyOnComplete::Callback<OnComplete>::operator()(const arrow::FutureImpl&) && [with OnComplete = arrow::Future<>::ThenOnComplete<arrow::compute::StartAndCollect(arrow::compute::ExecPlan*, arrow::AsyncGenerator<std::optional<arrow::compute::ExecBatch> >)::<lambda()>, arrow::Future<>::PassthruOnFailure<arrow::compute::StartAndCollect(arrow::compute::ExecPlan*, arrow::AsyncGenerator<std::optional<arrow::compute::ExecBatch> >)::<lambda()> > >; T = arrow::internal::Empty]\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/util/future.h:442:31,\r\n\u00a0 \u00a0 inlined from \u2018R arrow::internal::FnOnce<R(A ...)>::FnImpl<Fn>::invoke(A&& ...) [with Fn = arrow::Future<>::WrapResultyOnComplete::Callback<arrow::Future<>::ThenOnComplete<arrow::compute::StartAndCollect(arrow::compute::ExecPlan*, arrow::AsyncGenerator<std::optional<arrow::compute::ExecBatch> >)::<lambda()>, arrow::Future<>::PassthruOnFailure<arrow::compute::StartAndCollect(arrow::compute::ExecPlan*, arrow::AsyncGenerator<std::optional<arrow::compute::ExecBatch> >)::<lambda()> > > >; R = void; A = {const arrow::FutureImpl&}]\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/util/functional.h:152:56:\r\n/mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/exec.h:179:21: warning: \u2018*(arrow::compute::ExecBatch*)((char*)&<unnamed> + offsetof(std::optional<arrow::compute::ExecBatch>,std::optional<arrow::compute::ExecBatch>::<unnamed>.std::_Optional_base<arrow::compute::ExecBatch, false, false>::<unnamed>)).arrow::compute::ExecBatch::length\u2019 may be used uninitialized [-Wmaybe-uninitialized]\r\n\u00a0 179 | struct ARROW_EXPORT ExecBatch {\r\n\u00a0 \u00a0 \u00a0 | \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ^~~~~~~~~\r\nIn file included from /usr/include/c++/11/algorithm:62,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/testing/gtest_util.h:20,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/exec/test_util.h:20,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/exec/test_util.cc:18:\r\n/usr/include/c++/11/bits/stl_algo.h: In member function \u2018R arrow::internal::FnOnce<R(A ...)>::FnImpl<Fn>::invoke(A&& ...) [with Fn = arrow::Future<>::WrapResultyOnComplete::Callback<arrow::Future<>::ThenOnComplete<arrow::compute::StartAndCollect(arrow::compute::ExecPlan*, arrow::AsyncGenerator<std::optional<arrow::compute::ExecBatch> >)::<lambda()>, arrow::Future<>::PassthruOnFailure<arrow::compute::StartAndCollect(arrow::compute::ExecPlan*, arrow::AsyncGenerator<std::optional<arrow::compute::ExecBatch> >)::<lambda()> > > >; R = void; A = {const arrow::FutureImpl&}]\u2019:\r\n/usr/include/c++/11/bits/stl_algo.h:4296:31: note: \u2018<anonymous>\u2019 declared here\r\n\u00a04296 | \u00a0 \u00a0 \u00a0 \u00a0 *__result = __unary_op(*__first);\r\n\u00a0 \u00a0 \u00a0 | \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ~~~~~~~~~~^~~~~~~~~~\r\n[381/534] Building CXX object src/arrow/compute/kernels/CMakeFiles/arrow-compute-aggregate-test.dir/hash_aggregate_test.cc.o\r\nIn file included from /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/kernel.h:32,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/function.h:27,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/api_aggregate.h:23,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/kernels/hash_aggregate_test.cc:31:\r\nIn constructor \u2018arrow::compute::ExecBatch::ExecBatch(arrow::compute::ExecBatch&&)\u2019,\r\n\u00a0 \u00a0 inlined from \u2018arrow::compute::{anonymous}::GroupByUsingExecPlan(const arrow::compute::BatchesWithSchema&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<arrow::compute::Aggregate>&, bool, arrow::compute::ExecContext*)::<lambda()>::<lambda(std::optional<arrow::compute::ExecBatch>)>\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/kernels/hash_aggregate_test.cc:155:77,\r\n\u00a0 \u00a0 inlined from \u2018_OIter std::transform(_IIter, _IIter, _OIter, _UnaryOperation) [with _IIter = std::move_iterator<__gnu_cxx::__normal_iterator<std::optional<arrow::compute::ExecBatch>*, std::vector<std::optional<arrow::compute::ExecBatch>, std::allocator<std::optional<arrow::compute::ExecBatch> > > > >; _OIter = std::back_insert_iterator<std::vector<arrow::compute::ExecBatch> >; _UnaryOperation = arrow::compute::{anonymous}::GroupByUsingExecPlan(const arrow::compute::BatchesWithSchema&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<arrow::compute::Aggregate>&, bool, arrow::compute::ExecContext*)::<lambda()>::<lambda(std::optional<arrow::compute::ExecBatch>)>]\u2019 at /usr/include/c++/11/bits/stl_algo.h:4296:12,\r\n\u00a0 \u00a0 inlined from \u2018std::vector<To> arrow::internal::MapVector(Fn&&, std::vector<_ValT>&&) [with Fn = arrow::compute::{anonymous}::GroupByUsingExecPlan(const arrow::compute::BatchesWithSchema&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<arrow::compute::Aggregate>&, bool, arrow::compute::ExecContext*)::<lambda()>::<lambda(std::optional<arrow::compute::ExecBatch>)>; From = std::optional<arrow::compute::ExecBatch>; To = arrow::compute::ExecBatch]\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/util/vector.h:102:17,\r\n\u00a0 \u00a0 inlined from \u2018arrow::compute::{anonymous}::GroupByUsingExecPlan(const arrow::compute::BatchesWithSchema&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<arrow::compute::Aggregate>&, bool, arrow::compute::ExecContext*)::<lambda()>\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/kernels/hash_aggregate_test.cc:154:48,\r\n\u00a0 \u00a0 inlined from \u2018typename std::enable_if<(((! std::is_void<ContinueResult>::value) && (! arrow::detail::is_future<ContinueResult>::value)) && ((! NextFuture::is_empty) || std::is_same<ContinueResult, arrow::Status>::value))>::type arrow::detail::ContinueFuture::operator()(NextFuture, ContinueFunc&&, Args&& ...) const [with ContinueFunc = arrow::compute::{anonymous}::GroupByUsingExecPlan(const arrow::compute::BatchesWithSchema&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<arrow::compute::Aggregate>&, bool, arrow::compute::ExecContext*)::<lambda()>; Args = {}; ContinueResult = arrow::Result<std::vector<arrow::compute::ExecBatch> >; NextFuture = arrow::Future<std::vector<arrow::compute::ExecBatch> >]\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/util/future.h:150:22,\r\n\u00a0 \u00a0 inlined from \u2018void arrow::detail::ContinueFuture::IgnoringArgsIf(std::true_type, NextFuture&&, ContinueFunc&&, Args&& ...) const [with ContinueFunc = arrow::compute::{anonymous}::GroupByUsingExecPlan(const arrow::compute::BatchesWithSchema&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<arrow::compute::Aggregate>&, bool, arrow::compute::ExecContext*)::<lambda()>; NextFuture = arrow::Future<std::vector<arrow::compute::ExecBatch> >; Args = {const arrow::internal::Empty&}]\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/util/future.h:188:15,\r\n\u00a0 \u00a0 inlined from \u2018void arrow::Future<T>::ThenOnComplete<OnSuccess, OnFailure>::operator()(const arrow::Result<T>&) && [with OnSuccess = arrow::compute::{anonymous}::GroupByUsingExecPlan(const arrow::compute::BatchesWithSchema&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<arrow::compute::Aggregate>&, bool, arrow::compute::ExecContext*)::<lambda()>; OnFailure = arrow::Future<>::PassthruOnFailure<arrow::compute::{anonymous}::GroupByUsingExecPlan(const arrow::compute::BatchesWithSchema&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<arrow::compute::Aggregate>&, bool, arrow::compute::ExecContext*)::<lambda()> >; T = arrow::internal::Empty]\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/util/future.h:545:39,\r\n\u00a0 \u00a0 inlined from \u2018void arrow::Future<T>::WrapResultyOnComplete::Callback<OnComplete>::operator()(const arrow::FutureImpl&) && [with OnComplete = arrow::Future<>::ThenOnComplete<arrow::compute::{anonymous}::GroupByUsingExecPlan(const arrow::compute::BatchesWithSchema&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<arrow::compute::Aggregate>&, bool, arrow::compute::ExecContext*)::<lambda()>, arrow::Future<>::PassthruOnFailure<arrow::compute::{anonymous}::GroupByUsingExecPlan(const arrow::compute::BatchesWithSchema&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<arrow::compute::Aggregate>&, bool, arrow::compute::ExecContext*)::<lambda()> > >; T = arrow::internal::Empty]\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/util/future.h:442:31,\r\n\u00a0 \u00a0 inlined from \u2018R arrow::internal::FnOnce<R(A ...)>::FnImpl<Fn>::invoke(A&& ...) [with Fn = arrow::Future<>::WrapResultyOnComplete::Callback<arrow::Future<>::ThenOnComplete<arrow::compute::{anonymous}::GroupByUsingExecPlan(const arrow::compute::BatchesWithSchema&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<arrow::compute::Aggregate>&, bool, arrow::compute::ExecContext*)::<lambda()>, arrow::Future<>::PassthruOnFailure<arrow::compute::{anonymous}::GroupByUsingExecPlan(const arrow::compute::BatchesWithSchema&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<arrow::compute::Aggregate>&, bool, arrow::compute::ExecContext*)::<lambda()> > > >; R = void; A = {const arrow::FutureImpl&}]\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/util/functional.h:152:56:\r\n/mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/exec.h:179:21: warning: \u2018*(arrow::compute::ExecBatch*)((char*)&<unnamed> + offsetof(std::optional<arrow::compute::ExecBatch>,std::optional<arrow::compute::ExecBatch>::<unnamed>.std::_Optional_base<arrow::compute::ExecBatch, false, false>::<unnamed>)).arrow::compute::ExecBatch::length\u2019 may be used uninitialized [-Wmaybe-uninitialized]\r\n\u00a0 179 | struct ARROW_EXPORT ExecBatch {\r\n\u00a0 \u00a0 \u00a0 | \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ^~~~~~~~~\r\nIn file included from /usr/include/c++/11/functional:65,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /usr/include/gtest/gtest-printers.h:103,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /usr/include/gtest/gtest-matchers.h:44,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /usr/include/gtest/internal/gtest-death-test-internal.h:39,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /usr/include/gtest/gtest-death-test.h:41,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /usr/include/gtest/gtest.h:64,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/kernels/hash_aggregate_test.cc:18:\r\n/usr/include/c++/11/bits/stl_algo.h: In member function \u2018R arrow::internal::FnOnce<R(A ...)>::FnImpl<Fn>::invoke(A&& ...) [with Fn = arrow::Future<>::WrapResultyOnComplete::Callback<arrow::Future<>::ThenOnComplete<arrow::compute::{anonymous}::GroupByUsingExecPlan(const arrow::compute::BatchesWithSchema&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<arrow::compute::Aggregate>&, bool, arrow::compute::ExecContext*)::<lambda()>, arrow::Future<>::PassthruOnFailure<arrow::compute::{anonymous}::GroupByUsingExecPlan(const arrow::compute::BatchesWithSchema&, const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<arrow::compute::Aggregate>&, bool, arrow::compute::ExecContext*)::<lambda()> > > >; R = void; A = {const arrow::FutureImpl&}]\u2019:\r\n/usr/include/c++/11/bits/stl_algo.h:4296:31: note: \u2018<anonymous>\u2019 declared here\r\n\u00a04296 | \u00a0 \u00a0 \u00a0 \u00a0 *__result = __unary_op(*__first);\r\n\u00a0 \u00a0 \u00a0 | \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ~~~~~~~~~~^~~~~~~~~~\r\n[466/534] Building CXX object src/arrow/dataset/CMakeFiles/arrow-dataset-scanner-test.dir/scanner_test.cc.o\r\nIn file included from /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/kernel.h:32,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/function.h:27,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/api_aggregate.h:23,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/exec/options.h:26,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/dataset/scanner.h:29,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/dataset/scanner_test.cc:18:\r\nIn constructor \u2018arrow::compute::ExecBatch::ExecBatch(arrow::compute::ExecBatch&&)\u2019,\r\n\u00a0 \u00a0 inlined from \u2018arrow::dataset::{anonymous}::TestPlan::Run()::<lambda()>::<lambda(std::optional<arrow::compute::ExecBatch>)>\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/dataset/scanner_test.cc:2160:84,\r\n\u00a0 \u00a0 inlined from \u2018_OIter std::transform(_IIter, _IIter, _OIter, _UnaryOperation) [with _IIter = std::move_iterator<__gnu_cxx::__normal_iterator<std::optional<arrow::compute::ExecBatch>*, std::vector<std::optional<arrow::compute::ExecBatch>, std::allocator<std::optional<arrow::compute::ExecBatch> > > > >; _OIter = std::back_insert_iterator<std::vector<arrow::compute::ExecBatch> >; _UnaryOperation = arrow::dataset::{anonymous}::TestPlan::Run()::<lambda()>::<lambda(std::optional<arrow::compute::ExecBatch>)>]\u2019 at /usr/include/c++/11/bits/stl_algo.h:4296:12,\r\n\u00a0 \u00a0 inlined from \u2018std::vector<To> arrow::internal::MapVector(Fn&&, std::vector<_ValT>&&) [with Fn = arrow::dataset::{anonymous}::TestPlan::Run()::<lambda()>::<lambda(std::optional<arrow::compute::ExecBatch>)>; From = std::optional<arrow::compute::ExecBatch>; To = arrow::compute::ExecBatch]\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/util/vector.h:102:17,\r\n\u00a0 \u00a0 inlined from \u2018arrow::dataset::{anonymous}::TestPlan::Run()::<lambda()>\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/dataset/scanner_test.cc:2159:46,\r\n\u00a0 \u00a0 inlined from \u2018typename std::enable_if<(((! std::is_void<ContinueResult>::value) && (! arrow::detail::is_future<ContinueResult>::value)) && ((! NextFuture::is_empty) || std::is_same<ContinueResult, arrow::Status>::value))>::type arrow::detail::ContinueFuture::operator()(NextFuture, ContinueFunc&&, Args&& ...) const [with ContinueFunc = arrow::dataset::{anonymous}::TestPlan::Run()::<lambda()>; Args = {}; ContinueResult = arrow::Result<std::vector<arrow::compute::ExecBatch> >; NextFuture = arrow::Future<std::vector<arrow::compute::ExecBatch> >]\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/util/future.h:150:22,\r\n\u00a0 \u00a0 inlined from \u2018void arrow::detail::ContinueFuture::IgnoringArgsIf(std::true_type, NextFuture&&, ContinueFunc&&, Args&& ...) const [with ContinueFunc = arrow::dataset::{anonymous}::TestPlan::Run()::<lambda()>; NextFuture = arrow::Future<std::vector<arrow::compute::ExecBatch> >; Args = {const arrow::internal::Empty&}]\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/util/future.h:188:15,\r\n\u00a0 \u00a0 inlined from \u2018void arrow::Future<T>::ThenOnComplete<OnSuccess, OnFailure>::operator()(const arrow::Result<T>&) && [with OnSuccess = arrow::dataset::{anonymous}::TestPlan::Run()::<lambda()>; OnFailure = arrow::Future<>::PassthruOnFailure<arrow::dataset::{anonymous}::TestPlan::Run()::<lambda()> >; T = arrow::internal::Empty]\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/util/future.h:545:39,\r\n\u00a0 \u00a0 inlined from \u2018void arrow::Future<T>::WrapResultyOnComplete::Callback<OnComplete>::operator()(const arrow::FutureImpl&) && [with OnComplete = arrow::Future<>::ThenOnComplete<arrow::dataset::{anonymous}::TestPlan::Run()::<lambda()>, arrow::Future<>::PassthruOnFailure<arrow::dataset::{anonymous}::TestPlan::Run()::<lambda()> > >; T = arrow::internal::Empty]\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/util/future.h:442:31,\r\n\u00a0 \u00a0 inlined from \u2018R arrow::internal::FnOnce<R(A ...)>::FnImpl<Fn>::invoke(A&& ...) [with Fn = arrow::Future<>::WrapResultyOnComplete::Callback<arrow::Future<>::ThenOnComplete<arrow::dataset::{anonymous}::TestPlan::Run()::<lambda()>, arrow::Future<>::PassthruOnFailure<arrow::dataset::{anonymous}::TestPlan::Run()::<lambda()> > > >; R = void; A = {const arrow::FutureImpl&}]\u2019 at /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/util/functional.h:152:56:\r\n/mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/compute/exec.h:179:21: warning: \u2018*(arrow::compute::ExecBatch*)((char*)&<unnamed> + offsetof(std::optional<arrow::compute::ExecBatch>,std::optional<arrow::compute::ExecBatch>::<unnamed>.std::_Optional_base<arrow::compute::ExecBatch, false, false>::<unnamed>)).arrow::compute::ExecBatch::length\u2019 may be used uninitialized [-Wmaybe-uninitialized]\r\n\u00a0 179 | struct ARROW_EXPORT ExecBatch {\r\n\u00a0 \u00a0 \u00a0 | \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ^~~~~~~~~\r\nIn file included from /usr/include/c++/11/functional:65,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/dataset/scanner.h:22,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from /mnt/user1/tscontract/github/rtpsw/arrow/cpp/src/arrow/dataset/scanner_test.cc:18:\r\n/usr/include/c++/11/bits/stl_algo.h: In member function \u2018R arrow::internal::FnOnce<R(A ...)>::FnImpl<Fn>::invoke(A&& ...) [with Fn = arrow::Future<>::WrapResultyOnComplete::Callback<arrow::Future<>::ThenOnComplete<arrow::dataset::{anonymous}::TestPlan::Run()::<lambda()>, arrow::Future<>::PassthruOnFailure<arrow::dataset::{anonymous}::TestPlan::Run()::<lambda()> > > >; R = void; A = {const arrow::FutureImpl&}]\u2019:\r\n/usr/include/c++/11/bits/stl_algo.h:4296:31: note: \u2018<anonymous>\u2019 declared here\r\n\u00a04296 | \u00a0 \u00a0 \u00a0 \u00a0 *__result = __unary_op(*__first);\r\n\u00a0 \u00a0 \u00a0 | \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ~~~~~~~~~~^~~~~~~~~~\r\n[534/534] Linking CXX executable release/parquet-schema-test {code}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Avoid warnings that ExecBatch::length may be uninitialized",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13489345/comment/17624410",
                    "id": "17624410",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 14480\n[https://github.com/apache/arrow/pull/14480]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-10-26T12:11:55.776+0000",
                    "updated": "2022-10-26T12:11:55.776+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z19vz4:",
        "customfield_12314139": null
    }
}