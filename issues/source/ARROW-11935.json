{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13363924",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924",
    "key": "ARROW-11935",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12610495",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12610495",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13363597",
                    "key": "ARROW-11924",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363597",
                    "fields": {
                        "summary": "[C++] Provide streaming output from GetFileInfo",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11935/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 20,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924/worklog/566430",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #9714:\nURL: https://github.com/apache/arrow/pull/9714\n\n\n   A push generator has a producer end which pushes values to a queue,\r\n   and a consumer end (the generator itself) which yields futures that\r\n   receive the values pushed by the producer.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-15T18:16:26.779+0000",
                    "updated": "2021-03-15T18:16:26.779+0000",
                    "started": "2021-03-15T18:16:26.779+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "566430",
                    "issueId": "13363924"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924/worklog/566431",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #9714:\nURL: https://github.com/apache/arrow/pull/9714#issuecomment-799640799\n\n\n   @westonpace I would welcome your input on this.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-15T18:16:50.156+0000",
                    "updated": "2021-03-15T18:16:50.156+0000",
                    "started": "2021-03-15T18:16:50.156+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "566431",
                    "issueId": "13363924"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924/worklog/566456",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9714:\nURL: https://github.com/apache/arrow/pull/9714#issuecomment-799657369\n\n\n   https://issues.apache.org/jira/browse/ARROW-11935\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-15T18:39:26.907+0000",
                    "updated": "2021-03-15T18:39:26.907+0000",
                    "started": "2021-03-15T18:39:26.907+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "566456",
                    "issueId": "13363924"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924/worklog/566457",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #9714:\nURL: https://github.com/apache/arrow/pull/9714#issuecomment-799657453\n\n\n   Note the generator could perhaps be made reentrant if there's some use for that.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-15T18:39:39.839+0000",
                    "updated": "2021-03-15T18:39:39.839+0000",
                    "started": "2021-03-15T18:39:39.839+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "566457",
                    "issueId": "13363924"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924/worklog/566482",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9714:\nURL: https://github.com/apache/arrow/pull/9714#discussion_r594597313\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -336,6 +345,68 @@ class ReadaheadGenerator {\n   std::queue<Future<T>> readahead_queue_;\n };\n \n+template <typename T>\n+class PushGenerator {\n\nReview comment:\n       This would require some kind of producer running on a separate thread right?  Did you take a look at `BackgroundGenerator`?  It's a bit of a different model but intended to solve the same sort of problem.\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -336,6 +345,68 @@ class ReadaheadGenerator {\n   std::queue<Future<T>> readahead_queue_;\n };\n \n+template <typename T>\n+class PushGenerator {\n+  struct State {\n+    util::Mutex mutex;\n+    std::deque<Result<T>> result_q;\n+    util::optional<Future<T>> consumer_fut;\n+    bool finished = false;\n+  };\n+\n+  struct Generator {\n+    const std::shared_ptr<State> state_;\n+\n+    Future<T> operator()() {\n+      auto lock = state_->mutex.Lock();\n+      assert(!state_->consumer_fut.has_value());  // Non-reentrant\n+      if (!state_->result_q.empty()) {\n+        auto fut = Future<T>::MakeFinished(std::move(state_->result_q.front()));\n+        state_->result_q.pop_front();\n+        return fut;\n+      }\n+      if (state_->finished) {\n+        return AsyncGeneratorEnd<T>();\n+      }\n+      auto fut = Future<T>::Make();\n+      state_->consumer_fut = fut;\n+      return fut;\n+    }\n+  };\n+\n+ public:\n+  PushGenerator() : state_(std::make_shared<State>()) {}\n+\n+  void Push(Result<T> result) {\n+    auto lock = state_->mutex.Lock();\n+    if (state_->consumer_fut.has_value()) {\n+      auto fut = std::move(state_->consumer_fut.value());\n\nReview comment:\n       Is this really a move?  I think you need to do...\r\n   ```\r\n   auto fut = std::move(state_->consumer_fut).value();\r\n   ```\r\n   ...also, then you shouldn't need to reset on next line.\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -336,6 +345,68 @@ class ReadaheadGenerator {\n   std::queue<Future<T>> readahead_queue_;\n };\n \n+template <typename T>\n+class PushGenerator {\n\nReview comment:\n       One issue with this model is that there is no back-pressure.  In the other generators they have bounded queuing so there is no way a slow consumer / fast producer can end up filling up RAM (the producer will be stopped while the consumer catches up).  Depending on use this may not be a problem (e.g. I think you're using this for very small file info objects which all fit in memory easily).\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -336,6 +345,68 @@ class ReadaheadGenerator {\n   std::queue<Future<T>> readahead_queue_;\n };\n \n+template <typename T>\n+class PushGenerator {\n+  struct State {\n+    util::Mutex mutex;\n+    std::deque<Result<T>> result_q;\n+    util::optional<Future<T>> consumer_fut;\n+    bool finished = false;\n+  };\n+\n+  struct Generator {\n+    const std::shared_ptr<State> state_;\n+\n+    Future<T> operator()() {\n+      auto lock = state_->mutex.Lock();\n+      assert(!state_->consumer_fut.has_value());  // Non-reentrant\n+      if (!state_->result_q.empty()) {\n+        auto fut = Future<T>::MakeFinished(std::move(state_->result_q.front()));\n+        state_->result_q.pop_front();\n+        return fut;\n+      }\n+      if (state_->finished) {\n+        return AsyncGeneratorEnd<T>();\n+      }\n+      auto fut = Future<T>::Make();\n+      state_->consumer_fut = fut;\n+      return fut;\n+    }\n+  };\n+\n+ public:\n+  PushGenerator() : state_(std::make_shared<State>()) {}\n+\n+  void Push(Result<T> result) {\n\nReview comment:\n       You could maybe check if `result` is not ok and mark finished to true (potentially even clearing out the result q) and then on future pushes simply return immediately if finished is true.  I can see where you question on Zulip came from now.  The only disadvantage I can see to this approach is potentially wasted memory keeping blocks around that are invalid.\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -16,12 +16,16 @@\n // under the License.\n \n #pragma once\n+\n+#include <cassert>\n\nReview comment:\n       Is this used?\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -336,6 +345,68 @@ class ReadaheadGenerator {\n   std::queue<Future<T>> readahead_queue_;\n };\n \n+template <typename T>\n+class PushGenerator {\n+  struct State {\n+    util::Mutex mutex;\n+    std::deque<Result<T>> result_q;\n+    util::optional<Future<T>> consumer_fut;\n+    bool finished = false;\n+  };\n+\n+  struct Generator {\n+    const std::shared_ptr<State> state_;\n+\n+    Future<T> operator()() {\n+      auto lock = state_->mutex.Lock();\n+      assert(!state_->consumer_fut.has_value());  // Non-reentrant\n+      if (!state_->result_q.empty()) {\n+        auto fut = Future<T>::MakeFinished(std::move(state_->result_q.front()));\n+        state_->result_q.pop_front();\n+        return fut;\n+      }\n+      if (state_->finished) {\n+        return AsyncGeneratorEnd<T>();\n+      }\n+      auto fut = Future<T>::Make();\n+      state_->consumer_fut = fut;\n+      return fut;\n+    }\n+  };\n+\n+ public:\n+  PushGenerator() : state_(std::make_shared<State>()) {}\n+\n+  void Push(Result<T> result) {\n+    auto lock = state_->mutex.Lock();\n+    if (state_->consumer_fut.has_value()) {\n+      auto fut = std::move(state_->consumer_fut.value());\n+      state_->consumer_fut.reset();\n+      lock.Unlock();  // unlock before potentially invoking a callback\n+      fut.MarkFinished(std::move(result));\n+      return;\n+    }\n+    state_->result_q.push_back(std::move(result));\n+  }\n+\n+  void Close() {\n+    auto lock = state_->mutex.Lock();\n+    state_->finished = true;\n+    if (state_->consumer_fut.has_value()) {\n+      auto fut = std::move(state_->consumer_fut.value());\n+      state_->consumer_fut.reset();\n+      lock.Unlock();  // unlock before potentially invoking a callback\n+      fut.MarkFinished(IterationTraits<T>::End());\n+    }\n+  }\n+\n+  /// Return a non-reentrant async generator\n+  Generator generator() { return Generator{state_}; }\n\nReview comment:\n       All of the other generators have a corresponding `MakeXyz` function.  It's not strictly necessary but can keep the public API to simply `std::function`.  Wouldn't work here though because the producer needs access to the generator.  However, could you add a statement about queuing.  Specifically that it might queue an unbounded number of results depending on how fast the producer ran.\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -336,6 +345,68 @@ class ReadaheadGenerator {\n   std::queue<Future<T>> readahead_queue_;\n };\n \n+template <typename T>\n+class PushGenerator {\n+  struct State {\n+    util::Mutex mutex;\n+    std::deque<Result<T>> result_q;\n+    util::optional<Future<T>> consumer_fut;\n+    bool finished = false;\n+  };\n+\n+  struct Generator {\n+    const std::shared_ptr<State> state_;\n+\n+    Future<T> operator()() {\n+      auto lock = state_->mutex.Lock();\n+      assert(!state_->consumer_fut.has_value());  // Non-reentrant\n+      if (!state_->result_q.empty()) {\n+        auto fut = Future<T>::MakeFinished(std::move(state_->result_q.front()));\n+        state_->result_q.pop_front();\n+        return fut;\n+      }\n+      if (state_->finished) {\n+        return AsyncGeneratorEnd<T>();\n+      }\n+      auto fut = Future<T>::Make();\n+      state_->consumer_fut = fut;\n+      return fut;\n+    }\n+  };\n+\n+ public:\n+  PushGenerator() : state_(std::make_shared<State>()) {}\n+\n+  void Push(Result<T> result) {\n+    auto lock = state_->mutex.Lock();\n+    if (state_->consumer_fut.has_value()) {\n+      auto fut = std::move(state_->consumer_fut.value());\n+      state_->consumer_fut.reset();\n+      lock.Unlock();  // unlock before potentially invoking a callback\n+      fut.MarkFinished(std::move(result));\n+      return;\n+    }\n+    state_->result_q.push_back(std::move(result));\n+  }\n+\n+  void Close() {\n+    auto lock = state_->mutex.Lock();\n+    state_->finished = true;\n+    if (state_->consumer_fut.has_value()) {\n+      auto fut = std::move(state_->consumer_fut.value());\n\nReview comment:\n       Same as above `std::move(state_->consumer_fut).value()`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-15T19:06:48.312+0000",
                    "updated": "2021-03-15T19:06:48.312+0000",
                    "started": "2021-03-15T19:06:48.312+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "566482",
                    "issueId": "13363924"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924/worklog/566483",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #9714:\nURL: https://github.com/apache/arrow/pull/9714#issuecomment-799678999\n\n\n   Also, in regards to reentrancy.  I don't think there would be any advantage to doing so here because there is no backpressure / connection with the producer.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-15T19:07:43.021+0000",
                    "updated": "2021-03-15T19:07:43.021+0000",
                    "started": "2021-03-15T19:07:43.021+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "566483",
                    "issueId": "13363924"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924/worklog/566907",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9714:\nURL: https://github.com/apache/arrow/pull/9714#discussion_r595140538\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -336,6 +345,68 @@ class ReadaheadGenerator {\n   std::queue<Future<T>> readahead_queue_;\n };\n \n+template <typename T>\n+class PushGenerator {\n\nReview comment:\n       Right. The use case I'm thinking about is async `GetFileInfo` for networked filesystems (such as S3). The aim is to cover latencies, but no significant CPU or RAM consumption should be involved. Also, in this use case, the producer would potentially run on multiple threads.\r\n   \r\n   I'll add a comment.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-16T12:54:23.368+0000",
                    "updated": "2021-03-16T12:54:23.368+0000",
                    "started": "2021-03-16T12:54:23.368+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "566907",
                    "issueId": "13363924"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924/worklog/566912",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9714:\nURL: https://github.com/apache/arrow/pull/9714#discussion_r595142461\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -336,6 +345,68 @@ class ReadaheadGenerator {\n   std::queue<Future<T>> readahead_queue_;\n };\n \n+template <typename T>\n+class PushGenerator {\n+  struct State {\n+    util::Mutex mutex;\n+    std::deque<Result<T>> result_q;\n+    util::optional<Future<T>> consumer_fut;\n+    bool finished = false;\n+  };\n+\n+  struct Generator {\n+    const std::shared_ptr<State> state_;\n+\n+    Future<T> operator()() {\n+      auto lock = state_->mutex.Lock();\n+      assert(!state_->consumer_fut.has_value());  // Non-reentrant\n+      if (!state_->result_q.empty()) {\n+        auto fut = Future<T>::MakeFinished(std::move(state_->result_q.front()));\n+        state_->result_q.pop_front();\n+        return fut;\n+      }\n+      if (state_->finished) {\n+        return AsyncGeneratorEnd<T>();\n+      }\n+      auto fut = Future<T>::Make();\n+      state_->consumer_fut = fut;\n+      return fut;\n+    }\n+  };\n+\n+ public:\n+  PushGenerator() : state_(std::make_shared<State>()) {}\n+\n+  void Push(Result<T> result) {\n+    auto lock = state_->mutex.Lock();\n+    if (state_->consumer_fut.has_value()) {\n+      auto fut = std::move(state_->consumer_fut.value());\n\nReview comment:\n       Well, the problem is that https://en.cppreference.com/w/cpp/utility/optional/value doesn't specify if the rvalue-this variant would really reset the `optional` itself, or just the embedded value. It may depend on the actual embedded type. So it seems safer to reset the `optional` explicitly.\r\n   \r\n   @bkietz What do you think?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-16T12:56:49.786+0000",
                    "updated": "2021-03-16T12:56:49.786+0000",
                    "started": "2021-03-16T12:56:49.785+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "566912",
                    "issueId": "13363924"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924/worklog/566913",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9714:\nURL: https://github.com/apache/arrow/pull/9714#discussion_r595143165\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -336,6 +345,68 @@ class ReadaheadGenerator {\n   std::queue<Future<T>> readahead_queue_;\n };\n \n+template <typename T>\n+class PushGenerator {\n+  struct State {\n+    util::Mutex mutex;\n+    std::deque<Result<T>> result_q;\n+    util::optional<Future<T>> consumer_fut;\n+    bool finished = false;\n+  };\n+\n+  struct Generator {\n+    const std::shared_ptr<State> state_;\n+\n+    Future<T> operator()() {\n+      auto lock = state_->mutex.Lock();\n+      assert(!state_->consumer_fut.has_value());  // Non-reentrant\n+      if (!state_->result_q.empty()) {\n+        auto fut = Future<T>::MakeFinished(std::move(state_->result_q.front()));\n+        state_->result_q.pop_front();\n+        return fut;\n+      }\n+      if (state_->finished) {\n+        return AsyncGeneratorEnd<T>();\n+      }\n+      auto fut = Future<T>::Make();\n+      state_->consumer_fut = fut;\n+      return fut;\n+    }\n+  };\n+\n+ public:\n+  PushGenerator() : state_(std::make_shared<State>()) {}\n+\n+  void Push(Result<T> result) {\n+    auto lock = state_->mutex.Lock();\n+    if (state_->consumer_fut.has_value()) {\n+      auto fut = std::move(state_->consumer_fut.value());\n+      state_->consumer_fut.reset();\n+      lock.Unlock();  // unlock before potentially invoking a callback\n+      fut.MarkFinished(std::move(result));\n+      return;\n+    }\n+    state_->result_q.push_back(std::move(result));\n+  }\n+\n+  void Close() {\n+    auto lock = state_->mutex.Lock();\n+    state_->finished = true;\n+    if (state_->consumer_fut.has_value()) {\n+      auto fut = std::move(state_->consumer_fut.value());\n+      state_->consumer_fut.reset();\n+      lock.Unlock();  // unlock before potentially invoking a callback\n+      fut.MarkFinished(IterationTraits<T>::End());\n+    }\n+  }\n+\n+  /// Return a non-reentrant async generator\n+  Generator generator() { return Generator{state_}; }\n\nReview comment:\n       Yes, I don't know how to make this API homogenous with the rest. I'll add comments anyway.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-16T12:57:42.730+0000",
                    "updated": "2021-03-16T12:57:42.730+0000",
                    "started": "2021-03-16T12:57:42.730+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "566913",
                    "issueId": "13363924"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924/worklog/566915",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9714:\nURL: https://github.com/apache/arrow/pull/9714#discussion_r595143667\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -16,12 +16,16 @@\n // under the License.\n \n #pragma once\n+\n+#include <cassert>\n\nReview comment:\n       Yes, there are some `assert()`s added.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-16T12:58:28.725+0000",
                    "updated": "2021-03-16T12:58:28.725+0000",
                    "started": "2021-03-16T12:58:28.725+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "566915",
                    "issueId": "13363924"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924/worklog/566917",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9714:\nURL: https://github.com/apache/arrow/pull/9714#discussion_r595144617\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -336,6 +345,68 @@ class ReadaheadGenerator {\n   std::queue<Future<T>> readahead_queue_;\n };\n \n+template <typename T>\n+class PushGenerator {\n+  struct State {\n+    util::Mutex mutex;\n+    std::deque<Result<T>> result_q;\n+    util::optional<Future<T>> consumer_fut;\n+    bool finished = false;\n+  };\n+\n+  struct Generator {\n+    const std::shared_ptr<State> state_;\n+\n+    Future<T> operator()() {\n+      auto lock = state_->mutex.Lock();\n+      assert(!state_->consumer_fut.has_value());  // Non-reentrant\n+      if (!state_->result_q.empty()) {\n+        auto fut = Future<T>::MakeFinished(std::move(state_->result_q.front()));\n+        state_->result_q.pop_front();\n+        return fut;\n+      }\n+      if (state_->finished) {\n+        return AsyncGeneratorEnd<T>();\n+      }\n+      auto fut = Future<T>::Make();\n+      state_->consumer_fut = fut;\n+      return fut;\n+    }\n+  };\n+\n+ public:\n+  PushGenerator() : state_(std::make_shared<State>()) {}\n+\n+  void Push(Result<T> result) {\n\nReview comment:\n       Indeed, I could do that. The underlying question is: should an error always terminate an async generator? It doesn't seem that obvious to me.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-16T12:59:37.681+0000",
                    "updated": "2021-03-16T12:59:37.681+0000",
                    "started": "2021-03-16T12:59:37.680+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "566917",
                    "issueId": "13363924"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924/worklog/566953",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9714:\nURL: https://github.com/apache/arrow/pull/9714#discussion_r595171891\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -336,6 +345,68 @@ class ReadaheadGenerator {\n   std::queue<Future<T>> readahead_queue_;\n };\n \n+template <typename T>\n+class PushGenerator {\n+  struct State {\n+    util::Mutex mutex;\n+    std::deque<Result<T>> result_q;\n+    util::optional<Future<T>> consumer_fut;\n+    bool finished = false;\n+  };\n+\n+  struct Generator {\n+    const std::shared_ptr<State> state_;\n+\n+    Future<T> operator()() {\n+      auto lock = state_->mutex.Lock();\n+      assert(!state_->consumer_fut.has_value());  // Non-reentrant\n+      if (!state_->result_q.empty()) {\n+        auto fut = Future<T>::MakeFinished(std::move(state_->result_q.front()));\n+        state_->result_q.pop_front();\n+        return fut;\n+      }\n+      if (state_->finished) {\n+        return AsyncGeneratorEnd<T>();\n+      }\n+      auto fut = Future<T>::Make();\n+      state_->consumer_fut = fut;\n+      return fut;\n+    }\n+  };\n+\n+ public:\n+  PushGenerator() : state_(std::make_shared<State>()) {}\n+\n+  void Push(Result<T> result) {\n+    auto lock = state_->mutex.Lock();\n+    if (state_->consumer_fut.has_value()) {\n+      auto fut = std::move(state_->consumer_fut.value());\n\nReview comment:\n       The reset is necessary; after this line the optional still contains a object (albeit a moved-from object).\r\n   \r\n   Either arrangement of `move` will result in an rvalue reference to the contained object and the style guide doesn't explicitly prefer one over the other. I'm not sure which I prefer, either\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-16T13:33:40.878+0000",
                    "updated": "2021-03-16T13:33:40.878+0000",
                    "started": "2021-03-16T13:33:40.877+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "566953",
                    "issueId": "13363924"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924/worklog/566954",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9714:\nURL: https://github.com/apache/arrow/pull/9714#discussion_r595171891\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -336,6 +345,68 @@ class ReadaheadGenerator {\n   std::queue<Future<T>> readahead_queue_;\n };\n \n+template <typename T>\n+class PushGenerator {\n+  struct State {\n+    util::Mutex mutex;\n+    std::deque<Result<T>> result_q;\n+    util::optional<Future<T>> consumer_fut;\n+    bool finished = false;\n+  };\n+\n+  struct Generator {\n+    const std::shared_ptr<State> state_;\n+\n+    Future<T> operator()() {\n+      auto lock = state_->mutex.Lock();\n+      assert(!state_->consumer_fut.has_value());  // Non-reentrant\n+      if (!state_->result_q.empty()) {\n+        auto fut = Future<T>::MakeFinished(std::move(state_->result_q.front()));\n+        state_->result_q.pop_front();\n+        return fut;\n+      }\n+      if (state_->finished) {\n+        return AsyncGeneratorEnd<T>();\n+      }\n+      auto fut = Future<T>::Make();\n+      state_->consumer_fut = fut;\n+      return fut;\n+    }\n+  };\n+\n+ public:\n+  PushGenerator() : state_(std::make_shared<State>()) {}\n+\n+  void Push(Result<T> result) {\n+    auto lock = state_->mutex.Lock();\n+    if (state_->consumer_fut.has_value()) {\n+      auto fut = std::move(state_->consumer_fut.value());\n\nReview comment:\n       The reset is necessary; after this line the optional still contains an object (albeit a moved-from object).\r\n   \r\n   Either arrangement of `move` will result in an rvalue reference to the contained object and the style guide doesn't explicitly prefer one over the other. I'm not sure which I prefer, either\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-16T13:34:03.756+0000",
                    "updated": "2021-03-16T13:34:03.756+0000",
                    "started": "2021-03-16T13:34:03.756+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "566954",
                    "issueId": "13363924"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924/worklog/569864",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #9714:\nURL: https://github.com/apache/arrow/pull/9714#issuecomment-804236851\n\n\n   @westonpace I turned the API on its head so that `PushGenerator` is really a generator. Also I added comments and the ability to early-close the queue. Can you take a look again?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T17:07:46.348+0000",
                    "updated": "2021-03-22T17:07:46.348+0000",
                    "started": "2021-03-22T17:07:46.347+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569864",
                    "issueId": "13363924"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924/worklog/569980",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9714:\nURL: https://github.com/apache/arrow/pull/9714#discussion_r599009667\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -336,6 +345,103 @@ class ReadaheadGenerator {\n   std::queue<Future<T>> readahead_queue_;\n };\n \n+/// \\brief A generator where the producer pushes items on a queue.\n+///\n+/// No back-pressure is applied, so this generator is mostly useful when\n+/// producing the values is neither CPU- nor memory-expensive (e.g. fetching\n+/// filesystem metadata).\n+///\n+/// This generator is not async-reentrant.\n+template <typename T>\n+class PushGenerator {\n+  struct State {\n+    util::Mutex mutex;\n+    std::deque<Result<T>> result_q;\n+    util::optional<Future<T>> consumer_fut;\n+    bool finished = false;\n+  };\n+\n+ public:\n+  /// Producer API for PushGenerator\n+  class Producer {\n+   public:\n+    explicit Producer(std::shared_ptr<State> state) : state_(std::move(state)) {}\n+\n+    /// Push a value on the queue\n+    void Push(Result<T> result) {\n+      auto lock = state_->mutex.Lock();\n+      if (state_->finished) {\n+        // Closed early\n+        return;\n+      }\n+      if (state_->consumer_fut.has_value()) {\n+        auto fut = std::move(state_->consumer_fut.value());\n+        state_->consumer_fut.reset();\n+        lock.Unlock();  // unlock before potentially invoking a callback\n+        fut.MarkFinished(std::move(result));\n+        return;\n+      }\n+      state_->result_q.push_back(std::move(result));\n+    }\n+\n+    /// \\brief Tell the consumer we have finished producing\n+    ///\n+    /// It is allowed to call this and later call Push() again (\"early close\").\n+    /// In this case, calls to Push() after the queue is closed are silently\n+    /// ignored.  This can help implementing non-trivial cancellation cases.\n+    void Close() {\n+      auto lock = state_->mutex.Lock();\n+      if (state_->finished) {\n+        // Already closed\n+        return;\n+      }\n+      state_->finished = true;\n+      if (state_->consumer_fut.has_value()) {\n\nReview comment:\n       You could potentially clear the result_q here.  I could understand either approach.  However, if `Close` is semantically the same as cancel it would seem you wouldn't want the downstream to keep processing the already generated results.\n\n##########\nFile path: cpp/src/arrow/util/iterator_test.cc\n##########\n@@ -940,4 +942,144 @@ TEST(TestAsyncIteratorTransform, SkipSome) {\n   AssertAsyncGeneratorMatch({\"1\", \"3\"}, std::move(filtered));\n }\n \n+TEST(PushGenerator, Empty) {\n+  PushGenerator<TestInt> gen;\n+  auto producer = gen.producer();\n+\n+  auto fut = gen();\n+  AssertNotFinished(fut);\n+  producer.Close();\n+  ASSERT_FINISHES_OK_AND_EQ(IterationTraits<TestInt>::End(), fut);\n+  ASSERT_FINISHES_OK_AND_EQ(IterationTraits<TestInt>::End(), gen());\n+\n+  // Close idempotent\n+  fut = gen();\n+  producer.Close();\n+  ASSERT_FINISHES_OK_AND_EQ(IterationTraits<TestInt>::End(), fut);\n+  ASSERT_FINISHES_OK_AND_EQ(IterationTraits<TestInt>::End(), gen());\n+  ASSERT_FINISHES_OK_AND_EQ(IterationTraits<TestInt>::End(), gen());\n\nReview comment:\n       I feel like this check might be unnecessary?  Can't hurt though.\n\n##########\nFile path: cpp/src/arrow/util/iterator_test.cc\n##########\n@@ -940,4 +942,144 @@ TEST(TestAsyncIteratorTransform, SkipSome) {\n   AssertAsyncGeneratorMatch({\"1\", \"3\"}, std::move(filtered));\n }\n \n+TEST(PushGenerator, Empty) {\n+  PushGenerator<TestInt> gen;\n+  auto producer = gen.producer();\n+\n+  auto fut = gen();\n+  AssertNotFinished(fut);\n+  producer.Close();\n+  ASSERT_FINISHES_OK_AND_EQ(IterationTraits<TestInt>::End(), fut);\n+  ASSERT_FINISHES_OK_AND_EQ(IterationTraits<TestInt>::End(), gen());\n+\n+  // Close idempotent\n+  fut = gen();\n+  producer.Close();\n+  ASSERT_FINISHES_OK_AND_EQ(IterationTraits<TestInt>::End(), fut);\n+  ASSERT_FINISHES_OK_AND_EQ(IterationTraits<TestInt>::End(), gen());\n+  ASSERT_FINISHES_OK_AND_EQ(IterationTraits<TestInt>::End(), gen());\n+}\n+\n+TEST(PushGenerator, Success) {\n+  PushGenerator<TestInt> gen;\n+  auto producer = gen.producer();\n+  std::vector<Future<TestInt>> futures;\n+\n+  producer.Push(TestInt{1});\n+  producer.Push(TestInt{2});\n+  for (int i = 0; i < 3; ++i) {\n+    futures.push_back(gen());\n+  }\n+  ASSERT_FINISHES_OK_AND_EQ(TestInt{1}, futures[0]);\n+  ASSERT_FINISHES_OK_AND_EQ(TestInt{2}, futures[1]);\n+  AssertNotFinished(futures[2]);\n+\n+  producer.Push(TestInt{3});\n+  ASSERT_FINISHES_OK_AND_EQ(TestInt{3}, futures[2]);\n+  producer.Push(TestInt{4});\n+  futures.push_back(gen());\n+  ASSERT_FINISHES_OK_AND_EQ(TestInt{4}, futures[3]);\n+  producer.Push(TestInt{5});\n+  producer.Close();\n+  for (int i = 0; i < 4; ++i) {\n+    futures.push_back(gen());\n+  }\n+  ASSERT_FINISHES_OK_AND_EQ(TestInt{5}, futures[4]);\n+  for (int i = 5; i < 8; ++i) {\n+    ASSERT_FINISHES_OK_AND_EQ(IterationTraits<TestInt>::End(), futures[i]);\n+  }\n+  ASSERT_FINISHES_OK_AND_EQ(IterationTraits<TestInt>::End(), gen());\n+}\n+\n+TEST(PushGenerator, Errors) {\n+  PushGenerator<TestInt> gen;\n+  auto producer = gen.producer();\n+  std::vector<Future<TestInt>> futures;\n+\n+  producer.Push(TestInt{1});\n+  producer.Push(Status::Invalid(\"2\"));\n+  for (int i = 0; i < 3; ++i) {\n+    futures.push_back(gen());\n+  }\n+  ASSERT_FINISHES_OK_AND_EQ(TestInt{1}, futures[0]);\n+  ASSERT_FINISHES_AND_RAISES(Invalid, futures[1]);\n+  AssertNotFinished(futures[2]);\n\nReview comment:\n       Sorry I didn't answer the earlier question (should an error always terminate a generator?).  This seems to be your test here.  I think from the general async generator concept this would be UB.  This possibility is valid.  Terminating early would also be valid.  Downstream generators should be written to expect this as a possibility and should not rely on errors terminating successive calls automatically.\r\n   \r\n   Which is a long winded way of saying this is valid.\r\n   \r\n   It would also be ok if `futures[2]` was `IterationTraits<TestInt>::End()` here.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T19:39:13.120+0000",
                    "updated": "2021-03-22T19:39:13.120+0000",
                    "started": "2021-03-22T19:39:13.120+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569980",
                    "issueId": "13363924"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924/worklog/569981",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9714:\nURL: https://github.com/apache/arrow/pull/9714#discussion_r599022185\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -336,6 +345,103 @@ class ReadaheadGenerator {\n   std::queue<Future<T>> readahead_queue_;\n };\n \n+/// \\brief A generator where the producer pushes items on a queue.\n+///\n+/// No back-pressure is applied, so this generator is mostly useful when\n+/// producing the values is neither CPU- nor memory-expensive (e.g. fetching\n+/// filesystem metadata).\n+///\n+/// This generator is not async-reentrant.\n+template <typename T>\n+class PushGenerator {\n+  struct State {\n+    util::Mutex mutex;\n+    std::deque<Result<T>> result_q;\n+    util::optional<Future<T>> consumer_fut;\n+    bool finished = false;\n+  };\n+\n+ public:\n+  /// Producer API for PushGenerator\n+  class Producer {\n+   public:\n+    explicit Producer(std::shared_ptr<State> state) : state_(std::move(state)) {}\n+\n+    /// Push a value on the queue\n+    void Push(Result<T> result) {\n+      auto lock = state_->mutex.Lock();\n+      if (state_->finished) {\n+        // Closed early\n+        return;\n+      }\n+      if (state_->consumer_fut.has_value()) {\n+        auto fut = std::move(state_->consumer_fut.value());\n+        state_->consumer_fut.reset();\n+        lock.Unlock();  // unlock before potentially invoking a callback\n+        fut.MarkFinished(std::move(result));\n+        return;\n+      }\n+      state_->result_q.push_back(std::move(result));\n+    }\n+\n+    /// \\brief Tell the consumer we have finished producing\n+    ///\n+    /// It is allowed to call this and later call Push() again (\"early close\").\n+    /// In this case, calls to Push() after the queue is closed are silently\n+    /// ignored.  This can help implementing non-trivial cancellation cases.\n+    void Close() {\n+      auto lock = state_->mutex.Lock();\n+      if (state_->finished) {\n+        // Already closed\n+        return;\n+      }\n+      state_->finished = true;\n+      if (state_->consumer_fut.has_value()) {\n\nReview comment:\n       No, close has nothing to do with cancel. It signals a regular end-of-stream.\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T19:41:30.319+0000",
                    "updated": "2021-03-22T19:41:30.319+0000",
                    "started": "2021-03-22T19:41:30.319+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569981",
                    "issueId": "13363924"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924/worklog/569982",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9714:\nURL: https://github.com/apache/arrow/pull/9714#discussion_r599022693\n\n\n\n##########\nFile path: cpp/src/arrow/util/iterator_test.cc\n##########\n@@ -940,4 +942,144 @@ TEST(TestAsyncIteratorTransform, SkipSome) {\n   AssertAsyncGeneratorMatch({\"1\", \"3\"}, std::move(filtered));\n }\n \n+TEST(PushGenerator, Empty) {\n+  PushGenerator<TestInt> gen;\n+  auto producer = gen.producer();\n+\n+  auto fut = gen();\n+  AssertNotFinished(fut);\n+  producer.Close();\n+  ASSERT_FINISHES_OK_AND_EQ(IterationTraits<TestInt>::End(), fut);\n+  ASSERT_FINISHES_OK_AND_EQ(IterationTraits<TestInt>::End(), gen());\n+\n+  // Close idempotent\n+  fut = gen();\n+  producer.Close();\n+  ASSERT_FINISHES_OK_AND_EQ(IterationTraits<TestInt>::End(), fut);\n+  ASSERT_FINISHES_OK_AND_EQ(IterationTraits<TestInt>::End(), gen());\n+  ASSERT_FINISHES_OK_AND_EQ(IterationTraits<TestInt>::End(), gen());\n\nReview comment:\n       Perhaps over-cautious :-)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T19:42:13.367+0000",
                    "updated": "2021-03-22T19:42:13.367+0000",
                    "started": "2021-03-22T19:42:13.367+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569982",
                    "issueId": "13363924"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924/worklog/570451",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #9714:\nURL: https://github.com/apache/arrow/pull/9714#issuecomment-804914296\n\n\n   Travis-CI build: https://travis-ci.com/github/pitrou/arrow/builds/220827493\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-23T13:44:21.251+0000",
                    "updated": "2021-03-23T13:44:21.251+0000",
                    "started": "2021-03-23T13:44:21.250+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "570451",
                    "issueId": "13363924"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924/worklog/570453",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #9714:\nURL: https://github.com/apache/arrow/pull/9714#issuecomment-804914745\n\n\n   CI failure is unrelated, will merge.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-23T13:44:57.111+0000",
                    "updated": "2021-03-23T13:44:57.111+0000",
                    "started": "2021-03-23T13:44:57.110+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "570453",
                    "issueId": "13363924"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924/worklog/570455",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #9714:\nURL: https://github.com/apache/arrow/pull/9714\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-23T13:45:33.887+0000",
                    "updated": "2021-03-23T13:45:33.887+0000",
                    "started": "2021-03-23T13:45:33.886+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "570455",
                    "issueId": "13363924"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 12000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2d2dbfce[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@15e11f36[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5dff88c1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@407a34e7[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@38edfe3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7aa06780[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5bb84195[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4a749b09[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3f702463[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4615d86a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5f389dd4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@317ae9e9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Mar 23 13:45:17 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-03-23T13:45:17.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11935/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-03-11T18:28:24.000+0000",
        "updated": "2021-03-23T13:45:34.000+0000",
        "timeoriginalestimate": null,
        "description": "Sometimes a producer of values just wants to queue futures and let a consumer pop them iteratively.\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add push generator",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363924/comment/17307075",
                    "id": "17307075",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 9714\n[https://github.com/apache/arrow/pull/9714]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-03-23T13:45:17.376+0000",
                    "updated": "2021-03-23T13:45:17.376+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0okg8:",
        "customfield_12314139": null
    }
}