{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13192227",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192227",
    "key": "ARROW-3540",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
            "name": "paddyhoran",
            "key": "paddyhoran",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paddy Horan",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
            "name": "paddyhoran",
            "key": "paddyhoran",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paddy Horan",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
            "name": "paddyhoran",
            "key": "paddyhoran",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paddy Horan",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 1800,
            "total": 1800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 1800,
            "total": 1800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3540/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 3,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192227/worklog/155382",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran opened a new pull request #2778: ARROW-3540: [Rust] Incorporate BooleanArray into PrimitiveArray\nURL: https://github.com/apache/arrow/pull/2778\n \n \n   Currently we have a specific implementation for `BooleanArray` (bit-packing), but due to the `ArrowPrimitiveType` trait which we use as a trait bound in many places `PrimitiveArray<bool>` is still a valid type.  `make_array` actually uses `PrimitiveArray<bool>` which may be a bug but would be fixed by this PR anyway.\r\n   \r\n   This PR moves the implementation of `BooleanArray` into `PrimitiveArray<bool>`, this would allow us to use the `ArrayPrimitiveType` trait as a bound more consistently.  i.e. `PrimitiveArrayBuilder<T>` could return `PrimitiveArray<T>` instead of having a separate `BooleanArrayBuilder`.\r\n   \r\n   cc @kszucs @sunchao @andygrove @crepererum \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-17T13:10:51.279+0000",
                    "updated": "2018-10-17T13:10:51.279+0000",
                    "started": "2018-10-17T13:10:51.278+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "155382",
                    "issueId": "13192227"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192227/worklog/155394",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "crepererum commented on issue #2778: ARROW-3540: [Rust] Incorporate BooleanArray into PrimitiveArray\nURL: https://github.com/apache/arrow/pull/2778#issuecomment-430632115\n \n \n   Look good to me, thanks :)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-17T13:39:14.513+0000",
                    "updated": "2018-10-17T13:39:14.513+0000",
                    "started": "2018-10-17T13:39:14.512+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "155394",
                    "issueId": "13192227"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192227/worklog/155437",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs closed pull request #2778: ARROW-3540: [Rust] Incorporate BooleanArray into PrimitiveArray\nURL: https://github.com/apache/arrow/pull/2778\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/rust/src/array.rs b/rust/src/array.rs\nindex 2da7104df8..9eca9ebbb7 100644\n--- a/rust/src/array.rs\n+++ b/rust/src/array.rs\n@@ -122,10 +122,14 @@ pub struct PrimitiveArray<T: ArrowPrimitiveType> {\n     data: ArrayDataRef,\n     /// Pointer to the value array. The lifetime of this must be <= to the value buffer\n     /// stored in `data`, so it's safe to store.\n+    /// Also note that boolean arrays are bit-packed, so although the underlying pointer is of type\n+    /// bool it should be cast back to u8 before being used.\n+    /// i.e. `self.raw_values.get() as *const u8`\n     raw_values: RawPtrBox<T>,\n }\n \n /// Macro to define primitive arrays for different data types and native types.\n+/// Boolean arrays are bit-packed and so are not defined by this macro\n macro_rules! def_primitive_array {\n     ($data_ty:path, $native_ty:ident) => {\n         impl PrimitiveArray<$native_ty> {\n@@ -234,27 +238,27 @@ macro_rules! def_primitive_array {\n                 PrimitiveArray::from(array_data)\n             }\n         }\n-    };\n-}\n \n-/// Constructs a `PrimitiveArray` from an array data reference.\n-impl<T: ArrowPrimitiveType> From<ArrayDataRef> for PrimitiveArray<T> {\n-    fn from(data: ArrayDataRef) -> Self {\n-        assert_eq!(\n-            data.buffers().len(),\n-            1,\n-            \"PrimitiveArray data should contain a single buffer only (values buffer)\"\n-        );\n-        let raw_values = data.buffers()[0].raw_data();\n-        assert!(\n-            memory::is_aligned::<u8>(raw_values, mem::align_of::<T>()),\n-            \"memory is not aligned\"\n-        );\n-        Self {\n-            data,\n-            raw_values: RawPtrBox::new(raw_values as *const T),\n+        /// Constructs a `PrimitiveArray` from an array data reference.\n+        impl From<ArrayDataRef> for PrimitiveArray<$native_ty> {\n+            fn from(data: ArrayDataRef) -> Self {\n+                assert_eq!(\n+                    data.buffers().len(),\n+                    1,\n+                    \"PrimitiveArray data should contain a single buffer only (values buffer)\"\n+                );\n+                let raw_values = data.buffers()[0].raw_data();\n+                assert!(\n+                    memory::is_aligned::<u8>(raw_values, mem::align_of::<$native_ty>()),\n+                    \"memory is not aligned\"\n+                );\n+                Self {\n+                    data,\n+                    raw_values: RawPtrBox::new(raw_values as *const $native_ty),\n+                }\n+            }\n         }\n-    }\n+    };\n }\n \n impl<T: ArrowPrimitiveType> Array for PrimitiveArray<T> {\n@@ -282,13 +286,8 @@ def_primitive_array!(DataType::Int64, i64);\n def_primitive_array!(DataType::Float32, f32);\n def_primitive_array!(DataType::Float64, f64);\n \n-/// Array whose elements are of boolean types.\n-pub struct BooleanArray {\n-    data: ArrayDataRef,\n-    raw_values: RawPtrBox<u8>,\n-}\n-\n-impl BooleanArray {\n+/// Specific implementation for Boolean arrays due to bit-packing\n+impl PrimitiveArray<bool> {\n     pub fn new(length: i64, values: Buffer, null_count: i64, offset: i64) -> Self {\n         let array_data = ArrayData::builder(DataType::Boolean)\n             .len(length)\n@@ -296,7 +295,7 @@ impl BooleanArray {\n             .null_count(null_count)\n             .offset(offset)\n             .build();\n-        BooleanArray::from(array_data)\n+        PrimitiveArray::from(array_data)\n     }\n \n     /// Returns a `Buffer` holds all the values of this array.\n@@ -307,15 +306,15 @@ impl BooleanArray {\n     }\n \n     /// Returns the boolean value at index `i`.\n+    ///\n+    /// Note this doesn't do any bound checking, for performance reason.\n     pub fn value(&self, i: i64) -> bool {\n-        let offset = i + self.offset();\n-        assert!(offset < self.data.len() as i64);\n-        unsafe { bit_util::get_bit_raw(self.raw_values.get(), offset) }\n+        unsafe { bit_util::get_bit_raw(self.raw_values.get() as *const u8, i + self.offset()) }\n     }\n }\n \n /// Constructs a boolean array from a vector. Should only be used for testing.\n-impl From<Vec<bool>> for BooleanArray {\n+impl From<Vec<bool>> for PrimitiveArray<bool> {\n     fn from(data: Vec<bool>) -> Self {\n         let num_byte = bit_util::ceil(data.len() as i64, 8) as usize;\n         let mut mut_buf = MutableBuffer::new(num_byte).with_bitset(num_byte, false);\n@@ -331,11 +330,11 @@ impl From<Vec<bool>> for BooleanArray {\n             .len(data.len() as i64)\n             .add_buffer(mut_buf.freeze())\n             .build();\n-        BooleanArray::from(array_data)\n+        PrimitiveArray::from(array_data)\n     }\n }\n \n-impl From<Vec<Option<bool>>> for BooleanArray {\n+impl From<Vec<Option<bool>>> for PrimitiveArray<bool> {\n     fn from(data: Vec<Option<bool>>) -> Self {\n         let data_len = data.len() as i64;\n         let num_byte = bit_util::ceil(data_len, 8) as usize;\n@@ -361,17 +360,17 @@ impl From<Vec<Option<bool>>> for BooleanArray {\n             .add_buffer(val_buf.freeze())\n             .null_bit_buffer(null_buf.freeze())\n             .build();\n-        BooleanArray::from(array_data)\n+        PrimitiveArray::from(array_data)\n     }\n }\n \n-/// Constructs a `BooleanArray` from an array data reference.\n-impl From<ArrayDataRef> for BooleanArray {\n+/// Constructs a `PrimitiveArray<bool>` from an array data reference.\n+impl From<ArrayDataRef> for PrimitiveArray<bool> {\n     fn from(data: ArrayDataRef) -> Self {\n         assert_eq!(\n             data.buffers().len(),\n             1,\n-            \"BooleanArray data should contain a single buffer only (values buffer)\"\n+            \"PrimitiveArray data should contain a single buffer only (values buffer)\"\n         );\n         let raw_values = data.buffers()[0].raw_data();\n         assert!(\n@@ -380,24 +379,12 @@ impl From<ArrayDataRef> for BooleanArray {\n         );\n         Self {\n             data,\n-            raw_values: RawPtrBox::new(raw_values),\n+            raw_values: RawPtrBox::new(raw_values as *const bool),\n         }\n     }\n }\n \n-impl Array for BooleanArray {\n-    fn as_any(&self) -> &Any {\n-        self\n-    }\n-\n-    fn data(&self) -> ArrayDataRef {\n-        self.data.clone()\n-    }\n-\n-    fn data_ref(&self) -> &ArrayDataRef {\n-        &self.data\n-    }\n-}\n+pub type BooleanArray = PrimitiveArray<bool>;\n \n /// A list array where each element is a variable-sized sequence of values with the same\n /// type.\n@@ -745,7 +732,7 @@ mod tests {\n         // 00000010 01001000\n         let buf = Buffer::from([72_u8, 2_u8]);\n         let buf2 = buf.clone();\n-        let arr = BooleanArray::new(10, buf, 0, 0);\n+        let arr = PrimitiveArray::<bool>::new(10, buf, 0, 0);\n         assert_eq!(buf2, arr.values());\n         assert_eq!(10, arr.len());\n         assert_eq!(0, arr.offset());\n@@ -760,7 +747,7 @@ mod tests {\n     #[test]\n     fn test_boolean_array_from_vec() {\n         let buf = Buffer::from([10_u8]);\n-        let arr = BooleanArray::from(vec![false, true, false, true]);\n+        let arr = PrimitiveArray::<bool>::from(vec![false, true, false, true]);\n         assert_eq!(buf, arr.values());\n         assert_eq!(4, arr.len());\n         assert_eq!(0, arr.offset());\n@@ -775,7 +762,7 @@ mod tests {\n     #[test]\n     fn test_boolean_array_from_vec_option() {\n         let buf = Buffer::from([10_u8]);\n-        let arr = BooleanArray::from(vec![Some(false), Some(true), None, Some(true)]);\n+        let arr = PrimitiveArray::<bool>::from(vec![Some(false), Some(true), None, Some(true)]);\n         assert_eq!(buf, arr.values());\n         assert_eq!(4, arr.len());\n         assert_eq!(0, arr.offset());\n@@ -803,7 +790,7 @@ mod tests {\n             .offset(2)\n             .add_buffer(buf)\n             .build();\n-        let arr = BooleanArray::from(data);\n+        let arr = PrimitiveArray::<bool>::from(data);\n         assert_eq!(buf2, arr.values());\n         assert_eq!(5, arr.len());\n         assert_eq!(2, arr.offset());\n@@ -815,11 +802,11 @@ mod tests {\n \n     #[test]\n     #[should_panic(\n-        expected = \"BooleanArray data should contain a single buffer only (values buffer)\"\n+        expected = \"PrimitiveArray data should contain a single buffer only (values buffer)\"\n     )]\n     fn test_boolean_array_invalid_buffer_len() {\n         let data = ArrayData::builder(DataType::Boolean).len(5).build();\n-        BooleanArray::from(data);\n+        PrimitiveArray::<bool>::from(data);\n     }\n \n     #[test]\n@@ -1037,7 +1024,7 @@ mod tests {\n         let struct_array = StructArray::from(vec![\n             (\n                 Field::new(\"b\", DataType::Boolean, false),\n-                Arc::new(BooleanArray::from(vec![false, false, true, true])) as Arc<Array>,\n+                Arc::new(PrimitiveArray::from(vec![false, false, true, true])) as Arc<Array>,\n             ),\n             (\n                 Field::new(\"c\", DataType::Int32, false),\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-17T14:41:09.632+0000",
                    "updated": "2018-10-17T14:41:09.632+0000",
                    "started": "2018-10-17T14:41:09.632+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "155437",
                    "issueId": "13192227"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 1800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5f3dd777[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e7bfc9a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1855742[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@50cbf4c4[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@623e00aa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@47eba479[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6c7fc481[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@631d701e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@71b41787[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6be6ada4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@792f3795[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@713a352e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 1800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Oct 17 14:41:12 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-17T14:41:12.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3540/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-10-17T13:04:02.000+0000",
        "updated": "2018-10-17T14:41:12.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently we have a specific implementation for `BooleanArray` (bit-packing), but due to the `ArrowPrimitiveType` trait which we use as a trait bound in many places `PrimitiveArray<bool>` is still a valid type.\u00a0 `make_array` actually uses `PrimitiveArray<bool>` which may be a bug but would be fixed by this issue anyway.\r\n\r\nI propose move the implementation of `BooleanArray` into `PrimitiveArray<bool>`, this would allow us to use the `ArrayPrimitiveType` trait as a bound more consistently.\u00a0 i.e. `PrimitiveArrayBuilder<T>` could return `PrimitiveArray<T>` instead of having a separate `BooleanArrayBuilder`.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "0.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 1800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Incorporate BooleanArray into PrimitiveArray",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192227/comment/16653644",
                    "id": "16653644",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "body": "Issue resolved by pull request 2778\n[https://github.com/apache/arrow/pull/2778]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "created": "2018-10-17T14:41:12.069+0000",
                    "updated": "2018-10-17T14:41:12.069+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3zb2n:",
        "customfield_12314139": null
    }
}