{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13408553",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408553",
    "key": "ARROW-14482",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334626",
                "id": "12334626",
                "name": "C++ - Gandiva"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=augustoasilva",
            "name": "augustoasilva",
            "key": "augustoasilva",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Augusto Alves Silva",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=augustoasilva",
            "name": "augustoasilva",
            "key": "augustoasilva",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Augusto Alves Silva",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 36000,
            "total": 36000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 36000,
            "total": 36000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14482/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 60,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408553/worklog/670392",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva opened a new pull request #11551:\nURL: https://github.com/apache/arrow/pull/11551\n\n\n   **MASK_FIRST_N**\r\n   \r\n   Returns a masked version of str with the first n values masked. Upper case letters are converted to \"X\", lower case letters are converted to \"x\" and numbers are converted to \"n\". For example, mask_first_n(\"1234-5678-8765-4321\", 4) results in nnnn-5678-8765-4321.\r\n   \r\n   **MASK_LAST_N**\r\n   \r\n   Returns a masked version of str with the last n values masked. Upper case letters are converted to \"X\", lower case letters are converted to \"x\" and numbers are converted to \"n\". For example, mask_last_n(\"1234-5678-8765-4321\", 4) results in 1234-5678-8765-nnnn.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-26T22:45:48.085+0000",
                    "updated": "2021-10-26T22:45:48.085+0000",
                    "started": "2021-10-26T22:45:48.085+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "670392",
                    "issueId": "13408553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408553/worklog/670393",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11551:\nURL: https://github.com/apache/arrow/pull/11551#issuecomment-952384994\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-26T22:46:01.324+0000",
                    "updated": "2021-10-26T22:46:01.324+0000",
                    "started": "2021-10-26T22:46:01.324+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "670393",
                    "issueId": "13408553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408553/worklog/673092",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on a change in pull request #11551:\nURL: https://github.com/apache/arrow/pull/11551#discussion_r740942484\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n\nReview comment:\n       This looks to be doing a copy of the input data. Why do we need to copy the input?\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n\nReview comment:\n       I would implement this as follows:\r\n   1) Allocate memory for the output\r\n   2) memcpy input to output n_to_mask number of bytes\r\n   3) Do the masking\r\n   \r\n   This implementation has 2 memcpy's of the incoming data\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n\nReview comment:\n       Should this return null instead?\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  int32_t counter = 0;\n+  for (char& c : str) {\n+    if (n_to_mask > 0 && counter < n_to_mask && isalnum(c)) {\n+      if (isdigit(c)) {\n+        c = 'n';\n+      } else {\n+        if (isupper(c)) {\n+          c = 'X';\n+        } else {\n+          c = 'x';\n+        }\n+      }\n+      counter++;\n+    }\n+  }\n+\n+  *out_len = static_cast<int32_t>(str.size());\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(out, str.c_str(), *out_len);\n+  return out;\n+}\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_last_n(int64_t context, const char* data, int32_t data_len,\n\nReview comment:\n       Please change this to be similar to mask_first_n\r\n   \r\n   Use memcpy for the last_n; and the array for the digits that need masking\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  int32_t counter = 0;\n+  for (char& c : str) {\n\nReview comment:\n       How about implementing this as follows:\r\n   * Create an array of size 256 - mapping digits to 'n'; upper case to 'X'; and lower case to 'x'; and the remaining to null\r\n   * Take the char value, index into the array\r\n   * If you get a null, write input value into output\r\n   * else write the value from the array into output\r\n   \r\n   This has only one if condition in the for loop and will be very fast\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  int32_t counter = 0;\n+  for (char& c : str) {\n+    if (n_to_mask > 0 && counter < n_to_mask && isalnum(c)) {\n+      if (isdigit(c)) {\n+        c = 'n';\n+      } else {\n+        if (isupper(c)) {\n+          c = 'X';\n+        } else {\n+          c = 'x';\n+        }\n+      }\n+      counter++;\n+    }\n+  }\n+\n+  *out_len = static_cast<int32_t>(str.size());\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(out, str.c_str(), *out_len);\n+  return out;\n+}\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_last_n(int64_t context, const char* data, int32_t data_len,\n+                               int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  std::reverse(str.begin(), str.end());\n\nReview comment:\n       This is quite bad... why do we need to reverse? This is going to be poor in performance\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -1599,5 +1677,31 @@ void ExportedStubFunctions::AddMappings(Engine* engine) const {\n   engine->AddGlobalMappingForFunc(\"gdv_fn_initcap_utf8\",\n                                   types->i8_ptr_type() /*return_type*/, args,\n                                   reinterpret_cast<void*>(gdv_fn_initcap_utf8));\n+\n+  // gdv_fn_mask_first_n\n+  args = {\n\nReview comment:\n        Call this args_to_mask_fns. You dont have to reinitialise this in line 1695\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -766,4 +766,40 @@ TEST(TestGdvFnStubs, TestCastVarbinaryFloat8) {\n   ctx.Reset();\n }\n \n+TEST(TestGdvFnStubs, TestMaskFirstN) {\n\nReview comment:\n       Did you check what Dremio does if mask_first_n() is passed a negative number as an argument for the number of digits to mask? Does the planner handle that? or should the implementation of the function handle this case?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T11:11:59.909+0000",
                    "updated": "2021-11-02T11:11:59.909+0000",
                    "started": "2021-11-02T11:11:59.909+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673092",
                    "issueId": "13408553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408553/worklog/673316",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on a change in pull request #11551:\nURL: https://github.com/apache/arrow/pull/11551#discussion_r740942484\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n\nReview comment:\n       This looks to be doing a copy of the input data. Why do we need to copy the input?\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n\nReview comment:\n       I would implement this as follows:\r\n   1) Allocate memory for the output\r\n   2) memcpy input to output n_to_mask number of bytes\r\n   3) Do the masking\r\n   \r\n   This implementation has 2 memcpy's of the incoming data\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n\nReview comment:\n       Should this return null instead?\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  int32_t counter = 0;\n+  for (char& c : str) {\n+    if (n_to_mask > 0 && counter < n_to_mask && isalnum(c)) {\n+      if (isdigit(c)) {\n+        c = 'n';\n+      } else {\n+        if (isupper(c)) {\n+          c = 'X';\n+        } else {\n+          c = 'x';\n+        }\n+      }\n+      counter++;\n+    }\n+  }\n+\n+  *out_len = static_cast<int32_t>(str.size());\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(out, str.c_str(), *out_len);\n+  return out;\n+}\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_last_n(int64_t context, const char* data, int32_t data_len,\n\nReview comment:\n       Please change this to be similar to mask_first_n\r\n   \r\n   Use memcpy for the last_n; and the array for the digits that need masking\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  int32_t counter = 0;\n+  for (char& c : str) {\n\nReview comment:\n       How about implementing this as follows:\r\n   * Create an array of size 256 - mapping digits to 'n'; upper case to 'X'; and lower case to 'x'; and the remaining to null\r\n   * Take the char value, index into the array\r\n   * If you get a null, write input value into output\r\n   * else write the value from the array into output\r\n   \r\n   This has only one if condition in the for loop and will be very fast\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  int32_t counter = 0;\n+  for (char& c : str) {\n+    if (n_to_mask > 0 && counter < n_to_mask && isalnum(c)) {\n+      if (isdigit(c)) {\n+        c = 'n';\n+      } else {\n+        if (isupper(c)) {\n+          c = 'X';\n+        } else {\n+          c = 'x';\n+        }\n+      }\n+      counter++;\n+    }\n+  }\n+\n+  *out_len = static_cast<int32_t>(str.size());\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(out, str.c_str(), *out_len);\n+  return out;\n+}\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_last_n(int64_t context, const char* data, int32_t data_len,\n+                               int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  std::reverse(str.begin(), str.end());\n\nReview comment:\n       This is quite bad... why do we need to reverse? This is going to be poor in performance\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -1599,5 +1677,31 @@ void ExportedStubFunctions::AddMappings(Engine* engine) const {\n   engine->AddGlobalMappingForFunc(\"gdv_fn_initcap_utf8\",\n                                   types->i8_ptr_type() /*return_type*/, args,\n                                   reinterpret_cast<void*>(gdv_fn_initcap_utf8));\n+\n+  // gdv_fn_mask_first_n\n+  args = {\n\nReview comment:\n        Call this args_to_mask_fns. You dont have to reinitialise this in line 1695\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -766,4 +766,40 @@ TEST(TestGdvFnStubs, TestCastVarbinaryFloat8) {\n   ctx.Reset();\n }\n \n+TEST(TestGdvFnStubs, TestMaskFirstN) {\n\nReview comment:\n       Did you check what Dremio does if mask_first_n() is passed a negative number as an argument for the number of digits to mask? Does the planner handle that? or should the implementation of the function handle this case?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T17:45:13.774+0000",
                    "updated": "2021-11-02T17:45:13.774+0000",
                    "started": "2021-11-02T17:45:13.774+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673316",
                    "issueId": "13408553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408553/worklog/673901",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on a change in pull request #11551:\nURL: https://github.com/apache/arrow/pull/11551#discussion_r740942484\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n\nReview comment:\n       This looks to be doing a copy of the input data. Why do we need to copy the input?\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n\nReview comment:\n       I would implement this as follows:\r\n   1) Allocate memory for the output\r\n   2) memcpy input to output n_to_mask number of bytes\r\n   3) Do the masking\r\n   \r\n   This implementation has 2 memcpy's of the incoming data\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n\nReview comment:\n       Should this return null instead?\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  int32_t counter = 0;\n+  for (char& c : str) {\n+    if (n_to_mask > 0 && counter < n_to_mask && isalnum(c)) {\n+      if (isdigit(c)) {\n+        c = 'n';\n+      } else {\n+        if (isupper(c)) {\n+          c = 'X';\n+        } else {\n+          c = 'x';\n+        }\n+      }\n+      counter++;\n+    }\n+  }\n+\n+  *out_len = static_cast<int32_t>(str.size());\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(out, str.c_str(), *out_len);\n+  return out;\n+}\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_last_n(int64_t context, const char* data, int32_t data_len,\n\nReview comment:\n       Please change this to be similar to mask_first_n\r\n   \r\n   Use memcpy for the last_n; and the array for the digits that need masking\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  int32_t counter = 0;\n+  for (char& c : str) {\n\nReview comment:\n       How about implementing this as follows:\r\n   * Create an array of size 256 - mapping digits to 'n'; upper case to 'X'; and lower case to 'x'; and the remaining to null\r\n   * Take the char value, index into the array\r\n   * If you get a null, write input value into output\r\n   * else write the value from the array into output\r\n   \r\n   This has only one if condition in the for loop and will be very fast\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  int32_t counter = 0;\n+  for (char& c : str) {\n+    if (n_to_mask > 0 && counter < n_to_mask && isalnum(c)) {\n+      if (isdigit(c)) {\n+        c = 'n';\n+      } else {\n+        if (isupper(c)) {\n+          c = 'X';\n+        } else {\n+          c = 'x';\n+        }\n+      }\n+      counter++;\n+    }\n+  }\n+\n+  *out_len = static_cast<int32_t>(str.size());\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(out, str.c_str(), *out_len);\n+  return out;\n+}\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_last_n(int64_t context, const char* data, int32_t data_len,\n+                               int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  std::reverse(str.begin(), str.end());\n\nReview comment:\n       This is quite bad... why do we need to reverse? This is going to be poor in performance\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -1599,5 +1677,31 @@ void ExportedStubFunctions::AddMappings(Engine* engine) const {\n   engine->AddGlobalMappingForFunc(\"gdv_fn_initcap_utf8\",\n                                   types->i8_ptr_type() /*return_type*/, args,\n                                   reinterpret_cast<void*>(gdv_fn_initcap_utf8));\n+\n+  // gdv_fn_mask_first_n\n+  args = {\n\nReview comment:\n        Call this args_to_mask_fns. You dont have to reinitialise this in line 1695\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -766,4 +766,40 @@ TEST(TestGdvFnStubs, TestCastVarbinaryFloat8) {\n   ctx.Reset();\n }\n \n+TEST(TestGdvFnStubs, TestMaskFirstN) {\n\nReview comment:\n       Did you check what Dremio does if mask_first_n() is passed a negative number as an argument for the number of digits to mask? Does the planner handle that? or should the implementation of the function handle this case?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T21:18:32.525+0000",
                    "updated": "2021-11-02T21:18:32.525+0000",
                    "started": "2021-11-02T21:18:32.524+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673901",
                    "issueId": "13408553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408553/worklog/676829",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #11551:\nURL: https://github.com/apache/arrow/pull/11551#discussion_r743325768\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n\nReview comment:\n       I did a new implementation without std::string, and more simple and efficiente on the for loop\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T01:04:49.542+0000",
                    "updated": "2021-11-05T01:04:49.542+0000",
                    "started": "2021-11-05T01:04:49.541+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676829",
                    "issueId": "13408553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408553/worklog/676830",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #11551:\nURL: https://github.com/apache/arrow/pull/11551#discussion_r743325850\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n\nReview comment:\n       Yes, it should, so I fixed\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  int32_t counter = 0;\n+  for (char& c : str) {\n\nReview comment:\n       I did a new implementation without std::string, and more simple and efficiente on the for loop\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T01:05:12.851+0000",
                    "updated": "2021-11-05T01:05:12.851+0000",
                    "started": "2021-11-05T01:05:12.851+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676830",
                    "issueId": "13408553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408553/worklog/676831",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #11551:\nURL: https://github.com/apache/arrow/pull/11551#discussion_r743326012\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  int32_t counter = 0;\n+  for (char& c : str) {\n+    if (n_to_mask > 0 && counter < n_to_mask && isalnum(c)) {\n+      if (isdigit(c)) {\n+        c = 'n';\n+      } else {\n+        if (isupper(c)) {\n+          c = 'X';\n+        } else {\n+          c = 'x';\n+        }\n+      }\n+      counter++;\n+    }\n+  }\n+\n+  *out_len = static_cast<int32_t>(str.size());\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(out, str.c_str(), *out_len);\n+  return out;\n+}\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_last_n(int64_t context, const char* data, int32_t data_len,\n+                               int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  std::reverse(str.begin(), str.end());\n\nReview comment:\n       It was simple to implement, but the new code is way lighter and simpler\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T01:05:38.056+0000",
                    "updated": "2021-11-05T01:05:38.056+0000",
                    "started": "2021-11-05T01:05:38.056+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676831",
                    "issueId": "13408553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408553/worklog/676832",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #11551:\nURL: https://github.com/apache/arrow/pull/11551#discussion_r743326066\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  int32_t counter = 0;\n+  for (char& c : str) {\n+    if (n_to_mask > 0 && counter < n_to_mask && isalnum(c)) {\n+      if (isdigit(c)) {\n+        c = 'n';\n+      } else {\n+        if (isupper(c)) {\n+          c = 'X';\n+        } else {\n+          c = 'x';\n+        }\n+      }\n+      counter++;\n+    }\n+  }\n+\n+  *out_len = static_cast<int32_t>(str.size());\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(out, str.c_str(), *out_len);\n+  return out;\n+}\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_last_n(int64_t context, const char* data, int32_t data_len,\n\nReview comment:\n       Did the same improvements on mask_last_n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T01:05:51.163+0000",
                    "updated": "2021-11-05T01:05:51.163+0000",
                    "started": "2021-11-05T01:05:51.163+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676832",
                    "issueId": "13408553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408553/worklog/676833",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #11551:\nURL: https://github.com/apache/arrow/pull/11551#discussion_r743327028\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -766,4 +766,40 @@ TEST(TestGdvFnStubs, TestCastVarbinaryFloat8) {\n   ctx.Reset();\n }\n \n+TEST(TestGdvFnStubs, TestMaskFirstN) {\n\nReview comment:\n       If it passes a negative number, it will threat it as a positive number, so I did the handling of the negative number on the function\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T01:08:54.556+0000",
                    "updated": "2021-11-05T01:08:54.556+0000",
                    "started": "2021-11-05T01:08:54.556+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676833",
                    "issueId": "13408553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408553/worklog/676834",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #11551:\nURL: https://github.com/apache/arrow/pull/11551#discussion_r743327098\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -1599,5 +1677,31 @@ void ExportedStubFunctions::AddMappings(Engine* engine) const {\n   engine->AddGlobalMappingForFunc(\"gdv_fn_initcap_utf8\",\n                                   types->i8_ptr_type() /*return_type*/, args,\n                                   reinterpret_cast<void*>(gdv_fn_initcap_utf8));\n+\n+  // gdv_fn_mask_first_n\n+  args = {\n\nReview comment:\n       Sounds good to me\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T01:09:17.752+0000",
                    "updated": "2021-11-05T01:09:17.752+0000",
                    "started": "2021-11-05T01:09:17.751+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676834",
                    "issueId": "13408553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408553/worklog/676904",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on a change in pull request #11551:\nURL: https://github.com/apache/arrow/pull/11551#discussion_r743405369\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,88 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n+    n_to_mask = n_to_mask * (-1);\n+  }\n+\n+  *out_len = data_len;\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  // do the masking\n+  for (int i = 0; i < data_len; ++i) {\n+    if(isdigit(data[i]) && i < n_to_mask) {\n+      out[i] = 'n';\n+      continue;\n+    }\n+    if(isupper(data[i]) && i < n_to_mask) {\n+      out[i] = 'X';\n+      continue;\n+    }\n+    if(islower(data[i]) && i < n_to_mask) {\n+      out[i] = 'x';\n+      continue;\n+    }\n+    out[i] = data[i];\n+  }\n+\n+  return out;\n+}\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_last_n(int64_t context, const char* data, int32_t data_len,\n+                               int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n+    n_to_mask = n_to_mask * (-1);\n+  }\n+\n+  *out_len = data_len;\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  // do the masking\n+  for (int i = 0; i < data_len; ++i) {\n\nReview comment:\n       Same here... This should be memcpy followed by a loop towards the end for the last n chars\r\n   \r\n   And, use the mask_array to make the loop efficient\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,88 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n\nReview comment:\n       Not sure about this. Can you check how this is implemented in Hive?\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,88 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n+    n_to_mask = n_to_mask * (-1);\n+  }\n+\n+  *out_len = data_len;\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  // do the masking\n+  for (int i = 0; i < data_len; ++i) {\n+    if(isdigit(data[i]) && i < n_to_mask) {\n\nReview comment:\n       Can you check how Hive implements this for utf-8 strings? This logic works for ascii input, it doesn't work for utf-8 input\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,88 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n+    n_to_mask = n_to_mask * (-1);\n+  }\n+\n+  *out_len = data_len;\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  // do the masking\n+  for (int i = 0; i < data_len; ++i) {\n\nReview comment:\n       This loop should only be from i = 0; and i < n_to_mask\r\n   \r\n   After this loop, you should just use memcpy() to copy the remaining bytes\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,88 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n+    n_to_mask = n_to_mask * (-1);\n+  }\n+\n+  *out_len = data_len;\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  // do the masking\n+  for (int i = 0; i < data_len; ++i) {\n+    if(isdigit(data[i]) && i < n_to_mask) {\n\nReview comment:\n       This is going to be slow... Please construct a static array as follows:\r\n   final char[256] mask_array = {\r\n    (char)0, (char)1, ....\r\n    'n', 'n', // for the ascii values of '0' to '9'\r\n    'X', 'X', // for the ascii values of 'A' to 'Z'\r\n    'x', 'x', // for the ascii values of 'a' to 'z'\r\n   };\r\n   \r\n   With this array, this loop becomes:\r\n   out[i] = mask_array[data[i]];\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T05:58:14.541+0000",
                    "updated": "2021-11-05T05:58:14.541+0000",
                    "started": "2021-11-05T05:58:14.541+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676904",
                    "issueId": "13408553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408553/worklog/677179",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on a change in pull request #11551:\nURL: https://github.com/apache/arrow/pull/11551#discussion_r743405369\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,88 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n+    n_to_mask = n_to_mask * (-1);\n+  }\n+\n+  *out_len = data_len;\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  // do the masking\n+  for (int i = 0; i < data_len; ++i) {\n+    if(isdigit(data[i]) && i < n_to_mask) {\n+      out[i] = 'n';\n+      continue;\n+    }\n+    if(isupper(data[i]) && i < n_to_mask) {\n+      out[i] = 'X';\n+      continue;\n+    }\n+    if(islower(data[i]) && i < n_to_mask) {\n+      out[i] = 'x';\n+      continue;\n+    }\n+    out[i] = data[i];\n+  }\n+\n+  return out;\n+}\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_last_n(int64_t context, const char* data, int32_t data_len,\n+                               int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n+    n_to_mask = n_to_mask * (-1);\n+  }\n+\n+  *out_len = data_len;\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  // do the masking\n+  for (int i = 0; i < data_len; ++i) {\n\nReview comment:\n       Same here... This should be memcpy followed by a loop towards the end for the last n chars\r\n   \r\n   And, use the mask_array to make the loop efficient\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,88 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n\nReview comment:\n       Not sure about this. Can you check how this is implemented in Hive?\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,88 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n+    n_to_mask = n_to_mask * (-1);\n+  }\n+\n+  *out_len = data_len;\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  // do the masking\n+  for (int i = 0; i < data_len; ++i) {\n+    if(isdigit(data[i]) && i < n_to_mask) {\n\nReview comment:\n       Can you check how Hive implements this for utf-8 strings? This logic works for ascii input, it doesn't work for utf-8 input\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,88 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n+    n_to_mask = n_to_mask * (-1);\n+  }\n+\n+  *out_len = data_len;\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  // do the masking\n+  for (int i = 0; i < data_len; ++i) {\n\nReview comment:\n       This loop should only be from i = 0; and i < n_to_mask\r\n   \r\n   After this loop, you should just use memcpy() to copy the remaining bytes\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,88 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n+    n_to_mask = n_to_mask * (-1);\n+  }\n+\n+  *out_len = data_len;\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  // do the masking\n+  for (int i = 0; i < data_len; ++i) {\n+    if(isdigit(data[i]) && i < n_to_mask) {\n\nReview comment:\n       This is going to be slow... Please construct a static array as follows:\r\n   final char[256] mask_array = {\r\n    (char)0, (char)1, ....\r\n    'n', 'n', // for the ascii values of '0' to '9'\r\n    'X', 'X', // for the ascii values of 'A' to 'Z'\r\n    'x', 'x', // for the ascii values of 'a' to 'z'\r\n   };\r\n   \r\n   With this array, this loop becomes:\r\n   out[i] = mask_array[data[i]];\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T19:19:43.321+0000",
                    "updated": "2021-11-05T19:19:43.321+0000",
                    "started": "2021-11-05T19:19:43.321+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677179",
                    "issueId": "13408553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408553/worklog/677382",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #11551:\nURL: https://github.com/apache/arrow/pull/11551#discussion_r743325768\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n\nReview comment:\n       I did a new implementation without std::string, and more simple and efficiente on the for loop\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n\nReview comment:\n       Yes, it should, so I fixed\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  int32_t counter = 0;\n+  for (char& c : str) {\n\nReview comment:\n       I did a new implementation without std::string, and more simple and efficiente on the for loop\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  int32_t counter = 0;\n+  for (char& c : str) {\n+    if (n_to_mask > 0 && counter < n_to_mask && isalnum(c)) {\n+      if (isdigit(c)) {\n+        c = 'n';\n+      } else {\n+        if (isupper(c)) {\n+          c = 'X';\n+        } else {\n+          c = 'x';\n+        }\n+      }\n+      counter++;\n+    }\n+  }\n+\n+  *out_len = static_cast<int32_t>(str.size());\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(out, str.c_str(), *out_len);\n+  return out;\n+}\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_last_n(int64_t context, const char* data, int32_t data_len,\n+                               int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  std::reverse(str.begin(), str.end());\n\nReview comment:\n       It was simple to implement, but the new code is way lighter and simpler\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  int32_t counter = 0;\n+  for (char& c : str) {\n+    if (n_to_mask > 0 && counter < n_to_mask && isalnum(c)) {\n+      if (isdigit(c)) {\n+        c = 'n';\n+      } else {\n+        if (isupper(c)) {\n+          c = 'X';\n+        } else {\n+          c = 'x';\n+        }\n+      }\n+      counter++;\n+    }\n+  }\n+\n+  *out_len = static_cast<int32_t>(str.size());\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(out, str.c_str(), *out_len);\n+  return out;\n+}\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_last_n(int64_t context, const char* data, int32_t data_len,\n\nReview comment:\n       Did the same improvements on mask_last_n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -766,4 +766,40 @@ TEST(TestGdvFnStubs, TestCastVarbinaryFloat8) {\n   ctx.Reset();\n }\n \n+TEST(TestGdvFnStubs, TestMaskFirstN) {\n\nReview comment:\n       If it passes a negative number, it will threat it as a positive number, so I did the handling of the negative number on the function\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -1599,5 +1677,31 @@ void ExportedStubFunctions::AddMappings(Engine* engine) const {\n   engine->AddGlobalMappingForFunc(\"gdv_fn_initcap_utf8\",\n                                   types->i8_ptr_type() /*return_type*/, args,\n                                   reinterpret_cast<void*>(gdv_fn_initcap_utf8));\n+\n+  // gdv_fn_mask_first_n\n+  args = {\n\nReview comment:\n       Sounds good to me\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T19:44:07.662+0000",
                    "updated": "2021-11-05T19:44:07.662+0000",
                    "started": "2021-11-05T19:44:07.661+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677382",
                    "issueId": "13408553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408553/worklog/677587",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on a change in pull request #11551:\nURL: https://github.com/apache/arrow/pull/11551#discussion_r743405369\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,88 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n+    n_to_mask = n_to_mask * (-1);\n+  }\n+\n+  *out_len = data_len;\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  // do the masking\n+  for (int i = 0; i < data_len; ++i) {\n+    if(isdigit(data[i]) && i < n_to_mask) {\n+      out[i] = 'n';\n+      continue;\n+    }\n+    if(isupper(data[i]) && i < n_to_mask) {\n+      out[i] = 'X';\n+      continue;\n+    }\n+    if(islower(data[i]) && i < n_to_mask) {\n+      out[i] = 'x';\n+      continue;\n+    }\n+    out[i] = data[i];\n+  }\n+\n+  return out;\n+}\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_last_n(int64_t context, const char* data, int32_t data_len,\n+                               int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n+    n_to_mask = n_to_mask * (-1);\n+  }\n+\n+  *out_len = data_len;\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  // do the masking\n+  for (int i = 0; i < data_len; ++i) {\n\nReview comment:\n       Same here... This should be memcpy followed by a loop towards the end for the last n chars\r\n   \r\n   And, use the mask_array to make the loop efficient\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,88 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n\nReview comment:\n       Not sure about this. Can you check how this is implemented in Hive?\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,88 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n+    n_to_mask = n_to_mask * (-1);\n+  }\n+\n+  *out_len = data_len;\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  // do the masking\n+  for (int i = 0; i < data_len; ++i) {\n+    if(isdigit(data[i]) && i < n_to_mask) {\n\nReview comment:\n       Can you check how Hive implements this for utf-8 strings? This logic works for ascii input, it doesn't work for utf-8 input\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,88 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n+    n_to_mask = n_to_mask * (-1);\n+  }\n+\n+  *out_len = data_len;\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  // do the masking\n+  for (int i = 0; i < data_len; ++i) {\n\nReview comment:\n       This loop should only be from i = 0; and i < n_to_mask\r\n   \r\n   After this loop, you should just use memcpy() to copy the remaining bytes\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,88 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n+    n_to_mask = n_to_mask * (-1);\n+  }\n+\n+  *out_len = data_len;\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  // do the masking\n+  for (int i = 0; i < data_len; ++i) {\n+    if(isdigit(data[i]) && i < n_to_mask) {\n\nReview comment:\n       This is going to be slow... Please construct a static array as follows:\r\n   final char[256] mask_array = {\r\n    (char)0, (char)1, ....\r\n    'n', 'n', // for the ascii values of '0' to '9'\r\n    'X', 'X', // for the ascii values of 'A' to 'Z'\r\n    'x', 'x', // for the ascii values of 'a' to 'z'\r\n   };\r\n   \r\n   With this array, this loop becomes:\r\n   out[i] = mask_array[data[i]];\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T20:12:50.024+0000",
                    "updated": "2021-11-05T20:12:50.024+0000",
                    "started": "2021-11-05T20:12:50.023+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677587",
                    "issueId": "13408553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408553/worklog/677762",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #11551:\nURL: https://github.com/apache/arrow/pull/11551#discussion_r743325768\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n\nReview comment:\n       I did a new implementation without std::string, and more simple and efficiente on the for loop\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n\nReview comment:\n       Yes, it should, so I fixed\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  int32_t counter = 0;\n+  for (char& c : str) {\n\nReview comment:\n       I did a new implementation without std::string, and more simple and efficiente on the for loop\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  int32_t counter = 0;\n+  for (char& c : str) {\n+    if (n_to_mask > 0 && counter < n_to_mask && isalnum(c)) {\n+      if (isdigit(c)) {\n+        c = 'n';\n+      } else {\n+        if (isupper(c)) {\n+          c = 'X';\n+        } else {\n+          c = 'x';\n+        }\n+      }\n+      counter++;\n+    }\n+  }\n+\n+  *out_len = static_cast<int32_t>(str.size());\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(out, str.c_str(), *out_len);\n+  return out;\n+}\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_last_n(int64_t context, const char* data, int32_t data_len,\n+                               int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  std::reverse(str.begin(), str.end());\n\nReview comment:\n       It was simple to implement, but the new code is way lighter and simpler\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,83 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  std::string str(data, data_len);\n+  int32_t counter = 0;\n+  for (char& c : str) {\n+    if (n_to_mask > 0 && counter < n_to_mask && isalnum(c)) {\n+      if (isdigit(c)) {\n+        c = 'n';\n+      } else {\n+        if (isupper(c)) {\n+          c = 'X';\n+        } else {\n+          c = 'x';\n+        }\n+      }\n+      counter++;\n+    }\n+  }\n+\n+  *out_len = static_cast<int32_t>(str.size());\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  memcpy(out, str.c_str(), *out_len);\n+  return out;\n+}\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_last_n(int64_t context, const char* data, int32_t data_len,\n\nReview comment:\n       Did the same improvements on mask_last_n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -766,4 +766,40 @@ TEST(TestGdvFnStubs, TestCastVarbinaryFloat8) {\n   ctx.Reset();\n }\n \n+TEST(TestGdvFnStubs, TestMaskFirstN) {\n\nReview comment:\n       If it passes a negative number, it will threat it as a positive number, so I did the handling of the negative number on the function\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -1599,5 +1677,31 @@ void ExportedStubFunctions::AddMappings(Engine* engine) const {\n   engine->AddGlobalMappingForFunc(\"gdv_fn_initcap_utf8\",\n                                   types->i8_ptr_type() /*return_type*/, args,\n                                   reinterpret_cast<void*>(gdv_fn_initcap_utf8));\n+\n+  // gdv_fn_mask_first_n\n+  args = {\n\nReview comment:\n       Sounds good to me\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T20:34:53.224+0000",
                    "updated": "2021-11-05T20:34:53.224+0000",
                    "started": "2021-11-05T20:34:53.223+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677762",
                    "issueId": "13408553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408553/worklog/677926",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #11551:\nURL: https://github.com/apache/arrow/pull/11551#discussion_r744006039\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,88 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n+    n_to_mask = n_to_mask * (-1);\n+  }\n+\n+  *out_len = data_len;\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  // do the masking\n+  for (int i = 0; i < data_len; ++i) {\n+    if(isdigit(data[i]) && i < n_to_mask) {\n\nReview comment:\n       In hive implementation it does a similar logic of what I use, as it can bee seen here: https://github.com/apache/hive/blob/c8c5d2bee7f357ab873d0f3366ae94624d9a73fe/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMask.java#L240. Should I use your static array, or leave this as it is?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T22:22:17.644+0000",
                    "updated": "2021-11-05T22:22:17.644+0000",
                    "started": "2021-11-05T22:22:17.643+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677926",
                    "issueId": "13408553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408553/worklog/677946",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #11551:\nURL: https://github.com/apache/arrow/pull/11551#discussion_r744023897\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,88 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n+    n_to_mask = n_to_mask * (-1);\n+  }\n+\n+  *out_len = data_len;\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  // do the masking\n+  for (int i = 0; i < data_len; ++i) {\n\nReview comment:\n       Done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T23:27:47.251+0000",
                    "updated": "2021-11-05T23:27:47.251+0000",
                    "started": "2021-11-05T23:27:47.250+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677946",
                    "issueId": "13408553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408553/worklog/677947",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #11551:\nURL: https://github.com/apache/arrow/pull/11551#discussion_r744024137\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,88 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n\nReview comment:\n       In Hive implementation it did not say anything about that, but I've changed the code and now it handles this case better\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T23:28:44.527+0000",
                    "updated": "2021-11-05T23:28:44.527+0000",
                    "started": "2021-11-05T23:28:44.527+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677947",
                    "issueId": "13408553"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408553/worklog/677948",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #11551:\nURL: https://github.com/apache/arrow/pull/11551#discussion_r744024217\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -794,6 +795,88 @@ const char* gdv_fn_initcap_utf8(int64_t context, const char* data, int32_t data_\n   *out_len = out_idx;\n   return out;\n }\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_first_n(int64_t context, const char* data, int32_t data_len,\n+                                int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n+    n_to_mask = n_to_mask * (-1);\n+  }\n+\n+  *out_len = data_len;\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  // do the masking\n+  for (int i = 0; i < data_len; ++i) {\n+    if(isdigit(data[i]) && i < n_to_mask) {\n+      out[i] = 'n';\n+      continue;\n+    }\n+    if(isupper(data[i]) && i < n_to_mask) {\n+      out[i] = 'X';\n+      continue;\n+    }\n+    if(islower(data[i]) && i < n_to_mask) {\n+      out[i] = 'x';\n+      continue;\n+    }\n+    out[i] = data[i];\n+  }\n+\n+  return out;\n+}\n+\n+GANDIVA_EXPORT\n+const char* gdv_fn_mask_last_n(int64_t context, const char* data, int32_t data_len,\n+                               int32_t n_to_mask, int32_t* out_len) {\n+  if (data_len <= 0) {\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  if (n_to_mask < 0) {\n+    n_to_mask = n_to_mask * (-1);\n+  }\n+\n+  *out_len = data_len;\n+\n+  char* out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, *out_len));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return nullptr;\n+  }\n+\n+  // do the masking\n+  for (int i = 0; i < data_len; ++i) {\n\nReview comment:\n       Almost done, see comment above\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T23:29:07.934+0000",
                    "updated": "2021-11-05T23:29:07.934+0000",
                    "started": "2021-11-05T23:29:07.933+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677948",
                    "issueId": "13408553"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 36000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6eaa32f9[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@328e90ee[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@77f6c55[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@41b085b4[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@117b9a88[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@44b1f39a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3850229d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7d888d06[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@306ae7e5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7b8cff51[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42f17e77[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7ba82b92[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 36000,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Dec 10 09:25:29 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-12-10T09:25:29.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14482/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-10-26T22:44:35.000+0000",
        "updated": "2021-12-14T23:40:57.000+0000",
        "timeoriginalestimate": null,
        "description": "*MASK_FIRST_N*\r\n\r\n{color:#172b4d}Returns a masked version of str with the first n values masked.{color}{color:#172b4d} Upper case letters are converted to \"X\", lower case letters are converted to \"x\" and numbers are converted to \"n\". For example, mask_first_n(\"1234-5678-8765-4321\", 4) results in nnnn-5678-8765-4321.\r\n\r\n*MASK_LAST_N*\r\n\r\nReturns a masked version of str with the last n values masked. Upper case letters are converted to \"X\", lower case letters are converted to \"x\" and numbers are converted to \"n\". For example, mask_last_n(\"1234-5678-8765-4321\", 4) results in 1234-5678-8765-nnnn.{color}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "10h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 36000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Gandiva] Implement MASK_FIRST_N and MASK_LAST_N functions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408553/comment/17456999",
                    "id": "17456999",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "body": "Issue resolved by pull request 11551\n[https://github.com/apache/arrow/pull/11551]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "created": "2021-12-10T09:25:29.196+0000",
                    "updated": "2021-12-10T09:25:29.196+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0w6qg:",
        "customfield_12314139": null
    }
}