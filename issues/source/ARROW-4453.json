{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13213408",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213408",
    "key": "ARROW-4453",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
            "name": "rokm",
            "key": "rokm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Rok Mihevc",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
            "name": "pcmoritz",
            "key": "pcmoritz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Philipp Moritz",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
            "name": "pcmoritz",
            "key": "pcmoritz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Philipp Moritz",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 34800,
            "total": 34800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 34800,
            "total": 34800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4453/votes",
            "votes": 1,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 62,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213408/worklog/252801",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on pull request #4446: [WIP] ARROW-4453: Cython wrappers for SparseTensor\nURL: https://github.com/apache/arrow/pull/4446\n \n \n   Creting cython wrappers for SparseTensor.\r\n   This is to resolve [ARROW-4453](https://issues.apache.org/jira/browse/ARROW-4453).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-02T02:42:29.109+0000",
                    "updated": "2019-06-02T02:42:29.109+0000",
                    "started": "2019-06-02T02:42:29.108+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "252801",
                    "issueId": "13213408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213408/worklog/252880",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on issue #4446: [WIP] ARROW-4453: Cython wrappers for SparseTensor\nURL: https://github.com/apache/arrow/pull/4446#issuecomment-498088108\n \n \n   @rok You can fix lint errors in pyarrow.cc and pyarrow.h by `ninja format` or `make format`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-03T01:56:07.387+0000",
                    "updated": "2019-06-03T01:56:07.387+0000",
                    "started": "2019-06-03T01:56:07.386+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "252880",
                    "issueId": "13213408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213408/worklog/253394",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on issue #4446: [WIP] ARROW-4453: Cython wrappers for SparseTensor\nURL: https://github.com/apache/arrow/pull/4446#issuecomment-498439486\n \n \n   > @rok You can fix lint errors in pyarrow.cc and pyarrow.h by `ninja format` or `make format`.\r\n   \r\n   @mrkn I did, thanks for the tip. :)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-03T21:49:37.892+0000",
                    "updated": "2019-06-03T21:49:37.892+0000",
                    "started": "2019-06-03T21:49:37.890+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "253394",
                    "issueId": "13213408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213408/worklog/263426",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on issue #4446: ARROW-4453: [Python] Cython wrappers for SparseTensor\nURL: https://github.com/apache/arrow/pull/4446#issuecomment-503791136\n \n \n   I feel this is ready for a first review now.\r\n   \r\n   @mrkn Should we implement a sparse_tensor.to_dense() method? We would probably want to do that in c++ with a sparse_tensor.to_tensor method and only wrap it with Python.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-20T00:12:25.175+0000",
                    "updated": "2019-06-20T00:12:25.175+0000",
                    "started": "2019-06-20T00:12:25.175+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "263426",
                    "issueId": "13213408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213408/worklog/263427",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on pull request #4446: ARROW-4453: [Python] Cython wrappers for SparseTensor\nURL: https://github.com/apache/arrow/pull/4446#discussion_r295572114\n \n \n\n ##########\n File path: python/pyarrow/tests/test_sparse_tensor.py\n ##########\n @@ -0,0 +1,228 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import pytest\n+import sys\n+\n+import numpy as np\n+import pyarrow as pa\n+\n+\n+@pytest.mark.parametrize('sparse_tensor_type', [\n+    pa.SparseTensorCSR,\n+    pa.SparseTensorCOO,\n+])\n+def test_sparse_tensor_attrs(sparse_tensor_type):\n+    data = np.array([\n+        [0, 1, 0, 0, 1],\n+        [0, 0, 0, 0, 0],\n+        [0, 0, 0, 1, 0],\n+        [0, 0, 0, 0, 0],\n+        [0, 3, 0, 0, 0],\n+    ])\n+    sparse_tensor = sparse_tensor_type.from_dense_numpy(data)\n+\n+    assert sparse_tensor.ndim == 2\n+    assert sparse_tensor.size == 25\n+    assert sparse_tensor.shape == data.shape\n+    assert sparse_tensor.is_mutable\n+    assert sparse_tensor.dim_name(0) == b''\n+    assert sparse_tensor.dim_names == []\n+    assert sparse_tensor.non_zero_length == 4\n+\n+\n+def test_sparse_tensor_coo_base_object():\n+    sparse_tensor = pa.SparseTensorCOO.from_dense_numpy(np.random.randn(10, 4))\n+    n = sys.getrefcount(sparse_tensor)\n+    data, coords = sparse_tensor.to_numpy()  # noqa\n+    assert sys.getrefcount(sparse_tensor) == n + 1\n+\n+\n+def test_sparse_tensor_csr_base_object():\n+    sparse_tensor = pa.SparseTensorCSR.from_dense_numpy(np.random.randn(10, 4))\n+    n = sys.getrefcount(sparse_tensor)\n+    data, indptr, indices = sparse_tensor.to_numpy()  # noqa\n+    assert sys.getrefcount(sparse_tensor) == n + 1\n+\n+\n+@pytest.mark.skip\n+@pytest.mark.parametrize('sparse_tensor_type', [\n+    pa.SparseTensorCSR,\n+    pa.SparseTensorCOO,\n+])\n+def test_sparse_tensor_equals(sparse_tensor_type):\n+    def eq(a, b):\n+        assert a.equals(b)\n+        assert a == b\n+        assert not (a != b)\n+\n+    def ne(a, b):\n+        assert not a.equals(b)\n+        assert not (a == b)\n+        assert a != b\n+\n+    data = np.random.randn(10, 6)[::, ::2]\n+    sparse_tensor1 = sparse_tensor_type.from_dense_numpy(data)\n+    sparse_tensor2 = sparse_tensor_type.from_dense_numpy(np.ascontiguousarray(data))\n+    eq(sparse_tensor1, sparse_tensor2)\n+    data = data.copy()\n+    data[9, 0] = 1.0\n+    sparse_tensor2 = sparse_tensor_type.from_dense_numpy(np.ascontiguousarray(data))\n+    ne(sparse_tensor1, sparse_tensor2)\n+\n+\n+@pytest.mark.parametrize('dtype_str,arrow_type', [\n+    ('i1', pa.int8()),\n+    ('i2', pa.int16()),\n+    ('i4', pa.int32()),\n+    ('i8', pa.int64()),\n+    ('u1', pa.uint8()),\n+    ('u2', pa.uint16()),\n+    ('u4', pa.uint32()),\n+    ('u8', pa.uint64()),\n+    ('f2', pa.float16()),\n+    ('f4', pa.float32()),\n+    ('f8', pa.float64())\n+])\n+def test_sparse_tensor_coo_from_dense(dtype_str, arrow_type):\n+    dtype = np.dtype(dtype_str)\n+    data_vector = np.array([4, 9, 7, 5]).astype(dtype)\n+    coords = np.array([[0, 0], [1, 3], [0, 2], [1, 3]])\n+    data = np.array([[4, 0, 9, 0],\n+                     [0, 7, 0, 0],\n+                     [0, 0, 0, 0],\n+                     [0, 0, 0, 5]]).astype(dtype)\n+    tensor = pa.Tensor.from_numpy(data)\n+\n+    # Test from numpy array\n+    sparse_tensor = pa.SparseTensorCOO.from_dense_numpy(data)\n+    repr(sparse_tensor)\n+    assert sparse_tensor.type == arrow_type\n+    result_data, result_coords = sparse_tensor.to_numpy()\n+    assert (data_vector == result_data).all()\n+    assert (result_coords == coords).all()\n+\n+    # Test from Tensor\n+    sparse_tensor = pa.SparseTensorCOO.from_tensor(tensor)\n+    repr(sparse_tensor)\n+    assert sparse_tensor.type == arrow_type\n+    result_data, result_coords = sparse_tensor.to_numpy()\n+    assert (data_vector == result_data).all()\n+    assert (result_coords == coords).all()\n+\n+\n+@pytest.mark.parametrize('dtype_str,arrow_type', [\n+    ('i1', pa.int8()),\n+    ('i2', pa.int16()),\n+    ('i4', pa.int32()),\n+    ('i8', pa.int64()),\n+    ('u1', pa.uint8()),\n+    ('u2', pa.uint16()),\n+    ('u4', pa.uint32()),\n+    ('u8', pa.uint64()),\n+    ('f2', pa.float16()),\n+    ('f4', pa.float32()),\n+    ('f8', pa.float64())\n+])\n+def test_sparse_tensor_csr_from_dense(dtype_str, arrow_type):\n+    dtype = np.dtype(dtype_str)\n+    dense_data = np.array([[1, 0, 2],\n+                           [0, 0, 3],\n+                           [4, 5, 6]]).astype(dtype)\n+\n+    data = np.array([1, 2, 3, 4, 5, 6]).astype(dtype)\n+    indptr = np.array([0, 2, 3, 6])\n+    indices = np.array([0, 2, 2, 0, 1, 2])\n+    tensor = pa.Tensor.from_numpy(dense_data)\n+\n+    # Test from numpy array\n+    sparse_tensor = pa.SparseTensorCSR.from_dense_numpy(dense_data)\n+    repr(sparse_tensor)\n+    result_data, result_indptr, result_indices = sparse_tensor.to_numpy()\n+    assert (data == result_data).all()\n+    assert (indptr == result_indptr).all()\n+    assert (indices == result_indices).all()\n+\n+    # Test from Tensor\n+    sparse_tensor = pa.SparseTensorCSR.from_tensor(tensor)\n+    repr(sparse_tensor)\n+    assert sparse_tensor.type == arrow_type\n+    result_data, result_indptr, result_indices = sparse_tensor.to_numpy()\n+    assert (data == result_data).all()\n+    assert (indptr == result_indptr).all()\n+    assert (indices == result_indices).all()\n+\n+\n+@pytest.mark.skip\n \n Review comment:\n   For some reason this test fails in CI. I can't reproduce it locally.\r\n   E.g. [https://travis-ci.org/apache/arrow/jobs/547437221](https://travis-ci.org/apache/arrow/jobs/547437221).\r\n   ```\r\n   pyarrow/tests/test_serialization.py .........ss.......s.............     [ 87%]\r\n   pyarrow/tests/test_sparse_tensor.py ......................../Users/travis/build/apache/arrow/ci/travis_script_python.sh: line 201: 14116 Abort trap: 6           (core dumped) python -m pytest $PYARROW_PYTEST_FLAGS pyarrow/tests\r\n   The command \"$TRAVIS_BUILD_DIR/ci/travis_script_python.sh 3.6\" exited with 134.\r\n   ```\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-20T00:16:27.427+0000",
                    "updated": "2019-06-20T00:16:27.427+0000",
                    "started": "2019-06-20T00:16:27.426+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "263427",
                    "issueId": "13213408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213408/worklog/263428",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on issue #4446: ARROW-4453: [Python] Cython wrappers for SparseTensor\nURL: https://github.com/apache/arrow/pull/4446#issuecomment-503792308\n \n \n   @rok Yes, I also think we should have `sparse_tensor.ToTensor()` method in C++ and wrap it in Python.\r\n   Could you implement such a method in C++, or shall I do it?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-20T00:18:34.550+0000",
                    "updated": "2019-06-20T00:18:34.550+0000",
                    "started": "2019-06-20T00:18:34.548+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "263428",
                    "issueId": "13213408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213408/worklog/263431",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on issue #4446: ARROW-4453: [Python] Cython wrappers for SparseTensor\nURL: https://github.com/apache/arrow/pull/4446#issuecomment-503793490\n \n \n   @mrkn I'd be happy to do it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-20T00:25:18.392+0000",
                    "updated": "2019-06-20T00:25:18.392+0000",
                    "started": "2019-06-20T00:25:18.391+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "263431",
                    "issueId": "13213408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213408/worklog/263432",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on issue #4446: ARROW-4453: [Python] Cython wrappers for SparseTensor\nURL: https://github.com/apache/arrow/pull/4446#issuecomment-503793685\n \n \n   @rok Great!  Please ask me if you want to any help to do it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-20T00:26:30.315+0000",
                    "updated": "2019-06-20T00:26:30.315+0000",
                    "started": "2019-06-20T00:26:30.315+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "263432",
                    "issueId": "13213408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213408/worklog/265319",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4446: ARROW-4453: [Python] Cython wrappers for SparseTensor\nURL: https://github.com/apache/arrow/pull/4446#issuecomment-504695866\n \n \n   I added this to the 0.14 milestone so we can maybe get it merged early next week\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-22T20:26:08.982+0000",
                    "updated": "2019-06-22T20:26:08.982+0000",
                    "started": "2019-06-22T20:26:08.981+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "265319",
                    "issueId": "13213408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213408/worklog/265347",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on issue #4446: ARROW-4453: [Python] Cython wrappers for SparseTensor\nURL: https://github.com/apache/arrow/pull/4446#issuecomment-504702599\n \n \n   @wesm - that would be great.\r\n   Also: shall I open a new issue for implementing `sparse_tensor.ToTensor()` in c++ or just do it here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-22T22:22:08.803+0000",
                    "updated": "2019-06-22T22:22:08.803+0000",
                    "started": "2019-06-22T22:22:08.802+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "265347",
                    "issueId": "13213408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213408/worklog/265450",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4446: ARROW-4453: [Python] Cython wrappers for SparseTensor\nURL: https://github.com/apache/arrow/pull/4446#issuecomment-504792253\n \n \n   Either is fine so long as we close this current patch out\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-23T22:14:36.112+0000",
                    "updated": "2019-06-23T22:14:36.112+0000",
                    "started": "2019-06-23T22:14:36.111+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "265450",
                    "issueId": "13213408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213408/worklog/266712",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4446: ARROW-4453: [Python] Cython wrappers for SparseTensor\nURL: https://github.com/apache/arrow/pull/4446#discussion_r297204207\n \n \n\n ##########\n File path: python/pyarrow/tests/test_sparse_tensor.py\n ##########\n @@ -0,0 +1,228 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import pytest\n+import sys\n+\n+import numpy as np\n+import pyarrow as pa\n+\n+\n+@pytest.mark.parametrize('sparse_tensor_type', [\n+    pa.SparseTensorCSR,\n+    pa.SparseTensorCOO,\n+])\n+def test_sparse_tensor_attrs(sparse_tensor_type):\n+    data = np.array([\n+        [0, 1, 0, 0, 1],\n+        [0, 0, 0, 0, 0],\n+        [0, 0, 0, 1, 0],\n+        [0, 0, 0, 0, 0],\n+        [0, 3, 0, 0, 0],\n+    ])\n+    sparse_tensor = sparse_tensor_type.from_dense_numpy(data)\n+\n+    assert sparse_tensor.ndim == 2\n+    assert sparse_tensor.size == 25\n+    assert sparse_tensor.shape == data.shape\n+    assert sparse_tensor.is_mutable\n+    assert sparse_tensor.dim_name(0) == b''\n+    assert sparse_tensor.dim_names == []\n+    assert sparse_tensor.non_zero_length == 4\n+\n+\n+def test_sparse_tensor_coo_base_object():\n+    sparse_tensor = pa.SparseTensorCOO.from_dense_numpy(np.random.randn(10, 4))\n+    n = sys.getrefcount(sparse_tensor)\n+    data, coords = sparse_tensor.to_numpy()  # noqa\n+    assert sys.getrefcount(sparse_tensor) == n + 1\n+\n+\n+def test_sparse_tensor_csr_base_object():\n+    sparse_tensor = pa.SparseTensorCSR.from_dense_numpy(np.random.randn(10, 4))\n+    n = sys.getrefcount(sparse_tensor)\n+    data, indptr, indices = sparse_tensor.to_numpy()  # noqa\n+    assert sys.getrefcount(sparse_tensor) == n + 1\n+\n+\n+@pytest.mark.skip\n+@pytest.mark.parametrize('sparse_tensor_type', [\n+    pa.SparseTensorCSR,\n+    pa.SparseTensorCOO,\n+])\n+def test_sparse_tensor_equals(sparse_tensor_type):\n+    def eq(a, b):\n+        assert a.equals(b)\n+        assert a == b\n+        assert not (a != b)\n+\n+    def ne(a, b):\n+        assert not a.equals(b)\n+        assert not (a == b)\n+        assert a != b\n+\n+    data = np.random.randn(10, 6)[::, ::2]\n+    sparse_tensor1 = sparse_tensor_type.from_dense_numpy(data)\n+    sparse_tensor2 = sparse_tensor_type.from_dense_numpy(np.ascontiguousarray(data))\n+    eq(sparse_tensor1, sparse_tensor2)\n+    data = data.copy()\n+    data[9, 0] = 1.0\n+    sparse_tensor2 = sparse_tensor_type.from_dense_numpy(np.ascontiguousarray(data))\n+    ne(sparse_tensor1, sparse_tensor2)\n+\n+\n+@pytest.mark.parametrize('dtype_str,arrow_type', [\n+    ('i1', pa.int8()),\n+    ('i2', pa.int16()),\n+    ('i4', pa.int32()),\n+    ('i8', pa.int64()),\n+    ('u1', pa.uint8()),\n+    ('u2', pa.uint16()),\n+    ('u4', pa.uint32()),\n+    ('u8', pa.uint64()),\n+    ('f2', pa.float16()),\n+    ('f4', pa.float32()),\n+    ('f8', pa.float64())\n+])\n+def test_sparse_tensor_coo_from_dense(dtype_str, arrow_type):\n+    dtype = np.dtype(dtype_str)\n+    data_vector = np.array([4, 9, 7, 5]).astype(dtype)\n+    coords = np.array([[0, 0], [1, 3], [0, 2], [1, 3]])\n+    data = np.array([[4, 0, 9, 0],\n+                     [0, 7, 0, 0],\n+                     [0, 0, 0, 0],\n+                     [0, 0, 0, 5]]).astype(dtype)\n+    tensor = pa.Tensor.from_numpy(data)\n+\n+    # Test from numpy array\n+    sparse_tensor = pa.SparseTensorCOO.from_dense_numpy(data)\n+    repr(sparse_tensor)\n+    assert sparse_tensor.type == arrow_type\n+    result_data, result_coords = sparse_tensor.to_numpy()\n+    assert (data_vector == result_data).all()\n+    assert (result_coords == coords).all()\n+\n+    # Test from Tensor\n+    sparse_tensor = pa.SparseTensorCOO.from_tensor(tensor)\n+    repr(sparse_tensor)\n+    assert sparse_tensor.type == arrow_type\n+    result_data, result_coords = sparse_tensor.to_numpy()\n+    assert (data_vector == result_data).all()\n+    assert (result_coords == coords).all()\n+\n+\n+@pytest.mark.parametrize('dtype_str,arrow_type', [\n+    ('i1', pa.int8()),\n+    ('i2', pa.int16()),\n+    ('i4', pa.int32()),\n+    ('i8', pa.int64()),\n+    ('u1', pa.uint8()),\n+    ('u2', pa.uint16()),\n+    ('u4', pa.uint32()),\n+    ('u8', pa.uint64()),\n+    ('f2', pa.float16()),\n+    ('f4', pa.float32()),\n+    ('f8', pa.float64())\n+])\n+def test_sparse_tensor_csr_from_dense(dtype_str, arrow_type):\n+    dtype = np.dtype(dtype_str)\n+    dense_data = np.array([[1, 0, 2],\n+                           [0, 0, 3],\n+                           [4, 5, 6]]).astype(dtype)\n+\n+    data = np.array([1, 2, 3, 4, 5, 6]).astype(dtype)\n+    indptr = np.array([0, 2, 3, 6])\n+    indices = np.array([0, 2, 2, 0, 1, 2])\n+    tensor = pa.Tensor.from_numpy(dense_data)\n+\n+    # Test from numpy array\n+    sparse_tensor = pa.SparseTensorCSR.from_dense_numpy(dense_data)\n+    repr(sparse_tensor)\n+    result_data, result_indptr, result_indices = sparse_tensor.to_numpy()\n+    assert (data == result_data).all()\n+    assert (indptr == result_indptr).all()\n+    assert (indices == result_indices).all()\n+\n+    # Test from Tensor\n+    sparse_tensor = pa.SparseTensorCSR.from_tensor(tensor)\n+    repr(sparse_tensor)\n+    assert sparse_tensor.type == arrow_type\n+    result_data, result_indptr, result_indices = sparse_tensor.to_numpy()\n+    assert (data == result_data).all()\n+    assert (indptr == result_indptr).all()\n+    assert (indices == result_indices).all()\n+\n+\n+@pytest.mark.skip\n \n Review comment:\n   Hmm, we should install `pytest-faulthandler` on CI.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-25T14:29:20.351+0000",
                    "updated": "2019-06-25T14:29:20.351+0000",
                    "started": "2019-06-25T14:29:20.350+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "266712",
                    "issueId": "13213408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213408/worklog/266713",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4446: ARROW-4453: [Python] Cython wrappers for SparseTensor\nURL: https://github.com/apache/arrow/pull/4446#discussion_r297200973\n \n \n\n ##########\n File path: python/pyarrow/tests/test_sparse_tensor.py\n ##########\n @@ -0,0 +1,230 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import pytest\n+import sys\n+\n+import numpy as np\n+import pyarrow as pa\n+\n+\n+@pytest.mark.parametrize('sparse_tensor_type', [\n+    pa.SparseTensorCSR,\n+    pa.SparseTensorCOO,\n+])\n+def test_sparse_tensor_attrs(sparse_tensor_type):\n+    data = np.array([\n+        [0, 1, 0, 0, 1],\n+        [0, 0, 0, 0, 0],\n+        [0, 0, 0, 1, 0],\n+        [0, 0, 0, 0, 0],\n+        [0, 3, 0, 0, 0],\n+    ])\n+    sparse_tensor = sparse_tensor_type.from_dense_numpy(data)\n+\n+    assert sparse_tensor.ndim == 2\n+    assert sparse_tensor.size == 25\n+    assert sparse_tensor.shape == data.shape\n+    assert sparse_tensor.is_mutable\n+    assert sparse_tensor.dim_name(0) == b''\n+    assert sparse_tensor.dim_names == []\n+    assert sparse_tensor.non_zero_length == 4\n+\n+\n+def test_sparse_tensor_coo_base_object():\n+    sparse_tensor = pa.SparseTensorCOO.from_dense_numpy(np.random.randn(10, 4))\n+    n = sys.getrefcount(sparse_tensor)\n+    data, coords = sparse_tensor.to_numpy()  # noqa\n+    assert sys.getrefcount(sparse_tensor) == n + 1\n \n Review comment:\n   Also check that after `sparse_tensor = None`, `data` and `coords` still have the expected value?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-25T14:29:20.571+0000",
                    "updated": "2019-06-25T14:29:20.571+0000",
                    "started": "2019-06-25T14:29:20.570+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "266713",
                    "issueId": "13213408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213408/worklog/266714",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4446: ARROW-4453: [Python] Cython wrappers for SparseTensor\nURL: https://github.com/apache/arrow/pull/4446#discussion_r297205360\n \n \n\n ##########\n File path: python/pyarrow/tests/test_sparse_tensor.py\n ##########\n @@ -0,0 +1,228 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import pytest\n+import sys\n+\n+import numpy as np\n+import pyarrow as pa\n+\n+\n+@pytest.mark.parametrize('sparse_tensor_type', [\n+    pa.SparseTensorCSR,\n+    pa.SparseTensorCOO,\n+])\n+def test_sparse_tensor_attrs(sparse_tensor_type):\n+    data = np.array([\n+        [0, 1, 0, 0, 1],\n+        [0, 0, 0, 0, 0],\n+        [0, 0, 0, 1, 0],\n+        [0, 0, 0, 0, 0],\n+        [0, 3, 0, 0, 0],\n+    ])\n+    sparse_tensor = sparse_tensor_type.from_dense_numpy(data)\n+\n+    assert sparse_tensor.ndim == 2\n+    assert sparse_tensor.size == 25\n+    assert sparse_tensor.shape == data.shape\n+    assert sparse_tensor.is_mutable\n+    assert sparse_tensor.dim_name(0) == b''\n+    assert sparse_tensor.dim_names == []\n+    assert sparse_tensor.non_zero_length == 4\n+\n+\n+def test_sparse_tensor_coo_base_object():\n+    sparse_tensor = pa.SparseTensorCOO.from_dense_numpy(np.random.randn(10, 4))\n+    n = sys.getrefcount(sparse_tensor)\n+    data, coords = sparse_tensor.to_numpy()  # noqa\n+    assert sys.getrefcount(sparse_tensor) == n + 1\n+\n+\n+def test_sparse_tensor_csr_base_object():\n+    sparse_tensor = pa.SparseTensorCSR.from_dense_numpy(np.random.randn(10, 4))\n+    n = sys.getrefcount(sparse_tensor)\n+    data, indptr, indices = sparse_tensor.to_numpy()  # noqa\n+    assert sys.getrefcount(sparse_tensor) == n + 1\n+\n+\n+@pytest.mark.skip\n+@pytest.mark.parametrize('sparse_tensor_type', [\n+    pa.SparseTensorCSR,\n+    pa.SparseTensorCOO,\n+])\n+def test_sparse_tensor_equals(sparse_tensor_type):\n+    def eq(a, b):\n+        assert a.equals(b)\n+        assert a == b\n+        assert not (a != b)\n+\n+    def ne(a, b):\n+        assert not a.equals(b)\n+        assert not (a == b)\n+        assert a != b\n+\n+    data = np.random.randn(10, 6)[::, ::2]\n+    sparse_tensor1 = sparse_tensor_type.from_dense_numpy(data)\n+    sparse_tensor2 = sparse_tensor_type.from_dense_numpy(np.ascontiguousarray(data))\n+    eq(sparse_tensor1, sparse_tensor2)\n+    data = data.copy()\n+    data[9, 0] = 1.0\n+    sparse_tensor2 = sparse_tensor_type.from_dense_numpy(np.ascontiguousarray(data))\n+    ne(sparse_tensor1, sparse_tensor2)\n+\n+\n+@pytest.mark.parametrize('dtype_str,arrow_type', [\n+    ('i1', pa.int8()),\n+    ('i2', pa.int16()),\n+    ('i4', pa.int32()),\n+    ('i8', pa.int64()),\n+    ('u1', pa.uint8()),\n+    ('u2', pa.uint16()),\n+    ('u4', pa.uint32()),\n+    ('u8', pa.uint64()),\n+    ('f2', pa.float16()),\n+    ('f4', pa.float32()),\n+    ('f8', pa.float64())\n+])\n+def test_sparse_tensor_coo_from_dense(dtype_str, arrow_type):\n+    dtype = np.dtype(dtype_str)\n+    data_vector = np.array([4, 9, 7, 5]).astype(dtype)\n+    coords = np.array([[0, 0], [1, 3], [0, 2], [1, 3]])\n+    data = np.array([[4, 0, 9, 0],\n+                     [0, 7, 0, 0],\n+                     [0, 0, 0, 0],\n+                     [0, 0, 0, 5]]).astype(dtype)\n+    tensor = pa.Tensor.from_numpy(data)\n+\n+    # Test from numpy array\n+    sparse_tensor = pa.SparseTensorCOO.from_dense_numpy(data)\n+    repr(sparse_tensor)\n+    assert sparse_tensor.type == arrow_type\n+    result_data, result_coords = sparse_tensor.to_numpy()\n+    assert (data_vector == result_data).all()\n+    assert (result_coords == coords).all()\n+\n+    # Test from Tensor\n+    sparse_tensor = pa.SparseTensorCOO.from_tensor(tensor)\n+    repr(sparse_tensor)\n+    assert sparse_tensor.type == arrow_type\n+    result_data, result_coords = sparse_tensor.to_numpy()\n+    assert (data_vector == result_data).all()\n+    assert (result_coords == coords).all()\n+\n+\n+@pytest.mark.parametrize('dtype_str,arrow_type', [\n+    ('i1', pa.int8()),\n+    ('i2', pa.int16()),\n+    ('i4', pa.int32()),\n+    ('i8', pa.int64()),\n+    ('u1', pa.uint8()),\n+    ('u2', pa.uint16()),\n+    ('u4', pa.uint32()),\n+    ('u8', pa.uint64()),\n+    ('f2', pa.float16()),\n+    ('f4', pa.float32()),\n+    ('f8', pa.float64())\n+])\n+def test_sparse_tensor_csr_from_dense(dtype_str, arrow_type):\n+    dtype = np.dtype(dtype_str)\n+    dense_data = np.array([[1, 0, 2],\n+                           [0, 0, 3],\n+                           [4, 5, 6]]).astype(dtype)\n+\n+    data = np.array([1, 2, 3, 4, 5, 6]).astype(dtype)\n+    indptr = np.array([0, 2, 3, 6])\n+    indices = np.array([0, 2, 2, 0, 1, 2])\n+    tensor = pa.Tensor.from_numpy(dense_data)\n+\n+    # Test from numpy array\n+    sparse_tensor = pa.SparseTensorCSR.from_dense_numpy(dense_data)\n+    repr(sparse_tensor)\n+    result_data, result_indptr, result_indices = sparse_tensor.to_numpy()\n+    assert (data == result_data).all()\n+    assert (indptr == result_indptr).all()\n+    assert (indices == result_indices).all()\n+\n+    # Test from Tensor\n+    sparse_tensor = pa.SparseTensorCSR.from_tensor(tensor)\n+    repr(sparse_tensor)\n+    assert sparse_tensor.type == arrow_type\n+    result_data, result_indptr, result_indices = sparse_tensor.to_numpy()\n+    assert (data == result_data).all()\n+    assert (indptr == result_indptr).all()\n+    assert (indices == result_indices).all()\n+\n+\n+@pytest.mark.skip\n \n Review comment:\n   Also, did you compile in debug mode?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-25T14:29:20.796+0000",
                    "updated": "2019-06-25T14:29:20.796+0000",
                    "started": "2019-06-25T14:29:20.796+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "266714",
                    "issueId": "13213408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213408/worklog/266715",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4446: ARROW-4453: [Python] Cython wrappers for SparseTensor\nURL: https://github.com/apache/arrow/pull/4446#discussion_r297208758\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_convert.cc\n ##########\n @@ -274,5 +275,348 @@ Status TensorToNdarray(const std::shared_ptr<Tensor>& tensor, PyObject* base,\n   return Status::OK();\n }\n \n+Status SparseTensorCOOToNdarray(const std::shared_ptr<SparseTensorCOO>& sparse_tensor,\n+                                PyObject* base, PyObject** out_data,\n+                                PyObject** out_coords) {\n+  PyAcquireGIL lock;\n+\n+  int type_num_data;\n+  int type_num_coords;\n+  const auto& sparse_index = arrow::internal::checked_cast<const SparseCOOIndex&>(\n+      *sparse_tensor->sparse_index());\n+  const std::shared_ptr<arrow::NumericTensor<arrow::Int64Type>> sparse_index_coords =\n+      sparse_index.indices();\n+\n+  RETURN_NOT_OK(GetNumPyType(*sparse_tensor->type(), &type_num_data));\n+  PyArray_Descr* dtype_data = PyArray_DescrNewFromType(type_num_data);\n+  RETURN_NOT_OK(GetNumPyType(*sparse_index_coords->type(), &type_num_coords));\n+  PyArray_Descr* dtype_coords = PyArray_DescrNewFromType(type_num_coords);\n+  RETURN_IF_PYERROR();\n+\n+  const int ndim_coords = sparse_tensor->ndim();\n+  std::vector<npy_intp> npy_shape_coords(ndim_coords);\n+\n+  for (int i = 0; i < ndim_coords; ++i) {\n+    npy_shape_coords[i] = sparse_index_coords->shape()[i];\n+  }\n+\n+  std::vector<npy_intp> npy_shape_data({sparse_index.non_zero_length(), 1});\n+\n+  const void* immutable_data = nullptr;\n+  if (sparse_tensor->data()) {\n+    immutable_data = sparse_tensor->data()->data();\n+  }\n+\n+  const void* immutable_coords = nullptr;\n+  if (sparse_index_coords->data()) {\n+    immutable_coords = sparse_index_coords->data()->data();\n+  }\n+\n+  // Remove const =(\n+  void* mutable_data = const_cast<void*>(immutable_data);\n+  void* mutable_coords = const_cast<void*>(immutable_coords);\n+\n+  int array_flags = 0;\n+  if (sparse_tensor->is_mutable()) {\n+    array_flags |= NPY_ARRAY_WRITEABLE;\n+  }\n+\n+  PyObject* result_data =\n+      PyArray_NewFromDescr(&PyArray_Type, dtype_data, 1, npy_shape_data.data(), nullptr,\n+                           mutable_data, array_flags, nullptr);\n+  PyObject* result_coords =\n+      PyArray_NewFromDescr(&PyArray_Type, dtype_coords, 2, npy_shape_coords.data(),\n \n Review comment:\n   Looks wrong. You're passing `2` for ndims but `npy_shape_coords` has `ndim_coords` elements.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-25T14:29:20.821+0000",
                    "updated": "2019-06-25T14:29:20.821+0000",
                    "started": "2019-06-25T14:29:20.820+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "266715",
                    "issueId": "13213408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213408/worklog/266716",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4446: ARROW-4453: [Python] Cython wrappers for SparseTensor\nURL: https://github.com/apache/arrow/pull/4446#discussion_r297211238\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_convert.cc\n ##########\n @@ -274,5 +275,348 @@ Status TensorToNdarray(const std::shared_ptr<Tensor>& tensor, PyObject* base,\n   return Status::OK();\n }\n \n+Status SparseTensorCOOToNdarray(const std::shared_ptr<SparseTensorCOO>& sparse_tensor,\n+                                PyObject* base, PyObject** out_data,\n+                                PyObject** out_coords) {\n+  PyAcquireGIL lock;\n+\n+  int type_num_data;\n+  int type_num_coords;\n+  const auto& sparse_index = arrow::internal::checked_cast<const SparseCOOIndex&>(\n+      *sparse_tensor->sparse_index());\n+  const std::shared_ptr<arrow::NumericTensor<arrow::Int64Type>> sparse_index_coords =\n+      sparse_index.indices();\n+\n+  RETURN_NOT_OK(GetNumPyType(*sparse_tensor->type(), &type_num_data));\n+  PyArray_Descr* dtype_data = PyArray_DescrNewFromType(type_num_data);\n+  RETURN_NOT_OK(GetNumPyType(*sparse_index_coords->type(), &type_num_coords));\n+  PyArray_Descr* dtype_coords = PyArray_DescrNewFromType(type_num_coords);\n+  RETURN_IF_PYERROR();\n+\n+  const int ndim_coords = sparse_tensor->ndim();\n+  std::vector<npy_intp> npy_shape_coords(ndim_coords);\n+\n+  for (int i = 0; i < ndim_coords; ++i) {\n+    npy_shape_coords[i] = sparse_index_coords->shape()[i];\n+  }\n+\n+  std::vector<npy_intp> npy_shape_data({sparse_index.non_zero_length(), 1});\n+\n+  const void* immutable_data = nullptr;\n+  if (sparse_tensor->data()) {\n+    immutable_data = sparse_tensor->data()->data();\n+  }\n+\n+  const void* immutable_coords = nullptr;\n+  if (sparse_index_coords->data()) {\n+    immutable_coords = sparse_index_coords->data()->data();\n+  }\n+\n+  // Remove const =(\n+  void* mutable_data = const_cast<void*>(immutable_data);\n+  void* mutable_coords = const_cast<void*>(immutable_coords);\n+\n+  int array_flags = 0;\n+  if (sparse_tensor->is_mutable()) {\n+    array_flags |= NPY_ARRAY_WRITEABLE;\n+  }\n+\n+  PyObject* result_data =\n+      PyArray_NewFromDescr(&PyArray_Type, dtype_data, 1, npy_shape_data.data(), nullptr,\n+                           mutable_data, array_flags, nullptr);\n+  PyObject* result_coords =\n+      PyArray_NewFromDescr(&PyArray_Type, dtype_coords, 2, npy_shape_coords.data(),\n+                           nullptr, mutable_coords, array_flags, nullptr);\n+\n+  RETURN_IF_PYERROR()\n+\n+  if (base == Py_None || base == nullptr) {\n+    base = py::wrap_sparse_tensor_coo(sparse_tensor);\n+  } else {\n+    Py_XINCREF(base);\n+  }\n+  PyArray_SetBaseObject(reinterpret_cast<PyArrayObject*>(result_data), base);\n+  PyArray_SetBaseObject(reinterpret_cast<PyArrayObject*>(result_coords), base);\n+\n+  *out_data = result_data;\n+  *out_coords = result_coords;\n+  return Status::OK();\n+}\n+\n+Status SparseTensorCSRToNdarray(const std::shared_ptr<SparseTensorCSR>& sparse_tensor,\n+                                PyObject* base, PyObject** out_data,\n+                                PyObject** out_indptr, PyObject** out_indices) {\n+  PyAcquireGIL lock;\n+\n+  int type_num_data;\n+  RETURN_NOT_OK(GetNumPyType(*sparse_tensor->type(), &type_num_data));\n+  PyArray_Descr* dtype_data = PyArray_DescrNewFromType(type_num_data);\n+  RETURN_IF_PYERROR();\n+\n+  const auto& sparse_index = arrow::internal::checked_cast<const SparseCSRIndex&>(\n+      *sparse_tensor->sparse_index());\n+  const std::shared_ptr<arrow::NumericTensor<arrow::Int64Type>> sparse_index_indptr =\n+      sparse_index.indptr();\n+  const std::shared_ptr<arrow::NumericTensor<arrow::Int64Type>> sparse_index_indices =\n+      sparse_index.indices();\n+\n+  std::vector<npy_intp> npy_shape_data({sparse_index.non_zero_length(), 1});\n+\n+  const int ndim_indptr = sparse_index_indptr->ndim();\n+  std::vector<npy_intp> npy_shape_indptr(ndim_indptr);\n+\n+  for (int i = 0; i < ndim_indptr; ++i) {\n+    npy_shape_indptr[i] = sparse_index_indptr->shape()[i];\n+  }\n+\n+  const int ndim_indices = sparse_index_indices->ndim();\n+  std::vector<npy_intp> npy_shape_indices(ndim_indices);\n+\n+  for (int i = 0; i < ndim_indices; ++i) {\n+    npy_shape_indices[i] = sparse_index_indices->shape()[i];\n+  }\n+\n+  const void* immutable_data = nullptr;\n+  if (sparse_tensor->data()) {\n+    immutable_data = sparse_tensor->data()->data();\n+  }\n+\n+  const void* immutable_indptr = nullptr;\n+  if (sparse_index_indptr->data()) {\n+    immutable_indptr = sparse_index_indptr->data()->data();\n+  }\n+\n+  const void* immutable_indices = nullptr;\n+  if (sparse_index_indices->data()) {\n+    immutable_indices = sparse_index_indices->data()->data();\n+  }\n+\n+  // Remove const =(\n+  void* mutable_data = const_cast<void*>(immutable_data);\n+  void* mutable_indptr = const_cast<void*>(immutable_indptr);\n+  void* mutable_indices = const_cast<void*>(immutable_indices);\n+\n+  int array_flags = 0;\n+  if (sparse_tensor->is_mutable()) {\n+    array_flags |= NPY_ARRAY_WRITEABLE;\n+  }\n+\n+  int type_num_indptr;\n+  RETURN_NOT_OK(GetNumPyType(*sparse_index_indptr->type(), &type_num_indptr));\n+  PyArray_Descr* dtype_indptr = PyArray_DescrNewFromType(type_num_indptr);\n+\n+  int type_num_indices;\n+  RETURN_NOT_OK(GetNumPyType(*sparse_index_indptr->type(), &type_num_indices));\n+  PyArray_Descr* dtype_indices = PyArray_DescrNewFromType(type_num_indices);\n+\n+  PyObject* result_data =\n+      PyArray_NewFromDescr(&PyArray_Type, dtype_data, 1, npy_shape_data.data(), nullptr,\n \n Review comment:\n   Same problems as above with `ndim` mismatching the shape size.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-25T14:29:20.919+0000",
                    "updated": "2019-06-25T14:29:20.919+0000",
                    "started": "2019-06-25T14:29:20.919+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "266716",
                    "issueId": "13213408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213408/worklog/266717",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4446: ARROW-4453: [Python] Cython wrappers for SparseTensor\nURL: https://github.com/apache/arrow/pull/4446#discussion_r297208328\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_convert.cc\n ##########\n @@ -274,5 +275,348 @@ Status TensorToNdarray(const std::shared_ptr<Tensor>& tensor, PyObject* base,\n   return Status::OK();\n }\n \n+Status SparseTensorCOOToNdarray(const std::shared_ptr<SparseTensorCOO>& sparse_tensor,\n+                                PyObject* base, PyObject** out_data,\n+                                PyObject** out_coords) {\n+  PyAcquireGIL lock;\n+\n+  int type_num_data;\n+  int type_num_coords;\n+  const auto& sparse_index = arrow::internal::checked_cast<const SparseCOOIndex&>(\n+      *sparse_tensor->sparse_index());\n+  const std::shared_ptr<arrow::NumericTensor<arrow::Int64Type>> sparse_index_coords =\n+      sparse_index.indices();\n+\n+  RETURN_NOT_OK(GetNumPyType(*sparse_tensor->type(), &type_num_data));\n+  PyArray_Descr* dtype_data = PyArray_DescrNewFromType(type_num_data);\n+  RETURN_NOT_OK(GetNumPyType(*sparse_index_coords->type(), &type_num_coords));\n+  PyArray_Descr* dtype_coords = PyArray_DescrNewFromType(type_num_coords);\n+  RETURN_IF_PYERROR();\n+\n+  const int ndim_coords = sparse_tensor->ndim();\n+  std::vector<npy_intp> npy_shape_coords(ndim_coords);\n+\n+  for (int i = 0; i < ndim_coords; ++i) {\n+    npy_shape_coords[i] = sparse_index_coords->shape()[i];\n+  }\n+\n+  std::vector<npy_intp> npy_shape_data({sparse_index.non_zero_length(), 1});\n+\n+  const void* immutable_data = nullptr;\n+  if (sparse_tensor->data()) {\n+    immutable_data = sparse_tensor->data()->data();\n+  }\n+\n+  const void* immutable_coords = nullptr;\n+  if (sparse_index_coords->data()) {\n+    immutable_coords = sparse_index_coords->data()->data();\n+  }\n+\n+  // Remove const =(\n+  void* mutable_data = const_cast<void*>(immutable_data);\n+  void* mutable_coords = const_cast<void*>(immutable_coords);\n+\n+  int array_flags = 0;\n+  if (sparse_tensor->is_mutable()) {\n+    array_flags |= NPY_ARRAY_WRITEABLE;\n+  }\n+\n+  PyObject* result_data =\n+      PyArray_NewFromDescr(&PyArray_Type, dtype_data, 1, npy_shape_data.data(), nullptr,\n \n Review comment:\n   Looks wrong. You're passing `1` for ndims but `npy_shape_data` is a 2-elements array.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-25T14:29:20.965+0000",
                    "updated": "2019-06-25T14:29:20.965+0000",
                    "started": "2019-06-25T14:29:20.964+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "266717",
                    "issueId": "13213408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213408/worklog/266718",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4446: ARROW-4453: [Python] Cython wrappers for SparseTensor\nURL: https://github.com/apache/arrow/pull/4446#discussion_r297211751\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_convert.cc\n ##########\n @@ -274,5 +275,348 @@ Status TensorToNdarray(const std::shared_ptr<Tensor>& tensor, PyObject* base,\n   return Status::OK();\n }\n \n+Status SparseTensorCOOToNdarray(const std::shared_ptr<SparseTensorCOO>& sparse_tensor,\n+                                PyObject* base, PyObject** out_data,\n+                                PyObject** out_coords) {\n+  PyAcquireGIL lock;\n+\n+  int type_num_data;\n+  int type_num_coords;\n+  const auto& sparse_index = arrow::internal::checked_cast<const SparseCOOIndex&>(\n+      *sparse_tensor->sparse_index());\n+  const std::shared_ptr<arrow::NumericTensor<arrow::Int64Type>> sparse_index_coords =\n+      sparse_index.indices();\n+\n+  RETURN_NOT_OK(GetNumPyType(*sparse_tensor->type(), &type_num_data));\n+  PyArray_Descr* dtype_data = PyArray_DescrNewFromType(type_num_data);\n+  RETURN_NOT_OK(GetNumPyType(*sparse_index_coords->type(), &type_num_coords));\n+  PyArray_Descr* dtype_coords = PyArray_DescrNewFromType(type_num_coords);\n+  RETURN_IF_PYERROR();\n+\n+  const int ndim_coords = sparse_tensor->ndim();\n+  std::vector<npy_intp> npy_shape_coords(ndim_coords);\n+\n+  for (int i = 0; i < ndim_coords; ++i) {\n+    npy_shape_coords[i] = sparse_index_coords->shape()[i];\n+  }\n+\n+  std::vector<npy_intp> npy_shape_data({sparse_index.non_zero_length(), 1});\n+\n+  const void* immutable_data = nullptr;\n+  if (sparse_tensor->data()) {\n+    immutable_data = sparse_tensor->data()->data();\n+  }\n+\n+  const void* immutable_coords = nullptr;\n+  if (sparse_index_coords->data()) {\n+    immutable_coords = sparse_index_coords->data()->data();\n+  }\n+\n+  // Remove const =(\n+  void* mutable_data = const_cast<void*>(immutable_data);\n+  void* mutable_coords = const_cast<void*>(immutable_coords);\n+\n+  int array_flags = 0;\n+  if (sparse_tensor->is_mutable()) {\n+    array_flags |= NPY_ARRAY_WRITEABLE;\n+  }\n+\n+  PyObject* result_data =\n+      PyArray_NewFromDescr(&PyArray_Type, dtype_data, 1, npy_shape_data.data(), nullptr,\n+                           mutable_data, array_flags, nullptr);\n+  PyObject* result_coords =\n+      PyArray_NewFromDescr(&PyArray_Type, dtype_coords, 2, npy_shape_coords.data(),\n+                           nullptr, mutable_coords, array_flags, nullptr);\n+\n+  RETURN_IF_PYERROR()\n+\n+  if (base == Py_None || base == nullptr) {\n+    base = py::wrap_sparse_tensor_coo(sparse_tensor);\n+  } else {\n+    Py_XINCREF(base);\n \n Review comment:\n   You need to INCREF this twice as you're calling `PyArray_SetBaseObject` twice below.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-25T14:29:20.992+0000",
                    "updated": "2019-06-25T14:29:20.992+0000",
                    "started": "2019-06-25T14:29:20.990+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "266718",
                    "issueId": "13213408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213408/worklog/266719",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4446: ARROW-4453: [Python] Cython wrappers for SparseTensor\nURL: https://github.com/apache/arrow/pull/4446#discussion_r297208908\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_convert.cc\n ##########\n @@ -274,5 +275,348 @@ Status TensorToNdarray(const std::shared_ptr<Tensor>& tensor, PyObject* base,\n   return Status::OK();\n }\n \n+Status SparseTensorCOOToNdarray(const std::shared_ptr<SparseTensorCOO>& sparse_tensor,\n+                                PyObject* base, PyObject** out_data,\n+                                PyObject** out_coords) {\n+  PyAcquireGIL lock;\n+\n+  int type_num_data;\n+  int type_num_coords;\n+  const auto& sparse_index = arrow::internal::checked_cast<const SparseCOOIndex&>(\n+      *sparse_tensor->sparse_index());\n+  const std::shared_ptr<arrow::NumericTensor<arrow::Int64Type>> sparse_index_coords =\n+      sparse_index.indices();\n+\n+  RETURN_NOT_OK(GetNumPyType(*sparse_tensor->type(), &type_num_data));\n+  PyArray_Descr* dtype_data = PyArray_DescrNewFromType(type_num_data);\n+  RETURN_NOT_OK(GetNumPyType(*sparse_index_coords->type(), &type_num_coords));\n+  PyArray_Descr* dtype_coords = PyArray_DescrNewFromType(type_num_coords);\n+  RETURN_IF_PYERROR();\n+\n+  const int ndim_coords = sparse_tensor->ndim();\n+  std::vector<npy_intp> npy_shape_coords(ndim_coords);\n+\n+  for (int i = 0; i < ndim_coords; ++i) {\n+    npy_shape_coords[i] = sparse_index_coords->shape()[i];\n+  }\n+\n+  std::vector<npy_intp> npy_shape_data({sparse_index.non_zero_length(), 1});\n+\n+  const void* immutable_data = nullptr;\n+  if (sparse_tensor->data()) {\n \n Review comment:\n   Hmm... why can this be null?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-25T14:29:20.996+0000",
                    "updated": "2019-06-25T14:29:20.996+0000",
                    "started": "2019-06-25T14:29:20.995+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "266719",
                    "issueId": "13213408"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213408/worklog/266720",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4446: ARROW-4453: [Python] Cython wrappers for SparseTensor\nURL: https://github.com/apache/arrow/pull/4446#discussion_r297211952\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_convert.cc\n ##########\n @@ -274,5 +275,348 @@ Status TensorToNdarray(const std::shared_ptr<Tensor>& tensor, PyObject* base,\n   return Status::OK();\n }\n \n+Status SparseTensorCOOToNdarray(const std::shared_ptr<SparseTensorCOO>& sparse_tensor,\n+                                PyObject* base, PyObject** out_data,\n+                                PyObject** out_coords) {\n+  PyAcquireGIL lock;\n+\n+  int type_num_data;\n+  int type_num_coords;\n+  const auto& sparse_index = arrow::internal::checked_cast<const SparseCOOIndex&>(\n+      *sparse_tensor->sparse_index());\n+  const std::shared_ptr<arrow::NumericTensor<arrow::Int64Type>> sparse_index_coords =\n+      sparse_index.indices();\n+\n+  RETURN_NOT_OK(GetNumPyType(*sparse_tensor->type(), &type_num_data));\n+  PyArray_Descr* dtype_data = PyArray_DescrNewFromType(type_num_data);\n+  RETURN_NOT_OK(GetNumPyType(*sparse_index_coords->type(), &type_num_coords));\n+  PyArray_Descr* dtype_coords = PyArray_DescrNewFromType(type_num_coords);\n+  RETURN_IF_PYERROR();\n+\n+  const int ndim_coords = sparse_tensor->ndim();\n+  std::vector<npy_intp> npy_shape_coords(ndim_coords);\n+\n+  for (int i = 0; i < ndim_coords; ++i) {\n+    npy_shape_coords[i] = sparse_index_coords->shape()[i];\n+  }\n+\n+  std::vector<npy_intp> npy_shape_data({sparse_index.non_zero_length(), 1});\n+\n+  const void* immutable_data = nullptr;\n+  if (sparse_tensor->data()) {\n+    immutable_data = sparse_tensor->data()->data();\n+  }\n+\n+  const void* immutable_coords = nullptr;\n+  if (sparse_index_coords->data()) {\n+    immutable_coords = sparse_index_coords->data()->data();\n+  }\n+\n+  // Remove const =(\n+  void* mutable_data = const_cast<void*>(immutable_data);\n+  void* mutable_coords = const_cast<void*>(immutable_coords);\n+\n+  int array_flags = 0;\n+  if (sparse_tensor->is_mutable()) {\n+    array_flags |= NPY_ARRAY_WRITEABLE;\n+  }\n+\n+  PyObject* result_data =\n+      PyArray_NewFromDescr(&PyArray_Type, dtype_data, 1, npy_shape_data.data(), nullptr,\n+                           mutable_data, array_flags, nullptr);\n+  PyObject* result_coords =\n+      PyArray_NewFromDescr(&PyArray_Type, dtype_coords, 2, npy_shape_coords.data(),\n+                           nullptr, mutable_coords, array_flags, nullptr);\n+\n+  RETURN_IF_PYERROR()\n+\n+  if (base == Py_None || base == nullptr) {\n+    base = py::wrap_sparse_tensor_coo(sparse_tensor);\n+  } else {\n+    Py_XINCREF(base);\n+  }\n+  PyArray_SetBaseObject(reinterpret_cast<PyArrayObject*>(result_data), base);\n+  PyArray_SetBaseObject(reinterpret_cast<PyArrayObject*>(result_coords), base);\n+\n+  *out_data = result_data;\n+  *out_coords = result_coords;\n+  return Status::OK();\n+}\n+\n+Status SparseTensorCSRToNdarray(const std::shared_ptr<SparseTensorCSR>& sparse_tensor,\n+                                PyObject* base, PyObject** out_data,\n+                                PyObject** out_indptr, PyObject** out_indices) {\n+  PyAcquireGIL lock;\n+\n+  int type_num_data;\n+  RETURN_NOT_OK(GetNumPyType(*sparse_tensor->type(), &type_num_data));\n+  PyArray_Descr* dtype_data = PyArray_DescrNewFromType(type_num_data);\n+  RETURN_IF_PYERROR();\n+\n+  const auto& sparse_index = arrow::internal::checked_cast<const SparseCSRIndex&>(\n+      *sparse_tensor->sparse_index());\n+  const std::shared_ptr<arrow::NumericTensor<arrow::Int64Type>> sparse_index_indptr =\n+      sparse_index.indptr();\n+  const std::shared_ptr<arrow::NumericTensor<arrow::Int64Type>> sparse_index_indices =\n+      sparse_index.indices();\n+\n+  std::vector<npy_intp> npy_shape_data({sparse_index.non_zero_length(), 1});\n+\n+  const int ndim_indptr = sparse_index_indptr->ndim();\n+  std::vector<npy_intp> npy_shape_indptr(ndim_indptr);\n+\n+  for (int i = 0; i < ndim_indptr; ++i) {\n+    npy_shape_indptr[i] = sparse_index_indptr->shape()[i];\n+  }\n+\n+  const int ndim_indices = sparse_index_indices->ndim();\n+  std::vector<npy_intp> npy_shape_indices(ndim_indices);\n+\n+  for (int i = 0; i < ndim_indices; ++i) {\n+    npy_shape_indices[i] = sparse_index_indices->shape()[i];\n+  }\n+\n+  const void* immutable_data = nullptr;\n+  if (sparse_tensor->data()) {\n+    immutable_data = sparse_tensor->data()->data();\n+  }\n+\n+  const void* immutable_indptr = nullptr;\n+  if (sparse_index_indptr->data()) {\n+    immutable_indptr = sparse_index_indptr->data()->data();\n+  }\n+\n+  const void* immutable_indices = nullptr;\n+  if (sparse_index_indices->data()) {\n+    immutable_indices = sparse_index_indices->data()->data();\n+  }\n+\n+  // Remove const =(\n+  void* mutable_data = const_cast<void*>(immutable_data);\n+  void* mutable_indptr = const_cast<void*>(immutable_indptr);\n+  void* mutable_indices = const_cast<void*>(immutable_indices);\n+\n+  int array_flags = 0;\n+  if (sparse_tensor->is_mutable()) {\n+    array_flags |= NPY_ARRAY_WRITEABLE;\n+  }\n+\n+  int type_num_indptr;\n+  RETURN_NOT_OK(GetNumPyType(*sparse_index_indptr->type(), &type_num_indptr));\n+  PyArray_Descr* dtype_indptr = PyArray_DescrNewFromType(type_num_indptr);\n+\n+  int type_num_indices;\n+  RETURN_NOT_OK(GetNumPyType(*sparse_index_indptr->type(), &type_num_indices));\n+  PyArray_Descr* dtype_indices = PyArray_DescrNewFromType(type_num_indices);\n+\n+  PyObject* result_data =\n+      PyArray_NewFromDescr(&PyArray_Type, dtype_data, 1, npy_shape_data.data(), nullptr,\n+                           mutable_data, array_flags, nullptr);\n+  PyObject* result_indptr =\n+      PyArray_NewFromDescr(&PyArray_Type, dtype_indptr, 1, npy_shape_indptr.data(),\n+                           nullptr, mutable_indptr, array_flags, nullptr);\n+  PyObject* result_indices =\n+      PyArray_NewFromDescr(&PyArray_Type, dtype_indices, 1, npy_shape_indices.data(),\n+                           nullptr, mutable_indices, array_flags, nullptr);\n+  RETURN_IF_PYERROR()\n+\n+  if (base == Py_None || base == nullptr) {\n+    base = py::wrap_sparse_tensor_csr(sparse_tensor);\n \n Review comment:\n   Unused code path?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-25T14:29:21.054+0000",
                    "updated": "2019-06-25T14:29:21.054+0000",
                    "started": "2019-06-25T14:29:21.054+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "266720",
                    "issueId": "13213408"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 34800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3181b664[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6fb19433[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2078891f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@430b812f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@729042cc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5fb86f5b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3bec25c2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2471d969[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@54876909[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@48d90675[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1241f899[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@38d1d129[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 34800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jul 02 08:21:51 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-07-02T08:21:51.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4453/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-02-01T20:49:06.000+0000",
        "updated": "2019-07-02T08:37:39.000+0000",
        "timeoriginalestimate": null,
        "description": "We should have cython wrappers for [https://github.com/apache/arrow/pull/2546]\r\n\r\nThis is related to support for https://issues.apache.org/jira/browse/ARROW-4223\u00a0and https://issues.apache.org/jira/browse/ARROW-4224\r\n\r\nI imagine the code would be similar to\u00a0https://github.com/apache/arrow/blob/5a502d281545402240e818d5fd97a9aaf36363f2/python/pyarrow/array.pxi#L748",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "9h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 34800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Create Cython wrappers for SparseTensor",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13213408/comment/16876768",
                    "id": "16876768",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 4446\n[https://github.com/apache/arrow/pull/4446]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-07-02T08:21:51.465+0000",
                    "updated": "2019-07-02T08:21:51.465+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|yi0l1c:",
        "customfield_12314139": null
    }
}