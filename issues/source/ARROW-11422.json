{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13355282",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355282",
    "key": "ARROW-11422",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "decimal",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334712",
                "id": "12334712",
                "name": "C#"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=suchagit",
            "name": "suchagit",
            "key": "suchagit",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Ali",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=suchagit",
            "name": "suchagit",
            "key": "suchagit",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Ali",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11422/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 27,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355282/worklog/543893",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "suchagit opened a new pull request #9356:\nURL: https://github.com/apache/arrow/pull/9356\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-28T21:40:24.283+0000",
                    "updated": "2021-01-28T21:40:24.283+0000",
                    "started": "2021-01-28T21:40:24.283+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "543893",
                    "issueId": "13355282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355282/worklog/543894",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9356:\nURL: https://github.com/apache/arrow/pull/9356#issuecomment-769417353\n\n\n   <!--\n     Licensed to the Apache Software Foundation (ASF) under one\n     or more contributor license agreements.  See the NOTICE file\n     distributed with this work for additional information\n     regarding copyright ownership.  The ASF licenses this file\n     to you under the Apache License, Version 2.0 (the\n     \"License\"); you may not use this file except in compliance\n     with the License.  You may obtain a copy of the License at\n   \n       http://www.apache.org/licenses/LICENSE-2.0\n   \n     Unless required by applicable law or agreed to in writing,\n     software distributed under the License is distributed on an\n     \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n     KIND, either express or implied.  See the License for the\n     specific language governing permissions and limitations\n     under the License.\n   -->\n   \n   Thanks for opening a pull request!\n   \n   Could you open an issue for this pull request on JIRA?\n   https://issues.apache.org/jira/browse/ARROW\n   \n   Then could you also rename pull request title in the following format?\n   \n       ARROW-${JIRA_ID}: [${COMPONENT}] ${SUMMARY}\n   \n   See also:\n   \n     * [Other pull requests](https://github.com/apache/arrow/pulls/)\n     * [Contribution Guidelines - How to contribute patches](https://arrow.apache.org/docs/developers/contributing.html#how-to-contribute-patches)\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-28T21:40:47.564+0000",
                    "updated": "2021-01-28T21:40:47.564+0000",
                    "started": "2021-01-28T21:40:47.563+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "543894",
                    "issueId": "13355282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355282/worklog/543896",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9356:\nURL: https://github.com/apache/arrow/pull/9356#issuecomment-769419041\n\n\n   https://issues.apache.org/jira/browse/ARROW-11422\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-28T21:43:54.173+0000",
                    "updated": "2021-01-28T21:43:54.173+0000",
                    "started": "2021-01-28T21:43:54.172+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "543896",
                    "issueId": "13355282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355282/worklog/545785",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #9356:\nURL: https://github.com/apache/arrow/pull/9356#issuecomment-771344773\n\n\n   I'm not familiar with the C# implementation but note decimals can now be 128 or 256 bit.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-02T04:15:21.749+0000",
                    "updated": "2021-02-02T04:15:21.749+0000",
                    "started": "2021-02-02T04:15:21.749+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "545785",
                    "issueId": "13355282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355282/worklog/546121",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on a change in pull request #9356:\nURL: https://github.com/apache/arrow/pull/9356#discussion_r568754230\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/DecimalArray.cs\n##########\n@@ -0,0 +1,45 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using Apache.Arrow.Types;\n+\n+namespace Apache.Arrow\n+{\n+    public class DecimalArray : PrimitiveArray<decimal>\n\nReview comment:\n       I don't think the C# in-memory format of decimal is the same layout as the Arrow decimal format, is it? I'm trying to find the documentation on the memory layout, the only thing I can find is in the Schema.fbs:\r\n   \r\n   https://github.com/apache/arrow/blob/e676aeacb2c6597c063faeed20d6142b0df938d8/format/Schema.fbs#L176-L185\r\n   \r\n   The C# decimal layout is different:\r\n   \r\n   https://docs.microsoft.com/en-us/dotnet/api/system.decimal?view=net-5.0#remarks\r\n   \r\n   > The binary representation of a Decimal value consists of a 1-bit sign, a 96-bit integer number, and a scaling factor used to divide the 96-bit integer and specify what portion of it is a decimal fraction. The scaling factor is implicitly the number 10, raised to an exponent ranging from 0 to 28.\n\n##########\nFile path: csharp/src/Apache.Arrow/Types/DecimalType.cs\n##########\n@@ -17,6 +17,7 @@ namespace Apache.Arrow.Types\n {\n     public sealed class DecimalType: FixedSizeBinaryType\n     {\n+        public static readonly DecimalType Default = new DecimalType(0, 0);\n\nReview comment:\n       I'm not sure a decimal with precision = 0 is valid.\r\n   \r\n   Looking at the C++ implementation, I don't see a \"default\" DecimalType being defined. Maybe it is best to leave it up to the caller?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-02T16:45:02.846+0000",
                    "updated": "2021-02-02T16:45:02.846+0000",
                    "started": "2021-02-02T16:45:02.846+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "546121",
                    "issueId": "13355282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355282/worklog/546287",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #9356:\nURL: https://github.com/apache/arrow/pull/9356#discussion_r568962099\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/DecimalArray.cs\n##########\n@@ -0,0 +1,45 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using Apache.Arrow.Types;\n+\n+namespace Apache.Arrow\n+{\n+    public class DecimalArray : PrimitiveArray<decimal>\n\nReview comment:\n       The documentation is trying to say that the Decimal value is either a 128-bit or a 256-bit twos complement integer.  The metadata of the type determines the scaling factor of the integer.  So yes, it sounds like they are quite different.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-02T22:03:20.594+0000",
                    "updated": "2021-02-02T22:03:20.594+0000",
                    "started": "2021-02-02T22:03:20.594+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "546287",
                    "issueId": "13355282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355282/worklog/546290",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on a change in pull request #9356:\nURL: https://github.com/apache/arrow/pull/9356#discussion_r568969185\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/DecimalArray.cs\n##########\n@@ -0,0 +1,45 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using Apache.Arrow.Types;\n+\n+namespace Apache.Arrow\n+{\n+    public class DecimalArray : PrimitiveArray<decimal>\n\nReview comment:\n       Thanks @emkornfield. One thing that I don't quite understand is the `precision` field in metadata. The data is fixed sized right? So each value will always take up 128 or 256 bits. But if I set the precision lower than `38` for a Decimal128, what exactly does that mean? Does it mean to ignore digits at the beginning of the integer? For example:\r\n   \r\n   ```\r\n   Precision = 3\r\n   Scale = 0\r\n   Data Value = 0b010111011100   (1,500 in binary)\r\n   ```\r\n   \r\n   I assume this number means `500`, and the leading `1,000` gets truncated.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-02T22:16:33.240+0000",
                    "updated": "2021-02-02T22:16:33.240+0000",
                    "started": "2021-02-02T22:16:33.240+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "546290",
                    "issueId": "13355282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355282/worklog/546295",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #9356:\nURL: https://github.com/apache/arrow/pull/9356#discussion_r568974911\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/DecimalArray.cs\n##########\n@@ -0,0 +1,45 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using Apache.Arrow.Types;\n+\n+namespace Apache.Arrow\n+{\n+    public class DecimalArray : PrimitiveArray<decimal>\n\nReview comment:\n       Yes, we ignore most significant bits of the integer (that would correspond to higher necessary precision).  I'm sure some code might break if those bits are populated.  But for instance we use this fact when writing to parquet: https://github.com/apache/arrow/blob/0e8de085f4afd3c9aa9c9ed05405a6c6ef8c360a/cpp/src/parquet/column_writer.cc\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-02T22:27:48.526+0000",
                    "updated": "2021-02-02T22:27:48.526+0000",
                    "started": "2021-02-02T22:27:48.526+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "546295",
                    "issueId": "13355282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355282/worklog/546501",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #9356:\nURL: https://github.com/apache/arrow/pull/9356#issuecomment-771344773\n\n\n   I'm not familiar with the C# implementation but note decimals can now be 128 or 256 bit.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-03T01:11:39.640+0000",
                    "updated": "2021-02-03T01:11:39.640+0000",
                    "started": "2021-02-03T01:11:39.640+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "546501",
                    "issueId": "13355282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355282/worklog/546509",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on a change in pull request #9356:\nURL: https://github.com/apache/arrow/pull/9356#discussion_r568754230\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/DecimalArray.cs\n##########\n@@ -0,0 +1,45 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using Apache.Arrow.Types;\n+\n+namespace Apache.Arrow\n+{\n+    public class DecimalArray : PrimitiveArray<decimal>\n\nReview comment:\n       I don't think the C# in-memory format of decimal is the same layout as the Arrow decimal format, is it? I'm trying to find the documentation on the memory layout, the only thing I can find is in the Schema.fbs:\r\n   \r\n   https://github.com/apache/arrow/blob/e676aeacb2c6597c063faeed20d6142b0df938d8/format/Schema.fbs#L176-L185\r\n   \r\n   The C# decimal layout is different:\r\n   \r\n   https://docs.microsoft.com/en-us/dotnet/api/system.decimal?view=net-5.0#remarks\r\n   \r\n   > The binary representation of a Decimal value consists of a 1-bit sign, a 96-bit integer number, and a scaling factor used to divide the 96-bit integer and specify what portion of it is a decimal fraction. The scaling factor is implicitly the number 10, raised to an exponent ranging from 0 to 28.\n\n##########\nFile path: csharp/src/Apache.Arrow/Types/DecimalType.cs\n##########\n@@ -17,6 +17,7 @@ namespace Apache.Arrow.Types\n {\n     public sealed class DecimalType: FixedSizeBinaryType\n     {\n+        public static readonly DecimalType Default = new DecimalType(0, 0);\n\nReview comment:\n       I'm not sure a decimal with precision = 0 is valid.\r\n   \r\n   Looking at the C++ implementation, I don't see a \"default\" DecimalType being defined. Maybe it is best to leave it up to the caller?\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/DecimalArray.cs\n##########\n@@ -0,0 +1,45 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using Apache.Arrow.Types;\n+\n+namespace Apache.Arrow\n+{\n+    public class DecimalArray : PrimitiveArray<decimal>\n\nReview comment:\n       Thanks @emkornfield. One thing that I don't quite understand is the `precision` field in metadata. The data is fixed sized right? So each value will always take up 128 or 256 bits. But if I set the precision lower than `38` for a Decimal128, what exactly does that mean? Does it mean to ignore digits at the beginning of the integer? For example:\r\n   \r\n   ```\r\n   Precision = 3\r\n   Scale = 0\r\n   Data Value = 0b010111011100   (1,500 in binary)\r\n   ```\r\n   \r\n   I assume this number means `500`, and the leading `1,000` gets truncated.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-03T01:12:43.752+0000",
                    "updated": "2021-02-03T01:12:43.752+0000",
                    "started": "2021-02-03T01:12:43.752+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "546509",
                    "issueId": "13355282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355282/worklog/546778",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #9356:\nURL: https://github.com/apache/arrow/pull/9356#discussion_r568962099\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/DecimalArray.cs\n##########\n@@ -0,0 +1,45 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using Apache.Arrow.Types;\n+\n+namespace Apache.Arrow\n+{\n+    public class DecimalArray : PrimitiveArray<decimal>\n\nReview comment:\n       The documentation is trying to say that the Decimal value is either a 128-bit or a 256-bit twos complement integer.  The metadata of the type determines the scaling factor of the integer.  So yes, it sounds like they are quite different.\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/DecimalArray.cs\n##########\n@@ -0,0 +1,45 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using Apache.Arrow.Types;\n+\n+namespace Apache.Arrow\n+{\n+    public class DecimalArray : PrimitiveArray<decimal>\n\nReview comment:\n       Yes, we ignore most significant bits of the integer (that would correspond to higher necessary precision).  I'm sure some code might break if those bits are populated.  But for instance we use this fact when writing to parquet: https://github.com/apache/arrow/blob/0e8de085f4afd3c9aa9c9ed05405a6c6ef8c360a/cpp/src/parquet/column_writer.cc\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-03T01:37:53.461+0000",
                    "updated": "2021-02-03T01:37:53.461+0000",
                    "started": "2021-02-03T01:37:53.461+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "546778",
                    "issueId": "13355282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355282/worklog/555904",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on a change in pull request #9356:\nURL: https://github.com/apache/arrow/pull/9356#discussion_r579334666\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Flatbuf/BodyCompressionMethod.cs\n##########\n@@ -0,0 +1,24 @@\n+// <auto-generated>\n+//  automatically generated by the FlatBuffers compiler, do not modify\n+// </auto-generated>\n+\n+namespace Apache.Arrow.Flatbuf\n+{\n+\n+/// Provided for forward compatibility in case we need to support different\n+/// strategies for compressing the IPC message body (like whole-body\n+/// compression rather than buffer-level) in the future\n+public enum BodyCompressionMethod : sbyte\n\nReview comment:\n       These enums shouldn't be `public`. Nothing in `Flatbuf` should be public.\n\n##########\nFile path: csharp/test/Apache.Arrow.Tests/ArrowReaderVerifier.cs\n##########\n@@ -147,6 +150,40 @@ private void CompareBinaryArrays<T>(BinaryArray actualArray)\n                 Assert.True(expectedArray.Values.Slice(0, expectedArray.Length).SequenceEqual(actualArray.Values.Slice(0, actualArray.Length)));\n             }\n \n+            private void CompareArrays(Decimal128Array actualArray)\n\nReview comment:\n       Can we combine these two methods into one for a `FixedSizeBinaryArray`?\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.Builder.cs\n##########\n@@ -211,6 +211,23 @@ public ArrowBuffer Build(MemoryAllocator allocator = default)\n                 return new ArrowBuffer(memoryOwner);\n             }\n \n+            /// <summary>\n+            /// Build an Arrow buffer from the appended contents so far of the specified byte size.\n+            /// </summary>\n+            /// <param name=\"allocator\">Optional memory allocator.</param>\n+            /// <returns>Returns an <see cref=\"ArrowBuffer\"/> object.</returns>\n+            public ArrowBuffer Build(int byteSize, MemoryAllocator allocator = default)\n\nReview comment:\n       Does this need to be public? Are we expecting external callers to use it?\n\n##########\nFile path: csharp/test/Apache.Arrow.Tests/TestData.cs\n##########\n@@ -48,8 +48,9 @@ public static RecordBatch CreateSampleRecordBatch(int length, int columnSetCount\n                 builder.Field(CreateField(TimestampType.Default, i));\n                 builder.Field(CreateField(StringType.Default, i));\n                 builder.Field(CreateField(new StructType(new List<Field> { CreateField(StringType.Default, i), CreateField(Int32Type.Default, i) }), i));\n+                builder.Field(CreateField(new Decimal128Type(20, 10), i));\n+                builder.Field(CreateField(new Decimal256Type(20, 10), i));\n\nReview comment:\n       Can we test with different precision and scales?\n\n##########\nFile path: csharp/test/Apache.Arrow.Benchmarks/ArrowReaderBenchmark.cs\n##########\n@@ -116,6 +116,10 @@ private static double SumAllNumbers(RecordBatch recordBatch)\n                         DoubleArray doubleArray = (DoubleArray)array;\n                         sum += Sum(doubleArray);\n                         break;\n+                    case ArrowTypeId.Decimal128:\n+                        Decimal128Array decimalArray = (Decimal128Array)array;\n+                        sum += (double)Sum(decimalArray);\n\nReview comment:\n       This cast is unnecessary since the `Sum` method already returns a `double`.\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.Builder.cs\n##########\n@@ -211,6 +211,23 @@ public ArrowBuffer Build(MemoryAllocator allocator = default)\n                 return new ArrowBuffer(memoryOwner);\n             }\n \n+            /// <summary>\n+            /// Build an Arrow buffer from the appended contents so far of the specified byte size.\n+            /// </summary>\n+            /// <param name=\"allocator\">Optional memory allocator.</param>\n+            /// <returns>Returns an <see cref=\"ArrowBuffer\"/> object.</returns>\n+            public ArrowBuffer Build(int byteSize, MemoryAllocator allocator = default)\n+            {\n+                int currentBytesLength = Length * _size;\n\nReview comment:\n       Can we refactor the above method to call into this method with `64`? That way there is less duplicated code.\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/Decimal128Array.cs\n##########\n@@ -0,0 +1,96 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics;\n+using System.Numerics;\n+using Apache.Arrow.Arrays;\n+using Apache.Arrow.Types;\n+\n+namespace Apache.Arrow\n+{\n+    public class Decimal128Array : FixedSizeBinaryArray\n+    {\n+        public class Builder : BuilderBase<Decimal128Array, Builder>\n+        {\n+            public Builder(Decimal128Type type) : base(type, 16)\n+            {\n+                DataType = type;\n+            }\n+\n+            protected new Decimal128Type DataType { get; }\n+\n+            protected override Decimal128Array Build(ArrayData data)\n+            {\n+                return new Decimal128Array(data);\n+            }\n+\n+            public Builder Append(decimal value)\n+            {\n+                DecimalUtility.CheckPrecisionAndScale(value, DataType.Precision, DataType.Scale, out BigInteger integerValue);\n+                byte[] bytes = DecimalUtility.GetBytes(integerValue, DataType.ByteWidth);\n+\n+                return Append(bytes);\n+            }\n+\n+            public Builder AppendRange(IEnumerable<decimal> values)\n+            {\n+                if (values == null)\n+                {\n+                    throw new ArgumentNullException(nameof(values));\n+                }\n+\n+                foreach (decimal d in values)\n+                {\n+                    Append(d);\n+                }\n+\n+                return Instance;\n+            }\n+\n+            public Builder Set(int index, decimal value)\n+            {\n+                DecimalUtility.CheckPrecisionAndScale(value, DataType.Precision, DataType.Scale, out BigInteger integerValue);\n+                byte[] bytes = DecimalUtility.GetBytes(integerValue, DataType.ByteWidth);\n\nReview comment:\n       A different way that doesn't involve `stackalloc` would be to get a `Span<byte>` directly into the `ValueBuffer` itself (after making sure it is long enough) and passing that to `DecimalUtility.GetBytes`.\n\n##########\nFile path: csharp/src/Apache.Arrow/DecimalUtility.cs\n##########\n@@ -0,0 +1,188 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Linq;\n+using System.Numerics;\n+using System.Runtime.InteropServices;\n+\n+namespace Apache.Arrow\n+{\n+    /// <summary>\n+    /// This is semi-optimised best attempt at converting to / from decimal and the buffers\n+    /// </summary>\n+    public static class DecimalUtility\n\nReview comment:\n       Does this need to be public?\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/Decimal128Array.cs\n##########\n@@ -0,0 +1,96 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics;\n+using System.Numerics;\n+using Apache.Arrow.Arrays;\n+using Apache.Arrow.Types;\n+\n+namespace Apache.Arrow\n+{\n+    public class Decimal128Array : FixedSizeBinaryArray\n+    {\n+        public class Builder : BuilderBase<Decimal128Array, Builder>\n+        {\n+            public Builder(Decimal128Type type) : base(type, 16)\n+            {\n+                DataType = type;\n+            }\n+\n+            protected new Decimal128Type DataType { get; }\n+\n+            protected override Decimal128Array Build(ArrayData data)\n+            {\n+                return new Decimal128Array(data);\n+            }\n+\n+            public Builder Append(decimal value)\n+            {\n+                DecimalUtility.CheckPrecisionAndScale(value, DataType.Precision, DataType.Scale, out BigInteger integerValue);\n+                byte[] bytes = DecimalUtility.GetBytes(integerValue, DataType.ByteWidth);\n+\n+                return Append(bytes);\n+            }\n+\n+            public Builder AppendRange(IEnumerable<decimal> values)\n+            {\n+                if (values == null)\n+                {\n+                    throw new ArgumentNullException(nameof(values));\n+                }\n+\n+                foreach (decimal d in values)\n+                {\n+                    Append(d);\n+                }\n+\n+                return Instance;\n+            }\n+\n+            public Builder Set(int index, decimal value)\n+            {\n+                DecimalUtility.CheckPrecisionAndScale(value, DataType.Precision, DataType.Scale, out BigInteger integerValue);\n+                byte[] bytes = DecimalUtility.GetBytes(integerValue, DataType.ByteWidth);\n\nReview comment:\n       This is a bit of a performance trap, since it creates a new `byte[]` every time it is called.\r\n   \r\n   Instead, we should change this around so this method `stackalloc`s a buffer for `DecimalUtility.GetBytes` to write into. It can then be passed as a `Span<byte>` of length ByteWidth. Then the `Span<byte>` can be passed to `Set`, which copies the bytes over. That way no memory is allocated on the heap.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-22T17:20:52.417+0000",
                    "updated": "2021-02-22T17:20:52.417+0000",
                    "started": "2021-02-22T17:20:52.417+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "555904",
                    "issueId": "13355282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355282/worklog/555908",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on a change in pull request #9356:\nURL: https://github.com/apache/arrow/pull/9356#discussion_r580436711\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/DecimalUtility.cs\n##########\n@@ -0,0 +1,188 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Linq;\n+using System.Numerics;\n+using System.Runtime.InteropServices;\n+\n+namespace Apache.Arrow\n+{\n+    /// <summary>\n+    /// This is semi-optimised best attempt at converting to / from decimal and the buffers\n+    /// </summary>\n+    public static class DecimalUtility\n+    {\n+        private static readonly byte[] _minusOne = { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 };\n+        private static readonly BigInteger _maxDecimal = new BigInteger(decimal.MaxValue);\n+        private static readonly BigInteger _minDecimal = new BigInteger(decimal.MinValue);\n+        private static readonly ulong[] s_powersOfTen =\n+        {\n+            1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000,\n+            1000000000000, 10000000000000, 100000000000000, 1000000000000000, 10000000000000000, 100000000000000000,\n+            1000000000000000000, 10000000000000000000\n+        };\n+        private static int PowersOfTenLength => s_powersOfTen.Length - 1;\n+\n+\n+        public static decimal GetDecimal(in ArrowBuffer valueBuffer, int index, int scale, int byteWidth,\n+            bool isUnsigned = false)\n+        {\n+            int startIndex = index * byteWidth;\n+            ReadOnlySpan<byte> value = valueBuffer.Span.Slice(startIndex, byteWidth);\n+            BigInteger integerValue;\n+\n+#if NETCOREAPP\n+            integerValue = new BigInteger(value);\n+#else\n+            integerValue = new BigInteger(value.ToArray());\n+#endif\n+\n+            if (integerValue > _maxDecimal || integerValue < _minDecimal)\n+            {\n+                BigInteger scaleBy = BigInteger.Pow(10, scale);\n+                BigInteger integerPart = BigInteger.DivRem(integerValue, scaleBy, out BigInteger fractionalPart);\n+                if (integerPart > _maxDecimal || integerPart < _minDecimal) // decimal overflow, not much we can do here - C# needs a BigDecimal\n+                {\n+                    throw new OverflowException(\"Value: \" + integerPart + \" too big or too small to be represented as a decimal\");\n+                }\n+                return (decimal)integerPart + DivideByScale(fractionalPart, scale);\n+            }\n+            else\n+            {\n+                return DivideByScale(integerValue, scale);\n+            }\n+        }\n+\n+        private static decimal DivideByScale(BigInteger integerValue, int scale)\n+        {\n+            decimal result = (decimal)integerValue; // this cast is safe here\n+            int drop = scale;\n+            while (drop > PowersOfTenLength)\n+            {\n+                result /= s_powersOfTen[PowersOfTenLength];\n+                drop -= PowersOfTenLength;\n+            }\n+\n+            result /= s_powersOfTen[drop];\n+            return result;\n+        }\n+\n+        public static byte[] GetBytes(BigInteger integerValue, int byteWidth)\n+        {\n+            byte[] integerBytes = integerValue.ToByteArray();\n+            if (integerBytes.Length > byteWidth)\n+            {\n+                throw new OverflowException(\"Decimal size greater than \" + byteWidth + \" bytes: \" + integerBytes.Length);\n+            }\n+\n+            if (integerBytes.Length == byteWidth)\n+                return integerBytes;\n+\n+            byte[] result = new byte[byteWidth];\n+            if (integerValue.Sign == -1)\n+            {\n+                Buffer.BlockCopy(integerBytes, 0, result, 0, integerBytes.Length);\n+                Buffer.BlockCopy(_minusOne, 0, result, integerBytes.Length, byteWidth - integerBytes.Length);\n+            } else\n\nReview comment:\n       (nit) the `else` should be on a new line.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-22T17:24:22.651+0000",
                    "updated": "2021-02-22T17:24:22.651+0000",
                    "started": "2021-02-22T17:24:22.651+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "555908",
                    "issueId": "13355282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355282/worklog/555912",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on a change in pull request #9356:\nURL: https://github.com/apache/arrow/pull/9356#discussion_r580440107\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/DecimalUtility.cs\n##########\n@@ -0,0 +1,188 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Linq;\n+using System.Numerics;\n+using System.Runtime.InteropServices;\n+\n+namespace Apache.Arrow\n+{\n+    /// <summary>\n+    /// This is semi-optimised best attempt at converting to / from decimal and the buffers\n+    /// </summary>\n+    public static class DecimalUtility\n+    {\n+        private static readonly byte[] _minusOne = { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 };\n+        private static readonly BigInteger _maxDecimal = new BigInteger(decimal.MaxValue);\n+        private static readonly BigInteger _minDecimal = new BigInteger(decimal.MinValue);\n+        private static readonly ulong[] s_powersOfTen =\n+        {\n+            1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000,\n+            1000000000000, 10000000000000, 100000000000000, 1000000000000000, 10000000000000000, 100000000000000000,\n+            1000000000000000000, 10000000000000000000\n+        };\n+        private static int PowersOfTenLength => s_powersOfTen.Length - 1;\n+\n+\n+        public static decimal GetDecimal(in ArrowBuffer valueBuffer, int index, int scale, int byteWidth,\n+            bool isUnsigned = false)\n+        {\n+            int startIndex = index * byteWidth;\n+            ReadOnlySpan<byte> value = valueBuffer.Span.Slice(startIndex, byteWidth);\n+            BigInteger integerValue;\n+\n+#if NETCOREAPP\n+            integerValue = new BigInteger(value);\n+#else\n+            integerValue = new BigInteger(value.ToArray());\n+#endif\n+\n+            if (integerValue > _maxDecimal || integerValue < _minDecimal)\n+            {\n+                BigInteger scaleBy = BigInteger.Pow(10, scale);\n+                BigInteger integerPart = BigInteger.DivRem(integerValue, scaleBy, out BigInteger fractionalPart);\n+                if (integerPart > _maxDecimal || integerPart < _minDecimal) // decimal overflow, not much we can do here - C# needs a BigDecimal\n+                {\n+                    throw new OverflowException(\"Value: \" + integerPart + \" too big or too small to be represented as a decimal\");\n+                }\n+                return (decimal)integerPart + DivideByScale(fractionalPart, scale);\n+            }\n+            else\n+            {\n+                return DivideByScale(integerValue, scale);\n+            }\n+        }\n+\n+        private static decimal DivideByScale(BigInteger integerValue, int scale)\n+        {\n+            decimal result = (decimal)integerValue; // this cast is safe here\n+            int drop = scale;\n+            while (drop > PowersOfTenLength)\n+            {\n+                result /= s_powersOfTen[PowersOfTenLength];\n+                drop -= PowersOfTenLength;\n+            }\n+\n+            result /= s_powersOfTen[drop];\n+            return result;\n+        }\n+\n+        public static byte[] GetBytes(BigInteger integerValue, int byteWidth)\n+        {\n+            byte[] integerBytes = integerValue.ToByteArray();\n+            if (integerBytes.Length > byteWidth)\n+            {\n+                throw new OverflowException(\"Decimal size greater than \" + byteWidth + \" bytes: \" + integerBytes.Length);\n+            }\n+\n+            if (integerBytes.Length == byteWidth)\n+                return integerBytes;\n+\n+            byte[] result = new byte[byteWidth];\n+            if (integerValue.Sign == -1)\n+            {\n+                Buffer.BlockCopy(integerBytes, 0, result, 0, integerBytes.Length);\n+                Buffer.BlockCopy(_minusOne, 0, result, integerBytes.Length, byteWidth - integerBytes.Length);\n+            } else\n+            {\n+                Buffer.BlockCopy(integerBytes, 0, result, 0, integerBytes.Length);\n+            }\n+\n+            return result;\n+        }\n+\n+        public static bool CheckPrecisionAndScale(decimal value, int precision, int scale, out BigInteger integerValue)\n+        {\n+            DecimalLayout layout = new DecimalLayout(value); // use in place of decimal.GetBits(value) to avoid an allocation\n+            integerValue = new BigInteger(BitConverter.GetBytes(layout.Lo).Concat(BitConverter.GetBytes(layout.Mid)).Concat(BitConverter.GetBytes(layout.Hi)).ToArray());\n+\n+            if (layout.Scale > scale)\n+                throw new OverflowException(\"Decimal scale can not be greater than that in the Arrow vector: \" + layout.Scale + \" != \" + scale);\n+\n+            if(integerValue >= BigInteger.Pow(10, precision))\n+                throw new OverflowException(\"Decimal precision can not be greater than that in the Arrow vector: \" + value + \" has precision > \" + precision);\n+\n+            if (layout.Scale < scale) // pad with trailing zeros\n+            {\n+                integerValue *= BigInteger.Pow(10, scale - layout.Scale);\n+            }\n+\n+            if (value < 0) // sign the big int\n+                integerValue = -integerValue;\n+\n+            return true;\n+        }\n+\n+        private static decimal GetDecimalFromBigInteger(BigInteger value, int scale)\n+        {\n+            var b = new BigIntegerLayout(value);\n+            if (b.Bits == null)\n+                return b.Sign;\n+\n+            int length = b.Bits.Length;\n+            if (length > 3) throw new OverflowException(\"Decimal overflow\");\n+\n+            int lo = 0, mi = 0, hi = 0;\n+\n+            unchecked\n+            {\n+                if (length > 2) hi = b.Bits[2];\n+                if (length > 1) mi = b.Bits[1];\n+                if (length > 0) lo = b.Bits[0];\n+            }\n+\n+            return new decimal(lo, mi, hi, b.Sign < 0, (byte)scale);\n+        }\n+\n+        [StructLayout(LayoutKind.Explicit)]\n+        readonly struct BigIntegerLayout\n+        {\n+            public BigIntegerLayout(BigInteger value)\n+            {\n+                this = default;\n+                bi = value;\n+            }\n+\n+            [FieldOffset(0)] readonly BigInteger bi;\n+            [FieldOffset(0)] readonly int[] bits;\n+\n+            public int Sign => bi.Sign;\n+            public int[] Bits =>  bits;\n+        }\n+\n+\n+        [StructLayout(LayoutKind.Explicit)]\n+        readonly struct DecimalLayout\n+        {\n+            public DecimalLayout(decimal value)\n+            {\n+                this = default;\n+                d = value;\n+            }\n+\n+            [FieldOffset(0)] readonly decimal d;\n+            [FieldOffset(0)] readonly int flags;\n+            [FieldOffset(4)] readonly int hi;\n+            [FieldOffset(8)] readonly int lo;\n+            [FieldOffset(12)] readonly int mid;\n\nReview comment:\n       This isn't exactly how System.Decimal is defined. Would this work on big endian systems?\r\n   \r\n   https://github.com/dotnet/runtime/blob/8a52f1e948b6f22f418817ec1068f07b8dae2aa5/src/libraries/System.Private.CoreLib/src/System/Decimal.cs#L106-L108\r\n   \r\n   ```\r\n           private readonly int _flags;\r\n           private readonly uint _hi32;\r\n           private readonly ulong _lo64;\r\n   ```\r\n   \r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-22T17:28:45.231+0000",
                    "updated": "2021-02-22T17:28:45.231+0000",
                    "started": "2021-02-22T17:28:45.230+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "555912",
                    "issueId": "13355282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355282/worklog/556224",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "suchagit commented on a change in pull request #9356:\nURL: https://github.com/apache/arrow/pull/9356#discussion_r580836951\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/DecimalUtility.cs\n##########\n@@ -0,0 +1,188 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Linq;\n+using System.Numerics;\n+using System.Runtime.InteropServices;\n+\n+namespace Apache.Arrow\n+{\n+    /// <summary>\n+    /// This is semi-optimised best attempt at converting to / from decimal and the buffers\n+    /// </summary>\n+    public static class DecimalUtility\n+    {\n+        private static readonly byte[] _minusOne = { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 };\n+        private static readonly BigInteger _maxDecimal = new BigInteger(decimal.MaxValue);\n+        private static readonly BigInteger _minDecimal = new BigInteger(decimal.MinValue);\n+        private static readonly ulong[] s_powersOfTen =\n+        {\n+            1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000,\n+            1000000000000, 10000000000000, 100000000000000, 1000000000000000, 10000000000000000, 100000000000000000,\n+            1000000000000000000, 10000000000000000000\n+        };\n+        private static int PowersOfTenLength => s_powersOfTen.Length - 1;\n+\n+\n+        public static decimal GetDecimal(in ArrowBuffer valueBuffer, int index, int scale, int byteWidth,\n+            bool isUnsigned = false)\n+        {\n+            int startIndex = index * byteWidth;\n+            ReadOnlySpan<byte> value = valueBuffer.Span.Slice(startIndex, byteWidth);\n+            BigInteger integerValue;\n+\n+#if NETCOREAPP\n+            integerValue = new BigInteger(value);\n+#else\n+            integerValue = new BigInteger(value.ToArray());\n+#endif\n+\n+            if (integerValue > _maxDecimal || integerValue < _minDecimal)\n+            {\n+                BigInteger scaleBy = BigInteger.Pow(10, scale);\n+                BigInteger integerPart = BigInteger.DivRem(integerValue, scaleBy, out BigInteger fractionalPart);\n+                if (integerPart > _maxDecimal || integerPart < _minDecimal) // decimal overflow, not much we can do here - C# needs a BigDecimal\n+                {\n+                    throw new OverflowException(\"Value: \" + integerPart + \" too big or too small to be represented as a decimal\");\n+                }\n+                return (decimal)integerPart + DivideByScale(fractionalPart, scale);\n+            }\n+            else\n+            {\n+                return DivideByScale(integerValue, scale);\n+            }\n+        }\n+\n+        private static decimal DivideByScale(BigInteger integerValue, int scale)\n+        {\n+            decimal result = (decimal)integerValue; // this cast is safe here\n+            int drop = scale;\n+            while (drop > PowersOfTenLength)\n+            {\n+                result /= s_powersOfTen[PowersOfTenLength];\n+                drop -= PowersOfTenLength;\n+            }\n+\n+            result /= s_powersOfTen[drop];\n+            return result;\n+        }\n+\n+        public static byte[] GetBytes(BigInteger integerValue, int byteWidth)\n+        {\n+            byte[] integerBytes = integerValue.ToByteArray();\n+            if (integerBytes.Length > byteWidth)\n+            {\n+                throw new OverflowException(\"Decimal size greater than \" + byteWidth + \" bytes: \" + integerBytes.Length);\n+            }\n+\n+            if (integerBytes.Length == byteWidth)\n+                return integerBytes;\n+\n+            byte[] result = new byte[byteWidth];\n+            if (integerValue.Sign == -1)\n+            {\n+                Buffer.BlockCopy(integerBytes, 0, result, 0, integerBytes.Length);\n+                Buffer.BlockCopy(_minusOne, 0, result, integerBytes.Length, byteWidth - integerBytes.Length);\n+            } else\n+            {\n+                Buffer.BlockCopy(integerBytes, 0, result, 0, integerBytes.Length);\n+            }\n+\n+            return result;\n+        }\n+\n+        public static bool CheckPrecisionAndScale(decimal value, int precision, int scale, out BigInteger integerValue)\n+        {\n+            DecimalLayout layout = new DecimalLayout(value); // use in place of decimal.GetBits(value) to avoid an allocation\n+            integerValue = new BigInteger(BitConverter.GetBytes(layout.Lo).Concat(BitConverter.GetBytes(layout.Mid)).Concat(BitConverter.GetBytes(layout.Hi)).ToArray());\n+\n+            if (layout.Scale > scale)\n+                throw new OverflowException(\"Decimal scale can not be greater than that in the Arrow vector: \" + layout.Scale + \" != \" + scale);\n+\n+            if(integerValue >= BigInteger.Pow(10, precision))\n+                throw new OverflowException(\"Decimal precision can not be greater than that in the Arrow vector: \" + value + \" has precision > \" + precision);\n+\n+            if (layout.Scale < scale) // pad with trailing zeros\n+            {\n+                integerValue *= BigInteger.Pow(10, scale - layout.Scale);\n+            }\n+\n+            if (value < 0) // sign the big int\n+                integerValue = -integerValue;\n+\n+            return true;\n+        }\n+\n+        private static decimal GetDecimalFromBigInteger(BigInteger value, int scale)\n+        {\n+            var b = new BigIntegerLayout(value);\n+            if (b.Bits == null)\n+                return b.Sign;\n+\n+            int length = b.Bits.Length;\n+            if (length > 3) throw new OverflowException(\"Decimal overflow\");\n+\n+            int lo = 0, mi = 0, hi = 0;\n+\n+            unchecked\n+            {\n+                if (length > 2) hi = b.Bits[2];\n+                if (length > 1) mi = b.Bits[1];\n+                if (length > 0) lo = b.Bits[0];\n+            }\n+\n+            return new decimal(lo, mi, hi, b.Sign < 0, (byte)scale);\n+        }\n+\n+        [StructLayout(LayoutKind.Explicit)]\n+        readonly struct BigIntegerLayout\n+        {\n+            public BigIntegerLayout(BigInteger value)\n+            {\n+                this = default;\n+                bi = value;\n+            }\n+\n+            [FieldOffset(0)] readonly BigInteger bi;\n+            [FieldOffset(0)] readonly int[] bits;\n+\n+            public int Sign => bi.Sign;\n+            public int[] Bits =>  bits;\n+        }\n+\n+\n+        [StructLayout(LayoutKind.Explicit)]\n+        readonly struct DecimalLayout\n+        {\n+            public DecimalLayout(decimal value)\n+            {\n+                this = default;\n+                d = value;\n+            }\n+\n+            [FieldOffset(0)] readonly decimal d;\n+            [FieldOffset(0)] readonly int flags;\n+            [FieldOffset(4)] readonly int hi;\n+            [FieldOffset(8)] readonly int lo;\n+            [FieldOffset(12)] readonly int mid;\n\nReview comment:\n       Updated to support both big and little endian systems, accessing lo / mid.\r\n   Agreed it doesn't match exactly how Decimal is defined but I have since found that this is how DecCalc accesses: https://github.com/dotnet/runtime/blob/master/src/libraries/System.Private.CoreLib/src/System/Decimal.DecCalc.cs#L40\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-23T08:14:04.586+0000",
                    "updated": "2021-02-23T08:14:04.586+0000",
                    "started": "2021-02-23T08:14:04.585+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "556224",
                    "issueId": "13355282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355282/worklog/556288",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "suchagit commented on a change in pull request #9356:\nURL: https://github.com/apache/arrow/pull/9356#discussion_r580959145\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/Decimal128Array.cs\n##########\n@@ -0,0 +1,96 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics;\n+using System.Numerics;\n+using Apache.Arrow.Arrays;\n+using Apache.Arrow.Types;\n+\n+namespace Apache.Arrow\n+{\n+    public class Decimal128Array : FixedSizeBinaryArray\n+    {\n+        public class Builder : BuilderBase<Decimal128Array, Builder>\n+        {\n+            public Builder(Decimal128Type type) : base(type, 16)\n+            {\n+                DataType = type;\n+            }\n+\n+            protected new Decimal128Type DataType { get; }\n+\n+            protected override Decimal128Array Build(ArrayData data)\n+            {\n+                return new Decimal128Array(data);\n+            }\n+\n+            public Builder Append(decimal value)\n+            {\n+                DecimalUtility.CheckPrecisionAndScale(value, DataType.Precision, DataType.Scale, out BigInteger integerValue);\n+                byte[] bytes = DecimalUtility.GetBytes(integerValue, DataType.ByteWidth);\n+\n+                return Append(bytes);\n+            }\n+\n+            public Builder AppendRange(IEnumerable<decimal> values)\n+            {\n+                if (values == null)\n+                {\n+                    throw new ArgumentNullException(nameof(values));\n+                }\n+\n+                foreach (decimal d in values)\n+                {\n+                    Append(d);\n+                }\n+\n+                return Instance;\n+            }\n+\n+            public Builder Set(int index, decimal value)\n+            {\n+                DecimalUtility.CheckPrecisionAndScale(value, DataType.Precision, DataType.Scale, out BigInteger integerValue);\n+                byte[] bytes = DecimalUtility.GetBytes(integerValue, DataType.ByteWidth);\n\nReview comment:\n       I've had a go at this for Set and Append\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-23T11:27:13.900+0000",
                    "updated": "2021-02-23T11:27:13.900+0000",
                    "started": "2021-02-23T11:27:13.899+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "556288",
                    "issueId": "13355282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355282/worklog/559445",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on a change in pull request #9356:\nURL: https://github.com/apache/arrow/pull/9356#discussion_r584834740\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/DecimalUtility.cs\n##########\n@@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Linq;\n+using System.Numerics;\n+using System.Runtime.InteropServices;\n+\n+namespace Apache.Arrow\n+{\n+    /// <summary>\n+    /// This is semi-optimised best attempt at converting to / from decimal and the buffers\n+    /// </summary>\n+    internal static class DecimalUtility\n+    {\n+        private static readonly BigInteger _maxDecimal = new BigInteger(decimal.MaxValue);\n+        private static readonly BigInteger _minDecimal = new BigInteger(decimal.MinValue);\n+        private static readonly ulong[] s_powersOfTen =\n+        {\n+            1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000,\n+            1000000000000, 10000000000000, 100000000000000, 1000000000000000, 10000000000000000, 100000000000000000,\n+            1000000000000000000, 10000000000000000000\n+        };\n+        private static int PowersOfTenLength => s_powersOfTen.Length - 1;\n+\n+        public static decimal GetDecimal(in ArrowBuffer valueBuffer, int index, int scale, int byteWidth,\n+            bool isUnsigned = false)\n+        {\n+            int startIndex = index * byteWidth;\n+            ReadOnlySpan<byte> value = valueBuffer.Span.Slice(startIndex, byteWidth);\n+            BigInteger integerValue;\n+\n+#if NETCOREAPP\n+            integerValue = new BigInteger(value);\n+#else\n+            integerValue = new BigInteger(value.ToArray());\n+#endif\n+\n+            if (integerValue > _maxDecimal || integerValue < _minDecimal)\n+            {\n+                BigInteger scaleBy = BigInteger.Pow(10, scale);\n+                BigInteger integerPart = BigInteger.DivRem(integerValue, scaleBy, out BigInteger fractionalPart);\n+                if (integerPart > _maxDecimal || integerPart < _minDecimal) // decimal overflow, not much we can do here - C# needs a BigDecimal\n+                {\n+                    throw new OverflowException(\"Value: \" + integerPart + \" too big or too small to be represented as a decimal\");\n+                }\n+                return (decimal)integerPart + DivideByScale(fractionalPart, scale);\n+            }\n+            else\n+            {\n+                return DivideByScale(integerValue, scale);\n+            }\n+        }\n+\n+        private static decimal DivideByScale(BigInteger integerValue, int scale)\n+        {\n+            decimal result = (decimal)integerValue; // this cast is safe here\n+            int drop = scale;\n+            while (drop > PowersOfTenLength)\n+            {\n+                result /= s_powersOfTen[PowersOfTenLength];\n+                drop -= PowersOfTenLength;\n+            }\n+\n+            result /= s_powersOfTen[drop];\n+            return result;\n+        }\n+\n+        public static void GetBytes(BigInteger integerValue, int byteWidth, ref Span<byte> bytes)\n+        {\n+            if (bytes.Length != byteWidth)\n+            {\n+                throw new OverflowException(\"ValueBuffer size not equal to \" + byteWidth + \" byte width: \" + bytes.Length);\n+            }\n+\n+            Span<byte> integerBytes = integerValue.ToByteArray().AsSpan();\n+            if (integerBytes.Length > byteWidth)\n+            {\n+                throw new OverflowException(\"Decimal size greater than \" + byteWidth + \" bytes: \" + integerBytes.Length);\n+            }\n+\n+            if (integerBytes.Length == byteWidth)\n+            {\n+                bytes = integerBytes;\n+                return;\n+            }\n+\n+            if (integerValue.Sign == -1)\n+            {\n+                integerBytes.CopyTo(bytes);\n+                for (int i = integerBytes.Length; i < byteWidth; i++)\n+                {\n+                    bytes[i] = 255;\n+                }\n+            }\n+            else\n+            {\n+                integerBytes.CopyTo(bytes);\n+            }\n+        }\n+\n+        public static bool CheckPrecisionAndScale(decimal value, int precision, int scale, out BigInteger integerValue)\n+        {\n+            DecimalLayout layout = new DecimalLayout(value); // use in place of decimal.GetBits(value) to avoid an allocation\n+            integerValue = new BigInteger(BitConverter.GetBytes(layout.Lo).Concat(BitConverter.GetBytes(layout.Mid)).Concat(BitConverter.GetBytes(layout.Hi)).ToArray());\n\nReview comment:\n       This comment and code doesn't really make sense together. The comment says it is using `DecimalLayout` instead of `decimal.GetBits(value)` to avoid an allocation. But then the next line allocates 3 separate byte arrays, and then 2 Concat enumerables, and then a final byte array to put them all together. You might as well have just called `decimal.GetBits(value)`.\r\n   \r\n   Also - on .NET Core, you can call https://docs.microsoft.com/en-us/dotnet/api/system.decimal.getbits?view=net-5.0#System_Decimal_GetBits_System_Decimal_System_Span_System_Int32__, which takes a `Span<int>`.\r\n   \r\n   Also, one last thought - it may make sense to combine `DecimalUtility.CheckPrecisionAndScale` and `GetBytes` into one method. They are only ever called together, and that way you don't necessarily need to go through an in-between structure if not needed.\n\n##########\nFile path: csharp/src/Apache.Arrow/DecimalUtility.cs\n##########\n@@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Linq;\n+using System.Numerics;\n+using System.Runtime.InteropServices;\n+\n+namespace Apache.Arrow\n+{\n+    /// <summary>\n+    /// This is semi-optimised best attempt at converting to / from decimal and the buffers\n+    /// </summary>\n+    internal static class DecimalUtility\n+    {\n+        private static readonly BigInteger _maxDecimal = new BigInteger(decimal.MaxValue);\n+        private static readonly BigInteger _minDecimal = new BigInteger(decimal.MinValue);\n+        private static readonly ulong[] s_powersOfTen =\n+        {\n+            1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000,\n+            1000000000000, 10000000000000, 100000000000000, 1000000000000000, 10000000000000000, 100000000000000000,\n+            1000000000000000000, 10000000000000000000\n+        };\n+        private static int PowersOfTenLength => s_powersOfTen.Length - 1;\n+\n+        public static decimal GetDecimal(in ArrowBuffer valueBuffer, int index, int scale, int byteWidth,\n+            bool isUnsigned = false)\n+        {\n+            int startIndex = index * byteWidth;\n+            ReadOnlySpan<byte> value = valueBuffer.Span.Slice(startIndex, byteWidth);\n+            BigInteger integerValue;\n+\n+#if NETCOREAPP\n+            integerValue = new BigInteger(value);\n+#else\n+            integerValue = new BigInteger(value.ToArray());\n+#endif\n+\n+            if (integerValue > _maxDecimal || integerValue < _minDecimal)\n+            {\n+                BigInteger scaleBy = BigInteger.Pow(10, scale);\n+                BigInteger integerPart = BigInteger.DivRem(integerValue, scaleBy, out BigInteger fractionalPart);\n+                if (integerPart > _maxDecimal || integerPart < _minDecimal) // decimal overflow, not much we can do here - C# needs a BigDecimal\n+                {\n+                    throw new OverflowException(\"Value: \" + integerPart + \" too big or too small to be represented as a decimal\");\n+                }\n+                return (decimal)integerPart + DivideByScale(fractionalPart, scale);\n+            }\n+            else\n+            {\n+                return DivideByScale(integerValue, scale);\n+            }\n+        }\n+\n+        private static decimal DivideByScale(BigInteger integerValue, int scale)\n+        {\n+            decimal result = (decimal)integerValue; // this cast is safe here\n+            int drop = scale;\n+            while (drop > PowersOfTenLength)\n+            {\n+                result /= s_powersOfTen[PowersOfTenLength];\n+                drop -= PowersOfTenLength;\n+            }\n+\n+            result /= s_powersOfTen[drop];\n+            return result;\n+        }\n+\n+        public static void GetBytes(BigInteger integerValue, int byteWidth, ref Span<byte> bytes)\n+        {\n+            if (bytes.Length != byteWidth)\n+            {\n+                throw new OverflowException(\"ValueBuffer size not equal to \" + byteWidth + \" byte width: \" + bytes.Length);\n+            }\n+\n+            Span<byte> integerBytes = integerValue.ToByteArray().AsSpan();\n\nReview comment:\n       Instead of `ToByteArray()`, on .NET Core you can use `TryWriteBytes`, which will write directly to the `Span<byte> bytes`. This will save an allocation and a copy.\r\n   \r\n   See https://docs.microsoft.com/en-us/dotnet/api/system.numerics.biginteger.trywritebytes?view=net-5.0\n\n##########\nFile path: csharp/src/Apache.Arrow/DecimalUtility.cs\n##########\n@@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Linq;\n+using System.Numerics;\n+using System.Runtime.InteropServices;\n+\n+namespace Apache.Arrow\n+{\n+    /// <summary>\n+    /// This is semi-optimised best attempt at converting to / from decimal and the buffers\n+    /// </summary>\n+    internal static class DecimalUtility\n+    {\n+        private static readonly BigInteger _maxDecimal = new BigInteger(decimal.MaxValue);\n+        private static readonly BigInteger _minDecimal = new BigInteger(decimal.MinValue);\n+        private static readonly ulong[] s_powersOfTen =\n+        {\n+            1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000,\n+            1000000000000, 10000000000000, 100000000000000, 1000000000000000, 10000000000000000, 100000000000000000,\n+            1000000000000000000, 10000000000000000000\n+        };\n+        private static int PowersOfTenLength => s_powersOfTen.Length - 1;\n+\n+        public static decimal GetDecimal(in ArrowBuffer valueBuffer, int index, int scale, int byteWidth,\n+            bool isUnsigned = false)\n+        {\n+            int startIndex = index * byteWidth;\n+            ReadOnlySpan<byte> value = valueBuffer.Span.Slice(startIndex, byteWidth);\n+            BigInteger integerValue;\n+\n+#if NETCOREAPP\n+            integerValue = new BigInteger(value);\n+#else\n+            integerValue = new BigInteger(value.ToArray());\n+#endif\n+\n+            if (integerValue > _maxDecimal || integerValue < _minDecimal)\n+            {\n+                BigInteger scaleBy = BigInteger.Pow(10, scale);\n+                BigInteger integerPart = BigInteger.DivRem(integerValue, scaleBy, out BigInteger fractionalPart);\n+                if (integerPart > _maxDecimal || integerPart < _minDecimal) // decimal overflow, not much we can do here - C# needs a BigDecimal\n+                {\n+                    throw new OverflowException(\"Value: \" + integerPart + \" too big or too small to be represented as a decimal\");\n+                }\n+                return (decimal)integerPart + DivideByScale(fractionalPart, scale);\n+            }\n+            else\n+            {\n+                return DivideByScale(integerValue, scale);\n+            }\n+        }\n+\n+        private static decimal DivideByScale(BigInteger integerValue, int scale)\n+        {\n+            decimal result = (decimal)integerValue; // this cast is safe here\n+            int drop = scale;\n+            while (drop > PowersOfTenLength)\n+            {\n+                result /= s_powersOfTen[PowersOfTenLength];\n+                drop -= PowersOfTenLength;\n+            }\n+\n+            result /= s_powersOfTen[drop];\n+            return result;\n+        }\n+\n+        public static void GetBytes(BigInteger integerValue, int byteWidth, ref Span<byte> bytes)\n+        {\n+            if (bytes.Length != byteWidth)\n+            {\n+                throw new OverflowException(\"ValueBuffer size not equal to \" + byteWidth + \" byte width: \" + bytes.Length);\n+            }\n+\n+            Span<byte> integerBytes = integerValue.ToByteArray().AsSpan();\n+            if (integerBytes.Length > byteWidth)\n+            {\n+                throw new OverflowException(\"Decimal size greater than \" + byteWidth + \" bytes: \" + integerBytes.Length);\n+            }\n+\n+            if (integerBytes.Length == byteWidth)\n+            {\n+                bytes = integerBytes;\n+                return;\n+            }\n+\n+            if (integerValue.Sign == -1)\n+            {\n+                integerBytes.CopyTo(bytes);\n+                for (int i = integerBytes.Length; i < byteWidth; i++)\n+                {\n+                    bytes[i] = 255;\n+                }\n+            }\n+            else\n+            {\n+                integerBytes.CopyTo(bytes);\n+            }\n+        }\n+\n+        public static bool CheckPrecisionAndScale(decimal value, int precision, int scale, out BigInteger integerValue)\n+        {\n+            DecimalLayout layout = new DecimalLayout(value); // use in place of decimal.GetBits(value) to avoid an allocation\n+            integerValue = new BigInteger(BitConverter.GetBytes(layout.Lo).Concat(BitConverter.GetBytes(layout.Mid)).Concat(BitConverter.GetBytes(layout.Hi)).ToArray());\n+\n+            if (layout.Scale > scale)\n+                throw new OverflowException(\"Decimal scale can not be greater than that in the Arrow vector: \" + layout.Scale + \" != \" + scale);\n+\n+            if(integerValue >= BigInteger.Pow(10, precision))\n+                throw new OverflowException(\"Decimal precision can not be greater than that in the Arrow vector: \" + value + \" has precision > \" + precision);\n+\n+            if (layout.Scale < scale) // pad with trailing zeros\n+            {\n+                integerValue *= BigInteger.Pow(10, scale - layout.Scale);\n+            }\n+\n+            if (value < 0) // sign the big int\n+                integerValue = -integerValue;\n+\n+            return true;\n+        }\n+\n+        [StructLayout(LayoutKind.Explicit)]\n+        private readonly struct DecimalLayout\n+        {\n+            public DecimalLayout(decimal value)\n+            {\n+                this = default;\n+                d = value;\n+            }\n+\n+            [FieldOffset(0)] private readonly decimal d;\n+\n+            [FieldOffset(0)] private readonly int flags;\n+            [FieldOffset(4)] private readonly int hi;\n+#if BIGENDIAN\n\nReview comment:\n       This isn't going to work well because no one builds this assembly with `BIGENDIAN` enabled.\r\n   \r\n   How about using:\r\n   \r\n   ```C#\r\n           private readonly int _flags;\r\n           private readonly uint _hi32;\r\n           private readonly ulong _lo64;\r\n   ```\r\n   \r\n   Which is what System.Decimal uses?\r\n   \r\n   To get the Low and the Mid, you can do:\r\n   \r\n   ```C#\r\n   internal uint Low => (uint)_lo64;\r\n   internal uint Mid => (uint)(_lo64 >> 32);\r\n   ```\n\n##########\nFile path: csharp/src/Apache.Arrow/DecimalUtility.cs\n##########\n@@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Linq;\n+using System.Numerics;\n+using System.Runtime.InteropServices;\n+\n+namespace Apache.Arrow\n+{\n+    /// <summary>\n+    /// This is semi-optimised best attempt at converting to / from decimal and the buffers\n+    /// </summary>\n+    internal static class DecimalUtility\n+    {\n+        private static readonly BigInteger _maxDecimal = new BigInteger(decimal.MaxValue);\n+        private static readonly BigInteger _minDecimal = new BigInteger(decimal.MinValue);\n+        private static readonly ulong[] s_powersOfTen =\n+        {\n+            1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000,\n+            1000000000000, 10000000000000, 100000000000000, 1000000000000000, 10000000000000000, 100000000000000000,\n+            1000000000000000000, 10000000000000000000\n+        };\n+        private static int PowersOfTenLength => s_powersOfTen.Length - 1;\n+\n+        public static decimal GetDecimal(in ArrowBuffer valueBuffer, int index, int scale, int byteWidth,\n+            bool isUnsigned = false)\n+        {\n+            int startIndex = index * byteWidth;\n+            ReadOnlySpan<byte> value = valueBuffer.Span.Slice(startIndex, byteWidth);\n+            BigInteger integerValue;\n+\n+#if NETCOREAPP\n+            integerValue = new BigInteger(value);\n+#else\n+            integerValue = new BigInteger(value.ToArray());\n+#endif\n+\n+            if (integerValue > _maxDecimal || integerValue < _minDecimal)\n+            {\n+                BigInteger scaleBy = BigInteger.Pow(10, scale);\n+                BigInteger integerPart = BigInteger.DivRem(integerValue, scaleBy, out BigInteger fractionalPart);\n+                if (integerPart > _maxDecimal || integerPart < _minDecimal) // decimal overflow, not much we can do here - C# needs a BigDecimal\n+                {\n+                    throw new OverflowException(\"Value: \" + integerPart + \" too big or too small to be represented as a decimal\");\n+                }\n+                return (decimal)integerPart + DivideByScale(fractionalPart, scale);\n+            }\n+            else\n+            {\n+                return DivideByScale(integerValue, scale);\n+            }\n+        }\n+\n+        private static decimal DivideByScale(BigInteger integerValue, int scale)\n+        {\n+            decimal result = (decimal)integerValue; // this cast is safe here\n+            int drop = scale;\n+            while (drop > PowersOfTenLength)\n+            {\n+                result /= s_powersOfTen[PowersOfTenLength];\n+                drop -= PowersOfTenLength;\n+            }\n+\n+            result /= s_powersOfTen[drop];\n+            return result;\n+        }\n+\n+        public static void GetBytes(BigInteger integerValue, int byteWidth, ref Span<byte> bytes)\n\nReview comment:\n       ```suggestion\r\n           public static void GetBytes(BigInteger integerValue, int byteWidth, Span<byte> bytes)\r\n   ```\r\n   \r\n   There isn't a need to use `ref` here.\n\n##########\nFile path: csharp/src/Apache.Arrow/DecimalUtility.cs\n##########\n@@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Linq;\n+using System.Numerics;\n+using System.Runtime.InteropServices;\n+\n+namespace Apache.Arrow\n+{\n+    /// <summary>\n+    /// This is semi-optimised best attempt at converting to / from decimal and the buffers\n+    /// </summary>\n+    internal static class DecimalUtility\n+    {\n+        private static readonly BigInteger _maxDecimal = new BigInteger(decimal.MaxValue);\n+        private static readonly BigInteger _minDecimal = new BigInteger(decimal.MinValue);\n+        private static readonly ulong[] s_powersOfTen =\n+        {\n+            1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000,\n+            1000000000000, 10000000000000, 100000000000000, 1000000000000000, 10000000000000000, 100000000000000000,\n+            1000000000000000000, 10000000000000000000\n+        };\n+        private static int PowersOfTenLength => s_powersOfTen.Length - 1;\n+\n+        public static decimal GetDecimal(in ArrowBuffer valueBuffer, int index, int scale, int byteWidth,\n+            bool isUnsigned = false)\n+        {\n+            int startIndex = index * byteWidth;\n+            ReadOnlySpan<byte> value = valueBuffer.Span.Slice(startIndex, byteWidth);\n+            BigInteger integerValue;\n+\n+#if NETCOREAPP\n+            integerValue = new BigInteger(value);\n+#else\n+            integerValue = new BigInteger(value.ToArray());\n+#endif\n+\n+            if (integerValue > _maxDecimal || integerValue < _minDecimal)\n+            {\n+                BigInteger scaleBy = BigInteger.Pow(10, scale);\n+                BigInteger integerPart = BigInteger.DivRem(integerValue, scaleBy, out BigInteger fractionalPart);\n+                if (integerPart > _maxDecimal || integerPart < _minDecimal) // decimal overflow, not much we can do here - C# needs a BigDecimal\n+                {\n+                    throw new OverflowException(\"Value: \" + integerPart + \" too big or too small to be represented as a decimal\");\n+                }\n+                return (decimal)integerPart + DivideByScale(fractionalPart, scale);\n+            }\n+            else\n+            {\n+                return DivideByScale(integerValue, scale);\n+            }\n+        }\n+\n+        private static decimal DivideByScale(BigInteger integerValue, int scale)\n+        {\n+            decimal result = (decimal)integerValue; // this cast is safe here\n+            int drop = scale;\n+            while (drop > PowersOfTenLength)\n+            {\n+                result /= s_powersOfTen[PowersOfTenLength];\n+                drop -= PowersOfTenLength;\n+            }\n+\n+            result /= s_powersOfTen[drop];\n+            return result;\n+        }\n+\n+        public static void GetBytes(BigInteger integerValue, int byteWidth, ref Span<byte> bytes)\n+        {\n+            if (bytes.Length != byteWidth)\n+            {\n+                throw new OverflowException(\"ValueBuffer size not equal to \" + byteWidth + \" byte width: \" + bytes.Length);\n+            }\n+\n+            Span<byte> integerBytes = integerValue.ToByteArray().AsSpan();\n+            if (integerBytes.Length > byteWidth)\n+            {\n+                throw new OverflowException(\"Decimal size greater than \" + byteWidth + \" bytes: \" + integerBytes.Length);\n+            }\n+\n+            if (integerBytes.Length == byteWidth)\n+            {\n+                bytes = integerBytes;\n+                return;\n+            }\n+\n+            if (integerValue.Sign == -1)\n+            {\n+                integerBytes.CopyTo(bytes);\n+                for (int i = integerBytes.Length; i < byteWidth; i++)\n+                {\n+                    bytes[i] = 255;\n+                }\n+            }\n+            else\n+            {\n+                integerBytes.CopyTo(bytes);\n+            }\n+        }\n+\n+        public static bool CheckPrecisionAndScale(decimal value, int precision, int scale, out BigInteger integerValue)\n+        {\n+            DecimalLayout layout = new DecimalLayout(value); // use in place of decimal.GetBits(value) to avoid an allocation\n+            integerValue = new BigInteger(BitConverter.GetBytes(layout.Lo).Concat(BitConverter.GetBytes(layout.Mid)).Concat(BitConverter.GetBytes(layout.Hi)).ToArray());\n+\n+            if (layout.Scale > scale)\n+                throw new OverflowException(\"Decimal scale can not be greater than that in the Arrow vector: \" + layout.Scale + \" != \" + scale);\n+\n+            if(integerValue >= BigInteger.Pow(10, precision))\n+                throw new OverflowException(\"Decimal precision can not be greater than that in the Arrow vector: \" + value + \" has precision > \" + precision);\n+\n+            if (layout.Scale < scale) // pad with trailing zeros\n+            {\n+                integerValue *= BigInteger.Pow(10, scale - layout.Scale);\n+            }\n+\n+            if (value < 0) // sign the big int\n+                integerValue = -integerValue;\n+\n+            return true;\n+        }\n+\n+        [StructLayout(LayoutKind.Explicit)]\n+        private readonly struct DecimalLayout\n+        {\n+            public DecimalLayout(decimal value)\n+            {\n+                this = default;\n\nReview comment:\n       Why set `this = default`, when we set `d = value` right afterwards?\n\n##########\nFile path: csharp/src/Apache.Arrow/DecimalUtility.cs\n##########\n@@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Linq;\n+using System.Numerics;\n+using System.Runtime.InteropServices;\n+\n+namespace Apache.Arrow\n+{\n+    /// <summary>\n+    /// This is semi-optimised best attempt at converting to / from decimal and the buffers\n+    /// </summary>\n+    internal static class DecimalUtility\n+    {\n+        private static readonly BigInteger _maxDecimal = new BigInteger(decimal.MaxValue);\n+        private static readonly BigInteger _minDecimal = new BigInteger(decimal.MinValue);\n+        private static readonly ulong[] s_powersOfTen =\n+        {\n+            1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000,\n+            1000000000000, 10000000000000, 100000000000000, 1000000000000000, 10000000000000000, 100000000000000000,\n+            1000000000000000000, 10000000000000000000\n+        };\n+        private static int PowersOfTenLength => s_powersOfTen.Length - 1;\n+\n+        public static decimal GetDecimal(in ArrowBuffer valueBuffer, int index, int scale, int byteWidth,\n+            bool isUnsigned = false)\n+        {\n+            int startIndex = index * byteWidth;\n+            ReadOnlySpan<byte> value = valueBuffer.Span.Slice(startIndex, byteWidth);\n+            BigInteger integerValue;\n+\n+#if NETCOREAPP\n+            integerValue = new BigInteger(value);\n+#else\n+            integerValue = new BigInteger(value.ToArray());\n+#endif\n+\n+            if (integerValue > _maxDecimal || integerValue < _minDecimal)\n+            {\n+                BigInteger scaleBy = BigInteger.Pow(10, scale);\n+                BigInteger integerPart = BigInteger.DivRem(integerValue, scaleBy, out BigInteger fractionalPart);\n+                if (integerPart > _maxDecimal || integerPart < _minDecimal) // decimal overflow, not much we can do here - C# needs a BigDecimal\n+                {\n+                    throw new OverflowException(\"Value: \" + integerPart + \" too big or too small to be represented as a decimal\");\n+                }\n+                return (decimal)integerPart + DivideByScale(fractionalPart, scale);\n+            }\n+            else\n+            {\n+                return DivideByScale(integerValue, scale);\n+            }\n+        }\n+\n+        private static decimal DivideByScale(BigInteger integerValue, int scale)\n+        {\n+            decimal result = (decimal)integerValue; // this cast is safe here\n+            int drop = scale;\n+            while (drop > PowersOfTenLength)\n+            {\n+                result /= s_powersOfTen[PowersOfTenLength];\n+                drop -= PowersOfTenLength;\n+            }\n+\n+            result /= s_powersOfTen[drop];\n+            return result;\n+        }\n+\n+        public static void GetBytes(BigInteger integerValue, int byteWidth, ref Span<byte> bytes)\n+        {\n+            if (bytes.Length != byteWidth)\n+            {\n+                throw new OverflowException(\"ValueBuffer size not equal to \" + byteWidth + \" byte width: \" + bytes.Length);\n+            }\n+\n+            Span<byte> integerBytes = integerValue.ToByteArray().AsSpan();\n+            if (integerBytes.Length > byteWidth)\n+            {\n+                throw new OverflowException(\"Decimal size greater than \" + byteWidth + \" bytes: \" + integerBytes.Length);\n+            }\n+\n+            if (integerBytes.Length == byteWidth)\n+            {\n+                bytes = integerBytes;\n+                return;\n+            }\n+\n+            if (integerValue.Sign == -1)\n+            {\n+                integerBytes.CopyTo(bytes);\n+                for (int i = integerBytes.Length; i < byteWidth; i++)\n+                {\n+                    bytes[i] = 255;\n+                }\n+            }\n+            else\n+            {\n+                integerBytes.CopyTo(bytes);\n+            }\n+        }\n+\n+        public static bool CheckPrecisionAndScale(decimal value, int precision, int scale, out BigInteger integerValue)\n+        {\n+            DecimalLayout layout = new DecimalLayout(value); // use in place of decimal.GetBits(value) to avoid an allocation\n+            integerValue = new BigInteger(BitConverter.GetBytes(layout.Lo).Concat(BitConverter.GetBytes(layout.Mid)).Concat(BitConverter.GetBytes(layout.Hi)).ToArray());\n+\n+            if (layout.Scale > scale)\n+                throw new OverflowException(\"Decimal scale can not be greater than that in the Arrow vector: \" + layout.Scale + \" != \" + scale);\n\nReview comment:\n       Do we have tests for these overflow scenarios?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-01T16:24:02.983+0000",
                    "updated": "2021-03-01T16:24:02.983+0000",
                    "started": "2021-03-01T16:24:02.983+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "559445",
                    "issueId": "13355282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355282/worklog/559446",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #9356:\nURL: https://github.com/apache/arrow/pull/9356#issuecomment-788083728\n\n\n   Can you also update \r\n   \r\n   https://github.com/apache/arrow/blob/master/docs/source/status.rst\r\n   \r\n   To check `Decimal128` and `Decimal256` support for C#?\r\n   \r\n   Also, should be able to remove `Decimal` from the `Not Implemented` section of https://github.com/apache/arrow/blob/master/csharp/README.md\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-01T16:28:00.381+0000",
                    "updated": "2021-03-01T16:28:00.381+0000",
                    "started": "2021-03-01T16:28:00.381+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "559446",
                    "issueId": "13355282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355282/worklog/560029",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "suchagit commented on a change in pull request #9356:\nURL: https://github.com/apache/arrow/pull/9356#discussion_r585730134\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/DecimalUtility.cs\n##########\n@@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Linq;\n+using System.Numerics;\n+using System.Runtime.InteropServices;\n+\n+namespace Apache.Arrow\n+{\n+    /// <summary>\n+    /// This is semi-optimised best attempt at converting to / from decimal and the buffers\n+    /// </summary>\n+    internal static class DecimalUtility\n+    {\n+        private static readonly BigInteger _maxDecimal = new BigInteger(decimal.MaxValue);\n+        private static readonly BigInteger _minDecimal = new BigInteger(decimal.MinValue);\n+        private static readonly ulong[] s_powersOfTen =\n+        {\n+            1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000,\n+            1000000000000, 10000000000000, 100000000000000, 1000000000000000, 10000000000000000, 100000000000000000,\n+            1000000000000000000, 10000000000000000000\n+        };\n+        private static int PowersOfTenLength => s_powersOfTen.Length - 1;\n+\n+        public static decimal GetDecimal(in ArrowBuffer valueBuffer, int index, int scale, int byteWidth,\n+            bool isUnsigned = false)\n+        {\n+            int startIndex = index * byteWidth;\n+            ReadOnlySpan<byte> value = valueBuffer.Span.Slice(startIndex, byteWidth);\n+            BigInteger integerValue;\n+\n+#if NETCOREAPP\n+            integerValue = new BigInteger(value);\n+#else\n+            integerValue = new BigInteger(value.ToArray());\n+#endif\n+\n+            if (integerValue > _maxDecimal || integerValue < _minDecimal)\n+            {\n+                BigInteger scaleBy = BigInteger.Pow(10, scale);\n+                BigInteger integerPart = BigInteger.DivRem(integerValue, scaleBy, out BigInteger fractionalPart);\n+                if (integerPart > _maxDecimal || integerPart < _minDecimal) // decimal overflow, not much we can do here - C# needs a BigDecimal\n+                {\n+                    throw new OverflowException(\"Value: \" + integerPart + \" too big or too small to be represented as a decimal\");\n+                }\n+                return (decimal)integerPart + DivideByScale(fractionalPart, scale);\n+            }\n+            else\n+            {\n+                return DivideByScale(integerValue, scale);\n+            }\n+        }\n+\n+        private static decimal DivideByScale(BigInteger integerValue, int scale)\n+        {\n+            decimal result = (decimal)integerValue; // this cast is safe here\n+            int drop = scale;\n+            while (drop > PowersOfTenLength)\n+            {\n+                result /= s_powersOfTen[PowersOfTenLength];\n+                drop -= PowersOfTenLength;\n+            }\n+\n+            result /= s_powersOfTen[drop];\n+            return result;\n+        }\n+\n+        public static void GetBytes(BigInteger integerValue, int byteWidth, ref Span<byte> bytes)\n+        {\n+            if (bytes.Length != byteWidth)\n+            {\n+                throw new OverflowException(\"ValueBuffer size not equal to \" + byteWidth + \" byte width: \" + bytes.Length);\n+            }\n+\n+            Span<byte> integerBytes = integerValue.ToByteArray().AsSpan();\n+            if (integerBytes.Length > byteWidth)\n+            {\n+                throw new OverflowException(\"Decimal size greater than \" + byteWidth + \" bytes: \" + integerBytes.Length);\n+            }\n+\n+            if (integerBytes.Length == byteWidth)\n+            {\n+                bytes = integerBytes;\n+                return;\n+            }\n+\n+            if (integerValue.Sign == -1)\n+            {\n+                integerBytes.CopyTo(bytes);\n+                for (int i = integerBytes.Length; i < byteWidth; i++)\n+                {\n+                    bytes[i] = 255;\n+                }\n+            }\n+            else\n+            {\n+                integerBytes.CopyTo(bytes);\n+            }\n+        }\n+\n+        public static bool CheckPrecisionAndScale(decimal value, int precision, int scale, out BigInteger integerValue)\n+        {\n+            DecimalLayout layout = new DecimalLayout(value); // use in place of decimal.GetBits(value) to avoid an allocation\n+            integerValue = new BigInteger(BitConverter.GetBytes(layout.Lo).Concat(BitConverter.GetBytes(layout.Mid)).Concat(BitConverter.GetBytes(layout.Hi)).ToArray());\n\nReview comment:\n       I've made another round of changes based on the feedback.\r\n   These mostly combine CheckPrecisionAndScale and GetBytes - as you mention they need to be called together, and make some of the other suggestions / remove code which is not needed. [I have removed the DecimalLayout struct and tried to use netcore features where possibl - the exception being using the above for decimal.GetBits as a Span<int> which is only available on netcore 5.0 from what I can tell].\r\n   I've also added a few tests on the decimal utility, which is resulted in me making this public again, and also updated the docs.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-02T16:45:48.078+0000",
                    "updated": "2021-03-02T16:45:48.078+0000",
                    "started": "2021-03-02T16:45:48.078+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "560029",
                    "issueId": "13355282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355282/worklog/560030",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "suchagit commented on a change in pull request #9356:\nURL: https://github.com/apache/arrow/pull/9356#discussion_r585730554\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/DecimalUtility.cs\n##########\n@@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Linq;\n+using System.Numerics;\n+using System.Runtime.InteropServices;\n+\n+namespace Apache.Arrow\n+{\n+    /// <summary>\n+    /// This is semi-optimised best attempt at converting to / from decimal and the buffers\n+    /// </summary>\n+    internal static class DecimalUtility\n+    {\n+        private static readonly BigInteger _maxDecimal = new BigInteger(decimal.MaxValue);\n+        private static readonly BigInteger _minDecimal = new BigInteger(decimal.MinValue);\n+        private static readonly ulong[] s_powersOfTen =\n+        {\n+            1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000,\n+            1000000000000, 10000000000000, 100000000000000, 1000000000000000, 10000000000000000, 100000000000000000,\n+            1000000000000000000, 10000000000000000000\n+        };\n+        private static int PowersOfTenLength => s_powersOfTen.Length - 1;\n+\n+        public static decimal GetDecimal(in ArrowBuffer valueBuffer, int index, int scale, int byteWidth,\n+            bool isUnsigned = false)\n+        {\n+            int startIndex = index * byteWidth;\n+            ReadOnlySpan<byte> value = valueBuffer.Span.Slice(startIndex, byteWidth);\n+            BigInteger integerValue;\n+\n+#if NETCOREAPP\n+            integerValue = new BigInteger(value);\n+#else\n+            integerValue = new BigInteger(value.ToArray());\n+#endif\n+\n+            if (integerValue > _maxDecimal || integerValue < _minDecimal)\n+            {\n+                BigInteger scaleBy = BigInteger.Pow(10, scale);\n+                BigInteger integerPart = BigInteger.DivRem(integerValue, scaleBy, out BigInteger fractionalPart);\n+                if (integerPart > _maxDecimal || integerPart < _minDecimal) // decimal overflow, not much we can do here - C# needs a BigDecimal\n+                {\n+                    throw new OverflowException(\"Value: \" + integerPart + \" too big or too small to be represented as a decimal\");\n+                }\n+                return (decimal)integerPart + DivideByScale(fractionalPart, scale);\n+            }\n+            else\n+            {\n+                return DivideByScale(integerValue, scale);\n+            }\n+        }\n+\n+        private static decimal DivideByScale(BigInteger integerValue, int scale)\n+        {\n+            decimal result = (decimal)integerValue; // this cast is safe here\n+            int drop = scale;\n+            while (drop > PowersOfTenLength)\n+            {\n+                result /= s_powersOfTen[PowersOfTenLength];\n+                drop -= PowersOfTenLength;\n+            }\n+\n+            result /= s_powersOfTen[drop];\n+            return result;\n+        }\n+\n+        public static void GetBytes(BigInteger integerValue, int byteWidth, ref Span<byte> bytes)\n+        {\n+            if (bytes.Length != byteWidth)\n+            {\n+                throw new OverflowException(\"ValueBuffer size not equal to \" + byteWidth + \" byte width: \" + bytes.Length);\n+            }\n+\n+            Span<byte> integerBytes = integerValue.ToByteArray().AsSpan();\n+            if (integerBytes.Length > byteWidth)\n+            {\n+                throw new OverflowException(\"Decimal size greater than \" + byteWidth + \" bytes: \" + integerBytes.Length);\n+            }\n+\n+            if (integerBytes.Length == byteWidth)\n+            {\n+                bytes = integerBytes;\n+                return;\n+            }\n+\n+            if (integerValue.Sign == -1)\n+            {\n+                integerBytes.CopyTo(bytes);\n+                for (int i = integerBytes.Length; i < byteWidth; i++)\n+                {\n+                    bytes[i] = 255;\n+                }\n+            }\n+            else\n+            {\n+                integerBytes.CopyTo(bytes);\n+            }\n+        }\n+\n+        public static bool CheckPrecisionAndScale(decimal value, int precision, int scale, out BigInteger integerValue)\n+        {\n+            DecimalLayout layout = new DecimalLayout(value); // use in place of decimal.GetBits(value) to avoid an allocation\n+            integerValue = new BigInteger(BitConverter.GetBytes(layout.Lo).Concat(BitConverter.GetBytes(layout.Mid)).Concat(BitConverter.GetBytes(layout.Hi)).ToArray());\n+\n+            if (layout.Scale > scale)\n+                throw new OverflowException(\"Decimal scale can not be greater than that in the Arrow vector: \" + layout.Scale + \" != \" + scale);\n\nReview comment:\n       Added\n\n##########\nFile path: csharp/src/Apache.Arrow/DecimalUtility.cs\n##########\n@@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Linq;\n+using System.Numerics;\n+using System.Runtime.InteropServices;\n+\n+namespace Apache.Arrow\n+{\n+    /// <summary>\n+    /// This is semi-optimised best attempt at converting to / from decimal and the buffers\n+    /// </summary>\n+    internal static class DecimalUtility\n+    {\n+        private static readonly BigInteger _maxDecimal = new BigInteger(decimal.MaxValue);\n+        private static readonly BigInteger _minDecimal = new BigInteger(decimal.MinValue);\n+        private static readonly ulong[] s_powersOfTen =\n+        {\n+            1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000,\n+            1000000000000, 10000000000000, 100000000000000, 1000000000000000, 10000000000000000, 100000000000000000,\n+            1000000000000000000, 10000000000000000000\n+        };\n+        private static int PowersOfTenLength => s_powersOfTen.Length - 1;\n+\n+        public static decimal GetDecimal(in ArrowBuffer valueBuffer, int index, int scale, int byteWidth,\n+            bool isUnsigned = false)\n+        {\n+            int startIndex = index * byteWidth;\n+            ReadOnlySpan<byte> value = valueBuffer.Span.Slice(startIndex, byteWidth);\n+            BigInteger integerValue;\n+\n+#if NETCOREAPP\n+            integerValue = new BigInteger(value);\n+#else\n+            integerValue = new BigInteger(value.ToArray());\n+#endif\n+\n+            if (integerValue > _maxDecimal || integerValue < _minDecimal)\n+            {\n+                BigInteger scaleBy = BigInteger.Pow(10, scale);\n+                BigInteger integerPart = BigInteger.DivRem(integerValue, scaleBy, out BigInteger fractionalPart);\n+                if (integerPart > _maxDecimal || integerPart < _minDecimal) // decimal overflow, not much we can do here - C# needs a BigDecimal\n+                {\n+                    throw new OverflowException(\"Value: \" + integerPart + \" too big or too small to be represented as a decimal\");\n+                }\n+                return (decimal)integerPart + DivideByScale(fractionalPart, scale);\n+            }\n+            else\n+            {\n+                return DivideByScale(integerValue, scale);\n+            }\n+        }\n+\n+        private static decimal DivideByScale(BigInteger integerValue, int scale)\n+        {\n+            decimal result = (decimal)integerValue; // this cast is safe here\n+            int drop = scale;\n+            while (drop > PowersOfTenLength)\n+            {\n+                result /= s_powersOfTen[PowersOfTenLength];\n+                drop -= PowersOfTenLength;\n+            }\n+\n+            result /= s_powersOfTen[drop];\n+            return result;\n+        }\n+\n+        public static void GetBytes(BigInteger integerValue, int byteWidth, ref Span<byte> bytes)\n+        {\n+            if (bytes.Length != byteWidth)\n+            {\n+                throw new OverflowException(\"ValueBuffer size not equal to \" + byteWidth + \" byte width: \" + bytes.Length);\n+            }\n+\n+            Span<byte> integerBytes = integerValue.ToByteArray().AsSpan();\n+            if (integerBytes.Length > byteWidth)\n+            {\n+                throw new OverflowException(\"Decimal size greater than \" + byteWidth + \" bytes: \" + integerBytes.Length);\n+            }\n+\n+            if (integerBytes.Length == byteWidth)\n+            {\n+                bytes = integerBytes;\n+                return;\n+            }\n+\n+            if (integerValue.Sign == -1)\n+            {\n+                integerBytes.CopyTo(bytes);\n+                for (int i = integerBytes.Length; i < byteWidth; i++)\n+                {\n+                    bytes[i] = 255;\n+                }\n+            }\n+            else\n+            {\n+                integerBytes.CopyTo(bytes);\n+            }\n+        }\n+\n+        public static bool CheckPrecisionAndScale(decimal value, int precision, int scale, out BigInteger integerValue)\n+        {\n+            DecimalLayout layout = new DecimalLayout(value); // use in place of decimal.GetBits(value) to avoid an allocation\n+            integerValue = new BigInteger(BitConverter.GetBytes(layout.Lo).Concat(BitConverter.GetBytes(layout.Mid)).Concat(BitConverter.GetBytes(layout.Hi)).ToArray());\n+\n+            if (layout.Scale > scale)\n+                throw new OverflowException(\"Decimal scale can not be greater than that in the Arrow vector: \" + layout.Scale + \" != \" + scale);\n+\n+            if(integerValue >= BigInteger.Pow(10, precision))\n+                throw new OverflowException(\"Decimal precision can not be greater than that in the Arrow vector: \" + value + \" has precision > \" + precision);\n+\n+            if (layout.Scale < scale) // pad with trailing zeros\n+            {\n+                integerValue *= BigInteger.Pow(10, scale - layout.Scale);\n+            }\n+\n+            if (value < 0) // sign the big int\n+                integerValue = -integerValue;\n+\n+            return true;\n+        }\n+\n+        [StructLayout(LayoutKind.Explicit)]\n+        private readonly struct DecimalLayout\n+        {\n+            public DecimalLayout(decimal value)\n+            {\n+                this = default;\n+                d = value;\n+            }\n+\n+            [FieldOffset(0)] private readonly decimal d;\n+\n+            [FieldOffset(0)] private readonly int flags;\n+            [FieldOffset(4)] private readonly int hi;\n+#if BIGENDIAN\n\nReview comment:\n       I've removed this as part of the latest refactor\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-02T16:46:32.474+0000",
                    "updated": "2021-03-02T16:46:32.474+0000",
                    "started": "2021-03-02T16:46:32.473+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "560030",
                    "issueId": "13355282"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 16200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@32258361[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6506731a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@d4a920d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5b82ae1d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6876d3c0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2a72ed31[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73f1c888[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3d4d72ad[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@637b4e17[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5edd2c2c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@23951af7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@751bcc32[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Mar 25 20:36:02 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-03-25T20:36:02.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11422/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-01-28T21:38:51.000+0000",
        "updated": "2021-03-25T20:36:05.000+0000",
        "timeoriginalestimate": null,
        "description": "The C# client does not yet support decimals",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C#] Add support for decimals",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355282/comment/17308962",
                    "id": "17308962",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
                        "name": "eerhardt",
                        "key": "eerhardt",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
                        },
                        "displayName": "Eric Erhardt",
                        "active": true,
                        "timeZone": "America/North_Dakota/New_Salem"
                    },
                    "body": "Issue resolved by pull request 9356\n[https://github.com/apache/arrow/pull/9356]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
                        "name": "eerhardt",
                        "key": "eerhardt",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
                        },
                        "displayName": "Eric Erhardt",
                        "active": true,
                        "timeZone": "America/North_Dakota/New_Salem"
                    },
                    "created": "2021-03-25T20:36:02.275+0000",
                    "updated": "2021-03-25T20:36:02.275+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0n3tc:",
        "customfield_12314139": null
    }
}