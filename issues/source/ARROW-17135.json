{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13472374",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472374",
    "key": "ARROW-17135",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17135/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 28,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472374/worklog/793033",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm opened a new pull request, #13654:\nURL: https://github.com/apache/arrow/pull/13654\n\n   This \"leaner\" implementation reduces the generated code size of this C++ file from 2307768 bytes to 1192608 bytes in gcc 10.3.0. The benchmarks are also faster (on my avx2 laptop):\r\n   \r\n   before\r\n   \r\n   ```\r\n   -----------------------------------------------------------------------------------------------\r\n   Benchmark                                     Time             CPU   Iterations UserCounters...\r\n   -----------------------------------------------------------------------------------------------\r\n   GreaterArrayArrayInt64/32768/10000         32.1 us         32.1 us        21533 items_per_second=1020.16M/s null_percent=0.01 size=32.768k\r\n   GreaterArrayArrayInt64/32768/100           32.1 us         32.1 us        21603 items_per_second=1019.27M/s null_percent=1 size=32.768k\r\n   GreaterArrayArrayInt64/32768/10            32.1 us         32.1 us        21479 items_per_second=1020.82M/s null_percent=10 size=32.768k\r\n   GreaterArrayArrayInt64/32768/2             32.0 us         32.0 us        21468 items_per_second=1023.12M/s null_percent=50 size=32.768k\r\n   GreaterArrayArrayInt64/32768/1             32.3 us         32.3 us        21720 items_per_second=1013.44M/s null_percent=100 size=32.768k\r\n   GreaterArrayArrayInt64/32768/0             31.6 us         31.6 us        21828 items_per_second=1036.94M/s null_percent=0 size=32.768k\r\n   GreaterArrayScalarInt64/32768/10000        20.8 us         20.8 us        33461 items_per_second=1.57238G/s null_percent=0.01 size=32.768k\r\n   GreaterArrayScalarInt64/32768/100          20.9 us         20.9 us        33625 items_per_second=1.56611G/s null_percent=1 size=32.768k\r\n   GreaterArrayScalarInt64/32768/10           20.8 us         20.8 us        33553 items_per_second=1.57338G/s null_percent=10 size=32.768k\r\n   GreaterArrayScalarInt64/32768/2            20.9 us         20.9 us        33348 items_per_second=1.5687G/s null_percent=50 size=32.768k\r\n   GreaterArrayScalarInt64/32768/1            20.9 us         20.9 us        33419 items_per_second=1.56879G/s null_percent=100 size=32.768k\r\n   GreaterArrayScalarInt64/32768/0            20.5 us         20.5 us        34116 items_per_second=1.59837G/s null_percent=0 size=32.768k\r\n   ```\r\n   \r\n   after\r\n   \r\n   ```\r\n   -----------------------------------------------------------------------------------------------\r\n   Benchmark                                     Time             CPU   Iterations UserCounters...\r\n   -----------------------------------------------------------------------------------------------\r\n   GreaterArrayArrayInt64/32768/10000         18.1 us         18.1 us        38751 items_per_second=1.81199G/s null_percent=0.01 size=32.768k\r\n   GreaterArrayArrayInt64/32768/100           17.5 us         17.5 us        39374 items_per_second=1.86821G/s null_percent=1 size=32.768k\r\n   GreaterArrayArrayInt64/32768/10            19.0 us         19.0 us        33941 items_per_second=1.72066G/s null_percent=10 size=32.768k\r\n   GreaterArrayArrayInt64/32768/2             18.0 us         18.0 us        39589 items_per_second=1.81817G/s null_percent=50 size=32.768k\r\n   GreaterArrayArrayInt64/32768/1             18.1 us         18.1 us        39061 items_per_second=1.80719G/s null_percent=100 size=32.768k\r\n   GreaterArrayArrayInt64/32768/0             17.5 us         17.5 us        39813 items_per_second=1.87031G/s null_percent=0 size=32.768k\r\n   GreaterArrayScalarInt64/32768/10000        16.3 us         16.3 us        42281 items_per_second=2.01525G/s null_percent=0.01 size=32.768k\r\n   GreaterArrayScalarInt64/32768/100          16.5 us         16.5 us        42266 items_per_second=1.98195G/s null_percent=1 size=32.768k\r\n   GreaterArrayScalarInt64/32768/10           16.5 us         16.5 us        41872 items_per_second=1.98615G/s null_percent=10 size=32.768k\r\n   GreaterArrayScalarInt64/32768/2            16.3 us         16.3 us        42130 items_per_second=2.00447G/s null_percent=50 size=32.768k\r\n   GreaterArrayScalarInt64/32768/1            16.2 us         16.2 us        42391 items_per_second=2.02296G/s null_percent=100 size=32.768k\r\n   GreaterArrayScalarInt64/32768/0            15.9 us         15.9 us        43498 items_per_second=2.0614G/s null_percent=0 size=32.768k\r\n   ```\n\n\n",
                    "created": "2022-07-20T05:59:34.376+0000",
                    "updated": "2022-07-20T05:59:34.376+0000",
                    "started": "2022-07-20T05:59:34.376+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793033",
                    "issueId": "13472374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472374/worklog/793034",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13654:\nURL: https://github.com/apache/arrow/pull/13654#issuecomment-1189862080\n\n   https://issues.apache.org/jira/browse/ARROW-17135\n\n\n",
                    "created": "2022-07-20T05:59:53.685+0000",
                    "updated": "2022-07-20T05:59:53.685+0000",
                    "started": "2022-07-20T05:59:53.685+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793034",
                    "issueId": "13472374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472374/worklog/793035",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13654:\nURL: https://github.com/apache/arrow/pull/13654#issuecomment-1189862091\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-07-20T05:59:55.125+0000",
                    "updated": "2022-07-20T05:59:55.125+0000",
                    "started": "2022-07-20T05:59:55.125+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793035",
                    "issueId": "13472374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472374/worklog/793232",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13654:\nURL: https://github.com/apache/arrow/pull/13654#discussion_r925579583\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_compare.cc:\n##########\n@@ -158,11 +158,183 @@ struct Maximum {\n \n // Implement Less, LessEqual by flipping arguments to Greater, GreaterEqual\n \n-template <typename OutType, typename ArgType, typename Op>\n-struct CompareTimestamps\n-    : public applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op> {\n-  using Base = applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op>;\n+template <int batch_size>\n+void PackBits(const int* values, uint8_t* out) {\n+  for (int i = 0; i < batch_size / 8; ++i) {\n+    *out++ = (values[0] | values[1] << 1 | values[2] << 2 | values[3] << 3 |\n+              values[4] << 4 | values[5] << 5 | values[6] << 6 | values[7] << 7);\n+    values += 8;\n+  }\n+}\n+\n+template <typename T, typename Op>\n+struct ComparePrimitive {\n+  static void Exec(const void* left_values_void, const void* right_values_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T* left_values = reinterpret_cast<const T*>(left_values_void);\n+    const T* right_values = reinterpret_cast<const T*>(right_values_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n\nReview Comment:\n   This could even be `uint8_t`, though I'm not sure it would make much of a difference in practice?\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_compare.cc:\n##########\n@@ -158,11 +158,183 @@ struct Maximum {\n \n // Implement Less, LessEqual by flipping arguments to Greater, GreaterEqual\n \n-template <typename OutType, typename ArgType, typename Op>\n-struct CompareTimestamps\n-    : public applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op> {\n-  using Base = applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op>;\n+template <int batch_size>\n+void PackBits(const int* values, uint8_t* out) {\n+  for (int i = 0; i < batch_size / 8; ++i) {\n+    *out++ = (values[0] | values[1] << 1 | values[2] << 2 | values[3] << 3 |\n+              values[4] << 4 | values[5] << 5 | values[6] << 6 | values[7] << 7);\n+    values += 8;\n+  }\n+}\n+\n+template <typename T, typename Op>\n+struct ComparePrimitive {\n+  static void Exec(const void* left_values_void, const void* right_values_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T* left_values = reinterpret_cast<const T*>(left_values_void);\n+    const T* right_values = reinterpret_cast<const T*>(right_values_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] = Op::template Call<bool, T, T>(nullptr, *left_values++,\n+                                                       *right_values++, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(out_bitmap, bit_index++,\n+                         Op::template Call<bool, T, T>(nullptr, *left_values++,\n+                                                       *right_values++, nullptr));\n+    }\n+  }\n+};\n+\n+template <typename T, typename Op>\n+struct ComparePrimitiveAS {\n+  static void Exec(const void* left_values_void, const void* right_value_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T* left_values = reinterpret_cast<const T*>(left_values_void);\n+    const T right_value = *reinterpret_cast<const T*>(right_value_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] =\n+            Op::template Call<bool, T, T>(nullptr, *left_values++, right_value, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(\n+          out_bitmap, bit_index++,\n+          Op::template Call<bool, T, T>(nullptr, *left_values++, right_value, nullptr));\n+    }\n+  }\n+};\n+\n+template <typename T, typename Op>\n+struct ComparePrimitiveSA {\n\nReview Comment:\n   ```suggestion\r\n   struct ComparePrimitiveScalarArray {\r\n   ```\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_compare.cc:\n##########\n@@ -158,11 +158,183 @@ struct Maximum {\n \n // Implement Less, LessEqual by flipping arguments to Greater, GreaterEqual\n \n-template <typename OutType, typename ArgType, typename Op>\n-struct CompareTimestamps\n-    : public applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op> {\n-  using Base = applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op>;\n+template <int batch_size>\n+void PackBits(const int* values, uint8_t* out) {\n+  for (int i = 0; i < batch_size / 8; ++i) {\n+    *out++ = (values[0] | values[1] << 1 | values[2] << 2 | values[3] << 3 |\n+              values[4] << 4 | values[5] << 5 | values[6] << 6 | values[7] << 7);\n+    values += 8;\n+  }\n+}\n+\n+template <typename T, typename Op>\n+struct ComparePrimitive {\n+  static void Exec(const void* left_values_void, const void* right_values_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T* left_values = reinterpret_cast<const T*>(left_values_void);\n+    const T* right_values = reinterpret_cast<const T*>(right_values_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] = Op::template Call<bool, T, T>(nullptr, *left_values++,\n+                                                       *right_values++, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(out_bitmap, bit_index++,\n+                         Op::template Call<bool, T, T>(nullptr, *left_values++,\n+                                                       *right_values++, nullptr));\n+    }\n+  }\n+};\n+\n+template <typename T, typename Op>\n+struct ComparePrimitiveAS {\n+  static void Exec(const void* left_values_void, const void* right_value_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T* left_values = reinterpret_cast<const T*>(left_values_void);\n+    const T right_value = *reinterpret_cast<const T*>(right_value_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] =\n+            Op::template Call<bool, T, T>(nullptr, *left_values++, right_value, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(\n+          out_bitmap, bit_index++,\n+          Op::template Call<bool, T, T>(nullptr, *left_values++, right_value, nullptr));\n+    }\n+  }\n+};\n+\n+template <typename T, typename Op>\n+struct ComparePrimitiveSA {\n+  static void Exec(const void* left_value_void, const void* right_values_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T left_value = *reinterpret_cast<const T*>(left_value_void);\n+    const T* right_values = reinterpret_cast<const T*>(right_values_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] =\n+            Op::template Call<bool, T, T>(nullptr, left_value, *right_values++, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(\n+          out_bitmap, bit_index++,\n+          Op::template Call<bool, T, T>(nullptr, left_value, *right_values++, nullptr));\n+    }\n+  }\n+};\n+\n+using BinaryKernel = void (*)(const void*, const void*, int64_t, void*);\n+\n+struct CompareData : public KernelState {\n+  BinaryKernel func_aa;\n+  BinaryKernel func_sa;\n+  BinaryKernel func_as;\n+  CompareData(BinaryKernel func_aa, BinaryKernel func_sa, BinaryKernel func_as)\n+      : func_aa(func_aa), func_sa(func_sa), func_as(func_as) {}\n\nReview Comment:\n   This trivial constructor probably doesn't need to be defined explicitly, as it will be synthesized automatically.\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_compare.cc:\n##########\n@@ -171,22 +343,28 @@ struct CompareTimestamps\n           \"Cannot compare timestamp with timezone to timestamp without timezone, got: \",\n           lhs, \" and \", rhs);\n     }\n-    return Base::Exec(ctx, batch, out);\n+    return CompareKernel<Int64Type>::Exec(ctx, batch, out);\n   }\n };\n \n template <typename Op>\n-void AddIntegerCompare(const std::shared_ptr<DataType>& ty, ScalarFunction* func) {\n-  auto exec =\n-      GeneratePhysicalInteger<applicator::ScalarBinaryEqualTypes, BooleanType, Op>(*ty);\n-  DCHECK_OK(func->AddKernel({ty, ty}, boolean(), std::move(exec)));\n+ScalarKernel GetCompareKernel(InputType ty, Type::type compare_type,\n+                              ArrayKernelExec exec) {\n+  ScalarKernel kernel;\n+  kernel.signature = KernelSignature::Make({ty, ty}, boolean());\n+  BinaryKernel func_aa = GetBinaryKernel<ComparePrimitive, Op>(compare_type);\n+  BinaryKernel func_sa = GetBinaryKernel<ComparePrimitiveSA, Op>(compare_type);\n+  BinaryKernel func_as = GetBinaryKernel<ComparePrimitiveAS, Op>(compare_type);\n+  kernel.data = std::make_shared<CompareData>(func_aa, func_sa, func_as);\n+  kernel.exec = exec;\n+  return kernel;\n }\n \n-template <typename InType, typename Op>\n-void AddGenericCompare(const std::shared_ptr<DataType>& ty, ScalarFunction* func) {\n-  DCHECK_OK(\n-      func->AddKernel({ty, ty}, boolean(),\n-                      applicator::ScalarBinaryEqualTypes<BooleanType, InType, Op>::Exec));\n+template <typename Op>\n+void AddPrimitiveCompare(const std::shared_ptr<DataType>& ty, ScalarFunction* func) {\n+  ArrayKernelExec exec = GeneratePhysicalNumeric<CompareKernel>(ty);\n+  ScalarKernel kernel = GetCompareKernel<Op>(ty, ty->id(), exec);\n\nReview Comment:\n   So we're using both `GeneratePhysicalNumeric` and `GetBinaryKernel` which ultimately do the same thing? Is it possible to streamline this and avoid redundancies?\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_compare.cc:\n##########\n@@ -158,11 +158,183 @@ struct Maximum {\n \n // Implement Less, LessEqual by flipping arguments to Greater, GreaterEqual\n \n-template <typename OutType, typename ArgType, typename Op>\n-struct CompareTimestamps\n-    : public applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op> {\n-  using Base = applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op>;\n+template <int batch_size>\n+void PackBits(const int* values, uint8_t* out) {\n+  for (int i = 0; i < batch_size / 8; ++i) {\n+    *out++ = (values[0] | values[1] << 1 | values[2] << 2 | values[3] << 3 |\n+              values[4] << 4 | values[5] << 5 | values[6] << 6 | values[7] << 7);\n+    values += 8;\n+  }\n+}\n+\n+template <typename T, typename Op>\n+struct ComparePrimitive {\n+  static void Exec(const void* left_values_void, const void* right_values_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T* left_values = reinterpret_cast<const T*>(left_values_void);\n+    const T* right_values = reinterpret_cast<const T*>(right_values_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] = Op::template Call<bool, T, T>(nullptr, *left_values++,\n+                                                       *right_values++, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(out_bitmap, bit_index++,\n+                         Op::template Call<bool, T, T>(nullptr, *left_values++,\n+                                                       *right_values++, nullptr));\n+    }\n+  }\n+};\n+\n+template <typename T, typename Op>\n+struct ComparePrimitiveAS {\n+  static void Exec(const void* left_values_void, const void* right_value_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T* left_values = reinterpret_cast<const T*>(left_values_void);\n+    const T right_value = *reinterpret_cast<const T*>(right_value_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] =\n+            Op::template Call<bool, T, T>(nullptr, *left_values++, right_value, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(\n+          out_bitmap, bit_index++,\n+          Op::template Call<bool, T, T>(nullptr, *left_values++, right_value, nullptr));\n+    }\n+  }\n+};\n+\n+template <typename T, typename Op>\n+struct ComparePrimitiveSA {\n+  static void Exec(const void* left_value_void, const void* right_values_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T left_value = *reinterpret_cast<const T*>(left_value_void);\n+    const T* right_values = reinterpret_cast<const T*>(right_values_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] =\n+            Op::template Call<bool, T, T>(nullptr, left_value, *right_values++, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(\n+          out_bitmap, bit_index++,\n+          Op::template Call<bool, T, T>(nullptr, left_value, *right_values++, nullptr));\n+    }\n+  }\n+};\n+\n+using BinaryKernel = void (*)(const void*, const void*, int64_t, void*);\n+\n+struct CompareData : public KernelState {\n+  BinaryKernel func_aa;\n+  BinaryKernel func_sa;\n+  BinaryKernel func_as;\n+  CompareData(BinaryKernel func_aa, BinaryKernel func_sa, BinaryKernel func_as)\n+      : func_aa(func_aa), func_sa(func_sa), func_as(func_as) {}\n+};\n+\n+template <template <typename...> class Generator, typename Op>\n+BinaryKernel GetBinaryKernel(Type::type type) {\n+  switch (type) {\n+    case Type::INT8:\n+      return Generator<int8_t, Op>::Exec;\n+    case Type::INT16:\n+      return Generator<int16_t, Op>::Exec;\n+    case Type::INT32:\n+    case Type::DATE32:\n+      return Generator<int32_t, Op>::Exec;\n+    case Type::INT64:\n+    case Type::DURATION:\n+    case Type::TIMESTAMP:\n+    case Type::DATE64:\n+      return Generator<int64_t, Op>::Exec;\n+    case Type::UINT8:\n+      return Generator<uint8_t, Op>::Exec;\n+    case Type::UINT16:\n+      return Generator<uint16_t, Op>::Exec;\n+    case Type::UINT32:\n+      return Generator<uint32_t, Op>::Exec;\n+    case Type::UINT64:\n+      return Generator<uint64_t, Op>::Exec;\n+    case Type::FLOAT:\n+      return Generator<float, Op>::Exec;\n+    case Type::DOUBLE:\n+      return Generator<double, Op>::Exec;\n+    default:\n+      return nullptr;\n+  }\n+}\n+\n+template <typename Type>\n+struct CompareKernel {\n+  using T = typename Type::c_type;\n+\n+  static Status Exec(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+    const auto kernel = static_cast<const ScalarKernel*>(ctx->kernel());\n+    DCHECK(kernel);\n+    const auto kernel_data = static_cast<const CompareData*>(kernel->data.get());\n+\n+    ArraySpan* out_arr = out->array_span();\n+\n+    // TODO: implement path for offset not multiple of 8\n+    const bool out_is_byte_aligned = out_arr->offset % 8 == 0;\n\nReview Comment:\n   Hmm... is there any situation where the output offset is not zero?\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_compare.cc:\n##########\n@@ -158,11 +158,183 @@ struct Maximum {\n \n // Implement Less, LessEqual by flipping arguments to Greater, GreaterEqual\n \n-template <typename OutType, typename ArgType, typename Op>\n-struct CompareTimestamps\n-    : public applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op> {\n-  using Base = applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op>;\n+template <int batch_size>\n+void PackBits(const int* values, uint8_t* out) {\n+  for (int i = 0; i < batch_size / 8; ++i) {\n+    *out++ = (values[0] | values[1] << 1 | values[2] << 2 | values[3] << 3 |\n+              values[4] << 4 | values[5] << 5 | values[6] << 6 | values[7] << 7);\n+    values += 8;\n+  }\n+}\n+\n+template <typename T, typename Op>\n+struct ComparePrimitive {\n+  static void Exec(const void* left_values_void, const void* right_values_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T* left_values = reinterpret_cast<const T*>(left_values_void);\n+    const T* right_values = reinterpret_cast<const T*>(right_values_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] = Op::template Call<bool, T, T>(nullptr, *left_values++,\n+                                                       *right_values++, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(out_bitmap, bit_index++,\n+                         Op::template Call<bool, T, T>(nullptr, *left_values++,\n+                                                       *right_values++, nullptr));\n+    }\n+  }\n+};\n+\n+template <typename T, typename Op>\n+struct ComparePrimitiveAS {\n\nReview Comment:\n   ```suggestion\r\n   struct ComparePrimitiveArrayScalar {\r\n   ```\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_compare.cc:\n##########\n@@ -158,11 +158,183 @@ struct Maximum {\n \n // Implement Less, LessEqual by flipping arguments to Greater, GreaterEqual\n \n-template <typename OutType, typename ArgType, typename Op>\n-struct CompareTimestamps\n-    : public applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op> {\n-  using Base = applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op>;\n+template <int batch_size>\n+void PackBits(const int* values, uint8_t* out) {\n+  for (int i = 0; i < batch_size / 8; ++i) {\n+    *out++ = (values[0] | values[1] << 1 | values[2] << 2 | values[3] << 3 |\n+              values[4] << 4 | values[5] << 5 | values[6] << 6 | values[7] << 7);\n+    values += 8;\n+  }\n+}\n+\n+template <typename T, typename Op>\n+struct ComparePrimitive {\n+  static void Exec(const void* left_values_void, const void* right_values_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T* left_values = reinterpret_cast<const T*>(left_values_void);\n+    const T* right_values = reinterpret_cast<const T*>(right_values_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] = Op::template Call<bool, T, T>(nullptr, *left_values++,\n+                                                       *right_values++, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(out_bitmap, bit_index++,\n+                         Op::template Call<bool, T, T>(nullptr, *left_values++,\n+                                                       *right_values++, nullptr));\n+    }\n+  }\n+};\n+\n+template <typename T, typename Op>\n+struct ComparePrimitiveAS {\n+  static void Exec(const void* left_values_void, const void* right_value_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T* left_values = reinterpret_cast<const T*>(left_values_void);\n+    const T right_value = *reinterpret_cast<const T*>(right_value_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] =\n+            Op::template Call<bool, T, T>(nullptr, *left_values++, right_value, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(\n+          out_bitmap, bit_index++,\n+          Op::template Call<bool, T, T>(nullptr, *left_values++, right_value, nullptr));\n+    }\n+  }\n+};\n+\n+template <typename T, typename Op>\n+struct ComparePrimitiveSA {\n+  static void Exec(const void* left_value_void, const void* right_values_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T left_value = *reinterpret_cast<const T*>(left_value_void);\n+    const T* right_values = reinterpret_cast<const T*>(right_values_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] =\n+            Op::template Call<bool, T, T>(nullptr, left_value, *right_values++, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(\n+          out_bitmap, bit_index++,\n+          Op::template Call<bool, T, T>(nullptr, left_value, *right_values++, nullptr));\n+    }\n+  }\n+};\n+\n+using BinaryKernel = void (*)(const void*, const void*, int64_t, void*);\n+\n+struct CompareData : public KernelState {\n+  BinaryKernel func_aa;\n+  BinaryKernel func_sa;\n+  BinaryKernel func_as;\n+  CompareData(BinaryKernel func_aa, BinaryKernel func_sa, BinaryKernel func_as)\n+      : func_aa(func_aa), func_sa(func_sa), func_as(func_as) {}\n+};\n+\n+template <template <typename...> class Generator, typename Op>\n+BinaryKernel GetBinaryKernel(Type::type type) {\n+  switch (type) {\n+    case Type::INT8:\n+      return Generator<int8_t, Op>::Exec;\n+    case Type::INT16:\n+      return Generator<int16_t, Op>::Exec;\n+    case Type::INT32:\n+    case Type::DATE32:\n+      return Generator<int32_t, Op>::Exec;\n+    case Type::INT64:\n+    case Type::DURATION:\n+    case Type::TIMESTAMP:\n+    case Type::DATE64:\n+      return Generator<int64_t, Op>::Exec;\n+    case Type::UINT8:\n+      return Generator<uint8_t, Op>::Exec;\n+    case Type::UINT16:\n+      return Generator<uint16_t, Op>::Exec;\n+    case Type::UINT32:\n+      return Generator<uint32_t, Op>::Exec;\n+    case Type::UINT64:\n+      return Generator<uint64_t, Op>::Exec;\n+    case Type::FLOAT:\n+      return Generator<float, Op>::Exec;\n+    case Type::DOUBLE:\n+      return Generator<double, Op>::Exec;\n+    default:\n+      return nullptr;\n+  }\n+}\n+\n+template <typename Type>\n+struct CompareKernel {\n+  using T = typename Type::c_type;\n+\n+  static Status Exec(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+    const auto kernel = static_cast<const ScalarKernel*>(ctx->kernel());\n+    DCHECK(kernel);\n+    const auto kernel_data = static_cast<const CompareData*>(kernel->data.get());\n\nReview Comment:\n   Can we use `checked_cast` here?\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_compare.cc:\n##########\n@@ -158,11 +158,183 @@ struct Maximum {\n \n // Implement Less, LessEqual by flipping arguments to Greater, GreaterEqual\n \n-template <typename OutType, typename ArgType, typename Op>\n-struct CompareTimestamps\n-    : public applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op> {\n-  using Base = applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op>;\n+template <int batch_size>\n+void PackBits(const int* values, uint8_t* out) {\n+  for (int i = 0; i < batch_size / 8; ++i) {\n+    *out++ = (values[0] | values[1] << 1 | values[2] << 2 | values[3] << 3 |\n+              values[4] << 4 | values[5] << 5 | values[6] << 6 | values[7] << 7);\n+    values += 8;\n+  }\n+}\n+\n+template <typename T, typename Op>\n+struct ComparePrimitive {\n+  static void Exec(const void* left_values_void, const void* right_values_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T* left_values = reinterpret_cast<const T*>(left_values_void);\n+    const T* right_values = reinterpret_cast<const T*>(right_values_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] = Op::template Call<bool, T, T>(nullptr, *left_values++,\n+                                                       *right_values++, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(out_bitmap, bit_index++,\n+                         Op::template Call<bool, T, T>(nullptr, *left_values++,\n+                                                       *right_values++, nullptr));\n+    }\n+  }\n+};\n+\n+template <typename T, typename Op>\n+struct ComparePrimitiveAS {\n+  static void Exec(const void* left_values_void, const void* right_value_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T* left_values = reinterpret_cast<const T*>(left_values_void);\n+    const T right_value = *reinterpret_cast<const T*>(right_value_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] =\n+            Op::template Call<bool, T, T>(nullptr, *left_values++, right_value, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(\n+          out_bitmap, bit_index++,\n+          Op::template Call<bool, T, T>(nullptr, *left_values++, right_value, nullptr));\n+    }\n+  }\n+};\n+\n+template <typename T, typename Op>\n+struct ComparePrimitiveSA {\n+  static void Exec(const void* left_value_void, const void* right_values_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T left_value = *reinterpret_cast<const T*>(left_value_void);\n+    const T* right_values = reinterpret_cast<const T*>(right_values_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] =\n+            Op::template Call<bool, T, T>(nullptr, left_value, *right_values++, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(\n+          out_bitmap, bit_index++,\n+          Op::template Call<bool, T, T>(nullptr, left_value, *right_values++, nullptr));\n+    }\n+  }\n+};\n+\n+using BinaryKernel = void (*)(const void*, const void*, int64_t, void*);\n+\n+struct CompareData : public KernelState {\n+  BinaryKernel func_aa;\n+  BinaryKernel func_sa;\n+  BinaryKernel func_as;\n+  CompareData(BinaryKernel func_aa, BinaryKernel func_sa, BinaryKernel func_as)\n+      : func_aa(func_aa), func_sa(func_sa), func_as(func_as) {}\n+};\n+\n+template <template <typename...> class Generator, typename Op>\n+BinaryKernel GetBinaryKernel(Type::type type) {\n\nReview Comment:\n   Can we give this a more descriptive name?\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_compare.cc:\n##########\n@@ -310,30 +480,37 @@ std::shared_ptr<ScalarFunction> MakeCompareFunction(std::string name, FunctionDo\n   return func;\n }\n \n-struct FlippedData : public KernelState {\n+struct FlippedData : public CompareData {\n   ArrayKernelExec unflipped_exec;\n-  explicit FlippedData(ArrayKernelExec unflipped_exec) : unflipped_exec(unflipped_exec) {}\n+  explicit FlippedData(ArrayKernelExec unflipped_exec, BinaryKernel func_aa = nullptr,\n+                       BinaryKernel func_sa = nullptr, BinaryKernel func_as = nullptr)\n+      : CompareData(func_aa, func_sa, func_as), unflipped_exec(unflipped_exec) {}\n };\n \n-Status FlippedBinaryExec(KernelContext* ctx, const ExecSpan& span, ExecResult* out) {\n+Status FlippedCompare(KernelContext* ctx, const ExecSpan& span, ExecResult* out) {\n   const auto kernel = static_cast<const ScalarKernel*>(ctx->kernel());\n-  DCHECK(kernel);\n   const auto kernel_data = static_cast<const FlippedData*>(kernel->data.get());\n-\n   ExecSpan flipped_span = span;\n   std::swap(flipped_span.values[0], flipped_span.values[1]);\n   return kernel_data->unflipped_exec(ctx, flipped_span, out);\n }\n \n-std::shared_ptr<ScalarFunction> MakeFlippedFunction(std::string name,\n-                                                    const ScalarFunction& func,\n-                                                    FunctionDoc doc) {\n+std::shared_ptr<ScalarFunction> MakeFlippedCompare(std::string name,\n+                                                   const ScalarFunction& func,\n+                                                   FunctionDoc doc) {\n   auto flipped_func =\n       std::make_shared<CompareFunction>(name, Arity::Binary(), std::move(doc));\n   for (const ScalarKernel* kernel : func.kernels()) {\n     ScalarKernel flipped_kernel = *kernel;\n-    flipped_kernel.data = std::make_shared<FlippedData>(kernel->exec);\n-    flipped_kernel.exec = FlippedBinaryExec;\n+    if (kernel->data) {\n+      auto compare_data = static_cast<const CompareData*>(kernel->data.get());\n\nReview Comment:\n   `checked_cast` perhaps?\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_compare.cc:\n##########\n@@ -171,22 +343,28 @@ struct CompareTimestamps\n           \"Cannot compare timestamp with timezone to timestamp without timezone, got: \",\n           lhs, \" and \", rhs);\n     }\n-    return Base::Exec(ctx, batch, out);\n+    return CompareKernel<Int64Type>::Exec(ctx, batch, out);\n   }\n };\n \n template <typename Op>\n-void AddIntegerCompare(const std::shared_ptr<DataType>& ty, ScalarFunction* func) {\n-  auto exec =\n-      GeneratePhysicalInteger<applicator::ScalarBinaryEqualTypes, BooleanType, Op>(*ty);\n-  DCHECK_OK(func->AddKernel({ty, ty}, boolean(), std::move(exec)));\n+ScalarKernel GetCompareKernel(InputType ty, Type::type compare_type,\n+                              ArrayKernelExec exec) {\n+  ScalarKernel kernel;\n+  kernel.signature = KernelSignature::Make({ty, ty}, boolean());\n+  BinaryKernel func_aa = GetBinaryKernel<ComparePrimitive, Op>(compare_type);\n+  BinaryKernel func_sa = GetBinaryKernel<ComparePrimitiveSA, Op>(compare_type);\n+  BinaryKernel func_as = GetBinaryKernel<ComparePrimitiveAS, Op>(compare_type);\n+  kernel.data = std::make_shared<CompareData>(func_aa, func_sa, func_as);\n\nReview Comment:\n   Nit, but precomputing these seems a bit futile since `CompareKernel` has the right physical type and so deducing the right `ComparePrimitive` functions there should be trivial.\n\n\n\n",
                    "created": "2022-07-20T13:16:45.080+0000",
                    "updated": "2022-07-20T13:16:45.080+0000",
                    "started": "2022-07-20T13:16:45.080+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793232",
                    "issueId": "13472374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472374/worklog/793235",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on PR #13654:\nURL: https://github.com/apache/arrow/pull/13654#issuecomment-1190278903\n\n   Some more insight on symbols that got bigger/smaller in this change using tools/binary_symbol_explore.py:\r\n   \r\n   https://gist.github.com/wesm/98eb3f28ce2a6ea134fa0f6d96208ce4\r\n   \r\n   I don't really get why the applicator templates were generating ~40KB of code for single instantiations (like uint64 <= uint64), but probably our approach (so much for \"zero cost abstractions\") for generalizing to abstract between writing to an array versus packing a bitmap is causing too much code to be generated. \n\n\n",
                    "created": "2022-07-20T13:20:18.049+0000",
                    "updated": "2022-07-20T13:20:18.049+0000",
                    "started": "2022-07-20T13:20:18.048+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793235",
                    "issueId": "13472374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472374/worklog/793238",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13654:\nURL: https://github.com/apache/arrow/pull/13654#issuecomment-1190282677\n\n   Benchmark results on my work machine (a AMD Zen 2 CPU):\r\n   ```\r\n   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n   Non-regressions: (46)\r\n   -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n                                     benchmark           baseline          contender  change %                                                                                                                                                                                                        counters\r\n               GreaterArrayScalarInt64/32768/0   1.519G items/sec   2.887G items/sec    89.993             {'family_index': 1, 'per_family_instance_index': 5, 'run_name': 'GreaterArrayScalarInt64/32768/0', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 32357, 'null_percent': 0.0}\r\n           GreaterArrayScalarInt64/32768/10000   1.493G items/sec   2.797G items/sec    87.275        {'family_index': 1, 'per_family_instance_index': 0, 'run_name': 'GreaterArrayScalarInt64/32768/10000', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 31872, 'null_percent': 0.01}\r\n               GreaterArrayScalarInt64/32768/2   1.495G items/sec   2.783G items/sec    86.147            {'family_index': 1, 'per_family_instance_index': 3, 'run_name': 'GreaterArrayScalarInt64/32768/2', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 31886, 'null_percent': 50.0}\r\n              GreaterArrayScalarInt64/32768/10   1.496G items/sec   2.755G items/sec    84.135           {'family_index': 1, 'per_family_instance_index': 2, 'run_name': 'GreaterArrayScalarInt64/32768/10', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 31902, 'null_percent': 10.0}\r\n             GreaterArrayScalarInt64/32768/100   1.496G items/sec   2.730G items/sec    82.564           {'family_index': 1, 'per_family_instance_index': 1, 'run_name': 'GreaterArrayScalarInt64/32768/100', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 31822, 'null_percent': 1.0}\r\n               GreaterArrayScalarInt64/32768/1   1.496G items/sec   2.726G items/sec    82.191           {'family_index': 1, 'per_family_instance_index': 4, 'run_name': 'GreaterArrayScalarInt64/32768/1', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 31870, 'null_percent': 100.0}\r\n                GreaterArrayArrayInt64/32768/0   1.459G items/sec   2.575G items/sec    76.419              {'family_index': 0, 'per_family_instance_index': 5, 'run_name': 'GreaterArrayArrayInt64/32768/0', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 31129, 'null_percent': 0.0}\r\n              GreaterArrayArrayInt64/32768/100   1.439G items/sec   2.494G items/sec    73.355            {'family_index': 0, 'per_family_instance_index': 1, 'run_name': 'GreaterArrayArrayInt64/32768/100', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 30590, 'null_percent': 1.0}\r\n            GreaterArrayArrayInt64/32768/10000   1.438G items/sec   2.489G items/sec    73.105         {'family_index': 0, 'per_family_instance_index': 0, 'run_name': 'GreaterArrayArrayInt64/32768/10000', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 30442, 'null_percent': 0.01}\r\n                GreaterArrayArrayInt64/32768/2   1.437G items/sec   2.487G items/sec    73.037             {'family_index': 0, 'per_family_instance_index': 3, 'run_name': 'GreaterArrayArrayInt64/32768/2', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 30627, 'null_percent': 50.0}\r\n               GreaterArrayArrayInt64/32768/10   1.435G items/sec   2.473G items/sec    72.307            {'family_index': 0, 'per_family_instance_index': 2, 'run_name': 'GreaterArrayArrayInt64/32768/10', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 30633, 'null_percent': 10.0}\r\n                GreaterArrayArrayInt64/32768/1   1.436G items/sec   2.453G items/sec    70.814            {'family_index': 0, 'per_family_instance_index': 4, 'run_name': 'GreaterArrayArrayInt64/32768/1', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 30647, 'null_percent': 100.0}\r\n    MaxElementWiseArrayScalarInt64/32768/10000 951.172M items/sec   1.091G items/sec    14.717 {'family_index': 5, 'per_family_instance_index': 0, 'run_name': 'MaxElementWiseArrayScalarInt64/32768/10000', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 20443, 'null_percent': 0.01}\r\n         MaxElementWiseArrayArrayInt64/32768/0 628.126M items/sec 716.152M items/sec    14.014       {'family_index': 4, 'per_family_instance_index': 5, 'run_name': 'MaxElementWiseArrayArrayInt64/32768/0', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 13342, 'null_percent': 0.0}\r\n        MaxElementWiseArrayScalarInt64/32768/0   1.129G items/sec   1.277G items/sec    13.103      {'family_index': 5, 'per_family_instance_index': 5, 'run_name': 'MaxElementWiseArrayScalarInt64/32768/0', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 23890, 'null_percent': 0.0}\r\n      MaxElementWiseArrayScalarInt64/32768/100 797.989M items/sec 861.147M items/sec     7.915    {'family_index': 5, 'per_family_instance_index': 1, 'run_name': 'MaxElementWiseArrayScalarInt64/32768/100', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 16979, 'null_percent': 1.0}\r\n        MaxElementWiseArrayScalarInt64/32768/1   4.785G items/sec   5.135G items/sec     7.310   {'family_index': 5, 'per_family_instance_index': 4, 'run_name': 'MaxElementWiseArrayScalarInt64/32768/1', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 102277, 'null_percent': 100.0}\r\n         MaxElementWiseArrayArrayInt64/32768/1   4.046G items/sec   4.326G items/sec     6.923     {'family_index': 4, 'per_family_instance_index': 4, 'run_name': 'MaxElementWiseArrayArrayInt64/32768/1', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 86088, 'null_percent': 100.0}\r\n        MaxElementWiseArrayScalarInt64/32768/2 230.920M items/sec 246.430M items/sec     6.717      {'family_index': 5, 'per_family_instance_index': 3, 'run_name': 'MaxElementWiseArrayScalarInt64/32768/2', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 4903, 'null_percent': 50.0}\r\n         MaxElementWiseArrayArrayInt64/32768/2 115.210M items/sec 122.406M items/sec     6.247       {'family_index': 4, 'per_family_instance_index': 3, 'run_name': 'MaxElementWiseArrayArrayInt64/32768/2', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 2454, 'null_percent': 50.0}\r\n               GreaterArrayArrayString/32768/0 123.254M items/sec 126.920M items/sec     2.974              {'family_index': 2, 'per_family_instance_index': 5, 'run_name': 'GreaterArrayArrayString/32768/0', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 2622, 'null_percent': 0.0}\r\n     MaxElementWiseArrayArrayInt64/32768/10000 455.482M items/sec 468.196M items/sec     2.791   {'family_index': 4, 'per_family_instance_index': 0, 'run_name': 'MaxElementWiseArrayArrayInt64/32768/10000', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 9743, 'null_percent': 0.01}\r\n       MaxElementWiseArrayArrayInt64/32768/100 350.201M items/sec 358.919M items/sec     2.490      {'family_index': 4, 'per_family_instance_index': 1, 'run_name': 'MaxElementWiseArrayArrayInt64/32768/100', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 7471, 'null_percent': 1.0}\r\n          GreaterArrayScalarString/32768/10000 780.553M items/sec 799.631M items/sec     2.444       {'family_index': 3, 'per_family_instance_index': 0, 'run_name': 'GreaterArrayScalarString/32768/10000', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 16635, 'null_percent': 0.01}\r\n              GreaterArrayScalarString/32768/0 786.099M items/sec 804.830M items/sec     2.383            {'family_index': 3, 'per_family_instance_index': 5, 'run_name': 'GreaterArrayScalarString/32768/0', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 16776, 'null_percent': 0.0}\r\n              GreaterArrayScalarString/32768/1 779.519M items/sec 797.986M items/sec     2.369          {'family_index': 3, 'per_family_instance_index': 4, 'run_name': 'GreaterArrayScalarString/32768/1', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 16620, 'null_percent': 100.0}\r\n             GreaterArrayScalarString/32768/10 780.164M items/sec 798.110M items/sec     2.300          {'family_index': 3, 'per_family_instance_index': 2, 'run_name': 'GreaterArrayScalarString/32768/10', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 16631, 'null_percent': 10.0}\r\n        MaxElementWiseArrayArrayInt64/32768/10 231.824M items/sec 236.831M items/sec     2.160      {'family_index': 4, 'per_family_instance_index': 2, 'run_name': 'MaxElementWiseArrayArrayInt64/32768/10', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 4934, 'null_percent': 10.0}\r\n              GreaterArrayScalarString/32768/2 780.730M items/sec 796.308M items/sec     1.995           {'family_index': 3, 'per_family_instance_index': 3, 'run_name': 'GreaterArrayScalarString/32768/2', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 16624, 'null_percent': 50.0}\r\n            GreaterArrayScalarString/32768/100 780.414M items/sec 795.846M items/sec     1.977          {'family_index': 3, 'per_family_instance_index': 1, 'run_name': 'GreaterArrayScalarString/32768/100', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 16636, 'null_percent': 1.0}\r\n       MaxElementWiseArrayScalarInt64/32768/10 603.255M items/sec 612.917M items/sec     1.602    {'family_index': 5, 'per_family_instance_index': 2, 'run_name': 'MaxElementWiseArrayScalarInt64/32768/10', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 12784, 'null_percent': 10.0}\r\n    MaxElementWiseArrayArrayString/32768/10000  41.111M items/sec  41.547M items/sec     1.061   {'family_index': 6, 'per_family_instance_index': 0, 'run_name': 'MaxElementWiseArrayArrayString/32768/10000', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 873, 'null_percent': 0.01}\r\n      MaxElementWiseArrayArrayString/32768/100  41.341M items/sec  41.639M items/sec     0.721      {'family_index': 6, 'per_family_instance_index': 1, 'run_name': 'MaxElementWiseArrayArrayString/32768/100', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 860, 'null_percent': 1.0}\r\n       MaxElementWiseArrayScalarString/32768/1  90.721M items/sec  90.225M items/sec    -0.547    {'family_index': 7, 'per_family_instance_index': 4, 'run_name': 'MaxElementWiseArrayScalarString/32768/1', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 1935, 'null_percent': 100.0}\r\n               GreaterArrayArrayString/32768/1 653.076M items/sec 648.121M items/sec    -0.759           {'family_index': 2, 'per_family_instance_index': 4, 'run_name': 'GreaterArrayArrayString/32768/1', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 13918, 'null_percent': 100.0}\r\n             GreaterArrayArrayString/32768/100 122.658M items/sec 121.365M items/sec    -1.055            {'family_index': 2, 'per_family_instance_index': 1, 'run_name': 'GreaterArrayArrayString/32768/100', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 2629, 'null_percent': 1.0}\r\n        MaxElementWiseArrayArrayString/32768/2  42.217M items/sec  41.698M items/sec    -1.230       {'family_index': 6, 'per_family_instance_index': 3, 'run_name': 'MaxElementWiseArrayArrayString/32768/2', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 887, 'null_percent': 50.0}\r\n              GreaterArrayArrayString/32768/10 121.931M items/sec 120.381M items/sec    -1.271            {'family_index': 2, 'per_family_instance_index': 2, 'run_name': 'GreaterArrayArrayString/32768/10', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 2593, 'null_percent': 10.0}\r\n        MaxElementWiseArrayArrayString/32768/1 183.437M items/sec 181.061M items/sec    -1.295     {'family_index': 6, 'per_family_instance_index': 4, 'run_name': 'MaxElementWiseArrayArrayString/32768/1', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 3919, 'null_percent': 100.0}\r\n           GreaterArrayArrayString/32768/10000 123.361M items/sec 121.560M items/sec    -1.460         {'family_index': 2, 'per_family_instance_index': 0, 'run_name': 'GreaterArrayArrayString/32768/10000', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 2631, 'null_percent': 0.01}\r\n               GreaterArrayArrayString/32768/2 208.825M items/sec 205.202M items/sec    -1.735             {'family_index': 2, 'per_family_instance_index': 3, 'run_name': 'GreaterArrayArrayString/32768/2', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 4440, 'null_percent': 50.0}\r\n       MaxElementWiseArrayArrayString/32768/10  41.613M items/sec  40.830M items/sec    -1.881      {'family_index': 6, 'per_family_instance_index': 2, 'run_name': 'MaxElementWiseArrayArrayString/32768/10', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 881, 'null_percent': 10.0}\r\n        MaxElementWiseArrayArrayString/32768/0  42.734M items/sec  41.408M items/sec    -3.104        {'family_index': 6, 'per_family_instance_index': 5, 'run_name': 'MaxElementWiseArrayArrayString/32768/0', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 901, 'null_percent': 0.0}\r\n   MaxElementWiseArrayScalarString/32768/10000  55.931M items/sec  53.645M items/sec    -4.088 {'family_index': 7, 'per_family_instance_index': 0, 'run_name': 'MaxElementWiseArrayScalarString/32768/10000', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 1185, 'null_percent': 0.01}\r\n     MaxElementWiseArrayScalarString/32768/100  55.952M items/sec  53.643M items/sec    -4.126    {'family_index': 7, 'per_family_instance_index': 1, 'run_name': 'MaxElementWiseArrayScalarString/32768/100', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 1171, 'null_percent': 1.0}\r\n      MaxElementWiseArrayScalarString/32768/10  55.265M items/sec  52.728M items/sec    -4.592    {'family_index': 7, 'per_family_instance_index': 2, 'run_name': 'MaxElementWiseArrayScalarString/32768/10', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 1171, 'null_percent': 10.0}\r\n   \r\n   -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n   Regressions: (2)\r\n   -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n                                 benchmark          baseline         contender  change %                                                                                                                                                                                                    counters\r\n   MaxElementWiseArrayScalarString/32768/2 53.362M items/sec 50.664M items/sec    -5.055 {'family_index': 7, 'per_family_instance_index': 3, 'run_name': 'MaxElementWiseArrayScalarString/32768/2', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 1133, 'null_percent': 50.0}\r\n   MaxElementWiseArrayScalarString/32768/0 57.910M items/sec 53.893M items/sec    -6.937  {'family_index': 7, 'per_family_instance_index': 5, 'run_name': 'MaxElementWiseArrayScalarString/32768/0', 'repetitions': 1, 'repetition_index': 0, 'threads': 1, 'iterations': 1208, 'null_percent': 0.0}\r\n   ```\n\n\n",
                    "created": "2022-07-20T13:23:40.849+0000",
                    "updated": "2022-07-20T13:23:40.849+0000",
                    "started": "2022-07-20T13:23:40.849+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793238",
                    "issueId": "13472374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472374/worklog/793239",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13654:\nURL: https://github.com/apache/arrow/pull/13654#issuecomment-1190286473\n\n   Object file size:\r\n   * before:\r\n   ```\r\n   $ size build-release/src/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/scalar_compare.cc.o\r\n      text\t   data\t    bss\t    dec\t    hex\tfilename\r\n    458472\t   6200\t   1120\t 465792\t  71b80\tbuild-release/src/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/scalar_compare.cc.o\r\n   ```\r\n   * after:\r\n   ```\r\n   $ size build-release/src/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/scalar_compare.cc.o\r\n      text\t   data\t    bss\t    dec\t    hex\tfilename\r\n    412088\t   6336\t   1120\t 419544\t  666d8\tbuild-release/src/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/scalar_compare.cc.o\r\n   ```\r\n   \n\n\n",
                    "created": "2022-07-20T13:26:58.275+0000",
                    "updated": "2022-07-20T13:26:58.275+0000",
                    "started": "2022-07-20T13:26:58.275+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793239",
                    "issueId": "13472374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472374/worklog/793240",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on code in PR #13654:\nURL: https://github.com/apache/arrow/pull/13654#discussion_r925607156\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_compare.cc:\n##########\n@@ -158,11 +158,183 @@ struct Maximum {\n \n // Implement Less, LessEqual by flipping arguments to Greater, GreaterEqual\n \n-template <typename OutType, typename ArgType, typename Op>\n-struct CompareTimestamps\n-    : public applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op> {\n-  using Base = applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op>;\n+template <int batch_size>\n+void PackBits(const int* values, uint8_t* out) {\n+  for (int i = 0; i < batch_size / 8; ++i) {\n+    *out++ = (values[0] | values[1] << 1 | values[2] << 2 | values[3] << 3 |\n+              values[4] << 4 | values[5] << 5 | values[6] << 6 | values[7] << 7);\n+    values += 8;\n+  }\n+}\n+\n+template <typename T, typename Op>\n+struct ComparePrimitive {\n+  static void Exec(const void* left_values_void, const void* right_values_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T* left_values = reinterpret_cast<const T*>(left_values_void);\n+    const T* right_values = reinterpret_cast<const T*>(right_values_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] = Op::template Call<bool, T, T>(nullptr, *left_values++,\n+                                                       *right_values++, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(out_bitmap, bit_index++,\n+                         Op::template Call<bool, T, T>(nullptr, *left_values++,\n+                                                       *right_values++, nullptr));\n+    }\n+  }\n+};\n+\n+template <typename T, typename Op>\n+struct ComparePrimitiveAS {\n+  static void Exec(const void* left_values_void, const void* right_value_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T* left_values = reinterpret_cast<const T*>(left_values_void);\n+    const T right_value = *reinterpret_cast<const T*>(right_value_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] =\n+            Op::template Call<bool, T, T>(nullptr, *left_values++, right_value, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(\n+          out_bitmap, bit_index++,\n+          Op::template Call<bool, T, T>(nullptr, *left_values++, right_value, nullptr));\n+    }\n+  }\n+};\n+\n+template <typename T, typename Op>\n+struct ComparePrimitiveSA {\n+  static void Exec(const void* left_value_void, const void* right_values_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T left_value = *reinterpret_cast<const T*>(left_value_void);\n+    const T* right_values = reinterpret_cast<const T*>(right_values_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] =\n+            Op::template Call<bool, T, T>(nullptr, left_value, *right_values++, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(\n+          out_bitmap, bit_index++,\n+          Op::template Call<bool, T, T>(nullptr, left_value, *right_values++, nullptr));\n+    }\n+  }\n+};\n+\n+using BinaryKernel = void (*)(const void*, const void*, int64_t, void*);\n+\n+struct CompareData : public KernelState {\n+  BinaryKernel func_aa;\n+  BinaryKernel func_sa;\n+  BinaryKernel func_as;\n+  CompareData(BinaryKernel func_aa, BinaryKernel func_sa, BinaryKernel func_as)\n+      : func_aa(func_aa), func_sa(func_sa), func_as(func_as) {}\n+};\n+\n+template <template <typename...> class Generator, typename Op>\n+BinaryKernel GetBinaryKernel(Type::type type) {\n+  switch (type) {\n+    case Type::INT8:\n+      return Generator<int8_t, Op>::Exec;\n+    case Type::INT16:\n+      return Generator<int16_t, Op>::Exec;\n+    case Type::INT32:\n+    case Type::DATE32:\n+      return Generator<int32_t, Op>::Exec;\n+    case Type::INT64:\n+    case Type::DURATION:\n+    case Type::TIMESTAMP:\n+    case Type::DATE64:\n+      return Generator<int64_t, Op>::Exec;\n+    case Type::UINT8:\n+      return Generator<uint8_t, Op>::Exec;\n+    case Type::UINT16:\n+      return Generator<uint16_t, Op>::Exec;\n+    case Type::UINT32:\n+      return Generator<uint32_t, Op>::Exec;\n+    case Type::UINT64:\n+      return Generator<uint64_t, Op>::Exec;\n+    case Type::FLOAT:\n+      return Generator<float, Op>::Exec;\n+    case Type::DOUBLE:\n+      return Generator<double, Op>::Exec;\n+    default:\n+      return nullptr;\n+  }\n+}\n+\n+template <typename Type>\n+struct CompareKernel {\n+  using T = typename Type::c_type;\n+\n+  static Status Exec(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+    const auto kernel = static_cast<const ScalarKernel*>(ctx->kernel());\n+    DCHECK(kernel);\n+    const auto kernel_data = static_cast<const CompareData*>(kernel->data.get());\n+\n+    ArraySpan* out_arr = out->array_span();\n+\n+    // TODO: implement path for offset not multiple of 8\n+    const bool out_is_byte_aligned = out_arr->offset % 8 == 0;\n\nReview Comment:\n   These kernels can write into sliced outputs (chunksize not a multiple of 8) ",
                    "created": "2022-07-20T13:28:01.578+0000",
                    "updated": "2022-07-20T13:28:01.578+0000",
                    "started": "2022-07-20T13:28:01.578+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793240",
                    "issueId": "13472374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472374/worklog/793241",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13654:\nURL: https://github.com/apache/arrow/pull/13654#issuecomment-1190289269\n\n   > [](https://gist.github.com/wesm/98eb3f28ce2a6ea134fa0f6d96208ce4)\r\n   > \r\n   > I don't really get why the applicator templates were generating ~40KB of code for single instantiations (like uint64 <= uint64), but probably our approach (so much for \"zero cost abstractions\") for generalizing to abstract between writing to an array versus packing a bitmap is causing too much code to be generated.\r\n   \r\n   That sounds quite outlandish :-o. Perhaps you can try disassembling one of those symbols to see if there's anything particularly fishy?\n\n\n",
                    "created": "2022-07-20T13:29:18.559+0000",
                    "updated": "2022-07-20T13:29:18.559+0000",
                    "started": "2022-07-20T13:29:18.559+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793241",
                    "issueId": "13472374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472374/worklog/793244",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13654:\nURL: https://github.com/apache/arrow/pull/13654#discussion_r925613550\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_compare.cc:\n##########\n@@ -158,11 +158,183 @@ struct Maximum {\n \n // Implement Less, LessEqual by flipping arguments to Greater, GreaterEqual\n \n-template <typename OutType, typename ArgType, typename Op>\n-struct CompareTimestamps\n-    : public applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op> {\n-  using Base = applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op>;\n+template <int batch_size>\n+void PackBits(const int* values, uint8_t* out) {\n+  for (int i = 0; i < batch_size / 8; ++i) {\n+    *out++ = (values[0] | values[1] << 1 | values[2] << 2 | values[3] << 3 |\n+              values[4] << 4 | values[5] << 5 | values[6] << 6 | values[7] << 7);\n+    values += 8;\n+  }\n+}\n+\n+template <typename T, typename Op>\n+struct ComparePrimitive {\n+  static void Exec(const void* left_values_void, const void* right_values_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T* left_values = reinterpret_cast<const T*>(left_values_void);\n+    const T* right_values = reinterpret_cast<const T*>(right_values_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] = Op::template Call<bool, T, T>(nullptr, *left_values++,\n+                                                       *right_values++, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(out_bitmap, bit_index++,\n+                         Op::template Call<bool, T, T>(nullptr, *left_values++,\n+                                                       *right_values++, nullptr));\n+    }\n+  }\n+};\n+\n+template <typename T, typename Op>\n+struct ComparePrimitiveAS {\n+  static void Exec(const void* left_values_void, const void* right_value_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T* left_values = reinterpret_cast<const T*>(left_values_void);\n+    const T right_value = *reinterpret_cast<const T*>(right_value_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] =\n+            Op::template Call<bool, T, T>(nullptr, *left_values++, right_value, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(\n+          out_bitmap, bit_index++,\n+          Op::template Call<bool, T, T>(nullptr, *left_values++, right_value, nullptr));\n+    }\n+  }\n+};\n+\n+template <typename T, typename Op>\n+struct ComparePrimitiveSA {\n+  static void Exec(const void* left_value_void, const void* right_values_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T left_value = *reinterpret_cast<const T*>(left_value_void);\n+    const T* right_values = reinterpret_cast<const T*>(right_values_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] =\n+            Op::template Call<bool, T, T>(nullptr, left_value, *right_values++, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(\n+          out_bitmap, bit_index++,\n+          Op::template Call<bool, T, T>(nullptr, left_value, *right_values++, nullptr));\n+    }\n+  }\n+};\n+\n+using BinaryKernel = void (*)(const void*, const void*, int64_t, void*);\n+\n+struct CompareData : public KernelState {\n+  BinaryKernel func_aa;\n+  BinaryKernel func_sa;\n+  BinaryKernel func_as;\n+  CompareData(BinaryKernel func_aa, BinaryKernel func_sa, BinaryKernel func_as)\n+      : func_aa(func_aa), func_sa(func_sa), func_as(func_as) {}\n+};\n+\n+template <template <typename...> class Generator, typename Op>\n+BinaryKernel GetBinaryKernel(Type::type type) {\n+  switch (type) {\n+    case Type::INT8:\n+      return Generator<int8_t, Op>::Exec;\n+    case Type::INT16:\n+      return Generator<int16_t, Op>::Exec;\n+    case Type::INT32:\n+    case Type::DATE32:\n+      return Generator<int32_t, Op>::Exec;\n+    case Type::INT64:\n+    case Type::DURATION:\n+    case Type::TIMESTAMP:\n+    case Type::DATE64:\n+      return Generator<int64_t, Op>::Exec;\n+    case Type::UINT8:\n+      return Generator<uint8_t, Op>::Exec;\n+    case Type::UINT16:\n+      return Generator<uint16_t, Op>::Exec;\n+    case Type::UINT32:\n+      return Generator<uint32_t, Op>::Exec;\n+    case Type::UINT64:\n+      return Generator<uint64_t, Op>::Exec;\n+    case Type::FLOAT:\n+      return Generator<float, Op>::Exec;\n+    case Type::DOUBLE:\n+      return Generator<double, Op>::Exec;\n+    default:\n+      return nullptr;\n+  }\n+}\n+\n+template <typename Type>\n+struct CompareKernel {\n+  using T = typename Type::c_type;\n+\n+  static Status Exec(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+    const auto kernel = static_cast<const ScalarKernel*>(ctx->kernel());\n+    DCHECK(kernel);\n+    const auto kernel_data = static_cast<const CompareData*>(kernel->data.get());\n+\n+    ArraySpan* out_arr = out->array_span();\n+\n+    // TODO: implement path for offset not multiple of 8\n+    const bool out_is_byte_aligned = out_arr->offset % 8 == 0;\n\nReview Comment:\n   Perhaps the \"writing into sliced outputs\" part should simply guarantee that the sliced offset is always a multiple of 8?\n\n\n\n",
                    "created": "2022-07-20T13:33:27.817+0000",
                    "updated": "2022-07-20T13:33:27.817+0000",
                    "started": "2022-07-20T13:33:27.816+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793244",
                    "issueId": "13472374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472374/worklog/793248",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on code in PR #13654:\nURL: https://github.com/apache/arrow/pull/13654#discussion_r925617294\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_compare.cc:\n##########\n@@ -171,22 +343,28 @@ struct CompareTimestamps\n           \"Cannot compare timestamp with timezone to timestamp without timezone, got: \",\n           lhs, \" and \", rhs);\n     }\n-    return Base::Exec(ctx, batch, out);\n+    return CompareKernel<Int64Type>::Exec(ctx, batch, out);\n   }\n };\n \n template <typename Op>\n-void AddIntegerCompare(const std::shared_ptr<DataType>& ty, ScalarFunction* func) {\n-  auto exec =\n-      GeneratePhysicalInteger<applicator::ScalarBinaryEqualTypes, BooleanType, Op>(*ty);\n-  DCHECK_OK(func->AddKernel({ty, ty}, boolean(), std::move(exec)));\n+ScalarKernel GetCompareKernel(InputType ty, Type::type compare_type,\n+                              ArrayKernelExec exec) {\n+  ScalarKernel kernel;\n+  kernel.signature = KernelSignature::Make({ty, ty}, boolean());\n+  BinaryKernel func_aa = GetBinaryKernel<ComparePrimitive, Op>(compare_type);\n+  BinaryKernel func_sa = GetBinaryKernel<ComparePrimitiveSA, Op>(compare_type);\n+  BinaryKernel func_as = GetBinaryKernel<ComparePrimitiveAS, Op>(compare_type);\n+  kernel.data = std::make_shared<CompareData>(func_aa, func_sa, func_as);\n\nReview Comment:\n   `CompareKernel<T>` doesn't have the operator template, though, so if we added operator as an additional template parameter, it would result in more code being generated. I did this so we could reuse the \"invoker\" template (and maybe probably move it to codegen_internal.h at some point)\n\n\n\n",
                    "created": "2022-07-20T13:37:02.720+0000",
                    "updated": "2022-07-20T13:37:02.720+0000",
                    "started": "2022-07-20T13:37:02.719+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793248",
                    "issueId": "13472374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472374/worklog/793253",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on code in PR #13654:\nURL: https://github.com/apache/arrow/pull/13654#discussion_r925623322\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_compare.cc:\n##########\n@@ -171,22 +343,28 @@ struct CompareTimestamps\n           \"Cannot compare timestamp with timezone to timestamp without timezone, got: \",\n           lhs, \" and \", rhs);\n     }\n-    return Base::Exec(ctx, batch, out);\n+    return CompareKernel<Int64Type>::Exec(ctx, batch, out);\n   }\n };\n \n template <typename Op>\n-void AddIntegerCompare(const std::shared_ptr<DataType>& ty, ScalarFunction* func) {\n-  auto exec =\n-      GeneratePhysicalInteger<applicator::ScalarBinaryEqualTypes, BooleanType, Op>(*ty);\n-  DCHECK_OK(func->AddKernel({ty, ty}, boolean(), std::move(exec)));\n+ScalarKernel GetCompareKernel(InputType ty, Type::type compare_type,\n+                              ArrayKernelExec exec) {\n+  ScalarKernel kernel;\n+  kernel.signature = KernelSignature::Make({ty, ty}, boolean());\n+  BinaryKernel func_aa = GetBinaryKernel<ComparePrimitive, Op>(compare_type);\n+  BinaryKernel func_sa = GetBinaryKernel<ComparePrimitiveSA, Op>(compare_type);\n+  BinaryKernel func_as = GetBinaryKernel<ComparePrimitiveAS, Op>(compare_type);\n+  kernel.data = std::make_shared<CompareData>(func_aa, func_sa, func_as);\n+  kernel.exec = exec;\n+  return kernel;\n }\n \n-template <typename InType, typename Op>\n-void AddGenericCompare(const std::shared_ptr<DataType>& ty, ScalarFunction* func) {\n-  DCHECK_OK(\n-      func->AddKernel({ty, ty}, boolean(),\n-                      applicator::ScalarBinaryEqualTypes<BooleanType, InType, Op>::Exec));\n+template <typename Op>\n+void AddPrimitiveCompare(const std::shared_ptr<DataType>& ty, ScalarFunction* func) {\n+  ArrayKernelExec exec = GeneratePhysicalNumeric<CompareKernel>(ty);\n+  ScalarKernel kernel = GetCompareKernel<Op>(ty, ty->id(), exec);\n\nReview Comment:\n   They have different return types. I'll generalize in codegen_internal.h\n\n\n\n",
                    "created": "2022-07-20T13:42:23.662+0000",
                    "updated": "2022-07-20T13:42:23.662+0000",
                    "started": "2022-07-20T13:42:23.662+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793253",
                    "issueId": "13472374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472374/worklog/793255",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on code in PR #13654:\nURL: https://github.com/apache/arrow/pull/13654#discussion_r925632878\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_compare.cc:\n##########\n@@ -158,11 +158,183 @@ struct Maximum {\n \n // Implement Less, LessEqual by flipping arguments to Greater, GreaterEqual\n \n-template <typename OutType, typename ArgType, typename Op>\n-struct CompareTimestamps\n-    : public applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op> {\n-  using Base = applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op>;\n+template <int batch_size>\n+void PackBits(const int* values, uint8_t* out) {\n+  for (int i = 0; i < batch_size / 8; ++i) {\n+    *out++ = (values[0] | values[1] << 1 | values[2] << 2 | values[3] << 3 |\n+              values[4] << 4 | values[5] << 5 | values[6] << 6 | values[7] << 7);\n+    values += 8;\n+  }\n+}\n+\n+template <typename T, typename Op>\n+struct ComparePrimitive {\n+  static void Exec(const void* left_values_void, const void* right_values_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T* left_values = reinterpret_cast<const T*>(left_values_void);\n+    const T* right_values = reinterpret_cast<const T*>(right_values_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] = Op::template Call<bool, T, T>(nullptr, *left_values++,\n+                                                       *right_values++, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(out_bitmap, bit_index++,\n+                         Op::template Call<bool, T, T>(nullptr, *left_values++,\n+                                                       *right_values++, nullptr));\n+    }\n+  }\n+};\n+\n+template <typename T, typename Op>\n+struct ComparePrimitiveAS {\n+  static void Exec(const void* left_values_void, const void* right_value_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T* left_values = reinterpret_cast<const T*>(left_values_void);\n+    const T right_value = *reinterpret_cast<const T*>(right_value_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] =\n+            Op::template Call<bool, T, T>(nullptr, *left_values++, right_value, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(\n+          out_bitmap, bit_index++,\n+          Op::template Call<bool, T, T>(nullptr, *left_values++, right_value, nullptr));\n+    }\n+  }\n+};\n+\n+template <typename T, typename Op>\n+struct ComparePrimitiveSA {\n+  static void Exec(const void* left_value_void, const void* right_values_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T left_value = *reinterpret_cast<const T*>(left_value_void);\n+    const T* right_values = reinterpret_cast<const T*>(right_values_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] =\n+            Op::template Call<bool, T, T>(nullptr, left_value, *right_values++, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(\n+          out_bitmap, bit_index++,\n+          Op::template Call<bool, T, T>(nullptr, left_value, *right_values++, nullptr));\n+    }\n+  }\n+};\n+\n+using BinaryKernel = void (*)(const void*, const void*, int64_t, void*);\n+\n+struct CompareData : public KernelState {\n+  BinaryKernel func_aa;\n+  BinaryKernel func_sa;\n+  BinaryKernel func_as;\n+  CompareData(BinaryKernel func_aa, BinaryKernel func_sa, BinaryKernel func_as)\n+      : func_aa(func_aa), func_sa(func_sa), func_as(func_as) {}\n\nReview Comment:\n   I tried a few things and couldn't figure out how to do this with a braced initializer list\n\n\n\n",
                    "created": "2022-07-20T13:50:29.326+0000",
                    "updated": "2022-07-20T13:50:29.326+0000",
                    "started": "2022-07-20T13:50:29.325+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793255",
                    "issueId": "13472374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472374/worklog/793258",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13654:\nURL: https://github.com/apache/arrow/pull/13654#discussion_r925636155\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_compare.cc:\n##########\n@@ -171,22 +343,28 @@ struct CompareTimestamps\n           \"Cannot compare timestamp with timezone to timestamp without timezone, got: \",\n           lhs, \" and \", rhs);\n     }\n-    return Base::Exec(ctx, batch, out);\n+    return CompareKernel<Int64Type>::Exec(ctx, batch, out);\n   }\n };\n \n template <typename Op>\n-void AddIntegerCompare(const std::shared_ptr<DataType>& ty, ScalarFunction* func) {\n-  auto exec =\n-      GeneratePhysicalInteger<applicator::ScalarBinaryEqualTypes, BooleanType, Op>(*ty);\n-  DCHECK_OK(func->AddKernel({ty, ty}, boolean(), std::move(exec)));\n+ScalarKernel GetCompareKernel(InputType ty, Type::type compare_type,\n+                              ArrayKernelExec exec) {\n+  ScalarKernel kernel;\n+  kernel.signature = KernelSignature::Make({ty, ty}, boolean());\n+  BinaryKernel func_aa = GetBinaryKernel<ComparePrimitive, Op>(compare_type);\n+  BinaryKernel func_sa = GetBinaryKernel<ComparePrimitiveSA, Op>(compare_type);\n+  BinaryKernel func_as = GetBinaryKernel<ComparePrimitiveAS, Op>(compare_type);\n+  kernel.data = std::make_shared<CompareData>(func_aa, func_sa, func_as);\n\nReview Comment:\n   You could perhaps turn the logic on its head and have `CompareKernel<T, Op>` derive from a base class `CompareKernelBase<T>`.\n\n\n\n",
                    "created": "2022-07-20T13:53:19.850+0000",
                    "updated": "2022-07-20T13:53:19.850+0000",
                    "started": "2022-07-20T13:53:19.850+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793258",
                    "issueId": "13472374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472374/worklog/793260",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13654:\nURL: https://github.com/apache/arrow/pull/13654#discussion_r925636592\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_compare.cc:\n##########\n@@ -158,11 +158,183 @@ struct Maximum {\n \n // Implement Less, LessEqual by flipping arguments to Greater, GreaterEqual\n \n-template <typename OutType, typename ArgType, typename Op>\n-struct CompareTimestamps\n-    : public applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op> {\n-  using Base = applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op>;\n+template <int batch_size>\n+void PackBits(const int* values, uint8_t* out) {\n+  for (int i = 0; i < batch_size / 8; ++i) {\n+    *out++ = (values[0] | values[1] << 1 | values[2] << 2 | values[3] << 3 |\n+              values[4] << 4 | values[5] << 5 | values[6] << 6 | values[7] << 7);\n+    values += 8;\n+  }\n+}\n+\n+template <typename T, typename Op>\n+struct ComparePrimitive {\n+  static void Exec(const void* left_values_void, const void* right_values_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T* left_values = reinterpret_cast<const T*>(left_values_void);\n+    const T* right_values = reinterpret_cast<const T*>(right_values_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] = Op::template Call<bool, T, T>(nullptr, *left_values++,\n+                                                       *right_values++, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(out_bitmap, bit_index++,\n+                         Op::template Call<bool, T, T>(nullptr, *left_values++,\n+                                                       *right_values++, nullptr));\n+    }\n+  }\n+};\n+\n+template <typename T, typename Op>\n+struct ComparePrimitiveAS {\n+  static void Exec(const void* left_values_void, const void* right_value_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T* left_values = reinterpret_cast<const T*>(left_values_void);\n+    const T right_value = *reinterpret_cast<const T*>(right_value_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] =\n+            Op::template Call<bool, T, T>(nullptr, *left_values++, right_value, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(\n+          out_bitmap, bit_index++,\n+          Op::template Call<bool, T, T>(nullptr, *left_values++, right_value, nullptr));\n+    }\n+  }\n+};\n+\n+template <typename T, typename Op>\n+struct ComparePrimitiveSA {\n+  static void Exec(const void* left_value_void, const void* right_values_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T left_value = *reinterpret_cast<const T*>(left_value_void);\n+    const T* right_values = reinterpret_cast<const T*>(right_values_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n+    for (int64_t j = 0; j < num_batches; ++j) {\n+      for (int i = 0; i < kBatchSize; ++i) {\n+        temp_output[i] =\n+            Op::template Call<bool, T, T>(nullptr, left_value, *right_values++, nullptr);\n+      }\n+      PackBits<kBatchSize>(temp_output, out_bitmap);\n+      out_bitmap += kBatchSize / 8;\n+    }\n+    int64_t bit_index = 0;\n+    for (int64_t j = kBatchSize * num_batches; j < length; ++j) {\n+      bit_util::SetBitTo(\n+          out_bitmap, bit_index++,\n+          Op::template Call<bool, T, T>(nullptr, left_value, *right_values++, nullptr));\n+    }\n+  }\n+};\n+\n+using BinaryKernel = void (*)(const void*, const void*, int64_t, void*);\n+\n+struct CompareData : public KernelState {\n+  BinaryKernel func_aa;\n+  BinaryKernel func_sa;\n+  BinaryKernel func_as;\n+  CompareData(BinaryKernel func_aa, BinaryKernel func_sa, BinaryKernel func_as)\n+      : func_aa(func_aa), func_sa(func_sa), func_as(func_as) {}\n\nReview Comment:\n   Ah, weird. This is unimportant anyway.\n\n\n\n",
                    "created": "2022-07-20T13:53:39.843+0000",
                    "updated": "2022-07-20T13:53:39.843+0000",
                    "started": "2022-07-20T13:53:39.842+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793260",
                    "issueId": "13472374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472374/worklog/793263",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on code in PR #13654:\nURL: https://github.com/apache/arrow/pull/13654#discussion_r925639444\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_compare.cc:\n##########\n@@ -158,11 +158,183 @@ struct Maximum {\n \n // Implement Less, LessEqual by flipping arguments to Greater, GreaterEqual\n \n-template <typename OutType, typename ArgType, typename Op>\n-struct CompareTimestamps\n-    : public applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op> {\n-  using Base = applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op>;\n+template <int batch_size>\n+void PackBits(const int* values, uint8_t* out) {\n+  for (int i = 0; i < batch_size / 8; ++i) {\n+    *out++ = (values[0] | values[1] << 1 | values[2] << 2 | values[3] << 3 |\n+              values[4] << 4 | values[5] << 5 | values[6] << 6 | values[7] << 7);\n+    values += 8;\n+  }\n+}\n+\n+template <typename T, typename Op>\n+struct ComparePrimitive {\n+  static void Exec(const void* left_values_void, const void* right_values_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T* left_values = reinterpret_cast<const T*>(left_values_void);\n+    const T* right_values = reinterpret_cast<const T*>(right_values_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n\nReview Comment:\n   I tried uint8_t but weirdly it made things slower. I changed to uint32_t which is the type used by util/bpacking.h\n\n\n\n",
                    "created": "2022-07-20T13:56:00.085+0000",
                    "updated": "2022-07-20T13:56:00.085+0000",
                    "started": "2022-07-20T13:56:00.084+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793263",
                    "issueId": "13472374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472374/worklog/793265",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13654:\nURL: https://github.com/apache/arrow/pull/13654#discussion_r925641236\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_compare.cc:\n##########\n@@ -158,11 +158,183 @@ struct Maximum {\n \n // Implement Less, LessEqual by flipping arguments to Greater, GreaterEqual\n \n-template <typename OutType, typename ArgType, typename Op>\n-struct CompareTimestamps\n-    : public applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op> {\n-  using Base = applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op>;\n+template <int batch_size>\n+void PackBits(const int* values, uint8_t* out) {\n+  for (int i = 0; i < batch_size / 8; ++i) {\n+    *out++ = (values[0] | values[1] << 1 | values[2] << 2 | values[3] << 3 |\n+              values[4] << 4 | values[5] << 5 | values[6] << 6 | values[7] << 7);\n+    values += 8;\n+  }\n+}\n+\n+template <typename T, typename Op>\n+struct ComparePrimitive {\n+  static void Exec(const void* left_values_void, const void* right_values_void,\n+                   int64_t length, void* out_bitmap_void) {\n+    const T* left_values = reinterpret_cast<const T*>(left_values_void);\n+    const T* right_values = reinterpret_cast<const T*>(right_values_void);\n+    uint8_t* out_bitmap = reinterpret_cast<uint8_t*>(out_bitmap_void);\n+    static constexpr int kBatchSize = 32;\n+    int64_t num_batches = length / kBatchSize;\n+    int temp_output[kBatchSize];\n\nReview Comment:\n   Ah, well. Compilers someone have trouble handling non-\"natural\" int sizes.\n\n\n\n",
                    "created": "2022-07-20T13:57:25.237+0000",
                    "updated": "2022-07-20T13:57:25.237+0000",
                    "started": "2022-07-20T13:57:25.237+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793265",
                    "issueId": "13472374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472374/worklog/793278",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13654:\nURL: https://github.com/apache/arrow/pull/13654#discussion_r925686662\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_compare.cc:\n##########\n@@ -158,11 +158,154 @@ struct Maximum {\n \n // Implement Less, LessEqual by flipping arguments to Greater, GreaterEqual\n \n-template <typename OutType, typename ArgType, typename Op>\n-struct CompareTimestamps\n-    : public applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op> {\n-  using Base = applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op>;\n+template <int batch_size>\n+void PackBits(const uint32_t* values, uint8_t* out) {\n+  for (int i = 0; i < batch_size / 8; ++i) {\n+    *out++ = (values[0] | values[1] << 1 | values[2] << 2 | values[3] << 3 |\n+              values[4] << 4 | values[5] << 5 | values[6] << 6 | values[7] << 7);\n+    values += 8;\n+  }\n+}\n\nReview Comment:\n   Maybe this could go in `arrow/util/bpacking.h` in case it is needed elsewhere in the future?\n\n\n\n",
                    "created": "2022-07-20T14:35:35.256+0000",
                    "updated": "2022-07-20T14:35:35.256+0000",
                    "started": "2022-07-20T14:35:35.255+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793278",
                    "issueId": "13472374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472374/worklog/793350",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on code in PR #13654:\nURL: https://github.com/apache/arrow/pull/13654#discussion_r925849775\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_compare.cc:\n##########\n@@ -158,11 +158,154 @@ struct Maximum {\n \n // Implement Less, LessEqual by flipping arguments to Greater, GreaterEqual\n \n-template <typename OutType, typename ArgType, typename Op>\n-struct CompareTimestamps\n-    : public applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op> {\n-  using Base = applicator::ScalarBinaryEqualTypes<OutType, ArgType, Op>;\n+template <int batch_size>\n+void PackBits(const uint32_t* values, uint8_t* out) {\n+  for (int i = 0; i < batch_size / 8; ++i) {\n+    *out++ = (values[0] | values[1] << 1 | values[2] << 2 | values[3] << 3 |\n+              values[4] << 4 | values[5] << 5 | values[6] << 6 | values[7] << 7);\n+    values += 8;\n+  }\n+}\n\nReview Comment:\n   I'll put it into bit_util.h\n\n\n\n",
                    "created": "2022-07-20T17:00:08.201+0000",
                    "updated": "2022-07-20T17:00:08.201+0000",
                    "started": "2022-07-20T17:00:08.200+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793350",
                    "issueId": "13472374"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472374/worklog/793386",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on PR #13654:\nURL: https://github.com/apache/arrow/pull/13654#issuecomment-1190631222\n\n   > That sounds quite outlandish :-o. Perhaps you can try disassembling one of those symbols to see if there's anything particularly fishy?\r\n   \r\n   I tried to disassemble this and find out what's wrong on ",
                    "created": "2022-07-20T18:45:47.017+0000",
                    "updated": "2022-07-20T18:45:47.017+0000",
                    "started": "2022-07-20T18:45:47.017+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793386",
                    "issueId": "13472374"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 16800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2c79e58[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2132245b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b9d5f70[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1b3da6a4[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@588184f2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7c053920[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d229f0f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4bdc0689[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1faebd14[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4ab75bf8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@63c46f46[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4887d5f9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jul 20 20:12:29 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-07-20T20:12:29.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17135/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-07-20T05:53:47.000+0000",
        "updated": "2022-07-27T11:43:46.000+0000",
        "timeoriginalestimate": null,
        "description": "I had noticed the large symbol sizes in scalar_compare.cc when looking at the shared library. I had a quick hack on the plane to try to reduce the code size",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Reduce code size in arrow/compute/kernels/scalar_compare.cc",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472374/comment/17569162",
                    "id": "17569162",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 13654\n[https://github.com/apache/arrow/pull/13654]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-07-20T20:12:29.028+0000",
                    "updated": "2022-07-20T20:12:29.028+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z16zy8:",
        "customfield_12314139": null
    }
}