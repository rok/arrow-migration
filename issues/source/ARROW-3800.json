{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13198576",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198576",
    "key": "ARROW-3800",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344316",
                "id": "12344316",
                "name": "0.11.1",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-23"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12548271",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12548271",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "outwardIssue": {
                    "id": "13084071",
                    "key": "ARROW-1176",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13084071",
                    "fields": {
                        "summary": "[C++] Replace WrappedBinary with Tensorflow's StringPiece",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3800/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 10,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198576/worklog/166348",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2974: ARROW-3800: [C++] Vendor a string_view backport\nURL: https://github.com/apache/arrow/pull/2974\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T10:02:20.934+0000",
                    "updated": "2018-11-15T10:02:20.934+0000",
                    "started": "2018-11-15T10:02:20.933+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166348",
                    "issueId": "13198576"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198576/worklog/166387",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2974: ARROW-3800: [C++] Vendor a string_view backport\nURL: https://github.com/apache/arrow/pull/2974#issuecomment-439006411\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2974?src=pr&el=h1) Report\n   > Merging [#2974](https://codecov.io/gh/apache/arrow/pull/2974?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/217c28a30f25d4f80089d35a49b7a1698b296a9b?src=pr&el=desc) will **increase** coverage by `12.8%`.\n   > The diff coverage is `88.11%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2974/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2974?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2974      +/-   ##\n   ==========================================\n   + Coverage   74.86%   87.67%   +12.8%     \n   ==========================================\n     Files          68      423     +355     \n     Lines        5173    63928   +58755     \n   ==========================================\n   + Hits         3873    56046   +52173     \n   - Misses       1214     7882    +6668     \n   + Partials       86        0      -86\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2974?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/compute/kernels/cast.cc](https://codecov.io/gh/apache/arrow/pull/2974/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvY2FzdC5jYw==) | `91.15% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/python/deserialize.cc](https://codecov.io/gh/apache/arrow/pull/2974/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vZGVzZXJpYWxpemUuY2M=) | `91.7% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/builder.h](https://codecov.io/gh/apache/arrow/pull/2974/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9idWlsZGVyLmg=) | `97.73% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/array-test.cc](https://codecov.io/gh/apache/arrow/pull/2974/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS10ZXN0LmNj) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/pretty\\_print.cc](https://codecov.io/gh/apache/arrow/pull/2974/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9wcmV0dHlfcHJpbnQuY2M=) | `84.87% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/array.h](https://codecov.io/gh/apache/arrow/pull/2974/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS5o) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/python/arrow\\_to\\_pandas.cc](https://codecov.io/gh/apache/arrow/pull/2974/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vYXJyb3dfdG9fcGFuZGFzLmNj) | `89.32% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/util/string.h](https://codecov.io/gh/apache/arrow/pull/2974/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3N0cmluZy5o) | `95% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/builder.cc](https://codecov.io/gh/apache/arrow/pull/2974/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9idWlsZGVyLmNj) | `82.23% <70%> (\u00f8)` | |\n   | [cpp/src/arrow/util/string\\_view/string\\_view.hpp](https://codecov.io/gh/apache/arrow/pull/2974/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3N0cmluZ192aWV3L3N0cmluZ192aWV3LmhwcA==) | `83.78% <83.78%> (\u00f8)` | |\n   | ... and [491 more](https://codecov.io/gh/apache/arrow/pull/2974/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2974?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2974?src=pr&el=footer). Last update [217c28a...57520ed](https://codecov.io/gh/apache/arrow/pull/2974?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T11:18:09.436+0000",
                    "updated": "2018-11-15T11:18:09.436+0000",
                    "started": "2018-11-15T11:18:09.435+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166387",
                    "issueId": "13198576"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198576/worklog/166507",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2974: ARROW-3800: [C++] Vendor a string_view backport\nURL: https://github.com/apache/arrow/pull/2974#discussion_r233920233\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -488,27 +489,33 @@ class ARROW_EXPORT BinaryArray : public FlatArray {\n               const std::shared_ptr<Buffer>& null_bitmap = NULLPTR,\n               int64_t null_count = 0, int64_t offset = 0);\n \n-  // Return the pointer to the given elements bytes\n-  // TODO(emkornfield) introduce a StringPiece or something similar to capture zero-copy\n-  // pointer + offset\n+  /// Return the pointer to the given elements bytes\n+  // XXX should GetValue(int64_t i) return a string_view?\n \n Review comment:\n   Might be nice to just use string_view, assuming there aren't any microperformance implications\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T16:45:15.008+0000",
                    "updated": "2018-11-15T16:45:15.008+0000",
                    "started": "2018-11-15T16:45:15.007+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166507",
                    "issueId": "13198576"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198576/worklog/166508",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2974: ARROW-3800: [C++] Vendor a string_view backport\nURL: https://github.com/apache/arrow/pull/2974#discussion_r233921376\n \n \n\n ##########\n File path: cpp/src/arrow/python/arrow_to_pandas.cc\n ##########\n @@ -771,7 +737,7 @@ class ObjectBlock : public PandasBlock {\n     } else if (type == Type::STRING) {\n       RETURN_NOT_OK(ConvertBinaryLike<StringType>(options_, data, out_buffer));\n     } else if (type == Type::FIXED_SIZE_BINARY) {\n-      RETURN_NOT_OK(ConvertFixedSizeBinary(options_, data, out_buffer));\n+      RETURN_NOT_OK(ConvertBinaryLike<FixedSizeBinaryType>(options_, data, out_buffer));\n \n Review comment:\n   That's nice\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T16:45:15.316+0000",
                    "updated": "2018-11-15T16:45:15.316+0000",
                    "started": "2018-11-15T16:45:15.315+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166508",
                    "issueId": "13198576"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198576/worklog/166509",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2974: ARROW-3800: [C++] Vendor a string_view backport\nURL: https://github.com/apache/arrow/pull/2974#discussion_r233920862\n \n \n\n ##########\n File path: cpp/src/arrow/builder.h\n ##########\n @@ -1055,10 +1066,14 @@ class ARROW_EXPORT StructBuilder : public ArrayBuilder {\n \n namespace internal {\n \n-// TODO(ARROW-1176): Use Tensorflow's StringPiece instead of this here.\n+// TODO deprecate this\n \n Review comment:\n   Any reason it cannot be removed (since this was non-public)? \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T16:45:15.318+0000",
                    "updated": "2018-11-15T16:45:15.318+0000",
                    "started": "2018-11-15T16:45:15.317+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166509",
                    "issueId": "13198576"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198576/worklog/166523",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2974: ARROW-3800: [C++] Vendor a string_view backport\nURL: https://github.com/apache/arrow/pull/2974#discussion_r233934162\n \n \n\n ##########\n File path: cpp/src/arrow/builder.h\n ##########\n @@ -1055,10 +1066,14 @@ class ARROW_EXPORT StructBuilder : public ArrayBuilder {\n \n namespace internal {\n \n-// TODO(ARROW-1176): Use Tensorflow's StringPiece instead of this here.\n+// TODO deprecate this\n \n Review comment:\n   No reason.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T17:16:16.484+0000",
                    "updated": "2018-11-15T17:16:16.484+0000",
                    "started": "2018-11-15T17:16:16.483+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166523",
                    "issueId": "13198576"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198576/worklog/166524",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2974: ARROW-3800: [C++] Vendor a string_view backport\nURL: https://github.com/apache/arrow/pull/2974#discussion_r233934445\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -488,27 +489,33 @@ class ARROW_EXPORT BinaryArray : public FlatArray {\n               const std::shared_ptr<Buffer>& null_bitmap = NULLPTR,\n               int64_t null_count = 0, int64_t offset = 0);\n \n-  // Return the pointer to the given elements bytes\n-  // TODO(emkornfield) introduce a StringPiece or something similar to capture zero-copy\n-  // pointer + offset\n+  /// Return the pointer to the given elements bytes\n+  // XXX should GetValue(int64_t i) return a string_view?\n \n Review comment:\n   We can do that in a later PR if desired.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T17:16:52.431+0000",
                    "updated": "2018-11-15T17:16:52.431+0000",
                    "started": "2018-11-15T17:16:52.430+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166524",
                    "issueId": "13198576"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198576/worklog/166525",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2974: ARROW-3800: [C++] Vendor a string_view backport\nURL: https://github.com/apache/arrow/pull/2974#discussion_r233934676\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -488,27 +489,33 @@ class ARROW_EXPORT BinaryArray : public FlatArray {\n               const std::shared_ptr<Buffer>& null_bitmap = NULLPTR,\n               int64_t null_count = 0, int64_t offset = 0);\n \n-  // Return the pointer to the given elements bytes\n-  // TODO(emkornfield) introduce a StringPiece or something similar to capture zero-copy\n-  // pointer + offset\n+  /// Return the pointer to the given elements bytes\n+  // XXX should GetValue(int64_t i) return a string_view?\n \n Review comment:\n   :+1: \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T17:17:20.647+0000",
                    "updated": "2018-11-15T17:17:20.647+0000",
                    "started": "2018-11-15T17:17:20.646+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166525",
                    "issueId": "13198576"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198576/worklog/166526",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2974: ARROW-3800: [C++] Vendor a string_view backport\nURL: https://github.com/apache/arrow/pull/2974#discussion_r233934822\n \n \n\n ##########\n File path: cpp/src/arrow/builder.h\n ##########\n @@ -1055,10 +1066,14 @@ class ARROW_EXPORT StructBuilder : public ArrayBuilder {\n \n namespace internal {\n \n-// TODO(ARROW-1176): Use Tensorflow's StringPiece instead of this here.\n+// TODO deprecate this\n \n Review comment:\n   Cool. I'll remove then merge this, as it would be helpful to use in the buffered reader implementation (`Peek` can return string_view instead of a Buffer)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T17:17:50.410+0000",
                    "updated": "2018-11-15T17:17:50.410+0000",
                    "started": "2018-11-15T17:17:50.409+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166526",
                    "issueId": "13198576"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198576/worklog/166563",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2974: ARROW-3800: [C++] Vendor a string_view backport\nURL: https://github.com/apache/arrow/pull/2974\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/LICENSE.txt b/LICENSE.txt\nindex 85a9bbd9ef..2651a135e7 100644\n--- a/LICENSE.txt\n+++ b/LICENSE.txt\n@@ -769,3 +769,31 @@ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n+\n+--------------------------------------------------------------------------------\n+\n+The file cpp/src/util/string_view/string_view.hpp has the following license\n+\n+Boost Software License - Version 1.0 - August 17th, 2003\n+\n+Permission is hereby granted, free of charge, to any person or organization\n+obtaining a copy of the software and accompanying documentation covered by\n+this license (the \"Software\") to use, reproduce, display, distribute,\n+execute, and transmit the Software, and to prepare derivative works of the\n+Software, and to permit third-parties to whom the Software is furnished to\n+do so, all subject to the following:\n+\n+The copyright notices in the Software and this entire statement, including\n+the above license grant, this restriction and the following disclaimer,\n+must be included in all copies of the Software, in whole or in part, and\n+all derivative works of the Software, unless such copies or derivative\n+works are solely in the form of machine-executable object code generated by\n+a source language processor.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\n+SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\n+FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n+ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n+DEALINGS IN THE SOFTWARE.\ndiff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt\nindex 72edd2fd42..a32ac0f1d9 100644\n--- a/cpp/CMakeLists.txt\n+++ b/cpp/CMakeLists.txt\n@@ -348,6 +348,7 @@ if (UNIX)\n             (item MATCHES \"xxhash.h\") OR\n             (item MATCHES \"xxhash.cc\") OR\n             (item MATCHES \"config.h\") OR\n+            (item MATCHES \"util/string_view/\") OR\n             (item MATCHES \"util/variant\") OR\n             (item MATCHES \"zmalloc.h\") OR\n             (item MATCHES \"gandiva/precompiled/date.h\") OR\ndiff --git a/cpp/build-support/clang_format_exclusions.txt b/cpp/build-support/clang_format_exclusions.txt\nindex 03caa00acd..1aeecfadf5 100644\n--- a/cpp/build-support/clang_format_exclusions.txt\n+++ b/cpp/build-support/clang_format_exclusions.txt\n@@ -4,6 +4,7 @@\n *pyarrow_lib.h\n *python/config.h\n *python/platform.h\n+*util/string_view/*\n *util/variant.h\n *util/variant/*\n *thirdparty/ae/*\ndiff --git a/cpp/build-support/lint_cpp_cli.py b/cpp/build-support/lint_cpp_cli.py\nindex 00a453af2d..993ea2f4f0 100644\n--- a/cpp/build-support/lint_cpp_cli.py\n+++ b/cpp/build-support/lint_cpp_cli.py\n@@ -69,9 +69,10 @@ def lint_file(path):\n \n \n EXCLUSIONS = [\n-    'arrow/util/macros.h',\n     'arrow/python/iterators.h',\n+    'arrow/util/macros.h',\n     'arrow/util/parallel.h',\n+    'arrow/util/string_view/string_view.hpp',\n     'gandiva/cache.h',\n     'gandiva/jni',\n     'gandiva/precompiled/date.h',\ndiff --git a/cpp/src/arrow/array-test.cc b/cpp/src/arrow/array-test.cc\nindex 78ff4bc4c6..e647ff85de 100644\n--- a/cpp/src/arrow/array-test.cc\n+++ b/cpp/src/arrow/array-test.cc\n@@ -1386,9 +1386,8 @@ TEST_F(TestBinaryArray, TestGetValue) {\n     if (valid_bytes_[i] == 0) {\n       ASSERT_TRUE(strings_->IsNull(i));\n     } else {\n-      int32_t len = -1;\n-      const uint8_t* bytes = strings_->GetValue(i, &len);\n-      ASSERT_EQ(0, std::memcmp(expected_[i].data(), bytes, len));\n+      ASSERT_FALSE(strings_->IsNull(i));\n+      ASSERT_EQ(strings_->GetString(i), expected_[i]);\n     }\n   }\n }\n@@ -1398,9 +1397,8 @@ TEST_F(TestBinaryArray, TestNullValuesInitialized) {\n     if (valid_bytes_[i] == 0) {\n       ASSERT_TRUE(strings_->IsNull(i));\n     } else {\n-      int32_t len = -1;\n-      const uint8_t* bytes = strings_->GetValue(i, &len);\n-      ASSERT_EQ(0, std::memcmp(expected_[i].data(), bytes, len));\n+      ASSERT_FALSE(strings_->IsNull(i));\n+      ASSERT_EQ(strings_->GetString(i), expected_[i]);\n     }\n   }\n   TestInitialized(*strings_);\ndiff --git a/cpp/src/arrow/array.h b/cpp/src/arrow/array.h\nindex be64ebc187..ceed7ecba7 100644\n--- a/cpp/src/arrow/array.h\n+++ b/cpp/src/arrow/array.h\n@@ -33,6 +33,7 @@\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n@@ -488,27 +489,33 @@ class ARROW_EXPORT BinaryArray : public FlatArray {\n               const std::shared_ptr<Buffer>& null_bitmap = NULLPTR,\n               int64_t null_count = 0, int64_t offset = 0);\n \n-  // Return the pointer to the given elements bytes\n-  // TODO(emkornfield) introduce a StringPiece or something similar to capture zero-copy\n-  // pointer + offset\n+  /// Return the pointer to the given elements bytes\n+  // XXX should GetValue(int64_t i) return a string_view?\n   const uint8_t* GetValue(int64_t i, int32_t* out_length) const {\n     // Account for base offset\n     i += data_->offset;\n-\n     const int32_t pos = raw_value_offsets_[i];\n     *out_length = raw_value_offsets_[i + 1] - pos;\n     return raw_data_ + pos;\n   }\n \n+  /// \\brief Get binary value as a string_view\n+  ///\n+  /// \\param i the value index\n+  /// \\return the view over the selected value\n+  util::string_view GetView(int64_t i) const {\n+    // Account for base offset\n+    i += data_->offset;\n+    const int32_t pos = raw_value_offsets_[i];\n+    return util::string_view(reinterpret_cast<const char*>(raw_data_ + pos),\n+                             raw_value_offsets_[i + 1] - pos);\n+  }\n+\n   /// \\brief Get binary value as a std::string\n   ///\n   /// \\param i the value index\n   /// \\return the value copied into a std::string\n-  std::string GetString(int64_t i) const {\n-    int32_t length = 0;\n-    const uint8_t* bytes = GetValue(i, &length);\n-    return std::string(reinterpret_cast<const char*>(bytes), static_cast<size_t>(length));\n-  }\n+  std::string GetString(int64_t i) const { return std::string(GetView(i)); }\n \n   /// Note that this buffer does not account for any slice offset\n   std::shared_ptr<Buffer> value_offsets() const { return data_->buffers[1]; }\n@@ -555,14 +562,6 @@ class ARROW_EXPORT StringArray : public BinaryArray {\n               const std::shared_ptr<Buffer>& data,\n               const std::shared_ptr<Buffer>& null_bitmap = NULLPTR,\n               int64_t null_count = 0, int64_t offset = 0);\n-\n-  // Construct a std::string\n-  // TODO: std::bad_alloc possibility\n-  std::string GetString(int64_t i) const {\n-    int32_t nchars;\n-    const uint8_t* str = GetValue(i, &nchars);\n-    return std::string(reinterpret_cast<const char*>(str), nchars);\n-  }\n };\n \n // ----------------------------------------------------------------------\n@@ -583,6 +582,12 @@ class ARROW_EXPORT FixedSizeBinaryArray : public PrimitiveArray {\n   const uint8_t* GetValue(int64_t i) const;\n   const uint8_t* Value(int64_t i) const { return GetValue(i); }\n \n+  util::string_view GetView(int64_t i) const {\n+    return util::string_view(reinterpret_cast<const char*>(GetValue(i)), byte_width());\n+  }\n+\n+  std::string GetString(int64_t i) const { return std::string(GetView(i)); }\n+\n   int32_t byte_width() const { return byte_width_; }\n \n   const uint8_t* raw_values() const { return raw_values_ + data_->offset * byte_width_; }\ndiff --git a/cpp/src/arrow/builder.cc b/cpp/src/arrow/builder.cc\nindex 8c5cab7fda..3e99308ba4 100644\n--- a/cpp/src/arrow/builder.cc\n+++ b/cpp/src/arrow/builder.cc\n@@ -760,7 +760,6 @@ Status BooleanBuilder::AppendValues(const std::vector<bool>& values) {\n // DictionaryBuilder\n \n using internal::DictionaryScalar;\n-using internal::WrappedBinary;\n \n namespace {\n \n@@ -809,32 +808,28 @@ struct DictionaryHashHelper<T, enable_if_binary<T>> {\n   using Scalar = typename DictionaryScalar<T>::type;\n \n   static Scalar GetDictionaryValue(const Builder& builder, int64_t index) {\n-    int32_t v_length;\n-    const uint8_t* v_ptr = builder.GetValue(index, &v_length);\n-    return WrappedBinary(v_ptr, v_length);\n+    return builder.GetView(index);\n   }\n \n   static int64_t HashValue(const Scalar& value, int byte_width) {\n-    return HashUtil::Hash<SSE4_FLAG>(value.ptr_, value.length_, 0);\n+    return HashUtil::Hash<SSE4_FLAG>(value.data(), static_cast<int32_t>(value.length()),\n+                                     0);\n   }\n \n   static bool SlotDifferent(const Builder& builder, int64_t index, const Scalar& value) {\n-    int32_t other_length;\n-    const uint8_t* other_ptr = builder.GetValue(index, &other_length);\n-    return value.length_ != other_length ||\n-           memcmp(value.ptr_, other_ptr, other_length) != 0;\n+    const Scalar other = GetDictionaryValue(builder, index);\n+    return value.length() != other.length() ||\n+           memcmp(value.data(), other.data(), other.length()) != 0;\n   }\n \n   static Status AppendValue(Builder& builder, const Scalar& value) {\n-    return builder.Append(value.ptr_, value.length_);\n+    return builder.Append(value);\n   }\n \n   static Status AppendArray(Builder& builder, const Array& in_array) {\n     const auto& array = checked_cast<const BinaryArray&>(in_array);\n     for (uint64_t index = 0, limit = array.length(); index < limit; ++index) {\n-      int32_t length;\n-      const uint8_t* ptr = array.GetValue(index, &length);\n-      RETURN_NOT_OK(builder.Append(ptr, length));\n+      RETURN_NOT_OK(builder.Append(array.GetView(index)));\n     }\n     return Status::OK();\n   }\n@@ -1033,12 +1028,12 @@ Status DictionaryBuilder<FixedSizeBinaryType>::AppendArray(const Array& array) {\n     return Status::Invalid(\"Cannot append FixedSizeBinary array with non-matching type\");\n   }\n \n-  const auto& numeric_array = checked_cast<const FixedSizeBinaryArray&>(array);\n+  const auto& typed_array = checked_cast<const FixedSizeBinaryArray&>(array);\n   for (int64_t i = 0; i < array.length(); i++) {\n     if (array.IsNull(i)) {\n       RETURN_NOT_OK(AppendNull());\n     } else {\n-      RETURN_NOT_OK(Append(numeric_array.Value(i)));\n+      RETURN_NOT_OK(Append(typed_array.GetValue(i)));\n     }\n   }\n   return Status::OK();\n@@ -1087,21 +1082,20 @@ Status DictionaryBuilder<NullType>::FinishInternal(std::shared_ptr<ArrayData>* o\n // StringType and BinaryType specializations\n //\n \n-#define BINARY_DICTIONARY_SPECIALIZATIONS(Type)                                \\\n-                                                                               \\\n-  template <>                                                                  \\\n-  Status DictionaryBuilder<Type>::AppendArray(const Array& array) {            \\\n-    const BinaryArray& binary_array = checked_cast<const BinaryArray&>(array); \\\n-    WrappedBinary value(nullptr, 0);                                           \\\n-    for (int64_t i = 0; i < array.length(); i++) {                             \\\n-      if (array.IsNull(i)) {                                                   \\\n-        RETURN_NOT_OK(AppendNull());                                           \\\n-      } else {                                                                 \\\n-        value.ptr_ = binary_array.GetValue(i, &value.length_);                 \\\n-        RETURN_NOT_OK(Append(value));                                          \\\n-      }                                                                        \\\n-    }                                                                          \\\n-    return Status::OK();                                                       \\\n+#define BINARY_DICTIONARY_SPECIALIZATIONS(Type)                            \\\n+                                                                           \\\n+  template <>                                                              \\\n+  Status DictionaryBuilder<Type>::AppendArray(const Array& array) {        \\\n+    using ArrayType = typename TypeTraits<Type>::ArrayType;                \\\n+    const ArrayType& binary_array = checked_cast<const ArrayType&>(array); \\\n+    for (int64_t i = 0; i < array.length(); i++) {                         \\\n+      if (array.IsNull(i)) {                                               \\\n+        RETURN_NOT_OK(AppendNull());                                       \\\n+      } else {                                                             \\\n+        RETURN_NOT_OK(Append(binary_array.GetView(i)));                    \\\n+      }                                                                    \\\n+    }                                                                      \\\n+    return Status::OK();                                                   \\\n   }\n \n BINARY_DICTIONARY_SPECIALIZATIONS(StringType);\n@@ -1314,6 +1308,19 @@ const uint8_t* BinaryBuilder::GetValue(int64_t i, int32_t* out_length) const {\n   return value_data_builder_.data() + offset;\n }\n \n+util::string_view BinaryBuilder::GetView(int64_t i) const {\n+  const int32_t* offsets = offsets_builder_.data();\n+  int32_t offset = offsets[i];\n+  int32_t value_length;\n+  if (i == (length_ - 1)) {\n+    value_length = static_cast<int32_t>(value_data_builder_.length()) - offset;\n+  } else {\n+    value_length = offsets[i + 1] - offset;\n+  }\n+  return util::string_view(\n+      reinterpret_cast<const char*>(value_data_builder_.data() + offset), value_length);\n+}\n+\n StringBuilder::StringBuilder(MemoryPool* pool) : BinaryBuilder(utf8(), pool) {}\n \n Status StringBuilder::AppendValues(const std::vector<std::string>& values,\n@@ -1455,6 +1462,12 @@ const uint8_t* FixedSizeBinaryBuilder::GetValue(int64_t i) const {\n   return data_ptr + i * byte_width_;\n }\n \n+util::string_view FixedSizeBinaryBuilder::GetView(int64_t i) const {\n+  const uint8_t* data_ptr = byte_builder_.data();\n+  return util::string_view(reinterpret_cast<const char*>(data_ptr + i * byte_width_),\n+                           byte_width_);\n+}\n+\n // ----------------------------------------------------------------------\n // Struct\n \ndiff --git a/cpp/src/arrow/builder.h b/cpp/src/arrow/builder.h\nindex fa9776f1c7..40edd74ce3 100644\n--- a/cpp/src/arrow/builder.h\n+++ b/cpp/src/arrow/builder.h\n@@ -37,6 +37,7 @@\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/hash.h\"\n #include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n #include \"arrow/util/type_traits.h\"\n #include \"arrow/util/visibility.h\"\n \n@@ -853,8 +854,8 @@ class ARROW_EXPORT BinaryBuilder : public ArrayBuilder {\n     return Append(reinterpret_cast<const uint8_t*>(value), length);\n   }\n \n-  Status Append(const std::string& value) {\n-    return Append(value.c_str(), static_cast<int32_t>(value.size()));\n+  Status Append(util::string_view value) {\n+    return Append(value.data(), static_cast<int32_t>(value.size()));\n   }\n \n   Status AppendNull();\n@@ -896,6 +897,11 @@ class ARROW_EXPORT BinaryBuilder : public ArrayBuilder {\n   /// This pointer becomes invalid on the next modifying operation.\n   const uint8_t* GetValue(int64_t i, int32_t* out_length) const;\n \n+  /// Temporary access to a value.\n+  ///\n+  /// This view becomes invalid on the next modifying operation.\n+  util::string_view GetView(int64_t i) const;\n+\n  protected:\n   TypedBufferBuilder<int32_t> offsets_builder_;\n   TypedBufferBuilder<uint8_t> value_data_builder_;\n@@ -984,6 +990,11 @@ class ARROW_EXPORT FixedSizeBinaryBuilder : public ArrayBuilder {\n   /// This pointer becomes invalid on the next modifying operation.\n   const uint8_t* GetValue(int64_t i) const;\n \n+  /// Temporary access to a value.\n+  ///\n+  /// This view becomes invalid on the next modifying operation.\n+  util::string_view GetView(int64_t i) const;\n+\n  protected:\n   int32_t byte_width_;\n   BufferBuilder byte_builder_;\n@@ -1055,14 +1066,6 @@ class ARROW_EXPORT StructBuilder : public ArrayBuilder {\n \n namespace internal {\n \n-// TODO(ARROW-1176): Use Tensorflow's StringPiece instead of this here.\n-struct WrappedBinary {\n-  WrappedBinary(const uint8_t* ptr, int32_t length) : ptr_(ptr), length_(length) {}\n-\n-  const uint8_t* ptr_;\n-  int32_t length_;\n-};\n-\n template <typename T>\n struct DictionaryScalar {\n   using type = typename T::c_type;\n@@ -1070,12 +1073,12 @@ struct DictionaryScalar {\n \n template <>\n struct DictionaryScalar<BinaryType> {\n-  using type = WrappedBinary;\n+  using type = util::string_view;\n };\n \n template <>\n struct DictionaryScalar<StringType> {\n-  using type = WrappedBinary;\n+  using type = util::string_view;\n };\n \n template <>\n@@ -1185,17 +1188,11 @@ class ARROW_EXPORT BinaryDictionaryBuilder : public DictionaryBuilder<BinaryType\n   using DictionaryBuilder::DictionaryBuilder;\n \n   Status Append(const uint8_t* value, int32_t length) {\n-    return Append(internal::WrappedBinary(value, length));\n+    return Append(reinterpret_cast<const char*>(value), length);\n   }\n \n   Status Append(const char* value, int32_t length) {\n-    return Append(\n-        internal::WrappedBinary(reinterpret_cast<const uint8_t*>(value), length));\n-  }\n-\n-  Status Append(const std::string& value) {\n-    return Append(internal::WrappedBinary(reinterpret_cast<const uint8_t*>(value.c_str()),\n-                                          static_cast<int32_t>(value.size())));\n+    return Append(util::string_view(value, length));\n   }\n };\n \n@@ -1206,17 +1203,11 @@ class ARROW_EXPORT StringDictionaryBuilder : public DictionaryBuilder<StringType\n   using DictionaryBuilder::DictionaryBuilder;\n \n   Status Append(const uint8_t* value, int32_t length) {\n-    return Append(internal::WrappedBinary(value, length));\n+    return Append(reinterpret_cast<const char*>(value), length);\n   }\n \n   Status Append(const char* value, int32_t length) {\n-    return Append(\n-        internal::WrappedBinary(reinterpret_cast<const uint8_t*>(value), length));\n-  }\n-\n-  Status Append(const std::string& value) {\n-    return Append(internal::WrappedBinary(reinterpret_cast<const uint8_t*>(value.c_str()),\n-                                          static_cast<int32_t>(value.size())));\n+    return Append(util::string_view(value, length));\n   }\n };\n \ndiff --git a/cpp/src/arrow/compute/kernels/cast.cc b/cpp/src/arrow/compute/kernels/cast.cc\nindex 4f124e8a3b..766740b33a 100644\n--- a/cpp/src/arrow/compute/kernels/cast.cc\n+++ b/cpp/src/arrow/compute/kernels/cast.cc\n@@ -662,9 +662,7 @@ Status UnpackBinaryDictionary(FunctionContext* ctx, const Array& indices,\n \n     for (int64_t i = 0; i < indices.length(); ++i) {\n       if (valid_bits_reader.IsSet()) {\n-        int32_t length;\n-        const uint8_t* value = dictionary.GetValue(in[i], &length);\n-        RETURN_NOT_OK(binary_builder->Append(value, length));\n+        RETURN_NOT_OK(binary_builder->Append(dictionary.GetView(in[i])));\n       } else {\n         RETURN_NOT_OK(binary_builder->AppendNull());\n       }\n@@ -672,9 +670,7 @@ Status UnpackBinaryDictionary(FunctionContext* ctx, const Array& indices,\n     }\n   } else {\n     for (int64_t i = 0; i < indices.length(); ++i) {\n-      int32_t length;\n-      const uint8_t* value = dictionary.GetValue(in[i], &length);\n-      RETURN_NOT_OK(binary_builder->Append(value, length));\n+      RETURN_NOT_OK(binary_builder->Append(dictionary.GetView(in[i])));\n     }\n   }\n \n@@ -806,10 +802,8 @@ struct CastFunctor<O, StringType, enable_if_number<O>> {\n         continue;\n       }\n \n-      int32_t length = -1;\n-      auto str = input_array.GetValue(i, &length);\n-      if (!converter(reinterpret_cast<const char*>(str), static_cast<size_t>(length),\n-                     out_data)) {\n+      auto str = input_array.GetView(i);\n+      if (!converter(str.data(), str.length(), out_data)) {\n         std::stringstream ss;\n         ss << \"Failed to cast String '\" << str << \"' into \" << output->type->ToString();\n         ctx->SetStatus(Status(StatusCode::Invalid, ss.str()));\n@@ -838,11 +832,9 @@ struct CastFunctor<O, StringType,\n         continue;\n       }\n \n-      int32_t length = -1;\n-      auto str = input_array.GetValue(i, &length);\n       bool value;\n-      if (!converter(reinterpret_cast<const char*>(str), static_cast<size_t>(length),\n-                     &value)) {\n+      auto str = input_array.GetView(i);\n+      if (!converter(str.data(), str.length(), &value)) {\n         std::stringstream ss;\n         ss << \"Failed to cast String '\" << input_array.GetString(i) << \"' into \"\n            << output->type->ToString();\ndiff --git a/cpp/src/arrow/pretty_print.cc b/cpp/src/arrow/pretty_print.cc\nindex f4aeb7ee10..ec23bfb00f 100644\n--- a/cpp/src/arrow/pretty_print.cc\n+++ b/cpp/src/arrow/pretty_print.cc\n@@ -163,11 +163,7 @@ class ArrayPrinter : public PrettyPrinter {\n   template <typename T>\n   inline typename std::enable_if<std::is_same<StringArray, T>::value, Status>::type\n   WriteDataValues(const T& array) {\n-    WriteValues(array, [&](int64_t i) {\n-      int32_t length;\n-      const char* buf = reinterpret_cast<const char*>(array.GetValue(i, &length));\n-      (*sink_) << \"\\\"\" << std::string(buf, length) << \"\\\"\";\n-    });\n+    WriteValues(array, [&](int64_t i) { (*sink_) << \"\\\"\" << array.GetView(i) << \"\\\"\"; });\n     return Status::OK();\n   }\n \n@@ -175,11 +171,7 @@ class ArrayPrinter : public PrettyPrinter {\n   template <typename T>\n   inline typename std::enable_if<std::is_same<BinaryArray, T>::value, Status>::type\n   WriteDataValues(const T& array) {\n-    WriteValues(array, [&](int64_t i) {\n-      int32_t length;\n-      const uint8_t* buf = array.GetValue(i, &length);\n-      (*sink_) << HexEncode(buf, length);\n-    });\n+    WriteValues(array, [&](int64_t i) { (*sink_) << HexEncode(array.GetView(i)); });\n     return Status::OK();\n   }\n \n@@ -187,9 +179,7 @@ class ArrayPrinter : public PrettyPrinter {\n   inline\n       typename std::enable_if<std::is_same<FixedSizeBinaryArray, T>::value, Status>::type\n       WriteDataValues(const T& array) {\n-    int32_t width = array.byte_width();\n-    WriteValues(array,\n-                [&](int64_t i) { (*sink_) << HexEncode(array.GetValue(i), width); });\n+    WriteValues(array, [&](int64_t i) { (*sink_) << HexEncode(array.GetView(i)); });\n     return Status::OK();\n   }\n \ndiff --git a/cpp/src/arrow/python/CMakeLists.txt b/cpp/src/arrow/python/CMakeLists.txt\nindex edfe4e3cc7..1c075f83f2 100644\n--- a/cpp/src/arrow/python/CMakeLists.txt\n+++ b/cpp/src/arrow/python/CMakeLists.txt\n@@ -70,7 +70,7 @@ ADD_ARROW_LIB(arrow_python\n   OUTPUTS ARROW_PYTHON_LIBRARIES\n   SHARED_LINK_FLAGS \"\"\n   SHARED_LINK_LIBS ${ARROW_PYTHON_SHARED_LINK_LIBS}\n-  STATIC_LINK_LIBS \"${PYTHON_OTHER_LIBS}\"\n+  STATIC_LINK_LIBS ${PYTHON_OTHER_LIBS}\n   EXTRA_INCLUDES \"${ARROW_PYTHON_INCLUDES}\"\n )\n \ndiff --git a/cpp/src/arrow/python/arrow_to_pandas.cc b/cpp/src/arrow/python/arrow_to_pandas.cc\nindex f342a346bc..3e04f2727e 100644\n--- a/cpp/src/arrow/python/arrow_to_pandas.cc\n+++ b/cpp/src/arrow/python/arrow_to_pandas.cc\n@@ -76,22 +76,22 @@ struct WrapBytes {};\n \n template <>\n struct WrapBytes<StringArray> {\n-  static inline PyObject* Wrap(const uint8_t* data, int64_t length) {\n-    return PyUnicode_FromStringAndSize(reinterpret_cast<const char*>(data), length);\n+  static inline PyObject* Wrap(const char* data, int64_t length) {\n+    return PyUnicode_FromStringAndSize(data, length);\n   }\n };\n \n template <>\n struct WrapBytes<BinaryArray> {\n-  static inline PyObject* Wrap(const uint8_t* data, int64_t length) {\n-    return PyBytes_FromStringAndSize(reinterpret_cast<const char*>(data), length);\n+  static inline PyObject* Wrap(const char* data, int64_t length) {\n+    return PyBytes_FromStringAndSize(data, length);\n   }\n };\n \n template <>\n struct WrapBytes<FixedSizeBinaryArray> {\n-  static inline PyObject* Wrap(const uint8_t* data, int64_t length) {\n-    return PyBytes_FromStringAndSize(reinterpret_cast<const char*>(data), length);\n+  static inline PyObject* Wrap(const char* data, int64_t length) {\n+    return PyBytes_FromStringAndSize(data, length);\n   }\n };\n \n@@ -404,21 +404,18 @@ inline Status ConvertBinaryLike(PandasOptions options, const ChunkedArray& data,\n   for (int c = 0; c < data.num_chunks(); c++) {\n     const auto& arr = checked_cast<const ArrayType&>(*data.chunk(c));\n \n-    const uint8_t* data_ptr;\n-    int32_t length;\n     const bool has_nulls = data.null_count() > 0;\n     for (int64_t i = 0; i < arr.length(); ++i) {\n       if (has_nulls && arr.IsNull(i)) {\n         Py_INCREF(Py_None);\n         *out_values = Py_None;\n       } else {\n-        data_ptr = arr.GetValue(i, &length);\n-        *out_values = WrapBytes<ArrayType>::Wrap(data_ptr, length);\n+        auto view = arr.GetView(i);\n+        *out_values = WrapBytes<ArrayType>::Wrap(view.data(), view.length());\n         if (*out_values == nullptr) {\n           PyErr_Clear();\n           std::stringstream ss;\n-          ss << \"Wrapping \"\n-             << std::string(reinterpret_cast<const char*>(data_ptr), length) << \" failed\";\n+          ss << \"Wrapping \" << view << \" failed\";\n           return Status::UnknownError(ss.str());\n         }\n       }\n@@ -444,37 +441,6 @@ inline Status ConvertNulls(PandasOptions options, const ChunkedArray& data,\n   return Status::OK();\n }\n \n-inline Status ConvertFixedSizeBinary(PandasOptions options, const ChunkedArray& data,\n-                                     PyObject** out_values) {\n-  PyAcquireGIL lock;\n-  for (int c = 0; c < data.num_chunks(); c++) {\n-    auto arr = checked_cast<FixedSizeBinaryArray*>(data.chunk(c).get());\n-\n-    const uint8_t* data_ptr;\n-    int32_t length =\n-        std::dynamic_pointer_cast<FixedSizeBinaryType>(arr->type())->byte_width();\n-    const bool has_nulls = data.null_count() > 0;\n-    for (int64_t i = 0; i < arr->length(); ++i) {\n-      if (has_nulls && arr->IsNull(i)) {\n-        Py_INCREF(Py_None);\n-        *out_values = Py_None;\n-      } else {\n-        data_ptr = arr->GetValue(i);\n-        *out_values = WrapBytes<FixedSizeBinaryArray>::Wrap(data_ptr, length);\n-        if (*out_values == nullptr) {\n-          PyErr_Clear();\n-          std::stringstream ss;\n-          ss << \"Wrapping \"\n-             << std::string(reinterpret_cast<const char*>(data_ptr), length) << \" failed\";\n-          return Status::UnknownError(ss.str());\n-        }\n-      }\n-      ++out_values;\n-    }\n-  }\n-  return Status::OK();\n-}\n-\n inline Status ConvertStruct(PandasOptions options, const ChunkedArray& data,\n                             PyObject** out_values) {\n   PyAcquireGIL lock;\n@@ -771,7 +737,7 @@ class ObjectBlock : public PandasBlock {\n     } else if (type == Type::STRING) {\n       RETURN_NOT_OK(ConvertBinaryLike<StringType>(options_, data, out_buffer));\n     } else if (type == Type::FIXED_SIZE_BINARY) {\n-      RETURN_NOT_OK(ConvertFixedSizeBinary(options_, data, out_buffer));\n+      RETURN_NOT_OK(ConvertBinaryLike<FixedSizeBinaryType>(options_, data, out_buffer));\n     } else if (type == Type::DATE32) {\n       RETURN_NOT_OK(ConvertDates<Date32Type>(options_, data, out_buffer));\n     } else if (type == Type::DATE64) {\n@@ -1820,20 +1786,20 @@ class ArrowDeserializer {\n     return func(options_, data_, out_values);\n   }\n \n-  // UTF8 strings\n+  // Strings and binary\n   template <typename Type>\n   typename std::enable_if<std::is_base_of<BinaryType, Type>::value, Status>::type Visit(\n       const Type& type) {\n     return VisitObjects(ConvertBinaryLike<Type>);\n   }\n \n-  Status Visit(const NullType& type) { return VisitObjects(ConvertNulls); }\n-\n   // Fixed length binary strings\n   Status Visit(const FixedSizeBinaryType& type) {\n-    return VisitObjects(ConvertFixedSizeBinary);\n+    return VisitObjects(ConvertBinaryLike<FixedSizeBinaryType>);\n   }\n \n+  Status Visit(const NullType& type) { return VisitObjects(ConvertNulls); }\n+\n   Status Visit(const Decimal128Type& type) { return VisitObjects(ConvertDecimals); }\n \n   Status Visit(const Time32Type& type) { return VisitObjects(ConvertTimes<Time32Type>); }\ndiff --git a/cpp/src/arrow/python/deserialize.cc b/cpp/src/arrow/python/deserialize.cc\nindex 91f772350f..452d8dd0ac 100644\n--- a/cpp/src/arrow/python/deserialize.cc\n+++ b/cpp/src/arrow/python/deserialize.cc\n@@ -127,15 +127,13 @@ Status GetValue(PyObject* context, const UnionArray& parent, const Array& arr,\n       return Status::OK();\n     }\n     case Type::BINARY: {\n-      int32_t nchars;\n-      const uint8_t* str = checked_cast<const BinaryArray&>(arr).GetValue(index, &nchars);\n-      *result = PyBytes_FromStringAndSize(reinterpret_cast<const char*>(str), nchars);\n+      auto view = checked_cast<const BinaryArray&>(arr).GetView(index);\n+      *result = PyBytes_FromStringAndSize(view.data(), view.length());\n       return CheckPyError();\n     }\n     case Type::STRING: {\n-      int32_t nchars;\n-      const uint8_t* str = checked_cast<const StringArray&>(arr).GetValue(index, &nchars);\n-      *result = PyUnicode_FromStringAndSize(reinterpret_cast<const char*>(str), nchars);\n+      auto view = checked_cast<const StringArray&>(arr).GetView(index);\n+      *result = PyUnicode_FromStringAndSize(view.data(), view.length());\n       return CheckPyError();\n     }\n     case Type::HALF_FLOAT: {\ndiff --git a/cpp/src/arrow/util/CMakeLists.txt b/cpp/src/arrow/util/CMakeLists.txt\nindex 855ff6a6b7..9f962f43a5 100644\n--- a/cpp/src/arrow/util/CMakeLists.txt\n+++ b/cpp/src/arrow/util/CMakeLists.txt\n@@ -49,6 +49,7 @@ install(FILES\n   stl.h\n   stopwatch.h\n   string.h\n+  string_view.h\n   thread-pool.h\n   type_traits.h\n   utf8.h\n@@ -104,4 +105,5 @@ ADD_ARROW_BENCHMARK(lazy-benchmark)\n ADD_ARROW_BENCHMARK(number-parsing-benchmark)\n ADD_ARROW_BENCHMARK(utf8-util-benchmark)\n \n+add_subdirectory(string_view)\n add_subdirectory(variant)\ndiff --git a/cpp/src/arrow/util/string.h b/cpp/src/arrow/util/string.h\nindex a2af87caf5..e4dbcf73ed 100644\n--- a/cpp/src/arrow/util/string.h\n+++ b/cpp/src/arrow/util/string.h\n@@ -22,15 +22,16 @@\n #include <string>\n \n #include \"arrow/status.h\"\n+#include \"arrow/util/string_view.h\"\n \n namespace arrow {\n \n static const char* kAsciiTable = \"0123456789ABCDEF\";\n \n-static inline std::string HexEncode(const uint8_t* data, int32_t length) {\n+static inline std::string HexEncode(const char* data, size_t length) {\n   std::string hex_string;\n   hex_string.reserve(length * 2);\n-  for (int32_t j = 0; j < length; ++j) {\n+  for (size_t j = 0; j < length; ++j) {\n     // Convert to 2 base16 digits\n     hex_string.push_back(kAsciiTable[data[j] >> 4]);\n     hex_string.push_back(kAsciiTable[data[j] & 15]);\n@@ -38,6 +39,14 @@ static inline std::string HexEncode(const uint8_t* data, int32_t length) {\n   return hex_string;\n }\n \n+static inline std::string HexEncode(const uint8_t* data, int32_t length) {\n+  return HexEncode(reinterpret_cast<const char*>(data), length);\n+}\n+\n+static inline std::string HexEncode(util::string_view str) {\n+  return HexEncode(str.data(), str.size());\n+}\n+\n static inline Status ParseHexValue(const char* data, uint8_t* out) {\n   char c1 = data[0];\n   char c2 = data[1];\ndiff --git a/cpp/src/arrow/util/string_view.h b/cpp/src/arrow/util/string_view.h\nnew file mode 100644\nindex 0000000000..2ee594a9e9\n--- /dev/null\n+++ b/cpp/src/arrow/util/string_view.h\n@@ -0,0 +1,31 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_UTIL_STRING_VIEW_H\n+#define ARROW_UTIL_STRING_VIEW_H\n+\n+#include \"arrow/util/string_view/string_view.hpp\"\n+\n+namespace arrow {\n+namespace util {\n+\n+using nonstd::string_view;\n+\n+}  // namespace util\n+}  // namespace arrow\n+\n+#endif  // ARROW_UTIL_STRING_VIEW_H\ndiff --git a/cpp/src/arrow/util/string_view/CMakeLists.txt b/cpp/src/arrow/util/string_view/CMakeLists.txt\nnew file mode 100644\nindex 0000000000..bae6bdb807\n--- /dev/null\n+++ b/cpp/src/arrow/util/string_view/CMakeLists.txt\n@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+install(FILES\n+  string_view.hpp\n+  DESTINATION include/arrow/util/string_view)\ndiff --git a/cpp/src/arrow/util/string_view/string_view.hpp b/cpp/src/arrow/util/string_view/string_view.hpp\nnew file mode 100644\nindex 0000000000..1647c93cdf\n--- /dev/null\n+++ b/cpp/src/arrow/util/string_view/string_view.hpp\n@@ -0,0 +1,1292 @@\n+// Vendored from git tag 54a90f61ccb08dbd9870d24f735ded0daa659341\n+\n+// Copyright 2017-2018 by Martin Moene\n+//\n+// string-view lite, a C++17-like string_view for C++98 and later.\n+// For more information see https://github.com/martinmoene/string-view-lite\n+//\n+// Distributed under the Boost Software License, Version 1.0. \n+// (See accompanying file LICENSE.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n+\n+#pragma once\n+\n+#ifndef NONSTD_SV_LITE_H_INCLUDED\n+#define NONSTD_SV_LITE_H_INCLUDED\n+\n+#define string_view_lite_MAJOR  1\n+#define string_view_lite_MINOR  1\n+#define string_view_lite_PATCH  0\n+\n+#define string_view_lite_VERSION  nssv_STRINGIFY(string_view_lite_MAJOR) \".\" nssv_STRINGIFY(string_view_lite_MINOR) \".\" nssv_STRINGIFY(string_view_lite_PATCH)\n+\n+#define nssv_STRINGIFY(  x )  nssv_STRINGIFY_( x )\n+#define nssv_STRINGIFY_( x )  #x\n+\n+// string-view lite configuration:\n+\n+#define nssv_STRING_VIEW_DEFAULT  0\n+#define nssv_STRING_VIEW_NONSTD   1\n+#define nssv_STRING_VIEW_STD      2\n+\n+#if !defined( nssv_CONFIG_SELECT_STRING_VIEW )\n+# define nssv_CONFIG_SELECT_STRING_VIEW  ( nssv_HAVE_STD_STRING_VIEW ? nssv_STRING_VIEW_STD : nssv_STRING_VIEW_NONSTD )\n+#endif\n+\n+#if defined( nssv_CONFIG_SELECT_STD_STRING_VIEW ) || defined( nssv_CONFIG_SELECT_NONSTD_STRING_VIEW )\n+# error nssv_CONFIG_SELECT_STD_STRING_VIEW and nssv_CONFIG_SELECT_NONSTD_STRING_VIEW are deprecated and removed, please use nssv_CONFIG_SELECT_STRING_VIEW=nssv_STRING_VIEW_...\n+#endif\n+\n+#ifndef  nssv_CONFIG_STD_SV_OPERATOR\n+# define nssv_CONFIG_STD_SV_OPERATOR  0\n+#endif\n+\n+#ifndef  nssv_CONFIG_USR_SV_OPERATOR\n+# define nssv_CONFIG_USR_SV_OPERATOR  1\n+#endif\n+\n+#ifdef   nssv_CONFIG_CONVERSION_STD_STRING\n+# define nssv_CONFIG_CONVERSION_STD_STRING_CLASS_METHODS   nssv_CONFIG_CONVERSION_STD_STRING\n+# define nssv_CONFIG_CONVERSION_STD_STRING_FREE_FUNCTIONS  nssv_CONFIG_CONVERSION_STD_STRING\n+#endif\n+\n+#ifndef  nssv_CONFIG_CONVERSION_STD_STRING_CLASS_METHODS\n+# define nssv_CONFIG_CONVERSION_STD_STRING_CLASS_METHODS  1\n+#endif\n+\n+#ifndef  nssv_CONFIG_CONVERSION_STD_STRING_FREE_FUNCTIONS\n+# define nssv_CONFIG_CONVERSION_STD_STRING_FREE_FUNCTIONS  1\n+#endif\n+\n+// C++ language version detection (C++20 is speculative):\n+// Note: VC14.0/1900 (VS2015) lacks too much from C++14.\n+\n+#ifndef   nssv_CPLUSPLUS\n+# if defined(_MSVC_LANG ) && !defined(__clang__)\n+#  define nssv_CPLUSPLUS  (_MSC_VER == 1900 ? 201103L : _MSVC_LANG )\n+# else\n+#  define nssv_CPLUSPLUS  __cplusplus\n+# endif\n+#endif\n+\n+#define nssv_CPP98_OR_GREATER  ( nssv_CPLUSPLUS >= 199711L )\n+#define nssv_CPP11_OR_GREATER  ( nssv_CPLUSPLUS >= 201103L )\n+#define nssv_CPP11_OR_GREATER_ ( nssv_CPLUSPLUS >= 201103L )\n+#define nssv_CPP14_OR_GREATER  ( nssv_CPLUSPLUS >= 201402L )\n+#define nssv_CPP17_OR_GREATER  ( nssv_CPLUSPLUS >= 201703L )\n+#define nssv_CPP20_OR_GREATER  ( nssv_CPLUSPLUS >= 202000L )\n+\n+// use C++17 std::string_view if available and requested:\n+\n+#if nssv_CPP17_OR_GREATER && defined(__has_include )\n+# if __has_include( <string_view> )\n+#  define nssv_HAVE_STD_STRING_VIEW  1\n+# else\n+#  define nssv_HAVE_STD_STRING_VIEW  0\n+# endif\n+#else\n+# define  nssv_HAVE_STD_STRING_VIEW  0\n+#endif\n+\n+#define  nssv_USES_STD_STRING_VIEW  ( (nssv_CONFIG_SELECT_STRING_VIEW == nssv_STRING_VIEW_STD) || ((nssv_CONFIG_SELECT_STRING_VIEW == nssv_STRING_VIEW_DEFAULT) && nssv_HAVE_STD_STRING_VIEW) )\n+\n+#define nssv_HAVE_STARTS_WITH ( nssv_CPP20_OR_GREATER || !nssv_USES_STD_STRING_VIEW )\n+#define nssv_HAVE_ENDS_WITH     nssv_HAVE_STARTS_WITH\n+\n+//\n+// Use C++17 std::string_view:\n+//\n+\n+#if nssv_USES_STD_STRING_VIEW\n+\n+#include <string_view>\n+\n+// Extensions for std::string:\n+\n+#if nssv_CONFIG_CONVERSION_STD_STRING_FREE_FUNCTIONS\n+\n+namespace nonstd {\n+\n+template< class CharT, class Traits, class Allocator = std::allocator<CharT> >\n+std::basic_string<CharT, Traits, Allocator>\n+to_string( std::basic_string_view<CharT, Traits> v, Allocator const & a = Allocator() )\n+{\n+    return std::basic_string<CharT,Traits, Allocator>( v.begin(), v.end(), a );\n+}\n+\n+template< class CharT, class Traits, class Allocator >\n+std::basic_string_view<CharT, Traits>\n+to_string_view( std::basic_string<CharT, Traits, Allocator> const & s )\n+{\n+    return std::basic_string_view<CharT, Traits>( s.data(), s.size() );\n+}\n+\n+// Literal operators sv and _sv:\n+\n+#if nssv_CONFIG_STD_SV_OPERATOR\n+\n+using namespace std::literals::string_view_literals;\n+\n+#endif\n+\n+#if nssv_CONFIG_USR_SV_OPERATOR\n+\n+inline namespace literals {\n+inline namespace string_view_literals {\n+\n+\n+constexpr std::string_view operator \"\" _sv( const char* str, size_t len ) noexcept  // (1)\n+{\n+    return std::string_view{ str, len };\n+}\n+\n+constexpr std::u16string_view operator \"\" _sv( const char16_t* str, size_t len ) noexcept  // (2)\n+{\n+    return std::u16string_view{ str, len };\n+}\n+\n+constexpr std::u32string_view operator \"\" _sv( const char32_t* str, size_t len ) noexcept  // (3)\n+{\n+    return std::u32string_view{ str, len };\n+}\n+\n+constexpr std::wstring_view operator \"\" _sv( const wchar_t* str, size_t len ) noexcept  // (4)\n+{\n+    return std::wstring_view{ str, len };\n+}\n+\n+}} // namespace literals::string_view_literals\n+\n+#endif // nssv_CONFIG_USR_SV_OPERATOR\n+\n+} // namespace nonstd\n+\n+#endif // nssv_CONFIG_CONVERSION_STD_STRING_FREE_FUNCTIONS\n+\n+namespace nonstd {\n+\n+using std::string_view;\n+using std::wstring_view;\n+using std::u16string_view;\n+using std::u32string_view;\n+using std::basic_string_view;\n+\n+// literal \"sv\" and \"_sv\", see above\n+\n+using std::operator==;\n+using std::operator!=;\n+using std::operator<;\n+using std::operator<=;\n+using std::operator>;\n+using std::operator>=;\n+\n+using std::operator<<;\n+\n+} // namespace nonstd\n+\n+#else // nssv_HAVE_STD_STRING_VIEW\n+\n+//\n+// Before C++17: use string_view lite:\n+//\n+\n+// Compiler versions:\n+//\n+// MSVC++ 6.0  _MSC_VER == 1200 (Visual Studio 6.0)\n+// MSVC++ 7.0  _MSC_VER == 1300 (Visual Studio .NET 2002)\n+// MSVC++ 7.1  _MSC_VER == 1310 (Visual Studio .NET 2003)\n+// MSVC++ 8.0  _MSC_VER == 1400 (Visual Studio 2005)\n+// MSVC++ 9.0  _MSC_VER == 1500 (Visual Studio 2008)\n+// MSVC++ 10.0 _MSC_VER == 1600 (Visual Studio 2010)\n+// MSVC++ 11.0 _MSC_VER == 1700 (Visual Studio 2012)\n+// MSVC++ 12.0 _MSC_VER == 1800 (Visual Studio 2013)\n+// MSVC++ 14.0 _MSC_VER == 1900 (Visual Studio 2015)\n+// MSVC++ 14.1 _MSC_VER >= 1910 (Visual Studio 2017)\n+\n+#if defined(_MSC_VER ) && !defined(__clang__)\n+# define nssv_COMPILER_MSVC_VER      (_MSC_VER )\n+# define nssv_COMPILER_MSVC_VERSION  (_MSC_VER / 10 - 10 * ( 5 + (_MSC_VER < 1900 ) ) )\n+#else\n+# define nssv_COMPILER_MSVC_VER      0\n+# define nssv_COMPILER_MSVC_VERSION  0\n+#endif\n+\n+#define nssv_COMPILER_VERSION( major, minor, patch )  (10 * ( 10 * major + minor) + patch)\n+\n+#if defined(__clang__)\n+# define nssv_COMPILER_CLANG_VERSION  nssv_COMPILER_VERSION(__clang_major__, __clang_minor__, __clang_patchlevel__)\n+#else\n+# define nssv_COMPILER_CLANG_VERSION    0\n+#endif\n+\n+#if defined(__GNUC__) && !defined(__clang__)\n+# define nssv_COMPILER_GNUC_VERSION  nssv_COMPILER_VERSION(__GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__)\n+#else\n+# define nssv_COMPILER_GNUC_VERSION    0\n+#endif\n+\n+// half-open range [lo..hi):\n+#define nssv_BETWEEN( v, lo, hi ) ( (lo) <= (v) && (v) < (hi) )\n+\n+// Presence of language and library features:\n+\n+#ifdef _HAS_CPP0X\n+# define nssv_HAS_CPP0X  _HAS_CPP0X\n+#else\n+# define nssv_HAS_CPP0X  0\n+#endif\n+\n+// Unless defined otherwise below, consider VC14 as C++11 for variant-lite:\n+\n+#if nssv_COMPILER_MSVC_VER >= 1900\n+# undef  nssv_CPP11_OR_GREATER\n+# define nssv_CPP11_OR_GREATER  1\n+#endif\n+\n+#define nssv_CPP11_90   (nssv_CPP11_OR_GREATER_ || nssv_COMPILER_MSVC_VER >= 1500)\n+#define nssv_CPP11_100  (nssv_CPP11_OR_GREATER_ || nssv_COMPILER_MSVC_VER >= 1600)\n+#define nssv_CPP11_110  (nssv_CPP11_OR_GREATER_ || nssv_COMPILER_MSVC_VER >= 1700)\n+#define nssv_CPP11_120  (nssv_CPP11_OR_GREATER_ || nssv_COMPILER_MSVC_VER >= 1800)\n+#define nssv_CPP11_140  (nssv_CPP11_OR_GREATER_ || nssv_COMPILER_MSVC_VER >= 1900)\n+#define nssv_CPP11_141  (nssv_CPP11_OR_GREATER_ || nssv_COMPILER_MSVC_VER >= 1910)\n+\n+#define nssv_CPP14_000  (nssv_CPP14_OR_GREATER)\n+#define nssv_CPP17_000  (nssv_CPP17_OR_GREATER)\n+\n+// Presence of C++11 language features:\n+\n+#define nssv_HAVE_CONSTEXPR_11          nssv_CPP11_140\n+#define nssv_HAVE_EXPLICIT_CONVERSION   nssv_CPP11_140\n+#define nssv_HAVE_INLINE_NAMESPACE      nssv_CPP11_140\n+#define nssv_HAVE_NOEXCEPT              nssv_CPP11_140\n+#define nssv_HAVE_NULLPTR               nssv_CPP11_100\n+#define nssv_HAVE_REF_QUALIFIER         nssv_CPP11_140\n+#define nssv_HAVE_UNICODE_LITERALS      nssv_CPP11_140\n+#define nssv_HAVE_USER_DEFINED_LITERALS nssv_CPP11_140\n+#define nssv_HAVE_WCHAR16_T             nssv_CPP11_100\n+#define nssv_HAVE_WCHAR32_T             nssv_CPP11_100\n+\n+#if ! ( ( nssv_CPP11 && nssv_COMPILER_CLANG_VERSION ) || nssv_BETWEEN( nssv_COMPILER_CLANG_VERSION, 300, 400 ) )\n+# define nssv_HAVE_STD_DEFINED_LITERALS  nssv_CPP11_140\n+#endif\n+\n+// Presence of C++14 language features:\n+\n+#define nssv_HAVE_CONSTEXPR_14          nssv_CPP14_000\n+\n+// Presence of C++17 language features:\n+\n+#define nssv_HAVE_NODISCARD             nssv_CPP17_000\n+\n+// Presence of C++ library features:\n+\n+#define nssv_HAVE_STD_HASH              nssv_CPP11_120\n+\n+// C++ feature usage:\n+\n+#if nssv_HAVE_CONSTEXPR_11\n+# define nssv_constexpr  constexpr\n+#else\n+# define nssv_constexpr  /*constexpr*/\n+#endif\n+\n+#if  nssv_HAVE_CONSTEXPR_14\n+# define nssv_constexpr14  constexpr\n+#else\n+# define nssv_constexpr14  /*constexpr*/\n+#endif\n+\n+#if nssv_HAVE_EXPLICIT_CONVERSION\n+# define nssv_explicit  explicit\n+#else\n+# define nssv_explicit  /*explicit*/\n+#endif\n+\n+#if nssv_HAVE_INLINE_NAMESPACE\n+# define nssv_inline_ns  inline\n+#else\n+# define nssv_inline_ns  /*inline*/\n+#endif\n+\n+#if nssv_HAVE_NOEXCEPT\n+# define nssv_noexcept  noexcept\n+#else\n+# define nssv_noexcept  /*noexcept*/\n+#endif\n+\n+//#if nssv_HAVE_REF_QUALIFIER\n+//# define nssv_ref_qual  &\n+//# define nssv_refref_qual  &&\n+//#else\n+//# define nssv_ref_qual  /*&*/\n+//# define nssv_refref_qual  /*&&*/\n+//#endif\n+\n+#if nssv_HAVE_NULLPTR\n+# define nssv_nullptr  nullptr\n+#else\n+# define nssv_nullptr  NULL\n+#endif\n+\n+#if nssv_HAVE_NODISCARD\n+# define nssv_nodiscard  [[nodiscard]]\n+#else\n+# define nssv_nodiscard  /*[[nodiscard]]*/\n+#endif\n+\n+// Additional includes:\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <iterator>\n+#include <limits>\n+#include <ostream>\n+#include <stdexcept>\n+#include <string>   // std::char_traits<>\n+\n+#if nssv_CPP11_OR_GREATER\n+# include <type_traits>\n+#endif\n+\n+// Clang, GNUC, MSVC warning suppression macros:\n+\n+#if defined(__clang__)\n+# pragma clang diagnostic ignored \"-Wreserved-user-defined-literal\"\n+# pragma clang diagnostic push\n+# pragma clang diagnostic ignored \"-Wuser-defined-literals\"\n+#elif defined(__GNUC__)\n+# pragma  GCC  diagnostic push\n+# pragma  GCC  diagnostic ignored \"-Wliteral-suffix\"\n+#endif // __clang__\n+\n+#if nssv_COMPILER_MSVC_VERSION >= 140\n+# define nssv_SUPPRESS_MSGSL_WARNING(expr)        [[gsl::suppress(expr)]]\n+# define nssv_SUPPRESS_MSVC_WARNING(code, descr)  __pragma(warning(suppress: code) )\n+# define nssv_DISABLE_MSVC_WARNINGS(codes)        __pragma(warning(push))  __pragma(warning(disable: codes))\n+#else\n+# define nssv_SUPPRESS_MSGSL_WARNING(expr)\n+# define nssv_SUPPRESS_MSVC_WARNING(code, descr)\n+# define nssv_DISABLE_MSVC_WARNINGS(codes)\n+#endif\n+\n+#if defined(__clang__)\n+# define nssv_RESTORE_WARNINGS()  _Pragma(\"clang diagnostic pop\")\n+#elif defined(__GNUC__)\n+# define nssv_RESTORE_WARNINGS()  _Pragma(\"GCC diagnostic pop\")\n+#elif nssv_COMPILER_MSVC_VERSION >= 140\n+# define nssv_RESTORE_WARNINGS()  __pragma(warning(pop ))\n+#else\n+# define nssv_RESTORE_WARNINGS()\n+#endif\n+\n+// Suppress the following MSVC (GSL) warnings:\n+// - C4455, non-gsl   : 'operator \"\"sv': literal suffix identifiers that do not\n+//                      start with an underscore are reserved\n+// - C26472, gsl::t.1 : don't use a static_cast for arithmetic conversions;\n+//                      use brace initialization, gsl::narrow_cast or gsl::narow\n+// - C26481: gsl::b.1 : don't use pointer arithmetic. Use span instead\n+\n+nssv_DISABLE_MSVC_WARNINGS( 4455 26481 26472 )\n+//nssv_DISABLE_CLANG_WARNINGS( \"-Wuser-defined-literals\" )\n+//nssv_DISABLE_GNUC_WARNINGS( -Wliteral-suffix )\n+\n+namespace nonstd { namespace sv_lite {\n+\n+template\n+<\n+    class CharT,\n+    class Traits = std::char_traits<CharT>\n+>\n+class basic_string_view;\n+\n+//\n+// basic_string_view:\n+//\n+\n+template\n+<\n+    class CharT,\n+    class Traits /* = std::char_traits<CharT> */\n+>\n+class basic_string_view\n+{\n+public:\n+    // Member types:\n+\n+    typedef Traits traits_type;\n+    typedef CharT  value_type;\n+\n+    typedef CharT       * pointer;\n+    typedef CharT const * const_pointer;\n+    typedef CharT       & reference;\n+    typedef CharT const & const_reference;\n+\n+    typedef const_pointer iterator;\n+    typedef const_pointer const_iterator;\n+    typedef std::reverse_iterator< const_iterator > reverse_iterator;\n+    typedef\tstd::reverse_iterator< const_iterator > const_reverse_iterator;\n+\n+    typedef std::size_t     size_type;\n+    typedef std::ptrdiff_t  difference_type;\n+\n+    // 24.4.2.1 Construction and assignment:\n+\n+    nssv_constexpr basic_string_view() nssv_noexcept\n+        : data_( nssv_nullptr )\n+        , size_( 0 )\n+    {}\n+\n+#if nssv_CPP11_OR_GREATER\n+    nssv_constexpr basic_string_view( basic_string_view const & other ) nssv_noexcept = default;\n+#else\n+    nssv_constexpr basic_string_view( basic_string_view const & other ) nssv_noexcept\n+        : data_( other.data_)\n+        , size_( other.size_)\n+    {}\n+#endif\n+\n+    nssv_constexpr basic_string_view( CharT const * s, size_type count )\n+        : data_( s )\n+        , size_( count )\n+    {}\n+\n+    nssv_constexpr basic_string_view( CharT const * s)\n+        : data_( s )\n+        , size_( Traits::length(s) )\n+    {}\n+\n+    // Assignment:\n+\n+#if nssv_CPP11_OR_GREATER\n+    nssv_constexpr14 basic_string_view & operator=( basic_string_view const & other ) nssv_noexcept = default;\n+#else\n+    nssv_constexpr14 basic_string_view & operator=( basic_string_view const & other ) nssv_noexcept\n+    {\n+        data_ = other.data_;\n+        size_ = other.size_;\n+        return *this;\n+    }\n+#endif\n+\n+    // 24.4.2.2 Iterator support:\n+\n+    nssv_constexpr const_iterator begin()  const nssv_noexcept { return data_;         }\n+    nssv_constexpr const_iterator end()    const nssv_noexcept { return data_ + size_; }\n+\n+    nssv_constexpr const_iterator cbegin() const nssv_noexcept { return begin(); }\n+    nssv_constexpr const_iterator cend()   const nssv_noexcept { return end();   }\n+\n+    nssv_constexpr const_reverse_iterator rbegin()  const nssv_noexcept { return const_reverse_iterator( end() );   }\n+    nssv_constexpr const_reverse_iterator rend()    const nssv_noexcept { return const_reverse_iterator( begin() ); }\n+\n+    nssv_constexpr const_reverse_iterator crbegin() const nssv_noexcept { return rbegin(); }\n+    nssv_constexpr const_reverse_iterator crend()   const nssv_noexcept { return rend();   }\n+\n+    // 24.4.2.3 Capacity:\n+\n+    nssv_constexpr size_type size()     const nssv_noexcept { return size_; }\n+    nssv_constexpr size_type length()   const nssv_noexcept { return size_; }\n+    nssv_constexpr size_type max_size() const nssv_noexcept { return (std::numeric_limits< size_type >::max)(); }\n+\n+    // since C++20\n+    nssv_nodiscard nssv_constexpr bool empty() const nssv_noexcept\n+    {\n+        return 0 == size_;\n+    }\n+\n+    // 24.4.2.4 Element access:\n+\n+    nssv_constexpr const_reference operator[]( size_type pos ) const\n+    {\n+        return data_at( pos );\n+    }\n+\n+    nssv_constexpr14 const_reference at( size_type pos ) const\n+    {\n+        if ( pos < size() )\n+        {\n+            return data_at( pos );\n+        }\n+\n+        throw std::out_of_range(\"nonst::string_view::at()\");\n+    }\n+\n+    nssv_constexpr const_reference front() const { return data_at( 0 );          }\n+    nssv_constexpr const_reference back()  const { return data_at( size() - 1 ); }\n+\n+    nssv_constexpr const_pointer   data()  const nssv_noexcept { return data_; }\n+\n+    // 24.4.2.5 Modifiers:\n+\n+    nssv_constexpr14 void remove_prefix( size_type n )\n+    {\n+        assert( n <= size() );\n+        data_ += n;\n+        size_ -= n;\n+    }\n+\n+    nssv_constexpr14 void remove_suffix( size_type n )\n+    {\n+        assert( n <= size() );\n+        size_ -= n;\n+    }\n+\n+    nssv_constexpr14 void swap( basic_string_view & other ) nssv_noexcept\n+    {\n+        using std::swap;\n+        swap( data_, other.data_ );\n+        swap( size_, other.size_ );\n+    }\n+\n+    // 24.4.2.6 String operations:\n+\n+    size_type copy( CharT * dest, size_type n, size_type pos = 0 ) const\n+    {\n+        if ( pos > size() )\n+            throw std::out_of_range(\"nonst::string_view::copy()\");\n+\n+        const size_type rlen = (std::min)( n, size() - pos );\n+\n+        (void) Traits::copy( dest, data() + pos, rlen );\n+\n+        return rlen;\n+    }\n+\n+    nssv_constexpr14 basic_string_view substr( size_type pos = 0, size_type n = npos ) const\n+    {\n+        if ( pos > size() )\n+            throw std::out_of_range(\"nonst::string_view::substr()\");\n+\n+        return basic_string_view( data() + pos, (std::min)( n, size() - pos ) );\n+    }\n+\n+    // compare(), 6x:\n+\n+    nssv_constexpr14 int compare( basic_string_view other ) const nssv_noexcept // (1)\n+    {\n+        if ( const int result = Traits::compare( data(), other.data(), (std::min)( size(), other.size() ) ) )\n+            return result;\n+\n+        return size() == other.size() ? 0 : size() < other.size() ? -1 : 1;\n+    }\n+\n+    nssv_constexpr int compare( size_type pos1, size_type n1, basic_string_view other ) const // (2)\n+    {\n+        return substr( pos1, n1 ).compare( other );\n+    }\n+\n+    nssv_constexpr int compare( size_type pos1, size_type n1, basic_string_view other, size_type pos2, size_type n2 ) const // (3)\n+    {\n+        return substr( pos1, n1 ).compare( other.substr( pos2, n2 ) );\n+    }\n+\n+    nssv_constexpr int compare( CharT const * s ) const // (4)\n+    {\n+        return compare( basic_string_view( s ) );\n+    }\n+\n+    nssv_constexpr int compare( size_type pos1, size_type n1, CharT const * s ) const // (5)\n+    {\n+        return substr( pos1, n1 ).compare( basic_string_view( s ) );\n+    }\n+\n+    nssv_constexpr int compare( size_type pos1, size_type n1, CharT const * s, size_type n2 ) const // (6)\n+    {\n+        return substr( pos1, n1 ).compare( basic_string_view( s, n2 ) );\n+    }\n+\n+    // 24.4.2.7 Searching:\n+\n+    // starts_with(), 3x, since C++20:\n+\n+    nssv_constexpr bool starts_with( basic_string_view v ) const nssv_noexcept  // (1)\n+    {\n+        return size() >= v.size() && compare( 0, v.size(), v ) == 0;\n+    }\n+\n+    nssv_constexpr bool starts_with( CharT c ) const nssv_noexcept  // (2)\n+    {\n+        return starts_with( basic_string_view( &c, 1 ) );\n+    }\n+\n+    nssv_constexpr bool starts_with( CharT const * s ) const  // (3)\n+    {\n+        return starts_with( basic_string_view( s ) );\n+    }\n+\n+    // ends_with(), 3x, since C++20:\n+\n+    nssv_constexpr bool ends_with( basic_string_view v ) const nssv_noexcept  // (1)\n+    {\n+        return size() >= v.size() && compare( size() - v.size(), npos, v ) == 0;\n+    }\n+\n+    nssv_constexpr bool ends_with( CharT c ) const nssv_noexcept  // (2)\n+    {\n+        return ends_with( basic_string_view( &c, 1 ) );\n+    }\n+\n+    nssv_constexpr bool ends_with( CharT const * s ) const  // (3)\n+    {\n+        return ends_with( basic_string_view( s ) );\n+    }\n+\n+    // find(), 4x:\n+\n+    nssv_constexpr14 size_type find( basic_string_view v, size_type pos = 0 ) const nssv_noexcept  // (1)\n+    {\n+        return assert( v.size() == 0 || v.data() != nssv_nullptr )\n+            , pos >= size()\n+            ? npos\n+            : to_pos( std::search( cbegin() + pos, cend(), v.cbegin(), v.cend(), Traits::eq ) );\n+    }\n+\n+    nssv_constexpr14 size_type find( CharT c, size_type pos = 0 ) const nssv_noexcept  // (2)\n+    {\n+        return find( basic_string_view( &c, 1 ), pos );\n+    }\n+\n+    nssv_constexpr14 size_type find( CharT const * s, size_type pos, size_type n ) const  // (3)\n+    {\n+        return find( basic_string_view( s, n ), pos );\n+    }\n+\n+    nssv_constexpr14 size_type find( CharT const * s, size_type pos = 0 ) const  // (4)\n+    {\n+        return find( basic_string_view( s ), pos );\n+    }\n+\n+    // rfind(), 4x:\n+\n+    nssv_constexpr14 size_type rfind( basic_string_view v, size_type pos = npos ) const nssv_noexcept  // (1)\n+    {\n+        if ( size() < v.size() )\n+            return npos;\n+\n+        if ( v.empty() )\n+            return (std::min)( size(), pos );\n+\n+        const_iterator last   = cbegin() + (std::min)( size() - v.size(), pos ) + v.size();\n+        const_iterator result = std::find_end( cbegin(), last, v.cbegin(), v.cend(), Traits::eq );\n+\n+        return result != last ? size_type( result - cbegin() ) : npos;\n+    }\n+\n+    nssv_constexpr14 size_type rfind( CharT c, size_type pos = npos ) const nssv_noexcept  // (2)\n+    {\n+        return rfind( basic_string_view( &c, 1 ), pos );\n+    }\n+\n+    nssv_constexpr14 size_type rfind( CharT const * s, size_type pos, size_type n ) const  // (3)\n+    {\n+        return rfind( basic_string_view( s, n ), pos );\n+    }\n+\n+    nssv_constexpr14 size_type rfind( CharT const * s, size_type pos = npos ) const  // (4)\n+    {\n+        return rfind( basic_string_view( s ), pos );\n+    }\n+\n+    // find_first_of(), 4x:\n+\n+    nssv_constexpr size_type find_first_of( basic_string_view v, size_type pos = 0 ) const nssv_noexcept  // (1)\n+    {\n+        return pos >= size()\n+            ? npos\n+            : to_pos( std::find_first_of( cbegin() + pos, cend(), v.cbegin(), v.cend(), Traits::eq ) );\n+    }\n+\n+    nssv_constexpr size_type find_first_of( CharT c, size_type pos = 0 ) const nssv_noexcept  // (2)\n+    {\n+        return find_first_of( basic_string_view( &c, 1 ), pos );\n+    }\n+\n+    nssv_constexpr size_type find_first_of( CharT const * s, size_type pos, size_type n ) const  // (3)\n+    {\n+        return find_first_of( basic_string_view( s, n ), pos );\n+    }\n+\n+    nssv_constexpr size_type find_first_of(  CharT const * s, size_type pos = 0 ) const  // (4)\n+    {\n+        return find_first_of( basic_string_view( s ), pos );\n+    }\n+\n+    // find_last_of(), 4x:\n+\n+    nssv_constexpr size_type find_last_of( basic_string_view v, size_type pos = npos ) const nssv_noexcept  // (1)\n+    {\n+        return pos >= size()\n+            ? find_last_of( v, size() - 1 )\n+            : to_pos( std::find_first_of( const_reverse_iterator( cbegin() + pos + 1 ), crend(), v.cbegin(), v.cend(), Traits::eq ) );\n+    }\n+\n+    nssv_constexpr size_type find_last_of( CharT c, size_type pos = npos ) const nssv_noexcept  // (2)\n+    {\n+        return find_last_of( basic_string_view( &c, 1 ), pos );\n+    }\n+\n+    nssv_constexpr size_type find_last_of( CharT const * s, size_type pos, size_type count ) const  // (3)\n+    {\n+        return find_last_of( basic_string_view( s, count ), pos );\n+    }\n+\n+    nssv_constexpr size_type find_last_of( CharT const * s, size_type pos = npos ) const  // (4)\n+    {\n+        return find_last_of( basic_string_view( s ), pos );\n+    }\n+\n+    // find_first_not_of(), 4x:\n+\n+    nssv_constexpr size_type find_first_not_of( basic_string_view v, size_type pos = 0 ) const nssv_noexcept  // (1)\n+    {\n+        return pos >= size()\n+            ? npos\n+            : to_pos( std::find_if( cbegin() + pos, cend(), not_in_view( v ) ) );\n+    }\n+\n+    nssv_constexpr size_type find_first_not_of( CharT c, size_type pos = 0 ) const nssv_noexcept  // (2)\n+    {\n+        return find_first_not_of( basic_string_view( &c, 1 ), pos );\n+    }\n+\n+    nssv_constexpr size_type find_first_not_of( CharT const * s, size_type pos, size_type count ) const  // (3)\n+    {\n+        return find_first_not_of( basic_string_view( s, count ), pos );\n+    }\n+\n+    nssv_constexpr size_type find_first_not_of( CharT const * s, size_type pos = 0 ) const  // (4)\n+    {\n+        return find_first_not_of( basic_string_view( s ), pos );\n+    }\n+\n+    // find_last_not_of(), 4x:\n+\n+    nssv_constexpr size_type find_last_not_of( basic_string_view v, size_type pos = npos ) const nssv_noexcept  // (1)\n+    {\n+        return pos >= size()\n+            ? find_last_not_of( v, size() - 1 )\n+            : to_pos( std::find_if( const_reverse_iterator( cbegin() + pos + 1 ), crend(), not_in_view( v ) ) );\n+    }\n+\n+    nssv_constexpr size_type find_last_not_of( CharT c, size_type pos = npos ) const nssv_noexcept  // (2)\n+    {\n+        return find_last_not_of( basic_string_view( &c, 1 ), pos );\n+    }\n+\n+    nssv_constexpr size_type find_last_not_of( CharT const * s, size_type pos, size_type count ) const  // (3)\n+    {\n+        return find_last_not_of( basic_string_view( s, count ), pos );\n+    }\n+\n+    nssv_constexpr size_type find_last_not_of( CharT const * s, size_type pos = npos ) const  // (4)\n+    {\n+        return find_last_not_of( basic_string_view( s ), pos );\n+    }\n+\n+    // Constants:\n+\n+#if nssv_CPP17_OR_GREATER\n+    static nssv_constexpr size_type npos = size_type(-1);\n+#elif nssv_CPP11_OR_GREATER\n+    enum : size_type { npos = size_type(-1) };\n+#else\n+    enum { npos = size_type(-1) };\n+#endif\n+\n+private:\n+    struct not_in_view\n+    {\n+        const basic_string_view v;\n+\n+        nssv_constexpr not_in_view( basic_string_view v ) : v( v ) {}\n+\n+        nssv_constexpr bool operator()( CharT c ) const\n+        {\n+            return npos == v.find_first_of( c );\n+        }\n+    };\n+\n+    nssv_constexpr size_type to_pos( const_iterator it ) const\n+    {\n+        return it == cend() ? npos : size_type( it - cbegin() );\n+    }\n+\n+    nssv_constexpr size_type to_pos( const_reverse_iterator it ) const\n+    {\n+        return it == crend() ? npos : size_type( crend() - it - 1 );\n+    }\n+\n+    nssv_constexpr const_reference data_at( size_type pos ) const\n+    {\n+#if nssv_BETWEEN( nssv_COMPILER_GNUC_VERSION, 1, 500 )\n+        return data_[pos];\n+#else\n+        return assert( pos < size() ), data_[pos];\n+#endif\n+    }\n+\n+private:\n+    const_pointer data_;\n+    size_type     size_;\n+\n+public:\n+#if nssv_CONFIG_CONVERSION_STD_STRING_CLASS_METHODS\n+\n+    template< class Allocator >\n+    basic_string_view( std::basic_string<CharT, Traits, Allocator> const & s ) nssv_noexcept\n+        : data_( s.data() )\n+        , size_( s.size() )\n+    {}\n+\n+#if nssv_HAVE_EXPLICIT_CONVERSION\n+\n+    template< class Allocator >\n+    explicit operator std::basic_string<CharT, Traits, Allocator>() const\n+    {\n+        return to_string( Allocator() );\n+    }\n+\n+#endif // nssv_HAVE_EXPLICIT_CONVERSION\n+\n+#if nssv_CPP11_OR_GREATER\n+\n+    template< class Allocator = std::allocator<CharT> >\n+    std::basic_string<CharT, Traits, Allocator>\n+    to_string( Allocator const & a = Allocator() ) const\n+    {\n+        return std::basic_string<CharT, Traits, Allocator>( begin(), end(), a );\n+    }\n+\n+#else\n+\n+    std::basic_string<CharT, Traits>\n+    to_string() const\n+    {\n+        return std::basic_string<CharT, Traits>( begin(), end() );\n+    }\n+\n+    template< class Allocator >\n+    std::basic_string<CharT, Traits, Allocator>\n+    to_string( Allocator const & a ) const\n+    {\n+        return std::basic_string<CharT, Traits, Allocator>( begin(), end(), a );\n+    }\n+\n+#endif // nssv_CPP11_OR_GREATER\n+\n+#endif // nssv_CONFIG_CONVERSION_STD_STRING_CLASS_METHODS\n+};\n+\n+//\n+// Non-member functions:\n+//\n+\n+// 24.4.3 Non-member comparison functions:\n+// lexicographically compare two string views (function template):\n+\n+template< class CharT, class Traits >\n+nssv_constexpr bool operator== (\n+    basic_string_view <CharT, Traits> lhs,\n+    basic_string_view <CharT, Traits> rhs ) nssv_noexcept\n+{ return lhs.compare( rhs ) == 0 ; }\n+\n+template< class CharT, class Traits >\n+nssv_constexpr bool operator!= (\n+    basic_string_view <CharT, Traits> lhs,\n+    basic_string_view <CharT, Traits> rhs ) nssv_noexcept\n+{ return lhs.compare( rhs ) != 0 ; }\n+\n+template< class CharT, class Traits >\n+nssv_constexpr bool operator< (\n+    basic_string_view <CharT, Traits> lhs,\n+    basic_string_view <CharT, Traits> rhs ) nssv_noexcept\n+{ return lhs.compare( rhs ) < 0 ; }\n+\n+template< class CharT, class Traits >\n+nssv_constexpr bool operator<= (\n+    basic_string_view <CharT, Traits> lhs,\n+    basic_string_view <CharT, Traits> rhs ) nssv_noexcept\n+{ return lhs.compare( rhs ) <= 0 ; }\n+\n+template< class CharT, class Traits >\n+nssv_constexpr bool operator> (\n+    basic_string_view <CharT, Traits> lhs,\n+    basic_string_view <CharT, Traits> rhs ) nssv_noexcept\n+{ return lhs.compare( rhs ) > 0 ; }\n+\n+template< class CharT, class Traits >\n+nssv_constexpr bool operator>= (\n+    basic_string_view <CharT, Traits> lhs,\n+    basic_string_view <CharT, Traits> rhs ) nssv_noexcept\n+{ return lhs.compare( rhs ) >= 0 ; }\n+\n+// Let S be basic_string_view<CharT, Traits>, and sv be an instance of S.\n+// Implementations shall provide sufficient additional overloads marked\n+// constexpr and noexcept so that an object t with an implicit conversion\n+// to S can be compared according to Table 67.\n+\n+#if nssv_CPP11_OR_GREATER && ! nssv_BETWEEN( nssv_COMPILER_MSVC_VERSION, 100, 141 )\n+\n+#define nssv_BASIC_STRING_VIEW_I(T,U)  typename std::decay< basic_string_view<T,U> >::type\n+\n+#if nssv_BETWEEN( nssv_COMPILER_MSVC_VERSION, 140, 150 )\n+# define nssv_MSVC_ORDER(x)  , int=x\n+#else\n+# define nssv_MSVC_ORDER(x)  /*, int=x*/\n+#endif\n+\n+// ==\n+\n+template< class CharT, class Traits  nssv_MSVC_ORDER(1) >\n+nssv_constexpr bool operator==(\n+         basic_string_view  <CharT, Traits> lhs,\n+    nssv_BASIC_STRING_VIEW_I(CharT, Traits) rhs ) nssv_noexcept\n+{ return lhs.compare( rhs ) == 0; }\n+\n+template< class CharT, class Traits  nssv_MSVC_ORDER(2) >\n+nssv_constexpr bool operator==(\n+    nssv_BASIC_STRING_VIEW_I(CharT, Traits) lhs,\n+         basic_string_view  <CharT, Traits> rhs ) nssv_noexcept\n+{ return lhs.compare( rhs ) == 0; }\n+\n+// !=\n+\n+template< class CharT, class Traits  nssv_MSVC_ORDER(1) >\n+nssv_constexpr bool operator!= (\n+         basic_string_view  < CharT, Traits > lhs,\n+    nssv_BASIC_STRING_VIEW_I( CharT, Traits ) rhs ) nssv_noexcept\n+{ return lhs.compare( rhs ) != 0 ; }\n+\n+template< class CharT, class Traits  nssv_MSVC_ORDER(2) >\n+nssv_constexpr bool operator!= (\n+    nssv_BASIC_STRING_VIEW_I( CharT, Traits ) lhs,\n+         basic_string_view  < CharT, Traits > rhs ) nssv_noexcept\n+{ return lhs.compare( rhs ) != 0 ; }\n+\n+// <\n+\n+template< class CharT, class Traits  nssv_MSVC_ORDER(1) >\n+nssv_constexpr bool operator< (\n+         basic_string_view  < CharT, Traits > lhs,\n+    nssv_BASIC_STRING_VIEW_I( CharT, Traits ) rhs ) nssv_noexcept\n+{ return lhs.compare( rhs ) < 0 ; }\n+\n+template< class CharT, class Traits  nssv_MSVC_ORDER(2) >\n+nssv_constexpr bool operator< (\n+    nssv_BASIC_STRING_VIEW_I( CharT, Traits ) lhs,\n+         basic_string_view  < CharT, Traits > rhs ) nssv_noexcept\n+{ return lhs.compare( rhs ) < 0 ; }\n+\n+// <=\n+\n+template< class CharT, class Traits  nssv_MSVC_ORDER(1) >\n+nssv_constexpr bool operator<= (\n+         basic_string_view  < CharT, Traits > lhs,\n+    nssv_BASIC_STRING_VIEW_I( CharT, Traits ) rhs ) nssv_noexcept\n+{ return lhs.compare( rhs ) <= 0 ; }\n+\n+template< class CharT, class Traits  nssv_MSVC_ORDER(2) >\n+nssv_constexpr bool operator<= (\n+    nssv_BASIC_STRING_VIEW_I( CharT, Traits ) lhs,\n+         basic_string_view  < CharT, Traits > rhs ) nssv_noexcept\n+{ return lhs.compare( rhs ) <= 0 ; }\n+\n+// >\n+\n+template< class CharT, class Traits  nssv_MSVC_ORDER(1) >\n+nssv_constexpr bool operator> (\n+         basic_string_view  < CharT, Traits > lhs,\n+    nssv_BASIC_STRING_VIEW_I( CharT, Traits ) rhs ) nssv_noexcept\n+{ return lhs.compare( rhs ) > 0 ; }\n+\n+template< class CharT, class Traits  nssv_MSVC_ORDER(2) >\n+nssv_constexpr bool operator> (\n+    nssv_BASIC_STRING_VIEW_I( CharT, Traits ) lhs,\n+         basic_string_view  < CharT, Traits > rhs ) nssv_noexcept\n+{ return lhs.compare( rhs ) > 0 ; }\n+\n+// >=\n+\n+template< class CharT, class Traits  nssv_MSVC_ORDER(1) >\n+nssv_constexpr bool operator>= (\n+         basic_string_view  < CharT, Traits > lhs,\n+    nssv_BASIC_STRING_VIEW_I( CharT, Traits ) rhs ) nssv_noexcept\n+{ return lhs.compare( rhs ) >= 0 ; }\n+\n+template< class CharT, class Traits  nssv_MSVC_ORDER(2) >\n+nssv_constexpr bool operator>= (\n+    nssv_BASIC_STRING_VIEW_I( CharT, Traits ) lhs,\n+         basic_string_view  < CharT, Traits > rhs ) nssv_noexcept\n+{ return lhs.compare( rhs ) >= 0 ; }\n+\n+#undef nssv_MSVC_ORDER\n+#undef nssv_BASIC_STRING_VIEW_I\n+\n+#endif // nssv_CPP11_OR_GREATER\n+\n+// 24.4.4 Inserters and extractors:\n+\n+namespace detail {\n+\n+template< class Stream >\n+void write_padding( Stream & os, std::streamsize n )\n+{\n+    for ( std::streamsize i = 0; i < n; ++i )\n+        os.rdbuf()->sputc( os.fill() );\n+}\n+\n+template< class Stream, class View >\n+Stream & write_to_stream( Stream & os, View const & sv )\n+{\n+    typename Stream::sentry sentry( os );\n+\n+    if ( !os )\n+        return os;\n+\n+    const std::streamsize length = static_cast<std::streamsize>( sv.length() );\n+\n+    // Whether, and how, to pad:\n+    const bool      pad = ( length < os.width() );\n+    const bool left_pad = pad && ( os.flags() & std::ios_base::adjustfield ) == std::ios_base::right;\n+\n+    if ( left_pad )\n+        write_padding( os, os.width() - length );\n+\n+    // Write span characters:\n+    os.rdbuf()->sputn( sv.begin(), length );\n+\n+    if ( pad && !left_pad )\n+        write_padding( os, os.width() - length );\n+\n+    // Reset output stream width:\n+    os.width( 0 );\n+\n+    return os;\n+}\n+\n+} // namespace detail\n+\n+template< class CharT, class Traits >\n+std::basic_ostream<CharT, Traits> &\n+operator<<(\n+    std::basic_ostream<CharT, Traits>& os,\n+    basic_string_view <CharT, Traits> sv )\n+{\n+    return detail::write_to_stream( os, sv );\n+}\n+\n+// Several typedefs for common character types are provided:\n+\n+typedef basic_string_view<char>      string_view;\n+typedef basic_string_view<wchar_t>   wstring_view;\n+#if nssv_HAVE_WCHAR16_T\n+typedef basic_string_view<char16_t>  u16string_view;\n+typedef basic_string_view<char32_t>  u32string_view;\n+#endif\n+\n+}} // namespace nonstd::sv_lite\n+\n+//\n+// 24.4.6 Suffix for basic_string_view literals:\n+//\n+\n+#if nssv_HAVE_USER_DEFINED_LITERALS\n+\n+namespace nonstd {\n+nssv_inline_ns namespace literals {\n+nssv_inline_ns namespace string_view_literals {\n+\n+#if nssv_CONFIG_STD_SV_OPERATOR && nssv_HAVE_STD_DEFINED_LITERALS\n+\n+nssv_constexpr nonstd::sv_lite::string_view operator \"\" sv( const char* str, size_t len ) nssv_noexcept  // (1)\n+{\n+    return nonstd::sv_lite::string_view{ str, len };\n+}\n+\n+nssv_constexpr nonstd::sv_lite::u16string_view operator \"\" sv( const char16_t* str, size_t len ) nssv_noexcept  // (2)\n+{\n+    return nonstd::sv_lite::u16string_view{ str, len };\n+}\n+\n+nssv_constexpr nonstd::sv_lite::u32string_view operator \"\" sv( const char32_t* str, size_t len ) nssv_noexcept  // (3)\n+{\n+    return nonstd::sv_lite::u32string_view{ str, len };\n+}\n+\n+nssv_constexpr nonstd::sv_lite::wstring_view operator \"\" sv( const wchar_t* str, size_t len ) nssv_noexcept  // (4)\n+{\n+    return nonstd::sv_lite::wstring_view{ str, len };\n+}\n+\n+#endif // nssv_CONFIG_STD_SV_OPERATOR && nssv_HAVE_STD_DEFINED_LITERALS\n+\n+#if nssv_CONFIG_USR_SV_OPERATOR\n+\n+nssv_constexpr nonstd::sv_lite::string_view operator \"\" _sv( const char* str, size_t len ) nssv_noexcept  // (1)\n+{\n+    return nonstd::sv_lite::string_view{ str, len };\n+}\n+\n+nssv_constexpr nonstd::sv_lite::u16string_view operator \"\" _sv( const char16_t* str, size_t len ) nssv_noexcept  // (2)\n+{\n+    return nonstd::sv_lite::u16string_view{ str, len };\n+}\n+\n+nssv_constexpr nonstd::sv_lite::u32string_view operator \"\" _sv( const char32_t* str, size_t len ) nssv_noexcept  // (3)\n+{\n+    return nonstd::sv_lite::u32string_view{ str, len };\n+}\n+\n+nssv_constexpr nonstd::sv_lite::wstring_view operator \"\" _sv( const wchar_t* str, size_t len ) nssv_noexcept  // (4)\n+{\n+    return nonstd::sv_lite::wstring_view{ str, len };\n+}\n+\n+#endif // nssv_CONFIG_USR_SV_OPERATOR\n+\n+}}} // namespace nonstd::literals::string_view_literals\n+\n+#endif\n+\n+//\n+// Extensions for std::string:\n+//\n+\n+#if nssv_CONFIG_CONVERSION_STD_STRING_FREE_FUNCTIONS\n+\n+namespace nonstd {\n+namespace sv_lite {\n+\n+// Exclude MSVC 14 (19.00): it yields ambiguous to_string():\n+\n+#if nssv_CPP11_OR_GREATER && nssv_COMPILER_MSVC_VERSION != 140\n+\n+template< class CharT, class Traits, class Allocator = std::allocator<CharT> >\n+std::basic_string<CharT, Traits, Allocator>\n+to_string( basic_string_view<CharT, Traits> v, Allocator const & a = Allocator() )\n+{\n+    return std::basic_string<CharT,Traits, Allocator>( v.begin(), v.end(), a );\n+}\n+\n+#else\n+\n+template< class CharT, class Traits >\n+std::basic_string<CharT, Traits>\n+to_string( basic_string_view<CharT, Traits> v )\n+{\n+    return std::basic_string<CharT, Traits>( v.begin(), v.end() );\n+}\n+\n+template< class CharT, class Traits, class Allocator >\n+std::basic_string<CharT, Traits, Allocator>\n+to_string( basic_string_view<CharT, Traits> v, Allocator const & a )\n+{\n+    return std::basic_string<CharT, Traits, Allocator>( v.begin(), v.end(), a );\n+}\n+\n+#endif // nssv_CPP11_OR_GREATER\n+\n+template< class CharT, class Traits, class Allocator >\n+basic_string_view<CharT, Traits>\n+to_string_view( std::basic_string<CharT, Traits, Allocator> const & s )\n+{\n+    return basic_string_view<CharT, Traits>( s.data(), s.size() );\n+}\n+\n+}} // namespace nonstd::sv_lite\n+\n+#endif // nssv_CONFIG_CONVERSION_STD_STRING_FREE_FUNCTIONS\n+\n+//\n+// make types and algorithms available in namespace nonstd:\n+//\n+\n+namespace nonstd {\n+\n+using sv_lite::basic_string_view;\n+using sv_lite::string_view;\n+using sv_lite::wstring_view;\n+\n+#if nssv_HAVE_WCHAR16_T\n+using sv_lite::u16string_view;\n+#endif\n+#if nssv_HAVE_WCHAR32_T\n+using sv_lite::u32string_view;\n+#endif\n+\n+// literal \"sv\"\n+\n+using sv_lite::operator==;\n+using sv_lite::operator!=;\n+using sv_lite::operator<;\n+using sv_lite::operator<=;\n+using sv_lite::operator>;\n+using sv_lite::operator>=;\n+\n+using sv_lite::operator<<;\n+\n+#if nssv_CONFIG_CONVERSION_STD_STRING_FREE_FUNCTIONS\n+using sv_lite::to_string;\n+using sv_lite::to_string_view;\n+#endif\n+\n+} // namespace nonstd\n+\n+// 24.4.5 Hash support (C++11):\n+\n+// Note: The hash value of a string view object is equal to the hash value of\n+// the corresponding string object.\n+\n+#if nssv_HAVE_STD_HASH\n+\n+#include <functional>\n+\n+namespace std {\n+\n+template<>\n+struct hash< nonstd::string_view >\n+{\n+public:\n+    std::size_t operator()( nonstd::string_view v ) const nssv_noexcept\n+    {\n+        return std::hash<std::string>()( std::string( v.data(), v.size() ) );\n+    }\n+};\n+\n+template<>\n+struct hash< nonstd::wstring_view >\n+{\n+public:\n+    std::size_t operator()( nonstd::wstring_view v ) const nssv_noexcept\n+    {\n+        return std::hash<std::wstring>()( std::wstring( v.data(), v.size() ) );\n+    }\n+};\n+\n+template<>\n+struct hash< nonstd::u16string_view >\n+{\n+public:\n+    std::size_t operator()( nonstd::u16string_view v ) const nssv_noexcept\n+    {\n+        return std::hash<std::u16string>()( std::u16string( v.data(), v.size() ) );\n+    }\n+};\n+\n+template<>\n+struct hash< nonstd::u32string_view >\n+{\n+public:\n+    std::size_t operator()( nonstd::u32string_view v ) const nssv_noexcept\n+    {\n+        return std::hash<std::u32string>()( std::u32string( v.data(), v.size() ) );\n+    }\n+};\n+\n+} // namespace std\n+\n+#endif // nssv_HAVE_STD_HASH\n+\n+nssv_RESTORE_WARNINGS()\n+\n+#endif // nssv_HAVE_STD_STRING_VIEW\n+#endif // NONSTD_SV_LITE_H_INCLUDED\ndiff --git a/dev/release/rat_exclude_files.txt b/dev/release/rat_exclude_files.txt\nindex e976ad05fc..27c04ac119 100644\n--- a/dev/release/rat_exclude_files.txt\n+++ b/dev/release/rat_exclude_files.txt\n@@ -13,6 +13,7 @@ cpp/src/arrow/io/mman.h\n cpp/src/arrow/util/random.h\n cpp/src/arrow/status.cc\n cpp/src/arrow/status.h\n+cpp/src/arrow/util/string_view/string_view.hpp\n cpp/src/arrow/util/variant.h\n cpp/src/arrow/util/variant/optional.h\n cpp/src/arrow/util/variant/recursive_wrapper.h\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T18:25:31.213+0000",
                    "updated": "2018-11-15T18:25:31.213+0000",
                    "started": "2018-11-15T18:25:31.212+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166563",
                    "issueId": "13198576"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 5400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@25ab07bd[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a1863d4[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@784e0e57[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4171d449[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4a62d9e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2a905a54[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2224c5e7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6db88e76[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58479482[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@702d2724[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7422df3b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5d4024f7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 5400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Nov 15 18:25:20 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-15T18:25:20.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3800/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-11-15T10:00:52.000+0000",
        "updated": "2018-11-15T18:35:03.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 5400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Vendor a string_view backport",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198576/comment/16688473",
                    "id": "16688473",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2974\n[https://github.com/apache/arrow/pull/2974]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-15T18:25:20.109+0000",
                    "updated": "2018-11-15T18:25:20.109+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|s00ivs:",
        "customfield_12314139": null
    }
}