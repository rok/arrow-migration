{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13337994",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337994",
    "key": "ARROW-10428",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jduong",
            "name": "jduong",
            "key": "jduong",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "James Duong",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334621",
                "id": "12334621",
                "name": "FlightRPC"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jduong",
            "name": "jduong",
            "key": "jduong",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "James Duong",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jduong",
            "name": "jduong",
            "key": "jduong",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "James Duong",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10428/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 15,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337994/worklog/506514",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo opened a new pull request #8554:\nURL: https://github.com/apache/arrow/pull/8554\n\n\n   Add a ClientMiddleware that can read HTTP Set-Cookie and Set-Cookie2 headers\r\n   from server responses and transmit corresponding Cookie headers\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-30T03:33:33.263+0000",
                    "updated": "2020-10-30T03:33:33.263+0000",
                    "started": "2020-10-30T03:33:33.262+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "506514",
                    "issueId": "13337994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337994/worklog/506520",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8554:\nURL: https://github.com/apache/arrow/pull/8554#issuecomment-719154603\n\n\n   https://issues.apache.org/jira/browse/ARROW-10428\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-30T03:48:15.382+0000",
                    "updated": "2020-10-30T03:48:15.382+0000",
                    "started": "2020-10-30T03:48:15.382+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "506520",
                    "issueId": "13337994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337994/worklog/507759",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #8554:\nURL: https://github.com/apache/arrow/pull/8554#discussion_r517601440\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/client/ClientCookieMiddleware.java\n##########\n@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.client;\n+\n+import java.net.HttpCookie;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+import org.apache.arrow.flight.CallHeaders;\n+import org.apache.arrow.flight.CallInfo;\n+import org.apache.arrow.flight.CallStatus;\n+import org.apache.arrow.flight.FlightClientMiddleware;\n+import org.apache.arrow.util.VisibleForTesting;\n+\n+/**\n+ * A client middleware for receiving and sending cookie information.\n+ * Note that this class will not persist permanent cookies beyond the lifetime\n+ * of this session.\n+ */\n+public class ClientCookieMiddleware implements FlightClientMiddleware {\n+  private static final String SET_COOKIE_HEADER = \"Set-Cookie\";\n+  private static final String SET_COOKIE2_HEADER = \"Set-Cookie2\";\n+  private static final String COOKIE_HEADER = \"Cookie\";\n+\n+  // Use a map to track the most recent version of a cookie from the server.\n+  // Note that cookie names are case-sensitive (but header names aren't).\n+  private Map<String, HttpCookie> cookies = new HashMap<>();\n\nReview comment:\n       Done.\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/client/ClientCookieMiddleware.java\n##########\n@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.client;\n+\n+import java.net.HttpCookie;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+import org.apache.arrow.flight.CallHeaders;\n+import org.apache.arrow.flight.CallInfo;\n+import org.apache.arrow.flight.CallStatus;\n+import org.apache.arrow.flight.FlightClientMiddleware;\n+import org.apache.arrow.util.VisibleForTesting;\n+\n+/**\n+ * A client middleware for receiving and sending cookie information.\n+ * Note that this class will not persist permanent cookies beyond the lifetime\n+ * of this session.\n+ */\n+public class ClientCookieMiddleware implements FlightClientMiddleware {\n+  private static final String SET_COOKIE_HEADER = \"Set-Cookie\";\n+  private static final String SET_COOKIE2_HEADER = \"Set-Cookie2\";\n\nReview comment:\n       Removed Set-Cookie2 support.\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/client/ClientCookieMiddleware.java\n##########\n@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.client;\n+\n+import java.net.HttpCookie;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+import org.apache.arrow.flight.CallHeaders;\n+import org.apache.arrow.flight.CallInfo;\n+import org.apache.arrow.flight.CallStatus;\n+import org.apache.arrow.flight.FlightClientMiddleware;\n+import org.apache.arrow.util.VisibleForTesting;\n+\n+/**\n+ * A client middleware for receiving and sending cookie information.\n+ * Note that this class will not persist permanent cookies beyond the lifetime\n+ * of this session.\n+ */\n+public class ClientCookieMiddleware implements FlightClientMiddleware {\n+  private static final String SET_COOKIE_HEADER = \"Set-Cookie\";\n+  private static final String SET_COOKIE2_HEADER = \"Set-Cookie2\";\n+  private static final String COOKIE_HEADER = \"Cookie\";\n+\n+  // Use a map to track the most recent version of a cookie from the server.\n+  // Note that cookie names are case-sensitive (but header names aren't).\n+  private Map<String, HttpCookie> cookies = new HashMap<>();\n+\n+  public ClientCookieMiddleware() {\n+  }\n+\n+  /**\n+   * Factory used within FlightClient.\n+   */\n+  public static class Factory implements FlightClientMiddleware.Factory {\n+    @Override\n+    public ClientCookieMiddleware onCallStarted(CallInfo info) {\n+      return new ClientCookieMiddleware();\n+    }\n+  }\n+\n+  @Override\n+  public void onBeforeSendingHeaders(CallHeaders outgoingHeaders) {\n+    final String cookieValue = calculateCookieString();\n+    if (!cookieValue.isEmpty()) {\n+      outgoingHeaders.insert(COOKIE_HEADER, cookieValue);\n+    }\n+  }\n+\n+  @Override\n+  public void onHeadersReceived(CallHeaders incomingHeaders) {\n+    // Note: A cookie defined once will continue to be used in all subsequent\n+    // requests on the client instance. The server can send the same cookie again\n+    // with a different value and the client will use the new value in future requests.\n+    // The server can also update a cookie to have an Expiry in the past or negative age\n+    // to signal that the client should stop using the cookie immediately.\n+    final Consumer<String> handleSetCookieHeader = (headerValue) -> {\n+      final List<HttpCookie> parsedCookies = HttpCookie.parse(headerValue);\n+      parsedCookies.forEach(parsedCookie -> cookies.put(parsedCookie.getName(), parsedCookie));\n+    };\n+    incomingHeaders.getAll(SET_COOKIE_HEADER).forEach(handleSetCookieHeader);\n+    incomingHeaders.getAll(SET_COOKIE2_HEADER).forEach(handleSetCookieHeader);\n+  }\n+\n+  @Override\n+  public void onCallCompleted(CallStatus status) {\n+\n+  }\n+\n+  @VisibleForTesting\n+  String calculateCookieString() {\n\nReview comment:\n       Done.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-04T20:08:07.936+0000",
                    "updated": "2020-11-04T20:08:07.936+0000",
                    "started": "2020-11-04T20:08:07.936+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507759",
                    "issueId": "13337994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337994/worklog/508140",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #8554:\nURL: https://github.com/apache/arrow/pull/8554#issuecomment-722400276\n\n\n   Just to link things: #8572 is implementing support for arbitrary headers, perhaps we should think about if cookies should build on top of that support.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-05T14:08:05.142+0000",
                    "updated": "2020-11-05T14:08:05.142+0000",
                    "started": "2020-11-05T14:08:05.142+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508140",
                    "issueId": "13337994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337994/worklog/508185",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on pull request #8554:\nURL: https://github.com/apache/arrow/pull/8554#issuecomment-722504311\n\n\n   > Just to link things: #8572 is implementing support for arbitrary headers, perhaps we should think about if cookies should build on top of that support.\r\n   \r\n   I'm leaning towards keeping this as just middleware and not involving CallOptions. #8572 is for letting the client arbitrarily add headers at the time of a request, whereas cookie-headers aren't arbitrary and should be automatically sent. The checking of expiration should also be automatic.\r\n   \r\n   We could rework this patch to have a subclass of HeaderCallOption that lazily retrieves the cookie header from the cookie middleware during wrapStub, but I feel this is more difficult/error-prone for app-developers.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-05T16:57:01.404+0000",
                    "updated": "2020-11-05T16:57:01.404+0000",
                    "started": "2020-11-05T16:57:01.404+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508185",
                    "issueId": "13337994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337994/worklog/508322",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #8554:\nURL: https://github.com/apache/arrow/pull/8554#issuecomment-722749650\n\n\n   > I'm leaning towards keeping this as just middleware and not involving CallOptions. \r\n   \r\n   Sounds good to me.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T01:31:35.254+0000",
                    "updated": "2020-11-06T01:31:35.254+0000",
                    "started": "2020-11-06T01:31:35.253+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508322",
                    "issueId": "13337994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337994/worklog/508324",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #8554:\nURL: https://github.com/apache/arrow/pull/8554#discussion_r518471847\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/client/ClientCookieMiddleware.java\n##########\n@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.client;\n+\n+import java.net.HttpCookie;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+import org.apache.arrow.flight.CallHeaders;\n+import org.apache.arrow.flight.CallInfo;\n+import org.apache.arrow.flight.CallStatus;\n+import org.apache.arrow.flight.FlightClientMiddleware;\n+import org.apache.arrow.util.VisibleForTesting;\n+\n+/**\n+ * A client middleware for receiving and sending cookie information.\n+ * Note that this class will not persist permanent cookies beyond the lifetime\n+ * of this session.\n+ */\n+public class ClientCookieMiddleware implements FlightClientMiddleware {\n+  private static final String SET_COOKIE_HEADER = \"Set-Cookie\";\n+  private static final String COOKIE_HEADER = \"Cookie\";\n+  private final Factory factory;\n+\n+  @VisibleForTesting\n+  ClientCookieMiddleware(Factory factory) {\n+    this.factory = factory;\n+  }\n+\n+  /**\n+   * Factory used within FlightClient.\n+   */\n+  public static class Factory implements FlightClientMiddleware.Factory {\n+    // Use a map to track the most recent version of a cookie from the server.\n+    // Note that cookie names are case-sensitive (but header names aren't).\n+    private ConcurrentMap<String, HttpCookie> cookies = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public ClientCookieMiddleware onCallStarted(CallInfo info) {\n+      return new ClientCookieMiddleware(this);\n+    }\n+  }\n+\n+  @Override\n+  public void onBeforeSendingHeaders(CallHeaders outgoingHeaders) {\n+    final String cookieValue = getValidCookiesAsString();\n+    if (!cookieValue.isEmpty()) {\n+      outgoingHeaders.insert(COOKIE_HEADER, cookieValue);\n+    }\n+  }\n+\n+  @Override\n+  public void onHeadersReceived(CallHeaders incomingHeaders) {\n+    // Note: A cookie defined once will continue to be used in all subsequent\n+    // requests on the client instance. The server can send the same cookie again\n+    // with a different value and the client will use the new value in future requests.\n+    // The server can also update a cookie to have an Expiry in the past or negative age\n+    // to signal that the client should stop using the cookie immediately.\n+    final Consumer<String> handleSetCookieHeader = (headerValue) -> {\n+      final List<HttpCookie> parsedCookies = HttpCookie.parse(headerValue);\n\nReview comment:\n       Also instead of a lambda it may be clearer to define Factory#updateFromSetCookieHeader or something like that.\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/client/ClientCookieMiddleware.java\n##########\n@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.client;\n+\n+import java.net.HttpCookie;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+import org.apache.arrow.flight.CallHeaders;\n+import org.apache.arrow.flight.CallInfo;\n+import org.apache.arrow.flight.CallStatus;\n+import org.apache.arrow.flight.FlightClientMiddleware;\n+import org.apache.arrow.util.VisibleForTesting;\n+\n+/**\n+ * A client middleware for receiving and sending cookie information.\n+ * Note that this class will not persist permanent cookies beyond the lifetime\n+ * of this session.\n+ */\n+public class ClientCookieMiddleware implements FlightClientMiddleware {\n+  private static final String SET_COOKIE_HEADER = \"Set-Cookie\";\n+  private static final String COOKIE_HEADER = \"Cookie\";\n+  private final Factory factory;\n+\n+  @VisibleForTesting\n+  ClientCookieMiddleware(Factory factory) {\n+    this.factory = factory;\n+  }\n+\n+  /**\n+   * Factory used within FlightClient.\n+   */\n+  public static class Factory implements FlightClientMiddleware.Factory {\n+    // Use a map to track the most recent version of a cookie from the server.\n+    // Note that cookie names are case-sensitive (but header names aren't).\n+    private ConcurrentMap<String, HttpCookie> cookies = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public ClientCookieMiddleware onCallStarted(CallInfo info) {\n+      return new ClientCookieMiddleware(this);\n+    }\n+  }\n+\n+  @Override\n+  public void onBeforeSendingHeaders(CallHeaders outgoingHeaders) {\n+    final String cookieValue = getValidCookiesAsString();\n+    if (!cookieValue.isEmpty()) {\n+      outgoingHeaders.insert(COOKIE_HEADER, cookieValue);\n+    }\n+  }\n+\n+  @Override\n+  public void onHeadersReceived(CallHeaders incomingHeaders) {\n+    // Note: A cookie defined once will continue to be used in all subsequent\n+    // requests on the client instance. The server can send the same cookie again\n+    // with a different value and the client will use the new value in future requests.\n+    // The server can also update a cookie to have an Expiry in the past or negative age\n+    // to signal that the client should stop using the cookie immediately.\n+    final Consumer<String> handleSetCookieHeader = (headerValue) -> {\n+      final List<HttpCookie> parsedCookies = HttpCookie.parse(headerValue);\n\nReview comment:\n       Should we handle IllegalArgumentException here from HttpCookie.parse?\n\n##########\nFile path: java/flight/flight-core/src/test/java/org/apache/arrow/flight/client/TestCookieHandling.java\n##########\n@@ -0,0 +1,252 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.client;\n+\n+import java.io.IOException;\n+\n+import org.apache.arrow.flight.CallHeaders;\n+import org.apache.arrow.flight.CallInfo;\n+import org.apache.arrow.flight.CallStatus;\n+import org.apache.arrow.flight.Criteria;\n+import org.apache.arrow.flight.ErrorFlightMetadata;\n+import org.apache.arrow.flight.FlightClient;\n+import org.apache.arrow.flight.FlightInfo;\n+import org.apache.arrow.flight.FlightProducer;\n+import org.apache.arrow.flight.FlightServer;\n+import org.apache.arrow.flight.FlightServerMiddleware;\n+import org.apache.arrow.flight.FlightTestUtil;\n+import org.apache.arrow.flight.NoOpFlightProducer;\n+import org.apache.arrow.flight.RequestContext;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.AutoCloseables;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for correct handling of cookies from the FlightClient using {@link ClientCookieMiddleware}.\n+ */\n+public class TestCookieHandling {\n+  private static final String SET_COOKIE_HEADER = \"Set-Cookie\";\n+  private static final String COOKIE_HEADER = \"Cookie\";\n+  private BufferAllocator allocator;\n+  private FlightServer server;\n+  private FlightClient client;\n+\n+  private ClientCookieMiddlewareTestFactory testFactory = new ClientCookieMiddlewareTestFactory();\n+  private ClientCookieMiddleware cookieMiddleware = new ClientCookieMiddleware(testFactory);\n+\n+  @Before\n+  public void setup() throws Exception {\n+    allocator = new RootAllocator(Long.MAX_VALUE);\n+    startServerAndClient();\n+  }\n+\n+  @After\n+  public void cleanup() throws Exception {\n+    cookieMiddleware = new ClientCookieMiddleware(testFactory);\n+    AutoCloseables.close(client, server, allocator);\n+    client = null;\n+    server = null;\n+    allocator = null;\n+  }\n+\n+  @Test\n+  public void basicCookie() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+  }\n+\n+  @Test\n+  public void cookieStaysAfterMultipleRequests() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+  }\n+\n+  @Test\n+  public void cookieAutoExpires() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v; Max-Age=2\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    // Note: using max-age changes cookie version from 0->1, which quotes values.\n+    Assert.assertEquals(\"k=\\\"v\\\"\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=\\\"v\\\"\", cookieMiddleware.getValidCookiesAsString());\n+\n+    try {\n+      Thread.sleep(5000);\n\nReview comment:\n       This is a little icky, though it appears there's no way to mock time for HttpCookie. \n\n##########\nFile path: java/flight/flight-core/src/test/java/org/apache/arrow/flight/client/TestCookieHandling.java\n##########\n@@ -0,0 +1,252 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.client;\n+\n+import java.io.IOException;\n+\n+import org.apache.arrow.flight.CallHeaders;\n+import org.apache.arrow.flight.CallInfo;\n+import org.apache.arrow.flight.CallStatus;\n+import org.apache.arrow.flight.Criteria;\n+import org.apache.arrow.flight.ErrorFlightMetadata;\n+import org.apache.arrow.flight.FlightClient;\n+import org.apache.arrow.flight.FlightInfo;\n+import org.apache.arrow.flight.FlightProducer;\n+import org.apache.arrow.flight.FlightServer;\n+import org.apache.arrow.flight.FlightServerMiddleware;\n+import org.apache.arrow.flight.FlightTestUtil;\n+import org.apache.arrow.flight.NoOpFlightProducer;\n+import org.apache.arrow.flight.RequestContext;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.AutoCloseables;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for correct handling of cookies from the FlightClient using {@link ClientCookieMiddleware}.\n+ */\n+public class TestCookieHandling {\n+  private static final String SET_COOKIE_HEADER = \"Set-Cookie\";\n+  private static final String COOKIE_HEADER = \"Cookie\";\n+  private BufferAllocator allocator;\n+  private FlightServer server;\n+  private FlightClient client;\n+\n+  private ClientCookieMiddlewareTestFactory testFactory = new ClientCookieMiddlewareTestFactory();\n+  private ClientCookieMiddleware cookieMiddleware = new ClientCookieMiddleware(testFactory);\n+\n+  @Before\n+  public void setup() throws Exception {\n+    allocator = new RootAllocator(Long.MAX_VALUE);\n+    startServerAndClient();\n+  }\n+\n+  @After\n+  public void cleanup() throws Exception {\n+    cookieMiddleware = new ClientCookieMiddleware(testFactory);\n+    AutoCloseables.close(client, server, allocator);\n+    client = null;\n+    server = null;\n+    allocator = null;\n+  }\n+\n+  @Test\n+  public void basicCookie() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+  }\n+\n+  @Test\n+  public void cookieStaysAfterMultipleRequests() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+  }\n+\n+  @Test\n+  public void cookieAutoExpires() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v; Max-Age=2\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    // Note: using max-age changes cookie version from 0->1, which quotes values.\n+    Assert.assertEquals(\"k=\\\"v\\\"\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=\\\"v\\\"\", cookieMiddleware.getValidCookiesAsString());\n+\n+    try {\n+      Thread.sleep(5000);\n+    } catch (InterruptedException ignored) {\n+    }\n+\n+    // Verify that the k cookie was discarded because it expired.\n+    Assert.assertTrue(cookieMiddleware.getValidCookiesAsString().isEmpty());\n+  }\n+\n+  @Test\n+  public void cookieExplicitlyExpires() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v; Max-Age=2\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    // Note: using max-age changes cookie version from 0->1, which quotes values.\n+    Assert.assertEquals(\"k=\\\"v\\\"\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v; Max-Age=-2\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+\n+    // Verify that the k cookie was discarded because the server told the client it is expired.\n+    Assert.assertTrue(cookieMiddleware.getValidCookiesAsString().isEmpty());\n\nReview comment:\n       It seems this test doesn't always succeed.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T01:39:20.437+0000",
                    "updated": "2020-11-06T01:39:20.437+0000",
                    "started": "2020-11-06T01:39:20.437+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508324",
                    "issueId": "13337994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337994/worklog/508563",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #8554:\nURL: https://github.com/apache/arrow/pull/8554#discussion_r518941906\n\n\n\n##########\nFile path: java/flight/flight-core/src/test/java/org/apache/arrow/flight/client/TestCookieHandling.java\n##########\n@@ -0,0 +1,252 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.client;\n+\n+import java.io.IOException;\n+\n+import org.apache.arrow.flight.CallHeaders;\n+import org.apache.arrow.flight.CallInfo;\n+import org.apache.arrow.flight.CallStatus;\n+import org.apache.arrow.flight.Criteria;\n+import org.apache.arrow.flight.ErrorFlightMetadata;\n+import org.apache.arrow.flight.FlightClient;\n+import org.apache.arrow.flight.FlightInfo;\n+import org.apache.arrow.flight.FlightProducer;\n+import org.apache.arrow.flight.FlightServer;\n+import org.apache.arrow.flight.FlightServerMiddleware;\n+import org.apache.arrow.flight.FlightTestUtil;\n+import org.apache.arrow.flight.NoOpFlightProducer;\n+import org.apache.arrow.flight.RequestContext;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.AutoCloseables;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for correct handling of cookies from the FlightClient using {@link ClientCookieMiddleware}.\n+ */\n+public class TestCookieHandling {\n+  private static final String SET_COOKIE_HEADER = \"Set-Cookie\";\n+  private static final String COOKIE_HEADER = \"Cookie\";\n+  private BufferAllocator allocator;\n+  private FlightServer server;\n+  private FlightClient client;\n+\n+  private ClientCookieMiddlewareTestFactory testFactory = new ClientCookieMiddlewareTestFactory();\n+  private ClientCookieMiddleware cookieMiddleware = new ClientCookieMiddleware(testFactory);\n+\n+  @Before\n+  public void setup() throws Exception {\n+    allocator = new RootAllocator(Long.MAX_VALUE);\n+    startServerAndClient();\n+  }\n+\n+  @After\n+  public void cleanup() throws Exception {\n+    cookieMiddleware = new ClientCookieMiddleware(testFactory);\n+    AutoCloseables.close(client, server, allocator);\n+    client = null;\n+    server = null;\n+    allocator = null;\n+  }\n+\n+  @Test\n+  public void basicCookie() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+  }\n+\n+  @Test\n+  public void cookieStaysAfterMultipleRequests() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+  }\n+\n+  @Test\n+  public void cookieAutoExpires() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v; Max-Age=2\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    // Note: using max-age changes cookie version from 0->1, which quotes values.\n+    Assert.assertEquals(\"k=\\\"v\\\"\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=\\\"v\\\"\", cookieMiddleware.getValidCookiesAsString());\n+\n+    try {\n+      Thread.sleep(5000);\n\nReview comment:\n       I'll mark this test as @Ignore, since this is essentially just testing that we call isExpired correctly, which we do in the max-age -2 test.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T18:53:20.365+0000",
                    "updated": "2020-11-06T18:53:20.365+0000",
                    "started": "2020-11-06T18:53:20.365+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508563",
                    "issueId": "13337994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337994/worklog/508641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #8554:\nURL: https://github.com/apache/arrow/pull/8554#discussion_r519045924\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/client/ClientCookieMiddleware.java\n##########\n@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.client;\n+\n+import java.net.HttpCookie;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+import org.apache.arrow.flight.CallHeaders;\n+import org.apache.arrow.flight.CallInfo;\n+import org.apache.arrow.flight.CallStatus;\n+import org.apache.arrow.flight.FlightClientMiddleware;\n+import org.apache.arrow.util.VisibleForTesting;\n+\n+/**\n+ * A client middleware for receiving and sending cookie information.\n+ * Note that this class will not persist permanent cookies beyond the lifetime\n+ * of this session.\n+ */\n+public class ClientCookieMiddleware implements FlightClientMiddleware {\n+  private static final String SET_COOKIE_HEADER = \"Set-Cookie\";\n+  private static final String COOKIE_HEADER = \"Cookie\";\n+  private final Factory factory;\n+\n+  @VisibleForTesting\n+  ClientCookieMiddleware(Factory factory) {\n+    this.factory = factory;\n+  }\n+\n+  /**\n+   * Factory used within FlightClient.\n+   */\n+  public static class Factory implements FlightClientMiddleware.Factory {\n+    // Use a map to track the most recent version of a cookie from the server.\n+    // Note that cookie names are case-sensitive (but header names aren't).\n+    private ConcurrentMap<String, HttpCookie> cookies = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public ClientCookieMiddleware onCallStarted(CallInfo info) {\n+      return new ClientCookieMiddleware(this);\n+    }\n+  }\n+\n+  @Override\n+  public void onBeforeSendingHeaders(CallHeaders outgoingHeaders) {\n+    final String cookieValue = getValidCookiesAsString();\n+    if (!cookieValue.isEmpty()) {\n+      outgoingHeaders.insert(COOKIE_HEADER, cookieValue);\n+    }\n+  }\n+\n+  @Override\n+  public void onHeadersReceived(CallHeaders incomingHeaders) {\n+    // Note: A cookie defined once will continue to be used in all subsequent\n+    // requests on the client instance. The server can send the same cookie again\n+    // with a different value and the client will use the new value in future requests.\n+    // The server can also update a cookie to have an Expiry in the past or negative age\n+    // to signal that the client should stop using the cookie immediately.\n+    final Consumer<String> handleSetCookieHeader = (headerValue) -> {\n+      final List<HttpCookie> parsedCookies = HttpCookie.parse(headerValue);\n\nReview comment:\n       Done\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T22:57:50.417+0000",
                    "updated": "2020-11-06T22:57:50.417+0000",
                    "started": "2020-11-06T22:57:50.417+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508641",
                    "issueId": "13337994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337994/worklog/508644",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #8554:\nURL: https://github.com/apache/arrow/pull/8554#discussion_r519046814\n\n\n\n##########\nFile path: java/flight/flight-core/src/test/java/org/apache/arrow/flight/client/TestCookieHandling.java\n##########\n@@ -0,0 +1,252 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.client;\n+\n+import java.io.IOException;\n+\n+import org.apache.arrow.flight.CallHeaders;\n+import org.apache.arrow.flight.CallInfo;\n+import org.apache.arrow.flight.CallStatus;\n+import org.apache.arrow.flight.Criteria;\n+import org.apache.arrow.flight.ErrorFlightMetadata;\n+import org.apache.arrow.flight.FlightClient;\n+import org.apache.arrow.flight.FlightInfo;\n+import org.apache.arrow.flight.FlightProducer;\n+import org.apache.arrow.flight.FlightServer;\n+import org.apache.arrow.flight.FlightServerMiddleware;\n+import org.apache.arrow.flight.FlightTestUtil;\n+import org.apache.arrow.flight.NoOpFlightProducer;\n+import org.apache.arrow.flight.RequestContext;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.AutoCloseables;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for correct handling of cookies from the FlightClient using {@link ClientCookieMiddleware}.\n+ */\n+public class TestCookieHandling {\n+  private static final String SET_COOKIE_HEADER = \"Set-Cookie\";\n+  private static final String COOKIE_HEADER = \"Cookie\";\n+  private BufferAllocator allocator;\n+  private FlightServer server;\n+  private FlightClient client;\n+\n+  private ClientCookieMiddlewareTestFactory testFactory = new ClientCookieMiddlewareTestFactory();\n+  private ClientCookieMiddleware cookieMiddleware = new ClientCookieMiddleware(testFactory);\n+\n+  @Before\n+  public void setup() throws Exception {\n+    allocator = new RootAllocator(Long.MAX_VALUE);\n+    startServerAndClient();\n+  }\n+\n+  @After\n+  public void cleanup() throws Exception {\n+    cookieMiddleware = new ClientCookieMiddleware(testFactory);\n+    AutoCloseables.close(client, server, allocator);\n+    client = null;\n+    server = null;\n+    allocator = null;\n+  }\n+\n+  @Test\n+  public void basicCookie() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+  }\n+\n+  @Test\n+  public void cookieStaysAfterMultipleRequests() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+  }\n+\n+  @Test\n+  public void cookieAutoExpires() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v; Max-Age=2\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    // Note: using max-age changes cookie version from 0->1, which quotes values.\n+    Assert.assertEquals(\"k=\\\"v\\\"\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=\\\"v\\\"\", cookieMiddleware.getValidCookiesAsString());\n+\n+    try {\n+      Thread.sleep(5000);\n+    } catch (InterruptedException ignored) {\n+    }\n+\n+    // Verify that the k cookie was discarded because it expired.\n+    Assert.assertTrue(cookieMiddleware.getValidCookiesAsString().isEmpty());\n+  }\n+\n+  @Test\n+  public void cookieExplicitlyExpires() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v; Max-Age=2\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    // Note: using max-age changes cookie version from 0->1, which quotes values.\n+    Assert.assertEquals(\"k=\\\"v\\\"\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v; Max-Age=-2\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+\n+    // Verify that the k cookie was discarded because the server told the client it is expired.\n+    Assert.assertTrue(cookieMiddleware.getValidCookiesAsString().isEmpty());\n\nReview comment:\n       So I looked into this and found that on my Mac, the JDK explicitly checks if Max-Age == -1 (MAX_AGE_UNSPECIFIED), treat the max age as unset.\r\n   In the OpenJDK 11 source code though, they treat any negative number as max age unset:\r\n   https://github.com/openjdk/jdk11u-dev/blob/75a42602826c32a1053b10188ec3826eb9c0c898/src/java.base/share/classes/java/net/HttpCookie.java#L236\r\n   \r\n   The RFC states that 0, and any value less than zero is supposed to be treated as immediately expired.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T23:00:35.849+0000",
                    "updated": "2020-11-06T23:00:35.849+0000",
                    "started": "2020-11-06T23:00:35.849+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508644",
                    "issueId": "13337994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337994/worklog/508645",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #8554:\nURL: https://github.com/apache/arrow/pull/8554#discussion_r519047132\n\n\n\n##########\nFile path: java/flight/flight-core/src/test/java/org/apache/arrow/flight/client/TestCookieHandling.java\n##########\n@@ -0,0 +1,252 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.client;\n+\n+import java.io.IOException;\n+\n+import org.apache.arrow.flight.CallHeaders;\n+import org.apache.arrow.flight.CallInfo;\n+import org.apache.arrow.flight.CallStatus;\n+import org.apache.arrow.flight.Criteria;\n+import org.apache.arrow.flight.ErrorFlightMetadata;\n+import org.apache.arrow.flight.FlightClient;\n+import org.apache.arrow.flight.FlightInfo;\n+import org.apache.arrow.flight.FlightProducer;\n+import org.apache.arrow.flight.FlightServer;\n+import org.apache.arrow.flight.FlightServerMiddleware;\n+import org.apache.arrow.flight.FlightTestUtil;\n+import org.apache.arrow.flight.NoOpFlightProducer;\n+import org.apache.arrow.flight.RequestContext;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.AutoCloseables;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for correct handling of cookies from the FlightClient using {@link ClientCookieMiddleware}.\n+ */\n+public class TestCookieHandling {\n+  private static final String SET_COOKIE_HEADER = \"Set-Cookie\";\n+  private static final String COOKIE_HEADER = \"Cookie\";\n+  private BufferAllocator allocator;\n+  private FlightServer server;\n+  private FlightClient client;\n+\n+  private ClientCookieMiddlewareTestFactory testFactory = new ClientCookieMiddlewareTestFactory();\n+  private ClientCookieMiddleware cookieMiddleware = new ClientCookieMiddleware(testFactory);\n+\n+  @Before\n+  public void setup() throws Exception {\n+    allocator = new RootAllocator(Long.MAX_VALUE);\n+    startServerAndClient();\n+  }\n+\n+  @After\n+  public void cleanup() throws Exception {\n+    cookieMiddleware = new ClientCookieMiddleware(testFactory);\n+    AutoCloseables.close(client, server, allocator);\n+    client = null;\n+    server = null;\n+    allocator = null;\n+  }\n+\n+  @Test\n+  public void basicCookie() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+  }\n+\n+  @Test\n+  public void cookieStaysAfterMultipleRequests() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+  }\n+\n+  @Test\n+  public void cookieAutoExpires() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v; Max-Age=2\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    // Note: using max-age changes cookie version from 0->1, which quotes values.\n+    Assert.assertEquals(\"k=\\\"v\\\"\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=\\\"v\\\"\", cookieMiddleware.getValidCookiesAsString());\n+\n+    try {\n+      Thread.sleep(5000);\n+    } catch (InterruptedException ignored) {\n+    }\n+\n+    // Verify that the k cookie was discarded because it expired.\n+    Assert.assertTrue(cookieMiddleware.getValidCookiesAsString().isEmpty());\n+  }\n+\n+  @Test\n+  public void cookieExplicitlyExpires() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v; Max-Age=2\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    // Note: using max-age changes cookie version from 0->1, which quotes values.\n+    Assert.assertEquals(\"k=\\\"v\\\"\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v; Max-Age=-2\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+\n+    // Verify that the k cookie was discarded because the server told the client it is expired.\n+    Assert.assertTrue(cookieMiddleware.getValidCookiesAsString().isEmpty());\n\nReview comment:\n       I've changed this test to use Max-Age==0 and added a comment.\r\n   \r\n   This bug is still in OpenJDK 15: https://github.com/openjdk/jdk15u/blob/a96a5c59ac49ffb063b093a2674ede2deed87b13/src/java.base/share/classes/java/net/HttpCookie.java#L242\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T23:01:49.135+0000",
                    "updated": "2020-11-06T23:01:49.135+0000",
                    "started": "2020-11-06T23:01:49.134+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508645",
                    "issueId": "13337994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337994/worklog/508646",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #8554:\nURL: https://github.com/apache/arrow/pull/8554#discussion_r519049014\n\n\n\n##########\nFile path: java/flight/flight-core/src/test/java/org/apache/arrow/flight/client/TestCookieHandling.java\n##########\n@@ -0,0 +1,252 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.client;\n+\n+import java.io.IOException;\n+\n+import org.apache.arrow.flight.CallHeaders;\n+import org.apache.arrow.flight.CallInfo;\n+import org.apache.arrow.flight.CallStatus;\n+import org.apache.arrow.flight.Criteria;\n+import org.apache.arrow.flight.ErrorFlightMetadata;\n+import org.apache.arrow.flight.FlightClient;\n+import org.apache.arrow.flight.FlightInfo;\n+import org.apache.arrow.flight.FlightProducer;\n+import org.apache.arrow.flight.FlightServer;\n+import org.apache.arrow.flight.FlightServerMiddleware;\n+import org.apache.arrow.flight.FlightTestUtil;\n+import org.apache.arrow.flight.NoOpFlightProducer;\n+import org.apache.arrow.flight.RequestContext;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.AutoCloseables;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for correct handling of cookies from the FlightClient using {@link ClientCookieMiddleware}.\n+ */\n+public class TestCookieHandling {\n+  private static final String SET_COOKIE_HEADER = \"Set-Cookie\";\n+  private static final String COOKIE_HEADER = \"Cookie\";\n+  private BufferAllocator allocator;\n+  private FlightServer server;\n+  private FlightClient client;\n+\n+  private ClientCookieMiddlewareTestFactory testFactory = new ClientCookieMiddlewareTestFactory();\n+  private ClientCookieMiddleware cookieMiddleware = new ClientCookieMiddleware(testFactory);\n+\n+  @Before\n+  public void setup() throws Exception {\n+    allocator = new RootAllocator(Long.MAX_VALUE);\n+    startServerAndClient();\n+  }\n+\n+  @After\n+  public void cleanup() throws Exception {\n+    cookieMiddleware = new ClientCookieMiddleware(testFactory);\n+    AutoCloseables.close(client, server, allocator);\n+    client = null;\n+    server = null;\n+    allocator = null;\n+  }\n+\n+  @Test\n+  public void basicCookie() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+  }\n+\n+  @Test\n+  public void cookieStaysAfterMultipleRequests() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+  }\n+\n+  @Test\n+  public void cookieAutoExpires() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v; Max-Age=2\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    // Note: using max-age changes cookie version from 0->1, which quotes values.\n+    Assert.assertEquals(\"k=\\\"v\\\"\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=\\\"v\\\"\", cookieMiddleware.getValidCookiesAsString());\n+\n+    try {\n+      Thread.sleep(5000);\n+    } catch (InterruptedException ignored) {\n+    }\n+\n+    // Verify that the k cookie was discarded because it expired.\n+    Assert.assertTrue(cookieMiddleware.getValidCookiesAsString().isEmpty());\n+  }\n+\n+  @Test\n+  public void cookieExplicitlyExpires() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v; Max-Age=2\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    // Note: using max-age changes cookie version from 0->1, which quotes values.\n+    Assert.assertEquals(\"k=\\\"v\\\"\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v; Max-Age=-2\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+\n+    // Verify that the k cookie was discarded because the server told the client it is expired.\n+    Assert.assertTrue(cookieMiddleware.getValidCookiesAsString().isEmpty());\n\nReview comment:\n       I added a note about this in ClientCookieMiddleware's class description.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T23:08:48.312+0000",
                    "updated": "2020-11-06T23:08:48.312+0000",
                    "started": "2020-11-06T23:08:48.311+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508646",
                    "issueId": "13337994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337994/worklog/508647",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #8554:\nURL: https://github.com/apache/arrow/pull/8554#discussion_r519050438\n\n\n\n##########\nFile path: java/flight/flight-core/src/test/java/org/apache/arrow/flight/client/TestCookieHandling.java\n##########\n@@ -0,0 +1,252 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight.client;\n+\n+import java.io.IOException;\n+\n+import org.apache.arrow.flight.CallHeaders;\n+import org.apache.arrow.flight.CallInfo;\n+import org.apache.arrow.flight.CallStatus;\n+import org.apache.arrow.flight.Criteria;\n+import org.apache.arrow.flight.ErrorFlightMetadata;\n+import org.apache.arrow.flight.FlightClient;\n+import org.apache.arrow.flight.FlightInfo;\n+import org.apache.arrow.flight.FlightProducer;\n+import org.apache.arrow.flight.FlightServer;\n+import org.apache.arrow.flight.FlightServerMiddleware;\n+import org.apache.arrow.flight.FlightTestUtil;\n+import org.apache.arrow.flight.NoOpFlightProducer;\n+import org.apache.arrow.flight.RequestContext;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.AutoCloseables;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for correct handling of cookies from the FlightClient using {@link ClientCookieMiddleware}.\n+ */\n+public class TestCookieHandling {\n+  private static final String SET_COOKIE_HEADER = \"Set-Cookie\";\n+  private static final String COOKIE_HEADER = \"Cookie\";\n+  private BufferAllocator allocator;\n+  private FlightServer server;\n+  private FlightClient client;\n+\n+  private ClientCookieMiddlewareTestFactory testFactory = new ClientCookieMiddlewareTestFactory();\n+  private ClientCookieMiddleware cookieMiddleware = new ClientCookieMiddleware(testFactory);\n+\n+  @Before\n+  public void setup() throws Exception {\n+    allocator = new RootAllocator(Long.MAX_VALUE);\n+    startServerAndClient();\n+  }\n+\n+  @After\n+  public void cleanup() throws Exception {\n+    cookieMiddleware = new ClientCookieMiddleware(testFactory);\n+    AutoCloseables.close(client, server, allocator);\n+    client = null;\n+    server = null;\n+    allocator = null;\n+  }\n+\n+  @Test\n+  public void basicCookie() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+  }\n+\n+  @Test\n+  public void cookieStaysAfterMultipleRequests() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=v\", cookieMiddleware.getValidCookiesAsString());\n+  }\n+\n+  @Test\n+  public void cookieAutoExpires() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v; Max-Age=2\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    // Note: using max-age changes cookie version from 0->1, which quotes values.\n+    Assert.assertEquals(\"k=\\\"v\\\"\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    Assert.assertEquals(\"k=\\\"v\\\"\", cookieMiddleware.getValidCookiesAsString());\n+\n+    try {\n+      Thread.sleep(5000);\n+    } catch (InterruptedException ignored) {\n+    }\n+\n+    // Verify that the k cookie was discarded because it expired.\n+    Assert.assertTrue(cookieMiddleware.getValidCookiesAsString().isEmpty());\n+  }\n+\n+  @Test\n+  public void cookieExplicitlyExpires() {\n+    CallHeaders headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v; Max-Age=2\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+    // Note: using max-age changes cookie version from 0->1, which quotes values.\n+    Assert.assertEquals(\"k=\\\"v\\\"\", cookieMiddleware.getValidCookiesAsString());\n+\n+    headersToSend = new ErrorFlightMetadata();\n+    headersToSend.insert(SET_COOKIE_HEADER, \"k=v; Max-Age=-2\");\n+    cookieMiddleware.onHeadersReceived(headersToSend);\n+\n+    // Verify that the k cookie was discarded because the server told the client it is expired.\n+    Assert.assertTrue(cookieMiddleware.getValidCookiesAsString().isEmpty());\n\nReview comment:\n       Ah! That's fun. Do you think it's worth filing a JDK bug? Though I'm surprised it's been around so long.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T23:14:33.728+0000",
                    "updated": "2020-11-06T23:14:33.728+0000",
                    "started": "2020-11-06T23:14:33.728+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508647",
                    "issueId": "13337994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337994/worklog/508648",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #8554:\nURL: https://github.com/apache/arrow/pull/8554#issuecomment-723341323\n\n\n   Will merge on green.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T23:14:46.604+0000",
                    "updated": "2020-11-06T23:14:46.604+0000",
                    "started": "2020-11-06T23:14:46.603+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508648",
                    "issueId": "13337994"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337994/worklog/508657",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm closed pull request #8554:\nURL: https://github.com/apache/arrow/pull/8554\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T23:51:03.968+0000",
                    "updated": "2020-11-06T23:51:03.968+0000",
                    "started": "2020-11-06T23:51:03.967+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508657",
                    "issueId": "13337994"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 9000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@11763c88[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b11cc57[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@954072[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@75134743[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@732a01f8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6ec45625[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@44f80d5f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2bbe73dc[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@8b89292[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@440198de[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4017e7f4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@18ef5cb9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9000,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Nov 06 23:50:58 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-11-06T23:50:58.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10428/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-10-30T03:12:31.000+0000",
        "updated": "2020-11-06T23:51:05.000+0000",
        "timeoriginalestimate": null,
        "description": "Add support for HTTP cookies to the Java FlightClient.\r\n\r\nCreate a middleware that reads Set-Cookie and Set-Cookie2 headers from server responses and puts corresponding Cookie headers on requests.\r\n\r\nRespect expiration/max-age attributes of cookies.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[FlightRPC][Java] Add support for HTTP cookies",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337994/comment/17227665",
                    "id": "17227665",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 8554\n[https://github.com/apache/arrow/pull/8554]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-11-06T23:50:58.331+0000",
                    "updated": "2020-11-06T23:50:58.331+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0k51s:",
        "customfield_12314139": null
    }
}