{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13188303",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188303",
    "key": "ARROW-3358",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=praveenbingo",
            "name": "praveenbingo",
            "key": "praveenbingo",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Praveen Kumar",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3358/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 12,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188303/worklog/159964",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "praveenbingo opened a new pull request #2861: ARROW-3358: [Gandiva][C++] Deprecate Gandiva Status.\nURL: https://github.com/apache/arrow/pull/2861\n \n \n   Removing all references to gandiva status and using arrow\r\n   status instead.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T12:22:02.410+0000",
                    "updated": "2018-10-29T12:22:02.410+0000",
                    "started": "2018-10-29T12:22:02.409+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159964",
                    "issueId": "13188303"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188303/worklog/159969",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2861: ARROW-3358: [Gandiva][C++] Deprecate Gandiva Status.\nURL: https://github.com/apache/arrow/pull/2861#issuecomment-433893319\n \n \n   Thank you. @kou or @shiro615 can you update the GLib bindings to follow this change? we can cherry-pick into this PR\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T12:34:42.027+0000",
                    "updated": "2018-10-29T12:34:42.027+0000",
                    "started": "2018-10-29T12:34:42.025+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159969",
                    "issueId": "13188303"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188303/worklog/160020",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "praveenbingo commented on issue #2861: ARROW-3358: [Gandiva][C++] Deprecate Gandiva Status.\nURL: https://github.com/apache/arrow/pull/2861#issuecomment-433955154\n \n \n   > Thank you. @kou or @shiro615 can you update the GLib bindings to follow this change? we can cherry-pick into this PR\r\n   \r\n   Let me take a look, if its simple i will fix it as part of this PR..\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T15:28:56.018+0000",
                    "updated": "2018-10-29T15:28:56.018+0000",
                    "started": "2018-10-29T15:28:56.017+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160020",
                    "issueId": "13188303"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188303/worklog/160273",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2861: ARROW-3358: [Gandiva][C++] Deprecate Gandiva Status.\nURL: https://github.com/apache/arrow/pull/2861#issuecomment-434105638\n \n \n   Hm, weird Plasma error in the tests, probably transient:\r\n   \r\n   ```\r\n   =================================== FAILURES ===================================\r\n   _______________________________ test_plasma_list _______________________________\r\n   \r\n       @pytest.mark.plasma\r\n       def test_plasma_list():\r\n           import pyarrow.plasma as plasma\r\n       \r\n           with plasma.start_plasma_store(\r\n                   plasma_store_memory=DEFAULT_PLASMA_STORE_MEMORY) \\\r\n                   as (plasma_store_name, p):\r\n               plasma_client = plasma.connect(plasma_store_name, \"\", 0)\r\n       \r\n               # Test sizes\r\n               u, _, _ = create_object(plasma_client, 11, metadata_size=7, seal=False)\r\n               l1 = plasma_client.list()\r\n               assert l1[u][\"data_size\"] == 11\r\n               assert l1[u][\"metadata_size\"] == 7\r\n       \r\n               # Test ref_count\r\n               v = plasma_client.put(np.zeros(3))\r\n               l2 = plasma_client.list()\r\n               # Ref count has already been released\r\n               assert l2[v][\"ref_count\"] == 0\r\n               a = plasma_client.get(v)\r\n               l3 = plasma_client.list()\r\n               assert l3[v][\"ref_count\"] == 1\r\n               del a\r\n       \r\n               # Test state\r\n               w, _, _ = create_object(plasma_client, 3, metadata_size=0, seal=False)\r\n               l4 = plasma_client.list()\r\n               assert l4[w][\"state\"] == \"created\"\r\n               plasma_client.seal(w)\r\n               l5 = plasma_client.list()\r\n               assert l5[w][\"state\"] == \"sealed\"\r\n       \r\n               # Test timestamps\r\n               t1 = time.time()\r\n               x, _, _ = create_object(plasma_client, 3, metadata_size=0, seal=False)\r\n               t2 = time.time()\r\n               l6 = plasma_client.list()\r\n   >           assert math.floor(t1) <= l6[x][\"create_time\"] <= math.ceil(t2)\r\n   E           assert 1540842334 <= 1540842333\r\n   E            +  where 1540842334 = <built-in function floor>(1540842334.001501)\r\n   E            +    where <built-in function floor> = math.floor\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T22:33:02.794+0000",
                    "updated": "2018-10-29T22:33:02.794+0000",
                    "started": "2018-10-29T22:33:02.792+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160273",
                    "issueId": "13188303"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188303/worklog/160274",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2861: ARROW-3358: [Gandiva][C++] Deprecate Gandiva Status.\nURL: https://github.com/apache/arrow/pull/2861\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/c_glib/arrow-glib/error.cpp b/c_glib/arrow-glib/error.cpp\nindex 9ebbdc7066..47c54e06b2 100644\n--- a/c_glib/arrow-glib/error.cpp\n+++ b/c_glib/arrow-glib/error.cpp\n@@ -73,6 +73,14 @@ garrow_error_code(const arrow::Status &status)\n     return GARROW_ERROR_PLASMA_STORE_FULL;\n   case arrow::StatusCode::PlasmaObjectAlreadySealed:\n     return GARROW_ERROR_PLASMA_OBJECT_ALREADY_SEALED;\n+  case arrow::StatusCode::CodeGenError:\n+    return GARROW_ERROR_CODEGEN;\n+  case arrow::StatusCode::ArrowError:\n+    return GARROW_ERROR_ARROW;\n+  case arrow::StatusCode::ExpressionValidationError:\n+    return GARROW_ERROR_EXPRESSION_VALIDATION;\n+  case arrow::StatusCode::ExecutionError:\n+    return GARROW_ERROR_EXECUTION;\n   default:\n     return GARROW_ERROR_UNKNOWN;\n   }\ndiff --git a/c_glib/arrow-glib/error.h b/c_glib/arrow-glib/error.h\nindex 0a0b2b1cf5..5d88ce3ed3 100644\n--- a/c_glib/arrow-glib/error.h\n+++ b/c_glib/arrow-glib/error.h\n@@ -38,8 +38,11 @@ G_BEGIN_DECLS\n  * @GARROW_ERROR_PLASMA_OBJECT_EXISTS: Object already exists on Plasma.\n  * @GARROW_ERROR_PLASMA_OBJECT_NONEXISTENT: Object doesn't exist on Plasma.\n  * @GARROW_ERROR_PLASMA_STORE_FULL: Store full error on Plasma.\n- * @GARROW_ERROR_PLASMA_OBJECT_ALREADY_SEALED:\n- *   Object is already sealed on Plasma.\n+ * @GARROW_ERROR_PLASMA_OBJECT_ALREADY_SEALED: Object already sealed on Plasma.\n+ * @GARROW_ERROR_CODEGEN: Error generating code for expression evaluation in Gandiva.\n+ * @GARROW_ERROR_ARROW: Error in Gandiva-Arrow integration.\n+ * @GARROW_ERROR_EXPRESSION_VALIDATION: Validation errors in expression given for code generation.\n+ * @GARROW_ERROR_EXECUTION: Execution error while evaluating the expression against a record batch.\n  *\n  * The error codes are used by all arrow-glib functions.\n  *\n@@ -60,6 +63,10 @@ typedef enum {\n   GARROW_ERROR_PLASMA_OBJECT_NONEXISTENT,\n   GARROW_ERROR_PLASMA_STORE_FULL,\n   GARROW_ERROR_PLASMA_OBJECT_ALREADY_SEALED,\n+  GARROW_ERROR_CODEGEN = 40,\n+  GARROW_ERROR_ARROW,\n+  GARROW_ERROR_EXPRESSION_VALIDATION,\n+  GARROW_ERROR_EXECUTION,\n } GArrowError;\n \n #define GARROW_ERROR garrow_error_quark()\ndiff --git a/c_glib/doc/gandiva-glib/gandiva-glib-docs.xml b/c_glib/doc/gandiva-glib/gandiva-glib-docs.xml\nindex d51a645a9f..261875087d 100644\n--- a/c_glib/doc/gandiva-glib/gandiva-glib-docs.xml\n+++ b/c_glib/doc/gandiva-glib/gandiva-glib-docs.xml\n@@ -46,10 +46,6 @@\n       <title>Projector</title>\n       <xi:include href=\"xml/projector.xml\"/>\n     </chapter>\n-    <chapter id=\"error\">\n-      <title>Error</title>\n-      <xi:include href=\"xml/error.xml\"/>\n-    </chapter>\n   </part>\n \n   <chapter id=\"object-tree\">\ndiff --git a/c_glib/gandiva-glib/Makefile.am b/c_glib/gandiva-glib/Makefile.am\nindex 5aa17a4e95..3a8b9d33cb 100644\n--- a/c_glib/gandiva-glib/Makefile.am\n+++ b/c_glib/gandiva-glib/Makefile.am\n@@ -52,27 +52,16 @@ libgandiva_glib_la_LIBADD =\t\t\t\\\n \t../arrow-glib/libarrow-glib.la\n \n libgandiva_glib_la_headers =\t\t\t\\\n-\terror.h\t\t\t\t\t\\\n \texpression.h\t\t\t\t\\\n \tgandiva-glib.h\t\t\t\t\\\n \tprojector.h\n \n-libgandiva_glib_la_generated_headers =\t\t\\\n-\tgandiva-enums.h\n-\n-libgandiva_glib_la_generated_sources =\t\t\\\n-\tgandiva-enums.c\t\t\t\t\\\n-\t$(libgandiva_glib_la_generated_headers)\n-\n libgandiva_glib_la_sources =\t\t\t\\\n-\terror.cpp\t\t\t\t\\\n \texpression.cpp\t\t\t\t\\\n \tprojector.cpp\t\t\t\t\\\n-\t$(libgandiva_glib_la_headers)\t\t\\\n-\t$(libgandiva_glib_la_generated_sources)\n+\t$(libgandiva_glib_la_headers)\n \n libgandiva_glib_la_cpp_headers =\t\t\\\n-\terror.hpp\t\t\t\t\\\n \texpression.hpp\t\t\t\t\\\n \tgandiva-glib.hpp\t\t\t\\\n \tprojector.hpp\n@@ -81,49 +70,10 @@ libgandiva_glib_la_SOURCES =\t\t\t\\\n \t$(libgandiva_glib_la_sources)\t\t\\\n \t$(libgandiva_glib_la_cpp_headers)\n \n-BUILT_SOURCES =\t\t\t\t\t\\\n-\t$(libgandiva_glib_la_genearted_headers)\t\\\n-\t$(libgandiva_glib_la_genearted_sources)\t\\\n-\tstamp-gandiva-enums.c\t\t\t\\\n-\tstamp-gandiva-enums.h\n-\n-DISTCLEANFILES +=\t\t\t\t\\\n-\tstamp-gandiva-enums.c\t\t\t\\\n-\tstamp-gandiva-enums.h\n-\n-EXTRA_DIST +=\t\t\t\t\t\\\n-\tgandiva-enums.c.template\t\t\\\n-\tgandiva-enums.h.template\n-\n-gandiva-enums.h: stamp-gandiva-enums.h\n-\t@true\n-stamp-gandiva-enums.h: $(libgandiva_glib_la_headers) gandiva-enums.h.template\n-\t$(AM_V_GEN)\t\t\t\t\t\\\n-\t  (cd $(srcdir) &&\t\t\t\t\\\n-\t   $(GLIB_MKENUMS)\t\t\t\t\\\n-\t     --identifier-prefix GGandiva\t\t\\\n-\t     --symbol-prefix ggandiva\t\t\t\\\n-\t     --template gandiva-enums.h.template\t\\\n-\t     $(libgandiva_glib_la_headers)) > gandiva-enums.h\n-\ttouch $@\n-\n-gandiva-enums.c: stamp-gandiva-enums.c\n-\t@true\n-stamp-gandiva-enums.c: $(libgandiva_glib_la_headers) gandiva-enums.c.template\n-\t$(AM_V_GEN)\t\t\t\t\t\\\n-\t  (cd $(srcdir) &&\t\t\t\t\\\n-\t   $(GLIB_MKENUMS)\t\t\t\t\\\n-\t     --identifier-prefix GGandiva\t\t\\\n-\t     --symbol-prefix ggandiva\t\t\t\\\n-\t     --template gandiva-enums.c.template\t\\\n-\t     $(libgandiva_glib_la_headers)) > gandiva-enums.c\n-\ttouch $@\n-\n gandiva_glib_includedir = $(includedir)/gandiva-glib\n gandiva_glib_include_HEADERS =\t\t\t\\\n \t$(libgandiva_glib_la_headers)\t\t\\\n-\t$(libgandiva_glib_la_cpp_headers)\t\\\n-\t$(libgandiva_glib_la_generated_headers)\n+\t$(libgandiva_glib_la_cpp_headers)\n \n pkgconfigdir = $(libdir)/pkgconfig\n pkgconfig_DATA =\t\t\t\t\\\ndiff --git a/c_glib/gandiva-glib/error.cpp b/c_glib/gandiva-glib/error.cpp\ndeleted file mode 100644\nindex 9fba7fd20d..0000000000\n--- a/c_glib/gandiva-glib/error.cpp\n+++ /dev/null\n@@ -1,76 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-#ifdef HAVE_CONFIG_H\n-#  include <config.h>\n-#endif\n-\n-#include <gandiva-glib/error.hpp>\n-\n-G_BEGIN_DECLS\n-\n-/**\n- * SECTION: error\n- * @title: GGandivaError\n- * @short_description: Error code mapping between Gandiva and gandiva-glib\n- *\n- * #GGandivaError provides error codes corresponding to `gandiva::Status`\n- * values.\n- */\n-\n-G_DEFINE_QUARK(ggandiva-error-quark, ggandiva_error)\n-\n-static GGandivaError\n-ggandiva_error_code(const gandiva::Status &status)\n-{\n-  switch (status.code()) {\n-  case gandiva::StatusCode::OK:\n-    return GGANDIVA_ERROR_UNKNOWN;\n-  case gandiva::StatusCode::Invalid:\n-    return GGANDIVA_ERROR_INVALID;\n-  case gandiva::StatusCode::CodeGenError:\n-    return GGANDIVA_ERROR_CODE_GEN;\n-  case gandiva::StatusCode::ArrowError:\n-    return GGANDIVA_ERROR_ARROW;\n-  case gandiva::StatusCode::ExpressionValidationError:\n-    return GGANDIVA_ERROR_EXPRESSION_VALIDATION;\n-  default:\n-    return GGANDIVA_ERROR_UNKNOWN;\n-  }\n-}\n-\n-G_END_DECLS\n-\n-gboolean\n-ggandiva_error_check(GError **error,\n-                     const gandiva::Status &status,\n-                     const char *context)\n-{\n-  if (status.ok()) {\n-    return TRUE;\n-  } else {\n-    g_set_error(error,\n-                GGANDIVA_ERROR,\n-                ggandiva_error_code(status),\n-                \"%s: %s\",\n-                context,\n-                status.ToString().c_str());\n-    return FALSE;\n-  }\n-}\ndiff --git a/c_glib/gandiva-glib/error.h b/c_glib/gandiva-glib/error.h\ndeleted file mode 100644\nindex e79fde0239..0000000000\n--- a/c_glib/gandiva-glib/error.h\n+++ /dev/null\n@@ -1,50 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-#pragma once\n-\n-#include <glib-object.h>\n-\n-G_BEGIN_DECLS\n-\n-/**\n- * GGandivaError:\n- * @GGANDIVA_ERROR_INVALID: Invalid value error.\n- * @GGANDIVA_ERROR_CODE_GEN: Code generation error.\n- * @GGANDIVA_ERROR_ARROW: Arrow error.\n- * @GGANDIVA_ERROR_EXPRESSION_VALIDATION: Expression validation error.\n- * @GGANDIVA_ERROR_UNKNOWN: Unknown error.\n- *\n- * The error codes are used by all gandiva-glib functions.\n- *\n- * They are corresponding to `gandiva::Status` values.\n- */\n-typedef enum {\n-  GGANDIVA_ERROR_INVALID = 1,\n-  GGANDIVA_ERROR_CODE_GEN,\n-  GGANDIVA_ERROR_ARROW,\n-  GGANDIVA_ERROR_EXPRESSION_VALIDATION,\n-  GGANDIVA_ERROR_UNKNOWN,\n-} GGandivaError;\n-\n-#define GGANDIVA_ERROR ggandiva_error_quark()\n-\n-GQuark ggandiva_error_quark(void);\n-\n-G_END_DECLS\ndiff --git a/c_glib/gandiva-glib/error.hpp b/c_glib/gandiva-glib/error.hpp\ndeleted file mode 100644\nindex bd0f548822..0000000000\n--- a/c_glib/gandiva-glib/error.hpp\n+++ /dev/null\n@@ -1,28 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-#pragma once\n-\n-#include <gandiva/status.h>\n-\n-#include <gandiva-glib/error.h>\n-\n-gboolean ggandiva_error_check(GError **error,\n-                              const gandiva::Status &status,\n-                              const char *context);\ndiff --git a/c_glib/gandiva-glib/gandiva-enums.c.template b/c_glib/gandiva-glib/gandiva-enums.c.template\ndeleted file mode 100644\nindex 80276f6251..0000000000\n--- a/c_glib/gandiva-glib/gandiva-enums.c.template\n+++ /dev/null\n@@ -1,56 +0,0 @@\n-/*** BEGIN file-header ***/\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-#ifdef HAVE_CONFIG_H\n-#  include <config.h>\n-#endif\n-\n-#include <gandiva-glib/gandiva-glib.h>\n-/*** END file-header ***/\n-\n-/*** BEGIN file-production ***/\n-\n-/* enumerations from \"@filename@\" */\n-/*** END file-production ***/\n-\n-/*** BEGIN value-header ***/\n-GType\n-@enum_name@_get_type(void)\n-{\n-  static GType etype = 0;\n-  if (G_UNLIKELY(etype == 0)) {\n-    static const G@Type@Value values[] = {\n-/*** END value-header ***/\n-\n-/*** BEGIN value-production ***/\n-      {@VALUENAME@, \"@VALUENAME@\", \"@valuenick@\"},\n-/*** END value-production ***/\n-\n-/*** BEGIN value-tail ***/\n-      {0, NULL, NULL}\n-    };\n-    etype = g_@type@_register_static(g_intern_static_string(\"@EnumName@\"), values);\n-  }\n-  return etype;\n-}\n-/*** END value-tail ***/\n-\n-/*** BEGIN file-tail ***/\n-/*** END file-tail ***/\ndiff --git a/c_glib/gandiva-glib/gandiva-enums.h.template b/c_glib/gandiva-glib/gandiva-enums.h.template\ndeleted file mode 100644\nindex 51506836f6..0000000000\n--- a/c_glib/gandiva-glib/gandiva-enums.h.template\n+++ /dev/null\n@@ -1,41 +0,0 @@\n-/*** BEGIN file-header ***/\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-#pragma once\n-\n-#include <gandiva-glib/error.h>\n-\n-G_BEGIN_DECLS\n-/*** END file-header ***/\n-\n-/*** BEGIN file-production ***/\n-\n-/* enumerations from \"@filename@\" */\n-/*** END file-production ***/\n-\n-/*** BEGIN value-header ***/\n-GType @enum_name@_get_type(void) G_GNUC_CONST;\n-#define @ENUMPREFIX@_TYPE_@ENUMSHORT@ (@enum_name@_get_type())\n-/*** END value-header ***/\n-\n-/*** BEGIN file-tail ***/\n-\n-G_END_DECLS\n-/*** END file-tail ***/\ndiff --git a/c_glib/gandiva-glib/gandiva-glib.h b/c_glib/gandiva-glib/gandiva-glib.h\nindex 9741354c19..62fd2b55cd 100644\n--- a/c_glib/gandiva-glib/gandiva-glib.h\n+++ b/c_glib/gandiva-glib/gandiva-glib.h\n@@ -19,7 +19,5 @@\n \n #pragma once\n \n-#include <gandiva-glib/error.h>\n #include <gandiva-glib/expression.h>\n-#include <gandiva-glib/gandiva-enums.h>\n #include <gandiva-glib/projector.h>\ndiff --git a/c_glib/gandiva-glib/gandiva-glib.hpp b/c_glib/gandiva-glib/gandiva-glib.hpp\nindex 3771cafff2..08563cae70 100644\n--- a/c_glib/gandiva-glib/gandiva-glib.hpp\n+++ b/c_glib/gandiva-glib/gandiva-glib.hpp\n@@ -21,6 +21,5 @@\n \n #include <gandiva-glib/gandiva-glib.h>\n \n-#include <gandiva-glib/error.hpp>\n #include <gandiva-glib/expression.hpp>\n #include <gandiva-glib/projector.hpp>\ndiff --git a/c_glib/gandiva-glib/meson.build b/c_glib/gandiva-glib/meson.build\nindex f4fdf8ef51..32bd3079e5 100644\n--- a/c_glib/gandiva-glib/meson.build\n+++ b/c_glib/gandiva-glib/meson.build\n@@ -20,36 +20,22 @@\n project_name = 'gandiva-glib'\n \n sources = files(\n-  'error.cpp',\n   'expression.cpp',\n   'projector.cpp',\n )\n \n c_headers = files(\n-  'error.h',\n   'expression.h',\n   'gandiva-glib.h',\n   'projector.h',\n )\n \n cpp_headers = files(\n-  'error.hpp',\n   'expression.hpp',\n   'gandiva-glib.hpp',\n   'projector.hpp',\n )\n \n-enums = gnome.mkenums('enums',\n-                      sources: c_headers,\n-                      identifier_prefix: 'GGandiva',\n-                      symbol_prefix: 'ggandiva',\n-                      c_template: 'gandiva-enums.c.template',\n-                      h_template: 'gandiva-enums.h.template',\n-                      install_dir: join_paths(include_dir, project_name),\n-                      install_header: true)\n-enums_source = enums[0]\n-enums_header = enums[1]\n-\n headers = c_headers + cpp_headers\n install_headers(headers, subdir: project_name)\n \n@@ -78,7 +64,7 @@ pkgconfig.generate(filebase: project_name,\n \n gnome.generate_gir(libgandiva_glib,\n                    dependencies: declare_dependency(sources: arrow_glib_gir),\n-                   sources: sources + c_headers + enums,\n+                   sources: sources + c_headers,\n                    namespace: 'Gandiva',\n                    nsversion: api_version,\n                    identifier_prefix: 'GGandiva',\ndiff --git a/c_glib/gandiva-glib/projector.cpp b/c_glib/gandiva-glib/projector.cpp\nindex bdac5f3231..983ecda741 100644\n--- a/c_glib/gandiva-glib/projector.cpp\n+++ b/c_glib/gandiva-glib/projector.cpp\n@@ -25,7 +25,7 @@\n #include <arrow-glib/record-batch.hpp>\n #include <arrow-glib/schema.hpp>\n \n-#include <gandiva-glib/error.hpp>\n+#include <arrow-glib/error.hpp>\n #include <gandiva-glib/expression.hpp>\n #include <gandiva-glib/projector.hpp>\n \n@@ -140,7 +140,7 @@ ggandiva_projector_new(GArrowSchema *schema,\n     gandiva_projector->Make(arrow_schema,\n                             gandiva_expressions,\n                             &gandiva_projector);\n-  if (ggandiva_error_check(error, status, \"[gandiva][projector][new]\")) {\n+  if (garrow_error_check(error, status, \"[gandiva][projector][new]\")) {\n     return ggandiva_projector_new_raw(&gandiva_projector);\n   } else {\n     return NULL;\n@@ -171,7 +171,7 @@ ggandiva_projector_evaluate(GGandivaProjector *projector,\n     gandiva_projector->Evaluate(*arrow_record_batch,\n                                 memory_pool,\n                                 &arrow_arrays);\n-  if (ggandiva_error_check(error, status, \"[gandiva][projector][evaluate]\")) {\n+  if (garrow_error_check(error, status, \"[gandiva][projector][evaluate]\")) {\n     GList *arrays = NULL;\n     for (auto arrow_array : arrow_arrays) {\n       auto array = garrow_array_new_raw(&arrow_array);\ndiff --git a/cpp/src/arrow/status.cc b/cpp/src/arrow/status.cc\nindex 918dbc7d1c..8be8b36d13 100644\n--- a/cpp/src/arrow/status.cc\n+++ b/cpp/src/arrow/status.cc\n@@ -84,6 +84,15 @@ std::string Status::CodeAsString() const {\n     case StatusCode::PlasmaObjectAlreadySealed:\n       type = \"Plasma object is already sealed\";\n       break;\n+    case StatusCode::CodeGenError:\n+      type = \"CodeGenError in Gandiva\";\n+      break;\n+    case StatusCode::ExpressionValidationError:\n+      type = \"ExpressionValidationError\";\n+      break;\n+    case StatusCode::ExecutionError:\n+      type = \"ExecutionError in Gandiva\";\n+      break;\n     default:\n       type = \"Unknown\";\n       break;\ndiff --git a/cpp/src/arrow/status.h b/cpp/src/arrow/status.h\nindex a8b8536f5e..e7ab68c045 100644\n--- a/cpp/src/arrow/status.h\n+++ b/cpp/src/arrow/status.h\n@@ -60,6 +60,17 @@\n     }                                \\\n   } while (false)\n \n+#define ARROW_RETURN_FAILURE_IF_FALSE(condition, status)                                 \\\n+  do {                                                                                   \\\n+    if (!(condition)) {                                                                  \\\n+      Status _status = (status);                                                         \\\n+      std::stringstream ss;                                                              \\\n+      ss << __FILE__ << \":\" << __LINE__ << \" code: \" << _status.CodeAsString() << \" \\n \" \\\n+         << _status.message();                                                           \\\n+      return Status(_status.code(), ss.str());                                           \\\n+    }                                                                                    \\\n+  } while (0)\n+\n // This is an internal-use macro and should not be used in public headers.\n #ifndef RETURN_NOT_OK\n #define RETURN_NOT_OK(s) ARROW_RETURN_NOT_OK(s)\n@@ -84,7 +95,12 @@ enum class StatusCode : char {\n   PlasmaObjectNonexistent = 21,\n   PlasmaStoreFull = 22,\n   PlasmaObjectAlreadySealed = 23,\n-  StillExecuting = 24\n+  StillExecuting = 24,\n+  // Gandiva range of errors\n+  CodeGenError = 40,\n+  ArrowError = 41,\n+  ExpressionValidationError = 42,\n+  ExecutionError = 43\n };\n \n #if defined(__clang__)\n@@ -183,6 +199,23 @@ class ARROW_EXPORT Status {\n \n   static Status StillExecuting() { return Status(StatusCode::StillExecuting, \"\"); }\n \n+  // Return error status of an appropriate type.\n+  static Status CodeGenError(const std::string& msg) {\n+    return Status(StatusCode::CodeGenError, msg);\n+  }\n+\n+  static Status ArrowError(const std::string& msg) {\n+    return Status(StatusCode::ArrowError, msg);\n+  }\n+\n+  static Status ExpressionValidationError(const std::string& msg) {\n+    return Status(StatusCode::ExpressionValidationError, msg);\n+  }\n+\n+  static Status ExecutionError(const std::string& msg) {\n+    return Status(StatusCode::ExecutionError, msg);\n+  }\n+\n   // Returns true iff the status indicates success.\n   bool ok() const { return (state_ == NULL); }\n \n@@ -215,6 +248,16 @@ class ARROW_EXPORT Status {\n \n   bool IsStillExecuting() const { return code() == StatusCode::StillExecuting; }\n \n+  bool IsCodeGenError() const { return code() == StatusCode::CodeGenError; }\n+\n+  bool IsArrowError() const { return code() == StatusCode::ArrowError; }\n+\n+  bool IsExpressionValidationError() const {\n+    return code() == StatusCode::ExpressionValidationError;\n+  }\n+\n+  bool IsExecutionError() const { return code() == StatusCode::ExecutionError; }\n+\n   // Return a string representation of this status suitable for printing.\n   // Returns the string \"OK\" for success.\n   std::string ToString() const;\ndiff --git a/cpp/src/gandiva/CMakeLists.txt b/cpp/src/gandiva/CMakeLists.txt\nindex a377e40719..299611c3fc 100644\n--- a/cpp/src/gandiva/CMakeLists.txt\n+++ b/cpp/src/gandiva/CMakeLists.txt\n@@ -113,7 +113,6 @@ install(FILES\n   logging.h\n   projector.h\n   selection_vector.h\n-  status.h\n   tree_expr_builder.h\n   DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/gandiva\")\n \n@@ -141,7 +140,6 @@ add_gandiva_unit_test(llvm_generator_test.cc llvm_generator.cc regex_util.cc eng\n add_gandiva_unit_test(annotator_test.cc annotator.cc function_signature.cc)\n add_gandiva_unit_test(tree_expr_test.cc tree_expr_builder.cc expr_decomposer.cc annotator.cc function_registry.cc function_signature.cc like_holder.cc regex_util.cc to_date_holder.cc date_utils.cc)\n add_gandiva_unit_test(expr_decomposer_test.cc expr_decomposer.cc tree_expr_builder.cc annotator.cc function_registry.cc function_signature.cc like_holder.cc regex_util.cc to_date_holder.cc date_utils.cc)\n-add_gandiva_unit_test(status_test.cc)\n add_gandiva_unit_test(expression_registry_test.cc llvm_types.cc expression_registry.cc function_signature.cc function_registry.cc)\n add_gandiva_unit_test(selection_vector_test.cc selection_vector.cc)\n add_gandiva_unit_test(lru_cache_test.cc)\ndiff --git a/cpp/src/gandiva/arrow.h b/cpp/src/gandiva/arrow.h\nindex f6d0855324..ea283523a5 100644\n--- a/cpp/src/gandiva/arrow.h\n+++ b/cpp/src/gandiva/arrow.h\n@@ -25,6 +25,7 @@\n #include <arrow/builder.h>\n #include <arrow/pretty_print.h>\n #include <arrow/record_batch.h>\n+#include <arrow/status.h>\n #include <arrow/type.h>\n \n namespace gandiva {\n@@ -44,6 +45,9 @@ using SchemaPtr = std::shared_ptr<arrow::Schema>;\n using ArrayDataPtr = std::shared_ptr<arrow::ArrayData>;\n using ArrayDataVector = std::vector<ArrayDataPtr>;\n \n+using Status = arrow::Status;\n+using StatusCode = arrow::StatusCode;\n+\n }  // namespace gandiva\n \n #endif  // GANDIVA_EXPR_ARROW_H\ndiff --git a/cpp/src/gandiva/configuration.h b/cpp/src/gandiva/configuration.h\nindex 9014660530..04e2eed287 100644\n--- a/cpp/src/gandiva/configuration.h\n+++ b/cpp/src/gandiva/configuration.h\n@@ -21,7 +21,7 @@\n #include <memory>\n #include <string>\n \n-#include \"gandiva/status.h\"\n+#include \"arrow/status.h\"\n \n namespace gandiva {\n \ndiff --git a/cpp/src/gandiva/date_utils.cc b/cpp/src/gandiva/date_utils.cc\nindex eacb54108f..2686b19350 100644\n--- a/cpp/src/gandiva/date_utils.cc\n+++ b/cpp/src/gandiva/date_utils.cc\n@@ -17,6 +17,7 @@\n \n #include <algorithm>\n #include <memory>\n+#include <sstream>\n #include <vector>\n \n #include \"gandiva/date_utils.h\"\ndiff --git a/cpp/src/gandiva/date_utils.h b/cpp/src/gandiva/date_utils.h\nindex 0f17bdf244..64a150b6ba 100644\n--- a/cpp/src/gandiva/date_utils.h\n+++ b/cpp/src/gandiva/date_utils.h\n@@ -23,7 +23,7 @@\n #include <unordered_map>\n #include <vector>\n \n-#include \"gandiva/status.h\"\n+#include \"gandiva/arrow.h\"\n \n namespace gandiva {\n \ndiff --git a/cpp/src/gandiva/engine.cc b/cpp/src/gandiva/engine.cc\nindex 78cc84a3de..59884c5b4a 100644\n--- a/cpp/src/gandiva/engine.cc\n+++ b/cpp/src/gandiva/engine.cc\n@@ -92,7 +92,7 @@ Status Engine::Make(std::shared_ptr<Configuration> config,\n   engine_obj->AddGlobalMappings();\n \n   auto status = engine_obj->LoadPreCompiledIRFiles(config->byte_code_file_path());\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n \n   *engine = std::move(engine_obj);\n   return Status::OK();\n@@ -162,7 +162,7 @@ Status Engine::RemoveUnusedFunctions() {\n // Optimise and compile the module.\n Status Engine::FinalizeModule(bool optimise_ir, bool dump_ir) {\n   auto status = RemoveUnusedFunctions();\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n \n   if (dump_ir) {\n     DumpIR(\"Before optimise\");\ndiff --git a/cpp/src/gandiva/engine.h b/cpp/src/gandiva/engine.h\nindex 485447bd7d..f377ebc38d 100644\n--- a/cpp/src/gandiva/engine.h\n+++ b/cpp/src/gandiva/engine.h\n@@ -28,12 +28,12 @@\n #include <llvm/IR/LLVMContext.h>\n #include <llvm/IR/Module.h>\n \n+#include \"arrow/status.h\"\n #include \"arrow/util/macros.h\"\n \n #include \"gandiva/configuration.h\"\n #include \"gandiva/llvm_types.h\"\n #include \"gandiva/logging.h\"\n-#include \"gandiva/status.h\"\n \n namespace gandiva {\n \ndiff --git a/cpp/src/gandiva/engine_llvm_test.cc b/cpp/src/gandiva/engine_llvm_test.cc\nindex 424b258fd7..fe4f82e193 100644\n--- a/cpp/src/gandiva/engine_llvm_test.cc\n+++ b/cpp/src/gandiva/engine_llvm_test.cc\n@@ -100,11 +100,12 @@ llvm::Function* TestEngine::BuildVecAdd(Engine* engine, LLVMTypes* types) {\n \n TEST_F(TestEngine, TestAddUnoptimised) {\n   std::unique_ptr<Engine> engine;\n-  Engine::Make(ConfigurationBuilder::DefaultConfiguration(), &engine);\n+  Status status = Engine::Make(ConfigurationBuilder::DefaultConfiguration(), &engine);\n+  EXPECT_TRUE(status.ok()) << status.message();\n   LLVMTypes types(*engine->context());\n   llvm::Function* ir_func = BuildVecAdd(engine.get(), &types);\n-  engine->FinalizeModule(false, false);\n-\n+  status = engine->FinalizeModule(false, false);\n+  EXPECT_TRUE(status.ok()) << status.message();\n   add_vector_func_t add_func =\n       reinterpret_cast<add_vector_func_t>(engine->CompiledFunction(ir_func));\n \n@@ -114,10 +115,12 @@ TEST_F(TestEngine, TestAddUnoptimised) {\n \n TEST_F(TestEngine, TestAddOptimised) {\n   std::unique_ptr<Engine> engine;\n-  Engine::Make(ConfigurationBuilder::DefaultConfiguration(), &engine);\n+  Status status = Engine::Make(ConfigurationBuilder::DefaultConfiguration(), &engine);\n+  EXPECT_TRUE(status.ok()) << status.message();\n   LLVMTypes types(*engine->context());\n   llvm::Function* ir_func = BuildVecAdd(engine.get(), &types);\n-  engine->FinalizeModule(true, false);\n+  status = engine->FinalizeModule(true, false);\n+  EXPECT_TRUE(status.ok()) << status.message();\n \n   add_vector_func_t add_func =\n       reinterpret_cast<add_vector_func_t>(engine->CompiledFunction(ir_func));\ndiff --git a/cpp/src/gandiva/expr_decomposer.cc b/cpp/src/gandiva/expr_decomposer.cc\nindex a46c16e5c6..bd6b46771a 100644\n--- a/cpp/src/gandiva/expr_decomposer.cc\n+++ b/cpp/src/gandiva/expr_decomposer.cc\n@@ -72,7 +72,7 @@ Status ExprDecomposer::Visit(const FunctionNode& in_node) {\n   std::vector<ValueValidityPairPtr> args;\n   for (auto& child : node.children()) {\n     auto status = child->Accept(*this);\n-    GANDIVA_RETURN_NOT_OK(status);\n+    ARROW_RETURN_NOT_OK(status);\n \n     args.push_back(result());\n   }\n@@ -81,7 +81,7 @@ Status ExprDecomposer::Visit(const FunctionNode& in_node) {\n   std::shared_ptr<FunctionHolder> holder;\n   if (native_function->NeedsFunctionHolder()) {\n     auto status = FunctionHolderRegistry::Make(desc->name(), node, &holder);\n-    GANDIVA_RETURN_NOT_OK(status);\n+    ARROW_RETURN_NOT_OK(status);\n   }\n \n   if (native_function->result_nullable_type() == RESULT_NULL_IF_NULL) {\n@@ -121,20 +121,20 @@ Status ExprDecomposer::Visit(const FunctionNode& in_node) {\n Status ExprDecomposer::Visit(const IfNode& node) {\n   PushConditionEntry(node);\n   auto status = node.condition()->Accept(*this);\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n   auto condition_vv = result();\n   PopConditionEntry(node);\n \n   // Add a local bitmap to track the output validity.\n   int local_bitmap_idx = PushThenEntry(node);\n   status = node.then_node()->Accept(*this);\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n   auto then_vv = result();\n   PopThenEntry(node);\n \n   PushElseEntry(node, local_bitmap_idx);\n   status = node.else_node()->Accept(*this);\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n   auto else_vv = result();\n   bool is_terminal_else = PopElseEntry(node);\n \n@@ -153,7 +153,7 @@ Status ExprDecomposer::Visit(const BooleanNode& node) {\n   std::vector<ValueValidityPairPtr> args;\n   for (auto& child : node.children()) {\n     auto status = child->Accept(*this);\n-    GANDIVA_RETURN_NOT_OK(status);\n+    ARROW_RETURN_NOT_OK(status);\n \n     args.push_back(result());\n   }\n@@ -180,7 +180,7 @@ Status ExprDecomposer::Visit(const BooleanNode& node) {\n     /* decompose the children. */                                             \\\n     std::vector<ValueValidityPairPtr> args;                                   \\\n     auto status = node.eval_expr()->Accept(*this);                            \\\n-    GANDIVA_RETURN_NOT_OK(status);                                            \\\n+    ARROW_RETURN_NOT_OK(status);                                              \\\n     args.push_back(result());                                                 \\\n     /* In always outputs valid results, so no validity dex */                 \\\n     auto value_dex = std::make_shared<InExprDex<ctype>>(args, node.values()); \\\ndiff --git a/cpp/src/gandiva/expr_decomposer.h b/cpp/src/gandiva/expr_decomposer.h\nindex 4b9ad5bc92..28fa616d1b 100644\n--- a/cpp/src/gandiva/expr_decomposer.h\n+++ b/cpp/src/gandiva/expr_decomposer.h\n@@ -24,6 +24,7 @@\n #include <utility>\n \n #include <gtest/gtest_prod.h>\n+#include \"gandiva/arrow.h\"\n #include \"gandiva/expression.h\"\n #include \"gandiva/node.h\"\n #include \"gandiva/node_visitor.h\"\ndiff --git a/cpp/src/gandiva/expr_validator.cc b/cpp/src/gandiva/expr_validator.cc\nindex 11cc48c9e7..3f5d63745f 100644\n--- a/cpp/src/gandiva/expr_validator.cc\n+++ b/cpp/src/gandiva/expr_validator.cc\n@@ -85,18 +85,18 @@ Status ExprValidator::Visit(const FunctionNode& node) {\n \n   for (auto& child : node.children()) {\n     Status status = child->Accept(*this);\n-    GANDIVA_RETURN_NOT_OK(status);\n+    ARROW_RETURN_NOT_OK(status);\n   }\n   return Status::OK();\n }\n \n Status ExprValidator::Visit(const IfNode& node) {\n   Status status = node.condition()->Accept(*this);\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n   status = node.then_node()->Accept(*this);\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n   status = node.else_node()->Accept(*this);\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n \n   auto if_node_ret_type = node.return_type();\n   auto then_node_ret_type = node.then_node()->return_type();\n@@ -149,7 +149,7 @@ Status ExprValidator::Visit(const BooleanNode& node) {\n     }\n \n     status = child->Accept(*this);\n-    GANDIVA_RETURN_NOT_OK(status);\n+    ARROW_RETURN_NOT_OK(status);\n   }\n   return Status::OK();\n }\ndiff --git a/cpp/src/gandiva/expr_validator.h b/cpp/src/gandiva/expr_validator.h\nindex ab03b0d96e..5bb54db474 100644\n--- a/cpp/src/gandiva/expr_validator.h\n+++ b/cpp/src/gandiva/expr_validator.h\n@@ -21,14 +21,15 @@\n #include <string>\n #include <unordered_map>\n \n+#include \"arrow/status.h\"\n #include \"boost/functional/hash.hpp\"\n+\n #include \"gandiva/arrow.h\"\n #include \"gandiva/expression.h\"\n #include \"gandiva/function_registry.h\"\n #include \"gandiva/llvm_types.h\"\n #include \"gandiva/node.h\"\n #include \"gandiva/node_visitor.h\"\n-#include \"gandiva/status.h\"\n \n namespace gandiva {\n \ndiff --git a/cpp/src/gandiva/filter.cc b/cpp/src/gandiva/filter.cc\nindex f2f99d9393..16bfdec6c5 100644\n--- a/cpp/src/gandiva/filter.cc\n+++ b/cpp/src/gandiva/filter.cc\n@@ -28,7 +28,6 @@\n #include \"gandiva/filter_cache_key.h\"\n #include \"gandiva/llvm_generator.h\"\n #include \"gandiva/selection_vector_impl.h\"\n-#include \"gandiva/status.h\"\n \n namespace gandiva {\n \n@@ -41,12 +40,12 @@ Filter::Filter(std::unique_ptr<LLVMGenerator> llvm_generator, SchemaPtr schema,\n Status Filter::Make(SchemaPtr schema, ConditionPtr condition,\n                     std::shared_ptr<Configuration> configuration,\n                     std::shared_ptr<Filter>* filter) {\n-  GANDIVA_RETURN_FAILURE_IF_FALSE(schema != nullptr,\n-                                  Status::Invalid(\"schema cannot be null\"));\n-  GANDIVA_RETURN_FAILURE_IF_FALSE(condition != nullptr,\n-                                  Status::Invalid(\"condition cannot be null\"));\n-  GANDIVA_RETURN_FAILURE_IF_FALSE(configuration != nullptr,\n-                                  Status::Invalid(\"configuration cannot be null\"));\n+  ARROW_RETURN_FAILURE_IF_FALSE(schema != nullptr,\n+                                Status::Invalid(\"schema cannot be null\"));\n+  ARROW_RETURN_FAILURE_IF_FALSE(condition != nullptr,\n+                                Status::Invalid(\"condition cannot be null\"));\n+  ARROW_RETURN_FAILURE_IF_FALSE(configuration != nullptr,\n+                                Status::Invalid(\"configuration cannot be null\"));\n   static Cache<FilterCacheKey, std::shared_ptr<Filter>> cache;\n   FilterCacheKey cache_key(schema, configuration, *(condition.get()));\n   std::shared_ptr<Filter> cachedFilter = cache.GetModule(cache_key);\n@@ -57,16 +56,16 @@ Status Filter::Make(SchemaPtr schema, ConditionPtr condition,\n   // Build LLVM generator, and generate code for the specified expression\n   std::unique_ptr<LLVMGenerator> llvm_gen;\n   Status status = LLVMGenerator::Make(configuration, &llvm_gen);\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n \n   // Run the validation on the expression.\n   // Return if the expression is invalid since we will not be able to process further.\n   ExprValidator expr_validator(llvm_gen->types(), schema);\n   status = expr_validator.Validate(condition);\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n \n   status = llvm_gen->Build({condition});\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n \n   // Instantiate the filter with the completely built llvm generator\n   *filter = std::make_shared<Filter>(std::move(llvm_gen), schema, configuration);\n@@ -105,7 +104,7 @@ Status Filter::Evaluate(const arrow::RecordBatch& batch,\n \n   // Execute the expression(s).\n   auto status = llvm_generator_->Execute(batch, {array_data});\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n \n   // Compute the intersection of the value and validity.\n   auto result = bitmaps.GetLocalBitMap(2);\ndiff --git a/cpp/src/gandiva/filter.h b/cpp/src/gandiva/filter.h\nindex 5d266f4a47..6ff7010ac0 100644\n--- a/cpp/src/gandiva/filter.h\n+++ b/cpp/src/gandiva/filter.h\n@@ -23,11 +23,12 @@\n #include <utility>\n #include <vector>\n \n+#include \"arrow/status.h\"\n+\n #include \"gandiva/arrow.h\"\n #include \"gandiva/condition.h\"\n #include \"gandiva/configuration.h\"\n #include \"gandiva/selection_vector.h\"\n-#include \"gandiva/status.h\"\n \n namespace gandiva {\n \ndiff --git a/cpp/src/gandiva/function_holder_registry.h b/cpp/src/gandiva/function_holder_registry.h\nindex 34545da86a..7e2772ed50 100644\n--- a/cpp/src/gandiva/function_holder_registry.h\n+++ b/cpp/src/gandiva/function_holder_registry.h\n@@ -23,10 +23,11 @@\n #include <string>\n #include <unordered_map>\n \n+#include \"arrow/status.h\"\n+\n #include \"gandiva/function_holder.h\"\n #include \"gandiva/like_holder.h\"\n #include \"gandiva/node.h\"\n-#include \"gandiva/status.h\"\n #include \"gandiva/to_date_holder.h\"\n \n namespace gandiva {\ndiff --git a/cpp/src/gandiva/jni/jni_common.cc b/cpp/src/gandiva/jni/jni_common.cc\nindex f2cafc8ea3..efc3c6e1e3 100644\n--- a/cpp/src/gandiva/jni/jni_common.cc\n+++ b/cpp/src/gandiva/jni/jni_common.cc\n@@ -20,6 +20,7 @@\n #include <map>\n #include <memory>\n #include <mutex>\n+#include <sstream>\n #include <string>\n #include <utility>\n #include <vector>\ndiff --git a/cpp/src/gandiva/like_holder.cc b/cpp/src/gandiva/like_holder.cc\nindex 9509b59448..d659b22c46 100644\n--- a/cpp/src/gandiva/like_holder.cc\n+++ b/cpp/src/gandiva/like_holder.cc\n@@ -77,7 +77,7 @@ Status LikeHolder::Make(const std::string& sql_pattern,\n                         std::shared_ptr<LikeHolder>* holder) {\n   std::string pcre_pattern;\n   auto status = RegexUtil::SqlLikePatternToPcre(sql_pattern, pcre_pattern);\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n \n   auto lholder = std::shared_ptr<LikeHolder>(new LikeHolder(pcre_pattern));\n   if (!lholder->regex_.ok()) {\ndiff --git a/cpp/src/gandiva/like_holder.h b/cpp/src/gandiva/like_holder.h\nindex 4d5a32c8ff..23ed367e8c 100644\n--- a/cpp/src/gandiva/like_holder.h\n+++ b/cpp/src/gandiva/like_holder.h\n@@ -22,9 +22,9 @@\n #include <string>\n \n #include <re2/re2.h>\n+#include \"arrow/status.h\"\n #include \"gandiva/function_holder.h\"\n #include \"gandiva/node.h\"\n-#include \"gandiva/status.h\"\n \n namespace gandiva {\n \ndiff --git a/cpp/src/gandiva/llvm_generator.cc b/cpp/src/gandiva/llvm_generator.cc\nindex 46f42e16fe..17d7f47527 100644\n--- a/cpp/src/gandiva/llvm_generator.cc\n+++ b/cpp/src/gandiva/llvm_generator.cc\n@@ -19,6 +19,7 @@\n \n #include <fstream>\n #include <iostream>\n+#include <sstream>\n #include <string>\n #include <utility>\n #include <vector>\n@@ -44,7 +45,7 @@ Status LLVMGenerator::Make(std::shared_ptr<Configuration> config,\n                            std::unique_ptr<LLVMGenerator>* llvm_generator) {\n   std::unique_ptr<LLVMGenerator> llvmgen_obj(new LLVMGenerator());\n   Status status = Engine::Make(config, &(llvmgen_obj->engine_));\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n \n   *llvm_generator = std::move(llvmgen_obj);\n   return Status::OK();\n@@ -57,12 +58,12 @@ Status LLVMGenerator::Add(const ExpressionPtr expr, const FieldDescriptorPtr out\n   ExprDecomposer decomposer(function_registry_, annotator_);\n   ValueValidityPairPtr value_validity;\n   auto status = decomposer.Decompose(*expr->root(), &value_validity);\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n \n   // Generate the IR function for the decomposed expression.\n   llvm::Function* ir_function = nullptr;\n   status = CodeGenExprValue(value_validity->value_expr(), output, idx, &ir_function);\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n \n   std::unique_ptr<CompiledExpr> compiled_expr(\n       new CompiledExpr(value_validity, output, ir_function));\n@@ -77,12 +78,12 @@ Status LLVMGenerator::Build(const ExpressionVector& exprs) {\n   for (auto& expr : exprs) {\n     auto output = annotator_.AddOutputFieldDescriptor(expr->result());\n     status = Add(expr, output);\n-    GANDIVA_RETURN_NOT_OK(status);\n+    ARROW_RETURN_NOT_OK(status);\n   }\n \n   // optimise, compile and finalize the module\n   status = engine_->FinalizeModule(optimise_ir_, dump_ir_);\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n \n   // setup the jit functions for each expression.\n   for (auto& compiled_expr : compiled_exprs_) {\n@@ -232,8 +233,8 @@ Status LLVMGenerator::CodeGenExprValue(DexPtr value_expr, FieldDescriptorPtr out\n   engine_->AddFunctionToCompile(func_name);\n   *fn = llvm::Function::Create(prototype, llvm::GlobalValue::ExternalLinkage, func_name,\n                                module());\n-  GANDIVA_RETURN_FAILURE_IF_FALSE((*fn != nullptr),\n-                                  Status::CodeGenError(\"Error creating function.\"));\n+  ARROW_RETURN_FAILURE_IF_FALSE((*fn != nullptr),\n+                                Status::CodeGenError(\"Error creating function.\"));\n   // Name the arguments\n   llvm::Function::arg_iterator args = (*fn)->arg_begin();\n   llvm::Value* arg_addrs = &*args;\ndiff --git a/cpp/src/gandiva/llvm_generator_test.cc b/cpp/src/gandiva/llvm_generator_test.cc\nindex 998aacb8e9..818c791215 100644\n--- a/cpp/src/gandiva/llvm_generator_test.cc\n+++ b/cpp/src/gandiva/llvm_generator_test.cc\n@@ -88,9 +88,11 @@ TEST_F(TestLLVMGenerator, TestAdd) {\n   llvm::Function* ir_func = nullptr;\n \n   status = generator->CodeGenExprValue(func_dex, desc_sum, 0, &ir_func);\n-  ASSERT_TRUE(status.ok());\n+  EXPECT_TRUE(status.ok()) << status.message();\n+\n+  status = generator->engine_->FinalizeModule(true, false);\n+  EXPECT_TRUE(status.ok()) << status.message();\n \n-  generator->engine_->FinalizeModule(true, false);\n   EvalFunc eval_func = (EvalFunc)generator->engine_->CompiledFunction(ir_func);\n \n   int num_records = 4;\ndiff --git a/cpp/src/gandiva/node.h b/cpp/src/gandiva/node.h\nindex c0bb81e305..8768fab9c4 100644\n--- a/cpp/src/gandiva/node.h\n+++ b/cpp/src/gandiva/node.h\n@@ -22,12 +22,13 @@\n #include <unordered_set>\n #include <vector>\n \n+#include \"arrow/status.h\"\n+\n #include \"gandiva/arrow.h\"\n #include \"gandiva/func_descriptor.h\"\n #include \"gandiva/gandiva_aliases.h\"\n #include \"gandiva/literal_holder.h\"\n #include \"gandiva/node_visitor.h\"\n-#include \"gandiva/status.h\"\n \n namespace gandiva {\n \ndiff --git a/cpp/src/gandiva/node_visitor.h b/cpp/src/gandiva/node_visitor.h\nindex b8f95bce7d..ba3645a589 100644\n--- a/cpp/src/gandiva/node_visitor.h\n+++ b/cpp/src/gandiva/node_visitor.h\n@@ -20,8 +20,9 @@\n \n #include <string>\n \n+#include \"arrow/status.h\"\n+\n #include \"gandiva/logging.h\"\n-#include \"gandiva/status.h\"\n \n namespace gandiva {\n \ndiff --git a/cpp/src/gandiva/projector.cc b/cpp/src/gandiva/projector.cc\nindex 04bb5e3f47..51a370e67a 100644\n--- a/cpp/src/gandiva/projector.cc\n+++ b/cpp/src/gandiva/projector.cc\n@@ -25,7 +25,6 @@\n #include \"gandiva/expr_validator.h\"\n #include \"gandiva/llvm_generator.h\"\n #include \"gandiva/projector_cache_key.h\"\n-#include \"gandiva/status.h\"\n \n namespace gandiva {\n \n@@ -46,12 +45,12 @@ Status Projector::Make(SchemaPtr schema, const ExpressionVector& exprs,\n Status Projector::Make(SchemaPtr schema, const ExpressionVector& exprs,\n                        std::shared_ptr<Configuration> configuration,\n                        std::shared_ptr<Projector>* projector) {\n-  GANDIVA_RETURN_FAILURE_IF_FALSE(schema != nullptr,\n-                                  Status::Invalid(\"schema cannot be null\"));\n-  GANDIVA_RETURN_FAILURE_IF_FALSE(!exprs.empty(),\n-                                  Status::Invalid(\"expressions need to be non-empty\"));\n-  GANDIVA_RETURN_FAILURE_IF_FALSE(configuration != nullptr,\n-                                  Status::Invalid(\"configuration cannot be null\"));\n+  ARROW_RETURN_FAILURE_IF_FALSE(schema != nullptr,\n+                                Status::Invalid(\"schema cannot be null\"));\n+  ARROW_RETURN_FAILURE_IF_FALSE(!exprs.empty(),\n+                                Status::Invalid(\"expressions need to be non-empty\"));\n+  ARROW_RETURN_FAILURE_IF_FALSE(configuration != nullptr,\n+                                Status::Invalid(\"configuration cannot be null\"));\n \n   // see if equivalent projector was already built\n   static Cache<ProjectorCacheKey, std::shared_ptr<Projector>> cache;\n@@ -65,7 +64,7 @@ Status Projector::Make(SchemaPtr schema, const ExpressionVector& exprs,\n   // Build LLVM generator, and generate code for the specified expressions\n   std::unique_ptr<LLVMGenerator> llvm_gen;\n   Status status = LLVMGenerator::Make(configuration, &llvm_gen);\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n \n   // Run the validation on the expressions.\n   // Return if any of the expression is invalid since\n@@ -73,11 +72,11 @@ Status Projector::Make(SchemaPtr schema, const ExpressionVector& exprs,\n   ExprValidator expr_validator(llvm_gen->types(), schema);\n   for (auto& expr : exprs) {\n     status = expr_validator.Validate(expr);\n-    GANDIVA_RETURN_NOT_OK(status);\n+    ARROW_RETURN_NOT_OK(status);\n   }\n \n   status = llvm_gen->Build(exprs);\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n \n   // save the output field types. Used for validation at Evaluate() time.\n   std::vector<FieldPtr> output_fields;\n@@ -96,7 +95,7 @@ Status Projector::Make(SchemaPtr schema, const ExpressionVector& exprs,\n Status Projector::Evaluate(const arrow::RecordBatch& batch,\n                            const ArrayDataVector& output_data_vecs) {\n   Status status = ValidateEvaluateArgsCommon(batch);\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n \n   if (output_data_vecs.size() != output_fields_.size()) {\n     std::stringstream ss;\n@@ -115,7 +114,7 @@ Status Projector::Evaluate(const arrow::RecordBatch& batch,\n \n     Status status = ValidateArrayDataCapacity(*array_data, *(output_fields_[idx]),\n                                               static_cast<int>(batch.num_rows()));\n-    GANDIVA_RETURN_NOT_OK(status);\n+    ARROW_RETURN_NOT_OK(status);\n     ++idx;\n   }\n   return llvm_generator_->Execute(batch, output_data_vecs);\n@@ -124,7 +123,7 @@ Status Projector::Evaluate(const arrow::RecordBatch& batch,\n Status Projector::Evaluate(const arrow::RecordBatch& batch, arrow::MemoryPool* pool,\n                            arrow::ArrayVector* output) {\n   Status status = ValidateEvaluateArgsCommon(batch);\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n \n   if (output == nullptr) {\n     return Status::Invalid(\"output must be non-null.\");\n@@ -141,14 +140,14 @@ Status Projector::Evaluate(const arrow::RecordBatch& batch, arrow::MemoryPool* p\n \n     status = AllocArrayData(field->type(), static_cast<int>(batch.num_rows()), pool,\n                             &output_data);\n-    GANDIVA_RETURN_NOT_OK(status);\n+    ARROW_RETURN_NOT_OK(status);\n \n     output_data_vecs.push_back(output_data);\n   }\n \n   // Execute the expression(s).\n   status = llvm_generator_->Execute(batch, output_data_vecs);\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n \n   // Create and return array arrays.\n   output->clear();\n@@ -169,13 +168,13 @@ Status Projector::AllocArrayData(const DataTypePtr& type, int num_records,\n   std::shared_ptr<arrow::Buffer> null_bitmap;\n   int64_t size = arrow::BitUtil::BytesForBits(num_records);\n   astatus = arrow::AllocateBuffer(pool, size, &null_bitmap);\n-  GANDIVA_RETURN_ARROW_NOT_OK(astatus);\n+  ARROW_RETURN_NOT_OK(astatus);\n \n   std::shared_ptr<arrow::Buffer> data;\n   const auto& fw_type = dynamic_cast<const arrow::FixedWidthType&>(*type);\n   int64_t data_len = arrow::BitUtil::BytesForBits(num_records * fw_type.bit_width());\n   astatus = arrow::AllocateBuffer(pool, data_len, &data);\n-  GANDIVA_RETURN_ARROW_NOT_OK(astatus);\n+  ARROW_RETURN_NOT_OK(astatus);\n \n   *array_data = arrow::ArrayData::Make(type, num_records, {null_bitmap, data});\n   return Status::OK();\ndiff --git a/cpp/src/gandiva/projector.h b/cpp/src/gandiva/projector.h\nindex efb6f4edb8..7ab45ff695 100644\n--- a/cpp/src/gandiva/projector.h\n+++ b/cpp/src/gandiva/projector.h\n@@ -23,10 +23,11 @@\n #include <utility>\n #include <vector>\n \n+#include \"arrow/status.h\"\n+\n #include \"gandiva/arrow.h\"\n #include \"gandiva/configuration.h\"\n #include \"gandiva/expression.h\"\n-#include \"gandiva/status.h\"\n \n namespace gandiva {\n \ndiff --git a/cpp/src/gandiva/regex_util.h b/cpp/src/gandiva/regex_util.h\nindex 99bb40ae64..6a22af2b9c 100644\n--- a/cpp/src/gandiva/regex_util.h\n+++ b/cpp/src/gandiva/regex_util.h\n@@ -19,9 +19,10 @@\n #define GANDIVA_REGEX_UTIL_H\n \n #include <set>\n+#include <sstream>\n #include <string>\n \n-#include \"gandiva/status.h\"\n+#include \"gandiva/arrow.h\"\n \n namespace gandiva {\n \ndiff --git a/cpp/src/gandiva/selection_vector.cc b/cpp/src/gandiva/selection_vector.cc\nindex a36cba96f1..0fd64a4a44 100644\n--- a/cpp/src/gandiva/selection_vector.cc\n+++ b/cpp/src/gandiva/selection_vector.cc\n@@ -18,11 +18,11 @@\n #include \"gandiva/selection_vector.h\"\n \n #include <memory>\n+#include <sstream>\n #include <utility>\n #include <vector>\n \n #include \"gandiva/selection_vector_impl.h\"\n-#include \"gandiva/status.h\"\n \n namespace gandiva {\n \n@@ -76,7 +76,7 @@ Status SelectionVector::PopulateFromBitMap(const uint8_t* bitmap, int bitmap_siz\n Status SelectionVector::MakeInt16(int max_slots, std::shared_ptr<arrow::Buffer> buffer,\n                                   std::shared_ptr<SelectionVector>* selection_vector) {\n   auto status = SelectionVectorInt16::ValidateBuffer(max_slots, buffer);\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n \n   *selection_vector = std::make_shared<SelectionVectorInt16>(max_slots, buffer);\n   return Status::OK();\n@@ -86,7 +86,7 @@ Status SelectionVector::MakeInt16(int max_slots, arrow::MemoryPool* pool,\n                                   std::shared_ptr<SelectionVector>* selection_vector) {\n   std::shared_ptr<arrow::Buffer> buffer;\n   auto status = SelectionVectorInt16::AllocateBuffer(max_slots, pool, &buffer);\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n \n   *selection_vector = std::make_shared<SelectionVectorInt16>(max_slots, buffer);\n   return Status::OK();\n@@ -95,7 +95,7 @@ Status SelectionVector::MakeInt16(int max_slots, arrow::MemoryPool* pool,\n Status SelectionVector::MakeInt32(int max_slots, std::shared_ptr<arrow::Buffer> buffer,\n                                   std::shared_ptr<SelectionVector>* selection_vector) {\n   auto status = SelectionVectorInt32::ValidateBuffer(max_slots, buffer);\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n \n   *selection_vector = std::make_shared<SelectionVectorInt32>(max_slots, buffer);\n   return Status::OK();\n@@ -105,7 +105,7 @@ Status SelectionVector::MakeInt32(int max_slots, arrow::MemoryPool* pool,\n                                   std::shared_ptr<SelectionVector>* selection_vector) {\n   std::shared_ptr<arrow::Buffer> buffer;\n   auto status = SelectionVectorInt32::AllocateBuffer(max_slots, pool, &buffer);\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n \n   *selection_vector = std::make_shared<SelectionVectorInt32>(max_slots, buffer);\n   return Status::OK();\n@@ -116,7 +116,7 @@ Status SelectionVectorImpl<C_TYPE, A_TYPE>::AllocateBuffer(\n     int max_slots, arrow::MemoryPool* pool, std::shared_ptr<arrow::Buffer>* buffer) {\n   auto buffer_len = max_slots * sizeof(C_TYPE);\n   auto astatus = arrow::AllocateBuffer(pool, buffer_len, buffer);\n-  GANDIVA_RETURN_ARROW_NOT_OK(astatus);\n+  ARROW_RETURN_NOT_OK(astatus);\n \n   return Status::OK();\n }\ndiff --git a/cpp/src/gandiva/selection_vector.h b/cpp/src/gandiva/selection_vector.h\nindex b6a7ad8e27..4dd9fe780b 100644\n--- a/cpp/src/gandiva/selection_vector.h\n+++ b/cpp/src/gandiva/selection_vector.h\n@@ -20,9 +20,10 @@\n \n #include <memory>\n \n+#include \"arrow/status.h\"\n+\n #include \"gandiva/arrow.h\"\n #include \"gandiva/logging.h\"\n-#include \"gandiva/status.h\"\n \n namespace gandiva {\n \ndiff --git a/cpp/src/gandiva/selection_vector_impl.h b/cpp/src/gandiva/selection_vector_impl.h\nindex 80d3521c24..a628bf0954 100644\n--- a/cpp/src/gandiva/selection_vector_impl.h\n+++ b/cpp/src/gandiva/selection_vector_impl.h\n@@ -21,12 +21,12 @@\n #include <limits>\n #include <memory>\n \n+#include \"arrow/status.h\"\n #include \"arrow/util/macros.h\"\n \n #include \"gandiva/arrow.h\"\n #include \"gandiva/logging.h\"\n #include \"gandiva/selection_vector.h\"\n-#include \"gandiva/status.h\"\n \n namespace gandiva {\n \ndiff --git a/cpp/src/gandiva/status.h b/cpp/src/gandiva/status.h\ndeleted file mode 100644\nindex 68e12303e8..0000000000\n--- a/cpp/src/gandiva/status.h\n+++ /dev/null\n@@ -1,272 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-#ifndef GANDIVA_STATUS_H\n-#define GANDIVA_STATUS_H\n-\n-#include <assert.h>\n-#include <sstream>\n-#include <string>\n-#include <utility>\n-\n-#include \"arrow/util/macros.h\"\n-\n-#define GANDIVA_RETURN_NOT_OK(status)                                                    \\\n-  do {                                                                                   \\\n-    Status _status = (status);                                                           \\\n-    if (!_status.ok()) {                                                                 \\\n-      std::stringstream ss;                                                              \\\n-      ss << __FILE__ << \":\" << __LINE__ << \" code: \" << _status.CodeAsString() << \" \\n \" \\\n-         << _status.message();                                                           \\\n-      return Status(_status.code(), ss.str());                                           \\\n-    }                                                                                    \\\n-  } while (0)\n-\n-#define GANDIVA_RETURN_FAILURE_IF_FALSE(condition, status)                               \\\n-  do {                                                                                   \\\n-    if (!(condition)) {                                                                  \\\n-      Status _status = (status);                                                         \\\n-      std::stringstream ss;                                                              \\\n-      ss << __FILE__ << \":\" << __LINE__ << \" code: \" << _status.CodeAsString() << \" \\n \" \\\n-         << _status.message();                                                           \\\n-      return Status(_status.code(), ss.str());                                           \\\n-    }                                                                                    \\\n-  } while (0)\n-\n-// Check arrow status & convert to gandiva status on error.\n-#define GANDIVA_RETURN_ARROW_NOT_OK(astatus)                      \\\n-  do {                                                            \\\n-    if (!(astatus).ok()) {                                        \\\n-      return Status(StatusCode::ArrowError, (astatus).message()); \\\n-    }                                                             \\\n-  } while (0)\n-\n-namespace gandiva {\n-\n-enum class StatusCode : char {\n-  OK = 0,\n-  Invalid = 1,\n-  CodeGenError = 2,\n-  ArrowError = 3,\n-  ExpressionValidationError = 4,\n-  ExecutionError = 5,\n-};\n-\n-class Status {\n- public:\n-  // Create a success status.\n-  Status() : state_(NULL) {}\n-  ~Status() { delete state_; }\n-\n-  Status(StatusCode code, const std::string& msg);\n-\n-  // Copy the specified status.\n-  Status(const Status& s);\n-  Status& operator=(const Status& s);\n-\n-  // Move the specified status.\n-  Status(Status&& s);\n-  Status& operator=(Status&& s);\n-\n-  // AND the statuses.\n-  Status operator&(const Status& s) const;\n-  Status operator&(Status&& s) const;\n-  Status& operator&=(const Status& s);\n-  Status& operator&=(Status&& s);\n-\n-  // Return a success status.\n-  static Status OK() { return Status(); }\n-\n-  // Return error status of an appropriate type.\n-  static Status CodeGenError(const std::string& msg) {\n-    return Status(StatusCode::CodeGenError, msg);\n-  }\n-\n-  static Status Invalid(const std::string& msg) {\n-    return Status(StatusCode::Invalid, msg);\n-  }\n-\n-  static Status ArrowError(const std::string& msg) {\n-    return Status(StatusCode::ArrowError, msg);\n-  }\n-\n-  static Status ExpressionValidationError(const std::string& msg) {\n-    return Status(StatusCode::ExpressionValidationError, msg);\n-  }\n-\n-  static Status ExecutionError(const std::string& msg) {\n-    return Status(StatusCode::ExecutionError, msg);\n-  }\n-\n-  // Returns true if the status indicates success.\n-  bool ok() const { return (state_ == NULL); }\n-\n-  bool IsCodeGenError() const { return code() == StatusCode::CodeGenError; }\n-\n-  bool IsInvalid() const { return code() == StatusCode::Invalid; }\n-\n-  bool IsArrowError() const { return code() == StatusCode::ArrowError; }\n-\n-  bool IsExpressionValidationError() const {\n-    return code() == StatusCode::ExpressionValidationError;\n-  }\n-\n-  bool IsExecutionError() const { return code() == StatusCode::ExecutionError; }\n-\n-  // Return a string representation of this status suitable for printing.\n-  // Returns the string \"OK\" for success.\n-  std::string ToString() const;\n-\n-  // Return a string representation of the status code, without the message\n-  // text or posix code information.\n-  std::string CodeAsString() const;\n-\n-  StatusCode code() const { return ok() ? StatusCode::OK : state_->code; }\n-\n-  std::string message() const { return ok() ? \"\" : state_->msg; }\n-\n- private:\n-  struct State {\n-    StatusCode code;\n-    std::string msg;\n-  };\n-  // OK status has a `NULL` state_.  Otherwise, `state_` points to\n-  // a `State` structure containing the error code and message(s)\n-  State* state_;\n-\n-  void CopyFrom(const Status& s);\n-  void MoveFrom(Status& s);\n-};\n-\n-static inline std::ostream& operator<<(std::ostream& os, const Status& x) {\n-  os << x.ToString();\n-  return os;\n-}\n-\n-inline Status::Status(const Status& s)\n-    : state_((s.state_ == NULL) ? NULL : new State(*s.state_)) {}\n-\n-inline Status& Status::operator=(const Status& s) {\n-  // The following condition catches both aliasing (when this == &s),\n-  // and the common case where both s and *this are ok.\n-  if (state_ != s.state_) {\n-    CopyFrom(s);\n-  }\n-  return *this;\n-}\n-\n-inline Status::Status(Status&& s) : state_(s.state_) { s.state_ = NULL; }\n-\n-inline Status& Status::operator=(Status&& s) {\n-  MoveFrom(s);\n-  return *this;\n-}\n-\n-inline Status Status::operator&(const Status& s) const {\n-  if (ok()) {\n-    return s;\n-  } else {\n-    return *this;\n-  }\n-}\n-\n-inline Status Status::operator&(Status&& s) const {\n-  if (ok()) {\n-    return std::move(s);\n-  } else {\n-    return *this;\n-  }\n-}\n-\n-inline Status& Status::operator&=(const Status& s) {\n-  if (ok() && !s.ok()) {\n-    CopyFrom(s);\n-  }\n-  return *this;\n-}\n-\n-inline Status& Status::operator&=(Status&& s) {\n-  if (ok() && !s.ok()) {\n-    MoveFrom(s);\n-  }\n-  return *this;\n-}\n-\n-inline Status::Status(StatusCode code, const std::string& msg) {\n-  assert(code != StatusCode::OK);\n-  state_ = new State;\n-  state_->code = code;\n-  state_->msg = msg;\n-}\n-\n-inline void Status::CopyFrom(const Status& s) {\n-  delete state_;\n-  if (s.state_ == NULLPTR) {\n-    state_ = NULLPTR;\n-  } else {\n-    state_ = new State(*s.state_);\n-  }\n-}\n-\n-inline std::string Status::CodeAsString() const {\n-  if (state_ == NULLPTR) {\n-    return \"OK\";\n-  }\n-\n-  const char* type;\n-  switch (code()) {\n-    case StatusCode::OK:\n-      type = \"OK\";\n-      break;\n-    case StatusCode::CodeGenError:\n-      type = \"CodeGenError\";\n-      break;\n-    case StatusCode::Invalid:\n-      type = \"Invalid\";\n-      break;\n-    case StatusCode::ExpressionValidationError:\n-      type = \"ExpressionValidationError\";\n-      break;\n-    case StatusCode::ExecutionError:\n-      type = \"ExecutionError\";\n-      break;\n-    default:\n-      type = \"Unknown\";\n-      break;\n-  }\n-  return std::string(type);\n-}\n-\n-inline void Status::MoveFrom(Status& s) {\n-  delete state_;\n-  state_ = s.state_;\n-  s.state_ = NULL;\n-}\n-\n-inline std::string Status::ToString() const {\n-  std::string result(CodeAsString());\n-  if (state_ == NULL) {\n-    return result;\n-  }\n-  result += \": \";\n-  result += state_->msg;\n-  return result;\n-}\n-\n-}  // namespace gandiva\n-\n-#endif  // GANDIVA_STATUS_H\ndiff --git a/cpp/src/gandiva/status_test.cc b/cpp/src/gandiva/status_test.cc\ndeleted file mode 100644\nindex d88be355ad..0000000000\n--- a/cpp/src/gandiva/status_test.cc\n+++ /dev/null\n@@ -1,71 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-#include \"gandiva/status.h\"\n-\n-#include <sstream>\n-\n-#include <gtest/gtest.h>\n-\n-namespace gandiva {\n-\n-TEST(StatusTest, TestCodeAndMessage) {\n-  Status ok = Status::OK();\n-  ASSERT_EQ(StatusCode::OK, ok.code());\n-  Status code_gen_error = Status::CodeGenError(\"input invalid.\");\n-  ASSERT_EQ(StatusCode::CodeGenError, code_gen_error.code());\n-  ASSERT_EQ(\"input invalid.\", code_gen_error.message());\n-}\n-\n-TEST(StatusTest, TestToString) {\n-  Status code_gen_error = Status::CodeGenError(\"input invalid.\");\n-  ASSERT_EQ(\"CodeGenError: input invalid.\", code_gen_error.ToString());\n-\n-  std::stringstream ss;\n-  ss << code_gen_error;\n-  ASSERT_EQ(code_gen_error.ToString(), ss.str());\n-}\n-\n-TEST(StatusTest, AndStatus) {\n-  Status a = Status::OK();\n-  Status b = Status::OK();\n-  Status c = Status::CodeGenError(\"invalid value\");\n-\n-  Status res;\n-  res = a & b;\n-  ASSERT_TRUE(res.ok());\n-  res = a & c;\n-  ASSERT_TRUE(res.IsCodeGenError());\n-\n-  res = Status::OK();\n-  res &= c;\n-  ASSERT_TRUE(res.IsCodeGenError());\n-\n-  // With rvalues\n-  res = Status::OK() & Status::CodeGenError(\"foo\");\n-  ASSERT_TRUE(res.IsCodeGenError());\n-  res = Status::CodeGenError(\"foo\") & Status::OK();\n-  ASSERT_TRUE(res.IsCodeGenError());\n-\n-  res = Status::OK();\n-  res &= Status::OK();\n-  ASSERT_TRUE(res.ok());\n-  res &= Status::CodeGenError(\"foo\");\n-  ASSERT_TRUE(res.IsCodeGenError());\n-}\n-\n-}  // namespace gandiva\ndiff --git a/cpp/src/gandiva/tests/binary_test.cc b/cpp/src/gandiva/tests/binary_test.cc\nindex 74f983925f..d5d99db910 100644\n--- a/cpp/src/gandiva/tests/binary_test.cc\n+++ b/cpp/src/gandiva/tests/binary_test.cc\n@@ -17,8 +17,9 @@\n \n #include <gtest/gtest.h>\n #include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+\n #include \"gandiva/projector.h\"\n-#include \"gandiva/status.h\"\n #include \"gandiva/tests/test_util.h\"\n #include \"gandiva/tree_expr_builder.h\"\n \ndiff --git a/cpp/src/gandiva/tests/boolean_expr_test.cc b/cpp/src/gandiva/tests/boolean_expr_test.cc\nindex 45e21203d4..3351ab3ccf 100644\n--- a/cpp/src/gandiva/tests/boolean_expr_test.cc\n+++ b/cpp/src/gandiva/tests/boolean_expr_test.cc\n@@ -17,8 +17,9 @@\n \n #include <gtest/gtest.h>\n #include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+\n #include \"gandiva/projector.h\"\n-#include \"gandiva/status.h\"\n #include \"gandiva/tests/test_util.h\"\n #include \"gandiva/tree_expr_builder.h\"\n \n@@ -81,7 +82,7 @@ TEST_F(TestBooleanExpr, SimpleAnd) {\n   exp = MakeArrowArrayBool({false, false, false, false}, {true, false, false, false});\n   in_batch = arrow::RecordBatch::Make(schema, num_records, {arraya, arrayb});\n   outputs.clear();\n-  projector->Evaluate(*in_batch, pool_, &outputs);\n+  status = projector->Evaluate(*in_batch, pool_, &outputs);\n   EXPECT_TRUE(status.ok());\n   EXPECT_ARROW_ARRAY_EQUALS(exp, outputs.at(0));\n \n@@ -92,7 +93,7 @@ TEST_F(TestBooleanExpr, SimpleAnd) {\n   exp = MakeArrowArrayBool({false, false, true, false}, {true, false, true, false});\n   in_batch = arrow::RecordBatch::Make(schema, num_records, {arraya, arrayb});\n   outputs.clear();\n-  projector->Evaluate(*in_batch, pool_, &outputs);\n+  status = projector->Evaluate(*in_batch, pool_, &outputs);\n   EXPECT_TRUE(status.ok());\n   EXPECT_ARROW_ARRAY_EQUALS(exp, outputs.at(0));\n \n@@ -103,7 +104,7 @@ TEST_F(TestBooleanExpr, SimpleAnd) {\n   exp = MakeArrowArrayBool({false, false, false, false}, {true, false, false, false});\n   in_batch = arrow::RecordBatch::Make(schema, num_records, {arraya, arrayb});\n   outputs.clear();\n-  projector->Evaluate(*in_batch, pool_, &outputs);\n+  status = projector->Evaluate(*in_batch, pool_, &outputs);\n   EXPECT_TRUE(status.ok());\n   EXPECT_ARROW_ARRAY_EQUALS(exp, outputs.at(0));\n }\n@@ -154,7 +155,7 @@ TEST_F(TestBooleanExpr, SimpleOr) {\n   exp = MakeArrowArrayBool({false, false, true, false}, {false, false, true, false});\n   in_batch = arrow::RecordBatch::Make(schema, num_records, {arraya, arrayb});\n   outputs.clear();\n-  projector->Evaluate(*in_batch, pool_, &outputs);\n+  status = projector->Evaluate(*in_batch, pool_, &outputs);\n   EXPECT_TRUE(status.ok());\n   EXPECT_ARROW_ARRAY_EQUALS(exp, outputs.at(0));\n \n@@ -165,7 +166,7 @@ TEST_F(TestBooleanExpr, SimpleOr) {\n   exp = MakeArrowArrayBool({false, false, true, false}, {true, false, true, false});\n   in_batch = arrow::RecordBatch::Make(schema, num_records, {arraya, arrayb});\n   outputs.clear();\n-  projector->Evaluate(*in_batch, pool_, &outputs);\n+  status = projector->Evaluate(*in_batch, pool_, &outputs);\n   EXPECT_TRUE(status.ok());\n   EXPECT_ARROW_ARRAY_EQUALS(exp, outputs.at(0));\n \n@@ -176,7 +177,7 @@ TEST_F(TestBooleanExpr, SimpleOr) {\n   exp = MakeArrowArrayBool({false, false, true, false}, {false, false, true, false});\n   in_batch = arrow::RecordBatch::Make(schema, num_records, {arraya, arrayb});\n   outputs.clear();\n-  projector->Evaluate(*in_batch, pool_, &outputs);\n+  status = projector->Evaluate(*in_batch, pool_, &outputs);\n   EXPECT_TRUE(status.ok());\n   EXPECT_ARROW_ARRAY_EQUALS(exp, outputs.at(0));\n }\ndiff --git a/cpp/src/gandiva/tests/hash_test.cc b/cpp/src/gandiva/tests/hash_test.cc\nindex fbe5a4a3f8..96f92284a5 100644\n--- a/cpp/src/gandiva/tests/hash_test.cc\n+++ b/cpp/src/gandiva/tests/hash_test.cc\n@@ -15,10 +15,13 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+#include <sstream>\n+\n #include <gtest/gtest.h>\n #include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+\n #include \"gandiva/projector.h\"\n-#include \"gandiva/status.h\"\n #include \"gandiva/tests/test_util.h\"\n #include \"gandiva/tree_expr_builder.h\"\n \ndiff --git a/cpp/src/gandiva/tests/if_expr_test.cc b/cpp/src/gandiva/tests/if_expr_test.cc\nindex 811137f10c..93b35673b9 100644\n--- a/cpp/src/gandiva/tests/if_expr_test.cc\n+++ b/cpp/src/gandiva/tests/if_expr_test.cc\n@@ -17,8 +17,9 @@\n \n #include <gtest/gtest.h>\n #include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+\n #include \"gandiva/projector.h\"\n-#include \"gandiva/status.h\"\n #include \"gandiva/tests/test_util.h\"\n #include \"gandiva/tree_expr_builder.h\"\n \ndiff --git a/cpp/src/gandiva/tests/literal_test.cc b/cpp/src/gandiva/tests/literal_test.cc\nindex e6f81e975b..ced66452a2 100644\n--- a/cpp/src/gandiva/tests/literal_test.cc\n+++ b/cpp/src/gandiva/tests/literal_test.cc\n@@ -17,8 +17,9 @@\n \n #include <gtest/gtest.h>\n #include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+\n #include \"gandiva/projector.h\"\n-#include \"gandiva/status.h\"\n #include \"gandiva/tests/test_util.h\"\n #include \"gandiva/tree_expr_builder.h\"\n \ndiff --git a/cpp/src/gandiva/tests/micro_benchmarks.cc b/cpp/src/gandiva/tests/micro_benchmarks.cc\nindex 936378a3f5..89eeed0337 100644\n--- a/cpp/src/gandiva/tests/micro_benchmarks.cc\n+++ b/cpp/src/gandiva/tests/micro_benchmarks.cc\n@@ -18,8 +18,8 @@\n \n #include <gtest/gtest.h>\n #include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n #include \"gandiva/projector.h\"\n-#include \"gandiva/status.h\"\n #include \"gandiva/tests/test_util.h\"\n #include \"gandiva/tests/timed_evaluate.h\"\n #include \"gandiva/tree_expr_builder.h\"\ndiff --git a/cpp/src/gandiva/tests/utf8_test.cc b/cpp/src/gandiva/tests/utf8_test.cc\nindex 63d49dda36..a0684feeef 100644\n--- a/cpp/src/gandiva/tests/utf8_test.cc\n+++ b/cpp/src/gandiva/tests/utf8_test.cc\n@@ -17,8 +17,9 @@\n \n #include <gtest/gtest.h>\n #include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+\n #include \"gandiva/projector.h\"\n-#include \"gandiva/status.h\"\n #include \"gandiva/tests/test_util.h\"\n #include \"gandiva/tree_expr_builder.h\"\n \ndiff --git a/cpp/src/gandiva/to_date_holder.cc b/cpp/src/gandiva/to_date_holder.cc\nindex 4f08b10f50..054e25f2d1 100644\n--- a/cpp/src/gandiva/to_date_holder.cc\n+++ b/cpp/src/gandiva/to_date_holder.cc\n@@ -64,7 +64,7 @@ Status ToDateHolder::Make(const std::string& sql_pattern, int32_t suppress_error\n                           std::shared_ptr<ToDateHolder>* holder) {\n   std::shared_ptr<std::string> transformed_pattern;\n   Status status = DateUtils::ToInternalFormat(sql_pattern, &transformed_pattern);\n-  GANDIVA_RETURN_NOT_OK(status);\n+  ARROW_RETURN_NOT_OK(status);\n   auto lholder = std::shared_ptr<ToDateHolder>(\n       new ToDateHolder(*(transformed_pattern.get()), suppress_errors));\n   *holder = lholder;\ndiff --git a/cpp/src/gandiva/to_date_holder.h b/cpp/src/gandiva/to_date_holder.h\nindex 8feff3d340..91133cc526 100644\n--- a/cpp/src/gandiva/to_date_holder.h\n+++ b/cpp/src/gandiva/to_date_holder.h\n@@ -22,10 +22,11 @@\n #include <string>\n #include <unordered_map>\n \n+#include \"arrow/status.h\"\n+\n #include \"gandiva/execution_context.h\"\n #include \"gandiva/function_holder.h\"\n #include \"gandiva/node.h\"\n-#include \"gandiva/status.h\"\n \n namespace gandiva {\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T22:33:48.690+0000",
                    "updated": "2018-10-29T22:33:48.690+0000",
                    "started": "2018-10-29T22:33:48.689+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160274",
                    "issueId": "13188303"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188303/worklog/160279",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2861: ARROW-3358: [Gandiva][C++] Deprecate Gandiva Status.\nURL: https://github.com/apache/arrow/pull/2861#issuecomment-434107129\n \n \n   I missed this in my review:\r\n   \r\n   ```\r\n     // Gandiva range of errors\r\n     CodeGenError = 40,\r\n     ArrowError = 41,\r\n     ExpressionValidationError = 42,\r\n     ExecutionError = 43\r\n   ```\r\n   \r\n   Out of these errors, how many do you actually need? \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-29T22:39:33.944+0000",
                    "updated": "2018-10-29T22:39:33.944+0000",
                    "started": "2018-10-29T22:39:33.943+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160279",
                    "issueId": "13188303"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188303/worklog/160437",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "praveenbingo commented on issue #2861: ARROW-3358: [Gandiva][C++] Deprecate Gandiva Status.\nURL: https://github.com/apache/arrow/pull/2861#issuecomment-434196335\n \n \n   > I missed this in my review:\r\n   > \r\n   > ```\r\n   >   // Gandiva range of errors\r\n   >   CodeGenError = 40,\r\n   >   ArrowError = 41,\r\n   >   ExpressionValidationError = 42,\r\n   >   ExecutionError = 43\r\n   > ```\r\n   > \r\n   > Out of these errors, how many do you actually need?\r\n   \r\n   Currently we use all four of them.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T07:20:22.741+0000",
                    "updated": "2018-10-30T07:20:22.741+0000",
                    "started": "2018-10-30T07:20:22.740+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160437",
                    "issueId": "13188303"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188303/worklog/160454",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on issue #2861: ARROW-3358: [Gandiva][C++] Deprecate Gandiva Status.\nURL: https://github.com/apache/arrow/pull/2861#issuecomment-434205300\n \n \n   @praveenbingo Thank you for updating the GLib bindings!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T07:59:05.927+0000",
                    "updated": "2018-10-30T07:59:05.927+0000",
                    "started": "2018-10-30T07:59:05.926+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160454",
                    "issueId": "13188303"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188303/worklog/160497",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2861: ARROW-3358: [Gandiva][C++] Deprecate Gandiva Status.\nURL: https://github.com/apache/arrow/pull/2861#issuecomment-434240555\n \n \n   @praveenbingo I didn't see usage of ArrowError\r\n   \r\n   https://github.com/apache/arrow/search?l=C%2B%2B&q=ArrowError\r\n   \r\n   I was thinking you would want to use the Status valid that's returned by the failing part of the rest of the library.\r\n   \r\n   For `ExpressionValidationError`, you could return `Status::Invalid` instead\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T10:03:58.748+0000",
                    "updated": "2018-10-30T10:03:58.748+0000",
                    "started": "2018-10-30T10:03:58.747+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160497",
                    "issueId": "13188303"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188303/worklog/160535",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #2861: ARROW-3358: [Gandiva][C++] Deprecate Gandiva Status.\nURL: https://github.com/apache/arrow/pull/2861#issuecomment-434257886\n \n \n   I want to rename `GARROW_ERROR_CODEGEN` to `GARROW_ERROR_CODE_GEN` or `GARROW_ERROR_CODE_GENERATION`.\r\n   I'll work on it later.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T11:02:47.115+0000",
                    "updated": "2018-10-30T11:02:47.115+0000",
                    "started": "2018-10-30T11:02:47.114+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160535",
                    "issueId": "13188303"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188303/worklog/160542",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "praveenbingo commented on issue #2861: ARROW-3358: [Gandiva][C++] Deprecate Gandiva Status.\nURL: https://github.com/apache/arrow/pull/2861#issuecomment-434264488\n \n \n   > @praveenbingo I didn't see usage of ArrowError\r\n   > \r\n   > https://github.com/apache/arrow/search?l=C%2B%2B&q=ArrowError\r\n   > \r\n   > I was thinking you would want to use the Status valid that's returned by the failing part of the rest of the library.\r\n   > \r\n   > For `ExpressionValidationError`, you could return `Status::Invalid` instead\r\n   \r\n   @wesm Ah yes, i removed usage of arrow error when refactoring.\r\n   \r\n   For others, it is better to have a specific error code for each error type no?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T11:26:11.985+0000",
                    "updated": "2018-10-30T11:26:11.985+0000",
                    "started": "2018-10-30T11:26:11.984+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160542",
                    "issueId": "13188303"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188303/worklog/160636",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2861: ARROW-3358: [Gandiva][C++] Deprecate Gandiva Status.\nURL: https://github.com/apache/arrow/pull/2861#issuecomment-434315584\n \n \n   It depends on what your objective with the error codes is, i.e. if a new error code has a specific use in an application. Each new error code introduces complexity into bindings\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T14:09:29.478+0000",
                    "updated": "2018-10-30T14:09:29.478+0000",
                    "started": "2018-10-30T14:09:29.477+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160636",
                    "issueId": "13188303"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@181247a1[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@10396f0f[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6fde3816[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@344473f5[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3628b170[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@94e820e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@174e05b9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@82177e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7352952f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@ef127b9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@69758813[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@79dc4ba4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7200,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Oct 29 22:33:43 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-29T22:33:43.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3358/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2018-09-29T08:31:13.000+0000",
        "updated": "2018-10-30T14:09:29.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Gandiva][C++] Replace usages of gandiva/status.h with arrow/status.h",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188303/comment/16666089",
                    "id": "16666089",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~pravindra] we should probably tackle this soon since we're starting to have bindings to {{gandiva::Status}} in GLib and Python now",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-27T13:48:13.065+0000",
                    "updated": "2018-10-27T13:48:13.065+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188303/comment/16667117",
                    "id": "16667117",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=praveenbingo",
                        "name": "praveenbingo",
                        "key": "praveenbingo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Praveen Kumar",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~wesmckinn] Cleaned it up now.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=praveenbingo",
                        "name": "praveenbingo",
                        "key": "praveenbingo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Praveen Kumar",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-10-29T12:23:00.486+0000",
                    "updated": "2018-10-29T12:23:00.486+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188303/comment/16667847",
                    "id": "16667847",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2861\n[https://github.com/apache/arrow/pull/2861]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-29T22:33:43.037+0000",
                    "updated": "2018-10-29T22:33:43.037+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|i3ymzz:",
        "customfield_12314139": null
    }
}