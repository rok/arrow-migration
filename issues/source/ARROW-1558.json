{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13103394",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394",
    "key": "ARROW-1558",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "Analytics",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 35400,
            "total": 35400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 35400,
            "total": 35400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1558/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 62,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/worklog/246372",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4366: ARROW-1558: [C++] initial mask kernel impl\nURL: https://github.com/apache/arrow/pull/4366\n \n \n   Materializes an array masked by a selection array (for example one produced by the filter kernel)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-21T21:03:32.095+0000",
                    "updated": "2019-05-21T21:03:32.095+0000",
                    "started": "2019-05-21T21:03:32.094+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "246372",
                    "issueId": "13103394"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/worklog/246774",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4366: ARROW-1558: [C++] initial mask kernel impl\nURL: https://github.com/apache/arrow/pull/4366#discussion_r286526771\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/mask.h\n ##########\n @@ -0,0 +1,82 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+namespace compute {\n+\n+class FunctionContext;\n+\n+struct ARROW_EXPORT MaskOptions {};\n+\n+/// \\brief Mask an array with a boolean selection filter\n+///\n+/// The output array will be populated with values from the input at positions\n+/// where the selection filter is not 0. Nulls in the filter will result in nulls\n+/// in the output.\n+///\n+/// For example given values = [\"a\", \"b\", \"c\", null, \"e\", \"f\"] and\n+/// filter = [0, 1, 1, 0, null, 1], the output will be\n+/// = [\"b\", \"c\", null, \"f\"]\n+///\n+/// \\param[in] context the FunctionContext\n+/// \\param[in] values array from which to take\n+/// \\param[in] mask indicates which values should be masked out\n+/// \\param[in] options options\n+/// \\param[out] out resulting array\n+ARROW_EXPORT\n+Status Mask(FunctionContext* context, const Array& values, const Array& mask,\n \n Review comment:\n   Shouldn't this be called \"Select\" or \"Filter\"?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-22T14:49:33.760+0000",
                    "updated": "2019-05-22T14:49:33.760+0000",
                    "started": "2019-05-22T14:49:33.759+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "246774",
                    "issueId": "13103394"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/worklog/246775",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4366: ARROW-1558: [C++] initial mask kernel impl\nURL: https://github.com/apache/arrow/pull/4366#discussion_r286527382\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/mask.h\n ##########\n @@ -0,0 +1,82 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+namespace compute {\n+\n+class FunctionContext;\n+\n+struct ARROW_EXPORT MaskOptions {};\n \n Review comment:\n   Do you have any options in mind that we may want to add here? Otherwise, this seems a bit superfluous.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-22T14:49:33.762+0000",
                    "updated": "2019-05-22T14:49:33.762+0000",
                    "started": "2019-05-22T14:49:33.762+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "246775",
                    "issueId": "13103394"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/worklog/246776",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4366: ARROW-1558: [C++] initial mask kernel impl\nURL: https://github.com/apache/arrow/pull/4366#discussion_r286527778\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/mask.cc\n ##########\n @@ -0,0 +1,230 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// returnGegarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <memory>\n+#include <utility>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernels/mask.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+Status Mask(FunctionContext* context, const Array& values, const Array& mask,\n+            const MaskOptions& options, std::shared_ptr<Array>* out) {\n+  Datum out_datum;\n+  RETURN_NOT_OK(\n+      Mask(context, Datum(values.data()), Datum(mask.data()), options, &out_datum));\n+  *out = out_datum.make_array();\n+  return Status::OK();\n+}\n+\n+Status Mask(FunctionContext* context, const Datum& values, const Datum& mask,\n+            const MaskOptions& options, Datum* out) {\n+  MaskKernel kernel(values.type(), options);\n+  RETURN_NOT_OK(kernel.Call(context, values, mask, out));\n+  return Status::OK();\n+}\n+\n+struct MaskParameters {\n+  FunctionContext* context;\n+  std::shared_ptr<Array> values, mask;\n+  MaskOptions options;\n+  std::shared_ptr<Array>* out;\n+};\n+\n+template <typename Builder, typename Scalar>\n+static Status UnsafeAppend(Builder* builder, Scalar&& value) {\n+  builder->UnsafeAppend(std::forward<Scalar>(value));\n+  return Status::OK();\n+}\n+\n+static Status UnsafeAppend(BinaryBuilder* builder, util::string_view value) {\n+  RETURN_NOT_OK(builder->ReserveData(static_cast<int64_t>(value.size())));\n+  builder->UnsafeAppend(value);\n+  return Status::OK();\n+}\n+\n+static Status UnsafeAppend(StringBuilder* builder, util::string_view value) {\n+  RETURN_NOT_OK(builder->ReserveData(static_cast<int64_t>(value.size())));\n+  builder->UnsafeAppend(value);\n+  return Status::OK();\n+}\n+\n+// TODO(bkietz) this can be optimized\n+static int64_t OutputSize(const BooleanArray& mask) {\n+  auto offset = mask.offset();\n+  auto length = mask.length();\n+  internal::BitmapReader mask_data(mask.data()->buffers[1]->data(), offset, length);\n+  int64_t size = 0;\n+  for (auto i = offset; i < offset + length; ++i) {\n+    if (mask.IsNull(i) || mask_data.IsSet()) {\n+      ++size;\n+    }\n+    mask_data.Next();\n+  }\n+  return size;\n+}\n+\n+template <bool AllValuesValid, bool WholeMaskValid, typename ValueArray,\n+          typename OutBuilder>\n+Status MaskImpl(FunctionContext*, const ValueArray& values, const BooleanArray& mask,\n+                OutBuilder* builder) {\n+  auto offset = mask.offset();\n+  auto length = mask.length();\n+  internal::BitmapReader mask_data(mask.data()->buffers[1]->data(), offset, length);\n+  for (int64_t i = 0; i < mask.length(); mask_data.Next(), ++i) {\n+    if (!WholeMaskValid && mask.IsNull(i)) {\n+      builder->UnsafeAppendNull();\n+      continue;\n+    }\n+    if (mask_data.IsNotSet()) {\n+      continue;\n+    }\n+    if (!AllValuesValid && values.IsNull(i)) {\n+      builder->UnsafeAppendNull();\n+      continue;\n+    }\n+    RETURN_NOT_OK(UnsafeAppend(builder, values.GetView(i)));\n+  }\n+  return Status::OK();\n+}\n+\n+template <bool AllValuesValid, typename ValueArray, typename MaskArray,\n+          typename OutBuilder>\n+Status UnpackMaskNullCount(FunctionContext* context, const ValueArray& values,\n+                           const MaskArray& mask, OutBuilder* builder) {\n+  if (mask.null_count() == 0) {\n+    return MaskImpl<AllValuesValid, true>(context, values, mask, builder);\n+  }\n+  return MaskImpl<AllValuesValid, false>(context, values, mask, builder);\n+}\n+\n+template <typename ValueArray, typename MaskArray, typename OutBuilder>\n+Status UnpackValuesNullCount(FunctionContext* context, const ValueArray& values,\n+                             const MaskArray& mask, OutBuilder* builder) {\n+  if (values.null_count() == 0) {\n+    return UnpackMaskNullCount<true>(context, values, mask, builder);\n+  }\n+  return UnpackMaskNullCount<false>(context, values, mask, builder);\n+}\n+\n+template <typename T>\n+using ArrayType = typename TypeTraits<T>::ArrayType;\n+\n+template <typename MaskType>\n+struct UnpackValues {\n+  template <typename ValueType>\n+  Status Visit(const ValueType&) {\n+    using OutBuilder = typename TypeTraits<ValueType>::BuilderType;\n+    auto&& mask = static_cast<const ArrayType<MaskType>&>(*params_.mask);\n+    auto&& values = static_cast<const ArrayType<ValueType>&>(*params_.values);\n+    std::unique_ptr<ArrayBuilder> builder;\n+    RETURN_NOT_OK(MakeBuilder(params_.context->memory_pool(), values.type(), &builder));\n+    RETURN_NOT_OK(builder->Reserve(OutputSize(mask)));\n+    RETURN_NOT_OK(UnpackValuesNullCount(params_.context, values, mask,\n+                                        static_cast<OutBuilder*>(builder.get())));\n+    return builder->Finish(params_.out);\n+  }\n+\n+  Status Visit(const NullType& t) {\n+    auto&& mask = static_cast<const ArrayType<MaskType>&>(*params_.mask);\n+    params_.out->reset(new NullArray(OutputSize(mask)));\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryType& t) {\n+    std::shared_ptr<Array> masked_indices;\n+    const auto& values = internal::checked_cast<const DictionaryArray&>(*params_.values);\n+    {\n+      // To take from a dictionary, apply the current kernel to the dictionary's\n+      // mask. (Use UnpackValues<MaskType> since MaskType is already unpacked)\n \n Review comment:\n   You mean \"to the dictionary's indices\" I suppose?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-22T14:49:33.878+0000",
                    "updated": "2019-05-22T14:49:33.878+0000",
                    "started": "2019-05-22T14:49:33.877+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "246776",
                    "issueId": "13103394"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/worklog/246777",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4366: ARROW-1558: [C++] initial mask kernel impl\nURL: https://github.com/apache/arrow/pull/4366#discussion_r286531012\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/mask-test.cc\n ##########\n @@ -0,0 +1,145 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// returnGegarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernels/mask.h\"\n+#include \"arrow/compute/test-util.h\"\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+#include \"arrow/testing/util.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+using util::string_view;\n+\n+template <typename ArrowType>\n+class TestMaskKernel : public ComputeFixture, public TestBase {\n+ protected:\n+  void AssertMaskArrays(const std::shared_ptr<Array>& values,\n+                        const std::shared_ptr<Array>& mask, MaskOptions options,\n+                        const std::shared_ptr<Array>& expected) {\n+    std::shared_ptr<Array> actual;\n+    ASSERT_OK(arrow::compute::Mask(&this->ctx_, *values, *mask, options, &actual));\n+    AssertArraysEqual(*expected, *actual);\n+  }\n+  void AssertMask(const std::shared_ptr<DataType>& type, const std::string& values,\n+                  const std::string& mask, MaskOptions options,\n+                  const std::string& expected) {\n+    std::shared_ptr<Array> actual;\n+    ASSERT_OK(this->Mask(type, values, mask, options, &actual));\n+    AssertArraysEqual(*ArrayFromJSON(type, expected), *actual);\n+  }\n+  Status Mask(const std::shared_ptr<DataType>& type, const std::string& values,\n+              const std::string& mask, MaskOptions options, std::shared_ptr<Array>* out) {\n+    return arrow::compute::Mask(&this->ctx_, *ArrayFromJSON(type, values),\n+                                *ArrayFromJSON(boolean(), mask), options, out);\n+  }\n+};\n+\n+class TestMaskKernelWithNull : public TestMaskKernel<NullType> {\n+ protected:\n+  void AssertMask(const std::string& values, const std::string& mask, MaskOptions options,\n+                  const std::string& expected) {\n+    TestMaskKernel<NullType>::AssertMask(utf8(), values, mask, options, expected);\n+  }\n+};\n+\n+TEST_F(TestMaskKernelWithNull, MaskNull) {\n+  MaskOptions options;\n+  this->AssertMask(\"[null, null, null]\", \"[0, 1, 0]\", options, \"[null]\");\n+  this->AssertMask(\"[null, null, null]\", \"[1, 1, 0]\", options, \"[null, null]\");\n \n Review comment:\n   Also should add tests with an empty mask array.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-22T14:49:33.881+0000",
                    "updated": "2019-05-22T14:49:33.881+0000",
                    "started": "2019-05-22T14:49:33.881+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "246777",
                    "issueId": "13103394"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/worklog/246778",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4366: ARROW-1558: [C++] initial mask kernel impl\nURL: https://github.com/apache/arrow/pull/4366#discussion_r286528953\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/mask.cc\n ##########\n @@ -0,0 +1,230 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// returnGegarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <memory>\n+#include <utility>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernels/mask.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+Status Mask(FunctionContext* context, const Array& values, const Array& mask,\n+            const MaskOptions& options, std::shared_ptr<Array>* out) {\n+  Datum out_datum;\n+  RETURN_NOT_OK(\n+      Mask(context, Datum(values.data()), Datum(mask.data()), options, &out_datum));\n+  *out = out_datum.make_array();\n+  return Status::OK();\n+}\n+\n+Status Mask(FunctionContext* context, const Datum& values, const Datum& mask,\n+            const MaskOptions& options, Datum* out) {\n+  MaskKernel kernel(values.type(), options);\n+  RETURN_NOT_OK(kernel.Call(context, values, mask, out));\n+  return Status::OK();\n+}\n+\n+struct MaskParameters {\n+  FunctionContext* context;\n+  std::shared_ptr<Array> values, mask;\n+  MaskOptions options;\n+  std::shared_ptr<Array>* out;\n+};\n+\n+template <typename Builder, typename Scalar>\n+static Status UnsafeAppend(Builder* builder, Scalar&& value) {\n+  builder->UnsafeAppend(std::forward<Scalar>(value));\n+  return Status::OK();\n+}\n+\n+static Status UnsafeAppend(BinaryBuilder* builder, util::string_view value) {\n+  RETURN_NOT_OK(builder->ReserveData(static_cast<int64_t>(value.size())));\n+  builder->UnsafeAppend(value);\n+  return Status::OK();\n+}\n+\n+static Status UnsafeAppend(StringBuilder* builder, util::string_view value) {\n+  RETURN_NOT_OK(builder->ReserveData(static_cast<int64_t>(value.size())));\n+  builder->UnsafeAppend(value);\n+  return Status::OK();\n+}\n+\n+// TODO(bkietz) this can be optimized\n+static int64_t OutputSize(const BooleanArray& mask) {\n+  auto offset = mask.offset();\n+  auto length = mask.length();\n+  internal::BitmapReader mask_data(mask.data()->buffers[1]->data(), offset, length);\n+  int64_t size = 0;\n+  for (auto i = offset; i < offset + length; ++i) {\n+    if (mask.IsNull(i) || mask_data.IsSet()) {\n+      ++size;\n+    }\n+    mask_data.Next();\n+  }\n+  return size;\n+}\n+\n+template <bool AllValuesValid, bool WholeMaskValid, typename ValueArray,\n+          typename OutBuilder>\n+Status MaskImpl(FunctionContext*, const ValueArray& values, const BooleanArray& mask,\n+                OutBuilder* builder) {\n+  auto offset = mask.offset();\n+  auto length = mask.length();\n+  internal::BitmapReader mask_data(mask.data()->buffers[1]->data(), offset, length);\n+  for (int64_t i = 0; i < mask.length(); mask_data.Next(), ++i) {\n+    if (!WholeMaskValid && mask.IsNull(i)) {\n+      builder->UnsafeAppendNull();\n+      continue;\n+    }\n+    if (mask_data.IsNotSet()) {\n+      continue;\n+    }\n+    if (!AllValuesValid && values.IsNull(i)) {\n+      builder->UnsafeAppendNull();\n+      continue;\n+    }\n+    RETURN_NOT_OK(UnsafeAppend(builder, values.GetView(i)));\n+  }\n+  return Status::OK();\n+}\n+\n+template <bool AllValuesValid, typename ValueArray, typename MaskArray,\n+          typename OutBuilder>\n+Status UnpackMaskNullCount(FunctionContext* context, const ValueArray& values,\n+                           const MaskArray& mask, OutBuilder* builder) {\n+  if (mask.null_count() == 0) {\n+    return MaskImpl<AllValuesValid, true>(context, values, mask, builder);\n+  }\n+  return MaskImpl<AllValuesValid, false>(context, values, mask, builder);\n+}\n+\n+template <typename ValueArray, typename MaskArray, typename OutBuilder>\n+Status UnpackValuesNullCount(FunctionContext* context, const ValueArray& values,\n+                             const MaskArray& mask, OutBuilder* builder) {\n+  if (values.null_count() == 0) {\n+    return UnpackMaskNullCount<true>(context, values, mask, builder);\n+  }\n+  return UnpackMaskNullCount<false>(context, values, mask, builder);\n+}\n+\n+template <typename T>\n+using ArrayType = typename TypeTraits<T>::ArrayType;\n+\n+template <typename MaskType>\n+struct UnpackValues {\n+  template <typename ValueType>\n+  Status Visit(const ValueType&) {\n+    using OutBuilder = typename TypeTraits<ValueType>::BuilderType;\n+    auto&& mask = static_cast<const ArrayType<MaskType>&>(*params_.mask);\n \n Review comment:\n   Use `checked_cast` everywhere here. Also why `auto&&`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-22T14:49:33.902+0000",
                    "updated": "2019-05-22T14:49:33.902+0000",
                    "started": "2019-05-22T14:49:33.902+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "246778",
                    "issueId": "13103394"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/worklog/246785",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #4366: ARROW-1558: [C++] initial mask kernel impl\nURL: https://github.com/apache/arrow/pull/4366#issuecomment-494837248\n \n \n   Also, if you don't implement all types here, can you open a JIRA for the missing ones?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-22T14:51:44.377+0000",
                    "updated": "2019-05-22T14:51:44.377+0000",
                    "started": "2019-05-22T14:51:44.376+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "246785",
                    "issueId": "13103394"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/worklog/246788",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4366: ARROW-1558: [C++] initial mask kernel impl\nURL: https://github.com/apache/arrow/pull/4366#discussion_r286534486\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/mask.h\n ##########\n @@ -0,0 +1,82 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+namespace compute {\n+\n+class FunctionContext;\n+\n+struct ARROW_EXPORT MaskOptions {};\n+\n+/// \\brief Mask an array with a boolean selection filter\n+///\n+/// The output array will be populated with values from the input at positions\n+/// where the selection filter is not 0. Nulls in the filter will result in nulls\n+/// in the output.\n+///\n+/// For example given values = [\"a\", \"b\", \"c\", null, \"e\", \"f\"] and\n+/// filter = [0, 1, 1, 0, null, 1], the output will be\n+/// = [\"b\", \"c\", null, \"f\"]\n+///\n+/// \\param[in] context the FunctionContext\n+/// \\param[in] values array from which to take\n+/// \\param[in] mask indicates which values should be masked out\n+/// \\param[in] options options\n+/// \\param[out] out resulting array\n+ARROW_EXPORT\n+Status Mask(FunctionContext* context, const Array& values, const Array& mask,\n \n Review comment:\n   Unfortunately `Filter` is [already taken](https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/filter.h#L34). Select would be fine, anyone else want to weigh in?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-22T14:54:51.971+0000",
                    "updated": "2019-05-22T14:54:51.971+0000",
                    "started": "2019-05-22T14:54:51.970+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "246788",
                    "issueId": "13103394"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/worklog/246789",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4366: ARROW-1558: [C++] initial mask kernel impl\nURL: https://github.com/apache/arrow/pull/4366#discussion_r286535612\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/mask.h\n ##########\n @@ -0,0 +1,82 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+namespace compute {\n+\n+class FunctionContext;\n+\n+struct ARROW_EXPORT MaskOptions {};\n \n Review comment:\n   `Take` also has an empty options struct, should I remove them both? They are both there just because I'm following the pattern of other kernels which are complicated enough to have non-empty options.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-22T14:56:40.509+0000",
                    "updated": "2019-05-22T14:56:40.509+0000",
                    "started": "2019-05-22T14:56:40.509+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "246789",
                    "issueId": "13103394"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/worklog/246790",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4366: ARROW-1558: [C++] initial mask kernel impl\nURL: https://github.com/apache/arrow/pull/4366#discussion_r286535718\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/mask.cc\n ##########\n @@ -0,0 +1,230 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// returnGegarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <memory>\n+#include <utility>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernels/mask.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+Status Mask(FunctionContext* context, const Array& values, const Array& mask,\n+            const MaskOptions& options, std::shared_ptr<Array>* out) {\n+  Datum out_datum;\n+  RETURN_NOT_OK(\n+      Mask(context, Datum(values.data()), Datum(mask.data()), options, &out_datum));\n+  *out = out_datum.make_array();\n+  return Status::OK();\n+}\n+\n+Status Mask(FunctionContext* context, const Datum& values, const Datum& mask,\n+            const MaskOptions& options, Datum* out) {\n+  MaskKernel kernel(values.type(), options);\n+  RETURN_NOT_OK(kernel.Call(context, values, mask, out));\n+  return Status::OK();\n+}\n+\n+struct MaskParameters {\n+  FunctionContext* context;\n+  std::shared_ptr<Array> values, mask;\n+  MaskOptions options;\n+  std::shared_ptr<Array>* out;\n+};\n+\n+template <typename Builder, typename Scalar>\n+static Status UnsafeAppend(Builder* builder, Scalar&& value) {\n+  builder->UnsafeAppend(std::forward<Scalar>(value));\n+  return Status::OK();\n+}\n+\n+static Status UnsafeAppend(BinaryBuilder* builder, util::string_view value) {\n+  RETURN_NOT_OK(builder->ReserveData(static_cast<int64_t>(value.size())));\n+  builder->UnsafeAppend(value);\n+  return Status::OK();\n+}\n+\n+static Status UnsafeAppend(StringBuilder* builder, util::string_view value) {\n+  RETURN_NOT_OK(builder->ReserveData(static_cast<int64_t>(value.size())));\n+  builder->UnsafeAppend(value);\n+  return Status::OK();\n+}\n+\n+// TODO(bkietz) this can be optimized\n+static int64_t OutputSize(const BooleanArray& mask) {\n+  auto offset = mask.offset();\n+  auto length = mask.length();\n+  internal::BitmapReader mask_data(mask.data()->buffers[1]->data(), offset, length);\n+  int64_t size = 0;\n+  for (auto i = offset; i < offset + length; ++i) {\n+    if (mask.IsNull(i) || mask_data.IsSet()) {\n+      ++size;\n+    }\n+    mask_data.Next();\n+  }\n+  return size;\n+}\n+\n+template <bool AllValuesValid, bool WholeMaskValid, typename ValueArray,\n+          typename OutBuilder>\n+Status MaskImpl(FunctionContext*, const ValueArray& values, const BooleanArray& mask,\n+                OutBuilder* builder) {\n+  auto offset = mask.offset();\n+  auto length = mask.length();\n+  internal::BitmapReader mask_data(mask.data()->buffers[1]->data(), offset, length);\n+  for (int64_t i = 0; i < mask.length(); mask_data.Next(), ++i) {\n+    if (!WholeMaskValid && mask.IsNull(i)) {\n+      builder->UnsafeAppendNull();\n+      continue;\n+    }\n+    if (mask_data.IsNotSet()) {\n+      continue;\n+    }\n+    if (!AllValuesValid && values.IsNull(i)) {\n+      builder->UnsafeAppendNull();\n+      continue;\n+    }\n+    RETURN_NOT_OK(UnsafeAppend(builder, values.GetView(i)));\n+  }\n+  return Status::OK();\n+}\n+\n+template <bool AllValuesValid, typename ValueArray, typename MaskArray,\n+          typename OutBuilder>\n+Status UnpackMaskNullCount(FunctionContext* context, const ValueArray& values,\n+                           const MaskArray& mask, OutBuilder* builder) {\n+  if (mask.null_count() == 0) {\n+    return MaskImpl<AllValuesValid, true>(context, values, mask, builder);\n+  }\n+  return MaskImpl<AllValuesValid, false>(context, values, mask, builder);\n+}\n+\n+template <typename ValueArray, typename MaskArray, typename OutBuilder>\n+Status UnpackValuesNullCount(FunctionContext* context, const ValueArray& values,\n+                             const MaskArray& mask, OutBuilder* builder) {\n+  if (values.null_count() == 0) {\n+    return UnpackMaskNullCount<true>(context, values, mask, builder);\n+  }\n+  return UnpackMaskNullCount<false>(context, values, mask, builder);\n+}\n+\n+template <typename T>\n+using ArrayType = typename TypeTraits<T>::ArrayType;\n+\n+template <typename MaskType>\n+struct UnpackValues {\n+  template <typename ValueType>\n+  Status Visit(const ValueType&) {\n+    using OutBuilder = typename TypeTraits<ValueType>::BuilderType;\n+    auto&& mask = static_cast<const ArrayType<MaskType>&>(*params_.mask);\n+    auto&& values = static_cast<const ArrayType<ValueType>&>(*params_.values);\n+    std::unique_ptr<ArrayBuilder> builder;\n+    RETURN_NOT_OK(MakeBuilder(params_.context->memory_pool(), values.type(), &builder));\n+    RETURN_NOT_OK(builder->Reserve(OutputSize(mask)));\n+    RETURN_NOT_OK(UnpackValuesNullCount(params_.context, values, mask,\n+                                        static_cast<OutBuilder*>(builder.get())));\n+    return builder->Finish(params_.out);\n+  }\n+\n+  Status Visit(const NullType& t) {\n+    auto&& mask = static_cast<const ArrayType<MaskType>&>(*params_.mask);\n+    params_.out->reset(new NullArray(OutputSize(mask)));\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryType& t) {\n+    std::shared_ptr<Array> masked_indices;\n+    const auto& values = internal::checked_cast<const DictionaryArray&>(*params_.values);\n+    {\n+      // To take from a dictionary, apply the current kernel to the dictionary's\n+      // mask. (Use UnpackValues<MaskType> since MaskType is already unpacked)\n \n Review comment:\n   I do, thanks\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-22T14:56:56.502+0000",
                    "updated": "2019-05-22T14:56:56.502+0000",
                    "started": "2019-05-22T14:56:56.501+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "246790",
                    "issueId": "13103394"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/worklog/246792",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4366: ARROW-1558: [C++] initial mask kernel impl\nURL: https://github.com/apache/arrow/pull/4366#discussion_r286536158\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/mask.cc\n ##########\n @@ -0,0 +1,230 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// returnGegarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <memory>\n+#include <utility>\n+\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernels/mask.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+Status Mask(FunctionContext* context, const Array& values, const Array& mask,\n+            const MaskOptions& options, std::shared_ptr<Array>* out) {\n+  Datum out_datum;\n+  RETURN_NOT_OK(\n+      Mask(context, Datum(values.data()), Datum(mask.data()), options, &out_datum));\n+  *out = out_datum.make_array();\n+  return Status::OK();\n+}\n+\n+Status Mask(FunctionContext* context, const Datum& values, const Datum& mask,\n+            const MaskOptions& options, Datum* out) {\n+  MaskKernel kernel(values.type(), options);\n+  RETURN_NOT_OK(kernel.Call(context, values, mask, out));\n+  return Status::OK();\n+}\n+\n+struct MaskParameters {\n+  FunctionContext* context;\n+  std::shared_ptr<Array> values, mask;\n+  MaskOptions options;\n+  std::shared_ptr<Array>* out;\n+};\n+\n+template <typename Builder, typename Scalar>\n+static Status UnsafeAppend(Builder* builder, Scalar&& value) {\n+  builder->UnsafeAppend(std::forward<Scalar>(value));\n+  return Status::OK();\n+}\n+\n+static Status UnsafeAppend(BinaryBuilder* builder, util::string_view value) {\n+  RETURN_NOT_OK(builder->ReserveData(static_cast<int64_t>(value.size())));\n+  builder->UnsafeAppend(value);\n+  return Status::OK();\n+}\n+\n+static Status UnsafeAppend(StringBuilder* builder, util::string_view value) {\n+  RETURN_NOT_OK(builder->ReserveData(static_cast<int64_t>(value.size())));\n+  builder->UnsafeAppend(value);\n+  return Status::OK();\n+}\n+\n+// TODO(bkietz) this can be optimized\n+static int64_t OutputSize(const BooleanArray& mask) {\n+  auto offset = mask.offset();\n+  auto length = mask.length();\n+  internal::BitmapReader mask_data(mask.data()->buffers[1]->data(), offset, length);\n+  int64_t size = 0;\n+  for (auto i = offset; i < offset + length; ++i) {\n+    if (mask.IsNull(i) || mask_data.IsSet()) {\n+      ++size;\n+    }\n+    mask_data.Next();\n+  }\n+  return size;\n+}\n+\n+template <bool AllValuesValid, bool WholeMaskValid, typename ValueArray,\n+          typename OutBuilder>\n+Status MaskImpl(FunctionContext*, const ValueArray& values, const BooleanArray& mask,\n+                OutBuilder* builder) {\n+  auto offset = mask.offset();\n+  auto length = mask.length();\n+  internal::BitmapReader mask_data(mask.data()->buffers[1]->data(), offset, length);\n+  for (int64_t i = 0; i < mask.length(); mask_data.Next(), ++i) {\n+    if (!WholeMaskValid && mask.IsNull(i)) {\n+      builder->UnsafeAppendNull();\n+      continue;\n+    }\n+    if (mask_data.IsNotSet()) {\n+      continue;\n+    }\n+    if (!AllValuesValid && values.IsNull(i)) {\n+      builder->UnsafeAppendNull();\n+      continue;\n+    }\n+    RETURN_NOT_OK(UnsafeAppend(builder, values.GetView(i)));\n+  }\n+  return Status::OK();\n+}\n+\n+template <bool AllValuesValid, typename ValueArray, typename MaskArray,\n+          typename OutBuilder>\n+Status UnpackMaskNullCount(FunctionContext* context, const ValueArray& values,\n+                           const MaskArray& mask, OutBuilder* builder) {\n+  if (mask.null_count() == 0) {\n+    return MaskImpl<AllValuesValid, true>(context, values, mask, builder);\n+  }\n+  return MaskImpl<AllValuesValid, false>(context, values, mask, builder);\n+}\n+\n+template <typename ValueArray, typename MaskArray, typename OutBuilder>\n+Status UnpackValuesNullCount(FunctionContext* context, const ValueArray& values,\n+                             const MaskArray& mask, OutBuilder* builder) {\n+  if (values.null_count() == 0) {\n+    return UnpackMaskNullCount<true>(context, values, mask, builder);\n+  }\n+  return UnpackMaskNullCount<false>(context, values, mask, builder);\n+}\n+\n+template <typename T>\n+using ArrayType = typename TypeTraits<T>::ArrayType;\n+\n+template <typename MaskType>\n+struct UnpackValues {\n+  template <typename ValueType>\n+  Status Visit(const ValueType&) {\n+    using OutBuilder = typename TypeTraits<ValueType>::BuilderType;\n+    auto&& mask = static_cast<const ArrayType<MaskType>&>(*params_.mask);\n \n Review comment:\n   `auto&&` because it was faster to type than `const auto&`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-22T14:57:36.106+0000",
                    "updated": "2019-05-22T14:57:36.106+0000",
                    "started": "2019-05-22T14:57:36.105+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "246792",
                    "issueId": "13103394"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/worklog/246794",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4366: ARROW-1558: [C++] initial mask kernel impl\nURL: https://github.com/apache/arrow/pull/4366#discussion_r286536286\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/mask-test.cc\n ##########\n @@ -0,0 +1,145 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// returnGegarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernels/mask.h\"\n+#include \"arrow/compute/test-util.h\"\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+#include \"arrow/testing/util.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+using util::string_view;\n+\n+template <typename ArrowType>\n+class TestMaskKernel : public ComputeFixture, public TestBase {\n+ protected:\n+  void AssertMaskArrays(const std::shared_ptr<Array>& values,\n+                        const std::shared_ptr<Array>& mask, MaskOptions options,\n+                        const std::shared_ptr<Array>& expected) {\n+    std::shared_ptr<Array> actual;\n+    ASSERT_OK(arrow::compute::Mask(&this->ctx_, *values, *mask, options, &actual));\n+    AssertArraysEqual(*expected, *actual);\n+  }\n+  void AssertMask(const std::shared_ptr<DataType>& type, const std::string& values,\n+                  const std::string& mask, MaskOptions options,\n+                  const std::string& expected) {\n+    std::shared_ptr<Array> actual;\n+    ASSERT_OK(this->Mask(type, values, mask, options, &actual));\n+    AssertArraysEqual(*ArrayFromJSON(type, expected), *actual);\n+  }\n+  Status Mask(const std::shared_ptr<DataType>& type, const std::string& values,\n+              const std::string& mask, MaskOptions options, std::shared_ptr<Array>* out) {\n+    return arrow::compute::Mask(&this->ctx_, *ArrayFromJSON(type, values),\n+                                *ArrayFromJSON(boolean(), mask), options, out);\n+  }\n+};\n+\n+class TestMaskKernelWithNull : public TestMaskKernel<NullType> {\n+ protected:\n+  void AssertMask(const std::string& values, const std::string& mask, MaskOptions options,\n+                  const std::string& expected) {\n+    TestMaskKernel<NullType>::AssertMask(utf8(), values, mask, options, expected);\n+  }\n+};\n+\n+TEST_F(TestMaskKernelWithNull, MaskNull) {\n+  MaskOptions options;\n+  this->AssertMask(\"[null, null, null]\", \"[0, 1, 0]\", options, \"[null]\");\n+  this->AssertMask(\"[null, null, null]\", \"[1, 1, 0]\", options, \"[null, null]\");\n \n Review comment:\n   will do\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-22T14:57:50.512+0000",
                    "updated": "2019-05-22T14:57:50.512+0000",
                    "started": "2019-05-22T14:57:50.511+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "246794",
                    "issueId": "13103394"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/worklog/246795",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on issue #4366: ARROW-1558: [C++] initial mask kernel impl\nURL: https://github.com/apache/arrow/pull/4366#issuecomment-494840105\n \n \n   I'll open the follow up JIRA once this one is merged\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-22T14:58:12.916+0000",
                    "updated": "2019-05-22T14:58:12.916+0000",
                    "started": "2019-05-22T14:58:12.915+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "246795",
                    "issueId": "13103394"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/worklog/246798",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #4366: ARROW-1558: [C++] initial mask kernel impl\nURL: https://github.com/apache/arrow/pull/4366#discussion_r286541668\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/mask.h\n ##########\n @@ -0,0 +1,82 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+namespace compute {\n+\n+class FunctionContext;\n+\n+struct ARROW_EXPORT MaskOptions {};\n+\n+/// \\brief Mask an array with a boolean selection filter\n+///\n+/// The output array will be populated with values from the input at positions\n+/// where the selection filter is not 0. Nulls in the filter will result in nulls\n+/// in the output.\n+///\n+/// For example given values = [\"a\", \"b\", \"c\", null, \"e\", \"f\"] and\n+/// filter = [0, 1, 1, 0, null, 1], the output will be\n+/// = [\"b\", \"c\", null, \"f\"]\n+///\n+/// \\param[in] context the FunctionContext\n+/// \\param[in] values array from which to take\n+/// \\param[in] mask indicates which values should be masked out\n+/// \\param[in] options options\n+/// \\param[out] out resulting array\n+ARROW_EXPORT\n+Status Mask(FunctionContext* context, const Array& values, const Array& mask,\n \n Review comment:\n   I wanted to give the same comment actually, but not sure it was nitpicking.\r\n   \r\n   The doc comment now basically says \"Mask an array with a boolean filter\", while I would typically speak about \"Filter an array with a boolean mask\".\r\n   \r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-22T15:08:15.563+0000",
                    "updated": "2019-05-22T15:08:15.563+0000",
                    "started": "2019-05-22T15:08:15.562+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "246798",
                    "issueId": "13103394"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/worklog/246801",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #4366: ARROW-1558: [C++] initial mask kernel impl\nURL: https://github.com/apache/arrow/pull/4366#discussion_r286547930\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/mask.h\n ##########\n @@ -0,0 +1,82 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+namespace compute {\n+\n+class FunctionContext;\n+\n+struct ARROW_EXPORT MaskOptions {};\n+\n+/// \\brief Mask an array with a boolean selection filter\n+///\n+/// The output array will be populated with values from the input at positions\n+/// where the selection filter is not 0. Nulls in the filter will result in nulls\n+/// in the output.\n+///\n+/// For example given values = [\"a\", \"b\", \"c\", null, \"e\", \"f\"] and\n+/// filter = [0, 1, 1, 0, null, 1], the output will be\n+/// = [\"b\", \"c\", null, \"f\"]\n+///\n+/// \\param[in] context the FunctionContext\n+/// \\param[in] values array from which to take\n+/// \\param[in] mask indicates which values should be masked out\n+/// \\param[in] options options\n+/// \\param[out] out resulting array\n+ARROW_EXPORT\n+Status Mask(FunctionContext* context, const Array& values, const Array& mask,\n \n Review comment:\n   If it is not too late to rename `Filter`, I would rather call that Mask and the one in this PR Filter.\r\n   \r\n   (although Mask is maybe also not ideal for the current Filter, as it does not \"mask\" (as a verb) but it \"creates a mask\")\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-22T15:20:13.987+0000",
                    "updated": "2019-05-22T15:20:13.987+0000",
                    "started": "2019-05-22T15:20:13.986+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "246801",
                    "issueId": "13103394"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/worklog/246838",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4366: ARROW-1558: [C++] initial mask kernel impl\nURL: https://github.com/apache/arrow/pull/4366#discussion_r286590201\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/mask.h\n ##########\n @@ -0,0 +1,82 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+namespace compute {\n+\n+class FunctionContext;\n+\n+struct ARROW_EXPORT MaskOptions {};\n+\n+/// \\brief Mask an array with a boolean selection filter\n+///\n+/// The output array will be populated with values from the input at positions\n+/// where the selection filter is not 0. Nulls in the filter will result in nulls\n+/// in the output.\n+///\n+/// For example given values = [\"a\", \"b\", \"c\", null, \"e\", \"f\"] and\n+/// filter = [0, 1, 1, 0, null, 1], the output will be\n+/// = [\"b\", \"c\", null, \"f\"]\n+///\n+/// \\param[in] context the FunctionContext\n+/// \\param[in] values array from which to take\n+/// \\param[in] mask indicates which values should be masked out\n+/// \\param[in] options options\n+/// \\param[out] out resulting array\n+ARROW_EXPORT\n+Status Mask(FunctionContext* context, const Array& values, const Array& mask,\n \n Review comment:\n   @fsaintjacques Maybe we could rename `FilterFunction -> CompareFunction`, then `Mask -> Filter`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-22T18:44:33.382+0000",
                    "updated": "2019-05-22T18:44:33.382+0000",
                    "started": "2019-05-22T18:44:33.381+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "246838",
                    "issueId": "13103394"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/worklog/246903",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4366: ARROW-1558: [C++] initial mask kernel impl\nURL: https://github.com/apache/arrow/pull/4366#issuecomment-494910396\n \n \n   I have some structural issues with the implementation. I think the filter kernel (`FilterKernel` seems better than `MaskKernel` -- `MaskKernel` might be a good name for a kernel that sets values to be null) needs to write into pre-allocated primitive memory. This means that the allocation needs to happen outside of the kernel.\r\n   \r\n   As motivation for why this matters: suppose that we are performing the same filter on 100 or 1000 arrays in a large table (think about the operation `df[selection]` where `df` is a DataFrame). Why should we count the set bits more than once? \r\n   \r\n   Another design issue: I think it could be better to take an approach more similar to `CastKernel` in generating functors for the types that are implemented. This issue is less serious than the preallocation issue. I'm not sure it is a good habit to be doing single- or multiple- dynamic dispatch on each invocation to the kernel's `Call` function\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-22T19:12:23.314+0000",
                    "updated": "2019-05-22T19:12:23.314+0000",
                    "started": "2019-05-22T19:12:23.314+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "246903",
                    "issueId": "13103394"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/worklog/246904",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4366: ARROW-1558: [C++] initial mask kernel impl\nURL: https://github.com/apache/arrow/pull/4366#issuecomment-494910396\n \n \n   I have some structural issues with the implementation. I think the filter kernel (`FilterKernel` seems better than `MaskKernel` -- `MaskKernel` might be a good name for a kernel that sets values to be null) needs to write into pre-allocated primitive memory. This means that the allocation needs to happen outside of the kernel.\r\n   \r\n   As motivation for why this matters: suppose that we are performing the same filter on 100 or 1000 arrays in a large table (think about the operation `df[selection]` where `df` is a DataFrame). Why should we count the set bits more than once? \r\n   \r\n   Another design issue: I think it could be better to take an approach more similar to `CastKernel` in generating functors for the types that are implemented. This issue is less serious than the preallocation issue. I'm not sure it is a good habit to be doing single- or multiple- dynamic dispatch on each invocation to the kernel's `Call` function\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-22T19:12:32.416+0000",
                    "updated": "2019-05-22T19:12:32.416+0000",
                    "started": "2019-05-22T19:12:32.415+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "246904",
                    "issueId": "13103394"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/worklog/247417",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on issue #4366: ARROW-1558: [C++] initial mask kernel impl\nURL: https://github.com/apache/arrow/pull/4366#issuecomment-495232205\n \n \n   Food for though,\r\n   \r\n   for the sake of this discussion, let's call a Mask a (multi)set of indices that represents row of interests in an array. Masks can be the results of kernels, e.g. compute::Compare or gandiva::Filter (note that I used the FilterKernel in the original compare PR to match with gandiva naming), or they could be given from a user explicit list of indices.\r\n   \r\n   Masks are found in various forms:\r\n   \r\n   - An Arrow integer NumericArray (user given)\r\n   - An Arrow boolean BooleanArray (compute::Compare and soon IsIn kernel)\r\n   - A gandiva::SelectionVector<T> where T is an integer type (gandiva::Filter)\r\n   \r\n   BooleanArray and SelectionVector have the properties that the integers are sorted, unique, and well defined (within bounds [0, Array.length())). Note that a bitmap is a selection vector with a different representation but can be interpreted as a list of integers. NumericArray given by users require more\r\n   care since they can be out-of-bound (undefined behavior in C/C++, can even trigger a segfault).\r\n   \r\n   Masks alone are not usually of interest, their goal is to defer materialization for optimization purposes, e.g. chaining filter expressions, or practical reasons, e.g. filter on column A and aggregate on column B.\r\n   \r\n   ARROW-1558 implements the materialization of an array with a (boolean) mask, but we also have this feature in the Take kernel, but with the mask only in the NumericArray form. Could we explore using the Take kernel to also support BooleanArray? Should we explicit the Mask type via a new type to Datum, e.g. an array with various meta-data flags (unique, sorted, ...)?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-23T14:03:14.875+0000",
                    "updated": "2019-05-23T14:03:14.875+0000",
                    "started": "2019-05-23T14:03:14.874+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "247417",
                    "issueId": "13103394"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/worklog/247418",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on issue #4366: ARROW-1558: [C++] initial mask kernel impl\nURL: https://github.com/apache/arrow/pull/4366#issuecomment-495232205\n \n \n   Food for though,\r\n   \r\n   for the sake of this discussion, let's call a Mask a (multi)set of indices that represents row of interests in an array. Masks can be the results of kernels, e.g. compute::Compare or gandiva::Filter (note that I used the FilterKernel in the original compare PR to match with gandiva naming), or they could be given from a user explicit list of indices.\r\n   \r\n   Masks are found in various forms:\r\n   \r\n   - An Arrow integer NumericArray (user given)\r\n   - An Arrow boolean BooleanArray (compute::Compare and soon compute::IsIn kernel)\r\n   - A gandiva::SelectionVector<T> where T is an integer type (gandiva::Filter)\r\n   \r\n   BooleanArray and SelectionVector have the properties that the integers are sorted, unique, and well defined (within bounds [0, Array.length())). Note that a bitmap is a selection vector with a different representation but can be interpreted as a list of integers. NumericArray given by users require more\r\n   care since they can be out-of-bound (undefined behavior in C/C++, can even trigger a segfault).\r\n   \r\n   Masks alone are not usually of interest, their goal is to defer materialization for optimization purposes, e.g. chaining filter expressions, or practical reasons, e.g. filter on column A and aggregate on column B.\r\n   \r\n   ARROW-1558 implements the materialization of an array with a (boolean) mask, but we also have this feature in the Take kernel, but with the mask only in the NumericArray form. Could we explore using the Take kernel to also support BooleanArray? Should we explicit the Mask type via a new type to Datum, e.g. an array with various meta-data flags (unique, sorted, ...)?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-23T14:04:47.468+0000",
                    "updated": "2019-05-23T14:04:47.468+0000",
                    "started": "2019-05-23T14:04:47.467+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "247418",
                    "issueId": "13103394"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 35400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@16c32fe5[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@bd084f8[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@35b6c3df[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3ace66d5[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e51ef2e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2f3e919e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2c95179d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@65243414[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@543d9f01[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@fd45679[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@bf991e1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4fb9901e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 35400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jun 20 02:19:55 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-06-20T02:19:55.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1558/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2017-09-19T21:49:13.000+0000",
        "updated": "2019-06-20T02:20:05.000+0000",
        "timeoriginalestimate": null,
        "description": "Select values where a boolean selection array is true. As a default, if any values in the selection are null, then values in the output array should be null. \r\n\r\nThe null behaviour does not need to be toggable, if the user wants to select nothing in the case of null, then it is necessary to call selection_array.fillna(false) first.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "9h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 35400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement boolean selection kernels",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/comment/16842616",
                    "id": "16842616",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "[~xhochy] have you started work on this already? Or is this available for someone else to pick up?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2019-05-17T21:26:41.018+0000",
                    "updated": "2019-05-17T21:26:41.018+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/comment/16842619",
                    "id": "16842619",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I don't believe so, Uwe assigned this issue 9 months ago so I'm unassigning",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-05-17T21:30:57.403+0000",
                    "updated": "2019-05-17T21:30:57.403+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103394/comment/16868185",
                    "id": "16868185",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 4366\n[https://github.com/apache/arrow/pull/4366]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-06-20T02:19:55.219+0000",
                    "updated": "2019-06-20T02:19:55.219+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|i3k9fz:",
        "customfield_12314139": null
    }
}