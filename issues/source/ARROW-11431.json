{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13355512",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355512",
    "key": "ARROW-11431",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=drusso",
            "name": "drusso",
            "key": "drusso",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=drusso&avatarId=43921",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=drusso&avatarId=43921",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=drusso&avatarId=43921",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=drusso&avatarId=43921"
            },
            "displayName": "Daniel Russo",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=drusso",
            "name": "drusso",
            "key": "drusso",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=drusso&avatarId=43921",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=drusso&avatarId=43921",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=drusso&avatarId=43921",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=drusso&avatarId=43921"
            },
            "displayName": "Daniel Russo",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=drusso",
            "name": "drusso",
            "key": "drusso",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=drusso&avatarId=43921",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=drusso&avatarId=43921",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=drusso&avatarId=43921",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=drusso&avatarId=43921"
            },
            "displayName": "Daniel Russo",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11431/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 29,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355512/worklog/544439",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drusso opened a new pull request #9364:\nURL: https://github.com/apache/arrow/pull/9364\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-29T19:07:59.672+0000",
                    "updated": "2021-01-29T19:07:59.672+0000",
                    "started": "2021-01-29T19:07:59.672+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544439",
                    "issueId": "13355512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355512/worklog/544441",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9364:\nURL: https://github.com/apache/arrow/pull/9364#issuecomment-769992523\n\n\n   https://issues.apache.org/jira/browse/ARROW-11431\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-29T19:08:27.931+0000",
                    "updated": "2021-01-29T19:08:27.931+0000",
                    "started": "2021-01-29T19:08:27.931+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544441",
                    "issueId": "13355512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355512/worklog/544459",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9364:\nURL: https://github.com/apache/arrow/pull/9364#discussion_r567055101\n\n\n\n##########\nFile path: rust/datafusion/src/sql/planner.rs\n##########\n@@ -421,16 +415,85 @@ impl<'a, S: ContextProvider> SqlToRel<'a, S> {\n         // The SELECT expressions, with wildcards expanded.\n         let select_exprs = self.prepare_select_exprs(&plan, &select.projection)?;\n \n+        // Optionally the HAVING expression.\n+        let having_expr_opt = if let Some(having_expr) = &select.having {\n+            let having_expr = self.sql_expr_to_logical_expr(having_expr)?;\n+\n+            // This step \"dereferences\" any aliases in the HAVING clause.\n+            //\n+            // This is how we support queries with HAVING expressions that\n+            // refer to aliased columns.\n+            //\n+            // For example:\n+            //\n+            //   SELECT c1 AS m FROM t HAVING m > 10;\n+            //   SELECT c1, MAX(c2) AS m FROM t GROUP BY c1 HAVING m > 10;\n+            //\n+            // are rewritten as, respectively:\n+            //\n+            //   SELECT c1 AS m FROM t HAVING c1 > 10;\n+            //   SELECT c1, MAX(c2) AS m FROM t GROUP BY c1 HAVING MAX(c2) > 10;\n+            //\n+            let having_expr =\n+                resolve_aliases_to_exprs(&having_expr, &extract_aliases(&select_exprs))?;\n+\n+            Some(having_expr)\n+        } else {\n+            None\n+        };\n+\n+        // The outer expressions we will search through for\n+        // aggregates. Aggregates may be sourced from the SELECT...\n+        let mut aggr_expr_haystack = select_exprs.clone();\n+\n+        // ... or from the HAVING.\n+        if let Some(having_expr) = &having_expr_opt {\n+            aggr_expr_haystack.push(having_expr.clone());\n+        }\n+\n         // All of the aggregate expressions (deduplicated).\n-        let aggr_exprs = find_aggregate_exprs(&select_exprs);\n+        let aggr_exprs = find_aggregate_exprs(&aggr_expr_haystack);\n \n-        let (plan, select_exprs_post_aggr) =\n+        let (plan, select_exprs_post_aggr, having_expr_post_aggr_opt) =\n             if !select.group_by.is_empty() || !aggr_exprs.is_empty() {\n-                self.aggregate(&plan, &select_exprs, &select.group_by, &aggr_exprs)?\n+                self.aggregate(\n+                    &plan,\n+                    &select_exprs,\n+                    &having_expr_opt,\n+                    &select.group_by,\n+                    &aggr_exprs,\n+                )?\n             } else {\n-                (plan, select_exprs)\n+                if let Some(having_expr) = &having_expr_opt {\n+                    let available_columns = select_exprs\n+                        .iter()\n+                        .map(|expr| expr_as_column_expr(expr, &plan))\n+                        .collect::<Result<Vec<Expr>>>()?;\n+\n+                    // Ensure the HAVING expression is using only columns\n+                    // provided by the SELECT.\n+                    if !can_columns_satisfy_exprs(\n+                        &available_columns,\n+                        &vec![having_expr.clone()],\n\nReview comment:\n       I believe this can be `&[having_expr.clone()]`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-29T19:45:24.396+0000",
                    "updated": "2021-01-29T19:45:24.396+0000",
                    "started": "2021-01-29T19:45:24.396+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544459",
                    "issueId": "13355512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355512/worklog/544465",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9364:\nURL: https://github.com/apache/arrow/pull/9364#discussion_r567063657\n\n\n\n##########\nFile path: rust/datafusion/src/sql/planner.rs\n##########\n@@ -421,16 +415,85 @@ impl<'a, S: ContextProvider> SqlToRel<'a, S> {\n         // The SELECT expressions, with wildcards expanded.\n         let select_exprs = self.prepare_select_exprs(&plan, &select.projection)?;\n \n+        // Optionally the HAVING expression.\n+        let having_expr_opt = if let Some(having_expr) = &select.having {\n\nReview comment:\n       This probably could use `Option::map` instead of `if let`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-29T20:01:47.371+0000",
                    "updated": "2021-01-29T20:01:47.371+0000",
                    "started": "2021-01-29T20:01:47.370+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544465",
                    "issueId": "13355512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355512/worklog/544471",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on pull request #9364:\nURL: https://github.com/apache/arrow/pull/9364#issuecomment-770023513\n\n\n   This is looking good @drusso ! I think it can use some tests with example (tabular) input as well? To make sure the results are expected. There are some more end to end tests in the tests directory.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-29T20:09:37.306+0000",
                    "updated": "2021-01-29T20:09:37.306+0000",
                    "started": "2021-01-29T20:09:37.306+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544471",
                    "issueId": "13355512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355512/worklog/544484",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drusso commented on pull request #9364:\nURL: https://github.com/apache/arrow/pull/9364#issuecomment-770044136\n\n\n   Thanks!\r\n   \r\n   I will definitely add some more tests. There are also a couple of clippy errors for me to address. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-29T20:53:42.173+0000",
                    "updated": "2021-01-29T20:53:42.173+0000",
                    "started": "2021-01-29T20:53:42.173+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544484",
                    "issueId": "13355512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355512/worklog/544485",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan edited a comment on pull request #9364:\nURL: https://github.com/apache/arrow/pull/9364#issuecomment-770023513\n\n\n   This is looking good @drusso ! I think it can use some tests with example (tabular) input as well? To make sure the results are as expected. There are some more end to end tests in the tests directory.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-29T20:54:45.243+0000",
                    "updated": "2021-01-29T20:54:45.243+0000",
                    "started": "2021-01-29T20:54:45.243+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544485",
                    "issueId": "13355512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355512/worklog/544857",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9364:\nURL: https://github.com/apache/arrow/pull/9364#discussion_r567415267\n\n\n\n##########\nFile path: rust/datafusion/src/sql/utils.rs\n##########\n@@ -335,3 +336,35 @@ where\n         },\n     }\n }\n+\n+/// Returns mapping of each alias (`String`) to the expression (`Expr`) it is\n+/// aliasing.\n+pub(crate) fn extract_aliases(exprs: &Vec<Expr>) -> HashMap<String, Expr> {\n\nReview comment:\n       This can probably be something like the following if you wanted more idomatic rust style (I don't think it really matters in this case)\r\n   \r\n   ```suggestion\r\n   pub(crate) fn extract_aliases(exprs: &[Expr]) -> HashMap<String, Expr> {\r\n   ```\r\n   \r\n   Maybe even something fancier like anything that can become an iterator:\r\n   \r\n   ```\r\n   pub(crate) fn extract_aliases(exprs: impl Iterator<Item=&Expr>) -> HashMap<String, Expr> {\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-31T11:59:43.681+0000",
                    "updated": "2021-01-31T11:59:43.681+0000",
                    "started": "2021-01-31T11:59:43.681+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544857",
                    "issueId": "13355512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355512/worklog/544957",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drusso commented on a change in pull request #9364:\nURL: https://github.com/apache/arrow/pull/9364#discussion_r567486688\n\n\n\n##########\nFile path: rust/datafusion/src/sql/planner.rs\n##########\n@@ -421,16 +415,85 @@ impl<'a, S: ContextProvider> SqlToRel<'a, S> {\n         // The SELECT expressions, with wildcards expanded.\n         let select_exprs = self.prepare_select_exprs(&plan, &select.projection)?;\n \n+        // Optionally the HAVING expression.\n+        let having_expr_opt = if let Some(having_expr) = &select.having {\n+            let having_expr = self.sql_expr_to_logical_expr(having_expr)?;\n+\n+            // This step \"dereferences\" any aliases in the HAVING clause.\n+            //\n+            // This is how we support queries with HAVING expressions that\n+            // refer to aliased columns.\n+            //\n+            // For example:\n+            //\n+            //   SELECT c1 AS m FROM t HAVING m > 10;\n+            //   SELECT c1, MAX(c2) AS m FROM t GROUP BY c1 HAVING m > 10;\n+            //\n+            // are rewritten as, respectively:\n+            //\n+            //   SELECT c1 AS m FROM t HAVING c1 > 10;\n+            //   SELECT c1, MAX(c2) AS m FROM t GROUP BY c1 HAVING MAX(c2) > 10;\n+            //\n+            let having_expr =\n+                resolve_aliases_to_exprs(&having_expr, &extract_aliases(&select_exprs))?;\n+\n+            Some(having_expr)\n+        } else {\n+            None\n+        };\n+\n+        // The outer expressions we will search through for\n+        // aggregates. Aggregates may be sourced from the SELECT...\n+        let mut aggr_expr_haystack = select_exprs.clone();\n+\n+        // ... or from the HAVING.\n+        if let Some(having_expr) = &having_expr_opt {\n+            aggr_expr_haystack.push(having_expr.clone());\n+        }\n+\n         // All of the aggregate expressions (deduplicated).\n-        let aggr_exprs = find_aggregate_exprs(&select_exprs);\n+        let aggr_exprs = find_aggregate_exprs(&aggr_expr_haystack);\n \n-        let (plan, select_exprs_post_aggr) =\n+        let (plan, select_exprs_post_aggr, having_expr_post_aggr_opt) =\n             if !select.group_by.is_empty() || !aggr_exprs.is_empty() {\n-                self.aggregate(&plan, &select_exprs, &select.group_by, &aggr_exprs)?\n+                self.aggregate(\n+                    &plan,\n+                    &select_exprs,\n+                    &having_expr_opt,\n+                    &select.group_by,\n+                    &aggr_exprs,\n+                )?\n             } else {\n-                (plan, select_exprs)\n+                if let Some(having_expr) = &having_expr_opt {\n+                    let available_columns = select_exprs\n+                        .iter()\n+                        .map(|expr| expr_as_column_expr(expr, &plan))\n+                        .collect::<Result<Vec<Expr>>>()?;\n+\n+                    // Ensure the HAVING expression is using only columns\n+                    // provided by the SELECT.\n+                    if !can_columns_satisfy_exprs(\n+                        &available_columns,\n+                        &vec![having_expr.clone()],\n\nReview comment:\n       I didn't end up making this change since the callee is expecting a `&Vec`. I gather we might generally prefer slices rather than vectors (please correct me if I am mistaken!), and since there's a handful of functions in ./utils.rs that can be updated, I can follow up with another PR to address them all in one shot. \r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-31T21:27:36.760+0000",
                    "updated": "2021-01-31T21:27:36.760+0000",
                    "started": "2021-01-31T21:27:36.760+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544957",
                    "issueId": "13355512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355512/worklog/544962",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9364:\nURL: https://github.com/apache/arrow/pull/9364#discussion_r567487475\n\n\n\n##########\nFile path: rust/datafusion/src/sql/planner.rs\n##########\n@@ -421,16 +415,85 @@ impl<'a, S: ContextProvider> SqlToRel<'a, S> {\n         // The SELECT expressions, with wildcards expanded.\n         let select_exprs = self.prepare_select_exprs(&plan, &select.projection)?;\n \n+        // Optionally the HAVING expression.\n+        let having_expr_opt = if let Some(having_expr) = &select.having {\n+            let having_expr = self.sql_expr_to_logical_expr(having_expr)?;\n+\n+            // This step \"dereferences\" any aliases in the HAVING clause.\n+            //\n+            // This is how we support queries with HAVING expressions that\n+            // refer to aliased columns.\n+            //\n+            // For example:\n+            //\n+            //   SELECT c1 AS m FROM t HAVING m > 10;\n+            //   SELECT c1, MAX(c2) AS m FROM t GROUP BY c1 HAVING m > 10;\n+            //\n+            // are rewritten as, respectively:\n+            //\n+            //   SELECT c1 AS m FROM t HAVING c1 > 10;\n+            //   SELECT c1, MAX(c2) AS m FROM t GROUP BY c1 HAVING MAX(c2) > 10;\n+            //\n+            let having_expr =\n+                resolve_aliases_to_exprs(&having_expr, &extract_aliases(&select_exprs))?;\n+\n+            Some(having_expr)\n+        } else {\n+            None\n+        };\n+\n+        // The outer expressions we will search through for\n+        // aggregates. Aggregates may be sourced from the SELECT...\n+        let mut aggr_expr_haystack = select_exprs.clone();\n+\n+        // ... or from the HAVING.\n+        if let Some(having_expr) = &having_expr_opt {\n+            aggr_expr_haystack.push(having_expr.clone());\n+        }\n+\n         // All of the aggregate expressions (deduplicated).\n-        let aggr_exprs = find_aggregate_exprs(&select_exprs);\n+        let aggr_exprs = find_aggregate_exprs(&aggr_expr_haystack);\n \n-        let (plan, select_exprs_post_aggr) =\n+        let (plan, select_exprs_post_aggr, having_expr_post_aggr_opt) =\n             if !select.group_by.is_empty() || !aggr_exprs.is_empty() {\n-                self.aggregate(&plan, &select_exprs, &select.group_by, &aggr_exprs)?\n+                self.aggregate(\n+                    &plan,\n+                    &select_exprs,\n+                    &having_expr_opt,\n+                    &select.group_by,\n+                    &aggr_exprs,\n+                )?\n             } else {\n-                (plan, select_exprs)\n+                if let Some(having_expr) = &having_expr_opt {\n+                    let available_columns = select_exprs\n+                        .iter()\n+                        .map(|expr| expr_as_column_expr(expr, &plan))\n+                        .collect::<Result<Vec<Expr>>>()?;\n+\n+                    // Ensure the HAVING expression is using only columns\n+                    // provided by the SELECT.\n+                    if !can_columns_satisfy_exprs(\n+                        &available_columns,\n+                        &vec![having_expr.clone()],\n\nReview comment:\n       FYI, I opened https://github.com/apache/arrow/pulls to address this!\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-31T21:34:26.503+0000",
                    "updated": "2021-01-31T21:34:26.503+0000",
                    "started": "2021-01-31T21:34:26.503+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544962",
                    "issueId": "13355512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355512/worklog/544967",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9364:\nURL: https://github.com/apache/arrow/pull/9364#discussion_r567487475\n\n\n\n##########\nFile path: rust/datafusion/src/sql/planner.rs\n##########\n@@ -421,16 +415,85 @@ impl<'a, S: ContextProvider> SqlToRel<'a, S> {\n         // The SELECT expressions, with wildcards expanded.\n         let select_exprs = self.prepare_select_exprs(&plan, &select.projection)?;\n \n+        // Optionally the HAVING expression.\n+        let having_expr_opt = if let Some(having_expr) = &select.having {\n+            let having_expr = self.sql_expr_to_logical_expr(having_expr)?;\n+\n+            // This step \"dereferences\" any aliases in the HAVING clause.\n+            //\n+            // This is how we support queries with HAVING expressions that\n+            // refer to aliased columns.\n+            //\n+            // For example:\n+            //\n+            //   SELECT c1 AS m FROM t HAVING m > 10;\n+            //   SELECT c1, MAX(c2) AS m FROM t GROUP BY c1 HAVING m > 10;\n+            //\n+            // are rewritten as, respectively:\n+            //\n+            //   SELECT c1 AS m FROM t HAVING c1 > 10;\n+            //   SELECT c1, MAX(c2) AS m FROM t GROUP BY c1 HAVING MAX(c2) > 10;\n+            //\n+            let having_expr =\n+                resolve_aliases_to_exprs(&having_expr, &extract_aliases(&select_exprs))?;\n+\n+            Some(having_expr)\n+        } else {\n+            None\n+        };\n+\n+        // The outer expressions we will search through for\n+        // aggregates. Aggregates may be sourced from the SELECT...\n+        let mut aggr_expr_haystack = select_exprs.clone();\n+\n+        // ... or from the HAVING.\n+        if let Some(having_expr) = &having_expr_opt {\n+            aggr_expr_haystack.push(having_expr.clone());\n+        }\n+\n         // All of the aggregate expressions (deduplicated).\n-        let aggr_exprs = find_aggregate_exprs(&select_exprs);\n+        let aggr_exprs = find_aggregate_exprs(&aggr_expr_haystack);\n \n-        let (plan, select_exprs_post_aggr) =\n+        let (plan, select_exprs_post_aggr, having_expr_post_aggr_opt) =\n             if !select.group_by.is_empty() || !aggr_exprs.is_empty() {\n-                self.aggregate(&plan, &select_exprs, &select.group_by, &aggr_exprs)?\n+                self.aggregate(\n+                    &plan,\n+                    &select_exprs,\n+                    &having_expr_opt,\n+                    &select.group_by,\n+                    &aggr_exprs,\n+                )?\n             } else {\n-                (plan, select_exprs)\n+                if let Some(having_expr) = &having_expr_opt {\n+                    let available_columns = select_exprs\n+                        .iter()\n+                        .map(|expr| expr_as_column_expr(expr, &plan))\n+                        .collect::<Result<Vec<Expr>>>()?;\n+\n+                    // Ensure the HAVING expression is using only columns\n+                    // provided by the SELECT.\n+                    if !can_columns_satisfy_exprs(\n+                        &available_columns,\n+                        &vec![having_expr.clone()],\n\nReview comment:\n       FYI, I openedhttps://github.com/apache/arrow/pull/9380 to address this!\n\n##########\nFile path: rust/datafusion/src/sql/planner.rs\n##########\n@@ -421,16 +415,85 @@ impl<'a, S: ContextProvider> SqlToRel<'a, S> {\n         // The SELECT expressions, with wildcards expanded.\n         let select_exprs = self.prepare_select_exprs(&plan, &select.projection)?;\n \n+        // Optionally the HAVING expression.\n+        let having_expr_opt = if let Some(having_expr) = &select.having {\n+            let having_expr = self.sql_expr_to_logical_expr(having_expr)?;\n+\n+            // This step \"dereferences\" any aliases in the HAVING clause.\n+            //\n+            // This is how we support queries with HAVING expressions that\n+            // refer to aliased columns.\n+            //\n+            // For example:\n+            //\n+            //   SELECT c1 AS m FROM t HAVING m > 10;\n+            //   SELECT c1, MAX(c2) AS m FROM t GROUP BY c1 HAVING m > 10;\n+            //\n+            // are rewritten as, respectively:\n+            //\n+            //   SELECT c1 AS m FROM t HAVING c1 > 10;\n+            //   SELECT c1, MAX(c2) AS m FROM t GROUP BY c1 HAVING MAX(c2) > 10;\n+            //\n+            let having_expr =\n+                resolve_aliases_to_exprs(&having_expr, &extract_aliases(&select_exprs))?;\n+\n+            Some(having_expr)\n+        } else {\n+            None\n+        };\n+\n+        // The outer expressions we will search through for\n+        // aggregates. Aggregates may be sourced from the SELECT...\n+        let mut aggr_expr_haystack = select_exprs.clone();\n+\n+        // ... or from the HAVING.\n+        if let Some(having_expr) = &having_expr_opt {\n+            aggr_expr_haystack.push(having_expr.clone());\n+        }\n+\n         // All of the aggregate expressions (deduplicated).\n-        let aggr_exprs = find_aggregate_exprs(&select_exprs);\n+        let aggr_exprs = find_aggregate_exprs(&aggr_expr_haystack);\n \n-        let (plan, select_exprs_post_aggr) =\n+        let (plan, select_exprs_post_aggr, having_expr_post_aggr_opt) =\n             if !select.group_by.is_empty() || !aggr_exprs.is_empty() {\n-                self.aggregate(&plan, &select_exprs, &select.group_by, &aggr_exprs)?\n+                self.aggregate(\n+                    &plan,\n+                    &select_exprs,\n+                    &having_expr_opt,\n+                    &select.group_by,\n+                    &aggr_exprs,\n+                )?\n             } else {\n-                (plan, select_exprs)\n+                if let Some(having_expr) = &having_expr_opt {\n+                    let available_columns = select_exprs\n+                        .iter()\n+                        .map(|expr| expr_as_column_expr(expr, &plan))\n+                        .collect::<Result<Vec<Expr>>>()?;\n+\n+                    // Ensure the HAVING expression is using only columns\n+                    // provided by the SELECT.\n+                    if !can_columns_satisfy_exprs(\n+                        &available_columns,\n+                        &vec![having_expr.clone()],\n\nReview comment:\n       FYI, I opened https://github.com/apache/arrow/pull/9380 to address this!\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-31T21:46:25.761+0000",
                    "updated": "2021-01-31T21:46:25.761+0000",
                    "started": "2021-01-31T21:46:25.760+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544967",
                    "issueId": "13355512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355512/worklog/544990",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drusso commented on a change in pull request #9364:\nURL: https://github.com/apache/arrow/pull/9364#discussion_r567506751\n\n\n\n##########\nFile path: rust/datafusion/src/sql/planner.rs\n##########\n@@ -421,16 +415,85 @@ impl<'a, S: ContextProvider> SqlToRel<'a, S> {\n         // The SELECT expressions, with wildcards expanded.\n         let select_exprs = self.prepare_select_exprs(&plan, &select.projection)?;\n \n+        // Optionally the HAVING expression.\n+        let having_expr_opt = if let Some(having_expr) = &select.having {\n+            let having_expr = self.sql_expr_to_logical_expr(having_expr)?;\n+\n+            // This step \"dereferences\" any aliases in the HAVING clause.\n+            //\n+            // This is how we support queries with HAVING expressions that\n+            // refer to aliased columns.\n+            //\n+            // For example:\n+            //\n+            //   SELECT c1 AS m FROM t HAVING m > 10;\n+            //   SELECT c1, MAX(c2) AS m FROM t GROUP BY c1 HAVING m > 10;\n+            //\n+            // are rewritten as, respectively:\n+            //\n+            //   SELECT c1 AS m FROM t HAVING c1 > 10;\n+            //   SELECT c1, MAX(c2) AS m FROM t GROUP BY c1 HAVING MAX(c2) > 10;\n+            //\n+            let having_expr =\n+                resolve_aliases_to_exprs(&having_expr, &extract_aliases(&select_exprs))?;\n+\n+            Some(having_expr)\n+        } else {\n+            None\n+        };\n+\n+        // The outer expressions we will search through for\n+        // aggregates. Aggregates may be sourced from the SELECT...\n+        let mut aggr_expr_haystack = select_exprs.clone();\n+\n+        // ... or from the HAVING.\n+        if let Some(having_expr) = &having_expr_opt {\n+            aggr_expr_haystack.push(having_expr.clone());\n+        }\n+\n         // All of the aggregate expressions (deduplicated).\n-        let aggr_exprs = find_aggregate_exprs(&select_exprs);\n+        let aggr_exprs = find_aggregate_exprs(&aggr_expr_haystack);\n \n-        let (plan, select_exprs_post_aggr) =\n+        let (plan, select_exprs_post_aggr, having_expr_post_aggr_opt) =\n             if !select.group_by.is_empty() || !aggr_exprs.is_empty() {\n-                self.aggregate(&plan, &select_exprs, &select.group_by, &aggr_exprs)?\n+                self.aggregate(\n+                    &plan,\n+                    &select_exprs,\n+                    &having_expr_opt,\n+                    &select.group_by,\n+                    &aggr_exprs,\n+                )?\n             } else {\n-                (plan, select_exprs)\n+                if let Some(having_expr) = &having_expr_opt {\n+                    let available_columns = select_exprs\n+                        .iter()\n+                        .map(|expr| expr_as_column_expr(expr, &plan))\n+                        .collect::<Result<Vec<Expr>>>()?;\n+\n+                    // Ensure the HAVING expression is using only columns\n+                    // provided by the SELECT.\n+                    if !can_columns_satisfy_exprs(\n+                        &available_columns,\n+                        &vec![having_expr.clone()],\n\nReview comment:\n       Great, thanks!\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-01T00:05:22.676+0000",
                    "updated": "2021-02-01T00:05:22.676+0000",
                    "started": "2021-02-01T00:05:22.675+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544990",
                    "issueId": "13355512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355512/worklog/544991",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drusso commented on a change in pull request #9364:\nURL: https://github.com/apache/arrow/pull/9364#discussion_r567507800\n\n\n\n##########\nFile path: rust/datafusion/src/sql/utils.rs\n##########\n@@ -335,3 +336,35 @@ where\n         },\n     }\n }\n+\n+/// Returns mapping of each alias (`String`) to the expression (`Expr`) it is\n+/// aliasing.\n+pub(crate) fn extract_aliases(exprs: &Vec<Expr>) -> HashMap<String, Expr> {\n\nReview comment:\n       Thanks for the tip! I hadn't realized there's automatic deref coercion from vectors to slices. \r\n   \r\n   Updated in 3e52167. \r\n   \r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-01T00:12:42.415+0000",
                    "updated": "2021-02-01T00:12:42.415+0000",
                    "started": "2021-02-01T00:12:42.415+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544991",
                    "issueId": "13355512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355512/worklog/544992",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drusso commented on a change in pull request #9364:\nURL: https://github.com/apache/arrow/pull/9364#discussion_r567507844\n\n\n\n##########\nFile path: rust/datafusion/src/sql/planner.rs\n##########\n@@ -421,16 +415,85 @@ impl<'a, S: ContextProvider> SqlToRel<'a, S> {\n         // The SELECT expressions, with wildcards expanded.\n         let select_exprs = self.prepare_select_exprs(&plan, &select.projection)?;\n \n+        // Optionally the HAVING expression.\n+        let having_expr_opt = if let Some(having_expr) = &select.having {\n\nReview comment:\n       Updated in c04743c. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-01T00:13:15.685+0000",
                    "updated": "2021-02-01T00:13:15.685+0000",
                    "started": "2021-02-01T00:13:15.685+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544992",
                    "issueId": "13355512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355512/worklog/544993",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drusso commented on pull request #9364:\nURL: https://github.com/apache/arrow/pull/9364#issuecomment-770478760\n\n\n   @alamb @Dandandan I've updated the PR, let me know if there's anything outstanding. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-01T00:14:19.055+0000",
                    "updated": "2021-02-01T00:14:19.055+0000",
                    "started": "2021-02-01T00:14:19.055+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544993",
                    "issueId": "13355512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355512/worklog/545683",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9364:\nURL: https://github.com/apache/arrow/pull/9364#issuecomment-771222900\n\n\n   I plan to review this carefully tomorrow\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-01T23:05:14.184+0000",
                    "updated": "2021-02-01T23:05:14.184+0000",
                    "started": "2021-02-01T23:05:14.183+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "545683",
                    "issueId": "13355512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355512/worklog/546032",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drusso commented on pull request #9364:\nURL: https://github.com/apache/arrow/pull/9364#issuecomment-771639766\n\n\n   Thanks @jorgecarleitao and @alamb! \r\n   \r\n   I added a note in the README. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-02T13:37:48.669+0000",
                    "updated": "2021-02-02T13:37:48.669+0000",
                    "started": "2021-02-02T13:37:48.668+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "546032",
                    "issueId": "13355512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355512/worklog/546133",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9364:\nURL: https://github.com/apache/arrow/pull/9364#discussion_r568781006\n\n\n\n##########\nFile path: rust/datafusion/src/sql/planner.rs\n##########\n@@ -1233,6 +1321,257 @@ mod tests {\n         quick_test(sql, expected);\n     }\n \n+    #[test]\n+    fn select_with_having() {\n+        let sql = \"SELECT id, age\n+                   FROM person\n+                   HAVING age > 100 AND age < 200\";\n+        let expected = \"Projection: #id, #age\\\n+                        \\n  Filter: #age Gt Int64(100) And #age Lt Int64(200)\\\n+                        \\n    TableScan: person projection=None\";\n+        quick_test(sql, expected);\n+    }\n+\n+    #[test]\n+    fn select_with_having_referencing_column_not_in_select() {\n+        let sql = \"SELECT id, age\n+                   FROM person\n+                   HAVING first_name = 'M'\";\n+        let err = logical_plan(sql).expect_err(\"query should have failed\");\n+        assert_eq!(\n+            \"Plan(\\\"Having references column(s) not provided by the select\\\")\",\n+            format!(\"{:?}\", err)\n+        );\n+    }\n+\n+    #[test]\n+    fn select_with_having_referencing_column_nested_in_select_expression() {\n+        let sql = \"SELECT id, age + 1\n+                   FROM person\n+                   HAVING age > 100\";\n+        let err = logical_plan(sql).expect_err(\"query should have failed\");\n+        assert_eq!(\n+            \"Plan(\\\"Having references column(s) not provided by the select\\\")\",\n+            format!(\"{:?}\", err)\n+        );\n+    }\n+\n+    #[test]\n+    fn select_with_having_with_aggregate_not_in_select() {\n+        let sql = \"SELECT first_name\n+                   FROM person\n+                   HAVING MAX(age) > 100\";\n+        let err = logical_plan(sql).expect_err(\"query should have failed\");\n+        assert_eq!(\n+            \"Plan(\\\"Projection references non-aggregate values\\\")\",\n+            format!(\"{:?}\", err)\n+        );\n+    }\n+\n+    #[test]\n+    fn select_aggregate_with_having_that_reuses_aggregate() {\n+        let sql = \"SELECT MAX(age)\n+                   FROM person\n+                   HAVING MAX(age) < 30\";\n+        let expected = \"Filter: #MAX(age) Lt Int64(30)\\\n+                        \\n  Aggregate: groupBy=[[]], aggr=[[MAX(#age)]]\\\n+                        \\n    TableScan: person projection=None\";\n+        quick_test(sql, expected);\n+    }\n+\n+    #[test]\n+    fn select_aggregate_with_having_with_aggregate_not_in_select() {\n+        let sql = \"SELECT MAX(age)\n+                   FROM person\n+                   HAVING MAX(first_name) > 'M'\";\n+        let expected = \"Projection: #MAX(age)\\\n+                        \\n  Filter: #MAX(first_name) Gt Utf8(\\\"M\\\")\\\n+                        \\n    Aggregate: groupBy=[[]], aggr=[[MAX(#age), MAX(#first_name)]]\\\n+                        \\n      TableScan: person projection=None\";\n+        quick_test(sql, expected);\n+    }\n+\n+    #[test]\n+    fn select_aggregate_with_having_referencing_column_not_in_select() {\n+        let sql = \"SELECT COUNT(*)\n+                   FROM person\n+                   HAVING first_name = 'M'\";\n+        let err = logical_plan(sql).expect_err(\"query should have failed\");\n+        assert_eq!(\n+            \"Plan(\\\"Having references non-aggregate values\\\")\",\n+            format!(\"{:?}\", err)\n+        );\n+    }\n+\n+    #[test]\n+    fn select_aggregate_aliased_with_having_referencing_aggregate_by_its_alias() {\n+        let sql = \"SELECT MAX(age) as max_age\n+                   FROM person\n+                   HAVING max_age < 30\";\n+        let expected = \"Projection: #MAX(age) AS max_age\\\n+                        \\n  Filter: #MAX(age) Lt Int64(30)\\\n+                        \\n    Aggregate: groupBy=[[]], aggr=[[MAX(#age)]]\\\n+                        \\n      TableScan: person projection=None\";\n+        quick_test(sql, expected);\n+    }\n+\n+    #[test]\n+    fn select_aggregate_aliased_with_having_that_reuses_aggregate_but_not_by_its_alias() {\n+        let sql = \"SELECT MAX(age) as max_age\n+                   FROM person\n+                   HAVING MAX(age) < 30\";\n+        let expected = \"Projection: #MAX(age) AS max_age\\\n+                        \\n  Filter: #MAX(age) Lt Int64(30)\\\n+                        \\n    Aggregate: groupBy=[[]], aggr=[[MAX(#age)]]\\\n+                        \\n      TableScan: person projection=None\";\n+        quick_test(sql, expected);\n+    }\n+\n+    #[test]\n+    fn select_aggregate_with_group_by_with_having() {\n+        let sql = \"SELECT first_name, MAX(age)\n+                   FROM person\n+                   GROUP BY first_name\n+                   HAVING first_name = 'M'\";\n+        let expected = \"Filter: #first_name Eq Utf8(\\\"M\\\")\\\n+                        \\n  Aggregate: groupBy=[[#first_name]], aggr=[[MAX(#age)]]\\\n+                        \\n    TableScan: person projection=None\";\n+        quick_test(sql, expected);\n+    }\n+\n+    #[test]\n+    fn select_aggregate_with_group_by_with_having_using_column_by_alias() {\n+        let sql = \"SELECT first_name AS fn, MAX(age)\n+                   FROM person\n+                   GROUP BY first_name\n+                   HAVING MAX(age) > 2 AND fn = 'M'\";\n+        let expected = \"Projection: #first_name AS fn, #MAX(age)\\\n+                        \\n  Filter: #MAX(age) Gt Int64(2) And #first_name Eq Utf8(\\\"M\\\")\\\n+                        \\n    Aggregate: groupBy=[[#first_name]], aggr=[[MAX(#age)]]\\\n+                        \\n      TableScan: person projection=None\";\n+        quick_test(sql, expected);\n+    }\n+\n+    #[test]\n+    fn select_aggregate_with_group_by_with_having_using_columns_with_and_without_their_aliases(\n+    ) {\n+        let sql = \"SELECT first_name AS fn, MAX(age) AS max_age\n+                   FROM person\n+                   GROUP BY first_name\n+                   HAVING MAX(age) > 2 AND max_age < 5 AND first_name = 'M' AND fn = 'N'\";\n+        let expected = \"Projection: #first_name AS fn, #MAX(age) AS max_age\\\n+                        \\n  Filter: #MAX(age) Gt Int64(2) And #MAX(age) Lt Int64(5) And #first_name Eq Utf8(\\\"M\\\") And #first_name Eq Utf8(\\\"N\\\")\\\n+                        \\n    Aggregate: groupBy=[[#first_name]], aggr=[[MAX(#age)]]\\\n+                        \\n      TableScan: person projection=None\";\n+        quick_test(sql, expected);\n+    }\n+\n+    #[test]\n+    fn select_aggregate_with_group_by_with_having_that_reuses_aggregate() {\n+        let sql = \"SELECT first_name, MAX(age)\n+                   FROM person\n+                   GROUP BY first_name\n+                   HAVING MAX(age) > 100\";\n+        let expected = \"Filter: #MAX(age) Gt Int64(100)\\\n+                        \\n  Aggregate: groupBy=[[#first_name]], aggr=[[MAX(#age)]]\\\n+                        \\n    TableScan: person projection=None\";\n+        quick_test(sql, expected);\n+    }\n+\n+    #[test]\n+    fn select_aggregate_with_group_by_with_having_referencing_column_not_in_group_by() {\n+        let sql = \"SELECT first_name, MAX(age)\n+                   FROM person\n+                   GROUP BY first_name\n+                   HAVING MAX(age) > 10 AND last_name = 'M'\";\n+        let err = logical_plan(sql).expect_err(\"query should have failed\");\n+        assert_eq!(\n+            \"Plan(\\\"Having references non-aggregate values\\\")\",\n+            format!(\"{:?}\", err)\n+        );\n+    }\n+\n+    #[test]\n+    fn select_aggregate_with_group_by_with_having_that_reuses_aggregate_multiple_times() {\n+        let sql = \"SELECT first_name, MAX(age)\n+                   FROM person\n+                   GROUP BY first_name\n+                   HAVING MAX(age) > 100 AND MAX(age) < 200\";\n+        let expected = \"Filter: #MAX(age) Gt Int64(100) And #MAX(age) Lt Int64(200)\\\n+                        \\n  Aggregate: groupBy=[[#first_name]], aggr=[[MAX(#age)]]\\\n+                        \\n    TableScan: person projection=None\";\n+        quick_test(sql, expected);\n+    }\n+\n+    #[test]\n+    fn select_aggregate_with_group_by_with_having_using_aggreagate_not_in_select() {\n+        let sql = \"SELECT first_name, MAX(age)\n+                   FROM person\n+                   GROUP BY first_name\n+                   HAVING MAX(age) > 100 AND MIN(id) < 50\";\n+        let expected = \"Projection: #first_name, #MAX(age)\\\n+                        \\n  Filter: #MAX(age) Gt Int64(100) And #MIN(id) Lt Int64(50)\\\n+                        \\n    Aggregate: groupBy=[[#first_name]], aggr=[[MAX(#age), MIN(#id)]]\\\n+                        \\n      TableScan: person projection=None\";\n+        quick_test(sql, expected);\n+    }\n+\n+    #[test]\n+    fn select_aggregate_aliased_with_group_by_with_having_referencing_aggregate_by_its_alias(\n+    ) {\n+        let sql = \"SELECT first_name, MAX(age) AS max_age\n+                   FROM person\n+                   GROUP BY first_name\n+                   HAVING max_age > 100\";\n+        let expected = \"Projection: #first_name, #MAX(age) AS max_age\\\n+                        \\n  Filter: #MAX(age) Gt Int64(100)\\\n+                        \\n    Aggregate: groupBy=[[#first_name]], aggr=[[MAX(#age)]]\\\n+                        \\n      TableScan: person projection=None\";\n+        quick_test(sql, expected);\n+    }\n+\n+    #[test]\n+    fn select_aggregate_compound_aliased_with_group_by_with_having_referencing_compound_aggregate_by_its_alias(\n+    ) {\n+        let sql = \"SELECT first_name, MAX(age) + 1 AS max_age_plus_one\n+                   FROM person\n+                   GROUP BY first_name\n+                   HAVING max_age_plus_one > 100\";\n+        let expected =\n+            \"Projection: #first_name, #MAX(age) Plus Int64(1) AS max_age_plus_one\\\n+                        \\n  Filter: #MAX(age) Plus Int64(1) Gt Int64(100)\\\n+                        \\n    Aggregate: groupBy=[[#first_name]], aggr=[[MAX(#age)]]\\\n+                        \\n      TableScan: person projection=None\";\n+        quick_test(sql, expected);\n+    }\n+\n+    #[test]\n+    fn select_aggregate_with_group_by_with_having_using_derived_column_aggreagate_not_in_select(\n+    ) {\n+        let sql = \"SELECT first_name, MAX(age)\n+                   FROM person\n+                   GROUP BY first_name\n+                   HAVING MAX(age) > 100 AND MIN(id - 2) < 50\";\n+        let expected = \"Projection: #first_name, #MAX(age)\\\n+                        \\n  Filter: #MAX(age) Gt Int64(100) And #MIN(id Minus Int64(2)) Lt Int64(50)\\\n+                        \\n    Aggregate: groupBy=[[#first_name]], aggr=[[MAX(#age), MIN(#id Minus Int64(2))]]\\\n+                        \\n      TableScan: person projection=None\";\n+        quick_test(sql, expected);\n+    }\n+\n+    #[test]\n+    fn select_aggregate_with_group_by_with_having_using_count_star_not_in_select() {\n+        let sql = \"SELECT first_name, MAX(age)\n+                   FROM person\n+                   GROUP BY first_name\n+                   HAVING MAX(age) > 100 AND COUNT(*) < 50\";\n+        let expected = \"Projection: #first_name, #MAX(age)\\\n+                        \\n  Filter: #MAX(age) Gt Int64(100) And #COUNT(UInt8(1)) Lt Int64(50)\\\n+                        \\n    Aggregate: groupBy=[[#first_name]], aggr=[[MAX(#age), COUNT(UInt8(1))]]\\\n+                        \\n      TableScan: person projection=None\";\n+        quick_test(sql, expected);\n+    }\n+\n\nReview comment:\n       These test cases are pretty amazing @drusso  -- thank you. The only one I think we should also add is a query that has both a `HAVING` and `WHERE` clause\r\n   \r\n   Something like \r\n   \r\n   ```\r\n    \"SELECT first_name, MAX(age)\r\n                      FROM person\r\n                      WHERE id > 5\r\n                      GROUP BY first_name\r\n                      HAVING MAX(age) <100\";\r\n   ```\r\n   \r\n   And \r\n   ```\r\n    \"SELECT first_name, MAX(age)\r\n                      FROM person\r\n                      WHERE id > 5 AND age > 18\r\n                      GROUP BY first_name\r\n                      HAVING MAX(age) <100\";\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-02T17:14:41.700+0000",
                    "updated": "2021-02-02T17:14:41.700+0000",
                    "started": "2021-02-02T17:14:41.700+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "546133",
                    "issueId": "13355512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355512/worklog/546465",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9364:\nURL: https://github.com/apache/arrow/pull/9364#issuecomment-771222900\n\n\n   I plan to review this carefully tomorrow\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-03T01:07:44.169+0000",
                    "updated": "2021-02-03T01:07:44.169+0000",
                    "started": "2021-02-03T01:07:44.169+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "546465",
                    "issueId": "13355512"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355512/worklog/546725",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drusso commented on pull request #9364:\nURL: https://github.com/apache/arrow/pull/9364#issuecomment-771639766\n\n\n   Thanks @jorgecarleitao and @alamb! \r\n   \r\n   I added a note in the README. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-03T01:32:37.766+0000",
                    "updated": "2021-02-03T01:32:37.766+0000",
                    "started": "2021-02-03T01:32:37.765+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "546725",
                    "issueId": "13355512"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 17400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@37ca518[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@72edb306[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e627d6a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@21889c23[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@75d964a8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2febbd31[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2cf1c8b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@67c3e175[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@59012501[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2b710925[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@51a07384[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2990f88c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 17400,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Feb 03 18:38:24 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-02-03T18:38:24.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11431/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-01-29T18:59:54.000+0000",
        "updated": "2021-02-03T18:53:53.000+0000",
        "timeoriginalestimate": null,
        "description": "We do not yet have support for the SQL {{HAVING}} clause. {{HAVING}} is used to filter post-aggregation, typically against an aggregated column. For example:\r\n\r\n{code}\r\nSELECT c1, MAX(c2) FROM t GROUP BY c1 HAVING MAX(c2) > 100\r\n{code}\r\n\r\n{{HAVING}} expressions need not reference aggregates in the {{SELECT}}, for example:\r\n\r\n{code}\r\nSELECT c1, MAX(c2) FROM t GROUP BY c1 HAVING MIN(c2) > 100\r\n{code}\r\n\r\n{{HAVING}} expressions need not filter on aggregated columns, for example:\r\n\r\n{code}\r\nSELECT c1, MAX(c2) FROM t GROUP BY c1 HAVING c1 > 100\r\n{code}\r\n\r\nLastly, {{HAVING}} expressions need not be used in conjunction with a {{GROUP BY}}, for example: \r\n\r\n{code}\r\nSELECT MAX(c1) FROM t HAVING MAX(c1) > 100\r\n{code}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 17400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Add support for the SQL HAVING clause",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13355512/comment/17278287",
                    "id": "17278287",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 9364\n[https://github.com/apache/arrow/pull/9364]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-02-03T18:38:24.096+0000",
                    "updated": "2021-02-03T18:38:24.096+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0n58g:",
        "customfield_12314139": null
    }
}