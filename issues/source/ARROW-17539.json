{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13478877",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478877",
    "key": "ARROW-17539",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jpivarski",
            "name": "jpivarski",
            "key": "jpivarski",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Jim Pivarski",
            "active": true,
            "timeZone": "America/Chicago"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jpivarski",
            "name": "jpivarski",
            "key": "jpivarski",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Jim Pivarski",
            "active": true,
            "timeZone": "America/Chicago"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17539/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5c9dbfb4[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@448782a6[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5537294f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2ddd13fd[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@370fb16b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@61ec98e8[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@dfdb8cb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@48fa0072[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b464ef[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@79a8789[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@67414c51[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7f20295b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "2022-08-26 20:34:22.0",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17539/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2022-08-26T20:34:22.000+0000",
        "updated": "2022-08-26T20:34:22.000+0000",
        "timeoriginalestimate": null,
        "description": "We can make nested columns in a Parquet file by putting a {{pa.StructArray}} in a {{pa.Table}} and writing that Table to Parquet. We can selectively read back that nested column by specifying it with dot syntax:\r\n\r\n{{pq.ParquetFile(\"f.parquet\").read_row_groups([0], [\"table_column.struct_field\"])}}\r\n\r\nBut if the Arrow types are ExtensionTypes, then the above causes a segfault. The segfault depends both on the nested struct field and the ExtensionTypes.\r\n\r\nHere is a minimally reproducing example of reading a nested struct field without extension types, which does not raise a segfault. (I'm building the {{pa.StructArray}} manually with {{from_buffers}} because I'll have to add the ExtensionTypes in the next example.)\r\n{code:python}\r\nimport numpy as np\r\nimport pyarrow as pa\r\nimport pyarrow.parquet as pq\r\n\r\none = pa.Array.from_buffers(\r\n    pa.int64(),\r\n    3,\r\n    [None, pa.py_buffer(np.array([10, 20, 30], dtype=np.int64))],\r\n)\r\ntwo = pa.Array.from_buffers(\r\n    pa.float64(),\r\n    3,\r\n    [None, pa.py_buffer(np.array([1.1, 2.2, 3.3], dtype=np.float64))],\r\n)\r\nrecord = pa.Array.from_buffers(\r\n    pa.struct([\r\n        pa.field(\"one\", one.type, False),\r\n        pa.field(\"two\", two.type, False),\r\n    ]),\r\n    3,\r\n    [None],\r\n    children=[one, two],\r\n)\r\nassert record.to_pylist() == [\r\n    {\"one\": 10, \"two\": 1.1},\r\n    {\"one\": 20, \"two\": 2.2},\r\n    {\"one\": 30, \"two\": 3.3},\r\n]\r\n\r\ntable = pa.Table.from_arrays([record], names=[\"column\"])\r\npq.write_table(table, \"record.parquet\")\r\ntable2 = pq.ParquetFile(\"record.parquet\").read_row_groups([0], [\"column.one\"])\r\nassert table2.to_pylist() == [\r\n    {\"column\": {\"one\": 10}},\r\n    {\"column\": {\"one\": 20}},\r\n    {\"column\": {\"one\": 30}},\r\n]\r\n{code}\r\nSo far, so good; no segfault. Next, we define and register an ExtensionType,\r\n{code:python}\r\nimport json\r\n\r\nclass AnnotatedType(pa.ExtensionType):\r\n    def __init__(self, storage_type, annotation):\r\n        self.annotation = annotation\r\n        super().__init__(storage_type, \"my:app\")\r\n    def __arrow_ext_serialize__(self):\r\n        return json.dumps(self.annotation).encode()\r\n    @classmethod\r\n    def __arrow_ext_deserialize__(cls, storage_type, serialized):\r\n        annotation = json.loads(serialized.decode())\r\n        print(storage_type, annotation)\r\n        return cls(storage_type, annotation)\r\n    @property\r\n    def num_buffers(self):\r\n        return self.storage_type.num_buffers\r\n    @property\r\n    def num_fields(self):\r\n        return self.storage_type.num_fields\r\n\r\npa.register_extension_type(AnnotatedType(pa.null(), None))\r\n{code}\r\nbuild the {{pa.StructArray}} again,\r\n{code:python}\r\none = pa.Array.from_buffers(\r\n    AnnotatedType(pa.int64(), {\"annotated\": \"one\"}),\r\n    3,\r\n    [None, pa.py_buffer(np.array([10, 20, 30], dtype=np.int64))],\r\n)\r\ntwo = pa.Array.from_buffers(\r\n    AnnotatedType(pa.float64(), {\"annotated\": \"two\"}),\r\n    3,\r\n    [None, pa.py_buffer(np.array([1.1, 2.2, 3.3], dtype=np.float64))],\r\n)\r\nrecord = pa.Array.from_buffers(\r\n    AnnotatedType(\r\n        pa.struct([\r\n            pa.field(\"one\", one.type, False),\r\n            pa.field(\"two\", two.type, False),\r\n        ]),\r\n        {\"annotated\": \"record\"},\r\n    ),\r\n    3,\r\n    [None],\r\n    children=[one, two],\r\n)\r\nassert record.to_pylist() == [\r\n    {\"one\": 10, \"two\": 1.1},\r\n    {\"one\": 20, \"two\": 2.2},\r\n    {\"one\": 30, \"two\": 3.3},\r\n]\r\n{code}\r\nNow when we write and read this back, there's a segfault:\r\n{code:python}\r\ntable = pa.Table.from_arrays([record], names=[\"column\"])\r\npq.write_table(table, \"record_annotated.parquet\")\r\n\r\nprint(\"before segfault\")\r\n\r\ntable2 = pq.ParquetFile(\"record_annotated.parquet\").read_row_groups([0], [\"column.one\"])\r\n\r\nprint(\"after segfault\")\r\n{code}\r\nThe output, which prints each annotation as the ExtensionType is deserialized, is\r\n{code:java}\r\nbefore segfault\r\nint64 {'annotated': 'one'}\r\ndouble {'annotated': 'two'}\r\nint64 {'annotated': 'one'}\r\ndouble {'annotated': 'two'}\r\nstruct<one: extension<my:app<AnnotatedType>> not null, two: extension<my:app<AnnotatedType>> not null> {'annotated': 'record'}\r\nSegmentation fault (core dumped)\r\n{code}\r\nNote that if we read back that file, {{{}record_annotated.parquet{}}}, without the ExtensionType, everything is fine:\r\n{code:java}\r\nPython 3.9.13 | packaged by conda-forge | (main, May 27 2022, 16:56:21) \r\n[GCC 10.3.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import pyarrow as pa\r\n>>> import pyarrow.parquet as pq\r\n>>> table2 = pq.ParquetFile(\"record_annotated.parquet\").read_row_groups([0], [\"column.one\"])\r\n>>> assert table2.to_pylist() == [\r\n...     {\"column\": {\"one\": 10}},\r\n...     {\"column\": {\"one\": 20}},\r\n...     {\"column\": {\"one\": 30}},\r\n... ]\r\n{code}\r\nand if we register the ExtensionType but don't select a column, everything is fine:\r\n{code:java}\r\nPython 3.9.13 | packaged by conda-forge | (main, May 27 2022, 16:56:21) \r\n[GCC 10.3.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import pyarrow as pa\r\n>>> import pyarrow.parquet as pq\r\n>>> import json\r\n>>> \r\n>>> class AnnotatedType(pa.ExtensionType):\r\n...     def __init__(self, storage_type, annotation):\r\n...         self.annotation = annotation\r\n...         super().__init__(storage_type, \"my:app\")\r\n...     def __arrow_ext_serialize__(self):\r\n...         return json.dumps(self.annotation).encode()\r\n...     @classmethod\r\n...     def __arrow_ext_deserialize__(cls, storage_type, serialized):\r\n...         annotation = json.loads(serialized.decode())\r\n...         print(storage_type, annotation)\r\n...         return cls(storage_type, annotation)\r\n...     @property\r\n...     def num_buffers(self):\r\n...         return self.storage_type.num_buffers\r\n...     @property\r\n...     def num_fields(self):\r\n...         return self.storage_type.num_fields\r\n... \r\n>>> pa.register_extension_type(AnnotatedType(pa.null(), None))\r\n>>> \r\n>>> table2 = pq.ParquetFile(\"record_annotated.parquet\").read_row_groups([0])\r\nint64 {'annotated': 'one'}\r\ndouble {'annotated': 'two'}\r\nint64 {'annotated': 'one'}\r\ndouble {'annotated': 'two'}\r\nstruct<one: extension<my:app<AnnotatedType>> not null, two: extension<my:app<AnnotatedType>> not null> {'annotated': 'record'}\r\n>>> assert table2.to_pylist() == [\r\n...     {\"column\": {\"one\": 10, \"two\": 1.1}},\r\n...     {\"column\": {\"one\": 20, \"two\": 2.2}},\r\n...     {\"column\": {\"one\": 30, \"two\": 3.3}},\r\n... ]\r\nint64 {'annotated': 'one'}\r\ndouble {'annotated': 'two'}\r\nstruct<one: extension<my:app<AnnotatedType>> not null, two: extension<my:app<AnnotatedType>> not null> {'annotated': 'record'}\r\nint64 {'annotated': 'one'}\r\ndouble {'annotated': 'two'}\r\nstruct<one: extension<my:app<AnnotatedType>> not null, two: extension<my:app<AnnotatedType>> not null> {'annotated': 'record'}\r\nint64 {'annotated': 'one'}\r\ndouble {'annotated': 'two'}\r\nstruct<one: extension<my:app<AnnotatedType>> not null, two: extension<my:app<AnnotatedType>> not null> {'annotated': 'record'}\r\nint64 {'annotated': 'one'}\r\ndouble {'annotated': 'two'}\r\nstruct<one: extension<my:app<AnnotatedType>> not null, two: extension<my:app<AnnotatedType>> not null> {'annotated': 'record'}\r\nint64 {'annotated': 'one'}\r\ndouble {'annotated': 'two'}\r\nstruct<one: extension<my:app<AnnotatedType>> not null, two: extension<my:app<AnnotatedType>> not null> {'annotated': 'record'}\r\nint64 {'annotated': 'one'}\r\ndouble {'annotated': 'two'}\r\nint64 {'annotated': 'one'}\r\ndouble {'annotated': 'two'}\r\nstruct<one: extension<my:app<AnnotatedType>> not null, two: extension<my:app<AnnotatedType>> not null> {'annotated': 'record'}\r\nint64 {'annotated': 'one'}\r\ndouble {'annotated': 'two'}\r\nint64 {'annotated': 'one'}\r\ndouble {'annotated': 'two'}\r\nstruct<one: extension<my:app<AnnotatedType>> not null, two: extension<my:app<AnnotatedType>> not null> {'annotated': 'record'}\r\nint64 {'annotated': 'one'}\r\ndouble {'annotated': 'two'}\r\n{code}\r\nIt's just the case of doing both that causes the segfault.",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "Reading a StructArray column with an ExtensionType causes segfault",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [],
            "maxResults": 0,
            "total": 0,
            "startAt": 0
        },
        "customfield_12311820": "0|z183x4:",
        "customfield_12314139": null
    }
}