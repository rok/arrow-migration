{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13148084",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148084",
    "key": "ARROW-2357",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
            "name": "cpcloud",
            "key": "cpcloud",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
            },
            "displayName": "Phillip Cloud",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
            "name": "cpcloud",
            "key": "cpcloud",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
            },
            "displayName": "Phillip Cloud",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2357/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@a1fb447[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@362b1b4b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@a68d6ed[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@647775a8[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e2239d9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@542ea067[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@183dcbb1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4738372b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@68fb22e4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@49f79a04[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3fe1b0c8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@39e65970[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Apr 03 04:39:00 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-04-03T04:39:00.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2357/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-03-26T23:52:28.000+0000",
        "updated": "2018-04-03T04:39:00.000+0000",
        "timeoriginalestimate": null,
        "description": "This is a follow-up to ARROW-2354 ([C++] Make PyDecimal_Check() faster). We should benchmark {{PandasObjectIsNull}} as it gets called in many of our conversion routines in tight loops.",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "Benchmark PandasObjectIsNull",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148084/comment/16415471",
                    "id": "16415471",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou opened a new pull request #1798: ARROW-2357: [Python] Add microbenchmark for PandasObjectIsNull()\nURL: https://github.com/apache/arrow/pull/1798\n \n \n   Also add Decimal fodder for other benchmarks. @cpcloud \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-27T11:53:54.504+0000",
                    "updated": "2018-03-27T11:53:54.504+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148084/comment/16415475",
                    "id": "16415475",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1798: ARROW-2357: [Python] Add microbenchmark for PandasObjectIsNull()\nURL: https://github.com/apache/arrow/pull/1798#issuecomment-376497660\n \n \n   Sample result:\r\n   ```\r\n   [100.00%] \u00b7\u00b7\u00b7 Running microbenchmarks.PandasObjectIsNull.time_PandasObjectIsNull                                                                      ok\r\n   [100.00%] \u00b7\u00b7\u00b7\u00b7 \r\n                  ========= =============\r\n                     type                \r\n                  --------- -------------\r\n                     int     1.56\u00b10.01ms \r\n                    float    1.55\u00b10.01ms \r\n                    object     1.43\u00b10ms  \r\n                   decimal    22.8\u00b10.3ms \r\n                  ========= =============\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-27T11:55:55.791+0000",
                    "updated": "2018-03-27T11:55:55.791+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148084/comment/16415481",
                    "id": "16415481",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1798: ARROW-2357: [Python] Add microbenchmark for PandasObjectIsNull()\nURL: https://github.com/apache/arrow/pull/1798#issuecomment-376498987\n \n \n   Also the output of other decimal-enabled benchmarks:\r\n   ```\r\n   [ 14.29%] \u00b7\u00b7\u00b7 Running convert_builtins.ConvertArrayToPyList.time_convert                                                                              ok\r\n   [ 14.29%] \u00b7\u00b7\u00b7\u00b7 \r\n                  ============ =============\r\n                      type                  \r\n                  ------------ -------------\r\n                     int32      20.1\u00b10.06ms \r\n                     uint32     21.0\u00b10.05ms \r\n                     int64       20.8\u00b10.2ms \r\n                     uint64      21.5\u00b10.2ms \r\n                    float32      20.2\u00b10.2ms \r\n                    float64     20.8\u00b10.08ms \r\n                      bool       19.4\u00b10.1ms \r\n                    decimal      184\u00b10.2ms  \r\n                     binary      22.3\u00b10.3ms \r\n                    binary10     22.0\u00b10.2ms \r\n                     ascii       35.3\u00b10.1ms \r\n                    unicode      76.2\u00b10.2ms \r\n                   int64 list    183\u00b10.2ms  \r\n                     struct       324\u00b12ms   \r\n                  ============ =============\r\n   \r\n   [ 28.57%] \u00b7\u00b7\u00b7 Running convert_builtins.ConvertPyListToArray.time_convert                                                                              ok\r\n   [ 28.57%] \u00b7\u00b7\u00b7\u00b7 \r\n                  ==================== =============\r\n                          type                      \r\n                  -------------------- -------------\r\n                         int32          5.51\u00b10.07ms \r\n                         uint32          5.42\u00b10.1ms \r\n                         int64           6.11\u00b10.1ms \r\n                         uint64         4.96\u00b10.09ms \r\n                        float32         5.18\u00b10.03ms \r\n                        float64         5.19\u00b10.04ms \r\n                          bool          4.28\u00b10.01ms \r\n                        decimal          187\u00b10.4ms  \r\n                         binary          8.18\u00b10.1ms \r\n                        binary10         8.39\u00b10.1ms \r\n                         ascii           13.1\u00b10.3ms \r\n                        unicode          30.0\u00b10.6ms \r\n                       int64 list        52.8\u00b10.5ms \r\n                         struct           31.1\u00b12ms  \r\n                   struct from tuples     30.4\u00b12ms  \r\n                  ==================== =============\r\n   \r\n   [ 42.86%] \u00b7\u00b7\u00b7 Running convert_builtins.InferPyListToArray.time_infer                                                                                  ok\r\n   [ 42.86%] \u00b7\u00b7\u00b7\u00b7 \r\n                  ============ =============\r\n                      type                  \r\n                  ------------ -------------\r\n                     int64       11.7\u00b10.1ms \r\n                    float64     10.4\u00b10.07ms \r\n                      bool      9.35\u00b10.03ms \r\n                    decimal      381\u00b10.5ms  \r\n                     binary      14.5\u00b10.1ms \r\n                     ascii       19.8\u00b10.2ms \r\n                    unicode      37.6\u00b10.6ms \r\n                   int64 list    101\u00b10.07ms \r\n                  ============ =============\r\n   ```\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-27T12:00:20.625+0000",
                    "updated": "2018-03-27T12:00:20.625+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148084/comment/16422118",
                    "id": "16422118",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1798: ARROW-2357: [Python] Add microbenchmark for PandasObjectIsNull()\nURL: https://github.com/apache/arrow/pull/1798#issuecomment-377905811\n \n \n   The C/glib failures on Travis-CI are mysterious as this PR is not touching any related code:\r\n   https://travis-ci.org/apache/arrow/jobs/361127786\r\n   https://travis-ci.org/apache/arrow/jobs/361127785\r\n   \r\n   @kou \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-02T10:48:43.856+0000",
                    "updated": "2018-04-02T10:48:43.856+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148084/comment/16422162",
                    "id": "16422162",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1798: ARROW-2357: [Python] Add microbenchmark for PandasObjectIsNull()\nURL: https://github.com/apache/arrow/pull/1798#issuecomment-377912507\n \n \n   I opened ARROW-2377 for the CI failures.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-02T11:38:44.623+0000",
                    "updated": "2018-04-02T11:38:44.623+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148084/comment/16423325",
                    "id": "16423325",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "kou commented on issue #1798: ARROW-2357: [Python] Add microbenchmark for PandasObjectIsNull()\nURL: https://github.com/apache/arrow/pull/1798#issuecomment-378091798\n \n \n   The failures should be worked on #1826 . You can ignore them in this pull request.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-03T00:41:34.813+0000",
                    "updated": "2018-04-03T00:41:34.813+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148084/comment/16423459",
                    "id": "16423459",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy closed pull request #1798: ARROW-2357: [Python] Add microbenchmark for PandasObjectIsNull()\nURL: https://github.com/apache/arrow/pull/1798\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/python/CMakeLists.txt b/cpp/src/arrow/python/CMakeLists.txt\nindex f931abe38..b985df914 100644\n--- a/cpp/src/arrow/python/CMakeLists.txt\n+++ b/cpp/src/arrow/python/CMakeLists.txt\n@@ -50,6 +50,7 @@ set(ARROW_PYTHON_TEST_LINK_LIBS ${ARROW_PYTHON_MIN_TEST_LIBS})\n set(ARROW_PYTHON_SRCS\n   arrow_to_pandas.cc\n   arrow_to_python.cc\n+  benchmark.cc\n   builtin_convert.cc\n   common.cc\n   config.cc\n@@ -99,6 +100,7 @@ install(FILES\n   api.h\n   arrow_to_pandas.h\n   arrow_to_python.h\n+  benchmark.h\n   builtin_convert.h\n   common.h\n   config.h\ndiff --git a/cpp/src/arrow/python/benchmark.cc b/cpp/src/arrow/python/benchmark.cc\nnew file mode 100644\nindex 000000000..2d29f69d2\n--- /dev/null\n+++ b/cpp/src/arrow/python/benchmark.cc\n@@ -0,0 +1,38 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/python/benchmark.h>\n+#include <arrow/python/helpers.h>\n+\n+namespace arrow {\n+namespace py {\n+namespace benchmark {\n+\n+void Benchmark_PandasObjectIsNull(PyObject* list) {\n+  if (!PyList_CheckExact(list)) {\n+    PyErr_SetString(PyExc_TypeError, \"expected a list\");\n+    return;\n+  }\n+  Py_ssize_t i, n = PyList_GET_SIZE(list);\n+  for (i = 0; i < n; i++) {\n+    internal::PandasObjectIsNull(PyList_GET_ITEM(list, i));\n+  }\n+}\n+\n+}  // namespace benchmark\n+}  // namespace py\n+}  // namespace arrow\ndiff --git a/cpp/src/arrow/python/benchmark.h b/cpp/src/arrow/python/benchmark.h\nnew file mode 100644\nindex 000000000..f88b6b432\n--- /dev/null\n+++ b/cpp/src/arrow/python/benchmark.h\n@@ -0,0 +1,39 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_PYTHON_BENCHMARK_H\n+#define ARROW_PYTHON_BENCHMARK_H\n+\n+#include \"arrow/python/platform.h\"\n+\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace py {\n+namespace benchmark {\n+\n+// Micro-benchmark routines for use from ASV\n+\n+// Run PandasObjectIsNull() once over every object in *list*\n+ARROW_EXPORT\n+void Benchmark_PandasObjectIsNull(PyObject* list);\n+\n+}  // namespace benchmark\n+}  // namespace py\n+}  // namespace arrow\n+\n+#endif  // ARROW_PYTHON_BENCHMARK_H\ndiff --git a/python/benchmarks/common.py b/python/benchmarks/common.py\nindex b205ba581..70cd92492 100644\n--- a/python/benchmarks/common.py\n+++ b/python/benchmarks/common.py\n@@ -16,16 +16,23 @@\n # under the License.\n \n import codecs\n+import decimal\n+from functools import partial\n+import itertools\n import os\n import sys\n import unicodedata\n \n import numpy as np\n \n+import pyarrow as pa\n+\n \n KILOBYTE = 1 << 10\n MEGABYTE = KILOBYTE * KILOBYTE\n \n+DEFAULT_NONE_PROB = 0.3\n+\n \n def _multiplicate_sequence(base, target_size):\n     q, r = divmod(target_size, len(base))\n@@ -97,3 +104,248 @@ def get_random_unicode(n, *, seed=42):\n     result = ''.join(unicode_arr.tolist())\n     assert len(result) == n, (len(result), len(unicode_arr))\n     return result\n+\n+\n+class BuiltinsGenerator(object):\n+\n+    def __init__(self, seed=42):\n+        self.rnd = np.random.RandomState(seed)\n+\n+    def sprinkle(self, lst, prob, value):\n+        \"\"\"\n+        Sprinkle *value* entries in list *lst* with likelihood *prob*.\n+        \"\"\"\n+        for i, p in enumerate(self.rnd.random_sample(size=len(lst))):\n+            if p < prob:\n+                lst[i] = value\n+\n+    def sprinkle_nones(self, lst, prob):\n+        \"\"\"\n+        Sprinkle None entries in list *lst* with likelihood *prob*.\n+        \"\"\"\n+        self.sprinkle(lst, prob, None)\n+\n+    def generate_int_list(self, n, none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of Python ints with *none_prob* probability of\n+        an entry being None.\n+        \"\"\"\n+        data = list(range(n))\n+        self.sprinkle_nones(data, none_prob)\n+        return data\n+\n+    def generate_float_list(self, n, none_prob=DEFAULT_NONE_PROB,\n+                            use_nan=False):\n+        \"\"\"\n+        Generate a list of Python floats with *none_prob* probability of\n+        an entry being None (or NaN if *use_nan* is true).\n+        \"\"\"\n+        # Make sure we get Python floats, not np.float64\n+        data = list(map(float, self.rnd.uniform(0.0, 1.0, n)))\n+        assert len(data) == n\n+        self.sprinkle(data, none_prob, value=float('nan') if use_nan else None)\n+        return data\n+\n+    def generate_bool_list(self, n, none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of Python bools with *none_prob* probability of\n+        an entry being None.\n+        \"\"\"\n+        # Make sure we get Python bools, not np.bool_\n+        data = [bool(x >= 0.5) for x in self.rnd.uniform(0.0, 1.0, n)]\n+        assert len(data) == n\n+        self.sprinkle_nones(data, none_prob)\n+        return data\n+\n+    def generate_decimal_list(self, n, none_prob=DEFAULT_NONE_PROB,\n+                              use_nan=False):\n+        \"\"\"\n+        Generate a list of Python Decimals with *none_prob* probability of\n+        an entry being None (or NaN if *use_nan* is true).\n+        \"\"\"\n+        data = [decimal.Decimal('%.9f' % f)\n+                for f in self.rnd.uniform(0.0, 1.0, n)]\n+        assert len(data) == n\n+        self.sprinkle(data, none_prob,\n+                      value=decimal.Decimal('nan') if use_nan else None)\n+        return data\n+\n+    def generate_object_list(self, n, none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of generic Python objects with *none_prob*\n+        probability of an entry being None.\n+        \"\"\"\n+        data = [object() for i in range(n)]\n+        self.sprinkle_nones(data, none_prob)\n+        return data\n+\n+    def _generate_varying_sequences(self, random_factory, n, min_size, max_size, none_prob):\n+        \"\"\"\n+        Generate a list of *n* sequences of varying size between *min_size*\n+        and *max_size*, with *none_prob* probability of an entry being None.\n+        The base material for each sequence is obtained by calling\n+        `random_factory(<some size>)`\n+        \"\"\"\n+        base_size = 10000\n+        base = random_factory(base_size + max_size)\n+        data = []\n+        for i in range(n):\n+            off = self.rnd.randint(base_size)\n+            if min_size == max_size:\n+                size = min_size\n+            else:\n+                size = self.rnd.randint(min_size, max_size + 1)\n+            data.append(base[off:off + size])\n+        self.sprinkle_nones(data, none_prob)\n+        assert len(data) == n\n+        return data\n+\n+    def generate_fixed_binary_list(self, n, size, none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of bytestrings with a fixed *size*.\n+        \"\"\"\n+        return self._generate_varying_sequences(get_random_bytes, n,\n+                                                size, size, none_prob)\n+\n+\n+    def generate_varying_binary_list(self, n, min_size, max_size,\n+                                     none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of bytestrings with a random size between\n+        *min_size* and *max_size*.\n+        \"\"\"\n+        return self._generate_varying_sequences(get_random_bytes, n,\n+                                                min_size, max_size, none_prob)\n+\n+\n+    def generate_ascii_string_list(self, n, min_size, max_size,\n+                                   none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of ASCII strings with a random size between\n+        *min_size* and *max_size*.\n+        \"\"\"\n+        return self._generate_varying_sequences(get_random_ascii, n,\n+                                                min_size, max_size, none_prob)\n+\n+\n+    def generate_unicode_string_list(self, n, min_size, max_size,\n+                                     none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of unicode strings with a random size between\n+        *min_size* and *max_size*.\n+        \"\"\"\n+        return self._generate_varying_sequences(get_random_unicode, n,\n+                                                min_size, max_size, none_prob)\n+\n+\n+    def generate_int_list_list(self, n, min_size, max_size,\n+                               none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of lists of Python ints with a random size between\n+        *min_size* and *max_size*.\n+        \"\"\"\n+        return self._generate_varying_sequences(\n+            partial(self.generate_int_list, none_prob=none_prob),\n+            n, min_size, max_size, none_prob)\n+\n+    def generate_tuple_list(self, n, none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of tuples with random values.\n+        Each tuple has the form `(int value, float value, bool value)`\n+        \"\"\"\n+        dicts = self.generate_dict_list(n, none_prob=none_prob)\n+        tuples = [(d.get('u'), d.get('v'), d.get('w'))\n+                  if d is not None else None\n+                  for d in dicts]\n+        assert len(tuples) == n\n+        return tuples\n+\n+    def generate_dict_list(self, n, none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of dicts with random values.\n+        Each dict has the form `{'u': int value, 'v': float value, 'w': bool value}`\n+        \"\"\"\n+        ints = self.generate_int_list(n, none_prob=none_prob)\n+        floats = self.generate_float_list(n, none_prob=none_prob)\n+        bools = self.generate_bool_list(n, none_prob=none_prob)\n+        dicts = []\n+        # Keep half the Nones, omit the other half\n+        keep_nones = itertools.cycle([True, False])\n+        for u, v, w in zip(ints, floats, bools):\n+            d = {}\n+            if u is not None or next(keep_nones):\n+                d['u'] = u\n+            if v is not None or next(keep_nones):\n+                d['v'] = v\n+            if w is not None or next(keep_nones):\n+                d['w'] = w\n+            dicts.append(d)\n+        self.sprinkle_nones(dicts, none_prob)\n+        assert len(dicts) == n\n+        return dicts\n+\n+    def get_type_and_builtins(self, n, type_name):\n+        \"\"\"\n+        Return a `(arrow type, list)` tuple where the arrow type\n+        corresponds to the given logical *type_name*, and the list\n+        is a list of *n* random-generated Python objects compatible\n+        with the arrow type.\n+        \"\"\"\n+        size = None\n+\n+        if type_name in ('bool', 'decimal', 'ascii', 'unicode', 'int64 list'):\n+            kind = type_name\n+        elif type_name.startswith(('int', 'uint')):\n+            kind = 'int'\n+        elif type_name.startswith('float'):\n+            kind = 'float'\n+        elif type_name.startswith('struct'):\n+            kind = 'struct'\n+        elif type_name == 'binary':\n+            kind = 'varying binary'\n+        elif type_name.startswith('binary'):\n+            kind = 'fixed binary'\n+            size = int(type_name[6:])\n+            assert size > 0\n+        else:\n+            raise ValueError(\"unrecognized type %r\" % (type_name,))\n+\n+        if kind in ('int', 'float'):\n+            ty = getattr(pa, type_name)()\n+        elif kind == 'bool':\n+            ty = pa.bool_()\n+        elif kind == 'decimal':\n+            ty = pa.decimal128(9, 9)\n+        elif kind == 'fixed binary':\n+            ty = pa.binary(size)\n+        elif kind == 'varying binary':\n+            ty = pa.binary()\n+        elif kind in ('ascii', 'unicode'):\n+            ty = pa.string()\n+        elif kind == 'int64 list':\n+            ty = pa.list_(pa.int64())\n+        elif kind == 'struct':\n+            ty = pa.struct([pa.field('u', pa.int64()),\n+                            pa.field('v', pa.float64()),\n+                            pa.field('w', pa.bool_())])\n+\n+        factories = {\n+            'int': self.generate_int_list,\n+            'float': self.generate_float_list,\n+            'bool': self.generate_bool_list,\n+            'decimal': self.generate_decimal_list,\n+            'fixed binary': partial(self.generate_fixed_binary_list,\n+                                    size=size),\n+            'varying binary': partial(self.generate_varying_binary_list,\n+                                      min_size=3, max_size=40),\n+            'ascii': partial(self.generate_ascii_string_list,\n+                             min_size=3, max_size=40),\n+            'unicode': partial(self.generate_unicode_string_list,\n+                               min_size=3, max_size=40),\n+            'int64 list': partial(self.generate_int_list_list,\n+                                  min_size=0, max_size=20),\n+            'struct': self.generate_dict_list,\n+            'struct from tuples': self.generate_tuple_list,\n+        }\n+        data = factories[kind](n)\n+        return ty, data\ndiff --git a/python/benchmarks/convert_builtins.py b/python/benchmarks/convert_builtins.py\nindex a4dc9f262..91b15ecf5 100644\n--- a/python/benchmarks/convert_builtins.py\n+++ b/python/benchmarks/convert_builtins.py\n@@ -15,233 +15,13 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-from functools import partial\n-import itertools\n-\n-import numpy as np\n import pyarrow as pa\n \n from . import common\n \n \n-DEFAULT_NONE_PROB = 0.3\n-\n-\n # TODO:\n # - test dates and times\n-# - test decimals\n-\n-class BuiltinsGenerator(object):\n-\n-    def __init__(self, seed=42):\n-        self.rnd = np.random.RandomState(seed)\n-\n-    def sprinkle_nones(self, lst, prob):\n-        \"\"\"\n-        Sprinkle None entries in list *lst* with likelihood *prob*.\n-        \"\"\"\n-        for i, p in enumerate(self.rnd.random_sample(size=len(lst))):\n-            if p < prob:\n-                lst[i] = None\n-\n-    def generate_int_list(self, n, none_prob=DEFAULT_NONE_PROB):\n-        \"\"\"\n-        Generate a list of Python ints with *none_prob* probability of\n-        an entry being None.\n-        \"\"\"\n-        data = list(range(n))\n-        self.sprinkle_nones(data, none_prob)\n-        return data\n-\n-    def generate_float_list(self, n, none_prob=DEFAULT_NONE_PROB):\n-        \"\"\"\n-        Generate a list of Python floats with *none_prob* probability of\n-        an entry being None.\n-        \"\"\"\n-        # Make sure we get Python floats, not np.float64\n-        data = list(map(float, self.rnd.uniform(0.0, 1.0, n)))\n-        assert len(data) == n\n-        self.sprinkle_nones(data, none_prob)\n-        return data\n-\n-    def generate_bool_list(self, n, none_prob=DEFAULT_NONE_PROB):\n-        \"\"\"\n-        Generate a list of Python bools with *none_prob* probability of\n-        an entry being None.\n-        \"\"\"\n-        # Make sure we get Python bools, not np.bool_\n-        data = [bool(x >= 0.5) for x in self.rnd.uniform(0.0, 1.0, n)]\n-        assert len(data) == n\n-        self.sprinkle_nones(data, none_prob)\n-        return data\n-\n-    def _generate_varying_sequences(self, random_factory, n, min_size, max_size, none_prob):\n-        \"\"\"\n-        Generate a list of *n* sequences of varying size between *min_size*\n-        and *max_size*, with *none_prob* probability of an entry being None.\n-        The base material for each sequence is obtained by calling\n-        `random_factory(<some size>)`\n-        \"\"\"\n-        base_size = 10000\n-        base = random_factory(base_size + max_size)\n-        data = []\n-        for i in range(n):\n-            off = self.rnd.randint(base_size)\n-            if min_size == max_size:\n-                size = min_size\n-            else:\n-                size = self.rnd.randint(min_size, max_size + 1)\n-            data.append(base[off:off + size])\n-        self.sprinkle_nones(data, none_prob)\n-        assert len(data) == n\n-        return data\n-\n-    def generate_fixed_binary_list(self, n, size, none_prob=DEFAULT_NONE_PROB):\n-        \"\"\"\n-        Generate a list of bytestrings with a fixed *size*.\n-        \"\"\"\n-        return self._generate_varying_sequences(common.get_random_bytes, n,\n-                                                size, size, none_prob)\n-\n-\n-    def generate_varying_binary_list(self, n, min_size, max_size,\n-                                     none_prob=DEFAULT_NONE_PROB):\n-        \"\"\"\n-        Generate a list of bytestrings with a random size between\n-        *min_size* and *max_size*.\n-        \"\"\"\n-        return self._generate_varying_sequences(common.get_random_bytes, n,\n-                                                min_size, max_size, none_prob)\n-\n-\n-    def generate_ascii_string_list(self, n, min_size, max_size,\n-                                   none_prob=DEFAULT_NONE_PROB):\n-        \"\"\"\n-        Generate a list of ASCII strings with a random size between\n-        *min_size* and *max_size*.\n-        \"\"\"\n-        return self._generate_varying_sequences(common.get_random_ascii, n,\n-                                                min_size, max_size, none_prob)\n-\n-\n-    def generate_unicode_string_list(self, n, min_size, max_size,\n-                                     none_prob=DEFAULT_NONE_PROB):\n-        \"\"\"\n-        Generate a list of unicode strings with a random size between\n-        *min_size* and *max_size*.\n-        \"\"\"\n-        return self._generate_varying_sequences(common.get_random_unicode, n,\n-                                                min_size, max_size, none_prob)\n-\n-\n-    def generate_int_list_list(self, n, min_size, max_size,\n-                               none_prob=DEFAULT_NONE_PROB):\n-        \"\"\"\n-        Generate a list of lists of Python ints with a random size between\n-        *min_size* and *max_size*.\n-        \"\"\"\n-        return self._generate_varying_sequences(\n-            partial(self.generate_int_list, none_prob=none_prob),\n-            n, min_size, max_size, none_prob)\n-\n-    def generate_tuple_list(self, n, none_prob=DEFAULT_NONE_PROB):\n-        \"\"\"\n-        Generate a list of tuples with random values.\n-        Each tuple has the form `(int value, float value, bool value)`\n-        \"\"\"\n-        dicts = self.generate_dict_list(n, none_prob=none_prob)\n-        tuples = [(d.get('u'), d.get('v'), d.get('w'))\n-                  if d is not None else None\n-                  for d in dicts]\n-        assert len(tuples) == n\n-        return tuples\n-\n-    def generate_dict_list(self, n, none_prob=DEFAULT_NONE_PROB):\n-        \"\"\"\n-        Generate a list of dicts with random values.\n-        Each dict has the form `{'u': int value, 'v': float value, 'w': bool value}`\n-        \"\"\"\n-        ints = self.generate_int_list(n, none_prob=none_prob)\n-        floats = self.generate_float_list(n, none_prob=none_prob)\n-        bools = self.generate_bool_list(n, none_prob=none_prob)\n-        dicts = []\n-        # Keep half the Nones, omit the other half\n-        keep_nones = itertools.cycle([True, False])\n-        for u, v, w in zip(ints, floats, bools):\n-            d = {}\n-            if u is not None or next(keep_nones):\n-                d['u'] = u\n-            if v is not None or next(keep_nones):\n-                d['v'] = v\n-            if w is not None or next(keep_nones):\n-                d['w'] = w\n-            dicts.append(d)\n-        self.sprinkle_nones(dicts, none_prob)\n-        assert len(dicts) == n\n-        return dicts\n-\n-    def get_type_and_builtins(self, n, type_name):\n-        \"\"\"\n-        Return a `(arrow type, list)` tuple where the arrow type\n-        corresponds to the given logical *type_name*, and the list\n-        is a list of *n* random-generated Python objects compatible\n-        with the arrow type.\n-        \"\"\"\n-        size = None\n-\n-        if type_name in ('bool', 'ascii', 'unicode', 'int64 list'):\n-            kind = type_name\n-        elif type_name.startswith(('int', 'uint')):\n-            kind = 'int'\n-        elif type_name.startswith('float'):\n-            kind = 'float'\n-        elif type_name.startswith('struct'):\n-            kind = 'struct'\n-        elif type_name == 'binary':\n-            kind = 'varying binary'\n-        elif type_name.startswith('binary'):\n-            kind = 'fixed binary'\n-            size = int(type_name[6:])\n-            assert size > 0\n-        else:\n-            raise ValueError(\"unrecognized type %r\" % (type_name,))\n-\n-        if kind in ('int', 'float'):\n-            ty = getattr(pa, type_name)()\n-        elif kind == 'bool':\n-            ty = pa.bool_()\n-        elif kind == 'fixed binary':\n-            ty = pa.binary(size)\n-        elif kind == 'varying binary':\n-            ty = pa.binary()\n-        elif kind in ('ascii', 'unicode'):\n-            ty = pa.string()\n-        elif kind == 'int64 list':\n-            ty = pa.list_(pa.int64())\n-        elif kind == 'struct':\n-            ty = pa.struct([pa.field('u', pa.int64()),\n-                            pa.field('v', pa.float64()),\n-                            pa.field('w', pa.bool_())])\n-\n-        factories = {\n-            'int': self.generate_int_list,\n-            'float': self.generate_float_list,\n-            'bool': self.generate_bool_list,\n-            'fixed binary': partial(self.generate_fixed_binary_list,\n-                                    size=size),\n-            'varying binary': partial(self.generate_varying_binary_list,\n-                                      min_size=3, max_size=40),\n-            'ascii': partial(self.generate_ascii_string_list,\n-                             min_size=3, max_size=40),\n-            'unicode': partial(self.generate_unicode_string_list,\n-                               min_size=3, max_size=40),\n-            'int64 list': partial(self.generate_int_list_list,\n-                                  min_size=0, max_size=20),\n-            'struct': self.generate_dict_list,\n-            'struct from tuples': self.generate_tuple_list,\n-        }\n-        data = factories[kind](n)\n-        return ty, data\n \n \n class ConvertPyListToArray(object):\n@@ -250,7 +30,7 @@ class ConvertPyListToArray(object):\n     \"\"\"\n     size = 10 ** 5\n     types = ('int32', 'uint32', 'int64', 'uint64',\n-             'float32', 'float64', 'bool',\n+             'float32', 'float64', 'bool', 'decimal',\n              'binary', 'binary10', 'ascii', 'unicode',\n              'int64 list', 'struct', 'struct from tuples')\n \n@@ -258,7 +38,7 @@ class ConvertPyListToArray(object):\n     params = [types]\n \n     def setup(self, type_name):\n-        gen = BuiltinsGenerator()\n+        gen = common.BuiltinsGenerator()\n         self.ty, self.data = gen.get_type_and_builtins(self.size, type_name)\n \n     def time_convert(self, *args):\n@@ -270,15 +50,15 @@ class InferPyListToArray(object):\n     Benchmark pa.array(list of values) with type inference\n     \"\"\"\n     size = 10 ** 5\n-    types = ('int64', 'float64', 'bool', 'binary', 'ascii', 'unicode',\n-             'int64 list')\n+    types = ('int64', 'float64', 'bool', 'decimal', 'binary', 'ascii',\n+             'unicode', 'int64 list')\n     # TODO add 'struct' when supported\n \n     param_names = ['type']\n     params = [types]\n \n     def setup(self, type_name):\n-        gen = BuiltinsGenerator()\n+        gen = common.BuiltinsGenerator()\n         self.ty, self.data = gen.get_type_and_builtins(self.size, type_name)\n \n     def time_infer(self, *args):\n@@ -292,7 +72,7 @@ class ConvertArrayToPyList(object):\n     \"\"\"\n     size = 10 ** 5\n     types = ('int32', 'uint32', 'int64', 'uint64',\n-             'float32', 'float64', 'bool',\n+             'float32', 'float64', 'bool', 'decimal',\n              'binary', 'binary10', 'ascii', 'unicode',\n              'int64 list', 'struct')\n \n@@ -300,7 +80,7 @@ class ConvertArrayToPyList(object):\n     params = [types]\n \n     def setup(self, type_name):\n-        gen = BuiltinsGenerator()\n+        gen = common.BuiltinsGenerator()\n         self.ty, self.data = gen.get_type_and_builtins(self.size, type_name)\n         self.arr = pa.array(self.data, type=self.ty)\n \ndiff --git a/python/benchmarks/microbenchmarks.py b/python/benchmarks/microbenchmarks.py\nnew file mode 100644\nindex 000000000..bae5806e1\n--- /dev/null\n+++ b/python/benchmarks/microbenchmarks.py\n@@ -0,0 +1,47 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import pyarrow as pa\n+import pyarrow.benchmark as pb\n+\n+from . import common\n+\n+\n+class PandasObjectIsNull(object):\n+    size = 10 ** 5\n+    types = ('int', 'float', 'object', 'decimal')\n+\n+    param_names = ['type']\n+    params = [types]\n+\n+    def setup(self, type_name):\n+        gen = common.BuiltinsGenerator()\n+        if type_name == 'int':\n+            lst = gen.generate_int_list(self.size)\n+        elif type_name == 'float':\n+            lst = gen.generate_float_list(self.size, use_nan=True)\n+        elif type_name == 'object':\n+            lst = gen.generate_object_list(self.size)\n+        elif type_name == 'decimal':\n+            lst = gen.generate_decimal_list(self.size)\n+        else:\n+            assert 0\n+        self.lst = lst\n+\n+    def time_PandasObjectIsNull(self, *args):\n+        pb.benchmark_PandasObjectIsNull(self.lst)\n+\ndiff --git a/python/pyarrow/benchmark.pxi b/python/pyarrow/benchmark.pxi\nnew file mode 100644\nindex 000000000..ab251017d\n--- /dev/null\n+++ b/python/pyarrow/benchmark.pxi\n@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+def benchmark_PandasObjectIsNull(list obj):\n+    Benchmark_PandasObjectIsNull(obj)\ndiff --git a/python/pyarrow/benchmark.py b/python/pyarrow/benchmark.py\nnew file mode 100644\nindex 000000000..ef1ef538d\n--- /dev/null\n+++ b/python/pyarrow/benchmark.py\n@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+# flake8: noqa\n+\n+from pyarrow.lib import benchmark_PandasObjectIsNull\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex dbcc94c6f..8654c9c63 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -978,6 +978,10 @@ cdef extern from 'arrow/python/config.h' namespace 'arrow::py':\n     void set_numpy_nan(object o)\n \n \n+cdef extern from 'arrow/python/benchmark.h' namespace 'arrow::py::benchmark':\n+    void Benchmark_PandasObjectIsNull(object lst) except *\n+\n+\n cdef extern from 'arrow/util/compression.h' namespace 'arrow' nogil:\n     enum CompressionType\" arrow::Compression::type\":\n         CompressionType_UNCOMPRESSED\" arrow::Compression::UNCOMPRESSED\"\ndiff --git a/python/pyarrow/lib.pyx b/python/pyarrow/lib.pyx\nindex b4ca49caf..672be08df 100644\n--- a/python/pyarrow/lib.pyx\n+++ b/python/pyarrow/lib.pyx\n@@ -126,5 +126,8 @@ include \"feather.pxi\"\n # Python serialization\n include \"serialization.pxi\"\n \n+# Micro-benchmark routines\n+include \"benchmark.pxi\"\n+\n # Public API\n include \"public-api.pxi\"\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-03T04:36:29.885+0000",
                    "updated": "2018-04-03T04:36:29.885+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148084/comment/16423460",
                    "id": "16423460",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 1798\n[https://github.com/apache/arrow/pull/1798]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-04-03T04:39:00.105+0000",
                    "updated": "2018-04-03T04:39:00.105+0000"
                }
            ],
            "maxResults": 8,
            "total": 8,
            "startAt": 0
        },
        "customfield_12311820": "0|i3rt3j:",
        "customfield_12314139": null
    }
}