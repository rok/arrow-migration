{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13142584",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13142584",
    "key": "ARROW-2261",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2261/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@49f256be[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@197cf21d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1e5c3fff[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@60ceca33[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@67ae0ad8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@249fca4c[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5bc3bae7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4d4a7cfe[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5aa54745[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@322bf7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4660bd94[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@58d3942a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Mar 06 19:34:37 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-03-06T19:34:37.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2261/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-03-05T16:30:04.000+0000",
        "updated": "2018-03-06T19:34:37.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Can't share the same memory in GArrowBuffer safely",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13142584/comment/16386304",
                    "id": "16386304",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "kou opened a new pull request #1701: ARROW-2261: [GLib] Improve memory management for GArrowBuffer data\nURL: https://github.com/apache/arrow/pull/1701\n \n \n   This change introduces GBytes constructors to GArrowBuffer and\r\n   GArrowMutableBuffer. GBytes has reference count feature. It means that\r\n   we can share the same memory safely.\r\n   \r\n   We can't share the same memory safely with the current raw guint8\r\n   constructor.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-05T16:30:42.144+0000",
                    "updated": "2018-03-05T16:30:42.144+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13142584/comment/16388395",
                    "id": "16388395",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy closed pull request #1701: ARROW-2261: [GLib] Improve memory management for GArrowBuffer data\nURL: https://github.com/apache/arrow/pull/1701\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/c_glib/arrow-glib/buffer.cpp b/c_glib/arrow-glib/buffer.cpp\nindex 4be8fed18..4dd9ce33a 100644\n--- a/c_glib/arrow-glib/buffer.cpp\n+++ b/c_glib/arrow-glib/buffer.cpp\n@@ -47,11 +47,13 @@ G_BEGIN_DECLS\n \n typedef struct GArrowBufferPrivate_ {\n   std::shared_ptr<arrow::Buffer> buffer;\n+  GBytes *data;\n } GArrowBufferPrivate;\n \n enum {\n   PROP_0,\n-  PROP_BUFFER\n+  PROP_BUFFER,\n+  PROP_DATA\n };\n \n G_DEFINE_TYPE_WITH_PRIVATE(GArrowBuffer, garrow_buffer, G_TYPE_OBJECT)\n@@ -59,6 +61,19 @@ G_DEFINE_TYPE_WITH_PRIVATE(GArrowBuffer, garrow_buffer, G_TYPE_OBJECT)\n #define GARROW_BUFFER_GET_PRIVATE(obj) \\\n   (G_TYPE_INSTANCE_GET_PRIVATE((obj), GARROW_TYPE_BUFFER, GArrowBufferPrivate))\n \n+static void\n+garrow_buffer_dispose(GObject *object)\n+{\n+  auto priv = GARROW_BUFFER_GET_PRIVATE(object);\n+\n+  if (priv->data) {\n+    g_bytes_unref(priv->data);\n+    priv->data = nullptr;\n+  }\n+\n+  G_OBJECT_CLASS(garrow_buffer_parent_class)->dispose(object);\n+}\n+\n static void\n garrow_buffer_finalize(GObject *object)\n {\n@@ -71,9 +86,9 @@ garrow_buffer_finalize(GObject *object)\n \n static void\n garrow_buffer_set_property(GObject *object,\n-                          guint prop_id,\n-                          const GValue *value,\n-                          GParamSpec *pspec)\n+                           guint prop_id,\n+                           const GValue *value,\n+                           GParamSpec *pspec)\n {\n   auto priv = GARROW_BUFFER_GET_PRIVATE(object);\n \n@@ -82,6 +97,9 @@ garrow_buffer_set_property(GObject *object,\n     priv->buffer =\n       *static_cast<std::shared_ptr<arrow::Buffer> *>(g_value_get_pointer(value));\n     break;\n+  case PROP_DATA:\n+    priv->data = static_cast<GBytes *>(g_value_dup_boxed(value));\n+    break;\n   default:\n     G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n     break;\n@@ -90,11 +108,16 @@ garrow_buffer_set_property(GObject *object,\n \n static void\n garrow_buffer_get_property(GObject *object,\n-                          guint prop_id,\n-                          GValue *value,\n-                          GParamSpec *pspec)\n+                           guint prop_id,\n+                           GValue *value,\n+                           GParamSpec *pspec)\n {\n+  auto priv = GARROW_BUFFER_GET_PRIVATE(object);\n+\n   switch (prop_id) {\n+  case PROP_DATA:\n+    g_value_set_boxed(value, priv->data);\n+    break;\n   default:\n     G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n     break;\n@@ -113,6 +136,7 @@ garrow_buffer_class_init(GArrowBufferClass *klass)\n \n   auto gobject_class = G_OBJECT_CLASS(klass);\n \n+  gobject_class->dispose      = garrow_buffer_dispose;\n   gobject_class->finalize     = garrow_buffer_finalize;\n   gobject_class->set_property = garrow_buffer_set_property;\n   gobject_class->get_property = garrow_buffer_get_property;\n@@ -123,6 +147,14 @@ garrow_buffer_class_init(GArrowBufferClass *klass)\n                               static_cast<GParamFlags>(G_PARAM_WRITABLE |\n                                                        G_PARAM_CONSTRUCT_ONLY));\n   g_object_class_install_property(gobject_class, PROP_BUFFER, spec);\n+\n+  spec = g_param_spec_boxed(\"data\",\n+                            \"Data\",\n+                            \"The raw data passed as GBytes *\",\n+                            G_TYPE_BYTES,\n+                            static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                     G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_DATA, spec);\n }\n \n /**\n@@ -141,7 +173,25 @@ garrow_buffer_new(const guint8 *data, gint64 size)\n {\n   auto arrow_buffer = std::make_shared<arrow::Buffer>(data, size);\n   return garrow_buffer_new_raw(&arrow_buffer);\n+}\n \n+/**\n+ * garrow_buffer_new_bytes:\n+ * @data: Data for the buffer.\n+ *\n+ * Returns: A newly created #GArrowBuffer.\n+ *\n+ * Since: 0.9.0\n+ */\n+GArrowBuffer *\n+garrow_buffer_new_bytes(GBytes *data)\n+{\n+  size_t data_size;\n+  auto raw_data = g_bytes_get_data(data, &data_size);\n+  auto arrow_buffer =\n+    std::make_shared<arrow::Buffer>(static_cast<const uint8_t *>(raw_data),\n+                                    data_size);\n+  return garrow_buffer_new_raw_bytes(&arrow_buffer, data);\n }\n \n /**\n@@ -226,6 +276,12 @@ garrow_buffer_get_capacity(GArrowBuffer *buffer)\n GBytes *\n garrow_buffer_get_data(GArrowBuffer *buffer)\n {\n+  auto priv = GARROW_BUFFER_GET_PRIVATE(buffer);\n+  if (priv->data) {\n+    g_bytes_ref(priv->data);\n+    return priv->data;\n+  }\n+\n   auto arrow_buffer = garrow_buffer_get_raw(buffer);\n   auto data = g_bytes_new_static(arrow_buffer->data(),\n                                  arrow_buffer->size());\n@@ -249,6 +305,13 @@ garrow_buffer_get_mutable_data(GArrowBuffer *buffer)\n   if (!arrow_buffer->is_mutable()) {\n     return NULL;\n   }\n+\n+  auto priv = GARROW_BUFFER_GET_PRIVATE(buffer);\n+  if (priv->data) {\n+    g_bytes_ref(priv->data);\n+    return priv->data;\n+  }\n+\n   return g_bytes_new_static(arrow_buffer->mutable_data(),\n                             arrow_buffer->size());\n }\n@@ -284,7 +347,8 @@ garrow_buffer_get_parent(GArrowBuffer *buffer)\n   auto arrow_parent_buffer = arrow_buffer->parent();\n \n   if (arrow_parent_buffer) {\n-    return garrow_buffer_new_raw(&arrow_parent_buffer);\n+    auto priv = GARROW_BUFFER_GET_PRIVATE(buffer);\n+    return garrow_buffer_new_raw_bytes(&arrow_parent_buffer, priv->data);\n   } else {\n     return NULL;\n   }\n@@ -338,7 +402,8 @@ garrow_buffer_slice(GArrowBuffer *buffer, gint64 offset, gint64 size)\n   auto arrow_buffer = std::make_shared<arrow::Buffer>(arrow_parent_buffer,\n                                                       offset,\n                                                       size);\n-  return garrow_buffer_new_raw(&arrow_buffer);\n+  auto priv = GARROW_BUFFER_GET_PRIVATE(buffer);\n+  return garrow_buffer_new_raw_bytes(&arrow_buffer, priv->data);\n }\n \n \n@@ -374,6 +439,26 @@ garrow_mutable_buffer_new(guint8 *data, gint64 size)\n   return garrow_mutable_buffer_new_raw(&arrow_buffer);\n }\n \n+/**\n+ * garrow_mutable_buffer_new_bytes:\n+ * @data: Data for the buffer.\n+ *\n+ * Returns: A newly created #GArrowMutableBuffer.\n+ *\n+ * Since: 0.9.0\n+ */\n+GArrowMutableBuffer *\n+garrow_mutable_buffer_new_bytes(GBytes *data)\n+{\n+  size_t data_size;\n+  auto raw_data = g_bytes_get_data(data, &data_size);\n+  auto mutable_raw_data = const_cast<gpointer>(raw_data);\n+  auto arrow_buffer =\n+    std::make_shared<arrow::MutableBuffer>(static_cast<uint8_t *>(mutable_raw_data),\n+                                           data_size);\n+  return garrow_mutable_buffer_new_raw_bytes(&arrow_buffer, data);\n+}\n+\n /**\n  * garrow_mutable_buffer_slice:\n  * @buffer: A #GArrowMutableBuffer.\n@@ -397,7 +482,8 @@ garrow_mutable_buffer_slice(GArrowMutableBuffer *buffer,\n     std::make_shared<arrow::MutableBuffer>(arrow_parent_buffer,\n                                            offset,\n                                            size);\n-  return garrow_mutable_buffer_new_raw(&arrow_buffer);\n+  auto priv = GARROW_BUFFER_GET_PRIVATE(buffer);\n+  return garrow_mutable_buffer_new_raw_bytes(&arrow_buffer, priv->data);\n }\n \n \n@@ -494,9 +580,17 @@ G_END_DECLS\n \n GArrowBuffer *\n garrow_buffer_new_raw(std::shared_ptr<arrow::Buffer> *arrow_buffer)\n+{\n+  return garrow_buffer_new_raw_bytes(arrow_buffer, nullptr);\n+}\n+\n+GArrowBuffer *\n+garrow_buffer_new_raw_bytes(std::shared_ptr<arrow::Buffer> *arrow_buffer,\n+                            GBytes *data)\n {\n   auto buffer = GARROW_BUFFER(g_object_new(GARROW_TYPE_BUFFER,\n                                            \"buffer\", arrow_buffer,\n+                                           \"data\", data,\n                                            NULL));\n   return buffer;\n }\n@@ -513,9 +607,17 @@ garrow_buffer_get_raw(GArrowBuffer *buffer)\n \n GArrowMutableBuffer *\n garrow_mutable_buffer_new_raw(std::shared_ptr<arrow::MutableBuffer> *arrow_buffer)\n+{\n+  return garrow_mutable_buffer_new_raw_bytes(arrow_buffer, nullptr);\n+}\n+\n+GArrowMutableBuffer *\n+garrow_mutable_buffer_new_raw_bytes(std::shared_ptr<arrow::MutableBuffer> *arrow_buffer,\n+                                    GBytes *data)\n {\n   auto buffer = GARROW_MUTABLE_BUFFER(g_object_new(GARROW_TYPE_MUTABLE_BUFFER,\n                                                    \"buffer\", arrow_buffer,\n+                                                   \"data\", data,\n                                                    NULL));\n   return buffer;\n }\ndiff --git a/c_glib/arrow-glib/buffer.h b/c_glib/arrow-glib/buffer.h\nindex 300bb4f4e..50debcc05 100644\n--- a/c_glib/arrow-glib/buffer.h\n+++ b/c_glib/arrow-glib/buffer.h\n@@ -36,6 +36,7 @@ struct _GArrowBufferClass\n \n GArrowBuffer  *garrow_buffer_new          (const guint8 *data,\n                                            gint64 size);\n+GArrowBuffer  *garrow_buffer_new_bytes    (GBytes *data);\n gboolean       garrow_buffer_equal        (GArrowBuffer *buffer,\n                                            GArrowBuffer *other_buffer);\n gboolean       garrow_buffer_equal_n_bytes(GArrowBuffer *buffer,\n@@ -70,6 +71,7 @@ struct _GArrowMutableBufferClass\n \n GArrowMutableBuffer *garrow_mutable_buffer_new  (guint8 *data,\n                                                  gint64 size);\n+GArrowMutableBuffer *garrow_mutable_buffer_new_bytes(GBytes *data);\n GArrowMutableBuffer *garrow_mutable_buffer_slice(GArrowMutableBuffer *buffer,\n                                                  gint64 offset,\n                                                  gint64 size);\ndiff --git a/c_glib/arrow-glib/buffer.hpp b/c_glib/arrow-glib/buffer.hpp\nindex d1664b11b..3dd37945a 100644\n--- a/c_glib/arrow-glib/buffer.hpp\n+++ b/c_glib/arrow-glib/buffer.hpp\n@@ -24,7 +24,11 @@\n #include <arrow-glib/buffer.h>\n \n GArrowBuffer *garrow_buffer_new_raw(std::shared_ptr<arrow::Buffer> *arrow_buffer);\n+GArrowBuffer *garrow_buffer_new_raw_bytes(std::shared_ptr<arrow::Buffer> *arrow_buffer,\n+                                          GBytes *data);\n std::shared_ptr<arrow::Buffer> garrow_buffer_get_raw(GArrowBuffer *buffer);\n \n GArrowMutableBuffer *garrow_mutable_buffer_new_raw(std::shared_ptr<arrow::MutableBuffer> *arrow_buffer);\n+GArrowMutableBuffer *garrow_mutable_buffer_new_raw_bytes(std::shared_ptr<arrow::MutableBuffer> *arrow_buffer,\n+                                                         GBytes *data);\n GArrowPoolBuffer *garrow_pool_buffer_new_raw(std::shared_ptr<arrow::PoolBuffer> *arrow_buffer);\ndiff --git a/c_glib/arrow-glib/input-stream.cpp b/c_glib/arrow-glib/input-stream.cpp\nindex f602e5f7e..c643ad2a7 100644\n--- a/c_glib/arrow-glib/input-stream.cpp\n+++ b/c_glib/arrow-glib/input-stream.cpp\n@@ -282,16 +282,79 @@ garrow_seekable_input_stream_read_tensor(GArrowSeekableInputStream *input_stream\n                                        arrow_random_access_file.get(),\n                                        &arrow_tensor);\n   if (garrow_error_check(error, status, \"[seekable-input-stream][read-tensor]\")) {\n-    return garrow_tensor_new_raw(&arrow_tensor, nullptr);\n+    return garrow_tensor_new_raw(&arrow_tensor);\n   } else {\n     return NULL;\n   }\n }\n \n \n-G_DEFINE_TYPE(GArrowBufferInputStream,                       \\\n-              garrow_buffer_input_stream,                     \\\n-              GARROW_TYPE_SEEKABLE_INPUT_STREAM);\n+typedef struct GArrowBufferInputStreamPrivate_ {\n+  GArrowBuffer *buffer;\n+} GArrowBufferInputStreamPrivate;\n+\n+enum {\n+  PROP_0_,\n+  PROP_BUFFER\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowBufferInputStream,                     \\\n+                           garrow_buffer_input_stream,                  \\\n+                           GARROW_TYPE_SEEKABLE_INPUT_STREAM);\n+\n+#define GARROW_BUFFER_INPUT_STREAM_GET_PRIVATE(obj)                     \\\n+  (G_TYPE_INSTANCE_GET_PRIVATE((obj),                                   \\\n+                               GARROW_TYPE_BUFFER_INPUT_STREAM,         \\\n+                               GArrowBufferInputStreamPrivate))\n+\n+static void\n+garrow_buffer_input_stream_dispose(GObject *object)\n+{\n+  auto priv = GARROW_BUFFER_INPUT_STREAM_GET_PRIVATE(object);\n+\n+  if (priv->buffer) {\n+    g_object_unref(priv->buffer);\n+    priv->buffer = nullptr;\n+  }\n+\n+  G_OBJECT_CLASS(garrow_buffer_input_stream_parent_class)->dispose(object);\n+}\n+\n+static void\n+garrow_buffer_input_stream_set_property(GObject *object,\n+                                        guint prop_id,\n+                                        const GValue *value,\n+                                        GParamSpec *pspec)\n+{\n+  auto priv = GARROW_BUFFER_INPUT_STREAM_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_BUFFER:\n+    priv->buffer = GARROW_BUFFER(g_value_dup_object(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_buffer_input_stream_get_property(GObject *object,\n+                                        guint prop_id,\n+                                        GValue *value,\n+                                        GParamSpec *pspec)\n+{\n+  auto priv = GARROW_BUFFER_INPUT_STREAM_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_BUFFER:\n+    g_value_set_object(value, priv->buffer);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n \n static void\n garrow_buffer_input_stream_init(GArrowBufferInputStream *object)\n@@ -301,6 +364,21 @@ garrow_buffer_input_stream_init(GArrowBufferInputStream *object)\n static void\n garrow_buffer_input_stream_class_init(GArrowBufferInputStreamClass *klass)\n {\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->dispose      = garrow_buffer_input_stream_dispose;\n+  gobject_class->set_property = garrow_buffer_input_stream_set_property;\n+  gobject_class->get_property = garrow_buffer_input_stream_get_property;\n+\n+  spec = g_param_spec_object(\"buffer\",\n+                             \"Buffer\",\n+                             \"The data\",\n+                             GARROW_TYPE_BUFFER,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_BUFFER, spec);\n }\n \n /**\n@@ -315,18 +393,24 @@ garrow_buffer_input_stream_new(GArrowBuffer *buffer)\n   auto arrow_buffer = garrow_buffer_get_raw(buffer);\n   auto arrow_buffer_reader =\n     std::make_shared<arrow::io::BufferReader>(arrow_buffer);\n-  return garrow_buffer_input_stream_new_raw(&arrow_buffer_reader);\n+  return garrow_buffer_input_stream_new_raw_buffer(&arrow_buffer_reader, buffer);\n }\n \n /**\n  * garrow_buffer_input_stream_get_buffer:\n  * @input_stream: A #GArrowBufferInputStream.\n  *\n- * Returns: (transfer full): The data of the array as #GArrowBuffer.\n+ * Returns: (transfer full): The data of the stream as #GArrowBuffer.\n  */\n GArrowBuffer *\n garrow_buffer_input_stream_get_buffer(GArrowBufferInputStream *input_stream)\n {\n+  auto priv = GARROW_BUFFER_INPUT_STREAM_GET_PRIVATE(input_stream);\n+  if (priv->buffer) {\n+    g_object_ref(priv->buffer);\n+    return priv->buffer;\n+  }\n+\n   auto arrow_buffer_reader = garrow_buffer_input_stream_get_raw(input_stream);\n   auto arrow_buffer = arrow_buffer_reader->buffer();\n   return garrow_buffer_new_raw(&arrow_buffer);\n@@ -626,10 +710,18 @@ garrow_seekable_input_stream_get_raw(GArrowSeekableInputStream *seekable_input_s\n \n GArrowBufferInputStream *\n garrow_buffer_input_stream_new_raw(std::shared_ptr<arrow::io::BufferReader> *arrow_buffer_reader)\n+{\n+  return garrow_buffer_input_stream_new_raw_buffer(arrow_buffer_reader, nullptr);\n+}\n+\n+GArrowBufferInputStream *\n+garrow_buffer_input_stream_new_raw_buffer(std::shared_ptr<arrow::io::BufferReader> *arrow_buffer_reader,\n+                                          GArrowBuffer *buffer)\n {\n   auto buffer_input_stream =\n     GARROW_BUFFER_INPUT_STREAM(g_object_new(GARROW_TYPE_BUFFER_INPUT_STREAM,\n                                             \"input-stream\", arrow_buffer_reader,\n+                                            \"buffer\", buffer,\n                                             NULL));\n   return buffer_input_stream;\n }\ndiff --git a/c_glib/arrow-glib/input-stream.hpp b/c_glib/arrow-glib/input-stream.hpp\nindex 17d2bd924..1d835e80b 100644\n--- a/c_glib/arrow-glib/input-stream.hpp\n+++ b/c_glib/arrow-glib/input-stream.hpp\n@@ -31,6 +31,8 @@ std::shared_ptr<arrow::io::InputStream> garrow_input_stream_get_raw(GArrowInputS\n std::shared_ptr<arrow::io::RandomAccessFile> garrow_seekable_input_stream_get_raw(GArrowSeekableInputStream *input_stream);\n \n GArrowBufferInputStream *garrow_buffer_input_stream_new_raw(std::shared_ptr<arrow::io::BufferReader> *arrow_buffer_reader);\n+GArrowBufferInputStream *garrow_buffer_input_stream_new_raw_buffer(std::shared_ptr<arrow::io::BufferReader> *arrow_buffer_reader,\n+                                                                   GArrowBuffer *buffer);\n std::shared_ptr<arrow::io::BufferReader> garrow_buffer_input_stream_get_raw(GArrowBufferInputStream *input_stream);\n \n GArrowMemoryMappedInputStream *garrow_memory_mapped_input_stream_new_raw(std::shared_ptr<arrow::io::MemoryMappedFile> *arrow_memory_mapped_file);\ndiff --git a/c_glib/arrow-glib/tensor.cpp b/c_glib/arrow-glib/tensor.cpp\nindex 359831f67..e7d3c38f7 100644\n--- a/c_glib/arrow-glib/tensor.cpp\n+++ b/c_glib/arrow-glib/tensor.cpp\n@@ -198,7 +198,7 @@ garrow_tensor_new(GArrowDataType *data_type,\n                                     arrow_shape,\n                                     arrow_strides,\n                                     arrow_dimension_names);\n-  auto tensor = garrow_tensor_new_raw(&arrow_tensor, data);\n+  auto tensor = garrow_tensor_new_raw_buffer(&arrow_tensor, data);\n   return tensor;\n }\n \n@@ -436,8 +436,14 @@ garrow_tensor_is_column_major(GArrowTensor *tensor)\n G_END_DECLS\n \n GArrowTensor *\n-garrow_tensor_new_raw(std::shared_ptr<arrow::Tensor> *arrow_tensor,\n-                      GArrowBuffer *buffer)\n+garrow_tensor_new_raw(std::shared_ptr<arrow::Tensor> *arrow_tensor)\n+{\n+  return garrow_tensor_new_raw_buffer(arrow_tensor, nullptr);\n+}\n+\n+GArrowTensor *\n+garrow_tensor_new_raw_buffer(std::shared_ptr<arrow::Tensor> *arrow_tensor,\n+                             GArrowBuffer *buffer)\n {\n   auto tensor = GARROW_TENSOR(g_object_new(GARROW_TYPE_TENSOR,\n                                            \"tensor\", arrow_tensor,\ndiff --git a/c_glib/arrow-glib/tensor.hpp b/c_glib/arrow-glib/tensor.hpp\nindex 8e54e492a..c90dc6d4d 100644\n--- a/c_glib/arrow-glib/tensor.hpp\n+++ b/c_glib/arrow-glib/tensor.hpp\n@@ -23,6 +23,7 @@\n \n #include <arrow-glib/tensor.h>\n \n-GArrowTensor *garrow_tensor_new_raw(std::shared_ptr<arrow::Tensor> *arrow_tensor,\n-                                    GArrowBuffer *buffer);\n+GArrowTensor *garrow_tensor_new_raw(std::shared_ptr<arrow::Tensor> *arrow_tensor);\n+GArrowTensor *garrow_tensor_new_raw_buffer(std::shared_ptr<arrow::Tensor> *arrow_tensor,\n+                                           GArrowBuffer *buffer);\n std::shared_ptr<arrow::Tensor> garrow_tensor_get_raw(GArrowTensor *tensor);\ndiff --git a/c_glib/test/test-buffer.rb b/c_glib/test/test-buffer.rb\nindex 3b02df7ba..3b9a031ab 100644\n--- a/c_glib/test/test-buffer.rb\n+++ b/c_glib/test/test-buffer.rb\n@@ -23,6 +23,16 @@ def setup\n     @buffer = Arrow::Buffer.new(@data)\n   end\n \n+  def test_new_bytes\n+    bytes_data = GLib::Bytes.new(@data)\n+    buffer = Arrow::Buffer.new(bytes_data)\n+    if GLib.check_binding_version?(3, 2, 2)\n+      assert_equal(bytes_data.pointer, buffer.data.pointer)\n+    else\n+      assert_equal(@data, buffer.data.to_s)\n+    end\n+  end\n+\n   def test_equal\n     assert_equal(@buffer,\n                  Arrow::Buffer.new(@data.dup))\ndiff --git a/c_glib/test/test-mutable-buffer.rb b/c_glib/test/test-mutable-buffer.rb\nindex df62dcf1e..f370e6026 100644\n--- a/c_glib/test/test-mutable-buffer.rb\n+++ b/c_glib/test/test-mutable-buffer.rb\n@@ -21,6 +21,16 @@ def setup\n     @buffer = Arrow::MutableBuffer.new(@data)\n   end\n \n+  def test_new_bytes\n+    bytes_data = GLib::Bytes.new(@data)\n+    buffer = Arrow::MutableBuffer.new(bytes_data)\n+    if GLib.check_binding_version?(3, 2, 2)\n+      assert_equal(bytes_data.pointer, buffer.mutable_data.pointer)\n+    else\n+      assert_equal(@data, buffer.mutable_data.to_s)\n+    end\n+  end\n+\n   def test_mutable?\n     assert do\n       @buffer.mutable?\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-06T19:34:35.713+0000",
                    "updated": "2018-03-06T19:34:35.713+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13142584/comment/16388396",
                    "id": "16388396",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 1701\n[https://github.com/apache/arrow/pull/1701]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-03-06T19:34:37.655+0000",
                    "updated": "2018-03-06T19:34:37.655+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|i3qvnj:",
        "customfield_12314139": null
    }
}