{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13330614",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330614",
    "key": "ARROW-10164",
    "fields": {
        "parent": {
            "id": "13330541",
            "key": "ARROW-10159",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13330541",
            "fields": {
                "summary": "[Rust][DataFusion] Add support for Dictionary types in data fusion",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10164/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 20,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330614/worklog/495500",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb opened a new pull request #8345:\nURL: https://github.com/apache/arrow/pull/8345\n\n\n   NOTE: this builds on #8333 and https://github.com/apache/arrow/pull/8340\r\n   \r\n   This PR adds support to the rust compute kernal casting `DictionaryArray` to/from  `PrimitiveArray`/`StringArray`\r\n   \r\n   It does not include other types such as LargeString or Binary (though the code could be extended fairly easily following the same pattern) -- but my usecase doesn't need LargeString or Binary. \r\n   \r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-05T18:40:14.326+0000",
                    "updated": "2020-10-05T18:40:14.326+0000",
                    "started": "2020-10-05T18:40:14.325+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "495500",
                    "issueId": "13330614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330614/worklog/495501",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb closed pull request #8345:\nURL: https://github.com/apache/arrow/pull/8345\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-05T18:40:49.577+0000",
                    "updated": "2020-10-05T18:40:49.577+0000",
                    "started": "2020-10-05T18:40:49.577+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "495501",
                    "issueId": "13330614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330614/worklog/495502",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8345:\nURL: https://github.com/apache/arrow/pull/8345#issuecomment-703816290\n\n\n   Closing so I can make a draft PR. Sorry for noise\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-05T18:41:33.674+0000",
                    "updated": "2020-10-05T18:41:33.674+0000",
                    "started": "2020-10-05T18:41:33.674+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "495502",
                    "issueId": "13330614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330614/worklog/495503",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb opened a new pull request #8346:\nURL: https://github.com/apache/arrow/pull/8346\n\n\n   NOTE: this builds on #8333 and https://github.com/apache/arrow/pull/8340\r\n   \r\n   This PR adds support to the rust compute kernal casting `DictionaryArray` to/from  `PrimitiveArray`/`StringArray`\r\n   \r\n   It does not include other types such as LargeString or Binary (though the code could be extended fairly easily following the same pattern) -- but my usecase doesn't need LargeString or Binary. \r\n   \r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-05T18:43:38.835+0000",
                    "updated": "2020-10-05T18:43:38.835+0000",
                    "started": "2020-10-05T18:43:38.834+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "495503",
                    "issueId": "13330614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330614/worklog/495510",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8346:\nURL: https://github.com/apache/arrow/pull/8346#issuecomment-703824202\n\n\n   https://issues.apache.org/jira/browse/ARROW-10164\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-05T18:56:01.133+0000",
                    "updated": "2020-10-05T18:56:01.133+0000",
                    "started": "2020-10-05T18:56:01.133+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "495510",
                    "issueId": "13330614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330614/worklog/495969",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8346:\nURL: https://github.com/apache/arrow/pull/8346#discussion_r500409499\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/cast.rs\n##########\n@@ -755,10 +784,253 @@ where\n     Ok(b.finish())\n }\n \n+/// Attempts to cast an `ArrayDictionary` with index type K into\n+/// `to_type` for supported type.\n+///\n+/// K is the key type\n+fn dictionary_cast<K: ArrowDictionaryKeyType>(\n+    array: &ArrayRef,\n+    to_type: &DataType,\n+) -> Result<ArrayRef> {\n+    use DataType::*;\n+\n+    let dict_array = array\n+        .as_any()\n+        .downcast_ref::<DictionaryArray<K>>()\n+        .ok_or_else(|| {\n+            ArrowError::ComputeError(\n+                \"Internal Error: Cannot cast dictionary to DictionaryArray of expected type\".to_string(),\n+            )\n+        })?;\n+\n+    match to_type {\n+        Dictionary(to_index_type, to_value_type) => {\n+            let keys_array: ArrayRef = Arc::new(dict_array.keys_array());\n+            let values_array: ArrayRef = dict_array.values();\n+            let cast_keys = cast(&keys_array, to_index_type)?;\n+            let cast_values = cast(&values_array, to_value_type)?;\n+\n+            // Failure to cast keys (because they don't fit in the\n+            // target type) results in NULL values;\n+            if cast_keys.null_count() > keys_array.null_count() {\n+                return Err(ArrowError::ComputeError(format!(\n+                    \"Could not convert {} dictionary indexes from {:?} to {:?}\",\n+                    cast_keys.null_count() - keys_array.null_count(),\n+                    keys_array.data_type(),\n+                    to_index_type\n+                )));\n+            }\n+\n+            // keys are data, child_data is values (dictionary)\n+            let data = Arc::new(ArrayData::new(\n+                to_type.clone(),\n+                cast_keys.len(),\n+                Some(cast_keys.null_count()),\n+                cast_keys\n+                    .data()\n+                    .null_bitmap()\n+                    .clone()\n+                    .map(|bitmap| bitmap.bits),\n+                cast_keys.data().offset(),\n+                cast_keys.data().buffers().to_vec(),\n+                vec![cast_values.data()],\n+            ));\n+\n+            // create the appropriate array type\n+            let new_array: ArrayRef = match **to_index_type {\n+                Int8 => Arc::new(DictionaryArray::<Int8Type>::from(data)),\n+                Int16 => Arc::new(DictionaryArray::<Int16Type>::from(data)),\n+                Int32 => Arc::new(DictionaryArray::<Int32Type>::from(data)),\n+                Int64 => Arc::new(DictionaryArray::<Int64Type>::from(data)),\n+                UInt8 => Arc::new(DictionaryArray::<UInt8Type>::from(data)),\n+                UInt16 => Arc::new(DictionaryArray::<UInt16Type>::from(data)),\n+                UInt32 => Arc::new(DictionaryArray::<UInt32Type>::from(data)),\n+                UInt64 => Arc::new(DictionaryArray::<UInt64Type>::from(data)),\n+                _ => {\n+                    return Err(ArrowError::ComputeError(format!(\n+                        \"Unsupported type {:?} for dictionary index\",\n+                        to_index_type\n+                    )))\n+                }\n+            };\n+\n+            Ok(new_array)\n+        }\n+        // numeric types\n+        Int8 => unpack_dictionary_to_numeric::<K, Int8Type>(dict_array, to_type),\n+        Int16 => unpack_dictionary_to_numeric::<K, Int16Type>(dict_array, to_type),\n+        Int32 => unpack_dictionary_to_numeric::<K, Int32Type>(dict_array, to_type),\n+        Int64 => unpack_dictionary_to_numeric::<K, Int64Type>(dict_array, to_type),\n+        UInt8 => unpack_dictionary_to_numeric::<K, UInt8Type>(dict_array, to_type),\n+        UInt16 => unpack_dictionary_to_numeric::<K, UInt16Type>(dict_array, to_type),\n+        UInt32 => unpack_dictionary_to_numeric::<K, UInt32Type>(dict_array, to_type),\n+        UInt64 => unpack_dictionary_to_numeric::<K, UInt64Type>(dict_array, to_type),\n+        Utf8 => unpack_dictionary_to_string::<K>(dict_array),\n+        _ => Err(ArrowError::ComputeError(format!(\n+            \"Unsupported output type for dictionary conversion: {:?}\",\n+            to_type\n+        ))),\n+    }\n+}\n+\n+// Unpack the dictionary where the keys are of type <K> and the values\n+// are of type <V> into a primative array of type to_type\n+fn unpack_dictionary_to_numeric<K, V>(\n+    dict_array: &DictionaryArray<K>,\n+    to_type: &DataType,\n+) -> Result<ArrayRef>\n+where\n+    K: ArrowDictionaryKeyType,\n+    V: ArrowNumericType,\n+{\n+    // attempt to cast the dict values to the target type\n+    let cast_dict_values = cast(&dict_array.values(), to_type)?;\n+    let dict_values = cast_dict_values\n+        .as_any()\n+        .downcast_ref::<PrimitiveArray<V>>()\n+        .unwrap();\n+\n+    let mut b = PrimitiveBuilder::<V>::new(dict_array.len());\n+\n+    // copy each element one at a time\n+    for key in dict_array.keys() {\n\nReview comment:\n       Isn't it possible to use `arrow::compute::take(indices, values)`?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-06T15:51:04.854+0000",
                    "updated": "2020-10-06T15:51:04.854+0000",
                    "started": "2020-10-06T15:51:04.854+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "495969",
                    "issueId": "13330614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330614/worklog/495973",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8346:\nURL: https://github.com/apache/arrow/pull/8346#discussion_r500409499\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/cast.rs\n##########\n@@ -755,10 +784,253 @@ where\n     Ok(b.finish())\n }\n \n+/// Attempts to cast an `ArrayDictionary` with index type K into\n+/// `to_type` for supported type.\n+///\n+/// K is the key type\n+fn dictionary_cast<K: ArrowDictionaryKeyType>(\n+    array: &ArrayRef,\n+    to_type: &DataType,\n+) -> Result<ArrayRef> {\n+    use DataType::*;\n+\n+    let dict_array = array\n+        .as_any()\n+        .downcast_ref::<DictionaryArray<K>>()\n+        .ok_or_else(|| {\n+            ArrowError::ComputeError(\n+                \"Internal Error: Cannot cast dictionary to DictionaryArray of expected type\".to_string(),\n+            )\n+        })?;\n+\n+    match to_type {\n+        Dictionary(to_index_type, to_value_type) => {\n+            let keys_array: ArrayRef = Arc::new(dict_array.keys_array());\n+            let values_array: ArrayRef = dict_array.values();\n+            let cast_keys = cast(&keys_array, to_index_type)?;\n+            let cast_values = cast(&values_array, to_value_type)?;\n+\n+            // Failure to cast keys (because they don't fit in the\n+            // target type) results in NULL values;\n+            if cast_keys.null_count() > keys_array.null_count() {\n+                return Err(ArrowError::ComputeError(format!(\n+                    \"Could not convert {} dictionary indexes from {:?} to {:?}\",\n+                    cast_keys.null_count() - keys_array.null_count(),\n+                    keys_array.data_type(),\n+                    to_index_type\n+                )));\n+            }\n+\n+            // keys are data, child_data is values (dictionary)\n+            let data = Arc::new(ArrayData::new(\n+                to_type.clone(),\n+                cast_keys.len(),\n+                Some(cast_keys.null_count()),\n+                cast_keys\n+                    .data()\n+                    .null_bitmap()\n+                    .clone()\n+                    .map(|bitmap| bitmap.bits),\n+                cast_keys.data().offset(),\n+                cast_keys.data().buffers().to_vec(),\n+                vec![cast_values.data()],\n+            ));\n+\n+            // create the appropriate array type\n+            let new_array: ArrayRef = match **to_index_type {\n+                Int8 => Arc::new(DictionaryArray::<Int8Type>::from(data)),\n+                Int16 => Arc::new(DictionaryArray::<Int16Type>::from(data)),\n+                Int32 => Arc::new(DictionaryArray::<Int32Type>::from(data)),\n+                Int64 => Arc::new(DictionaryArray::<Int64Type>::from(data)),\n+                UInt8 => Arc::new(DictionaryArray::<UInt8Type>::from(data)),\n+                UInt16 => Arc::new(DictionaryArray::<UInt16Type>::from(data)),\n+                UInt32 => Arc::new(DictionaryArray::<UInt32Type>::from(data)),\n+                UInt64 => Arc::new(DictionaryArray::<UInt64Type>::from(data)),\n+                _ => {\n+                    return Err(ArrowError::ComputeError(format!(\n+                        \"Unsupported type {:?} for dictionary index\",\n+                        to_index_type\n+                    )))\n+                }\n+            };\n+\n+            Ok(new_array)\n+        }\n+        // numeric types\n+        Int8 => unpack_dictionary_to_numeric::<K, Int8Type>(dict_array, to_type),\n+        Int16 => unpack_dictionary_to_numeric::<K, Int16Type>(dict_array, to_type),\n+        Int32 => unpack_dictionary_to_numeric::<K, Int32Type>(dict_array, to_type),\n+        Int64 => unpack_dictionary_to_numeric::<K, Int64Type>(dict_array, to_type),\n+        UInt8 => unpack_dictionary_to_numeric::<K, UInt8Type>(dict_array, to_type),\n+        UInt16 => unpack_dictionary_to_numeric::<K, UInt16Type>(dict_array, to_type),\n+        UInt32 => unpack_dictionary_to_numeric::<K, UInt32Type>(dict_array, to_type),\n+        UInt64 => unpack_dictionary_to_numeric::<K, UInt64Type>(dict_array, to_type),\n+        Utf8 => unpack_dictionary_to_string::<K>(dict_array),\n+        _ => Err(ArrowError::ComputeError(format!(\n+            \"Unsupported output type for dictionary conversion: {:?}\",\n+            to_type\n+        ))),\n+    }\n+}\n+\n+// Unpack the dictionary where the keys are of type <K> and the values\n+// are of type <V> into a primative array of type to_type\n+fn unpack_dictionary_to_numeric<K, V>(\n+    dict_array: &DictionaryArray<K>,\n+    to_type: &DataType,\n+) -> Result<ArrayRef>\n+where\n+    K: ArrowDictionaryKeyType,\n+    V: ArrowNumericType,\n+{\n+    // attempt to cast the dict values to the target type\n+    let cast_dict_values = cast(&dict_array.values(), to_type)?;\n+    let dict_values = cast_dict_values\n+        .as_any()\n+        .downcast_ref::<PrimitiveArray<V>>()\n+        .unwrap();\n+\n+    let mut b = PrimitiveBuilder::<V>::new(dict_array.len());\n+\n+    // copy each element one at a time\n+    for key in dict_array.keys() {\n\nReview comment:\n       Isn't it possible to use `arrow::compute::take(indices, values)`? I think if you cast the indices to u32, you'd be able to. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-06T15:52:26.841+0000",
                    "updated": "2020-10-06T15:52:26.841+0000",
                    "started": "2020-10-06T15:52:26.840+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "495973",
                    "issueId": "13330614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330614/worklog/496784",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8346:\nURL: https://github.com/apache/arrow/pull/8346#discussion_r501187806\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/cast.rs\n##########\n@@ -740,10 +769,203 @@ where\n         .collect()\n }\n \n+/// Attempts to cast an `ArrayDictionary` with index type K into\n+/// `to_type` for supported types.\n+///\n+/// K is the key type\n+fn dictionary_cast<K: ArrowDictionaryKeyType>(\n+    array: &ArrayRef,\n+    to_type: &DataType,\n+) -> Result<ArrayRef> {\n+    use DataType::*;\n+\n+    match to_type {\n+        Dictionary(to_index_type, to_value_type) => {\n+            let dict_array = array\n+                .as_any()\n+                .downcast_ref::<DictionaryArray<K>>()\n+                .ok_or_else(|| {\n+                    ArrowError::ComputeError(\n+                        \"Internal Error: Cannot cast dictionary to DictionaryArray of expected type\".to_string(),\n+                    )\n+                })?;\n+\n+            let keys_array: ArrayRef = Arc::new(dict_array.keys_array());\n+            let values_array: ArrayRef = dict_array.values();\n+            let cast_keys = cast(&keys_array, to_index_type)?;\n+            let cast_values = cast(&values_array, to_value_type)?;\n+\n+            // Failure to cast keys (because they don't fit in the\n+            // target type) results in NULL values;\n+            if cast_keys.null_count() > keys_array.null_count() {\n+                return Err(ArrowError::ComputeError(format!(\n+                    \"Could not convert {} dictionary indexes from {:?} to {:?}\",\n+                    cast_keys.null_count() - keys_array.null_count(),\n+                    keys_array.data_type(),\n+                    to_index_type\n+                )));\n+            }\n+\n+            // keys are data, child_data is values (dictionary)\n+            let data = Arc::new(ArrayData::new(\n+                to_type.clone(),\n+                cast_keys.len(),\n+                Some(cast_keys.null_count()),\n+                cast_keys\n+                    .data()\n+                    .null_bitmap()\n+                    .clone()\n+                    .map(|bitmap| bitmap.bits),\n+                cast_keys.data().offset(),\n+                cast_keys.data().buffers().to_vec(),\n+                vec![cast_values.data()],\n+            ));\n+\n+            // create the appropriate array type\n+            let new_array: ArrayRef = match **to_index_type {\n+                Int8 => Arc::new(DictionaryArray::<Int8Type>::from(data)),\n+                Int16 => Arc::new(DictionaryArray::<Int16Type>::from(data)),\n+                Int32 => Arc::new(DictionaryArray::<Int32Type>::from(data)),\n+                Int64 => Arc::new(DictionaryArray::<Int64Type>::from(data)),\n+                UInt8 => Arc::new(DictionaryArray::<UInt8Type>::from(data)),\n+                UInt16 => Arc::new(DictionaryArray::<UInt16Type>::from(data)),\n+                UInt32 => Arc::new(DictionaryArray::<UInt32Type>::from(data)),\n+                UInt64 => Arc::new(DictionaryArray::<UInt64Type>::from(data)),\n+                _ => {\n+                    return Err(ArrowError::ComputeError(format!(\n+                        \"Unsupported type {:?} for dictionary index\",\n+                        to_index_type\n+                    )))\n+                }\n+            };\n+\n+            Ok(new_array)\n+        }\n+        _ => unpack_dictionary::<K>(array, to_type),\n+    }\n+}\n+\n+// Unpack a dictionary where the keys are of type <K> into a flattened array of type to_type\n+fn unpack_dictionary<K>(array: &ArrayRef, to_type: &DataType) -> Result<ArrayRef>\n\nReview comment:\n       This code uses the `take` kernel, as suggested by @nevi-me. That means both less code and support for unpacking a larger range of datatype (any type that the dictionary can be unpacked to). \ud83d\udc4d \ud83d\udc4d \n\n##########\nFile path: rust/arrow/src/compute/kernels/cast.rs\n##########\n@@ -740,10 +769,203 @@ where\n         .collect()\n }\n \n+/// Attempts to cast an `ArrayDictionary` with index type K into\n+/// `to_type` for supported types.\n+///\n+/// K is the key type\n+fn dictionary_cast<K: ArrowDictionaryKeyType>(\n+    array: &ArrayRef,\n+    to_type: &DataType,\n+) -> Result<ArrayRef> {\n+    use DataType::*;\n+\n+    match to_type {\n+        Dictionary(to_index_type, to_value_type) => {\n+            let dict_array = array\n+                .as_any()\n+                .downcast_ref::<DictionaryArray<K>>()\n+                .ok_or_else(|| {\n+                    ArrowError::ComputeError(\n+                        \"Internal Error: Cannot cast dictionary to DictionaryArray of expected type\".to_string(),\n+                    )\n+                })?;\n+\n+            let keys_array: ArrayRef = Arc::new(dict_array.keys_array());\n+            let values_array: ArrayRef = dict_array.values();\n+            let cast_keys = cast(&keys_array, to_index_type)?;\n+            let cast_values = cast(&values_array, to_value_type)?;\n+\n+            // Failure to cast keys (because they don't fit in the\n+            // target type) results in NULL values;\n+            if cast_keys.null_count() > keys_array.null_count() {\n+                return Err(ArrowError::ComputeError(format!(\n+                    \"Could not convert {} dictionary indexes from {:?} to {:?}\",\n+                    cast_keys.null_count() - keys_array.null_count(),\n+                    keys_array.data_type(),\n+                    to_index_type\n+                )));\n+            }\n+\n+            // keys are data, child_data is values (dictionary)\n+            let data = Arc::new(ArrayData::new(\n+                to_type.clone(),\n+                cast_keys.len(),\n+                Some(cast_keys.null_count()),\n+                cast_keys\n+                    .data()\n+                    .null_bitmap()\n+                    .clone()\n+                    .map(|bitmap| bitmap.bits),\n+                cast_keys.data().offset(),\n+                cast_keys.data().buffers().to_vec(),\n+                vec![cast_values.data()],\n+            ));\n+\n+            // create the appropriate array type\n+            let new_array: ArrayRef = match **to_index_type {\n+                Int8 => Arc::new(DictionaryArray::<Int8Type>::from(data)),\n+                Int16 => Arc::new(DictionaryArray::<Int16Type>::from(data)),\n+                Int32 => Arc::new(DictionaryArray::<Int32Type>::from(data)),\n+                Int64 => Arc::new(DictionaryArray::<Int64Type>::from(data)),\n+                UInt8 => Arc::new(DictionaryArray::<UInt8Type>::from(data)),\n+                UInt16 => Arc::new(DictionaryArray::<UInt16Type>::from(data)),\n+                UInt32 => Arc::new(DictionaryArray::<UInt32Type>::from(data)),\n+                UInt64 => Arc::new(DictionaryArray::<UInt64Type>::from(data)),\n+                _ => {\n+                    return Err(ArrowError::ComputeError(format!(\n+                        \"Unsupported type {:?} for dictionary index\",\n+                        to_index_type\n+                    )))\n+                }\n+            };\n+\n+            Ok(new_array)\n+        }\n+        _ => unpack_dictionary::<K>(array, to_type),\n+    }\n+}\n+\n+// Unpack a dictionary where the keys are of type <K> into a flattened array of type to_type\n+fn unpack_dictionary<K>(array: &ArrayRef, to_type: &DataType) -> Result<ArrayRef>\n+where\n+    K: ArrowDictionaryKeyType,\n+{\n+    let dict_array = array\n+        .as_any()\n+        .downcast_ref::<DictionaryArray<K>>()\n+        .ok_or_else(|| {\n+            ArrowError::ComputeError(\n+                \"Internal Error: Cannot cast dictionary to DictionaryArray of expected type\".to_string(),\n+            )\n+        })?;\n+\n+    // attempt to cast the dict values to the target type\n+    // use the take kernel to expand out the dictionary\n+    let cast_dict_values = cast(&dict_array.values(), to_type)?;\n+\n+    // Note take requires first casting the indicies to u32\n+    let keys_array: ArrayRef = Arc::new(dict_array.keys_array());\n+    let indicies = cast(&keys_array, &DataType::UInt32)?;\n+    let u32_indicies =\n+        indicies\n+            .as_any()\n+            .downcast_ref::<UInt32Array>()\n+            .ok_or_else(|| {\n+                ArrowError::ComputeError(\n+                    \"Internal Error: Cannot cast dict indicies to UInt32\".to_string(),\n+                )\n+            })?;\n+\n+    take(&cast_dict_values, u32_indicies, None)\n+}\n+\n+/// Attempts to encode an array into an `ArrayDictionary` with index\n+/// type K and value (dictionary) type value_type\n+///\n+/// K is the key type\n+fn cast_to_dictionary<K: ArrowDictionaryKeyType>(\n+    array: &ArrayRef,\n+    dict_value_type: &DataType,\n+) -> Result<ArrayRef> {\n+    use DataType::*;\n+\n+    match *dict_value_type {\n+        Int8 => pack_numeric_to_dictionary::<K, Int8Type>(array, dict_value_type),\n+        Int16 => pack_numeric_to_dictionary::<K, Int16Type>(array, dict_value_type),\n+        Int32 => pack_numeric_to_dictionary::<K, Int32Type>(array, dict_value_type),\n+        Int64 => pack_numeric_to_dictionary::<K, Int64Type>(array, dict_value_type),\n+        UInt8 => pack_numeric_to_dictionary::<K, UInt8Type>(array, dict_value_type),\n+        UInt16 => pack_numeric_to_dictionary::<K, UInt16Type>(array, dict_value_type),\n+        UInt32 => pack_numeric_to_dictionary::<K, UInt32Type>(array, dict_value_type),\n+        UInt64 => pack_numeric_to_dictionary::<K, UInt64Type>(array, dict_value_type),\n+        Utf8 => pack_string_to_dictionary::<K>(array),\n+        _ => Err(ArrowError::ComputeError(format!(\n+            \"Internal Error: Unsupported output type for dictionary packing: {:?}\",\n+            dict_value_type\n+        ))),\n+    }\n+}\n+\n+// Packs the data from the primitive array of type <V> to a\n+// DictionaryArray with keys of type K and values of value_type V\n+fn pack_numeric_to_dictionary<K, V>(\n+    array: &ArrayRef,\n+    dict_value_type: &DataType,\n+) -> Result<ArrayRef>\n+where\n+    K: ArrowDictionaryKeyType,\n+    V: ArrowNumericType,\n+{\n+    // attempt to cast the source array values to the target value type (the dictionary values type)\n+    let cast_values = cast(array, &dict_value_type)?;\n+    let values = cast_values\n+        .as_any()\n+        .downcast_ref::<PrimitiveArray<V>>()\n+        .unwrap();\n+\n+    let keys_builder = PrimitiveBuilder::<K>::new(values.len());\n+    let values_builder = PrimitiveBuilder::<V>::new(values.len());\n+    let mut b = PrimitiveDictionaryBuilder::new(keys_builder, values_builder);\n+\n+    // copy each element one at a time\n+    for i in 0..values.len() {\n+        if values.is_null(i) {\n+            b.append_null()?;\n+        } else {\n+            b.append(values.value(i))?;\n+        }\n+    }\n+    Ok(Arc::new(b.finish()))\n+}\n+\n+// Packs the data as a StringDictionaryArray, if possible, with the\n+// key types of K\n+fn pack_string_to_dictionary<K>(array: &ArrayRef) -> Result<ArrayRef>\n\nReview comment:\n       Maybe there is a fancier way to implement packing for arrays other than `PrimitiveType` but I didn't see anything obvious (maybe a `macro!`?)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-07T17:31:42.093+0000",
                    "updated": "2020-10-07T17:31:42.093+0000",
                    "started": "2020-10-07T17:31:42.093+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "496784",
                    "issueId": "13330614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330614/worklog/496789",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8346:\nURL: https://github.com/apache/arrow/pull/8346#issuecomment-705089990\n\n\n   @nevi-me I think this one is now ready for reveiw\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-07T17:39:30.911+0000",
                    "updated": "2020-10-07T17:39:30.911+0000",
                    "started": "2020-10-07T17:39:30.911+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "496789",
                    "issueId": "13330614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330614/worklog/496790",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb edited a comment on pull request #8346:\nURL: https://github.com/apache/arrow/pull/8346#issuecomment-705089990\n\n\n   @nevi-me I think this one is now ready for review, if you have the time\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-07T17:39:43.944+0000",
                    "updated": "2020-10-07T17:39:43.944+0000",
                    "started": "2020-10-07T17:39:43.944+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "496790",
                    "issueId": "13330614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330614/worklog/496830",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8346:\nURL: https://github.com/apache/arrow/pull/8346#discussion_r501224081\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/cast.rs\n##########\n@@ -740,10 +769,203 @@ where\n         .collect()\n }\n \n+/// Attempts to cast an `ArrayDictionary` with index type K into\n+/// `to_type` for supported types.\n+///\n+/// K is the key type\n+fn dictionary_cast<K: ArrowDictionaryKeyType>(\n+    array: &ArrayRef,\n+    to_type: &DataType,\n+) -> Result<ArrayRef> {\n+    use DataType::*;\n+\n+    match to_type {\n+        Dictionary(to_index_type, to_value_type) => {\n+            let dict_array = array\n+                .as_any()\n+                .downcast_ref::<DictionaryArray<K>>()\n+                .ok_or_else(|| {\n+                    ArrowError::ComputeError(\n+                        \"Internal Error: Cannot cast dictionary to DictionaryArray of expected type\".to_string(),\n+                    )\n+                })?;\n+\n+            let keys_array: ArrayRef = Arc::new(dict_array.keys_array());\n+            let values_array: ArrayRef = dict_array.values();\n+            let cast_keys = cast(&keys_array, to_index_type)?;\n+            let cast_values = cast(&values_array, to_value_type)?;\n+\n+            // Failure to cast keys (because they don't fit in the\n+            // target type) results in NULL values;\n+            if cast_keys.null_count() > keys_array.null_count() {\n+                return Err(ArrowError::ComputeError(format!(\n+                    \"Could not convert {} dictionary indexes from {:?} to {:?}\",\n+                    cast_keys.null_count() - keys_array.null_count(),\n+                    keys_array.data_type(),\n+                    to_index_type\n+                )));\n+            }\n+\n+            // keys are data, child_data is values (dictionary)\n+            let data = Arc::new(ArrayData::new(\n+                to_type.clone(),\n+                cast_keys.len(),\n+                Some(cast_keys.null_count()),\n+                cast_keys\n+                    .data()\n+                    .null_bitmap()\n+                    .clone()\n+                    .map(|bitmap| bitmap.bits),\n+                cast_keys.data().offset(),\n+                cast_keys.data().buffers().to_vec(),\n+                vec![cast_values.data()],\n+            ));\n+\n+            // create the appropriate array type\n+            let new_array: ArrayRef = match **to_index_type {\n+                Int8 => Arc::new(DictionaryArray::<Int8Type>::from(data)),\n+                Int16 => Arc::new(DictionaryArray::<Int16Type>::from(data)),\n+                Int32 => Arc::new(DictionaryArray::<Int32Type>::from(data)),\n+                Int64 => Arc::new(DictionaryArray::<Int64Type>::from(data)),\n+                UInt8 => Arc::new(DictionaryArray::<UInt8Type>::from(data)),\n+                UInt16 => Arc::new(DictionaryArray::<UInt16Type>::from(data)),\n+                UInt32 => Arc::new(DictionaryArray::<UInt32Type>::from(data)),\n+                UInt64 => Arc::new(DictionaryArray::<UInt64Type>::from(data)),\n+                _ => {\n+                    return Err(ArrowError::ComputeError(format!(\n+                        \"Unsupported type {:?} for dictionary index\",\n+                        to_index_type\n+                    )))\n+                }\n+            };\n+\n+            Ok(new_array)\n+        }\n+        _ => unpack_dictionary::<K>(array, to_type),\n+    }\n+}\n+\n+// Unpack a dictionary where the keys are of type <K> into a flattened array of type to_type\n+fn unpack_dictionary<K>(array: &ArrayRef, to_type: &DataType) -> Result<ArrayRef>\n+where\n+    K: ArrowDictionaryKeyType,\n+{\n+    let dict_array = array\n+        .as_any()\n+        .downcast_ref::<DictionaryArray<K>>()\n+        .ok_or_else(|| {\n+            ArrowError::ComputeError(\n+                \"Internal Error: Cannot cast dictionary to DictionaryArray of expected type\".to_string(),\n+            )\n+        })?;\n+\n+    // attempt to cast the dict values to the target type\n+    // use the take kernel to expand out the dictionary\n+    let cast_dict_values = cast(&dict_array.values(), to_type)?;\n+\n+    // Note take requires first casting the indicies to u32\n+    let keys_array: ArrayRef = Arc::new(dict_array.keys_array());\n+    let indicies = cast(&keys_array, &DataType::UInt32)?;\n+    let u32_indicies =\n+        indicies\n+            .as_any()\n+            .downcast_ref::<UInt32Array>()\n+            .ok_or_else(|| {\n+                ArrowError::ComputeError(\n+                    \"Internal Error: Cannot cast dict indicies to UInt32\".to_string(),\n+                )\n+            })?;\n+\n+    take(&cast_dict_values, u32_indicies, None)\n+}\n+\n+/// Attempts to encode an array into an `ArrayDictionary` with index\n+/// type K and value (dictionary) type value_type\n+///\n+/// K is the key type\n+fn cast_to_dictionary<K: ArrowDictionaryKeyType>(\n+    array: &ArrayRef,\n+    dict_value_type: &DataType,\n+) -> Result<ArrayRef> {\n+    use DataType::*;\n+\n+    match *dict_value_type {\n+        Int8 => pack_numeric_to_dictionary::<K, Int8Type>(array, dict_value_type),\n+        Int16 => pack_numeric_to_dictionary::<K, Int16Type>(array, dict_value_type),\n+        Int32 => pack_numeric_to_dictionary::<K, Int32Type>(array, dict_value_type),\n+        Int64 => pack_numeric_to_dictionary::<K, Int64Type>(array, dict_value_type),\n+        UInt8 => pack_numeric_to_dictionary::<K, UInt8Type>(array, dict_value_type),\n+        UInt16 => pack_numeric_to_dictionary::<K, UInt16Type>(array, dict_value_type),\n+        UInt32 => pack_numeric_to_dictionary::<K, UInt32Type>(array, dict_value_type),\n+        UInt64 => pack_numeric_to_dictionary::<K, UInt64Type>(array, dict_value_type),\n+        Utf8 => pack_string_to_dictionary::<K>(array),\n+        _ => Err(ArrowError::ComputeError(format!(\n+            \"Internal Error: Unsupported output type for dictionary packing: {:?}\",\n+            dict_value_type\n+        ))),\n+    }\n+}\n+\n+// Packs the data from the primitive array of type <V> to a\n+// DictionaryArray with keys of type K and values of value_type V\n+fn pack_numeric_to_dictionary<K, V>(\n+    array: &ArrayRef,\n+    dict_value_type: &DataType,\n+) -> Result<ArrayRef>\n+where\n+    K: ArrowDictionaryKeyType,\n+    V: ArrowNumericType,\n+{\n+    // attempt to cast the source array values to the target value type (the dictionary values type)\n+    let cast_values = cast(array, &dict_value_type)?;\n+    let values = cast_values\n+        .as_any()\n+        .downcast_ref::<PrimitiveArray<V>>()\n+        .unwrap();\n+\n+    let keys_builder = PrimitiveBuilder::<K>::new(values.len());\n+    let values_builder = PrimitiveBuilder::<V>::new(values.len());\n+    let mut b = PrimitiveDictionaryBuilder::new(keys_builder, values_builder);\n+\n+    // copy each element one at a time\n+    for i in 0..values.len() {\n+        if values.is_null(i) {\n+            b.append_null()?;\n+        } else {\n+            b.append(values.value(i))?;\n+        }\n+    }\n+    Ok(Arc::new(b.finish()))\n+}\n+\n+// Packs the data as a StringDictionaryArray, if possible, with the\n+// key types of K\n+fn pack_string_to_dictionary<K>(array: &ArrayRef) -> Result<ArrayRef>\n\nReview comment:\n       We can look at it in follow-ups\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-07T18:27:29.390+0000",
                    "updated": "2020-10-07T18:27:29.390+0000",
                    "started": "2020-10-07T18:27:29.390+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "496830",
                    "issueId": "13330614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330614/worklog/496909",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8346:\nURL: https://github.com/apache/arrow/pull/8346#issuecomment-705163232\n\n\n   Rebased as I had some CI failures -- hoping to get a green run\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-07T20:02:41.787+0000",
                    "updated": "2020-10-07T20:02:41.787+0000",
                    "started": "2020-10-07T20:02:41.787+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "496909",
                    "issueId": "13330614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330614/worklog/496947",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8346:\nURL: https://github.com/apache/arrow/pull/8346#issuecomment-705206173\n\n\n   \ud83e\udd14 so the 'pretty-print' feature is not enabled by default for arrow and thus I can't use it in the tests. I put in a hack (copy/paste of the pretty printing) in https://github.com/apache/arrow/pull/8346/commits/9f8b9ba11e9523a19ffc6449ac7a3b915b933ef7 but I am not super happy with that.\r\n   \r\n   @nevi-me  do you by any chance have any other suggestions?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-07T21:33:46.706+0000",
                    "updated": "2020-10-07T21:33:46.706+0000",
                    "started": "2020-10-07T21:33:46.706+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "496947",
                    "issueId": "13330614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330614/worklog/497238",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8346:\nURL: https://github.com/apache/arrow/pull/8346#issuecomment-705497069\n\n\n   > pretty-print' feature is not enabled by default for arrow and thus I can't use it in the tests. \r\n   \r\n   I thought about this last night and came up with a better proposal: https://github.com/apache/arrow/pull/8397\r\n   \r\n   If that PR is merged i I can remove https://github.com/apache/arrow/commit/9f8b9ba11e9523a19ffc6449ac7a3b915b933ef7 from this PR. Or alternately we can merge this PR and I'll remove the extra copy in #8397 \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-08T11:05:36.111+0000",
                    "updated": "2020-10-08T11:05:36.111+0000",
                    "started": "2020-10-08T11:05:36.111+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497238",
                    "issueId": "13330614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330614/worklog/497285",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #8346:\nURL: https://github.com/apache/arrow/pull/8346#issuecomment-705532225\n\n\n   > \ud83e\udd14 so the 'pretty-print' feature is not enabled by default for arrow and thus I can't use it in the tests. I put in a hack (copy/paste of the pretty printing) in [9f8b9ba](https://github.com/apache/arrow/commit/9f8b9ba11e9523a19ffc6449ac7a3b915b933ef7) but I am not super happy with that.\r\n   > \r\n   > @nevi-me do you by any chance have any other suggestions?\r\n   \r\n   Apologies for the delay @alamb. I remember when I started working on Arrow, stringy comparisons were discouraged at the time because you could have arrays that end up having the same string representation, but have data differences which might not get caught.\r\n   This is also important for integration tests.\r\n   \r\n   I'm on the fence, you could enable that assertion only on the `pretty` feature?\r\n   \r\n   Perhaps other commiters will have a differing opinion (@sunchao @jorgecarleitao @paddyhoran @andygrove).\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-08T12:23:44.694+0000",
                    "updated": "2020-10-08T12:23:44.694+0000",
                    "started": "2020-10-08T12:23:44.694+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497285",
                    "issueId": "13330614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330614/worklog/497402",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8346:\nURL: https://github.com/apache/arrow/pull/8346#issuecomment-705636603\n\n\n   I am rebasing to pick up https://github.com/apache/arrow/commit/4bbb74713c6883e8523eeeb5ac80a1e1f8521674 -- note however, that the tests in this PR use string comparisons (not arrow struct comparisons). \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-08T15:11:43.743+0000",
                    "updated": "2020-10-08T15:11:43.743+0000",
                    "started": "2020-10-08T15:11:43.742+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497402",
                    "issueId": "13330614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330614/worklog/497661",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove closed pull request #8346:\nURL: https://github.com/apache/arrow/pull/8346\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-08T23:47:53.447+0000",
                    "updated": "2020-10-08T23:47:53.447+0000",
                    "started": "2020-10-08T23:47:53.446+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497661",
                    "issueId": "13330614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330614/worklog/498074",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #8346:\nURL: https://github.com/apache/arrow/pull/8346#issuecomment-705532225\n\n\n   > \ud83e\udd14 so the 'pretty-print' feature is not enabled by default for arrow and thus I can't use it in the tests. I put in a hack (copy/paste of the pretty printing) in [9f8b9ba](https://github.com/apache/arrow/commit/9f8b9ba11e9523a19ffc6449ac7a3b915b933ef7) but I am not super happy with that.\r\n   > \r\n   > @nevi-me do you by any chance have any other suggestions?\r\n   \r\n   Apologies for the delay @alamb. I remember when I started working on Arrow, stringy comparisons were discouraged at the time because you could have arrays that end up having the same string representation, but have data differences which might not get caught.\r\n   This is also important for integration tests.\r\n   \r\n   I'm on the fence, you could enable that assertion only on the `pretty` feature?\r\n   \r\n   Perhaps other commiters will have a differing opinion (@sunchao @jorgecarleitao @paddyhoran @andygrove).\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T13:37:32.255+0000",
                    "updated": "2020-10-09T13:37:32.255+0000",
                    "started": "2020-10-09T13:37:32.254+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498074",
                    "issueId": "13330614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330614/worklog/498370",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8346:\nURL: https://github.com/apache/arrow/pull/8346#issuecomment-705497069\n\n\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T14:01:35.297+0000",
                    "updated": "2020-10-09T14:01:35.297+0000",
                    "started": "2020-10-09T14:01:35.297+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498370",
                    "issueId": "13330614"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330614/worklog/498516",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove closed pull request #8346:\nURL: https://github.com/apache/arrow/pull/8346\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T14:13:29.736+0000",
                    "updated": "2020-10-09T14:13:29.736+0000",
                    "started": "2020-10-09T14:13:29.736+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498516",
                    "issueId": "13330614"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 12000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@705a564b[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@13024485[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b2905e6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5a8e446a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1845b517[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7ea43594[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6db11993[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@45b4bd5b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@70ec55f7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2f3bd6eb[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4a232f1e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2a9d1d64[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12000,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Oct 08 23:47:47 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-10-08T23:47:46.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10164/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-10-02T18:05:17.000+0000",
        "updated": "2020-10-09T14:13:30.000+0000",
        "timeoriginalestimate": null,
        "description": "This ticket tracks the work to support casting to/from DictionaryArray's, (my usecase is DictionaryArray's with a Utf8 dictionary). \r\n\r\nThere is prototype work on https://github.com/alamb/arrow/tree/alamb/datafusion-string-dictionary",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Add support for DictionaryArray types to cast kernels",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13330614/comment/17210526",
                    "id": "17210526",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 8346\n[https://github.com/apache/arrow/pull/8346]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-10-08T23:47:47.019+0000",
                    "updated": "2020-10-08T23:47:47.019+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0j4hc:",
        "customfield_12314139": null
    }
}