{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13240313",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240313",
    "key": "ARROW-5648",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 4200,
            "total": 4200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4200,
            "total": 4200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5648/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 7,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240313/worklog/263178",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4616: ARROW-5648: [C++] Avoid using codecvt\nURL: https://github.com/apache/arrow/pull/4616\n \n \n   Some antiquated C++ build chains miss the standard <codecvt> header.\r\n   Use a small vendored UTF8 implementation instead.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-19T17:20:04.942+0000",
                    "updated": "2019-06-19T17:20:04.942+0000",
                    "started": "2019-06-19T17:20:04.941+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "263178",
                    "issueId": "13240313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240313/worklog/263179",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4616: ARROW-5648: [C++] Avoid using codecvt\nURL: https://github.com/apache/arrow/pull/4616#discussion_r295414859\n \n \n\n ##########\n File path: cpp/src/arrow/vendored/utf8cpp/core.h\n ##########\n @@ -0,0 +1,331 @@\n+// Vendored from v2.3.4 (http://utfcpp.sourceforge.net/)\n+\n+// Copyright 2006 Nemanja Trifunovic\n+\n+/*\n+Permission is hereby granted, free of charge, to any person or organization\n+obtaining a copy of the software and accompanying documentation covered by\n+this license (the \"Software\") to use, reproduce, display, distribute,\n+execute, and transmit the Software, and to prepare derivative works of the\n+Software, and to permit third-parties to whom the Software is furnished to\n+do so, all subject to the following:\n+\n+The copyright notices in the Software and this entire statement, including\n+the above license grant, this restriction and the following disclaimer,\n+must be included in all copies of the Software, in whole or in part, and\n+all derivative works of the Software, unless such copies or derivative\n+works are solely in the form of machine-executable object code generated by\n+a source language processor.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\n+SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\n+FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n+ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n+DEALINGS IN THE SOFTWARE.\n+*/\n+\n+\n+#ifndef UTF8_FOR_CPP_CORE_H_2675DCD0_9480_4c0c_B92A_CC14C027B731\n+#define UTF8_FOR_CPP_CORE_H_2675DCD0_9480_4c0c_B92A_CC14C027B731\n+\n+#include <iterator>\n+\n+namespace utf8\n+{\n+    // The typedefs for 8-bit, 16-bit and 32-bit unsigned integers\n+    // You may need to change them to match your system.\n+    // These typedefs have the same names as ones from cstdint, or boost/cstdint\n+    typedef unsigned char   uint8_t;\n+    typedef unsigned short  uint16_t;\n+    typedef unsigned int    uint32_t;\n+\n+// Helper code - not intended to be directly called by the library users. May be changed at any time\n+namespace internal\n+{\n+    // Unicode constants\n+    // Leading (high) surrogates: 0xd800 - 0xdbff\n+    // Trailing (low) surrogates: 0xdc00 - 0xdfff\n+    const uint16_t LEAD_SURROGATE_MIN  = 0xd800u;\n+    const uint16_t LEAD_SURROGATE_MAX  = 0xdbffu;\n+    const uint16_t TRAIL_SURROGATE_MIN = 0xdc00u;\n+    const uint16_t TRAIL_SURROGATE_MAX = 0xdfffu;\n+    const uint16_t LEAD_OFFSET         = LEAD_SURROGATE_MIN - (0x10000 >> 10);\n+    const uint32_t SURROGATE_OFFSET    = 0x10000u - (LEAD_SURROGATE_MIN << 10) - TRAIL_SURROGATE_MIN;\n+\n+    // Maximum valid value for a Unicode code point\n+    const uint32_t CODE_POINT_MAX      = 0x0010ffffu;\n+\n+    template<typename octet_type>\n+    inline uint8_t mask8(octet_type oc)\n+    {\n+        return static_cast<uint8_t>(0xff & oc);\n+    }\n+    template<typename u16_type>\n+    inline uint16_t mask16(u16_type oc)\n+    {\n+        return static_cast<uint16_t>(0xffff & oc);\n+    }\n+    template<typename octet_type>\n+    inline bool is_trail(octet_type oc)\n+    {\n+        return ((utf8::internal::mask8(oc) >> 6) == 0x2);\n+    }\n+\n+    template <typename u16>\n+    inline bool is_lead_surrogate(u16 cp)\n+    {\n+        return (cp >= LEAD_SURROGATE_MIN && cp <= LEAD_SURROGATE_MAX);\n+    }\n+\n+    template <typename u16>\n+    inline bool is_trail_surrogate(u16 cp)\n+    {\n+        return (cp >= TRAIL_SURROGATE_MIN && cp <= TRAIL_SURROGATE_MAX);\n+    }\n+\n+    template <typename u16>\n+    inline bool is_surrogate(u16 cp)\n+    {\n+        return (cp >= LEAD_SURROGATE_MIN && cp <= TRAIL_SURROGATE_MAX);\n+    }\n+\n+    template <typename u32>\n+    inline bool is_code_point_valid(u32 cp)\n+    {\n+        return (cp <= CODE_POINT_MAX && !utf8::internal::is_surrogate(cp));\n+    }\n+\n+    template <typename octet_iterator>\n+    inline typename std::iterator_traits<octet_iterator>::difference_type\n+    sequence_length(octet_iterator lead_it)\n+    {\n+        uint8_t lead = utf8::internal::mask8(*lead_it);\n+        if (lead < 0x80)\n+            return 1;\n+        else if ((lead >> 5) == 0x6)\n+            return 2;\n+        else if ((lead >> 4) == 0xe)\n+            return 3;\n+        else if ((lead >> 3) == 0x1e)\n+            return 4;\n+        else\n+            return 0;\n+    }\n+\n+    template <typename octet_difference_type>\n+    inline bool is_overlong_sequence(uint32_t cp, octet_difference_type length)\n+    {\n+        if (cp < 0x80) {\n+            if (length != 1) \n+                return true;\n+        }\n+        else if (cp < 0x800) {\n+            if (length != 2) \n+                return true;\n+        }\n+        else if (cp < 0x10000) {\n+            if (length != 3) \n+                return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    enum utf_error {UTF8_OK, NOT_ENOUGH_ROOM, INVALID_LEAD, INCOMPLETE_SEQUENCE, OVERLONG_SEQUENCE, INVALID_CODE_POINT};\n+\n+    /// Helper for get_sequence_x\n+    template <typename octet_iterator>\n+    utf_error increase_safely(octet_iterator& it, octet_iterator end)\n+    {\n+        if (++it == end)\n+            return NOT_ENOUGH_ROOM;\n+\n+        if (!utf8::internal::is_trail(*it))\n+            return INCOMPLETE_SEQUENCE;\n+        \n+        return UTF8_OK;\n+    }\n+\n+    #define UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(IT, END) {utf_error ret = increase_safely(IT, END); if (ret != UTF8_OK) return ret;}    \n+\n+    /// get_sequence_x functions decode utf-8 sequences of the length x\n+    template <typename octet_iterator>\n+    utf_error get_sequence_1(octet_iterator& it, octet_iterator end, uint32_t& code_point)\n+    {\n+        if (it == end)\n+            return NOT_ENOUGH_ROOM;\n+\n+        code_point = utf8::internal::mask8(*it);\n+\n+        return UTF8_OK;\n+    }\n+\n+    template <typename octet_iterator>\n+    utf_error get_sequence_2(octet_iterator& it, octet_iterator end, uint32_t& code_point)\n+    {\n+        if (it == end) \n+            return NOT_ENOUGH_ROOM;\n+        \n+        code_point = utf8::internal::mask8(*it);\n+\n+        UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)\n+\n+        code_point = ((code_point << 6) & 0x7ff) + ((*it) & 0x3f);\n+\n+        return UTF8_OK;\n+    }\n+\n+    template <typename octet_iterator>\n+    utf_error get_sequence_3(octet_iterator& it, octet_iterator end, uint32_t& code_point)\n+    {\n+        if (it == end)\n+            return NOT_ENOUGH_ROOM;\n+            \n+        code_point = utf8::internal::mask8(*it);\n+\n+        UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)\n+\n+        code_point = ((code_point << 12) & 0xffff) + ((utf8::internal::mask8(*it) << 6) & 0xfff);\n+\n+        UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)\n+\n+        code_point += (*it) & 0x3f;\n+\n+        return UTF8_OK;\n+    }\n+\n+    template <typename octet_iterator>\n+    utf_error get_sequence_4(octet_iterator& it, octet_iterator end, uint32_t& code_point)\n+    {\n+        if (it == end)\n+           return NOT_ENOUGH_ROOM;\n+\n+        code_point = utf8::internal::mask8(*it);\n+\n+        UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)\n+\n+        code_point = ((code_point << 18) & 0x1fffff) + ((utf8::internal::mask8(*it) << 12) & 0x3ffff);\n+\n+        UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)\n+\n+        code_point += (utf8::internal::mask8(*it) << 6) & 0xfff;\n+\n+        UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)\n+\n+        code_point += (*it) & 0x3f;\n+\n+        return UTF8_OK;\n+    }\n+\n+    #undef UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR\n+\n+    template <typename octet_iterator>\n+    utf_error validate_next(octet_iterator& it, octet_iterator end, uint32_t& code_point)\n+    {\n+        // Save the original value of it so we can go back in case of failure\n+        // Of course, it does not make much sense with i.e. stream iterators\n+        octet_iterator original_it = it;\n+\n+        uint32_t cp = 0;\n+        // Determine the sequence length based on the lead octet\n+        typedef typename std::iterator_traits<octet_iterator>::difference_type octet_difference_type;\n+        const octet_difference_type length = utf8::internal::sequence_length(it);\n+\n+        // Get trail octets and calculate the code point\n+        utf_error err = UTF8_OK;\n+        switch (length) {\n+            case 0: \n+                return INVALID_LEAD;\n+            case 1:\n+                err = utf8::internal::get_sequence_1(it, end, cp);\n+                break;\n+            case 2:\n+                err = utf8::internal::get_sequence_2(it, end, cp);\n+            break;\n+            case 3:\n+                err = utf8::internal::get_sequence_3(it, end, cp);\n+            break;\n+            case 4:\n+                err = utf8::internal::get_sequence_4(it, end, cp);\n+            break;\n+        }\n+\n+        if (err == UTF8_OK) {\n+            // Decoding succeeded. Now, security checks...\n+            if (utf8::internal::is_code_point_valid(cp)) {\n+                if (!utf8::internal::is_overlong_sequence(cp, length)){\n+                    // Passed! Return here.\n+                    code_point = cp;\n+                    ++it;\n+                    return UTF8_OK;\n+                }\n+                else\n+                    err = OVERLONG_SEQUENCE;\n+            }\n+            else \n+                err = INVALID_CODE_POINT;\n+        }\n+\n+        // Failure branch - restore the original value of the iterator\n+        it = original_it;\n+        return err;\n+    }\n+\n+    template <typename octet_iterator>\n+    inline utf_error validate_next(octet_iterator& it, octet_iterator end) {\n+        uint32_t ignored;\n+        return utf8::internal::validate_next(it, end, ignored);\n+    }\n+\n+} // namespace internal\n+\n+    /// The library API - functions intended to be called by the users\n+\n+    // Byte order mark\n+    const uint8_t bom[] = {0xef, 0xbb, 0xbf};\n \n Review comment:\n   heh, you even have a boom detector now :)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-19T17:22:23.228+0000",
                    "updated": "2019-06-19T17:22:23.228+0000",
                    "started": "2019-06-19T17:22:23.228+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "263179",
                    "issueId": "13240313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240313/worklog/263180",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4616: ARROW-5648: [C++] Avoid using codecvt\nURL: https://github.com/apache/arrow/pull/4616#discussion_r295414948\n \n \n\n ##########\n File path: cpp/src/arrow/vendored/utf8cpp/core.h\n ##########\n @@ -0,0 +1,331 @@\n+// Vendored from v2.3.4 (http://utfcpp.sourceforge.net/)\n+\n+// Copyright 2006 Nemanja Trifunovic\n+\n+/*\n+Permission is hereby granted, free of charge, to any person or organization\n+obtaining a copy of the software and accompanying documentation covered by\n+this license (the \"Software\") to use, reproduce, display, distribute,\n+execute, and transmit the Software, and to prepare derivative works of the\n+Software, and to permit third-parties to whom the Software is furnished to\n+do so, all subject to the following:\n+\n+The copyright notices in the Software and this entire statement, including\n+the above license grant, this restriction and the following disclaimer,\n+must be included in all copies of the Software, in whole or in part, and\n+all derivative works of the Software, unless such copies or derivative\n+works are solely in the form of machine-executable object code generated by\n+a source language processor.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\n+SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\n+FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n+ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n+DEALINGS IN THE SOFTWARE.\n+*/\n+\n+\n+#ifndef UTF8_FOR_CPP_CORE_H_2675DCD0_9480_4c0c_B92A_CC14C027B731\n+#define UTF8_FOR_CPP_CORE_H_2675DCD0_9480_4c0c_B92A_CC14C027B731\n+\n+#include <iterator>\n+\n+namespace utf8\n+{\n+    // The typedefs for 8-bit, 16-bit and 32-bit unsigned integers\n+    // You may need to change them to match your system.\n+    // These typedefs have the same names as ones from cstdint, or boost/cstdint\n+    typedef unsigned char   uint8_t;\n+    typedef unsigned short  uint16_t;\n+    typedef unsigned int    uint32_t;\n+\n+// Helper code - not intended to be directly called by the library users. May be changed at any time\n+namespace internal\n+{\n+    // Unicode constants\n+    // Leading (high) surrogates: 0xd800 - 0xdbff\n+    // Trailing (low) surrogates: 0xdc00 - 0xdfff\n+    const uint16_t LEAD_SURROGATE_MIN  = 0xd800u;\n+    const uint16_t LEAD_SURROGATE_MAX  = 0xdbffu;\n+    const uint16_t TRAIL_SURROGATE_MIN = 0xdc00u;\n+    const uint16_t TRAIL_SURROGATE_MAX = 0xdfffu;\n+    const uint16_t LEAD_OFFSET         = LEAD_SURROGATE_MIN - (0x10000 >> 10);\n+    const uint32_t SURROGATE_OFFSET    = 0x10000u - (LEAD_SURROGATE_MIN << 10) - TRAIL_SURROGATE_MIN;\n+\n+    // Maximum valid value for a Unicode code point\n+    const uint32_t CODE_POINT_MAX      = 0x0010ffffu;\n+\n+    template<typename octet_type>\n+    inline uint8_t mask8(octet_type oc)\n+    {\n+        return static_cast<uint8_t>(0xff & oc);\n+    }\n+    template<typename u16_type>\n+    inline uint16_t mask16(u16_type oc)\n+    {\n+        return static_cast<uint16_t>(0xffff & oc);\n+    }\n+    template<typename octet_type>\n+    inline bool is_trail(octet_type oc)\n+    {\n+        return ((utf8::internal::mask8(oc) >> 6) == 0x2);\n+    }\n+\n+    template <typename u16>\n+    inline bool is_lead_surrogate(u16 cp)\n+    {\n+        return (cp >= LEAD_SURROGATE_MIN && cp <= LEAD_SURROGATE_MAX);\n+    }\n+\n+    template <typename u16>\n+    inline bool is_trail_surrogate(u16 cp)\n+    {\n+        return (cp >= TRAIL_SURROGATE_MIN && cp <= TRAIL_SURROGATE_MAX);\n+    }\n+\n+    template <typename u16>\n+    inline bool is_surrogate(u16 cp)\n+    {\n+        return (cp >= LEAD_SURROGATE_MIN && cp <= TRAIL_SURROGATE_MAX);\n+    }\n+\n+    template <typename u32>\n+    inline bool is_code_point_valid(u32 cp)\n+    {\n+        return (cp <= CODE_POINT_MAX && !utf8::internal::is_surrogate(cp));\n+    }\n+\n+    template <typename octet_iterator>\n+    inline typename std::iterator_traits<octet_iterator>::difference_type\n+    sequence_length(octet_iterator lead_it)\n+    {\n+        uint8_t lead = utf8::internal::mask8(*lead_it);\n+        if (lead < 0x80)\n+            return 1;\n+        else if ((lead >> 5) == 0x6)\n+            return 2;\n+        else if ((lead >> 4) == 0xe)\n+            return 3;\n+        else if ((lead >> 3) == 0x1e)\n+            return 4;\n+        else\n+            return 0;\n+    }\n+\n+    template <typename octet_difference_type>\n+    inline bool is_overlong_sequence(uint32_t cp, octet_difference_type length)\n+    {\n+        if (cp < 0x80) {\n+            if (length != 1) \n+                return true;\n+        }\n+        else if (cp < 0x800) {\n+            if (length != 2) \n+                return true;\n+        }\n+        else if (cp < 0x10000) {\n+            if (length != 3) \n+                return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    enum utf_error {UTF8_OK, NOT_ENOUGH_ROOM, INVALID_LEAD, INCOMPLETE_SEQUENCE, OVERLONG_SEQUENCE, INVALID_CODE_POINT};\n+\n+    /// Helper for get_sequence_x\n+    template <typename octet_iterator>\n+    utf_error increase_safely(octet_iterator& it, octet_iterator end)\n+    {\n+        if (++it == end)\n+            return NOT_ENOUGH_ROOM;\n+\n+        if (!utf8::internal::is_trail(*it))\n+            return INCOMPLETE_SEQUENCE;\n+        \n+        return UTF8_OK;\n+    }\n+\n+    #define UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(IT, END) {utf_error ret = increase_safely(IT, END); if (ret != UTF8_OK) return ret;}    \n+\n+    /// get_sequence_x functions decode utf-8 sequences of the length x\n+    template <typename octet_iterator>\n+    utf_error get_sequence_1(octet_iterator& it, octet_iterator end, uint32_t& code_point)\n+    {\n+        if (it == end)\n+            return NOT_ENOUGH_ROOM;\n+\n+        code_point = utf8::internal::mask8(*it);\n+\n+        return UTF8_OK;\n+    }\n+\n+    template <typename octet_iterator>\n+    utf_error get_sequence_2(octet_iterator& it, octet_iterator end, uint32_t& code_point)\n+    {\n+        if (it == end) \n+            return NOT_ENOUGH_ROOM;\n+        \n+        code_point = utf8::internal::mask8(*it);\n+\n+        UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)\n+\n+        code_point = ((code_point << 6) & 0x7ff) + ((*it) & 0x3f);\n+\n+        return UTF8_OK;\n+    }\n+\n+    template <typename octet_iterator>\n+    utf_error get_sequence_3(octet_iterator& it, octet_iterator end, uint32_t& code_point)\n+    {\n+        if (it == end)\n+            return NOT_ENOUGH_ROOM;\n+            \n+        code_point = utf8::internal::mask8(*it);\n+\n+        UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)\n+\n+        code_point = ((code_point << 12) & 0xffff) + ((utf8::internal::mask8(*it) << 6) & 0xfff);\n+\n+        UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)\n+\n+        code_point += (*it) & 0x3f;\n+\n+        return UTF8_OK;\n+    }\n+\n+    template <typename octet_iterator>\n+    utf_error get_sequence_4(octet_iterator& it, octet_iterator end, uint32_t& code_point)\n+    {\n+        if (it == end)\n+           return NOT_ENOUGH_ROOM;\n+\n+        code_point = utf8::internal::mask8(*it);\n+\n+        UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)\n+\n+        code_point = ((code_point << 18) & 0x1fffff) + ((utf8::internal::mask8(*it) << 12) & 0x3ffff);\n+\n+        UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)\n+\n+        code_point += (utf8::internal::mask8(*it) << 6) & 0xfff;\n+\n+        UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)\n+\n+        code_point += (*it) & 0x3f;\n+\n+        return UTF8_OK;\n+    }\n+\n+    #undef UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR\n+\n+    template <typename octet_iterator>\n+    utf_error validate_next(octet_iterator& it, octet_iterator end, uint32_t& code_point)\n+    {\n+        // Save the original value of it so we can go back in case of failure\n+        // Of course, it does not make much sense with i.e. stream iterators\n+        octet_iterator original_it = it;\n+\n+        uint32_t cp = 0;\n+        // Determine the sequence length based on the lead octet\n+        typedef typename std::iterator_traits<octet_iterator>::difference_type octet_difference_type;\n+        const octet_difference_type length = utf8::internal::sequence_length(it);\n+\n+        // Get trail octets and calculate the code point\n+        utf_error err = UTF8_OK;\n+        switch (length) {\n+            case 0: \n+                return INVALID_LEAD;\n+            case 1:\n+                err = utf8::internal::get_sequence_1(it, end, cp);\n+                break;\n+            case 2:\n+                err = utf8::internal::get_sequence_2(it, end, cp);\n+            break;\n+            case 3:\n+                err = utf8::internal::get_sequence_3(it, end, cp);\n+            break;\n+            case 4:\n+                err = utf8::internal::get_sequence_4(it, end, cp);\n+            break;\n+        }\n+\n+        if (err == UTF8_OK) {\n+            // Decoding succeeded. Now, security checks...\n+            if (utf8::internal::is_code_point_valid(cp)) {\n+                if (!utf8::internal::is_overlong_sequence(cp, length)){\n+                    // Passed! Return here.\n+                    code_point = cp;\n+                    ++it;\n+                    return UTF8_OK;\n+                }\n+                else\n+                    err = OVERLONG_SEQUENCE;\n+            }\n+            else \n+                err = INVALID_CODE_POINT;\n+        }\n+\n+        // Failure branch - restore the original value of the iterator\n+        it = original_it;\n+        return err;\n+    }\n+\n+    template <typename octet_iterator>\n+    inline utf_error validate_next(octet_iterator& it, octet_iterator end) {\n+        uint32_t ignored;\n+        return utf8::internal::validate_next(it, end, ignored);\n+    }\n+\n+} // namespace internal\n+\n+    /// The library API - functions intended to be called by the users\n+\n+    // Byte order mark\n+    const uint8_t bom[] = {0xef, 0xbb, 0xbf};\n \n Review comment:\n   boom? :-)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-19T17:22:37.854+0000",
                    "updated": "2019-06-19T17:22:37.854+0000",
                    "started": "2019-06-19T17:22:37.853+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "263180",
                    "issueId": "13240313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240313/worklog/263181",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4616: ARROW-5648: [C++] Avoid using codecvt\nURL: https://github.com/apache/arrow/pull/4616#discussion_r295415176\n \n \n\n ##########\n File path: cpp/src/arrow/vendored/utf8cpp/core.h\n ##########\n @@ -0,0 +1,331 @@\n+// Vendored from v2.3.4 (http://utfcpp.sourceforge.net/)\n+\n+// Copyright 2006 Nemanja Trifunovic\n+\n+/*\n+Permission is hereby granted, free of charge, to any person or organization\n+obtaining a copy of the software and accompanying documentation covered by\n+this license (the \"Software\") to use, reproduce, display, distribute,\n+execute, and transmit the Software, and to prepare derivative works of the\n+Software, and to permit third-parties to whom the Software is furnished to\n+do so, all subject to the following:\n+\n+The copyright notices in the Software and this entire statement, including\n+the above license grant, this restriction and the following disclaimer,\n+must be included in all copies of the Software, in whole or in part, and\n+all derivative works of the Software, unless such copies or derivative\n+works are solely in the form of machine-executable object code generated by\n+a source language processor.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\n+SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\n+FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n+ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n+DEALINGS IN THE SOFTWARE.\n+*/\n+\n+\n+#ifndef UTF8_FOR_CPP_CORE_H_2675DCD0_9480_4c0c_B92A_CC14C027B731\n+#define UTF8_FOR_CPP_CORE_H_2675DCD0_9480_4c0c_B92A_CC14C027B731\n+\n+#include <iterator>\n+\n+namespace utf8\n+{\n+    // The typedefs for 8-bit, 16-bit and 32-bit unsigned integers\n+    // You may need to change them to match your system.\n+    // These typedefs have the same names as ones from cstdint, or boost/cstdint\n+    typedef unsigned char   uint8_t;\n+    typedef unsigned short  uint16_t;\n+    typedef unsigned int    uint32_t;\n+\n+// Helper code - not intended to be directly called by the library users. May be changed at any time\n+namespace internal\n+{\n+    // Unicode constants\n+    // Leading (high) surrogates: 0xd800 - 0xdbff\n+    // Trailing (low) surrogates: 0xdc00 - 0xdfff\n+    const uint16_t LEAD_SURROGATE_MIN  = 0xd800u;\n+    const uint16_t LEAD_SURROGATE_MAX  = 0xdbffu;\n+    const uint16_t TRAIL_SURROGATE_MIN = 0xdc00u;\n+    const uint16_t TRAIL_SURROGATE_MAX = 0xdfffu;\n+    const uint16_t LEAD_OFFSET         = LEAD_SURROGATE_MIN - (0x10000 >> 10);\n+    const uint32_t SURROGATE_OFFSET    = 0x10000u - (LEAD_SURROGATE_MIN << 10) - TRAIL_SURROGATE_MIN;\n+\n+    // Maximum valid value for a Unicode code point\n+    const uint32_t CODE_POINT_MAX      = 0x0010ffffu;\n+\n+    template<typename octet_type>\n+    inline uint8_t mask8(octet_type oc)\n+    {\n+        return static_cast<uint8_t>(0xff & oc);\n+    }\n+    template<typename u16_type>\n+    inline uint16_t mask16(u16_type oc)\n+    {\n+        return static_cast<uint16_t>(0xffff & oc);\n+    }\n+    template<typename octet_type>\n+    inline bool is_trail(octet_type oc)\n+    {\n+        return ((utf8::internal::mask8(oc) >> 6) == 0x2);\n+    }\n+\n+    template <typename u16>\n+    inline bool is_lead_surrogate(u16 cp)\n+    {\n+        return (cp >= LEAD_SURROGATE_MIN && cp <= LEAD_SURROGATE_MAX);\n+    }\n+\n+    template <typename u16>\n+    inline bool is_trail_surrogate(u16 cp)\n+    {\n+        return (cp >= TRAIL_SURROGATE_MIN && cp <= TRAIL_SURROGATE_MAX);\n+    }\n+\n+    template <typename u16>\n+    inline bool is_surrogate(u16 cp)\n+    {\n+        return (cp >= LEAD_SURROGATE_MIN && cp <= TRAIL_SURROGATE_MAX);\n+    }\n+\n+    template <typename u32>\n+    inline bool is_code_point_valid(u32 cp)\n+    {\n+        return (cp <= CODE_POINT_MAX && !utf8::internal::is_surrogate(cp));\n+    }\n+\n+    template <typename octet_iterator>\n+    inline typename std::iterator_traits<octet_iterator>::difference_type\n+    sequence_length(octet_iterator lead_it)\n+    {\n+        uint8_t lead = utf8::internal::mask8(*lead_it);\n+        if (lead < 0x80)\n+            return 1;\n+        else if ((lead >> 5) == 0x6)\n+            return 2;\n+        else if ((lead >> 4) == 0xe)\n+            return 3;\n+        else if ((lead >> 3) == 0x1e)\n+            return 4;\n+        else\n+            return 0;\n+    }\n+\n+    template <typename octet_difference_type>\n+    inline bool is_overlong_sequence(uint32_t cp, octet_difference_type length)\n+    {\n+        if (cp < 0x80) {\n+            if (length != 1) \n+                return true;\n+        }\n+        else if (cp < 0x800) {\n+            if (length != 2) \n+                return true;\n+        }\n+        else if (cp < 0x10000) {\n+            if (length != 3) \n+                return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    enum utf_error {UTF8_OK, NOT_ENOUGH_ROOM, INVALID_LEAD, INCOMPLETE_SEQUENCE, OVERLONG_SEQUENCE, INVALID_CODE_POINT};\n+\n+    /// Helper for get_sequence_x\n+    template <typename octet_iterator>\n+    utf_error increase_safely(octet_iterator& it, octet_iterator end)\n+    {\n+        if (++it == end)\n+            return NOT_ENOUGH_ROOM;\n+\n+        if (!utf8::internal::is_trail(*it))\n+            return INCOMPLETE_SEQUENCE;\n+        \n+        return UTF8_OK;\n+    }\n+\n+    #define UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(IT, END) {utf_error ret = increase_safely(IT, END); if (ret != UTF8_OK) return ret;}    \n+\n+    /// get_sequence_x functions decode utf-8 sequences of the length x\n+    template <typename octet_iterator>\n+    utf_error get_sequence_1(octet_iterator& it, octet_iterator end, uint32_t& code_point)\n+    {\n+        if (it == end)\n+            return NOT_ENOUGH_ROOM;\n+\n+        code_point = utf8::internal::mask8(*it);\n+\n+        return UTF8_OK;\n+    }\n+\n+    template <typename octet_iterator>\n+    utf_error get_sequence_2(octet_iterator& it, octet_iterator end, uint32_t& code_point)\n+    {\n+        if (it == end) \n+            return NOT_ENOUGH_ROOM;\n+        \n+        code_point = utf8::internal::mask8(*it);\n+\n+        UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)\n+\n+        code_point = ((code_point << 6) & 0x7ff) + ((*it) & 0x3f);\n+\n+        return UTF8_OK;\n+    }\n+\n+    template <typename octet_iterator>\n+    utf_error get_sequence_3(octet_iterator& it, octet_iterator end, uint32_t& code_point)\n+    {\n+        if (it == end)\n+            return NOT_ENOUGH_ROOM;\n+            \n+        code_point = utf8::internal::mask8(*it);\n+\n+        UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)\n+\n+        code_point = ((code_point << 12) & 0xffff) + ((utf8::internal::mask8(*it) << 6) & 0xfff);\n+\n+        UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)\n+\n+        code_point += (*it) & 0x3f;\n+\n+        return UTF8_OK;\n+    }\n+\n+    template <typename octet_iterator>\n+    utf_error get_sequence_4(octet_iterator& it, octet_iterator end, uint32_t& code_point)\n+    {\n+        if (it == end)\n+           return NOT_ENOUGH_ROOM;\n+\n+        code_point = utf8::internal::mask8(*it);\n+\n+        UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)\n+\n+        code_point = ((code_point << 18) & 0x1fffff) + ((utf8::internal::mask8(*it) << 12) & 0x3ffff);\n+\n+        UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)\n+\n+        code_point += (utf8::internal::mask8(*it) << 6) & 0xfff;\n+\n+        UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)\n+\n+        code_point += (*it) & 0x3f;\n+\n+        return UTF8_OK;\n+    }\n+\n+    #undef UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR\n+\n+    template <typename octet_iterator>\n+    utf_error validate_next(octet_iterator& it, octet_iterator end, uint32_t& code_point)\n+    {\n+        // Save the original value of it so we can go back in case of failure\n+        // Of course, it does not make much sense with i.e. stream iterators\n+        octet_iterator original_it = it;\n+\n+        uint32_t cp = 0;\n+        // Determine the sequence length based on the lead octet\n+        typedef typename std::iterator_traits<octet_iterator>::difference_type octet_difference_type;\n+        const octet_difference_type length = utf8::internal::sequence_length(it);\n+\n+        // Get trail octets and calculate the code point\n+        utf_error err = UTF8_OK;\n+        switch (length) {\n+            case 0: \n+                return INVALID_LEAD;\n+            case 1:\n+                err = utf8::internal::get_sequence_1(it, end, cp);\n+                break;\n+            case 2:\n+                err = utf8::internal::get_sequence_2(it, end, cp);\n+            break;\n+            case 3:\n+                err = utf8::internal::get_sequence_3(it, end, cp);\n+            break;\n+            case 4:\n+                err = utf8::internal::get_sequence_4(it, end, cp);\n+            break;\n+        }\n+\n+        if (err == UTF8_OK) {\n+            // Decoding succeeded. Now, security checks...\n+            if (utf8::internal::is_code_point_valid(cp)) {\n+                if (!utf8::internal::is_overlong_sequence(cp, length)){\n+                    // Passed! Return here.\n+                    code_point = cp;\n+                    ++it;\n+                    return UTF8_OK;\n+                }\n+                else\n+                    err = OVERLONG_SEQUENCE;\n+            }\n+            else \n+                err = INVALID_CODE_POINT;\n+        }\n+\n+        // Failure branch - restore the original value of the iterator\n+        it = original_it;\n+        return err;\n+    }\n+\n+    template <typename octet_iterator>\n+    inline utf_error validate_next(octet_iterator& it, octet_iterator end) {\n+        uint32_t ignored;\n+        return utf8::internal::validate_next(it, end, ignored);\n+    }\n+\n+} // namespace internal\n+\n+    /// The library API - functions intended to be called by the users\n+\n+    // Byte order mark\n+    const uint8_t bom[] = {0xef, 0xbb, 0xbf};\n \n Review comment:\n   We already had one by the way: `SkipUTF8BOM`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-19T17:23:09.936+0000",
                    "updated": "2019-06-19T17:23:09.936+0000",
                    "started": "2019-06-19T17:23:09.935+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "263181",
                    "issueId": "13240313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240313/worklog/263231",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on issue #4616: ARROW-5648: [C++] Avoid using codecvt\nURL: https://github.com/apache/arrow/pull/4616#issuecomment-503682504\n \n \n   Building with this change on the Rtools setup does succeed: https://ci.appveyor.com/project/nealrichardson/arrow/builds/25397807\r\n   \r\n   So as far as that is concerned, LGTM.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-19T18:44:42.235+0000",
                    "updated": "2019-06-19T18:44:42.235+0000",
                    "started": "2019-06-19T18:44:42.234+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "263231",
                    "issueId": "13240313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240313/worklog/263338",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4616: ARROW-5648: [C++] Avoid using codecvt\nURL: https://github.com/apache/arrow/pull/4616#issuecomment-503750938\n \n \n   Appveyor build: https://ci.appveyor.com/project/pitrou/arrow/builds/25396740\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-19T21:20:13.735+0000",
                    "updated": "2019-06-19T21:20:13.735+0000",
                    "started": "2019-06-19T21:20:13.734+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "263338",
                    "issueId": "13240313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240313/worklog/263340",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4616: ARROW-5648: [C++] Avoid using codecvt\nURL: https://github.com/apache/arrow/pull/4616\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-19T21:20:41.240+0000",
                    "updated": "2019-06-19T21:20:41.240+0000",
                    "started": "2019-06-19T21:20:41.239+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "263340",
                    "issueId": "13240313"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 4200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3deefde[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6b30eafb[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@215633fe[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4ddd721d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58a509c8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@19d24a3d[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@90b433a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2fe0959c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5f7b22e1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@54731891[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73293b6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2cd5aab9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4200,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jun 19 21:20:24 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-06-19T21:20:24.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5648/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2019-06-18T22:49:07.000+0000",
        "updated": "2019-06-19T21:20:41.000+0000",
        "timeoriginalestimate": null,
        "description": "See comment on\u00a0https://issues.apache.org/jira/browse/ARROW-3758\u00a0and [chat discussion|https://ursalabs.zulipchat.com/#narrow/stream/180245-dev/topic/Need.20help.20with.20Windows.20compilation/near/168456857]. In the toolchain used to build R packages,\u00a0{{codecvt}} [isn't found|https://ci.appveyor.com/project/nealrichardson/arrow/builds/25367079#L1177]. This was apparently made into a harder requirement with the filesystem work last month.\r\n\r\nWe'll need some kind of workaround.\u00a0[https://stackoverflow.com/questions/15615136/is-codecvt-not-a-std-header]\u00a0suggests Boost.Locale.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Build fails on mingw without codecvt",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240313/comment/16867299",
                    "id": "16867299",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "It seems building Boost.Locale has its own complications:\r\nhttps://www.boost.org/doc/libs/1_70_0/libs/locale/doc/html/building_boost_locale.html",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-06-19T07:29:14.869+0000",
                    "updated": "2019-06-19T07:29:55.411+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240313/comment/16867302",
                    "id": "16867302",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Can't we simply up the compiler requirements on MinGW?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-06-19T07:30:15.374+0000",
                    "updated": "2019-06-19T07:30:15.374+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240313/comment/16867313",
                    "id": "16867313",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Another possibility is to bundle a simple UTF-8 encoder and decoder:\r\nhttps://stackoverflow.com/questions/6140223/c-boost-encode-decode-utf-8/6155524",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-06-19T07:43:27.188+0000",
                    "updated": "2019-06-19T07:43:27.188+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240313/comment/16867639",
                    "id": "16867639",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I think we're stuck on the MinGW toolchain that's bundled with RTools, since that's used for the whole R-on-Windows distribution",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-06-19T13:49:32.565+0000",
                    "updated": "2019-06-19T13:49:32.565+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240313/comment/16867641",
                    "id": "16867641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Can't we nudge them towards using a non-antiquited toolchain?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-06-19T13:52:08.089+0000",
                    "updated": "2019-06-19T13:52:08.089+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240313/comment/16867645",
                    "id": "16867645",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Seems like vendoring https://github.com/DuffsDevice/tiny-utf8 could be a solution, though that would be kind of a bummer since this is supposed to be available in C++11",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-06-19T13:52:18.499+0000",
                    "updated": "2019-06-19T13:52:18.499+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240313/comment/16867659",
                    "id": "16867659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "We can just use the header-only http://utfcpp.sourceforge.net/",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-06-19T13:56:50.972+0000",
                    "updated": "2019-06-19T13:57:01.105+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13240313/comment/16868017",
                    "id": "16868017",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 4616\n[https://github.com/apache/arrow/pull/4616]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-06-19T21:20:24.809+0000",
                    "updated": "2019-06-19T21:20:24.809+0000"
                }
            ],
            "maxResults": 8,
            "total": 8,
            "startAt": 0
        },
        "customfield_12311820": "0|z03vsw:",
        "customfield_12314139": null
    }
}