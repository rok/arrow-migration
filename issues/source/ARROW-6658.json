{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13258161",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258161",
    "key": "ARROW-6658",
    "fields": {
        "parent": {
            "id": "13230559",
            "key": "ARROW-5227",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13230559",
            "fields": {
                "summary": "[Rust] [DataFusion] Re-implement query execution with an extensible physical query plan",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                    "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                    "name": "Closed",
                    "id": "6",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "beginner",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6658/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 10,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258161/worklog/321525",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alippai commented on pull request #5558: ARROW-6658: [Rust][Datafusion] Implement AVG expression\nURL: https://github.com/apache/arrow/pull/5558\n \n \n   I wasn't sure about the datatypes of sum&count (picked the broadest f64 and i64) also it may or may not be better to implement this as SUM()/COUNT().\r\n   \r\n   Either way the changes from mod.rs are needed to test SQL with f64\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-01T21:00:08.748+0000",
                    "updated": "2019-10-01T21:00:08.748+0000",
                    "started": "2019-10-01T21:00:08.748+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "321525",
                    "issueId": "13258161"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258161/worklog/321526",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #5558: ARROW-6658: [Rust][Datafusion] Implement AVG expression\nURL: https://github.com/apache/arrow/pull/5558#issuecomment-537228968\n \n \n   https://issues.apache.org/jira/browse/ARROW-6658\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-01T21:02:00.968+0000",
                    "updated": "2019-10-01T21:02:00.968+0000",
                    "started": "2019-10-01T21:02:00.968+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "321526",
                    "issueId": "13258161"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258161/worklog/321613",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #5558: ARROW-6658: [Rust][Datafusion] Implement AVG expression\nURL: https://github.com/apache/arrow/pull/5558#issuecomment-537269508\n \n \n   I'm excited to see these PRs! I am away on a business trip so might not be able to review until the end of the week or at the weekend.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-01T23:13:40.880+0000",
                    "updated": "2019-10-01T23:13:40.880+0000",
                    "started": "2019-10-01T23:13:40.879+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "321613",
                    "issueId": "13258161"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258161/worklog/323083",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #5558: ARROW-6658: [Rust][Datafusion] Implement AVG expression\nURL: https://github.com/apache/arrow/pull/5558#issuecomment-538177778\n \n \n   @alippai please rebase\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T00:18:18.137+0000",
                    "updated": "2019-10-04T00:18:18.137+0000",
                    "started": "2019-10-04T00:18:18.136+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323083",
                    "issueId": "13258161"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258161/worklog/323084",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5558: ARROW-6658: [Rust][Datafusion] Implement AVG expression\nURL: https://github.com/apache/arrow/pull/5558#discussion_r331303520\n \n \n\n ##########\n File path: rust/datafusion/src/execution/physical_plan/expressions.rs\n ##########\n @@ -199,6 +199,121 @@ pub fn sum(expr: Arc<dyn PhysicalExpr>) -> Arc<dyn AggregateExpr> {\n     Arc::new(Sum::new(expr))\n }\n \n+/// AVG aggregate expression\n+pub struct Avg {\n+    expr: Arc<dyn PhysicalExpr>,\n+}\n+\n+impl Avg {\n+    /// Create a new AVG aggregate function\n+    pub fn new(expr: Arc<dyn PhysicalExpr>) -> Self {\n+        Self { expr }\n+    }\n+}\n+\n+impl AggregateExpr for Avg {\n+    fn name(&self) -> String {\n+        \"AVG\".to_string()\n+    }\n+\n+    fn data_type(&self, input_schema: &Schema) -> Result<DataType> {\n+        match self.expr.data_type(input_schema)? {\n+            DataType::Int8\n+            | DataType::Int16\n+            | DataType::Int32\n+            | DataType::Int64\n+            | DataType::UInt8\n+            | DataType::UInt16\n+            | DataType::UInt32\n+            | DataType::UInt64\n+            | DataType::Float32\n+            | DataType::Float64 => Ok(DataType::Float64),\n+            other => Err(ExecutionError::General(format!(\n+                \"AVG does not support {:?}\",\n+                other\n+            ))),\n+        }\n+    }\n+\n+    fn create_accumulator(&self) -> Rc<RefCell<dyn Accumulator>> {\n+        Rc::new(RefCell::new(AvgAccumulator {\n+            expr: self.expr.clone(),\n+            sum: None,\n+            count: None,\n+        }))\n+    }\n+\n+    fn create_combiner(&self, column_index: usize) -> Arc<dyn AggregateExpr> {\n+        Arc::new(Avg::new(Arc::new(Column::new(column_index))))\n+    }\n+}\n+\n+macro_rules! avg_accumulate {\n+    ($SELF:ident, $ARRAY:ident, $ROW_INDEX:expr, $ARRAY_TYPE:ident) => {{\n+        if let Some(array) = $ARRAY.as_any().downcast_ref::<$ARRAY_TYPE>() {\n+            if $ARRAY.is_valid($ROW_INDEX) {\n+                let value = array.value($ROW_INDEX);\n+                match $SELF.sum {\n+                    Some(n) => {\n+                        $SELF.sum = Some(n + value as f64);\n+                        $SELF.count = Some($SELF.count.unwrap() + 1);\n \n Review comment:\n   can we avoid this `unwrap` ?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T00:22:30.733+0000",
                    "updated": "2019-10-04T00:22:30.733+0000",
                    "started": "2019-10-04T00:22:30.732+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323084",
                    "issueId": "13258161"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258161/worklog/323085",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5558: ARROW-6658: [Rust][Datafusion] Implement AVG expression\nURL: https://github.com/apache/arrow/pull/5558#discussion_r331303580\n \n \n\n ##########\n File path: rust/datafusion/src/execution/physical_plan/expressions.rs\n ##########\n @@ -199,6 +199,121 @@ pub fn sum(expr: Arc<dyn PhysicalExpr>) -> Arc<dyn AggregateExpr> {\n     Arc::new(Sum::new(expr))\n }\n \n+/// AVG aggregate expression\n+pub struct Avg {\n+    expr: Arc<dyn PhysicalExpr>,\n+}\n+\n+impl Avg {\n+    /// Create a new AVG aggregate function\n+    pub fn new(expr: Arc<dyn PhysicalExpr>) -> Self {\n+        Self { expr }\n+    }\n+}\n+\n+impl AggregateExpr for Avg {\n+    fn name(&self) -> String {\n+        \"AVG\".to_string()\n+    }\n+\n+    fn data_type(&self, input_schema: &Schema) -> Result<DataType> {\n+        match self.expr.data_type(input_schema)? {\n+            DataType::Int8\n+            | DataType::Int16\n+            | DataType::Int32\n+            | DataType::Int64\n+            | DataType::UInt8\n+            | DataType::UInt16\n+            | DataType::UInt32\n+            | DataType::UInt64\n+            | DataType::Float32\n+            | DataType::Float64 => Ok(DataType::Float64),\n+            other => Err(ExecutionError::General(format!(\n+                \"AVG does not support {:?}\",\n+                other\n+            ))),\n+        }\n+    }\n+\n+    fn create_accumulator(&self) -> Rc<RefCell<dyn Accumulator>> {\n+        Rc::new(RefCell::new(AvgAccumulator {\n+            expr: self.expr.clone(),\n+            sum: None,\n+            count: None,\n+        }))\n+    }\n+\n+    fn create_combiner(&self, column_index: usize) -> Arc<dyn AggregateExpr> {\n+        Arc::new(Avg::new(Arc::new(Column::new(column_index))))\n+    }\n+}\n+\n+macro_rules! avg_accumulate {\n+    ($SELF:ident, $ARRAY:ident, $ROW_INDEX:expr, $ARRAY_TYPE:ident) => {{\n+        if let Some(array) = $ARRAY.as_any().downcast_ref::<$ARRAY_TYPE>() {\n+            if $ARRAY.is_valid($ROW_INDEX) {\n+                let value = array.value($ROW_INDEX);\n+                match $SELF.sum {\n+                    Some(n) => {\n+                        $SELF.sum = Some(n + value as f64);\n+                        $SELF.count = Some($SELF.count.unwrap() + 1);\n+                    }\n+                    None => {\n+                        $SELF.sum = Some(value as f64);\n+                        $SELF.count = Some(1);\n+                    }\n+                };\n+            }\n+            Ok(())\n+        } else {\n+            Err(ExecutionError::General(\n+                \"Failed to downcast array\".to_string(),\n+            ))\n+        }\n+    }};\n+}\n+struct AvgAccumulator {\n+    expr: Arc<dyn PhysicalExpr>,\n+    sum: Option<f64>,\n+    count: Option<i64>,\n+}\n+\n+impl Accumulator for AvgAccumulator {\n+    fn accumulate(&mut self, batch: &RecordBatch, row_index: usize) -> Result<()> {\n+        let array = self.expr.evaluate(batch)?;\n+        match self.expr.data_type(batch.schema())? {\n+            DataType::Int8 => avg_accumulate!(self, array, row_index, Int8Array),\n+            DataType::Int16 => avg_accumulate!(self, array, row_index, Int16Array),\n+            DataType::Int32 => avg_accumulate!(self, array, row_index, Int32Array),\n+            DataType::Int64 => avg_accumulate!(self, array, row_index, Int64Array),\n+            DataType::UInt8 => avg_accumulate!(self, array, row_index, UInt8Array),\n+            DataType::UInt16 => avg_accumulate!(self, array, row_index, UInt16Array),\n+            DataType::UInt32 => avg_accumulate!(self, array, row_index, UInt32Array),\n+            DataType::UInt64 => avg_accumulate!(self, array, row_index, UInt64Array),\n+            DataType::Float32 => avg_accumulate!(self, array, row_index, Float32Array),\n+            DataType::Float64 => avg_accumulate!(self, array, row_index, Float64Array),\n+            other => Err(ExecutionError::General(format!(\n+                \"SUM does not support {:?}\",\n \n Review comment:\n   `SUM` -> `AVG`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T00:22:52.676+0000",
                    "updated": "2019-10-04T00:22:52.676+0000",
                    "started": "2019-10-04T00:22:52.674+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323085",
                    "issueId": "13258161"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258161/worklog/323086",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5558: ARROW-6658: [Rust][Datafusion] Implement AVG expression\nURL: https://github.com/apache/arrow/pull/5558#discussion_r331303633\n \n \n\n ##########\n File path: rust/datafusion/src/execution/physical_plan/expressions.rs\n ##########\n @@ -199,6 +199,121 @@ pub fn sum(expr: Arc<dyn PhysicalExpr>) -> Arc<dyn AggregateExpr> {\n     Arc::new(Sum::new(expr))\n }\n \n+/// AVG aggregate expression\n+pub struct Avg {\n+    expr: Arc<dyn PhysicalExpr>,\n+}\n+\n+impl Avg {\n+    /// Create a new AVG aggregate function\n+    pub fn new(expr: Arc<dyn PhysicalExpr>) -> Self {\n+        Self { expr }\n+    }\n+}\n+\n+impl AggregateExpr for Avg {\n+    fn name(&self) -> String {\n+        \"AVG\".to_string()\n+    }\n+\n+    fn data_type(&self, input_schema: &Schema) -> Result<DataType> {\n+        match self.expr.data_type(input_schema)? {\n+            DataType::Int8\n+            | DataType::Int16\n+            | DataType::Int32\n+            | DataType::Int64\n+            | DataType::UInt8\n+            | DataType::UInt16\n+            | DataType::UInt32\n+            | DataType::UInt64\n+            | DataType::Float32\n+            | DataType::Float64 => Ok(DataType::Float64),\n+            other => Err(ExecutionError::General(format!(\n+                \"AVG does not support {:?}\",\n+                other\n+            ))),\n+        }\n+    }\n+\n+    fn create_accumulator(&self) -> Rc<RefCell<dyn Accumulator>> {\n+        Rc::new(RefCell::new(AvgAccumulator {\n+            expr: self.expr.clone(),\n+            sum: None,\n+            count: None,\n+        }))\n+    }\n+\n+    fn create_combiner(&self, column_index: usize) -> Arc<dyn AggregateExpr> {\n+        Arc::new(Avg::new(Arc::new(Column::new(column_index))))\n+    }\n+}\n+\n+macro_rules! avg_accumulate {\n+    ($SELF:ident, $ARRAY:ident, $ROW_INDEX:expr, $ARRAY_TYPE:ident) => {{\n+        if let Some(array) = $ARRAY.as_any().downcast_ref::<$ARRAY_TYPE>() {\n+            if $ARRAY.is_valid($ROW_INDEX) {\n+                let value = array.value($ROW_INDEX);\n+                match $SELF.sum {\n+                    Some(n) => {\n+                        $SELF.sum = Some(n + value as f64);\n+                        $SELF.count = Some($SELF.count.unwrap() + 1);\n+                    }\n+                    None => {\n+                        $SELF.sum = Some(value as f64);\n+                        $SELF.count = Some(1);\n+                    }\n+                };\n+            }\n+            Ok(())\n+        } else {\n+            Err(ExecutionError::General(\n+                \"Failed to downcast array\".to_string(),\n+            ))\n+        }\n+    }};\n+}\n+struct AvgAccumulator {\n+    expr: Arc<dyn PhysicalExpr>,\n+    sum: Option<f64>,\n+    count: Option<i64>,\n+}\n+\n+impl Accumulator for AvgAccumulator {\n+    fn accumulate(&mut self, batch: &RecordBatch, row_index: usize) -> Result<()> {\n+        let array = self.expr.evaluate(batch)?;\n+        match self.expr.data_type(batch.schema())? {\n+            DataType::Int8 => avg_accumulate!(self, array, row_index, Int8Array),\n+            DataType::Int16 => avg_accumulate!(self, array, row_index, Int16Array),\n+            DataType::Int32 => avg_accumulate!(self, array, row_index, Int32Array),\n+            DataType::Int64 => avg_accumulate!(self, array, row_index, Int64Array),\n+            DataType::UInt8 => avg_accumulate!(self, array, row_index, UInt8Array),\n+            DataType::UInt16 => avg_accumulate!(self, array, row_index, UInt16Array),\n+            DataType::UInt32 => avg_accumulate!(self, array, row_index, UInt32Array),\n+            DataType::UInt64 => avg_accumulate!(self, array, row_index, UInt64Array),\n+            DataType::Float32 => avg_accumulate!(self, array, row_index, Float32Array),\n+            DataType::Float64 => avg_accumulate!(self, array, row_index, Float64Array),\n+            other => Err(ExecutionError::General(format!(\n+                \"SUM does not support {:?}\",\n+                other\n+            ))),\n+        }\n+    }\n+\n+    fn get_value(&self) -> Result<Option<ScalarValue>> {\n+        match self.sum {\n+            Some(_) => Ok(Some(ScalarValue::Float64(\n+                self.sum.unwrap() / self.count.unwrap() as f64,\n \n Review comment:\n   can we avoid `unwrap`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T00:23:08.615+0000",
                    "updated": "2019-10-04T00:23:08.615+0000",
                    "started": "2019-10-04T00:23:08.614+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323086",
                    "issueId": "13258161"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258161/worklog/323391",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alippai commented on pull request #5558: ARROW-6658: [Rust][Datafusion] Implement AVG expression\nURL: https://github.com/apache/arrow/pull/5558#discussion_r331478807\n \n \n\n ##########\n File path: rust/datafusion/src/execution/physical_plan/expressions.rs\n ##########\n @@ -199,6 +199,121 @@ pub fn sum(expr: Arc<dyn PhysicalExpr>) -> Arc<dyn AggregateExpr> {\n     Arc::new(Sum::new(expr))\n }\n \n+/// AVG aggregate expression\n+pub struct Avg {\n+    expr: Arc<dyn PhysicalExpr>,\n+}\n+\n+impl Avg {\n+    /// Create a new AVG aggregate function\n+    pub fn new(expr: Arc<dyn PhysicalExpr>) -> Self {\n+        Self { expr }\n+    }\n+}\n+\n+impl AggregateExpr for Avg {\n+    fn name(&self) -> String {\n+        \"AVG\".to_string()\n+    }\n+\n+    fn data_type(&self, input_schema: &Schema) -> Result<DataType> {\n+        match self.expr.data_type(input_schema)? {\n+            DataType::Int8\n+            | DataType::Int16\n+            | DataType::Int32\n+            | DataType::Int64\n+            | DataType::UInt8\n+            | DataType::UInt16\n+            | DataType::UInt32\n+            | DataType::UInt64\n+            | DataType::Float32\n+            | DataType::Float64 => Ok(DataType::Float64),\n+            other => Err(ExecutionError::General(format!(\n+                \"AVG does not support {:?}\",\n+                other\n+            ))),\n+        }\n+    }\n+\n+    fn create_accumulator(&self) -> Rc<RefCell<dyn Accumulator>> {\n+        Rc::new(RefCell::new(AvgAccumulator {\n+            expr: self.expr.clone(),\n+            sum: None,\n+            count: None,\n+        }))\n+    }\n+\n+    fn create_combiner(&self, column_index: usize) -> Arc<dyn AggregateExpr> {\n+        Arc::new(Avg::new(Arc::new(Column::new(column_index))))\n+    }\n+}\n+\n+macro_rules! avg_accumulate {\n+    ($SELF:ident, $ARRAY:ident, $ROW_INDEX:expr, $ARRAY_TYPE:ident) => {{\n+        if let Some(array) = $ARRAY.as_any().downcast_ref::<$ARRAY_TYPE>() {\n+            if $ARRAY.is_valid($ROW_INDEX) {\n+                let value = array.value($ROW_INDEX);\n+                match $SELF.sum {\n+                    Some(n) => {\n+                        $SELF.sum = Some(n + value as f64);\n+                        $SELF.count = Some($SELF.count.unwrap() + 1);\n+                    }\n+                    None => {\n+                        $SELF.sum = Some(value as f64);\n+                        $SELF.count = Some(1);\n+                    }\n+                };\n+            }\n+            Ok(())\n+        } else {\n+            Err(ExecutionError::General(\n+                \"Failed to downcast array\".to_string(),\n+            ))\n+        }\n+    }};\n+}\n+struct AvgAccumulator {\n+    expr: Arc<dyn PhysicalExpr>,\n+    sum: Option<f64>,\n+    count: Option<i64>,\n+}\n+\n+impl Accumulator for AvgAccumulator {\n+    fn accumulate(&mut self, batch: &RecordBatch, row_index: usize) -> Result<()> {\n+        let array = self.expr.evaluate(batch)?;\n+        match self.expr.data_type(batch.schema())? {\n+            DataType::Int8 => avg_accumulate!(self, array, row_index, Int8Array),\n+            DataType::Int16 => avg_accumulate!(self, array, row_index, Int16Array),\n+            DataType::Int32 => avg_accumulate!(self, array, row_index, Int32Array),\n+            DataType::Int64 => avg_accumulate!(self, array, row_index, Int64Array),\n+            DataType::UInt8 => avg_accumulate!(self, array, row_index, UInt8Array),\n+            DataType::UInt16 => avg_accumulate!(self, array, row_index, UInt16Array),\n+            DataType::UInt32 => avg_accumulate!(self, array, row_index, UInt32Array),\n+            DataType::UInt64 => avg_accumulate!(self, array, row_index, UInt64Array),\n+            DataType::Float32 => avg_accumulate!(self, array, row_index, Float32Array),\n+            DataType::Float64 => avg_accumulate!(self, array, row_index, Float64Array),\n+            other => Err(ExecutionError::General(format!(\n+                \"SUM does not support {:?}\",\n+                other\n+            ))),\n+        }\n+    }\n+\n+    fn get_value(&self) -> Result<Option<ScalarValue>> {\n+        match self.sum {\n+            Some(_) => Ok(Some(ScalarValue::Float64(\n+                self.sum.unwrap() / self.count.unwrap() as f64,\n \n Review comment:\n   The change removes the assert that if `sum` has value then `count` has too. While it's correct assumption it's kinda weird that instead of throwing it resets the accumulator. (I don't think your change shouldn't land or would worth improving, so \u2714\ufe0f)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T12:37:11.323+0000",
                    "updated": "2019-10-04T12:37:11.323+0000",
                    "started": "2019-10-04T12:37:11.323+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323391",
                    "issueId": "13258161"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258161/worklog/323393",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alippai commented on pull request #5558: ARROW-6658: [Rust][Datafusion] Implement AVG expression\nURL: https://github.com/apache/arrow/pull/5558#discussion_r331478807\n \n \n\n ##########\n File path: rust/datafusion/src/execution/physical_plan/expressions.rs\n ##########\n @@ -199,6 +199,121 @@ pub fn sum(expr: Arc<dyn PhysicalExpr>) -> Arc<dyn AggregateExpr> {\n     Arc::new(Sum::new(expr))\n }\n \n+/// AVG aggregate expression\n+pub struct Avg {\n+    expr: Arc<dyn PhysicalExpr>,\n+}\n+\n+impl Avg {\n+    /// Create a new AVG aggregate function\n+    pub fn new(expr: Arc<dyn PhysicalExpr>) -> Self {\n+        Self { expr }\n+    }\n+}\n+\n+impl AggregateExpr for Avg {\n+    fn name(&self) -> String {\n+        \"AVG\".to_string()\n+    }\n+\n+    fn data_type(&self, input_schema: &Schema) -> Result<DataType> {\n+        match self.expr.data_type(input_schema)? {\n+            DataType::Int8\n+            | DataType::Int16\n+            | DataType::Int32\n+            | DataType::Int64\n+            | DataType::UInt8\n+            | DataType::UInt16\n+            | DataType::UInt32\n+            | DataType::UInt64\n+            | DataType::Float32\n+            | DataType::Float64 => Ok(DataType::Float64),\n+            other => Err(ExecutionError::General(format!(\n+                \"AVG does not support {:?}\",\n+                other\n+            ))),\n+        }\n+    }\n+\n+    fn create_accumulator(&self) -> Rc<RefCell<dyn Accumulator>> {\n+        Rc::new(RefCell::new(AvgAccumulator {\n+            expr: self.expr.clone(),\n+            sum: None,\n+            count: None,\n+        }))\n+    }\n+\n+    fn create_combiner(&self, column_index: usize) -> Arc<dyn AggregateExpr> {\n+        Arc::new(Avg::new(Arc::new(Column::new(column_index))))\n+    }\n+}\n+\n+macro_rules! avg_accumulate {\n+    ($SELF:ident, $ARRAY:ident, $ROW_INDEX:expr, $ARRAY_TYPE:ident) => {{\n+        if let Some(array) = $ARRAY.as_any().downcast_ref::<$ARRAY_TYPE>() {\n+            if $ARRAY.is_valid($ROW_INDEX) {\n+                let value = array.value($ROW_INDEX);\n+                match $SELF.sum {\n+                    Some(n) => {\n+                        $SELF.sum = Some(n + value as f64);\n+                        $SELF.count = Some($SELF.count.unwrap() + 1);\n+                    }\n+                    None => {\n+                        $SELF.sum = Some(value as f64);\n+                        $SELF.count = Some(1);\n+                    }\n+                };\n+            }\n+            Ok(())\n+        } else {\n+            Err(ExecutionError::General(\n+                \"Failed to downcast array\".to_string(),\n+            ))\n+        }\n+    }};\n+}\n+struct AvgAccumulator {\n+    expr: Arc<dyn PhysicalExpr>,\n+    sum: Option<f64>,\n+    count: Option<i64>,\n+}\n+\n+impl Accumulator for AvgAccumulator {\n+    fn accumulate(&mut self, batch: &RecordBatch, row_index: usize) -> Result<()> {\n+        let array = self.expr.evaluate(batch)?;\n+        match self.expr.data_type(batch.schema())? {\n+            DataType::Int8 => avg_accumulate!(self, array, row_index, Int8Array),\n+            DataType::Int16 => avg_accumulate!(self, array, row_index, Int16Array),\n+            DataType::Int32 => avg_accumulate!(self, array, row_index, Int32Array),\n+            DataType::Int64 => avg_accumulate!(self, array, row_index, Int64Array),\n+            DataType::UInt8 => avg_accumulate!(self, array, row_index, UInt8Array),\n+            DataType::UInt16 => avg_accumulate!(self, array, row_index, UInt16Array),\n+            DataType::UInt32 => avg_accumulate!(self, array, row_index, UInt32Array),\n+            DataType::UInt64 => avg_accumulate!(self, array, row_index, UInt64Array),\n+            DataType::Float32 => avg_accumulate!(self, array, row_index, Float32Array),\n+            DataType::Float64 => avg_accumulate!(self, array, row_index, Float64Array),\n+            other => Err(ExecutionError::General(format!(\n+                \"SUM does not support {:?}\",\n+                other\n+            ))),\n+        }\n+    }\n+\n+    fn get_value(&self) -> Result<Option<ScalarValue>> {\n+        match self.sum {\n+            Some(_) => Ok(Some(ScalarValue::Float64(\n+                self.sum.unwrap() / self.count.unwrap() as f64,\n \n Review comment:\n   The change removes the assert that if `sum` has value then `count` has too. While it's a correct assumption it's kinda weird that instead of panic it resets the accumulator. (I don't think your change shouldn't land or would worth improving, so \u2714\ufe0f)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T12:37:41.756+0000",
                    "updated": "2019-10-04T12:37:41.756+0000",
                    "started": "2019-10-04T12:37:41.756+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323393",
                    "issueId": "13258161"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258161/worklog/323816",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5558: ARROW-6658: [Rust][Datafusion] Implement AVG expression\nURL: https://github.com/apache/arrow/pull/5558\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-05T00:16:53.019+0000",
                    "updated": "2019-10-05T00:16:53.019+0000",
                    "started": "2019-10-05T00:16:53.019+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323816",
                    "issueId": "13258161"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 6000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5f3452b[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4396ed74[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5d5ddbf5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@29d47067[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@63c4344b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@617a0027[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@52cbfd8e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5896e8f8[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ab2e9cd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2b78a984[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@265216e8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@496cfbf2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6000,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Oct 05 00:16:55 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-10-05T00:16:55.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6658/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-09-22T16:33:10.000+0000",
        "updated": "2019-10-08T17:54:29.000+0000",
        "timeoriginalestimate": null,
        "description": "Implement AVG aggregate expression. See COUNT and SUM for inspiration.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Implement AVG aggregate expression",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258161/comment/16944929",
                    "id": "16944929",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 5558\n[https://github.com/apache/arrow/pull/5558]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2019-10-05T00:16:55.817+0000",
                    "updated": "2019-10-05T00:16:55.817+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z06w9k:",
        "customfield_12314139": null
    }
}