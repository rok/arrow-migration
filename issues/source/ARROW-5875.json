{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13243693",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243693",
    "key": "ARROW-5875",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334621",
                "id": "12334621",
                "name": "FlightRPC"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333774",
                "id": "12333774",
                "name": "Integration",
                "description": "Issues related to integration / compatibility tests between implementations"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5875/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 23,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243693/worklog/402984",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6617: ARROW-5875: [FlightRPC] integration tests for Flight features\nURL: https://github.com/apache/arrow/pull/6617\n \n \n   This is only a minimal test (currently the basic auth protobuf). I have more tests, but they require other fixes, so I'd rather get the basic framework down and then add to it, over creating an enormous review.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-13T17:00:36.282+0000",
                    "updated": "2020-03-13T17:00:36.282+0000",
                    "started": "2020-03-13T17:00:36.282+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "402984",
                    "issueId": "13243693"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243693/worklog/402986",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6617: ARROW-5875: [FlightRPC] integration tests for Flight features\nURL: https://github.com/apache/arrow/pull/6617#issuecomment-598822302\n \n \n   https://issues.apache.org/jira/browse/ARROW-5875\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-13T17:02:40.556+0000",
                    "updated": "2020-03-13T17:02:40.556+0000",
                    "started": "2020-03-13T17:02:40.556+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "402986",
                    "issueId": "13243693"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243693/worklog/407239",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6617: ARROW-5875: [FlightRPC] integration tests for Flight features\nURL: https://github.com/apache/arrow/pull/6617#discussion_r395825848\n \n \n\n ##########\n File path: cpp/src/arrow/flight/test_integration.cc\n ##########\n @@ -0,0 +1,118 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/test_integration.h\"\n+#include \"arrow/flight/client_middleware.h\"\n+#include \"arrow/flight/server_middleware.h\"\n+#include \"arrow/flight/test_util.h\"\n+#include \"arrow/flight/types.h\"\n+#include \"arrow/ipc/dictionary.h\"\n+\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+namespace arrow {\n+namespace flight {\n+\n+Status AssertEqual(const arrow::Schema& expected, const arrow::Schema& actual) {\n+  if (!expected.Equals(actual)) {\n+    std::cerr << \"Expected schema: \" << expected << std::endl;\n+    std::cerr << \"Actual schema  : \" << actual << std::endl;\n+    return Status::Invalid(\"Schema mismatch\");\n+  }\n+  return Status::OK();\n+}\n+\n+/// \\brief The server for the basic auth integration test.\n+class AuthBasicProtoServer : public FlightServerBase {\n+  Status DoAction(const ServerCallContext& context, const Action& action,\n+                  std::unique_ptr<ResultStream>* result) override {\n+    // Respond with the authenticated username.\n+    std::shared_ptr<Buffer> buf;\n+    RETURN_NOT_OK(Buffer::FromString(context.peer_identity(), &buf));\n+    *result = std::unique_ptr<ResultStream>(new SimpleResultStream({Result{buf}}));\n+    return Status::OK();\n+  }\n+};\n+\n+// The expected username for the basic auth integration test.\n+constexpr auto kAuthUsername = \"arrow\";\n+// The expected password for the basic auth integration test.\n+constexpr auto kAuthPassword = \"flight\";\n+\n+/// \\brief A scenario testing the basic auth protobuf.\n+class AuthBasicProtoScenario : public Scenario {\n+  Status MakeServer(std::unique_ptr<FlightServerBase>* server,\n+                    FlightServerOptions* options) override {\n+    server->reset(new AuthBasicProtoServer());\n+    options->auth_handler =\n+        std::make_shared<TestServerBasicAuthHandler>(kAuthUsername, kAuthPassword);\n+    return Status::OK();\n+  }\n+\n+  Status MakeClient(FlightClientOptions* options) override { return Status::OK(); }\n+\n+  Status RunClient(const Location& location,\n \n Review comment:\n   `location` is not used -- what is it for?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-20T21:01:39.001+0000",
                    "updated": "2020-03-20T21:01:39.001+0000",
                    "started": "2020-03-20T21:01:39.000+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "407239",
                    "issueId": "13243693"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243693/worklog/407240",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6617: ARROW-5875: [FlightRPC] integration tests for Flight features\nURL: https://github.com/apache/arrow/pull/6617#discussion_r395824941\n \n \n\n ##########\n File path: cpp/src/arrow/flight/test_integration.cc\n ##########\n @@ -0,0 +1,118 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/test_integration.h\"\n+#include \"arrow/flight/client_middleware.h\"\n+#include \"arrow/flight/server_middleware.h\"\n+#include \"arrow/flight/test_util.h\"\n+#include \"arrow/flight/types.h\"\n+#include \"arrow/ipc/dictionary.h\"\n+\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+namespace arrow {\n+namespace flight {\n+\n+Status AssertEqual(const arrow::Schema& expected, const arrow::Schema& actual) {\n \n Review comment:\n   Using AssertSchemaEqual if you don't mind linking to `libarrow_testing`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-20T21:01:39.151+0000",
                    "updated": "2020-03-20T21:01:39.151+0000",
                    "started": "2020-03-20T21:01:39.151+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "407240",
                    "issueId": "13243693"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243693/worklog/407241",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6617: ARROW-5875: [FlightRPC] integration tests for Flight features\nURL: https://github.com/apache/arrow/pull/6617#discussion_r395827176\n \n \n\n ##########\n File path: cpp/src/arrow/flight/test_integration.cc\n ##########\n @@ -0,0 +1,118 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/test_integration.h\"\n+#include \"arrow/flight/client_middleware.h\"\n+#include \"arrow/flight/server_middleware.h\"\n+#include \"arrow/flight/test_util.h\"\n+#include \"arrow/flight/types.h\"\n+#include \"arrow/ipc/dictionary.h\"\n+\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+namespace arrow {\n+namespace flight {\n+\n+Status AssertEqual(const arrow::Schema& expected, const arrow::Schema& actual) {\n+  if (!expected.Equals(actual)) {\n+    std::cerr << \"Expected schema: \" << expected << std::endl;\n+    std::cerr << \"Actual schema  : \" << actual << std::endl;\n+    return Status::Invalid(\"Schema mismatch\");\n+  }\n+  return Status::OK();\n+}\n+\n+/// \\brief The server for the basic auth integration test.\n+class AuthBasicProtoServer : public FlightServerBase {\n+  Status DoAction(const ServerCallContext& context, const Action& action,\n+                  std::unique_ptr<ResultStream>* result) override {\n+    // Respond with the authenticated username.\n+    std::shared_ptr<Buffer> buf;\n+    RETURN_NOT_OK(Buffer::FromString(context.peer_identity(), &buf));\n+    *result = std::unique_ptr<ResultStream>(new SimpleResultStream({Result{buf}}));\n+    return Status::OK();\n+  }\n+};\n+\n+// The expected username for the basic auth integration test.\n+constexpr auto kAuthUsername = \"arrow\";\n+// The expected password for the basic auth integration test.\n+constexpr auto kAuthPassword = \"flight\";\n+\n+/// \\brief A scenario testing the basic auth protobuf.\n+class AuthBasicProtoScenario : public Scenario {\n+  Status MakeServer(std::unique_ptr<FlightServerBase>* server,\n+                    FlightServerOptions* options) override {\n+    server->reset(new AuthBasicProtoServer());\n+    options->auth_handler =\n+        std::make_shared<TestServerBasicAuthHandler>(kAuthUsername, kAuthPassword);\n+    return Status::OK();\n+  }\n+\n+  Status MakeClient(FlightClientOptions* options) override { return Status::OK(); }\n+\n+  Status RunClient(const Location& location,\n+                   std::unique_ptr<FlightClient> client) override {\n+    Action action;\n+    std::unique_ptr<ResultStream> stream;\n+    std::shared_ptr<FlightStatusDetail> detail;\n+    const auto& status = client->DoAction(action, &stream);\n+    detail = FlightStatusDetail::UnwrapStatus(status);\n+    // This client is unauthenticated and should fail.\n+    if (detail == nullptr) {\n+      return Status::Invalid(\"Expected UNAUTHENTICATED but got \", status.ToString());\n+    }\n+    if (detail->code() != FlightStatusCode::Unauthenticated) {\n+      return Status::Invalid(\"Expected UNAUTHENTICATED but got \", detail->ToString());\n+    }\n+\n+    auto client_handler = std::unique_ptr<ClientAuthHandler>(\n+        new TestClientBasicAuthHandler(kAuthUsername, kAuthPassword));\n+    RETURN_NOT_OK(client->Authenticate({}, std::move(client_handler)));\n+    RETURN_NOT_OK(client->DoAction(action, &stream));\n+    std::unique_ptr<Result> result;\n+    RETURN_NOT_OK(stream->Next(&result));\n+    if (!result) {\n+      return Status::Invalid(\"Action result stream ended early\");\n+    }\n+    const auto username = result->body->ToString();\n+    if (kAuthUsername != username) {\n+      return Status::Invalid(\"Got wrong username; expected\", kAuthUsername, \"but got\",\n+                             username);\n+    }\n+    RETURN_NOT_OK(stream->Next(&result));\n+    if (result) {\n+      return Status::Invalid(\"Action result stream has too many entries\");\n+    }\n+    return Status::OK();\n \n Review comment:\n   You could make a helper function to validate the results of `DoAction` like\r\n   \r\n   ```\r\n   Status CheckActionResults(std::vector<std::string>> results, ResultStream* stream);\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-20T21:01:39.233+0000",
                    "updated": "2020-03-20T21:01:39.233+0000",
                    "started": "2020-03-20T21:01:39.233+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "407241",
                    "issueId": "13243693"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243693/worklog/407243",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6617: ARROW-5875: [FlightRPC] integration tests for Flight features\nURL: https://github.com/apache/arrow/pull/6617#discussion_r395830056\n \n \n\n ##########\n File path: cpp/src/arrow/flight/test_integration_client.cc\n ##########\n @@ -119,68 +121,103 @@ arrow::Status ConsumeFlightLocation(const arrow::flight::Location& location,\n   return ReadToTable(*stream, retrieved_data);\n }\n \n-int main(int argc, char** argv) {\n-  gflags::SetUsageMessage(\"Integration testing client for Flight.\");\n-  gflags::ParseCommandLineFlags(&argc, &argv, true);\n-\n-  std::unique_ptr<arrow::flight::FlightClient> client;\n-  arrow::flight::Location location;\n-  ABORT_NOT_OK(arrow::flight::Location::ForGrpcTcp(FLAGS_host, FLAGS_port, &location));\n-  ABORT_NOT_OK(arrow::flight::FlightClient::Connect(location, &client));\n-\n-  arrow::flight::FlightDescriptor descr{\n-      arrow::flight::FlightDescriptor::PATH, \"\", {FLAGS_path}};\n-\n-  // 1. Put the data to the server.\n-  std::unique_ptr<arrow::ipc::internal::json::JsonReader> reader;\n-  std::cout << \"Opening JSON file '\" << FLAGS_path << \"'\" << std::endl;\n-  auto in_file = *arrow::io::ReadableFile::Open(FLAGS_path);\n-  ABORT_NOT_OK(arrow::ipc::internal::json::JsonReader::Open(arrow::default_memory_pool(),\n-                                                            in_file, &reader));\n-\n-  std::shared_ptr<arrow::Table> original_data;\n-  ABORT_NOT_OK(ReadToTable(reader, &original_data));\n-\n-  std::unique_ptr<arrow::flight::FlightStreamWriter> write_stream;\n-  std::unique_ptr<arrow::flight::FlightMetadataReader> metadata_reader;\n-  ABORT_NOT_OK(client->DoPut(descr, reader->schema(), &write_stream, &metadata_reader));\n-  std::unique_ptr<arrow::RecordBatchReader> table_reader(\n-      new arrow::TableBatchReader(*original_data));\n-  ABORT_NOT_OK(UploadReaderToFlight(table_reader.get(), *write_stream, *metadata_reader));\n-\n-  // 2. Get the ticket for the data.\n-  std::unique_ptr<arrow::flight::FlightInfo> info;\n-  ABORT_NOT_OK(client->GetFlightInfo(descr, &info));\n-\n-  std::shared_ptr<arrow::Schema> schema;\n-  arrow::ipc::DictionaryMemo dict_memo;\n-  ABORT_NOT_OK(info->GetSchema(&dict_memo, &schema));\n-\n-  if (info->endpoints().size() == 0) {\n-    std::cerr << \"No endpoints returned from Flight server.\" << std::endl;\n-    return -1;\n+class IntegrationTestScenario : public arrow::flight::Scenario {\n+ public:\n+  arrow::Status MakeServer(std::unique_ptr<arrow::flight::FlightServerBase>* server,\n+                           arrow::flight::FlightServerOptions* options) override {\n+    (void)server;\n+    (void)options;\n \n Review comment:\n   You can use `ARROW_UNUSED`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-20T21:01:39.237+0000",
                    "updated": "2020-03-20T21:01:39.237+0000",
                    "started": "2020-03-20T21:01:39.236+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "407243",
                    "issueId": "13243693"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243693/worklog/407242",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6617: ARROW-5875: [FlightRPC] integration tests for Flight features\nURL: https://github.com/apache/arrow/pull/6617#discussion_r395887509\n \n \n\n ##########\n File path: dev/archery/archery/integration/scenario.py\n ##########\n @@ -0,0 +1,32 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+from collections import namedtuple\n+\n+\n+class Scenario(namedtuple(\"_Scenario\", [\"name\", \"description\", \"skip\"])):\n+    \"\"\"\n+    An integration test scenario for Arrow Flight.\n+\n+    Does not correspond to a particular IPC JSON file.\n+    \"\"\"\n+    __slots__ = ()\n+\n+    def __new__(cls, name, description, skip=None):\n+        skip = skip or set()\n+        return super().__new__(\n+            cls, name=name, description=description, skip=skip)\n \n Review comment:\n   Unless you expect this to be used in performance/memory use sensitive contexts, probably a \"boring\" object would be clearer:\r\n   \r\n   ```python\r\n   class Scenario:\r\n       \"\"\"\r\n       An integration test scenario for Arrow Flight.\r\n       Does not correspond to a particular IPC JSON file.\r\n       \"\"\"\r\n       def __init__(self, name, description, skip=None):\r\n           self.name = name\r\n           self.description = description\r\n           self.skip = skip or set()\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-20T21:01:39.237+0000",
                    "updated": "2020-03-20T21:01:39.237+0000",
                    "started": "2020-03-20T21:01:39.236+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "407242",
                    "issueId": "13243693"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243693/worklog/407244",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6617: ARROW-5875: [FlightRPC] integration tests for Flight features\nURL: https://github.com/apache/arrow/pull/6617#discussion_r395883661\n \n \n\n ##########\n File path: cpp/src/arrow/flight/test_integration_server.cc\n ##########\n @@ -119,20 +125,49 @@ class FlightIntegrationTestServer : public FlightServerBase {\n   std::unordered_map<std::string, std::shared_ptr<arrow::Table>> uploaded_chunks;\n };\n \n+class IntegrationTestScenario : public Scenario {\n+ public:\n+  Status MakeServer(std::unique_ptr<FlightServerBase>* server,\n+                    FlightServerOptions* options) override {\n+    server->reset(new FlightIntegrationTestServer());\n+    return Status::OK();\n+  }\n+\n+  Status MakeClient(FlightClientOptions* options) override {\n+    (void)options;\n+    return Status::NotImplemented(\"Not implemented, see test_integration_client.cc\");\n+  }\n+\n+  Status RunClient(const Location& location,\n+                   std::unique_ptr<FlightClient> client) override {\n+    (void)location;\n+    (void)client;\n \n Review comment:\n   ARROW_UNUSED\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-20T21:01:39.238+0000",
                    "updated": "2020-03-20T21:01:39.238+0000",
                    "started": "2020-03-20T21:01:39.237+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "407244",
                    "issueId": "13243693"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243693/worklog/407310",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6617: ARROW-5875: [FlightRPC] integration tests for Flight features\nURL: https://github.com/apache/arrow/pull/6617#discussion_r395925527\n \n \n\n ##########\n File path: cpp/src/arrow/flight/test_integration.cc\n ##########\n @@ -0,0 +1,118 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/test_integration.h\"\n+#include \"arrow/flight/client_middleware.h\"\n+#include \"arrow/flight/server_middleware.h\"\n+#include \"arrow/flight/test_util.h\"\n+#include \"arrow/flight/types.h\"\n+#include \"arrow/ipc/dictionary.h\"\n+\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+namespace arrow {\n+namespace flight {\n+\n+Status AssertEqual(const arrow::Schema& expected, const arrow::Schema& actual) {\n+  if (!expected.Equals(actual)) {\n+    std::cerr << \"Expected schema: \" << expected << std::endl;\n+    std::cerr << \"Actual schema  : \" << actual << std::endl;\n+    return Status::Invalid(\"Schema mismatch\");\n+  }\n+  return Status::OK();\n+}\n+\n+/// \\brief The server for the basic auth integration test.\n+class AuthBasicProtoServer : public FlightServerBase {\n+  Status DoAction(const ServerCallContext& context, const Action& action,\n+                  std::unique_ptr<ResultStream>* result) override {\n+    // Respond with the authenticated username.\n+    std::shared_ptr<Buffer> buf;\n+    RETURN_NOT_OK(Buffer::FromString(context.peer_identity(), &buf));\n+    *result = std::unique_ptr<ResultStream>(new SimpleResultStream({Result{buf}}));\n+    return Status::OK();\n+  }\n+};\n+\n+// The expected username for the basic auth integration test.\n+constexpr auto kAuthUsername = \"arrow\";\n+// The expected password for the basic auth integration test.\n+constexpr auto kAuthPassword = \"flight\";\n+\n+/// \\brief A scenario testing the basic auth protobuf.\n+class AuthBasicProtoScenario : public Scenario {\n+  Status MakeServer(std::unique_ptr<FlightServerBase>* server,\n+                    FlightServerOptions* options) override {\n+    server->reset(new AuthBasicProtoServer());\n+    options->auth_handler =\n+        std::make_shared<TestServerBasicAuthHandler>(kAuthUsername, kAuthPassword);\n+    return Status::OK();\n+  }\n+\n+  Status MakeClient(FlightClientOptions* options) override { return Status::OK(); }\n+\n+  Status RunClient(const Location& location,\n+                   std::unique_ptr<FlightClient> client) override {\n+    Action action;\n+    std::unique_ptr<ResultStream> stream;\n+    std::shared_ptr<FlightStatusDetail> detail;\n+    const auto& status = client->DoAction(action, &stream);\n+    detail = FlightStatusDetail::UnwrapStatus(status);\n+    // This client is unauthenticated and should fail.\n+    if (detail == nullptr) {\n+      return Status::Invalid(\"Expected UNAUTHENTICATED but got \", status.ToString());\n+    }\n+    if (detail->code() != FlightStatusCode::Unauthenticated) {\n+      return Status::Invalid(\"Expected UNAUTHENTICATED but got \", detail->ToString());\n+    }\n+\n+    auto client_handler = std::unique_ptr<ClientAuthHandler>(\n+        new TestClientBasicAuthHandler(kAuthUsername, kAuthPassword));\n+    RETURN_NOT_OK(client->Authenticate({}, std::move(client_handler)));\n+    RETURN_NOT_OK(client->DoAction(action, &stream));\n+    std::unique_ptr<Result> result;\n+    RETURN_NOT_OK(stream->Next(&result));\n+    if (!result) {\n+      return Status::Invalid(\"Action result stream ended early\");\n+    }\n+    const auto username = result->body->ToString();\n+    if (kAuthUsername != username) {\n+      return Status::Invalid(\"Got wrong username; expected\", kAuthUsername, \"but got\",\n+                             username);\n+    }\n+    RETURN_NOT_OK(stream->Next(&result));\n+    if (result) {\n+      return Status::Invalid(\"Action result stream has too many entries\");\n+    }\n+    return Status::OK();\n \n Review comment:\n   You could even run the DoAction inside the helper function\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-20T23:02:31.747+0000",
                    "updated": "2020-03-20T23:02:31.747+0000",
                    "started": "2020-03-20T23:02:31.746+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "407310",
                    "issueId": "13243693"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243693/worklog/407452",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6617: ARROW-5875: [FlightRPC] integration tests for Flight features\nURL: https://github.com/apache/arrow/pull/6617#discussion_r395998977\n \n \n\n ##########\n File path: cpp/src/arrow/flight/test_integration.cc\n ##########\n @@ -0,0 +1,118 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/test_integration.h\"\n+#include \"arrow/flight/client_middleware.h\"\n+#include \"arrow/flight/server_middleware.h\"\n+#include \"arrow/flight/test_util.h\"\n+#include \"arrow/flight/types.h\"\n+#include \"arrow/ipc/dictionary.h\"\n+\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+namespace arrow {\n+namespace flight {\n+\n+Status AssertEqual(const arrow::Schema& expected, const arrow::Schema& actual) {\n \n Review comment:\n   I realized this isn't used even, so I've deleted it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-21T14:51:57.768+0000",
                    "updated": "2020-03-21T14:51:57.768+0000",
                    "started": "2020-03-21T14:51:57.767+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "407452",
                    "issueId": "13243693"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243693/worklog/407453",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6617: ARROW-5875: [FlightRPC] integration tests for Flight features\nURL: https://github.com/apache/arrow/pull/6617#discussion_r395999012\n \n \n\n ##########\n File path: cpp/src/arrow/flight/test_integration.cc\n ##########\n @@ -0,0 +1,118 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/test_integration.h\"\n+#include \"arrow/flight/client_middleware.h\"\n+#include \"arrow/flight/server_middleware.h\"\n+#include \"arrow/flight/test_util.h\"\n+#include \"arrow/flight/types.h\"\n+#include \"arrow/ipc/dictionary.h\"\n+\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+namespace arrow {\n+namespace flight {\n+\n+Status AssertEqual(const arrow::Schema& expected, const arrow::Schema& actual) {\n+  if (!expected.Equals(actual)) {\n+    std::cerr << \"Expected schema: \" << expected << std::endl;\n+    std::cerr << \"Actual schema  : \" << actual << std::endl;\n+    return Status::Invalid(\"Schema mismatch\");\n+  }\n+  return Status::OK();\n+}\n+\n+/// \\brief The server for the basic auth integration test.\n+class AuthBasicProtoServer : public FlightServerBase {\n+  Status DoAction(const ServerCallContext& context, const Action& action,\n+                  std::unique_ptr<ResultStream>* result) override {\n+    // Respond with the authenticated username.\n+    std::shared_ptr<Buffer> buf;\n+    RETURN_NOT_OK(Buffer::FromString(context.peer_identity(), &buf));\n+    *result = std::unique_ptr<ResultStream>(new SimpleResultStream({Result{buf}}));\n+    return Status::OK();\n+  }\n+};\n+\n+// The expected username for the basic auth integration test.\n+constexpr auto kAuthUsername = \"arrow\";\n+// The expected password for the basic auth integration test.\n+constexpr auto kAuthPassword = \"flight\";\n+\n+/// \\brief A scenario testing the basic auth protobuf.\n+class AuthBasicProtoScenario : public Scenario {\n+  Status MakeServer(std::unique_ptr<FlightServerBase>* server,\n+                    FlightServerOptions* options) override {\n+    server->reset(new AuthBasicProtoServer());\n+    options->auth_handler =\n+        std::make_shared<TestServerBasicAuthHandler>(kAuthUsername, kAuthPassword);\n+    return Status::OK();\n+  }\n+\n+  Status MakeClient(FlightClientOptions* options) override { return Status::OK(); }\n+\n+  Status RunClient(const Location& location,\n \n Review comment:\n   It was used in test_integration_client in case the server didn't return any locations in an endpoint - I've now fixed that in the server.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-21T14:52:23.430+0000",
                    "updated": "2020-03-21T14:52:23.430+0000",
                    "started": "2020-03-21T14:52:23.429+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "407453",
                    "issueId": "13243693"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243693/worklog/407454",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6617: ARROW-5875: [FlightRPC] integration tests for Flight features\nURL: https://github.com/apache/arrow/pull/6617#discussion_r395999063\n \n \n\n ##########\n File path: dev/archery/archery/integration/scenario.py\n ##########\n @@ -0,0 +1,32 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+from collections import namedtuple\n+\n+\n+class Scenario(namedtuple(\"_Scenario\", [\"name\", \"description\", \"skip\"])):\n+    \"\"\"\n+    An integration test scenario for Arrow Flight.\n+\n+    Does not correspond to a particular IPC JSON file.\n+    \"\"\"\n+    __slots__ = ()\n+\n+    def __new__(cls, name, description, skip=None):\n+        skip = skip or set()\n+        return super().__new__(\n+            cls, name=name, description=description, skip=skip)\n \n Review comment:\n   Good point, I've made this a normal object.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-21T14:52:51.692+0000",
                    "updated": "2020-03-21T14:52:51.692+0000",
                    "started": "2020-03-21T14:52:51.692+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "407454",
                    "issueId": "13243693"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243693/worklog/407455",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6617: ARROW-5875: [FlightRPC] integration tests for Flight features\nURL: https://github.com/apache/arrow/pull/6617#discussion_r395999094\n \n \n\n ##########\n File path: cpp/src/arrow/flight/test_integration.cc\n ##########\n @@ -0,0 +1,118 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/test_integration.h\"\n+#include \"arrow/flight/client_middleware.h\"\n+#include \"arrow/flight/server_middleware.h\"\n+#include \"arrow/flight/test_util.h\"\n+#include \"arrow/flight/types.h\"\n+#include \"arrow/ipc/dictionary.h\"\n+\n+#include <iostream>\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+namespace arrow {\n+namespace flight {\n+\n+Status AssertEqual(const arrow::Schema& expected, const arrow::Schema& actual) {\n+  if (!expected.Equals(actual)) {\n+    std::cerr << \"Expected schema: \" << expected << std::endl;\n+    std::cerr << \"Actual schema  : \" << actual << std::endl;\n+    return Status::Invalid(\"Schema mismatch\");\n+  }\n+  return Status::OK();\n+}\n+\n+/// \\brief The server for the basic auth integration test.\n+class AuthBasicProtoServer : public FlightServerBase {\n+  Status DoAction(const ServerCallContext& context, const Action& action,\n+                  std::unique_ptr<ResultStream>* result) override {\n+    // Respond with the authenticated username.\n+    std::shared_ptr<Buffer> buf;\n+    RETURN_NOT_OK(Buffer::FromString(context.peer_identity(), &buf));\n+    *result = std::unique_ptr<ResultStream>(new SimpleResultStream({Result{buf}}));\n+    return Status::OK();\n+  }\n+};\n+\n+// The expected username for the basic auth integration test.\n+constexpr auto kAuthUsername = \"arrow\";\n+// The expected password for the basic auth integration test.\n+constexpr auto kAuthPassword = \"flight\";\n+\n+/// \\brief A scenario testing the basic auth protobuf.\n+class AuthBasicProtoScenario : public Scenario {\n+  Status MakeServer(std::unique_ptr<FlightServerBase>* server,\n+                    FlightServerOptions* options) override {\n+    server->reset(new AuthBasicProtoServer());\n+    options->auth_handler =\n+        std::make_shared<TestServerBasicAuthHandler>(kAuthUsername, kAuthPassword);\n+    return Status::OK();\n+  }\n+\n+  Status MakeClient(FlightClientOptions* options) override { return Status::OK(); }\n+\n+  Status RunClient(const Location& location,\n+                   std::unique_ptr<FlightClient> client) override {\n+    Action action;\n+    std::unique_ptr<ResultStream> stream;\n+    std::shared_ptr<FlightStatusDetail> detail;\n+    const auto& status = client->DoAction(action, &stream);\n+    detail = FlightStatusDetail::UnwrapStatus(status);\n+    // This client is unauthenticated and should fail.\n+    if (detail == nullptr) {\n+      return Status::Invalid(\"Expected UNAUTHENTICATED but got \", status.ToString());\n+    }\n+    if (detail->code() != FlightStatusCode::Unauthenticated) {\n+      return Status::Invalid(\"Expected UNAUTHENTICATED but got \", detail->ToString());\n+    }\n+\n+    auto client_handler = std::unique_ptr<ClientAuthHandler>(\n+        new TestClientBasicAuthHandler(kAuthUsername, kAuthPassword));\n+    RETURN_NOT_OK(client->Authenticate({}, std::move(client_handler)));\n+    RETURN_NOT_OK(client->DoAction(action, &stream));\n+    std::unique_ptr<Result> result;\n+    RETURN_NOT_OK(stream->Next(&result));\n+    if (!result) {\n+      return Status::Invalid(\"Action result stream ended early\");\n+    }\n+    const auto username = result->body->ToString();\n+    if (kAuthUsername != username) {\n+      return Status::Invalid(\"Got wrong username; expected\", kAuthUsername, \"but got\",\n+                             username);\n+    }\n+    RETURN_NOT_OK(stream->Next(&result));\n+    if (result) {\n+      return Status::Invalid(\"Action result stream has too many entries\");\n+    }\n+    return Status::OK();\n \n Review comment:\n   Good idea, I've moved this into a helper function as suggested.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-21T14:53:15.711+0000",
                    "updated": "2020-03-21T14:53:15.711+0000",
                    "started": "2020-03-21T14:53:15.711+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "407455",
                    "issueId": "13243693"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243693/worklog/407487",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rymurr commented on issue #6617: ARROW-5875: [FlightRPC] integration tests for Flight features\nURL: https://github.com/apache/arrow/pull/6617#issuecomment-602077223\n \n \n   Looks good to me. The only thing I didn't quite understand was the change to `ServerAuthInterceptor` was this required from the integration testing or is this a cosmetic change bundled in?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-21T17:38:03.426+0000",
                    "updated": "2020-03-21T17:38:03.426+0000",
                    "started": "2020-03-21T17:38:03.426+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "407487",
                    "issueId": "13243693"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243693/worklog/407490",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on issue #6617: ARROW-5875: [FlightRPC] integration tests for Flight features\nURL: https://github.com/apache/arrow/pull/6617#issuecomment-602078806\n \n \n   Hmm, that is mostly a cosmetic change bundled in to allow you to override the response code/message, but I can remove the RuntimeException catch as that's unnecessary/too broad.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-21T17:50:07.422+0000",
                    "updated": "2020-03-21T17:50:07.422+0000",
                    "started": "2020-03-21T17:50:07.421+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "407490",
                    "issueId": "13243693"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243693/worklog/407493",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rymurr commented on issue #6617: ARROW-5875: [FlightRPC] integration tests for Flight features\nURL: https://github.com/apache/arrow/pull/6617#issuecomment-602081559\n \n \n   Agreed, that also keeps the behaviour roughly as before (minus the extra info catches)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-21T18:11:03.269+0000",
                    "updated": "2020-03-21T18:11:03.269+0000",
                    "started": "2020-03-21T18:11:03.269+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "407493",
                    "issueId": "13243693"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243693/worklog/407589",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on issue #6617: ARROW-5875: [FlightRPC] integration tests for Flight features\nURL: https://github.com/apache/arrow/pull/6617#issuecomment-602202720\n \n \n   Alright, I've removed the extra catch block from the Java side.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-22T13:41:52.010+0000",
                    "updated": "2020-03-22T13:41:52.010+0000",
                    "started": "2020-03-22T13:41:52.010+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "407589",
                    "issueId": "13243693"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243693/worklog/407607",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rymurr commented on issue #6617: ARROW-5875: [FlightRPC] integration tests for Flight features\nURL: https://github.com/apache/arrow/pull/6617#issuecomment-602218047\n \n \n   :+1:  looks good to me!\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-22T14:39:54.901+0000",
                    "updated": "2020-03-22T14:39:54.901+0000",
                    "started": "2020-03-22T14:39:54.900+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "407607",
                    "issueId": "13243693"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243693/worklog/409582",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on issue #6617: ARROW-5875: [FlightRPC] integration tests for Flight features\nURL: https://github.com/apache/arrow/pull/6617#issuecomment-603905928\n \n \n   I've rebased this to fix merge conflicts. Looks like the Ruby build fails in an unrelated issue, trying to fetch something from sourceforge to build docs.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-25T15:27:44.900+0000",
                    "updated": "2020-03-25T15:27:44.900+0000",
                    "started": "2020-03-25T15:27:44.900+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "409582",
                    "issueId": "13243693"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243693/worklog/423068",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on issue #6617: ARROW-5875: [FlightRPC] integration tests for Flight features\nURL: https://github.com/apache/arrow/pull/6617#issuecomment-614277812\n \n \n   @wesm is this good to merge from your side?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-15T21:01:12.753+0000",
                    "updated": "2020-04-15T21:01:12.753+0000",
                    "started": "2020-04-15T21:01:12.753+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "423068",
                    "issueId": "13243693"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/6",
            "id": "6",
            "description": "A new unit, integration or system test.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/issuetypes/requirement.png",
            "name": "Test",
            "subtask": false
        },
        "timespent": 12000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5c4b9e8f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@34fa3562[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@665cf8ee[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3689062[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@730eb83[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7cc2975b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d588ba5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3a74efec[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a1867d2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@52084785[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6bb4fbc2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@76a272d7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12000,
        "customfield_12312520": null,
        "customfield_12312521": "Fri May 08 19:17:06 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-05-08T19:17:06.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5875/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-07-08T14:06:04.000+0000",
        "updated": "2020-05-08T19:17:06.000+0000",
        "timeoriginalestimate": null,
        "description": "We should test not just wire-format compatibility, but feature-compatibility in Flight integration tests. This may mean adding a separate suite of tests to the integration script.\r\n\r\nFeatures that should be tested include:\r\n * Authentication\r\n * Error & error code propagation\r\n * Cancellation\r\n * Flow control/backpressure",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[FlightRPC] Test RPC features in integration tests",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243693/comment/17102857",
                    "id": "17102857",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 6617\n[https://github.com/apache/arrow/pull/6617]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-05-08T19:17:06.448+0000",
                    "updated": "2020-05-08T19:17:06.448+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z04gm0:",
        "customfield_12314139": null
    }
}