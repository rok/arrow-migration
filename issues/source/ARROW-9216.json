{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13313180",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313180",
    "key": "ARROW-9216",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=frank.du",
            "name": "frank.du",
            "key": "frank.du",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Frank Du",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=frank.du",
            "name": "frank.du",
            "key": "frank.du",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Frank Du",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=frank.du",
            "name": "frank.du",
            "key": "frank.du",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Frank Du",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 13200,
            "total": 13200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13200,
            "total": 13200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9216/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 22,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313180/worklog/450281",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind opened a new pull request #7531:\nURL: https://github.com/apache/arrow/pull/7531\n\n\n   Speedup the typical use case which most data are true values, also add null probability\r\n   test case.\r\n   \r\n   Signed-off-by: Frank Du <frank.du@intel.com>\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-24T07:30:43.729+0000",
                    "updated": "2020-06-24T07:30:43.729+0000",
                    "started": "2020-06-24T07:30:43.729+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "450281",
                    "issueId": "13313180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313180/worklog/450285",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7531:\nURL: https://github.com/apache/arrow/pull/7531#issuecomment-648648342\n\n\n   https://issues.apache.org/jira/browse/ARROW-9216\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-24T07:31:57.187+0000",
                    "updated": "2020-06-24T07:31:57.187+0000",
                    "started": "2020-06-24T07:31:57.187+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "450285",
                    "issueId": "13313180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313180/worklog/450298",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on pull request #7531:\nURL: https://github.com/apache/arrow/pull/7531#issuecomment-648656865\n\n\n   This PR https://github.com/apache/arrow/pull/7532 add the 0.01% benchmark case, I can trigger a benchmark action if 7532 get merged.\r\n   \r\n   Below is the results for 0.01% on my device.\r\n   Before\r\n   ```\r\n   BM_PlainEncodingSpacedBoolean/32768/1          74766 ns        74685 ns         9348 bytes_per_second=418.427M/s null_percent=0.01\r\n   BM_PlainEncodingSpacedFloat/32768/1            29197 ns        29165 ns        23713 bytes_per_second=4.18549G/s null_percent=0.01\r\n   BM_PlainEncodingSpacedDouble/32768/1           31678 ns        31644 ns        22103 bytes_per_second=7.71528G/s null_percent=0.01\r\n   \r\n   BM_PlainDecodingSpacedBoolean/32768/1          34833 ns        34796 ns        20109 bytes_per_second=898.088M/s null_percent=0.01\r\n   BM_PlainDecodingSpacedFloat/32768/1            21615 ns        21591 ns        32197 bytes_per_second=5.65367G/s null_percent=0.01\r\n   BM_PlainDecodingSpacedDouble/32768/1           24647 ns        24621 ns        28162 bytes_per_second=9.91599G/s null_percent=0.01\r\n   ```\r\n   \r\n   After\r\n   ```\r\n   BM_PlainEncodingSpacedBoolean/32768/1          51807 ns        51745 ns        13489 bytes_per_second=603.926M/s null_percent=0.01\r\n   BM_PlainEncodingSpacedFloat/32768/1             7811 ns         7803 ns        84179 bytes_per_second=15.6441G/s null_percent=0.01\r\n   BM_PlainEncodingSpacedDouble/32768/1           13149 ns        13135 ns        49635 bytes_per_second=18.5867G/s null_percent=0.01\r\n   \r\n   BM_PlainDecodingSpacedBoolean/32768/1          18332 ns        18313 ns        38127 bytes_per_second=1.66644G/s null_percent=0.01\r\n   BM_PlainDecodingSpacedFloat/32768/1             6634 ns         6627 ns       102921 bytes_per_second=18.4212G/s null_percent=0.01\r\n   BM_PlainDecodingSpacedDouble/32768/1           16183 ns        16165 ns        42532 bytes_per_second=15.1027G/s null_percent=0.01\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-24T07:49:42.609+0000",
                    "updated": "2020-06-24T07:49:42.609+0000",
                    "started": "2020-06-24T07:49:42.609+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "450298",
                    "issueId": "13313180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313180/worklog/450595",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7531:\nURL: https://github.com/apache/arrow/pull/7531#discussion_r445122603\n\n\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,199 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/align_util.h\"\n+#include \"arrow/util/bit_block_counter.h\"\n+#include \"arrow/util/bitmap_reader.h\"\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+/// \\brief Compress the buffer to spaced, excluding the null entries.\n+///\n+/// \\param[in] src the source buffer\n+/// \\param[in] num_values the size of source buffer\n+/// \\param[in] valid_bits bitmap data indicating position of valid slots\n+/// \\param[in] valid_bits_offset offset into valid_bits\n+/// \\param[out] output the output buffer spaced\n+/// \\return The size of spaced buffer.\n+template <typename T>\n+inline int SpacedCompress(const T* src, int num_values, const uint8_t* valid_bits,\n+                          int64_t valid_bits_offset, T* output) {\n+  int num_valid_values = 0;\n+  int idx_src = 0;\n+\n+  const auto p =\n+      arrow::internal::BitmapWordAlign<1>(valid_bits, valid_bits_offset, num_values);\n+  // First handle the leading bits\n+  const int leading_bits = static_cast<int>(p.leading_bits);\n+  while (idx_src < leading_bits) {\n+    if (BitUtil::GetBit(valid_bits, valid_bits_offset)) {\n+      output[num_valid_values] = src[idx_src];\n+      num_valid_values++;\n+    }\n+    idx_src++;\n+    valid_bits_offset++;\n+  }\n+\n+  // The aligned parts scaned with BitBlockCounter\n\nReview comment:\n       typo: scanned\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,199 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/align_util.h\"\n+#include \"arrow/util/bit_block_counter.h\"\n+#include \"arrow/util/bitmap_reader.h\"\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+/// \\brief Compress the buffer to spaced, excluding the null entries.\n+///\n+/// \\param[in] src the source buffer\n+/// \\param[in] num_values the size of source buffer\n+/// \\param[in] valid_bits bitmap data indicating position of valid slots\n+/// \\param[in] valid_bits_offset offset into valid_bits\n+/// \\param[out] output the output buffer spaced\n+/// \\return The size of spaced buffer.\n+template <typename T>\n+inline int SpacedCompress(const T* src, int num_values, const uint8_t* valid_bits,\n+                          int64_t valid_bits_offset, T* output) {\n+  int num_valid_values = 0;\n+  int idx_src = 0;\n+\n+  const auto p =\n+      arrow::internal::BitmapWordAlign<1>(valid_bits, valid_bits_offset, num_values);\n+  // First handle the leading bits\n+  const int leading_bits = static_cast<int>(p.leading_bits);\n+  while (idx_src < leading_bits) {\n+    if (BitUtil::GetBit(valid_bits, valid_bits_offset)) {\n+      output[num_valid_values] = src[idx_src];\n+      num_valid_values++;\n+    }\n+    idx_src++;\n+    valid_bits_offset++;\n+  }\n+\n+  // The aligned parts scaned with BitBlockCounter\n+  arrow::internal::BitBlockCounter data_counter(valid_bits, valid_bits_offset,\n+                                                num_values - leading_bits);\n+  auto current_block = data_counter.NextWord();\n+  while (idx_src < num_values) {\n+    if (current_block.AllSet()) {  // All true values\n+      int run_length = 0;\n+      // Scan forward until a block that has some false values (or the end)\n+      while (current_block.length > 0 && current_block.AllSet()) {\n+        run_length += current_block.length;\n+        current_block = data_counter.NextWord();\n+      }\n+      // Fill all valid values of this scan\n+      std::memcpy(&output[num_valid_values], &src[idx_src], run_length * sizeof(T));\n+      num_valid_values += run_length;\n+      idx_src += run_length;\n+      valid_bits_offset += run_length;\n+      // The current_block already computed, advance to next loop\n+      continue;\n+    } else if (!current_block.NoneSet()) {  // Some values are null\n+      arrow::internal::BitmapReader valid_bits_reader(valid_bits, valid_bits_offset,\n+                                                      current_block.length);\n+      for (int64_t i = 0; i < current_block.length; i++) {\n+        if (valid_bits_reader.IsSet()) {\n+          output[num_valid_values] = src[idx_src];\n+          num_valid_values++;\n+        }\n+        idx_src++;\n+        valid_bits_reader.Next();\n+      }\n+      valid_bits_offset += current_block.length;\n+    } else {  // All null values\n+      idx_src += current_block.length;\n+      valid_bits_offset += current_block.length;\n+    }\n+    current_block = data_counter.NextWord();\n+  }\n+\n+  return num_valid_values;\n+}\n+\n+/// \\brief Expand the buffer but leave spaces for null entries.\n\nReview comment:\n       Maybe \"Relocate values in buffer into positions of non-null values as indicated by a validity bitmap\"? \n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,199 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/align_util.h\"\n+#include \"arrow/util/bit_block_counter.h\"\n+#include \"arrow/util/bitmap_reader.h\"\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+/// \\brief Compress the buffer to spaced, excluding the null entries.\n+///\n+/// \\param[in] src the source buffer\n+/// \\param[in] num_values the size of source buffer\n+/// \\param[in] valid_bits bitmap data indicating position of valid slots\n+/// \\param[in] valid_bits_offset offset into valid_bits\n+/// \\param[out] output the output buffer spaced\n+/// \\return The size of spaced buffer.\n+template <typename T>\n+inline int SpacedCompress(const T* src, int num_values, const uint8_t* valid_bits,\n+                          int64_t valid_bits_offset, T* output) {\n+  int num_valid_values = 0;\n+  int idx_src = 0;\n+\n+  const auto p =\n+      arrow::internal::BitmapWordAlign<1>(valid_bits, valid_bits_offset, num_values);\n+  // First handle the leading bits\n+  const int leading_bits = static_cast<int>(p.leading_bits);\n+  while (idx_src < leading_bits) {\n+    if (BitUtil::GetBit(valid_bits, valid_bits_offset)) {\n+      output[num_valid_values] = src[idx_src];\n+      num_valid_values++;\n+    }\n+    idx_src++;\n+    valid_bits_offset++;\n+  }\n+\n+  // The aligned parts scaned with BitBlockCounter\n+  arrow::internal::BitBlockCounter data_counter(valid_bits, valid_bits_offset,\n+                                                num_values - leading_bits);\n+  auto current_block = data_counter.NextWord();\n+  while (idx_src < num_values) {\n+    if (current_block.AllSet()) {  // All true values\n+      int run_length = 0;\n+      // Scan forward until a block that has some false values (or the end)\n+      while (current_block.length > 0 && current_block.AllSet()) {\n+        run_length += current_block.length;\n+        current_block = data_counter.NextWord();\n+      }\n+      // Fill all valid values of this scan\n+      std::memcpy(&output[num_valid_values], &src[idx_src], run_length * sizeof(T));\n+      num_valid_values += run_length;\n+      idx_src += run_length;\n+      valid_bits_offset += run_length;\n+      // The current_block already computed, advance to next loop\n+      continue;\n+    } else if (!current_block.NoneSet()) {  // Some values are null\n+      arrow::internal::BitmapReader valid_bits_reader(valid_bits, valid_bits_offset,\n+                                                      current_block.length);\n+      for (int64_t i = 0; i < current_block.length; i++) {\n+        if (valid_bits_reader.IsSet()) {\n+          output[num_valid_values] = src[idx_src];\n+          num_valid_values++;\n+        }\n+        idx_src++;\n+        valid_bits_reader.Next();\n+      }\n+      valid_bits_offset += current_block.length;\n+    } else {  // All null values\n+      idx_src += current_block.length;\n+      valid_bits_offset += current_block.length;\n+    }\n+    current_block = data_counter.NextWord();\n+  }\n+\n+  return num_valid_values;\n+}\n+\n+/// \\brief Expand the buffer but leave spaces for null entries.\n+///\n+/// \\param[in, out] buffer the in-place buffer\n+/// \\param[in] num_values total size of buffer including null slots\n+/// \\param[in] null_count number of null slots\n+/// \\param[in] valid_bits bitmap data indicating position of valid slots\n+/// \\param[in] valid_bits_offset offset into valid_bits\n+/// \\return The number of values expanded, including nulls.\n+template <typename T>\n+inline int SpacedExpand(T* buffer, int num_values, int null_count,\n+                        const uint8_t* valid_bits, int64_t valid_bits_offset) {\n+  constexpr uint64_t kBatchSize = 64;\n+  static_assert(kBatchSize == 64, \"Invalid batch size, BitBlockCounter stick to 64\");\n+  constexpr uint64_t kBatchByteSize = kBatchSize / 8;\n+\n+  // Point to end as we add the spacing from the back.\n+  int idx_decode = num_values - null_count - 1;\n+  int idx_buffer = num_values - 1;\n+  int64_t idx_valid_bits = valid_bits_offset + idx_buffer;\n+\n+  // Depending on the number of nulls, some of the value slots in buffer may\n+  // be uninitialized, and this will cause valgrind warnings / potentially UB\n+  std::memset(static_cast<void*>(&buffer[idx_decode + 1]), 0, null_count * sizeof(T));\n\nReview comment:\n       is this `static_cast` needed?\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,199 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n\nReview comment:\n       I'm slightly ambivalent about having this code in a new header file, but it would make it easier to write unit tests for it, so I think it is OK\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-24T19:37:11.762+0000",
                    "updated": "2020-06-24T19:37:11.762+0000",
                    "started": "2020-06-24T19:37:11.761+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "450595",
                    "issueId": "13313180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313180/worklog/450633",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7531:\nURL: https://github.com/apache/arrow/pull/7531#issuecomment-649067717\n\n\n   Benchmark results\r\n   \r\n   ```\r\n   $ archery benchmark diff --cc=gcc-8 --cxx=g++-8 jianxind/BitBlockSpaced master --suite-filter=parquet-encoding\r\n                                                 benchmark            baseline           contender  change %                                        counters\r\n   13                  BM_PlainDecodingSpacedFloat/32768/1       6.454 GiB/sec      21.480 GiB/sec   232.838     {'iterations': 36805, 'null_percent': 0.01}\r\n   54                BM_PlainDecodingSpacedBoolean/32768/1       1.017 GiB/sec       2.031 GiB/sec    99.662     {'iterations': 23083, 'null_percent': 0.01}\r\n   53                BM_PlainDecodingSpacedFloat/32768/100       4.087 GiB/sec       6.490 GiB/sec    58.788      {'iterations': 23365, 'null_percent': 1.0}\r\n   118                BM_PlainDecodingSpacedDouble/32768/1      11.326 GiB/sec      17.696 GiB/sec    56.237     {'iterations': 32216, 'null_percent': 0.01}\r\n   134             BM_PlainDecodingSpacedBoolean/32768/100     755.399 MiB/sec       1.046 GiB/sec    41.803      {'iterations': 16687, 'null_percent': 1.0}\r\n   86               BM_PlainDecodingSpacedDouble/32768/100       7.654 GiB/sec       9.557 GiB/sec    24.864      {'iterations': 22049, 'null_percent': 1.0}\r\n   43                           BM_PlainDecodingInt64/4096      44.856 GiB/sec      51.732 GiB/sec    15.329                         {'iterations': 1199214}\r\n   56                          BM_PlainEncodingFloat/32768      32.768 GiB/sec      36.879 GiB/sec    12.548                          {'iterations': 163156}\r\n   45            BM_ByteStreamSplitEncode_Double_Sse2/4096      14.178 GiB/sec      15.697 GiB/sec    10.715                          {'iterations': 323465}\r\n   140            BM_PlainDecodingSpacedBoolean/32768/5000     244.132 MiB/sec     267.167 MiB/sec     9.435      {'iterations': 5521, 'null_percent': 50.0}\r\n   98                           BM_PlainDecodingFloat/4096      69.756 GiB/sec      75.939 GiB/sec     8.863                         {'iterations': 3748990}\r\n   41                          BM_PlainDecodingFloat/65536      53.684 GiB/sec      57.973 GiB/sec     7.988                          {'iterations': 169375}\r\n   68                           BM_PlainDecodingFloat/1024      37.061 GiB/sec      39.638 GiB/sec     6.955                         {'iterations': 6855467}\r\n   131                         BM_PlainEncodingInt64/32768      33.101 GiB/sec      34.982 GiB/sec     5.683                           {'iterations': 87975}\r\n   42             BM_ArrowBinaryDict/EncodeLowLevel/262144      79.220 MiB/sec      83.540 MiB/sec     5.453                              {'iterations': 36}\r\n   62             BM_PlainDecodingSpacedBoolean/32768/1000     520.545 MiB/sec     548.129 MiB/sec     5.299     {'iterations': 11926, 'null_percent': 10.0}\r\n   106          BM_ArrowBinaryPlain/EncodeLowLevel/1048576     779.964 MiB/sec     810.645 MiB/sec     3.934                              {'iterations': 87}\r\n   20                          BM_PlainDecodingDouble/1024      65.892 GiB/sec      68.154 GiB/sec     3.434                         {'iterations': 6008229}\r\n   70                         BM_PlainEncodingDouble/32768      31.926 GiB/sec      32.940 GiB/sec     3.176                           {'iterations': 86995}\r\n   39          BM_ByteStreamSplitEncode_Double_Scalar/4096       2.652 GiB/sec       2.735 GiB/sec     3.151                           {'iterations': 59682}\r\n   36                         BM_PlainDecodingBoolean/1024       1.688 GiB/sec       1.737 GiB/sec     2.907                         {'iterations': 1257476}\r\n   89     BM_ArrowBinaryDict/EncodeDictDirectInt32/1048576  322.964m items/sec  331.200m items/sec     2.550                             {'iterations': 219}\r\n   30      BM_ArrowBinaryDict/DecodeArrowNonNull_Dict/4096     204.031 MiB/sec     208.917 MiB/sec     2.395                            {'iterations': 5959}\r\n   146          BM_ByteStreamSplitEncode_Double_Sse2/32768      15.496 GiB/sec      15.845 GiB/sec     2.256                           {'iterations': 44572}\r\n   60                           BM_PlainDecodingInt64/1024      66.471 GiB/sec      67.795 GiB/sec     1.992                         {'iterations': 6157194}\r\n   82           BM_ByteStreamSplitEncode_Double_Sse2/65536      14.740 GiB/sec      15.025 GiB/sec     1.933                           {'iterations': 21204}\r\n   38          BM_ByteStreamSplitEncode_Float_Scalar/65536      20.023 GiB/sec      20.406 GiB/sec     1.913                           {'iterations': 57636}\r\n   59                    BM_DictDecodingInt64_repeats/1024       9.453 GiB/sec       9.629 GiB/sec     1.859                          {'iterations': 871513}\r\n   44            BM_ByteStreamSplitEncode_Double_Sse2/1024      16.284 GiB/sec      16.576 GiB/sec     1.790                         {'iterations': 1520871}\r\n   55                           BM_PlainEncodingFloat/4096      15.822 GiB/sec      16.072 GiB/sec     1.584                          {'iterations': 679740}\r\n   92                          BM_PlainDecodingFloat/32768      57.401 GiB/sec      58.299 GiB/sec     1.564                          {'iterations': 287174}\r\n   108                   BM_DictDecodingInt64_repeats/4096      21.266 GiB/sec      21.595 GiB/sec     1.544                          {'iterations': 484804}\r\n   128                         BM_PlainDecodingInt64/65536      44.749 GiB/sec      45.350 GiB/sec     1.342                           {'iterations': 68450}\r\n   72                  BM_DictDecodingInt64_literals/65536       4.270 GiB/sec       4.327 GiB/sec     1.329                            {'iterations': 6096}\r\n   147                          BM_PlainEncodingFloat/1024      18.627 GiB/sec      18.869 GiB/sec     1.301                         {'iterations': 3439664}\r\n   69                  BM_DictDecodingInt64_literals/32768       4.835 GiB/sec       4.895 GiB/sec     1.244                           {'iterations': 13930}\r\n   35                         BM_PlainDecodingBoolean/4096       2.043 GiB/sec       2.067 GiB/sec     1.212                          {'iterations': 379465}\r\n   97           BM_ArrowBinaryPlain/DecodeArrow_Dict/65536     166.085 MiB/sec     167.946 MiB/sec     1.121                             {'iterations': 308}\r\n   84                   BM_DictDecodingInt64_repeats/65536      47.758 GiB/sec      48.238 GiB/sec     1.005                           {'iterations': 68893}\r\n   116             BM_PlainEncodingSpacedDouble/32768/5000       1.757 GiB/sec       1.774 GiB/sec     0.970      {'iterations': 5070, 'null_percent': 50.0}\r\n   77            BM_ArrowBinaryPlain/EncodeLowLevel/262144     854.734 MiB/sec     862.980 MiB/sec     0.965                             {'iterations': 397}\r\n   104         BM_ByteStreamSplitEncode_Float_Scalar/32768      20.175 GiB/sec      20.366 GiB/sec     0.945                          {'iterations': 115548}\r\n   50                           BM_PlainEncodingInt64/4096      20.325 GiB/sec      20.513 GiB/sec     0.923                          {'iterations': 454433}\r\n   91          BM_ByteStreamSplitDecode_Float_Scalar/65536      32.834 GiB/sec      33.107 GiB/sec     0.832                           {'iterations': 95337}\r\n   101           BM_ByteStreamSplitEncode_Float_Sse2/32768      16.479 GiB/sec      16.615 GiB/sec     0.827                           {'iterations': 95125}\r\n   151          BM_ArrowBinaryDict/DecodeArrow_Dense/32768     309.512 MiB/sec     312.007 MiB/sec     0.806                            {'iterations': 1164}\r\n   16            BM_ByteStreamSplitDecode_Double_Sse2/1024      22.033 GiB/sec      22.206 GiB/sec     0.784                         {'iterations': 2027621}\r\n   34          BM_ArrowBinaryPlain/DecodeArrow_Dense/32768     493.753 MiB/sec     497.441 MiB/sec     0.747                            {'iterations': 1831}\r\n   136                  BM_DictDecodingInt64_literals/4096       4.299 GiB/sec       4.330 GiB/sec     0.739                           {'iterations': 99329}\r\n   5           BM_ByteStreamSplitDecode_Float_Scalar/32768      32.904 GiB/sec      33.114 GiB/sec     0.637                          {'iterations': 189504}\r\n   58                BM_ArrowBinaryDict/EncodeArrow/262144     183.613 MiB/sec     184.761 MiB/sec     0.625                              {'iterations': 86}\r\n   142           BM_ByteStreamSplitEncode_Float_Sse2/65536      16.559 GiB/sec      16.662 GiB/sec     0.622                           {'iterations': 47855}\r\n   87              BM_PlainDecodingSpacedDouble/32768/5000       2.004 GiB/sec       2.016 GiB/sec     0.613      {'iterations': 5753, 'null_percent': 50.0}\r\n   4     BM_ArrowBinaryDict/DecodeArrowNonNull_Dense/65536     309.087 MiB/sec     310.879 MiB/sec     0.580                             {'iterations': 575}\r\n   14                        BM_PlainEncodingFloatNaN/1024      18.795 GiB/sec      18.898 GiB/sec     0.548                         {'iterations': 3453780}\r\n   125   BM_ArrowBinaryPlain/DecodeArrowNonNull_Dict/32768     173.753 MiB/sec     174.668 MiB/sec     0.526                             {'iterations': 652}\r\n   0           BM_ByteStreamSplitDecode_Double_Scalar/1024      21.766 GiB/sec      21.877 GiB/sec     0.511                         {'iterations': 1998483}\r\n   107          BM_ArrowBinaryPlain/DecodeArrow_Dict/32768     173.680 MiB/sec     174.563 MiB/sec     0.508                             {'iterations': 649}\r\n   85      BM_ArrowBinaryDict/EncodeDictDirectInt8/1048576  342.024m items/sec  343.464m items/sec     0.421                             {'iterations': 229}\r\n   153            BM_ByteStreamSplitDecode_Float_Sse2/4096      32.889 GiB/sec      33.024 GiB/sec     0.412                         {'iterations': 1508692}\r\n   73             BM_PlainEncodingSpacedBoolean/32768/5000     225.228 MiB/sec     226.116 MiB/sec     0.395      {'iterations': 5037, 'null_percent': 50.0}\r\n   105    BM_ArrowBinaryDict/EncodeDictDirectInt64/1048576  314.653m items/sec  315.890m items/sec     0.393                             {'iterations': 211}\r\n   115              BM_PlainEncodingSpacedFloat/32768/5000       1.049 GiB/sec       1.053 GiB/sec     0.392      {'iterations': 5980, 'null_percent': 50.0}\r\n   71           BM_ByteStreamSplitDecode_Float_Scalar/1024      32.845 GiB/sec      32.973 GiB/sec     0.388                         {'iterations': 6024469}\r\n   127  BM_ArrowBinaryPlain/DecodeArrowNonNull_Dense/32768     495.518 MiB/sec     497.376 MiB/sec     0.375                            {'iterations': 1855}\r\n   139   BM_ArrowBinaryPlain/DecodeArrowNonNull_Dense/1024     590.236 MiB/sec     592.265 MiB/sec     0.344                           {'iterations': 67136}\r\n   130                         BM_PlainEncodingDouble/4096      20.150 GiB/sec      20.216 GiB/sec     0.330                          {'iterations': 449390}\r\n   66           BM_ByteStreamSplitDecode_Float_Scalar/4096      32.849 GiB/sec      32.957 GiB/sec     0.329                         {'iterations': 1498630}\r\n   141                  BM_DictDecodingInt64_repeats/32768      44.815 GiB/sec      44.949 GiB/sec     0.299                          {'iterations': 130536}\r\n   137        BM_ByteStreamSplitEncode_Double_Scalar/65536       2.494 GiB/sec       2.501 GiB/sec     0.297                            {'iterations': 3614}\r\n   57                 BM_PlainEncodingSpacedDouble/32768/1       5.908 GiB/sec       5.922 GiB/sec     0.249     {'iterations': 16769, 'null_percent': 0.01}\r\n   126            BM_PlainEncodingSpacedBoolean/32768/1000     364.196 MiB/sec     365.048 MiB/sec     0.234      {'iterations': 8197, 'null_percent': 10.0}\r\n   51                BM_PlainEncodingSpacedBoolean/32768/1     453.309 MiB/sec     454.304 MiB/sec     0.220     {'iterations': 10193, 'null_percent': 0.01}\r\n   102  BM_ArrowBinaryPlain/DecodeArrowNonNull_Dense/65536     495.031 MiB/sec     496.033 MiB/sec     0.202                             {'iterations': 929}\r\n   61    BM_ArrowBinaryDict/DecodeArrowNonNull_Dense/32768     310.510 MiB/sec     311.068 MiB/sec     0.180                            {'iterations': 1161}\r\n   10     BM_ArrowBinaryPlain/DecodeArrowNonNull_Dict/1024     214.300 MiB/sec     214.655 MiB/sec     0.165                           {'iterations': 24231}\r\n   117           BM_ArrowBinaryPlain/DecodeArrow_Dict/4096     198.115 MiB/sec     198.427 MiB/sec     0.158                            {'iterations': 5783}\r\n   95                         BM_PlainEncodingBoolean/4096     543.998 MiB/sec     544.838 MiB/sec     0.154                           {'iterations': 97718}\r\n   24    BM_ArrowBinaryPlain/DecodeArrowNonNull_Dict/65536     168.164 MiB/sec     168.401 MiB/sec     0.141                             {'iterations': 312}\r\n   121                      BM_PlainEncodingDoubleNaN/4096      20.174 GiB/sec      20.202 GiB/sec     0.139                          {'iterations': 450606}\r\n   27            BM_ByteStreamSplitDecode_Float_Sse2/65536      33.132 GiB/sec      33.178 GiB/sec     0.138                           {'iterations': 94247}\r\n   133          BM_ByteStreamSplitEncode_Float_Scalar/1024      24.168 GiB/sec      24.177 GiB/sec     0.035                         {'iterations': 4446965}\r\n   6                         BM_PlainEncodingBoolean/32768     596.062 MiB/sec     596.237 MiB/sec     0.029                           {'iterations': 13404}\r\n   96             BM_PlainEncodingSpacedDouble/32768/10000       7.418 GiB/sec       7.419 GiB/sec     0.021    {'iterations': 21200, 'null_percent': 100.0}\r\n   135    BM_ArrowBinaryDict/DecodeArrowNonNull_Dense/1024     310.727 MiB/sec     310.710 MiB/sec    -0.005                           {'iterations': 34918}\r\n   122           BM_ByteStreamSplitDecode_Float_Sse2/32768      33.030 GiB/sec      33.026 GiB/sec    -0.011                          {'iterations': 189236}\r\n   52             BM_ByteStreamSplitEncode_Float_Sse2/4096      16.513 GiB/sec      16.511 GiB/sec    -0.012                          {'iterations': 747372}\r\n   124           BM_ArrowBinaryDict/DecodeArrow_Dict/32768     171.177 MiB/sec     171.154 MiB/sec    -0.013                             {'iterations': 642}\r\n   143         BM_ByteStreamSplitEncode_Double_Scalar/1024       4.131 GiB/sec       4.130 GiB/sec    -0.023                          {'iterations': 381360}\r\n   31               BM_ArrowBinaryPlain/EncodeArrow/262144     885.335 MiB/sec     885.024 MiB/sec    -0.035                             {'iterations': 409}\r\n   138              BM_ArrowBinaryDict/EncodeArrow/1048576     134.899 MiB/sec     134.798 MiB/sec    -0.075                              {'iterations': 16}\r\n   152          BM_ByteStreamSplitDecode_Double_Sse2/32768      22.145 GiB/sec      22.128 GiB/sec    -0.078                           {'iterations': 63135}\r\n   94              BM_ArrowBinaryPlain/EncodeArrow/1048576     876.931 MiB/sec     876.138 MiB/sec    -0.090                              {'iterations': 95}\r\n   74           BM_ByteStreamSplitEncode_Float_Scalar/4096      24.337 GiB/sec      24.312 GiB/sec    -0.101                         {'iterations': 1121800}\r\n   17              BM_PlainEncodingSpacedBoolean/32768/100     438.626 MiB/sec     438.161 MiB/sec    -0.106       {'iterations': 9917, 'null_percent': 1.0}\r\n   23          BM_ByteStreamSplitDecode_Double_Scalar/4096      21.969 GiB/sec      21.937 GiB/sec    -0.150                          {'iterations': 505480}\r\n   29                         BM_PlainEncodingBoolean/1024     504.137 MiB/sec     503.353 MiB/sec    -0.155                          {'iterations': 361267}\r\n   81         BM_ByteStreamSplitDecode_Double_Scalar/32768      22.123 GiB/sec      22.086 GiB/sec    -0.166                           {'iterations': 63356}\r\n   79           BM_ArrowBinaryPlain/DecodeArrow_Dense/4096     520.530 MiB/sec     519.569 MiB/sec    -0.185                           {'iterations': 15019}\r\n   90     BM_ArrowBinaryPlain/DecodeArrowNonNull_Dict/4096     199.653 MiB/sec     199.277 MiB/sec    -0.188                            {'iterations': 5811}\r\n   18          BM_ArrowBinaryPlain/DecodeArrow_Dense/65536     498.511 MiB/sec     497.274 MiB/sec    -0.248                             {'iterations': 914}\r\n   63               BM_PlainEncodingSpacedFloat/32768/1000       2.666 GiB/sec       2.659 GiB/sec    -0.252     {'iterations': 15101, 'null_percent': 10.0}\r\n   48                           BM_PlainEncodingInt64/1024      30.345 GiB/sec      30.257 GiB/sec    -0.289                         {'iterations': 2794982}\r\n   111    BM_ArrowBinaryDict/EncodeDictDirectInt16/1048576  338.836m items/sec  337.803m items/sec    -0.305                             {'iterations': 226}\r\n   103           BM_PlainEncodingSpacedBoolean/32768/10000       1.000 GiB/sec    1021.065 MiB/sec    -0.317    {'iterations': 22965, 'null_percent': 100.0}\r\n   150            BM_ByteStreamSplitEncode_Float_Sse2/1024      16.595 GiB/sec      16.541 GiB/sec    -0.327                         {'iterations': 3050527}\r\n   12              BM_PlainEncodingSpacedFloat/32768/10000       5.810 GiB/sec       5.791 GiB/sec    -0.336    {'iterations': 33204, 'null_percent': 100.0}\r\n   11           BM_ArrowBinaryDict/DecodeArrow_Dense/65536     312.305 MiB/sec     311.195 MiB/sec    -0.355                             {'iterations': 578}\r\n   28              BM_PlainDecodingSpacedFloat/32768/10000      79.580 GiB/sec      79.296 GiB/sec    -0.356   {'iterations': 458065, 'null_percent': 100.0}\r\n   93            BM_ArrowBinaryPlain/DecodeArrow_Dict/1024     215.777 MiB/sec     214.937 MiB/sec    -0.389                           {'iterations': 24328}\r\n   80            BM_ByteStreamSplitDecode_Double_Sse2/4096      22.091 GiB/sec      22.004 GiB/sec    -0.394                          {'iterations': 500794}\r\n   132    BM_ArrowBinaryDict/DecodeArrowNonNull_Dict/32768     171.185 MiB/sec     170.464 MiB/sec    -0.421                             {'iterations': 623}\r\n   3          BM_ByteStreamSplitEncode_Double_Scalar/32768       2.721 GiB/sec       2.709 GiB/sec    -0.448                            {'iterations': 7746}\r\n   120              BM_PlainEncodingSpacedDouble/32768/100       5.647 GiB/sec       5.621 GiB/sec    -0.464      {'iterations': 16212, 'null_percent': 1.0}\r\n   15             BM_ArrowBinaryDict/DecodeArrow_Dict/4096     209.894 MiB/sec     208.845 MiB/sec    -0.500                            {'iterations': 6147}\r\n   21                        BM_PlainEncodingBoolean/65536     595.729 MiB/sec     592.693 MiB/sec    -0.510                            {'iterations': 6697}\r\n   47                   BM_DictDecodingInt64_literals/1024       3.542 GiB/sec       3.522 GiB/sec    -0.556                          {'iterations': 327036}\r\n   119           BM_ArrowBinaryDict/DecodeArrow_Dict/65536     164.846 MiB/sec     163.849 MiB/sec    -0.605                             {'iterations': 307}\r\n   78            BM_ArrowBinaryDict/DecodeArrow_Dense/1024     310.727 MiB/sec     308.787 MiB/sec    -0.625                           {'iterations': 35078}\r\n   26         BM_ByteStreamSplitDecode_Double_Scalar/65536      20.801 GiB/sec      20.662 GiB/sec    -0.669                           {'iterations': 29838}\r\n   19     BM_ArrowBinaryDict/DecodeArrowNonNull_Dict/65536     164.506 MiB/sec     163.383 MiB/sec    -0.683                             {'iterations': 303}\r\n   88            BM_ArrowBinaryDict/DecodeArrow_Dense/4096     310.023 MiB/sec     307.740 MiB/sec    -0.736                            {'iterations': 9095}\r\n   110    BM_ArrowBinaryDict/DecodeArrowNonNull_Dense/4096     311.762 MiB/sec     309.284 MiB/sec    -0.795                            {'iterations': 9143}\r\n   46                BM_PlainEncodingSpacedFloat/32768/100       4.379 GiB/sec       4.341 GiB/sec    -0.867      {'iterations': 24903, 'null_percent': 1.0}\r\n   7                         BM_PlainDecodingBoolean/65536       2.240 GiB/sec       2.218 GiB/sec    -0.954                           {'iterations': 25698}\r\n   8                   BM_PlainEncodingSpacedFloat/32768/1       4.626 GiB/sec       4.578 GiB/sec    -1.038     {'iterations': 26300, 'null_percent': 0.01}\r\n   32                        BM_PlainDecodingBoolean/32768       2.220 GiB/sec       2.194 GiB/sec    -1.177                           {'iterations': 51255}\r\n   65    BM_ArrowBinaryPlain/DecodeArrowNonNull_Dense/4096     524.685 MiB/sec     518.404 MiB/sec    -1.197                           {'iterations': 15267}\r\n   67           BM_ArrowBinaryPlain/DecodeArrow_Dense/1024     592.952 MiB/sec     585.688 MiB/sec    -1.225                           {'iterations': 66383}\r\n   112             BM_PlainEncodingSpacedDouble/32768/1000       4.107 GiB/sec       4.054 GiB/sec    -1.296     {'iterations': 11810, 'null_percent': 10.0}\r\n   113                         BM_PlainEncodingDouble/1024      33.612 GiB/sec      33.138 GiB/sec    -1.409                         {'iterations': 3017380}\r\n   114                      BM_PlainEncodingFloatNaN/65536      34.860 GiB/sec      34.317 GiB/sec    -1.557                           {'iterations': 93962}\r\n   144          BM_ByteStreamSplitDecode_Double_Sse2/65536      20.713 GiB/sec      20.338 GiB/sec    -1.810                           {'iterations': 29081}\r\n   83                       BM_PlainEncodingDoubleNaN/1024      33.634 GiB/sec      32.997 GiB/sec    -1.893                         {'iterations': 3089434}\r\n   64                        BM_PlainEncodingFloatNaN/4096      16.108 GiB/sec      15.785 GiB/sec    -2.006                          {'iterations': 705993}\r\n   25               BM_PlainDecodingSpacedFloat/32768/5000    1020.468 MiB/sec     991.261 MiB/sec    -2.862      {'iterations': 5772, 'null_percent': 50.0}\r\n   100            BM_ArrowBinaryDict/DecodeArrow_Dict/1024     226.059 MiB/sec     218.945 MiB/sec    -3.147                           {'iterations': 25619}\r\n   123            BM_ByteStreamSplitDecode_Float_Sse2/1024      33.199 GiB/sec      32.024 GiB/sec    -3.540                         {'iterations': 6102624}\r\n   22                       BM_PlainEncodingFloatNaN/32768      38.946 GiB/sec      37.443 GiB/sec    -3.860                          {'iterations': 195749}\r\n   33      BM_ArrowBinaryDict/DecodeArrowNonNull_Dict/1024     228.006 MiB/sec     218.889 MiB/sec    -3.998                           {'iterations': 25756}\r\n   9               BM_PlainDecodingSpacedDouble/32768/1000       4.933 GiB/sec       4.723 GiB/sec    -4.263     {'iterations': 14081, 'null_percent': 10.0}\r\n   149                         BM_PlainDecodingInt64/32768      55.800 GiB/sec      52.971 GiB/sec    -5.069                          {'iterations': 170631}\r\n   148              BM_PlainDecodingSpacedFloat/32768/1000       2.621 GiB/sec       2.484 GiB/sec    -5.247     {'iterations': 15106, 'null_percent': 10.0}\r\n   2             BM_ArrowBinaryDict/EncodeLowLevel/1048576      65.921 MiB/sec      61.856 MiB/sec    -6.167                               {'iterations': 6}\r\n   40                          BM_PlainDecodingDouble/4096      50.510 GiB/sec      46.935 GiB/sec    -7.078                         {'iterations': 1161577}\r\n   129                        BM_PlainDecodingDouble/65536      46.146 GiB/sec      42.608 GiB/sec    -7.667                           {'iterations': 68650}\r\n   145           BM_PlainDecodingSpacedBoolean/32768/10000     160.761 GiB/sec     147.677 GiB/sec    -8.139  {'iterations': 3551935, 'null_percent': 100.0}\r\n   49                      BM_PlainEncodingDoubleNaN/65536      34.456 GiB/sec      31.483 GiB/sec    -8.629                           {'iterations': 43904}\r\n   99                      BM_PlainEncodingDoubleNaN/32768      35.494 GiB/sec      32.291 GiB/sec    -9.023                           {'iterations': 83973}\r\n   109                         BM_PlainEncodingInt64/65536      34.301 GiB/sec      30.722 GiB/sec   -10.434                           {'iterations': 44474}\r\n   1              BM_PlainDecodingSpacedDouble/32768/10000      75.319 GiB/sec      67.322 GiB/sec   -10.617   {'iterations': 209081, 'null_percent': 100.0}\r\n   75                          BM_PlainEncodingFloat/65536      35.393 GiB/sec      31.288 GiB/sec   -11.598                           {'iterations': 92008}\r\n   37                         BM_PlainEncodingDouble/65536      36.333 GiB/sec      31.845 GiB/sec   -12.352                           {'iterations': 46380}\r\n   76                         BM_PlainDecodingDouble/32768      57.959 GiB/sec      47.187 GiB/sec   -18.587                          {'iterations': 154296}\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-24T20:58:19.408+0000",
                    "updated": "2020-06-24T20:58:19.408+0000",
                    "started": "2020-06-24T20:58:19.408+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "450633",
                    "issueId": "13313180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313180/worklog/450739",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on a change in pull request #7531:\nURL: https://github.com/apache/arrow/pull/7531#discussion_r445245990\n\n\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,199 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n\nReview comment:\n       I put it to a new header as it could make easy for future optimization further, something like SIMD I proposal before at https://github.com/apache/arrow/pull/7029.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-25T00:39:42.466+0000",
                    "updated": "2020-06-25T00:39:42.466+0000",
                    "started": "2020-06-25T00:39:42.466+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "450739",
                    "issueId": "13313180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313180/worklog/450743",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on pull request #7531:\nURL: https://github.com/apache/arrow/pull/7531#issuecomment-649147883\n\n\n   @ursabot\u00a0benchmark --suite-filter=parquet-encoding-benchmark\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-25T00:44:54.765+0000",
                    "updated": "2020-06-25T00:44:54.765+0000",
                    "started": "2020-06-25T00:44:54.765+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "450743",
                    "issueId": "13313180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313180/worklog/450746",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on a change in pull request #7531:\nURL: https://github.com/apache/arrow/pull/7531#discussion_r445249183\n\n\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,199 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/align_util.h\"\n+#include \"arrow/util/bit_block_counter.h\"\n+#include \"arrow/util/bitmap_reader.h\"\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+/// \\brief Compress the buffer to spaced, excluding the null entries.\n+///\n+/// \\param[in] src the source buffer\n+/// \\param[in] num_values the size of source buffer\n+/// \\param[in] valid_bits bitmap data indicating position of valid slots\n+/// \\param[in] valid_bits_offset offset into valid_bits\n+/// \\param[out] output the output buffer spaced\n+/// \\return The size of spaced buffer.\n+template <typename T>\n+inline int SpacedCompress(const T* src, int num_values, const uint8_t* valid_bits,\n+                          int64_t valid_bits_offset, T* output) {\n+  int num_valid_values = 0;\n+  int idx_src = 0;\n+\n+  const auto p =\n+      arrow::internal::BitmapWordAlign<1>(valid_bits, valid_bits_offset, num_values);\n+  // First handle the leading bits\n+  const int leading_bits = static_cast<int>(p.leading_bits);\n+  while (idx_src < leading_bits) {\n+    if (BitUtil::GetBit(valid_bits, valid_bits_offset)) {\n+      output[num_valid_values] = src[idx_src];\n+      num_valid_values++;\n+    }\n+    idx_src++;\n+    valid_bits_offset++;\n+  }\n+\n+  // The aligned parts scaned with BitBlockCounter\n\nReview comment:\n       done\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-25T00:52:38.028+0000",
                    "updated": "2020-06-25T00:52:38.028+0000",
                    "started": "2020-06-25T00:52:38.028+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "450746",
                    "issueId": "13313180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313180/worklog/450747",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on a change in pull request #7531:\nURL: https://github.com/apache/arrow/pull/7531#discussion_r445249248\n\n\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,199 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/align_util.h\"\n+#include \"arrow/util/bit_block_counter.h\"\n+#include \"arrow/util/bitmap_reader.h\"\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+/// \\brief Compress the buffer to spaced, excluding the null entries.\n+///\n+/// \\param[in] src the source buffer\n+/// \\param[in] num_values the size of source buffer\n+/// \\param[in] valid_bits bitmap data indicating position of valid slots\n+/// \\param[in] valid_bits_offset offset into valid_bits\n+/// \\param[out] output the output buffer spaced\n+/// \\return The size of spaced buffer.\n+template <typename T>\n+inline int SpacedCompress(const T* src, int num_values, const uint8_t* valid_bits,\n+                          int64_t valid_bits_offset, T* output) {\n+  int num_valid_values = 0;\n+  int idx_src = 0;\n+\n+  const auto p =\n+      arrow::internal::BitmapWordAlign<1>(valid_bits, valid_bits_offset, num_values);\n+  // First handle the leading bits\n+  const int leading_bits = static_cast<int>(p.leading_bits);\n+  while (idx_src < leading_bits) {\n+    if (BitUtil::GetBit(valid_bits, valid_bits_offset)) {\n+      output[num_valid_values] = src[idx_src];\n+      num_valid_values++;\n+    }\n+    idx_src++;\n+    valid_bits_offset++;\n+  }\n+\n+  // The aligned parts scaned with BitBlockCounter\n+  arrow::internal::BitBlockCounter data_counter(valid_bits, valid_bits_offset,\n+                                                num_values - leading_bits);\n+  auto current_block = data_counter.NextWord();\n+  while (idx_src < num_values) {\n+    if (current_block.AllSet()) {  // All true values\n+      int run_length = 0;\n+      // Scan forward until a block that has some false values (or the end)\n+      while (current_block.length > 0 && current_block.AllSet()) {\n+        run_length += current_block.length;\n+        current_block = data_counter.NextWord();\n+      }\n+      // Fill all valid values of this scan\n+      std::memcpy(&output[num_valid_values], &src[idx_src], run_length * sizeof(T));\n+      num_valid_values += run_length;\n+      idx_src += run_length;\n+      valid_bits_offset += run_length;\n+      // The current_block already computed, advance to next loop\n+      continue;\n+    } else if (!current_block.NoneSet()) {  // Some values are null\n+      arrow::internal::BitmapReader valid_bits_reader(valid_bits, valid_bits_offset,\n+                                                      current_block.length);\n+      for (int64_t i = 0; i < current_block.length; i++) {\n+        if (valid_bits_reader.IsSet()) {\n+          output[num_valid_values] = src[idx_src];\n+          num_valid_values++;\n+        }\n+        idx_src++;\n+        valid_bits_reader.Next();\n+      }\n+      valid_bits_offset += current_block.length;\n+    } else {  // All null values\n+      idx_src += current_block.length;\n+      valid_bits_offset += current_block.length;\n+    }\n+    current_block = data_counter.NextWord();\n+  }\n+\n+  return num_valid_values;\n+}\n+\n+/// \\brief Expand the buffer but leave spaces for null entries.\n\nReview comment:\n       done, 3x\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-25T00:52:50.718+0000",
                    "updated": "2020-06-25T00:52:50.718+0000",
                    "started": "2020-06-25T00:52:50.718+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "450747",
                    "issueId": "13313180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313180/worklog/450750",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on a change in pull request #7531:\nURL: https://github.com/apache/arrow/pull/7531#discussion_r445249689\n\n\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,199 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/align_util.h\"\n+#include \"arrow/util/bit_block_counter.h\"\n+#include \"arrow/util/bitmap_reader.h\"\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+/// \\brief Compress the buffer to spaced, excluding the null entries.\n+///\n+/// \\param[in] src the source buffer\n+/// \\param[in] num_values the size of source buffer\n+/// \\param[in] valid_bits bitmap data indicating position of valid slots\n+/// \\param[in] valid_bits_offset offset into valid_bits\n+/// \\param[out] output the output buffer spaced\n+/// \\return The size of spaced buffer.\n+template <typename T>\n+inline int SpacedCompress(const T* src, int num_values, const uint8_t* valid_bits,\n+                          int64_t valid_bits_offset, T* output) {\n+  int num_valid_values = 0;\n+  int idx_src = 0;\n+\n+  const auto p =\n+      arrow::internal::BitmapWordAlign<1>(valid_bits, valid_bits_offset, num_values);\n+  // First handle the leading bits\n+  const int leading_bits = static_cast<int>(p.leading_bits);\n+  while (idx_src < leading_bits) {\n+    if (BitUtil::GetBit(valid_bits, valid_bits_offset)) {\n+      output[num_valid_values] = src[idx_src];\n+      num_valid_values++;\n+    }\n+    idx_src++;\n+    valid_bits_offset++;\n+  }\n+\n+  // The aligned parts scaned with BitBlockCounter\n+  arrow::internal::BitBlockCounter data_counter(valid_bits, valid_bits_offset,\n+                                                num_values - leading_bits);\n+  auto current_block = data_counter.NextWord();\n+  while (idx_src < num_values) {\n+    if (current_block.AllSet()) {  // All true values\n+      int run_length = 0;\n+      // Scan forward until a block that has some false values (or the end)\n+      while (current_block.length > 0 && current_block.AllSet()) {\n+        run_length += current_block.length;\n+        current_block = data_counter.NextWord();\n+      }\n+      // Fill all valid values of this scan\n+      std::memcpy(&output[num_valid_values], &src[idx_src], run_length * sizeof(T));\n+      num_valid_values += run_length;\n+      idx_src += run_length;\n+      valid_bits_offset += run_length;\n+      // The current_block already computed, advance to next loop\n+      continue;\n+    } else if (!current_block.NoneSet()) {  // Some values are null\n+      arrow::internal::BitmapReader valid_bits_reader(valid_bits, valid_bits_offset,\n+                                                      current_block.length);\n+      for (int64_t i = 0; i < current_block.length; i++) {\n+        if (valid_bits_reader.IsSet()) {\n+          output[num_valid_values] = src[idx_src];\n+          num_valid_values++;\n+        }\n+        idx_src++;\n+        valid_bits_reader.Next();\n+      }\n+      valid_bits_offset += current_block.length;\n+    } else {  // All null values\n+      idx_src += current_block.length;\n+      valid_bits_offset += current_block.length;\n+    }\n+    current_block = data_counter.NextWord();\n+  }\n+\n+  return num_valid_values;\n+}\n+\n+/// \\brief Expand the buffer but leave spaces for null entries.\n+///\n+/// \\param[in, out] buffer the in-place buffer\n+/// \\param[in] num_values total size of buffer including null slots\n+/// \\param[in] null_count number of null slots\n+/// \\param[in] valid_bits bitmap data indicating position of valid slots\n+/// \\param[in] valid_bits_offset offset into valid_bits\n+/// \\return The number of values expanded, including nulls.\n+template <typename T>\n+inline int SpacedExpand(T* buffer, int num_values, int null_count,\n+                        const uint8_t* valid_bits, int64_t valid_bits_offset) {\n+  constexpr uint64_t kBatchSize = 64;\n+  static_assert(kBatchSize == 64, \"Invalid batch size, BitBlockCounter stick to 64\");\n+  constexpr uint64_t kBatchByteSize = kBatchSize / 8;\n+\n+  // Point to end as we add the spacing from the back.\n+  int idx_decode = num_values - null_count - 1;\n+  int idx_buffer = num_values - 1;\n+  int64_t idx_valid_bits = valid_bits_offset + idx_buffer;\n+\n+  // Depending on the number of nulls, some of the value slots in buffer may\n+  // be uninitialized, and this will cause valgrind warnings / potentially UB\n+  std::memset(static_cast<void*>(&buffer[idx_decode + 1]), 0, null_count * sizeof(T));\n\nReview comment:\n       /arrow/cpp/src/arrow/util/spaced.h:119:14: error: 'void* memset(void*, int, size_t)' clearing an object of non-trivial type 'struct parquet::ByteArray'; use assignment or value-initialization instead [-Werror=class-memaccess]\r\n   \r\n   It get a error without the cast on \"C GLib & Ruby / AMD64 Ubuntu 20.04 GLib & Ruby\" job\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-25T00:54:40.627+0000",
                    "updated": "2020-06-25T00:54:40.627+0000",
                    "started": "2020-06-25T00:54:40.627+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "450750",
                    "issueId": "13313180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313180/worklog/450788",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7531:\nURL: https://github.com/apache/arrow/pull/7531#discussion_r445281773\n\n\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,199 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/align_util.h\"\n+#include \"arrow/util/bit_block_counter.h\"\n+#include \"arrow/util/bitmap_reader.h\"\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+/// \\brief Compress the buffer to spaced, excluding the null entries.\n+///\n+/// \\param[in] src the source buffer\n+/// \\param[in] num_values the size of source buffer\n+/// \\param[in] valid_bits bitmap data indicating position of valid slots\n+/// \\param[in] valid_bits_offset offset into valid_bits\n+/// \\param[out] output the output buffer spaced\n+/// \\return The size of spaced buffer.\n+template <typename T>\n+inline int SpacedCompress(const T* src, int num_values, const uint8_t* valid_bits,\n+                          int64_t valid_bits_offset, T* output) {\n+  int num_valid_values = 0;\n+  int idx_src = 0;\n+\n+  const auto p =\n+      arrow::internal::BitmapWordAlign<1>(valid_bits, valid_bits_offset, num_values);\n+  // First handle the leading bits\n+  const int leading_bits = static_cast<int>(p.leading_bits);\n+  while (idx_src < leading_bits) {\n+    if (BitUtil::GetBit(valid_bits, valid_bits_offset)) {\n+      output[num_valid_values] = src[idx_src];\n+      num_valid_values++;\n+    }\n+    idx_src++;\n+    valid_bits_offset++;\n+  }\n+\n+  // The aligned parts scaned with BitBlockCounter\n+  arrow::internal::BitBlockCounter data_counter(valid_bits, valid_bits_offset,\n+                                                num_values - leading_bits);\n+  auto current_block = data_counter.NextWord();\n+  while (idx_src < num_values) {\n+    if (current_block.AllSet()) {  // All true values\n+      int run_length = 0;\n+      // Scan forward until a block that has some false values (or the end)\n+      while (current_block.length > 0 && current_block.AllSet()) {\n+        run_length += current_block.length;\n+        current_block = data_counter.NextWord();\n+      }\n+      // Fill all valid values of this scan\n+      std::memcpy(&output[num_valid_values], &src[idx_src], run_length * sizeof(T));\n+      num_valid_values += run_length;\n+      idx_src += run_length;\n+      valid_bits_offset += run_length;\n+      // The current_block already computed, advance to next loop\n+      continue;\n+    } else if (!current_block.NoneSet()) {  // Some values are null\n+      arrow::internal::BitmapReader valid_bits_reader(valid_bits, valid_bits_offset,\n+                                                      current_block.length);\n+      for (int64_t i = 0; i < current_block.length; i++) {\n+        if (valid_bits_reader.IsSet()) {\n+          output[num_valid_values] = src[idx_src];\n+          num_valid_values++;\n+        }\n+        idx_src++;\n+        valid_bits_reader.Next();\n+      }\n+      valid_bits_offset += current_block.length;\n+    } else {  // All null values\n+      idx_src += current_block.length;\n+      valid_bits_offset += current_block.length;\n+    }\n+    current_block = data_counter.NextWord();\n+  }\n+\n+  return num_valid_values;\n+}\n+\n+/// \\brief Expand the buffer but leave spaces for null entries.\n+///\n+/// \\param[in, out] buffer the in-place buffer\n+/// \\param[in] num_values total size of buffer including null slots\n+/// \\param[in] null_count number of null slots\n+/// \\param[in] valid_bits bitmap data indicating position of valid slots\n+/// \\param[in] valid_bits_offset offset into valid_bits\n+/// \\return The number of values expanded, including nulls.\n+template <typename T>\n+inline int SpacedExpand(T* buffer, int num_values, int null_count,\n+                        const uint8_t* valid_bits, int64_t valid_bits_offset) {\n+  constexpr uint64_t kBatchSize = 64;\n+  static_assert(kBatchSize == 64, \"Invalid batch size, BitBlockCounter stick to 64\");\n+  constexpr uint64_t kBatchByteSize = kBatchSize / 8;\n+\n+  // Point to end as we add the spacing from the back.\n+  int idx_decode = num_values - null_count - 1;\n+  int idx_buffer = num_values - 1;\n+  int64_t idx_valid_bits = valid_bits_offset + idx_buffer;\n+\n+  // Depending on the number of nulls, some of the value slots in buffer may\n+  // be uninitialized, and this will cause valgrind warnings / potentially UB\n+  std::memset(static_cast<void*>(&buffer[idx_decode + 1]), 0, null_count * sizeof(T));\n\nReview comment:\n       Ah that's right. Thanks\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-25T03:05:14.608+0000",
                    "updated": "2020-06-25T03:05:14.608+0000",
                    "started": "2020-06-25T03:05:14.608+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "450788",
                    "issueId": "13313180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313180/worklog/450794",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on pull request #7531:\nURL: https://github.com/apache/arrow/pull/7531#issuecomment-649197066\n\n\n   @ursabot\u00a0benchmark --suite-filter=parquet-encoding-benchmark --benchmark-filter=BM_Plain\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-25T03:43:25.540+0000",
                    "updated": "2020-06-25T03:43:25.540+0000",
                    "started": "2020-06-25T03:43:25.540+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "450794",
                    "issueId": "13313180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313180/worklog/450796",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on pull request #7531:\nURL: https://github.com/apache/arrow/pull/7531#issuecomment-649198815\n\n\n   Here is the results: https://ci.ursalabs.org/#/builders/73/builds/90/steps/3/logs/result, not know why it not paste here, I see all 0.01% get positive results. \r\n   \r\n   106                BM_PlainEncodingSpacedFloat/32768/1       2.355 GiB/sec       6.385 GiB/sec   171.068  {'run_name': 'BM_PlainEncodingSpacedFloat/3276...\r\n   80                 BM_PlainDecodingSpacedFloat/32768/1       3.312 GiB/sec       8.534 GiB/sec   157.683  {'run_name': 'BM_PlainDecodingSpacedFloat/3276...\r\n   37               BM_PlainDecodingSpacedBoolean/32768/1     595.833 MiB/sec       1.035 GiB/sec    77.882  {'run_name': 'BM_PlainDecodingSpacedBoolean/32...\r\n   92                BM_PlainEncodingSpacedDouble/32768/1       3.834 GiB/sec       5.799 GiB/sec    51.278  {'run_name': 'BM_PlainEncodingSpacedDouble/327...\r\n   149              BM_PlainEncodingSpacedBoolean/32768/1     270.760 MiB/sec     393.746 MiB/sec    45.422  {'run_name': 'BM_PlainEncodingSpacedBoolean/32...\r\n   75                BM_PlainDecodingSpacedDouble/32768/1       4.603 GiB/sec       5.475 GiB/sec    18.954  {'run_name': 'BM_PlainDecodingSpacedDouble/327...\r\n   \r\n   > @ursabot\u00a0benchmark --suite-filter=parquet-encoding-benchmark\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-25T03:51:02.186+0000",
                    "updated": "2020-06-25T03:51:02.186+0000",
                    "started": "2020-06-25T03:51:02.186+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "450796",
                    "issueId": "13313180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313180/worklog/450797",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind edited a comment on pull request #7531:\nURL: https://github.com/apache/arrow/pull/7531#issuecomment-649198815\n\n\n   Here is the results: https://ci.ursalabs.org/#/builders/73/builds/90/steps/3/logs/result, not know why it not paste here, I see all 0.01% get positive results. \r\n   \r\n   106                BM_PlainEncodingSpacedFloat/32768/1       2.355 GiB/sec       6.385 GiB/sec   171.068  {'run_name': 'BM_PlainEncodingSpacedFloat/3276...\r\n   \r\n   80                 BM_PlainDecodingSpacedFloat/32768/1       3.312 GiB/sec       8.534 GiB/sec   157.683  {'run_name': 'BM_PlainDecodingSpacedFloat/3276...\r\n   \r\n   37               BM_PlainDecodingSpacedBoolean/32768/1     595.833 MiB/sec       1.035 GiB/sec    77.882  {'run_name': 'BM_PlainDecodingSpacedBoolean/32...\r\n   \r\n   92                BM_PlainEncodingSpacedDouble/32768/1       3.834 GiB/sec       5.799 GiB/sec    51.278  {'run_name': 'BM_PlainEncodingSpacedDouble/327...\r\n   \r\n   149              BM_PlainEncodingSpacedBoolean/32768/1     270.760 MiB/sec     393.746 MiB/sec    45.422  {'run_name': 'BM_PlainEncodingSpacedBoolean/32...\r\n   \r\n   75                BM_PlainDecodingSpacedDouble/32768/1       4.603 GiB/sec       5.475 GiB/sec    18.954  {'run_name': 'BM_PlainDecodingSpacedDouble/327...\r\n   \r\n   > @ursabot\u00a0benchmark --suite-filter=parquet-encoding-benchmark\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-25T03:51:36.250+0000",
                    "updated": "2020-06-25T03:51:36.250+0000",
                    "started": "2020-06-25T03:51:36.250+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "450797",
                    "issueId": "13313180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313180/worklog/450798",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind edited a comment on pull request #7531:\nURL: https://github.com/apache/arrow/pull/7531#issuecomment-649198815\n\n\n   Here is the results: https://ci.ursalabs.org/#/builders/73/builds/90/steps/3/logs/result, not know why it not paste here, I see all 0.01% get positive results. \r\n   \r\n   ```\r\n   106                BM_PlainEncodingSpacedFloat/32768/1       2.355 GiB/sec       6.385 GiB/sec   171.068  {'run_name': 'BM_PlainEncodingSpacedFloat/3276...\r\n   80                 BM_PlainDecodingSpacedFloat/32768/1       3.312 GiB/sec       8.534 GiB/sec   157.683  {'run_name': 'BM_PlainDecodingSpacedFloat/3276...\r\n   37               BM_PlainDecodingSpacedBoolean/32768/1     595.833 MiB/sec       1.035 GiB/sec    77.882  {'run_name': 'BM_PlainDecodingSpacedBoolean/32...\r\n   92                BM_PlainEncodingSpacedDouble/32768/1       3.834 GiB/sec       5.799 GiB/sec    51.278  {'run_name': 'BM_PlainEncodingSpacedDouble/327...\r\n   149              BM_PlainEncodingSpacedBoolean/32768/1     270.760 MiB/sec     393.746 MiB/sec    45.422  {'run_name': 'BM_PlainEncodingSpacedBoolean/32...\r\n   75                BM_PlainDecodingSpacedDouble/32768/1       4.603 GiB/sec       5.475 GiB/sec    18.954  {'run_name': 'BM_PlainDecodingSpacedDouble/327...\r\n   ```\r\n   \r\n   > @ursabot\u00a0benchmark --suite-filter=parquet-encoding-benchmark\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-25T03:52:19.683+0000",
                    "updated": "2020-06-25T03:52:19.683+0000",
                    "started": "2020-06-25T03:52:19.683+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "450798",
                    "issueId": "13313180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313180/worklog/451032",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7531:\nURL: https://github.com/apache/arrow/pull/7531#issuecomment-649548830\n\n\n   @jianxind I think the bot is broken right now because of the changes I recently made in ARROW-9201. @kszucs is going to update it\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-25T13:42:30.437+0000",
                    "updated": "2020-06-25T13:42:30.437+0000",
                    "started": "2020-06-25T13:42:30.437+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "451032",
                    "issueId": "13313180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313180/worklog/451034",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7531:\nURL: https://github.com/apache/arrow/pull/7531#discussion_r445569869\n\n\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,200 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/align_util.h\"\n+#include \"arrow/util/bit_block_counter.h\"\n+#include \"arrow/util/bitmap_reader.h\"\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+/// \\brief Compress the buffer to spaced, excluding the null entries.\n+///\n+/// \\param[in] src the source buffer\n+/// \\param[in] num_values the size of source buffer\n+/// \\param[in] valid_bits bitmap data indicating position of valid slots\n+/// \\param[in] valid_bits_offset offset into valid_bits\n+/// \\param[out] output the output buffer spaced\n+/// \\return The size of spaced buffer.\n+template <typename T>\n+inline int SpacedCompress(const T* src, int num_values, const uint8_t* valid_bits,\n+                          int64_t valid_bits_offset, T* output) {\n+  int num_valid_values = 0;\n+  int idx_src = 0;\n+\n+  const auto p =\n+      arrow::internal::BitmapWordAlign<1>(valid_bits, valid_bits_offset, num_values);\n+  // First handle the leading bits\n+  const int leading_bits = static_cast<int>(p.leading_bits);\n+  while (idx_src < leading_bits) {\n+    if (BitUtil::GetBit(valid_bits, valid_bits_offset)) {\n+      output[num_valid_values] = src[idx_src];\n+      num_valid_values++;\n+    }\n+    idx_src++;\n+    valid_bits_offset++;\n+  }\n+\n+  // The aligned parts scanned with BitBlockCounter\n+  arrow::internal::BitBlockCounter data_counter(valid_bits, valid_bits_offset,\n+                                                num_values - leading_bits);\n+  auto current_block = data_counter.NextWord();\n+  while (idx_src < num_values) {\n+    if (current_block.AllSet()) {  // All true values\n+      int run_length = 0;\n+      // Scan forward until a block that has some false values (or the end)\n+      while (current_block.length > 0 && current_block.AllSet()) {\n+        run_length += current_block.length;\n+        current_block = data_counter.NextWord();\n+      }\n+      // Fill all valid values of this scan\n+      std::memcpy(&output[num_valid_values], &src[idx_src], run_length * sizeof(T));\n+      num_valid_values += run_length;\n+      idx_src += run_length;\n+      valid_bits_offset += run_length;\n+      // The current_block already computed, advance to next loop\n+      continue;\n+    } else if (!current_block.NoneSet()) {  // Some values are null\n+      arrow::internal::BitmapReader valid_bits_reader(valid_bits, valid_bits_offset,\n\nReview comment:\n       One question: is it actually beneficial to use `BitmapReader` here to process just a run of 64 bits? In other places where I have used BitBlockCounter, that it does not always help\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-25T13:45:58.013+0000",
                    "updated": "2020-06-25T13:45:58.013+0000",
                    "started": "2020-06-25T13:45:58.013+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "451034",
                    "issueId": "13313180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313180/worklog/451037",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7531:\nURL: https://github.com/apache/arrow/pull/7531#discussion_r445569869\n\n\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,200 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/align_util.h\"\n+#include \"arrow/util/bit_block_counter.h\"\n+#include \"arrow/util/bitmap_reader.h\"\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+/// \\brief Compress the buffer to spaced, excluding the null entries.\n+///\n+/// \\param[in] src the source buffer\n+/// \\param[in] num_values the size of source buffer\n+/// \\param[in] valid_bits bitmap data indicating position of valid slots\n+/// \\param[in] valid_bits_offset offset into valid_bits\n+/// \\param[out] output the output buffer spaced\n+/// \\return The size of spaced buffer.\n+template <typename T>\n+inline int SpacedCompress(const T* src, int num_values, const uint8_t* valid_bits,\n+                          int64_t valid_bits_offset, T* output) {\n+  int num_valid_values = 0;\n+  int idx_src = 0;\n+\n+  const auto p =\n+      arrow::internal::BitmapWordAlign<1>(valid_bits, valid_bits_offset, num_values);\n+  // First handle the leading bits\n+  const int leading_bits = static_cast<int>(p.leading_bits);\n+  while (idx_src < leading_bits) {\n+    if (BitUtil::GetBit(valid_bits, valid_bits_offset)) {\n+      output[num_valid_values] = src[idx_src];\n+      num_valid_values++;\n+    }\n+    idx_src++;\n+    valid_bits_offset++;\n+  }\n+\n+  // The aligned parts scanned with BitBlockCounter\n+  arrow::internal::BitBlockCounter data_counter(valid_bits, valid_bits_offset,\n+                                                num_values - leading_bits);\n+  auto current_block = data_counter.NextWord();\n+  while (idx_src < num_values) {\n+    if (current_block.AllSet()) {  // All true values\n+      int run_length = 0;\n+      // Scan forward until a block that has some false values (or the end)\n+      while (current_block.length > 0 && current_block.AllSet()) {\n+        run_length += current_block.length;\n+        current_block = data_counter.NextWord();\n+      }\n+      // Fill all valid values of this scan\n+      std::memcpy(&output[num_valid_values], &src[idx_src], run_length * sizeof(T));\n+      num_valid_values += run_length;\n+      idx_src += run_length;\n+      valid_bits_offset += run_length;\n+      // The current_block already computed, advance to next loop\n+      continue;\n+    } else if (!current_block.NoneSet()) {  // Some values are null\n+      arrow::internal::BitmapReader valid_bits_reader(valid_bits, valid_bits_offset,\n\nReview comment:\n       One question: is it actually beneficial to use `BitmapReader` here to process just a run of 64 bits? In other places where I have used BitBlockCounter, I have observed it does not always help\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-25T13:47:27.628+0000",
                    "updated": "2020-06-25T13:47:27.628+0000",
                    "started": "2020-06-25T13:47:27.628+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "451037",
                    "issueId": "13313180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313180/worklog/451319",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7531:\nURL: https://github.com/apache/arrow/pull/7531#issuecomment-649849609\n\n\n   +1, merging this. If removing the BitmapReader helps perf it can be done in a follow up PR\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-25T22:29:34.988+0000",
                    "updated": "2020-06-25T22:29:34.988+0000",
                    "started": "2020-06-25T22:29:34.987+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "451319",
                    "issueId": "13313180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313180/worklog/451321",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #7531:\nURL: https://github.com/apache/arrow/pull/7531\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-25T22:33:04.752+0000",
                    "updated": "2020-06-25T22:33:04.752+0000",
                    "started": "2020-06-25T22:33:04.752+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "451321",
                    "issueId": "13313180"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 13200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2eef23e8[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@56c7e7cf[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5541cb72[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3c51b78a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@66700237[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@56e34dbc[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@d221649[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3c7e1d80[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a79d182[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@163be9dc[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@bb6250c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4768abe7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jun 25 22:33:28 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-06-25T22:33:28.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9216/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-06-24T07:28:52.000+0000",
        "updated": "2020-06-26T02:18:04.000+0000",
        "timeoriginalestimate": null,
        "description": "Speedup the typical use case which most datas are true values",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Parquet] Use BitBlockCounter for plain spaced encoding/decoding",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313180/comment/17145899",
                    "id": "17145899",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 7531\n[https://github.com/apache/arrow/pull/7531]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-06-25T22:33:28.095+0000",
                    "updated": "2020-06-25T22:33:28.095+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0g5bk:",
        "customfield_12314139": null
    }
}