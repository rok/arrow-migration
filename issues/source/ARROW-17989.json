{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13485682",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682",
    "key": "ARROW-17989",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "compute",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12651144",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12651144",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13500696",
                    "key": "ARROW-18295",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13500696",
                    "fields": {
                        "summary": "[C++] FieldRef::FindAll/FindOne(DataType) improve error",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12649237",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12649237",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13472426",
                    "key": "ARROW-17141",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472426",
                    "fields": {
                        "summary": "[C++] Enable selecting nested fields in StructArray with field path",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=milesgranger",
            "name": "milesgranger",
            "key": "JIRAUSER293894",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34052",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34052",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34052",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34052"
            },
            "displayName": "Miles Granger",
            "active": true,
            "timeZone": "Europe/Oslo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/3",
            "description": "This issue is being actively worked on at the moment by the assignee.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
            "name": "In Progress",
            "id": "3",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                "id": 4,
                "key": "indeterminate",
                "colorName": "yellow",
                "name": "In Progress"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "aggregateprogress": {
            "progress": 39000,
            "total": 39000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 39000,
            "total": 39000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17989/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 65,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/worklog/819978",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger opened a new pull request, #14495:\nURL: https://github.com/apache/arrow/pull/14495\n\n   Will close [ARROW-17989](https://issues.apache.org/jira/browse/ARROW-17989)\r\n   \r\n   WIP: Segfault in C++ tests.\n\n\n",
                    "created": "2022-10-25T09:58:09.530+0000",
                    "updated": "2022-10-25T09:58:09.530+0000",
                    "started": "2022-10-25T09:58:09.529+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "819978",
                    "issueId": "13485682"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/worklog/819992",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14495:\nURL: https://github.com/apache/arrow/pull/14495#issuecomment-1290365168\n\n   https://issues.apache.org/jira/browse/ARROW-17989\n\n\n",
                    "created": "2022-10-25T11:03:17.973+0000",
                    "updated": "2022-10-25T11:03:17.973+0000",
                    "started": "2022-10-25T11:03:17.973+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "819992",
                    "issueId": "13485682"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/worklog/820054",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #14495:\nURL: https://github.com/apache/arrow/pull/14495#discussion_r1004539770\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested.cc:\n##########\n@@ -269,14 +312,34 @@ struct StructFieldFunctor {\n   }\n };\n \n+Result<const DataType*> RecursiveResolveStructFieldType(const FieldRef& field_ref,\n\nReview Comment:\n   This could maybe also be replaced or simplified with one of the existing FieldRef / FieldPath utilities?\n\n\n\n##########\npython/pyarrow/tests/test_compute.py:\n##########\n@@ -2691,16 +2691,28 @@ def test_struct_fields_options():\n     b = pa.array([\"bar\", None, \"\"])\n     c = pa.StructArray.from_arrays([a, b], [\"a\", \"b\"])\n     arr = pa.StructArray.from_arrays([a, c], [\"a\", \"c\"])\n-\n-    assert pc.struct_field(arr,\n-                           indices=[1, 1]) == pa.array([\"bar\", None, \"\"])\n-    assert pc.struct_field(arr, [1, 1]) == pa.array([\"bar\", None, \"\"])\n-    assert pc.struct_field(arr, [0]) == pa.array([4, 5, 6], type=pa.int64())\n+    assert pc.struct_field(arr, '.c.b', is_dot_path=True) == b\n+    assert pc.struct_field(arr, '.a', is_dot_path=True) == a\n+    assert pc.struct_field(arr, 'a') == a\n+    assert pc.struct_field(arr, indices=[1, 1]) == b\n+    assert pc.struct_field(arr, [1, 1]) == b\n\nReview Comment:\n   I think it should also be possible to pass the names as a list? (`['b', 'c']`)\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested.cc:\n##########\n@@ -252,6 +266,35 @@ struct StructFieldFunctor {\n     return Status::OK();\n   }\n \n+  static Result<std::shared_ptr<Array>> ApplyFieldRef(KernelContext* ctx,\n+                                                      const FieldRef& field_ref,\n+                                                      std::shared_ptr<Array> current) {\n+    if (current->type_id() != Type::STRUCT) {\n+      return Status::Invalid(\"Not a StructArray: \", current->ToString(),\n+                             \"\\nMaybe a bad FieldRef? \", field_ref.ToString());\n+    }\n+\n+    if (field_ref.IsName()) {\n+      const auto& array = checked_cast<const StructArray&>(*current);\n+      current = array.GetFieldByName(*field_ref.name());\n+      if (current == nullptr) {\n+        return Status::Invalid(\"Field not found in struct: '\", *field_ref.name(), \"'\");\n+      }\n+    } else if (field_ref.IsFieldPath()) {\n+      for (const auto& idx : field_ref.field_path()->indices()) {\n+        ARROW_RETURN_NOT_OK(CheckIndex(idx, *current->type()));\n+        const auto& array = checked_cast<const StructArray&>(*current);\n+        ARROW_ASSIGN_OR_RAISE(current, array.GetFlattenedField(idx, ctx->memory_pool()));\n+      }\n\nReview Comment:\n   There is a `FieldPath::Get()` for arrays, could that be used here instead of this loop?\n\n\n\n##########\ncpp/src/arrow/compute/api_scalar.cc:\n##########\n@@ -560,8 +560,12 @@ StrptimeOptions::StrptimeOptions(std::string format, TimeUnit::type unit,\n StrptimeOptions::StrptimeOptions() : StrptimeOptions(\"\", TimeUnit::MICRO, false) {}\n constexpr char StrptimeOptions::kTypeName[];\n \n+StructFieldOptions::StructFieldOptions(FieldRef field_ref)\n+    : FunctionOptions(internal::kStructFieldOptionsType), field_ref(field_ref) {}\n StructFieldOptions::StructFieldOptions(std::vector<int> indices)\n-    : FunctionOptions(internal::kStructFieldOptionsType), indices(std::move(indices)) {}\n+    : StructFieldOptions(FieldRef(FieldPath(std::move(indices)))) {}\n\nReview Comment:\n   Should we set both FieldRef and indices here? (for backwards compatibility of the indices field in the options class)\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested.cc:\n##########\n@@ -252,6 +266,35 @@ struct StructFieldFunctor {\n     return Status::OK();\n   }\n \n+  static Result<std::shared_ptr<Array>> ApplyFieldRef(KernelContext* ctx,\n+                                                      const FieldRef& field_ref,\n+                                                      std::shared_ptr<Array> current) {\n+    if (current->type_id() != Type::STRUCT) {\n+      return Status::Invalid(\"Not a StructArray: \", current->ToString(),\n+                             \"\\nMaybe a bad FieldRef? \", field_ref.ToString());\n+    }\n+\n+    if (field_ref.IsName()) {\n+      const auto& array = checked_cast<const StructArray&>(*current);\n+      current = array.GetFieldByName(*field_ref.name());\n+      if (current == nullptr) {\n+        return Status::Invalid(\"Field not found in struct: '\", *field_ref.name(), \"'\");\n+      }\n+    } else if (field_ref.IsFieldPath()) {\n+      for (const auto& idx : field_ref.field_path()->indices()) {\n+        ARROW_RETURN_NOT_OK(CheckIndex(idx, *current->type()));\n+        const auto& array = checked_cast<const StructArray&>(*current);\n+        ARROW_ASSIGN_OR_RAISE(current, array.GetFlattenedField(idx, ctx->memory_pool()));\n+      }\n+    } else {\n+      DCHECK(field_ref.IsNested());\n+      for (const auto& ref : *field_ref.nested_refs()) {\n+        ARROW_ASSIGN_OR_RAISE(current, ApplyFieldRef(ctx, ref, current));\n+      }\n\nReview Comment:\n   Possible alternative: convert the nested field ref to a FieldPath (eg with FieldRef::FindOne?) before the code to handle a FieldPath, and then it can use the same code.\n\n\n\n",
                    "created": "2022-10-25T14:10:25.775+0000",
                    "updated": "2022-10-25T14:10:25.775+0000",
                    "started": "2022-10-25T14:10:25.775+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820054",
                    "issueId": "13485682"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/worklog/820056",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #14495:\nURL: https://github.com/apache/arrow/pull/14495#discussion_r1004543920\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested.cc:\n##########\n@@ -252,6 +266,35 @@ struct StructFieldFunctor {\n     return Status::OK();\n   }\n \n+  static Result<std::shared_ptr<Array>> ApplyFieldRef(KernelContext* ctx,\n+                                                      const FieldRef& field_ref,\n+                                                      std::shared_ptr<Array> current) {\n+    if (current->type_id() != Type::STRUCT) {\n+      return Status::Invalid(\"Not a StructArray: \", current->ToString(),\n+                             \"\\nMaybe a bad FieldRef? \", field_ref.ToString());\n+    }\n+\n+    if (field_ref.IsName()) {\n+      const auto& array = checked_cast<const StructArray&>(*current);\n+      current = array.GetFieldByName(*field_ref.name());\n+      if (current == nullptr) {\n+        return Status::Invalid(\"Field not found in struct: '\", *field_ref.name(), \"'\");\n+      }\n+    } else if (field_ref.IsFieldPath()) {\n+      for (const auto& idx : field_ref.field_path()->indices()) {\n+        ARROW_RETURN_NOT_OK(CheckIndex(idx, *current->type()));\n+        const auto& array = checked_cast<const StructArray&>(*current);\n+        ARROW_ASSIGN_OR_RAISE(current, array.GetFlattenedField(idx, ctx->memory_pool()));\n+      }\n\nReview Comment:\n   Hmm, but the GetFlattenedField ensures that null bitmaps are combined, which is maybe not the case for FieldPath::Get() (since that doesn't use GetFlattenedField, it's unlikely that it takes that into account)\r\n   \r\n   (it would also be good to have tests for this situation, in case that wouldn't yet be the case)\n\n\n\n",
                    "created": "2022-10-25T14:11:45.877+0000",
                    "updated": "2022-10-25T14:11:45.877+0000",
                    "started": "2022-10-25T14:11:45.877+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820056",
                    "issueId": "13485682"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/worklog/820061",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14495:\nURL: https://github.com/apache/arrow/pull/14495#discussion_r1004546915\n\n\n##########\npython/pyarrow/tests/test_compute.py:\n##########\n@@ -2691,16 +2691,28 @@ def test_struct_fields_options():\n     b = pa.array([\"bar\", None, \"\"])\n     c = pa.StructArray.from_arrays([a, b], [\"a\", \"b\"])\n     arr = pa.StructArray.from_arrays([a, c], [\"a\", \"c\"])\n-\n-    assert pc.struct_field(arr,\n-                           indices=[1, 1]) == pa.array([\"bar\", None, \"\"])\n-    assert pc.struct_field(arr, [1, 1]) == pa.array([\"bar\", None, \"\"])\n-    assert pc.struct_field(arr, [0]) == pa.array([4, 5, 6], type=pa.int64())\n+    assert pc.struct_field(arr, '.c.b', is_dot_path=True) == b\n+    assert pc.struct_field(arr, '.a', is_dot_path=True) == a\n+    assert pc.struct_field(arr, 'a') == a\n+    assert pc.struct_field(arr, indices=[1, 1]) == b\n+    assert pc.struct_field(arr, [1, 1]) == b\n\nReview Comment:\n   Which would be equivalent to a dot path of `.b.c`, is that right?\n\n\n\n",
                    "created": "2022-10-25T14:14:06.099+0000",
                    "updated": "2022-10-25T14:14:06.099+0000",
                    "started": "2022-10-25T14:14:06.099+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820061",
                    "issueId": "13485682"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/worklog/820063",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #14495:\nURL: https://github.com/apache/arrow/pull/14495#discussion_r1004549244\n\n\n##########\npython/pyarrow/tests/test_compute.py:\n##########\n@@ -2691,16 +2691,28 @@ def test_struct_fields_options():\n     b = pa.array([\"bar\", None, \"\"])\n     c = pa.StructArray.from_arrays([a, b], [\"a\", \"b\"])\n     arr = pa.StructArray.from_arrays([a, c], [\"a\", \"c\"])\n-\n-    assert pc.struct_field(arr,\n-                           indices=[1, 1]) == pa.array([\"bar\", None, \"\"])\n-    assert pc.struct_field(arr, [1, 1]) == pa.array([\"bar\", None, \"\"])\n-    assert pc.struct_field(arr, [0]) == pa.array([4, 5, 6], type=pa.int64())\n+    assert pc.struct_field(arr, '.c.b', is_dot_path=True) == b\n+    assert pc.struct_field(arr, '.a', is_dot_path=True) == a\n+    assert pc.struct_field(arr, 'a') == a\n+    assert pc.struct_field(arr, indices=[1, 1]) == b\n+    assert pc.struct_field(arr, [1, 1]) == b\n\nReview Comment:\n   Yes, and we should probably allow passing an actual FieldRef instance as well (`pc.field((\"b\", \"c\"))`)\r\n   \r\n   Personally, I am not sure we necessarily need to support a dotted path here, especially if it requires a keyword (which seems to defeat the purpose of added convenience a bit?)\n\n\n\n",
                    "created": "2022-10-25T14:15:56.356+0000",
                    "updated": "2022-10-25T14:15:56.356+0000",
                    "started": "2022-10-25T14:15:56.356+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820063",
                    "issueId": "13485682"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/worklog/820067",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14495:\nURL: https://github.com/apache/arrow/pull/14495#discussion_r1004555251\n\n\n##########\npython/pyarrow/tests/test_compute.py:\n##########\n@@ -2691,16 +2691,28 @@ def test_struct_fields_options():\n     b = pa.array([\"bar\", None, \"\"])\n     c = pa.StructArray.from_arrays([a, b], [\"a\", \"b\"])\n     arr = pa.StructArray.from_arrays([a, c], [\"a\", \"c\"])\n-\n-    assert pc.struct_field(arr,\n-                           indices=[1, 1]) == pa.array([\"bar\", None, \"\"])\n-    assert pc.struct_field(arr, [1, 1]) == pa.array([\"bar\", None, \"\"])\n-    assert pc.struct_field(arr, [0]) == pa.array([4, 5, 6], type=pa.int64())\n+    assert pc.struct_field(arr, '.c.b', is_dot_path=True) == b\n+    assert pc.struct_field(arr, '.a', is_dot_path=True) == a\n+    assert pc.struct_field(arr, 'a') == a\n+    assert pc.struct_field(arr, indices=[1, 1]) == b\n+    assert pc.struct_field(arr, [1, 1]) == b\n\nReview Comment:\n   Could do the same assumption `FromDotPath` does and create one if it has a leading `.`, then remove the kwarg?\n\n\n\n",
                    "created": "2022-10-25T14:20:46.830+0000",
                    "updated": "2022-10-25T14:20:46.830+0000",
                    "started": "2022-10-25T14:20:46.829+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820067",
                    "issueId": "13485682"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/worklog/820076",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14495:\nURL: https://github.com/apache/arrow/pull/14495#discussion_r1004555251\n\n\n##########\npython/pyarrow/tests/test_compute.py:\n##########\n@@ -2691,16 +2691,28 @@ def test_struct_fields_options():\n     b = pa.array([\"bar\", None, \"\"])\n     c = pa.StructArray.from_arrays([a, b], [\"a\", \"b\"])\n     arr = pa.StructArray.from_arrays([a, c], [\"a\", \"c\"])\n-\n-    assert pc.struct_field(arr,\n-                           indices=[1, 1]) == pa.array([\"bar\", None, \"\"])\n-    assert pc.struct_field(arr, [1, 1]) == pa.array([\"bar\", None, \"\"])\n-    assert pc.struct_field(arr, [0]) == pa.array([4, 5, 6], type=pa.int64())\n+    assert pc.struct_field(arr, '.c.b', is_dot_path=True) == b\n+    assert pc.struct_field(arr, '.a', is_dot_path=True) == a\n+    assert pc.struct_field(arr, 'a') == a\n+    assert pc.struct_field(arr, indices=[1, 1]) == b\n+    assert pc.struct_field(arr, [1, 1]) == b\n\nReview Comment:\n   Could do the same assumption `FromDotPath` does and create one if it has a leading `.`, then remove the kwarg? And add a `auto_dot_path=True` along with it, such that if someone literally has a field with a leading dot they could switch that off?\n\n\n\n",
                    "created": "2022-10-25T14:25:42.388+0000",
                    "updated": "2022-10-25T14:25:42.388+0000",
                    "started": "2022-10-25T14:25:42.388+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820076",
                    "issueId": "13485682"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/worklog/820078",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #14495:\nURL: https://github.com/apache/arrow/pull/14495#discussion_r1004562475\n\n\n##########\npython/pyarrow/tests/test_compute.py:\n##########\n@@ -2691,16 +2691,28 @@ def test_struct_fields_options():\n     b = pa.array([\"bar\", None, \"\"])\n     c = pa.StructArray.from_arrays([a, b], [\"a\", \"b\"])\n     arr = pa.StructArray.from_arrays([a, c], [\"a\", \"c\"])\n-\n-    assert pc.struct_field(arr,\n-                           indices=[1, 1]) == pa.array([\"bar\", None, \"\"])\n-    assert pc.struct_field(arr, [1, 1]) == pa.array([\"bar\", None, \"\"])\n-    assert pc.struct_field(arr, [0]) == pa.array([4, 5, 6], type=pa.int64())\n+    assert pc.struct_field(arr, '.c.b', is_dot_path=True) == b\n+    assert pc.struct_field(arr, '.a', is_dot_path=True) == a\n+    assert pc.struct_field(arr, 'a') == a\n+    assert pc.struct_field(arr, indices=[1, 1]) == b\n+    assert pc.struct_field(arr, [1, 1]) == b\n\nReview Comment:\n   Yes, one can always use `pc.field(\"..\")` if you want no preprocessing of the specified name\n\n\n\n",
                    "created": "2022-10-25T14:26:32.472+0000",
                    "updated": "2022-10-25T14:26:32.472+0000",
                    "started": "2022-10-25T14:26:32.472+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820078",
                    "issueId": "13485682"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/worklog/820079",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14495:\nURL: https://github.com/apache/arrow/pull/14495#discussion_r1004555251\n\n\n##########\npython/pyarrow/tests/test_compute.py:\n##########\n@@ -2691,16 +2691,28 @@ def test_struct_fields_options():\n     b = pa.array([\"bar\", None, \"\"])\n     c = pa.StructArray.from_arrays([a, b], [\"a\", \"b\"])\n     arr = pa.StructArray.from_arrays([a, c], [\"a\", \"c\"])\n-\n-    assert pc.struct_field(arr,\n-                           indices=[1, 1]) == pa.array([\"bar\", None, \"\"])\n-    assert pc.struct_field(arr, [1, 1]) == pa.array([\"bar\", None, \"\"])\n-    assert pc.struct_field(arr, [0]) == pa.array([4, 5, 6], type=pa.int64())\n+    assert pc.struct_field(arr, '.c.b', is_dot_path=True) == b\n+    assert pc.struct_field(arr, '.a', is_dot_path=True) == a\n+    assert pc.struct_field(arr, 'a') == a\n+    assert pc.struct_field(arr, indices=[1, 1]) == b\n+    assert pc.struct_field(arr, [1, 1]) == b\n\nReview Comment:\n   Could do the same assumption `FromDotPath` does and create one if it has a leading `.`, then add a `auto_dot_path=True` instead, such that if someone literally has a field with a leading dot they could switch that off?\n\n\n\n",
                    "created": "2022-10-25T14:26:52.499+0000",
                    "updated": "2022-10-25T14:26:52.499+0000",
                    "started": "2022-10-25T14:26:52.499+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820079",
                    "issueId": "13485682"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/worklog/820334",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14495:\nURL: https://github.com/apache/arrow/pull/14495#discussion_r1005205421\n\n\n##########\npython/pyarrow/tests/test_compute.py:\n##########\n@@ -2691,16 +2691,28 @@ def test_struct_fields_options():\n     b = pa.array([\"bar\", None, \"\"])\n     c = pa.StructArray.from_arrays([a, b], [\"a\", \"b\"])\n     arr = pa.StructArray.from_arrays([a, c], [\"a\", \"c\"])\n-\n-    assert pc.struct_field(arr,\n-                           indices=[1, 1]) == pa.array([\"bar\", None, \"\"])\n-    assert pc.struct_field(arr, [1, 1]) == pa.array([\"bar\", None, \"\"])\n-    assert pc.struct_field(arr, [0]) == pa.array([4, 5, 6], type=pa.int64())\n+    assert pc.struct_field(arr, '.c.b', is_dot_path=True) == b\n+    assert pc.struct_field(arr, '.a', is_dot_path=True) == a\n+    assert pc.struct_field(arr, 'a') == a\n+    assert pc.struct_field(arr, indices=[1, 1]) == b\n+    assert pc.struct_field(arr, [1, 1]) == b\n\nReview Comment:\n   Done in https://github.com/apache/arrow/pull/14495/commits/0ff256726c100e791378534c9a7fdbd8d5c6dc1b and https://github.com/apache/arrow/pull/14495/commits/a4b5ce00dae66fe9a329359700d3db767eb31e20\n\n\n\n",
                    "created": "2022-10-26T04:23:25.771+0000",
                    "updated": "2022-10-26T04:23:25.771+0000",
                    "started": "2022-10-26T04:23:25.771+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820334",
                    "issueId": "13485682"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/worklog/820406",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14495:\nURL: https://github.com/apache/arrow/pull/14495#discussion_r1005416999\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested.cc:\n##########\n@@ -252,6 +266,35 @@ struct StructFieldFunctor {\n     return Status::OK();\n   }\n \n+  static Result<std::shared_ptr<Array>> ApplyFieldRef(KernelContext* ctx,\n+                                                      const FieldRef& field_ref,\n+                                                      std::shared_ptr<Array> current) {\n+    if (current->type_id() != Type::STRUCT) {\n+      return Status::Invalid(\"Not a StructArray: \", current->ToString(),\n+                             \"\\nMaybe a bad FieldRef? \", field_ref.ToString());\n+    }\n+\n+    if (field_ref.IsName()) {\n+      const auto& array = checked_cast<const StructArray&>(*current);\n+      current = array.GetFieldByName(*field_ref.name());\n+      if (current == nullptr) {\n+        return Status::Invalid(\"Field not found in struct: '\", *field_ref.name(), \"'\");\n+      }\n+    } else if (field_ref.IsFieldPath()) {\n+      for (const auto& idx : field_ref.field_path()->indices()) {\n+        ARROW_RETURN_NOT_OK(CheckIndex(idx, *current->type()));\n+        const auto& array = checked_cast<const StructArray&>(*current);\n+        ARROW_ASSIGN_OR_RAISE(current, array.GetFlattenedField(idx, ctx->memory_pool()));\n+      }\n\nReview Comment:\n   I gave it a go. Seems those expected null checks already exist as C++ tests started failing with:\r\n   `Null counts differ. Expected -1 but was 0` and similar discrepancies. \n\n\n\n",
                    "created": "2022-10-26T09:05:01.479+0000",
                    "updated": "2022-10-26T09:05:01.479+0000",
                    "started": "2022-10-26T09:05:01.479+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820406",
                    "issueId": "13485682"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/worklog/820407",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14495:\nURL: https://github.com/apache/arrow/pull/14495#discussion_r1005417498\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested.cc:\n##########\n@@ -269,14 +312,34 @@ struct StructFieldFunctor {\n   }\n };\n \n+Result<const DataType*> RecursiveResolveStructFieldType(const FieldRef& field_ref,\n\nReview Comment:\n   Good eye! :eyes: \n\n\n\n",
                    "created": "2022-10-26T09:05:36.567+0000",
                    "updated": "2022-10-26T09:05:36.567+0000",
                    "started": "2022-10-26T09:05:36.567+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820407",
                    "issueId": "13485682"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/worklog/820910",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #14495:\nURL: https://github.com/apache/arrow/pull/14495#discussion_r1006672327\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested.cc:\n##########\n@@ -252,6 +266,39 @@ struct StructFieldFunctor {\n     return Status::OK();\n   }\n \n+  static Result<std::shared_ptr<Array>> ApplyFieldRef(KernelContext* ctx,\n+                                                      const FieldRef& field_ref,\n+                                                      std::shared_ptr<Array> current) {\n+    if (current->type_id() != Type::STRUCT) {\n+      return Status::Invalid(\"Not a StructArray: \", current->ToString(),\n+                             \"\\nMaybe a bad FieldRef? \", field_ref.ToString());\n+    }\n+\n+    if (field_ref.IsName()) {\n+      const auto& array = checked_cast<const StructArray&>(*current);\n+      current = array.GetFieldByName(*field_ref.name());\n\nReview Comment:\n   I think `GetFieldByName` actually has the same concern as mentioned before about not taking into account top-level nulls? (so also for this case can convert to FieldPath with FindOne, and then this can be simplified a bit further) \r\n   (if that's the case, that probably indicates the tests needs to be expanded with a case of using a named FieldRef in the test with nulls)\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested.cc:\n##########\n@@ -271,11 +318,30 @@ struct StructFieldFunctor {\n \n Result<TypeHolder> ResolveStructFieldType(KernelContext* ctx,\n                                           const std::vector<TypeHolder>& types) {\n-  const auto& options = OptionsWrapper<StructFieldOptions>::Get(ctx);\n+  const auto& field_ref = OptionsWrapper<StructFieldOptions>::Get(ctx).field_ref;\n   const DataType* type = types.front().type;\n-  for (const auto& index : options.indices) {\n-    RETURN_NOT_OK(StructFieldFunctor::CheckIndex(index, *type));\n-    type = type->field(index)->type().get();\n+\n+  if (field_ref.IsName()) {\n+    for (const auto& path : field_ref.FindAll(*type)) {\n+      for (const auto& index : path.indices()) {\n+        RETURN_NOT_OK(StructFieldFunctor::CheckIndex(index, *type));\n+        type = type->field(index)->type().get();\n+      }\n+    }\n\nReview Comment:\n   The fact that you use FindAll here, that would catch duplicate field names? Maybe we don't necessarily have to support that? (also the way that you loop over those might not be correct?)\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested.cc:\n##########\n@@ -271,11 +318,30 @@ struct StructFieldFunctor {\n \n Result<TypeHolder> ResolveStructFieldType(KernelContext* ctx,\n                                           const std::vector<TypeHolder>& types) {\n-  const auto& options = OptionsWrapper<StructFieldOptions>::Get(ctx);\n+  const auto& field_ref = OptionsWrapper<StructFieldOptions>::Get(ctx).field_ref;\n   const DataType* type = types.front().type;\n-  for (const auto& index : options.indices) {\n-    RETURN_NOT_OK(StructFieldFunctor::CheckIndex(index, *type));\n-    type = type->field(index)->type().get();\n+\n+  if (field_ref.IsName()) {\n+    for (const auto& path : field_ref.FindAll(*type)) {\n+      for (const auto& index : path.indices()) {\n+        RETURN_NOT_OK(StructFieldFunctor::CheckIndex(index, *type));\n+        type = type->field(index)->type().get();\n+      }\n+    }\n+  } else {\n+    DCHECK(field_ref.IsFieldPath() || field_ref.IsNested());\n+\n+    FieldPath field_path;\n+    if (field_ref.IsNested()) {\n+      ARROW_ASSIGN_OR_RAISE(field_path, field_ref.FindOne(*type));\n+    } else {\n+      field_path = *field_ref.field_path();\n+    }\n\nReview Comment:\n   I am wondering if it is actually needed to do this if/else. Also a FieldRef backed by a field path has a FindOne method, and in that case it will basically return the same field path, while still checking that it is a valid field path (not out of bounds)\n\n\n\n",
                    "created": "2022-10-27T10:21:28.740+0000",
                    "updated": "2022-10-27T10:21:28.740+0000",
                    "started": "2022-10-27T10:21:28.739+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820910",
                    "issueId": "13485682"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/worklog/820940",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14495:\nURL: https://github.com/apache/arrow/pull/14495#discussion_r1006750361\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested.cc:\n##########\n@@ -271,11 +318,30 @@ struct StructFieldFunctor {\n \n Result<TypeHolder> ResolveStructFieldType(KernelContext* ctx,\n                                           const std::vector<TypeHolder>& types) {\n-  const auto& options = OptionsWrapper<StructFieldOptions>::Get(ctx);\n+  const auto& field_ref = OptionsWrapper<StructFieldOptions>::Get(ctx).field_ref;\n   const DataType* type = types.front().type;\n-  for (const auto& index : options.indices) {\n-    RETURN_NOT_OK(StructFieldFunctor::CheckIndex(index, *type));\n-    type = type->field(index)->type().get();\n+\n+  if (field_ref.IsName()) {\n+    for (const auto& path : field_ref.FindAll(*type)) {\n+      for (const auto& index : path.indices()) {\n+        RETURN_NOT_OK(StructFieldFunctor::CheckIndex(index, *type));\n+        type = type->field(index)->type().get();\n+      }\n+    }\n+  } else {\n+    DCHECK(field_ref.IsFieldPath() || field_ref.IsNested());\n+\n+    FieldPath field_path;\n+    if (field_ref.IsNested()) {\n+      ARROW_ASSIGN_OR_RAISE(field_path, field_ref.FindOne(*type));\n+    } else {\n+      field_path = *field_ref.field_path();\n+    }\n\nReview Comment:\n   Seems like it is needed, removing if/else and using `field_ref.FindOne(*type)` will abort when `pc.struct_field(arr, [])` (empty indices) with:\r\n   ```\r\n   pyarrow/tests/test_compute.py::test_struct_fields_options /home/milesg/Projects/arrow/cpp/src/arrow/type.cc:1360:  Check failed: _s.ok() Operation failed: maybe_field.status()\r\n   Bad status: Invalid: empty indices cannot be traversed\r\n   ```\r\n   Seems like another if statement would be needed to handle that case, so maybe stick with this?\n\n\n\n",
                    "created": "2022-10-27T11:29:34.080+0000",
                    "updated": "2022-10-27T11:29:34.080+0000",
                    "started": "2022-10-27T11:29:34.079+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820940",
                    "issueId": "13485682"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/worklog/820949",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14495:\nURL: https://github.com/apache/arrow/pull/14495#discussion_r1006750361\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested.cc:\n##########\n@@ -271,11 +318,30 @@ struct StructFieldFunctor {\n \n Result<TypeHolder> ResolveStructFieldType(KernelContext* ctx,\n                                           const std::vector<TypeHolder>& types) {\n-  const auto& options = OptionsWrapper<StructFieldOptions>::Get(ctx);\n+  const auto& field_ref = OptionsWrapper<StructFieldOptions>::Get(ctx).field_ref;\n   const DataType* type = types.front().type;\n-  for (const auto& index : options.indices) {\n-    RETURN_NOT_OK(StructFieldFunctor::CheckIndex(index, *type));\n-    type = type->field(index)->type().get();\n+\n+  if (field_ref.IsName()) {\n+    for (const auto& path : field_ref.FindAll(*type)) {\n+      for (const auto& index : path.indices()) {\n+        RETURN_NOT_OK(StructFieldFunctor::CheckIndex(index, *type));\n+        type = type->field(index)->type().get();\n+      }\n+    }\n+  } else {\n+    DCHECK(field_ref.IsFieldPath() || field_ref.IsNested());\n+\n+    FieldPath field_path;\n+    if (field_ref.IsNested()) {\n+      ARROW_ASSIGN_OR_RAISE(field_path, field_ref.FindOne(*type));\n+    } else {\n+      field_path = *field_ref.field_path();\n+    }\n\nReview Comment:\n   Seems like it is needed, removing if/else and using `field_ref.FindOne(*type)` will abort when `pc.struct_field(arr, [])` (empty indices) with:\r\n   ```\r\n   pyarrow/tests/test_compute.py::test_struct_fields_options /home/milesg/Projects/arrow/cpp/src/arrow/type.cc:1360:  Check failed: _s.ok() Operation failed: maybe_field.status()\r\n   Bad status: Invalid: empty indices cannot be traversed\r\n   ```\r\n   Seems like another if statement would be needed to handle that case, so maybe stick with this? (updated to use FindOne for both `IsName()` and `IsNested()`)\n\n\n\n",
                    "created": "2022-10-27T11:43:15.390+0000",
                    "updated": "2022-10-27T11:43:15.390+0000",
                    "started": "2022-10-27T11:43:15.389+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820949",
                    "issueId": "13485682"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/worklog/821011",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #14495:\nURL: https://github.com/apache/arrow/pull/14495#discussion_r1006894857\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested.cc:\n##########\n@@ -271,11 +318,30 @@ struct StructFieldFunctor {\n \n Result<TypeHolder> ResolveStructFieldType(KernelContext* ctx,\n                                           const std::vector<TypeHolder>& types) {\n-  const auto& options = OptionsWrapper<StructFieldOptions>::Get(ctx);\n+  const auto& field_ref = OptionsWrapper<StructFieldOptions>::Get(ctx).field_ref;\n   const DataType* type = types.front().type;\n-  for (const auto& index : options.indices) {\n-    RETURN_NOT_OK(StructFieldFunctor::CheckIndex(index, *type));\n-    type = type->field(index)->type().get();\n+\n+  if (field_ref.IsName()) {\n+    for (const auto& path : field_ref.FindAll(*type)) {\n+      for (const auto& index : path.indices()) {\n+        RETURN_NOT_OK(StructFieldFunctor::CheckIndex(index, *type));\n+        type = type->field(index)->type().get();\n+      }\n+    }\n+  } else {\n+    DCHECK(field_ref.IsFieldPath() || field_ref.IsNested());\n+\n+    FieldPath field_path;\n+    if (field_ref.IsNested()) {\n+      ARROW_ASSIGN_OR_RAISE(field_path, field_ref.FindOne(*type));\n+    } else {\n+      field_path = *field_ref.field_path();\n+    }\n\nReview Comment:\n   I am wondering if it is actually intentional that we support empty index (I don't see it covered in the C++ tests?). That doesn't sound very useful? (it just returns the original array?)\n\n\n\n",
                    "created": "2022-10-27T13:45:30.936+0000",
                    "updated": "2022-10-27T13:45:30.936+0000",
                    "started": "2022-10-27T13:45:30.936+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "821011",
                    "issueId": "13485682"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/worklog/821025",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14495:\nURL: https://github.com/apache/arrow/pull/14495#discussion_r1006946204\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested.cc:\n##########\n@@ -271,11 +318,30 @@ struct StructFieldFunctor {\n \n Result<TypeHolder> ResolveStructFieldType(KernelContext* ctx,\n                                           const std::vector<TypeHolder>& types) {\n-  const auto& options = OptionsWrapper<StructFieldOptions>::Get(ctx);\n+  const auto& field_ref = OptionsWrapper<StructFieldOptions>::Get(ctx).field_ref;\n   const DataType* type = types.front().type;\n-  for (const auto& index : options.indices) {\n-    RETURN_NOT_OK(StructFieldFunctor::CheckIndex(index, *type));\n-    type = type->field(index)->type().get();\n+\n+  if (field_ref.IsName()) {\n+    for (const auto& path : field_ref.FindAll(*type)) {\n+      for (const auto& index : path.indices()) {\n+        RETURN_NOT_OK(StructFieldFunctor::CheckIndex(index, *type));\n+        type = type->field(index)->type().get();\n+      }\n+    }\n+  } else {\n+    DCHECK(field_ref.IsFieldPath() || field_ref.IsNested());\n+\n+    FieldPath field_path;\n+    if (field_ref.IsNested()) {\n+      ARROW_ASSIGN_OR_RAISE(field_path, field_ref.FindOne(*type));\n+    } else {\n+      field_path = *field_ref.field_path();\n+    }\n\nReview Comment:\n   The empty index case was in the Python tests. \r\n   \r\n   I suppose it may be useful if only to serve the purpose of idempotent behavior, similar to `[:]` or `start==stop` -> empty lists in the `list_slice` kernel. Albeit those are unique to slicing.\n\n\n\n",
                    "created": "2022-10-27T14:24:39.477+0000",
                    "updated": "2022-10-27T14:24:39.477+0000",
                    "started": "2022-10-27T14:24:39.476+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "821025",
                    "issueId": "13485682"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/worklog/821981",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #14495:\nURL: https://github.com/apache/arrow/pull/14495#discussion_r1009552587\n\n\n##########\ncpp/src/arrow/compute/api_scalar.h:\n##########\n@@ -277,12 +277,16 @@ class ARROW_EXPORT SetLookupOptions : public FunctionOptions {\n class ARROW_EXPORT StructFieldOptions : public FunctionOptions {\n  public:\n   explicit StructFieldOptions(std::vector<int> indices);\n+  explicit StructFieldOptions(std::initializer_list<int>);\n+  explicit StructFieldOptions(FieldRef field_ref,\n+                              std::vector<int> indices = std::vector<int>());\n   StructFieldOptions();\n   static constexpr char const kTypeName[] = \"StructFieldOptions\";\n \n   /// The child indices to extract. For instance, to get the 2nd child\n   /// of the 1st child of a struct or union, this would be {0, 1}.\n   std::vector<int> indices;\n+  FieldRef field_ref;\n\nReview Comment:\n   You probably don't need to keep the `std::vector<int> indices` since the `FieldRef` is able to replace them?\n\n\n\n",
                    "created": "2022-10-31T15:26:23.204+0000",
                    "updated": "2022-10-31T15:26:23.204+0000",
                    "started": "2022-10-31T15:26:23.203+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "821981",
                    "issueId": "13485682"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/worklog/821983",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #14495:\nURL: https://github.com/apache/arrow/pull/14495#discussion_r1009559794\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested.cc:\n##########\n@@ -252,6 +266,29 @@ struct StructFieldFunctor {\n     return Status::OK();\n   }\n \n+  static Result<std::shared_ptr<Array>> ApplyFieldRef(KernelContext* ctx,\n+                                                      const FieldRef& field_ref,\n+                                                      std::shared_ptr<Array> current) {\n+    if (current->type_id() != Type::STRUCT) {\n\nReview Comment:\n   Hmm, why wouldn't this function work on unions?\n\n\n\n",
                    "created": "2022-10-31T15:32:33.573+0000",
                    "updated": "2022-10-31T15:32:33.573+0000",
                    "started": "2022-10-31T15:32:33.573+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "821983",
                    "issueId": "13485682"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 39000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1fcf5cdc[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@152e42c7[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5880195a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3fdf40f7[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@50fb3bc4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@9b2225b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5120b0fe[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@14bd9ad5[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1d91a69d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@529ff8e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@51da1895[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@29494b49[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 39000,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Oct 13 12:21:52 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17989/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2022-10-11T13:36:02.000+0000",
        "updated": "2022-11-10T14:04:21.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently the \"struct_field\" kernel only works for integer indices for the child fields. From the StructFieldOption class (https://github.com/apache/arrow/blob/3d7f2f22a0fc441a41b8fa971e11c0f4290ebb24/cpp/src/arrow/compute/api_scalar.h#L283-L285):\r\n\r\n{code}\r\n  /// The child indices to extract. For instance, to get the 2nd child\r\n  /// of the 1st child of a struct or union, this would be {0, 1}.\r\n  std::vector<int> indices;\r\n{code}\r\n\r\nIt would be nice if you could also refer to fields by name in addition to by position.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "10h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 39000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Enable struct_field kernel to accept string field names",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/comment/17615821",
                    "id": "17615821",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "This seems somewhat duplicate / related to ARROW-17141 (cc [~rokm] [~lidavidm]), although I don't fully understand why that was closed. David mentioned:\r\n\r\n> Yeah, if the Python bindings convert names to indices that makes sense.\r\n\r\nI suppose if you call \"struct_field\" directly on an actual StructArray, it's indeed the binding that could do this string name -> index conversion (although it currently does not do that). But if you use this with expressions, at the moment when constructing the expression (eg with {{pc.struct_field(pc.field(\"my_struct\"), [\"my_field\"])}} you don't know the schema and can't convert the field name to index. \r\n\r\nIt _seems_ relatively straightforward in the kernel itself to also work with string field names (getting the index would be a {{struct_array->type->GetFieldIndex(name)}} away), unless I am missing some consequences?\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2022-10-11T13:52:21.009+0000",
                    "updated": "2022-10-11T13:52:21.009+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/comment/17615838",
                    "id": "17615838",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I think that was closed because you can already use FieldPath with a schema to resolve a sequence of field names into a sequence of field indices. But indeed this doesn't help the bindings.\r\n\r\nI just wanted to keep the kernel simple during the original implementation. I think it would be fine to add a list of names instead, and the kernel could just turn that into indices before proceeding (again via FieldPath).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-10-11T14:00:14.628+0000",
                    "updated": "2022-10-11T14:00:14.628+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/comment/17615860",
                    "id": "17615860",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "This would indeed be nice to have!",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2022-10-11T14:23:33.167+0000",
                    "updated": "2022-10-11T14:23:33.167+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/comment/17616998",
                    "id": "17616998",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "Currently the StructFieldOptions have a {{std::vector<int> indices}} field. \r\n\r\nIf we want to add ability to specify string names, one option would be to make this a vector of std::variant<int, std::string>?   \r\nOr otherwise add a second option argument, eg {{names}}, that can be used to list strings. But then those two options can only be used exclusively (only of of both can be specified, not the nicest API). Also the variant would allow a mixture of names and indices, which is something that FieldRef also allows.\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2022-10-13T12:02:32.272+0000",
                    "updated": "2022-10-13T12:02:32.272+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/comment/17617002",
                    "id": "17617002",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Could we just change it to take a FieldRef directly? Would that be an issue for Python bindings?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-10-13T12:06:48.637+0000",
                    "updated": "2022-10-13T12:06:48.637+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/comment/17617007",
                    "id": "17617007",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "Ah, yes, that's also a good option (and that's fine for the python bindings, FieldRef is exposed in python)\r\nBut that would still be a separate option to avoid a breaking change in C++? Or can we have a constructor of the options class that translates a vector of indices into a FieldRef? (I don't know if the StructFieldOptions class fields are considered public? probably yes?)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2022-10-13T12:17:50.896+0000",
                    "updated": "2022-10-13T12:17:50.896+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485682/comment/17617009",
                    "id": "17617009",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "The fields are public. I think a change is OK, or else just having both fields is OK (with a deprecation cycle on the redundant one)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-10-13T12:21:52.819+0000",
                    "updated": "2022-10-13T12:21:52.819+0000"
                }
            ],
            "maxResults": 7,
            "total": 7,
            "startAt": 0
        },
        "customfield_12311820": "0|z199i8:",
        "customfield_12314139": null
    }
}