{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13329509",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329509",
    "key": "ARROW-10103",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348647",
                "id": "12348647",
                "name": "1.0.1",
                "archived": false,
                "released": true,
                "releaseDate": "2020-08-21"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "aggregateprogress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10103/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 21,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329509/worklog/491497",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me opened a new pull request #8280:\nURL: https://github.com/apache/arrow/pull/8280\n\n\n   Checks if a list contains a value in either a primitive or string\r\n   \r\n   Large lists are also supported\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-26T01:54:33.170+0000",
                    "updated": "2020-09-26T01:54:33.170+0000",
                    "started": "2020-09-26T01:54:33.170+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "491497",
                    "issueId": "13329509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329509/worklog/491499",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #8280:\nURL: https://github.com/apache/arrow/pull/8280#issuecomment-699270344\n\n\n   This is extracted from #6770, \r\n   \r\n   PTAL @alamb @jorgecarleitao @jhorstmann \r\n   \r\n   CC @mcassels @maxburke \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-26T01:56:29.640+0000",
                    "updated": "2020-09-26T01:56:29.640+0000",
                    "started": "2020-09-26T01:56:29.640+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "491499",
                    "issueId": "13329509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329509/worklog/491500",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8280:\nURL: https://github.com/apache/arrow/pull/8280#discussion_r495375649\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/comparison.rs\n##########\n@@ -555,11 +557,159 @@ where\n     compare_op_scalar!(left, right, |a, b| a >= b)\n }\n \n+/// Checks if a `GenericListArray` contains a value in the `PrimitiveArray`\n+pub fn contains<T, OffsetSize>(\n+    left: &PrimitiveArray<T>,\n+    right: &GenericListArray<OffsetSize>,\n+) -> Result<BooleanArray>\n+where\n+    T: ArrowNumericType,\n+    OffsetSize: OffsetSizeTrait,\n+{\n+    if left.len() != right.len() {\n+        return Err(ArrowError::ComputeError(\n+            \"Cannot perform comparison operation on arrays of different length\"\n+                .to_string(),\n+        ));\n+    }\n+\n+    let not_both_null_bit_buffer =\n+        match compare_option_bitmap(left.data_ref(), right.data_ref(), left.len())? {\n+            Some(buff) => buff,\n+            None => new_all_set_buffer(left.len()),\n+        };\n+    let not_both_null_bitmap = not_both_null_bit_buffer.data();\n+\n+    let left_data = left.data();\n+    let left_null_bitmap = match left_data.null_bitmap() {\n+        Some(bitmap) => bitmap.clone().into_buffer(),\n+        _ => new_all_set_buffer(left.len()),\n+    };\n+    let left_null_bitmap = left_null_bitmap.data();\n+\n+    let mut result = BooleanBufferBuilder::new(left.len());\n+\n+    for i in 0..left.len() {\n+        let mut is_in = false;\n+\n+        // contains(null, null) = false\n+        if bit_util::get_bit(not_both_null_bitmap, i) {\n+            let list = right.value(i);\n+\n+            // contains(null, [null]) = true\n+            if !bit_util::get_bit(left_null_bitmap, i) {\n+                if list.null_count() > 0 {\n+                    is_in = true;\n+                }\n+            } else {\n+                let list = list.as_any().downcast_ref::<PrimitiveArray<T>>().unwrap();\n+\n+                for j in 0..list.len() {\n+                    if list.is_valid(j) && (left.value(i) == list.value(j)) {\n+                        is_in = true;\n+                    }\n+                }\n+            }\n+        }\n+        result.append(is_in)?;\n+    }\n+\n+    let data = ArrayData::new(\n+        DataType::Boolean,\n+        left.len(),\n+        None,\n+        None,\n+        left.offset(),\n+        vec![result.finish()],\n+        vec![],\n+    );\n+    Ok(PrimitiveArray::<BooleanType>::from(Arc::new(data)))\n+}\n+\n+/// Checks if a `GenericListArray` contains a value in the `GenericStringArray`\n+pub fn contains_utf8<OffsetSize>(\n+    left: &GenericStringArray<OffsetSize>,\n+    right: &ListArray,\n+) -> Result<BooleanArray>\n+where\n+    OffsetSize: OffsetSizeTrait,\n+{\n+    if left.len() != right.len() {\n+        return Err(ArrowError::ComputeError(\n+            \"Cannot perform comparison operation on arrays of different length\"\n+                .to_string(),\n+        ));\n+    }\n+\n+    let not_both_null_bit_buffer =\n+        match compare_option_bitmap(left.data_ref(), right.data_ref(), left.len())? {\n+            Some(buff) => buff,\n+            None => new_all_set_buffer(left.len()),\n+        };\n+    let not_both_null_bitmap = not_both_null_bit_buffer.data();\n+\n+    let left_data = left.data();\n+    let left_null_bitmap = match left_data.null_bitmap() {\n+        Some(bitmap) => bitmap.clone().into_buffer(),\n+        _ => new_all_set_buffer(left.len()),\n+    };\n+    let left_null_bitmap = left_null_bitmap.data();\n+\n+    let mut result = BooleanBufferBuilder::new(left.len());\n+\n+    for i in 0..left.len() {\n+        let mut is_in = false;\n+\n+        // contains(null, null) = false\n+        if bit_util::get_bit(not_both_null_bitmap, i) {\n+            let list = right.value(i);\n+\n+            // contains(null, [null]) = true\n+            if !bit_util::get_bit(left_null_bitmap, i) {\n+                if list.null_count() > 0 {\n+                    is_in = true;\n+                }\n+            } else {\n+                let list = list\n+                    .as_any()\n+                    .downcast_ref::<GenericStringArray<OffsetSize>>()\n+                    .unwrap();\n+\n+                for j in 0..list.len() {\n+                    if list.is_valid(j) && (left.value(i) == list.value(j)) {\n+                        is_in = true;\n+                    }\n+                }\n+            }\n+        }\n+        result.append(is_in)?;\n+    }\n+\n+    let data = ArrayData::new(\n+        DataType::Boolean,\n+        left.len(),\n+        None,\n+        None,\n+        left.offset(),\n\nReview comment:\n       Is it correct for us to reuse the offset, or should this be 0? My intuition says the latter, but I'm too tired to figure it out. Same applies above\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-26T01:57:42.673+0000",
                    "updated": "2020-09-26T01:57:42.673+0000",
                    "started": "2020-09-26T01:57:42.673+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "491500",
                    "issueId": "13329509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329509/worklog/491505",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8280:\nURL: https://github.com/apache/arrow/pull/8280#issuecomment-699272912\n\n\n   https://issues.apache.org/jira/browse/ARROW-10103\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-26T02:06:28.499+0000",
                    "updated": "2020-09-26T02:06:28.499+0000",
                    "started": "2020-09-26T02:06:28.499+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "491505",
                    "issueId": "13329509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329509/worklog/491508",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8280:\nURL: https://github.com/apache/arrow/pull/8280#discussion_r495394022\n\n\n\n##########\nFile path: rust/arrow/src/compute/util.rs\n##########\n@@ -71,6 +71,47 @@ pub(super) fn combine_option_bitmap(\n     }\n }\n \n+/// Compares the null bitmaps of two arrays using a bitwise `or` operation.\n+///\n+/// This function is useful when implementing operations on higher level arrays.\n+pub(super) fn compare_option_bitmap(\n+    left_data: &ArrayDataRef,\n+    right_data: &ArrayDataRef,\n+    len_in_bits: usize,\n+) -> Result<Option<Buffer>> {\n+    let left_offset_in_bits = left_data.offset();\n+    let right_offset_in_bits = right_data.offset();\n+\n+    let left = left_data.null_buffer();\n+    let right = right_data.null_buffer();\n+\n+    if (left.is_some() && left_offset_in_bits % 8 != 0)\n\nReview comment:\n       Out of curiosity: is this true in general, or is for these (this and above) implementation, that uses this assumption?\n\n##########\nFile path: rust/arrow/src/compute/kernels/comparison.rs\n##########\n@@ -555,11 +557,159 @@ where\n     compare_op_scalar!(left, right, |a, b| a >= b)\n }\n \n+/// Checks if a `GenericListArray` contains a value in the `PrimitiveArray`\n+pub fn contains<T, OffsetSize>(\n+    left: &PrimitiveArray<T>,\n+    right: &GenericListArray<OffsetSize>,\n+) -> Result<BooleanArray>\n+where\n+    T: ArrowNumericType,\n+    OffsetSize: OffsetSizeTrait,\n+{\n+    if left.len() != right.len() {\n+        return Err(ArrowError::ComputeError(\n+            \"Cannot perform comparison operation on arrays of different length\"\n+                .to_string(),\n+        ));\n+    }\n+\n+    let not_both_null_bit_buffer =\n+        match compare_option_bitmap(left.data_ref(), right.data_ref(), left.len())? {\n+            Some(buff) => buff,\n+            None => new_all_set_buffer(left.len()),\n+        };\n+    let not_both_null_bitmap = not_both_null_bit_buffer.data();\n+\n+    let left_data = left.data();\n+    let left_null_bitmap = match left_data.null_bitmap() {\n+        Some(bitmap) => bitmap.clone().into_buffer(),\n+        _ => new_all_set_buffer(left.len()),\n+    };\n+    let left_null_bitmap = left_null_bitmap.data();\n+\n+    let mut result = BooleanBufferBuilder::new(left.len());\n+\n+    for i in 0..left.len() {\n+        let mut is_in = false;\n+\n+        // contains(null, null) = false\n+        if bit_util::get_bit(not_both_null_bitmap, i) {\n+            let list = right.value(i);\n+\n+            // contains(null, [null]) = true\n+            if !bit_util::get_bit(left_null_bitmap, i) {\n+                if list.null_count() > 0 {\n+                    is_in = true;\n+                }\n+            } else {\n+                let list = list.as_any().downcast_ref::<PrimitiveArray<T>>().unwrap();\n+\n+                for j in 0..list.len() {\n+                    if list.is_valid(j) && (left.value(i) == list.value(j)) {\n+                        is_in = true;\n+                    }\n+                }\n+            }\n+        }\n+        result.append(is_in)?;\n+    }\n+\n+    let data = ArrayData::new(\n+        DataType::Boolean,\n+        left.len(),\n+        None,\n+        None,\n+        left.offset(),\n+        vec![result.finish()],\n+        vec![],\n+    );\n+    Ok(PrimitiveArray::<BooleanType>::from(Arc::new(data)))\n+}\n+\n+/// Checks if a `GenericListArray` contains a value in the `GenericStringArray`\n+pub fn contains_utf8<OffsetSize>(\n+    left: &GenericStringArray<OffsetSize>,\n+    right: &ListArray,\n+) -> Result<BooleanArray>\n+where\n+    OffsetSize: OffsetSizeTrait,\n+{\n+    if left.len() != right.len() {\n+        return Err(ArrowError::ComputeError(\n+            \"Cannot perform comparison operation on arrays of different length\"\n+                .to_string(),\n+        ));\n+    }\n+\n+    let not_both_null_bit_buffer =\n+        match compare_option_bitmap(left.data_ref(), right.data_ref(), left.len())? {\n+            Some(buff) => buff,\n+            None => new_all_set_buffer(left.len()),\n+        };\n+    let not_both_null_bitmap = not_both_null_bit_buffer.data();\n+\n+    let left_data = left.data();\n+    let left_null_bitmap = match left_data.null_bitmap() {\n+        Some(bitmap) => bitmap.clone().into_buffer(),\n+        _ => new_all_set_buffer(left.len()),\n+    };\n+    let left_null_bitmap = left_null_bitmap.data();\n+\n+    let mut result = BooleanBufferBuilder::new(left.len());\n+\n+    for i in 0..left.len() {\n+        let mut is_in = false;\n+\n+        // contains(null, null) = false\n+        if bit_util::get_bit(not_both_null_bitmap, i) {\n+            let list = right.value(i);\n+\n+            // contains(null, [null]) = true\n+            if !bit_util::get_bit(left_null_bitmap, i) {\n+                if list.null_count() > 0 {\n+                    is_in = true;\n+                }\n+            } else {\n+                let list = list\n+                    .as_any()\n+                    .downcast_ref::<GenericStringArray<OffsetSize>>()\n+                    .unwrap();\n+\n+                for j in 0..list.len() {\n+                    if list.is_valid(j) && (left.value(i) == list.value(j)) {\n+                        is_in = true;\n+                    }\n+                }\n+            }\n+        }\n+        result.append(is_in)?;\n+    }\n+\n+    let data = ArrayData::new(\n+        DataType::Boolean,\n+        left.len(),\n+        None,\n+        None,\n+        left.offset(),\n\nReview comment:\n       I also think that this should be zero: we are building a new buffer (`result.finish()`) and thus there is no need to start from an offset. I would expect that a test with `left.offset() != 0` to not pass with this code, as we read `result`'s buffer from left's offset.\n\n##########\nFile path: rust/arrow/src/compute/util.rs\n##########\n@@ -71,6 +71,47 @@ pub(super) fn combine_option_bitmap(\n     }\n }\n \n+/// Compares the null bitmaps of two arrays using a bitwise `or` operation.\n+///\n+/// This function is useful when implementing operations on higher level arrays.\n+pub(super) fn compare_option_bitmap(\n\nReview comment:\n       tests missing, I think.\n\n##########\nFile path: rust/arrow/src/compute/kernels/comparison.rs\n##########\n@@ -555,11 +555,159 @@ where\n     compare_op_scalar!(left, right, |a, b| a >= b)\n }\n \n+/// Checks if a `GenericListArray` contains a value in the `PrimitiveArray`\n+pub fn contains<T, OffsetSize>(\n+    left: &PrimitiveArray<T>,\n+    right: &GenericListArray<OffsetSize>,\n+) -> Result<BooleanArray>\n+where\n+    T: ArrowNumericType,\n+    OffsetSize: OffsetSizeTrait,\n+{\n+    if left.len() != right.len() {\n+        return Err(ArrowError::ComputeError(\n+            \"Cannot perform comparison operation on arrays of different length\"\n+                .to_string(),\n+        ));\n+    }\n+\n+    let not_both_null_bit_buffer =\n+        match compare_option_bitmap(left.data_ref(), right.data_ref(), left.len())? {\n+            Some(buff) => buff,\n+            None => new_all_set_buffer(left.len()),\n+        };\n+    let not_both_null_bitmap = not_both_null_bit_buffer.data();\n+\n+    let left_data = left.data();\n+    let left_null_bitmap = match left_data.null_bitmap() {\n+        Some(bitmap) => bitmap.clone().into_buffer(),\n+        _ => new_all_set_buffer(left.len()),\n+    };\n+    let left_null_bitmap = left_null_bitmap.data();\n+\n+    let mut result = BooleanBufferBuilder::new(left.len());\n+\n+    for i in 0..left.len() {\n+        let mut is_in = false;\n+\n+        // contains(null, null) = false\n+        if bit_util::get_bit(not_both_null_bitmap, i) {\n+            let list = right.value(i);\n+\n+            // contains(null, [null]) = true\n+            if !bit_util::get_bit(left_null_bitmap, i) {\n+                if list.null_count() > 0 {\n+                    is_in = true;\n\nReview comment:\n       I think that we can short-circuit here (`result.append(true)?; break`) (and equivalent instances). In rust's notation, I think that we are using the [`Iterator::any`](https://doc.rust-lang.org/stable/rust-by-example/fn/closures/closure_examples/iter_any.html) with some null logic sprinkled on top.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-26T03:00:21.836+0000",
                    "updated": "2020-09-26T03:00:21.836+0000",
                    "started": "2020-09-26T03:00:21.835+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "491508",
                    "issueId": "13329509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329509/worklog/491541",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8280:\nURL: https://github.com/apache/arrow/pull/8280#discussion_r495431850\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/comparison.rs\n##########\n@@ -555,11 +555,159 @@ where\n     compare_op_scalar!(left, right, |a, b| a >= b)\n }\n \n+/// Checks if a `GenericListArray` contains a value in the `PrimitiveArray`\n+pub fn contains<T, OffsetSize>(\n+    left: &PrimitiveArray<T>,\n+    right: &GenericListArray<OffsetSize>,\n+) -> Result<BooleanArray>\n+where\n+    T: ArrowNumericType,\n+    OffsetSize: OffsetSizeTrait,\n+{\n+    if left.len() != right.len() {\n+        return Err(ArrowError::ComputeError(\n+            \"Cannot perform comparison operation on arrays of different length\"\n+                .to_string(),\n+        ));\n+    }\n+\n+    let not_both_null_bit_buffer =\n+        match compare_option_bitmap(left.data_ref(), right.data_ref(), left.len())? {\n+            Some(buff) => buff,\n+            None => new_all_set_buffer(left.len()),\n+        };\n+    let not_both_null_bitmap = not_both_null_bit_buffer.data();\n+\n+    let left_data = left.data();\n+    let left_null_bitmap = match left_data.null_bitmap() {\n+        Some(bitmap) => bitmap.clone().into_buffer(),\n+        _ => new_all_set_buffer(left.len()),\n+    };\n+    let left_null_bitmap = left_null_bitmap.data();\n+\n+    let mut result = BooleanBufferBuilder::new(left.len());\n+\n+    for i in 0..left.len() {\n+        let mut is_in = false;\n+\n+        // contains(null, null) = false\n+        if bit_util::get_bit(not_both_null_bitmap, i) {\n+            let list = right.value(i);\n+\n+            // contains(null, [null]) = true\n+            if !bit_util::get_bit(left_null_bitmap, i) {\n+                if list.null_count() > 0 {\n+                    is_in = true;\n+                }\n+            } else {\n+                let list = list.as_any().downcast_ref::<PrimitiveArray<T>>().unwrap();\n+\n+                for j in 0..list.len() {\n+                    if list.is_valid(j) && (left.value(i) == list.value(j)) {\n+                        is_in = true;\n+                    }\n+                }\n+            }\n+        }\n+        result.append(is_in)?;\n+    }\n+\n+    let data = ArrayData::new(\n+        DataType::Boolean,\n+        left.len(),\n+        None,\n+        None,\n+        left.offset(),\n\nReview comment:\n       Offset should be 0 since the result is a new buffer that only contains the relevant data\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-26T08:27:26.383+0000",
                    "updated": "2020-09-26T08:27:26.383+0000",
                    "started": "2020-09-26T08:27:26.383+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "491541",
                    "issueId": "13329509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329509/worklog/491544",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8280:\nURL: https://github.com/apache/arrow/pull/8280#discussion_r495432114\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/comparison.rs\n##########\n@@ -555,11 +555,159 @@ where\n     compare_op_scalar!(left, right, |a, b| a >= b)\n }\n \n+/// Checks if a `GenericListArray` contains a value in the `PrimitiveArray`\n+pub fn contains<T, OffsetSize>(\n+    left: &PrimitiveArray<T>,\n+    right: &GenericListArray<OffsetSize>,\n+) -> Result<BooleanArray>\n+where\n+    T: ArrowNumericType,\n+    OffsetSize: OffsetSizeTrait,\n+{\n+    if left.len() != right.len() {\n+        return Err(ArrowError::ComputeError(\n+            \"Cannot perform comparison operation on arrays of different length\"\n+                .to_string(),\n+        ));\n+    }\n+\n+    let not_both_null_bit_buffer =\n+        match compare_option_bitmap(left.data_ref(), right.data_ref(), left.len())? {\n+            Some(buff) => buff,\n+            None => new_all_set_buffer(left.len()),\n+        };\n+    let not_both_null_bitmap = not_both_null_bit_buffer.data();\n+\n+    let left_data = left.data();\n+    let left_null_bitmap = match left_data.null_bitmap() {\n+        Some(bitmap) => bitmap.clone().into_buffer(),\n+        _ => new_all_set_buffer(left.len()),\n+    };\n+    let left_null_bitmap = left_null_bitmap.data();\n+\n+    let mut result = BooleanBufferBuilder::new(left.len());\n+\n+    for i in 0..left.len() {\n+        let mut is_in = false;\n+\n+        // contains(null, null) = false\n+        if bit_util::get_bit(not_both_null_bitmap, i) {\n+            let list = right.value(i);\n+\n+            // contains(null, [null]) = true\n+            if !bit_util::get_bit(left_null_bitmap, i) {\n+                if list.null_count() > 0 {\n+                    is_in = true;\n+                }\n+            } else {\n+                let list = list.as_any().downcast_ref::<PrimitiveArray<T>>().unwrap();\n+\n+                for j in 0..list.len() {\n+                    if list.is_valid(j) && (left.value(i) == list.value(j)) {\n+                        is_in = true;\n+                    }\n+                }\n+            }\n+        }\n+        result.append(is_in)?;\n+    }\n+\n+    let data = ArrayData::new(\n+        DataType::Boolean,\n+        left.len(),\n+        None,\n+        None,\n+        left.offset(),\n+        vec![result.finish()],\n+        vec![],\n+    );\n+    Ok(PrimitiveArray::<BooleanType>::from(Arc::new(data)))\n+}\n+\n+/// Checks if a `GenericListArray` contains a value in the `GenericStringArray`\n+pub fn contains_utf8<OffsetSize>(\n+    left: &GenericStringArray<OffsetSize>,\n+    right: &ListArray,\n+) -> Result<BooleanArray>\n+where\n+    OffsetSize: OffsetSizeTrait,\n+{\n+    if left.len() != right.len() {\n+        return Err(ArrowError::ComputeError(\n+            \"Cannot perform comparison operation on arrays of different length\"\n+                .to_string(),\n+        ));\n+    }\n+\n+    let not_both_null_bit_buffer =\n+        match compare_option_bitmap(left.data_ref(), right.data_ref(), left.len())? {\n+            Some(buff) => buff,\n+            None => new_all_set_buffer(left.len()),\n\nReview comment:\n       I think this is creating a buffer that is larger than needed since it is a bitmap storing 8 values per byte. Correct size would be `ceil(left.len(), 8)`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-26T08:30:33.998+0000",
                    "updated": "2020-09-26T08:30:33.998+0000",
                    "started": "2020-09-26T08:30:33.998+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "491544",
                    "issueId": "13329509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329509/worklog/491547",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8280:\nURL: https://github.com/apache/arrow/pull/8280#discussion_r495432552\n\n\n\n##########\nFile path: rust/arrow/src/compute/util.rs\n##########\n@@ -71,6 +71,47 @@ pub(super) fn combine_option_bitmap(\n     }\n }\n \n+/// Compares the null bitmaps of two arrays using a bitwise `or` operation.\n+///\n+/// This function is useful when implementing operations on higher level arrays.\n+pub(super) fn compare_option_bitmap(\n+    left_data: &ArrayDataRef,\n+    right_data: &ArrayDataRef,\n+    len_in_bits: usize,\n+) -> Result<Option<Buffer>> {\n+    let left_offset_in_bits = left_data.offset();\n+    let right_offset_in_bits = right_data.offset();\n+\n+    let left = left_data.null_buffer();\n+    let right = right_data.null_buffer();\n+\n+    if (left.is_some() && left_offset_in_bits % 8 != 0)\n\nReview comment:\n       I'm trying to solve this problem in #8262 \r\n   \r\n   The issue is that `buffer.slice` and `buffer_bin_or/and` currently work with byte offsets, but for boolean arrays and bitmaps the offset can start in the middle of a byte.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-26T08:35:51.171+0000",
                    "updated": "2020-09-26T08:35:51.171+0000",
                    "started": "2020-09-26T08:35:51.171+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "491547",
                    "issueId": "13329509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329509/worklog/491548",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8280:\nURL: https://github.com/apache/arrow/pull/8280#discussion_r495432926\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/comparison.rs\n##########\n@@ -555,11 +555,159 @@ where\n     compare_op_scalar!(left, right, |a, b| a >= b)\n }\n \n+/// Checks if a `GenericListArray` contains a value in the `PrimitiveArray`\n+pub fn contains<T, OffsetSize>(\n+    left: &PrimitiveArray<T>,\n+    right: &GenericListArray<OffsetSize>,\n+) -> Result<BooleanArray>\n+where\n+    T: ArrowNumericType,\n+    OffsetSize: OffsetSizeTrait,\n+{\n+    if left.len() != right.len() {\n+        return Err(ArrowError::ComputeError(\n+            \"Cannot perform comparison operation on arrays of different length\"\n+                .to_string(),\n+        ));\n+    }\n+\n+    let not_both_null_bit_buffer =\n+        match compare_option_bitmap(left.data_ref(), right.data_ref(), left.len())? {\n+            Some(buff) => buff,\n+            None => new_all_set_buffer(left.len()),\n+        };\n+    let not_both_null_bitmap = not_both_null_bit_buffer.data();\n+\n+    let left_data = left.data();\n+    let left_null_bitmap = match left_data.null_bitmap() {\n+        Some(bitmap) => bitmap.clone().into_buffer(),\n+        _ => new_all_set_buffer(left.len()),\n+    };\n+    let left_null_bitmap = left_null_bitmap.data();\n+\n+    let mut result = BooleanBufferBuilder::new(left.len());\n+\n+    for i in 0..left.len() {\n+        let mut is_in = false;\n+\n+        // contains(null, null) = false\n+        if bit_util::get_bit(not_both_null_bitmap, i) {\n+            let list = right.value(i);\n+\n+            // contains(null, [null]) = true\n+            if !bit_util::get_bit(left_null_bitmap, i) {\n\nReview comment:\n       Here again we'd need to consider the offset of `left`, or use `left.is_valid` instead\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-26T08:40:19.544+0000",
                    "updated": "2020-09-26T08:40:19.544+0000",
                    "started": "2020-09-26T08:40:19.544+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "491548",
                    "issueId": "13329509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329509/worklog/491549",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8280:\nURL: https://github.com/apache/arrow/pull/8280#discussion_r495433674\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/comparison.rs\n##########\n@@ -555,11 +555,159 @@ where\n     compare_op_scalar!(left, right, |a, b| a >= b)\n }\n \n+/// Checks if a `GenericListArray` contains a value in the `PrimitiveArray`\n+pub fn contains<T, OffsetSize>(\n+    left: &PrimitiveArray<T>,\n+    right: &GenericListArray<OffsetSize>,\n+) -> Result<BooleanArray>\n+where\n+    T: ArrowNumericType,\n+    OffsetSize: OffsetSizeTrait,\n+{\n+    if left.len() != right.len() {\n+        return Err(ArrowError::ComputeError(\n+            \"Cannot perform comparison operation on arrays of different length\"\n+                .to_string(),\n+        ));\n+    }\n+\n+    let not_both_null_bit_buffer =\n+        match compare_option_bitmap(left.data_ref(), right.data_ref(), left.len())? {\n+            Some(buff) => buff,\n+            None => new_all_set_buffer(left.len()),\n+        };\n+    let not_both_null_bitmap = not_both_null_bit_buffer.data();\n+\n+    let left_data = left.data();\n+    let left_null_bitmap = match left_data.null_bitmap() {\n+        Some(bitmap) => bitmap.clone().into_buffer(),\n+        _ => new_all_set_buffer(left.len()),\n+    };\n+    let left_null_bitmap = left_null_bitmap.data();\n+\n+    let mut result = BooleanBufferBuilder::new(left.len());\n+\n+    for i in 0..left.len() {\n+        let mut is_in = false;\n+\n+        // contains(null, null) = false\n\nReview comment:\n       The sql behaviour regarding nulls would be different, if that is intended it should probably be noted a bit more prominently. In Postgres:\r\n   \r\n   ```sql\r\n   SELECT\r\n     'foo' = ANY(ARRAY['foo','bar']::text[]) AS non_null,\r\n     'foo' = ANY(ARRAY[]::text[]) AS empty,\r\n     'foo' = ANY(ARRAY[NULL]::text[]) AS null_value,\r\n     'foo' = ANY(NULL::text[]) AS null_array\r\n   ```\r\n   \r\n   ```\r\n   | non_null | empty | null_value | null_array |\r\n   | -------- | ----- | ---------- | ---------- |\r\n   | true     | false |            |            |\r\n   ```\r\n   (empty cells in that table being `null` values)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-26T08:49:38.500+0000",
                    "updated": "2020-09-26T08:49:38.500+0000",
                    "started": "2020-09-26T08:49:38.499+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "491549",
                    "issueId": "13329509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329509/worklog/491550",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8280:\nURL: https://github.com/apache/arrow/pull/8280#discussion_r495435647\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/comparison.rs\n##########\n@@ -555,11 +555,159 @@ where\n     compare_op_scalar!(left, right, |a, b| a >= b)\n }\n \n+/// Checks if a `GenericListArray` contains a value in the `PrimitiveArray`\n+pub fn contains<T, OffsetSize>(\n+    left: &PrimitiveArray<T>,\n+    right: &GenericListArray<OffsetSize>,\n+) -> Result<BooleanArray>\n+where\n+    T: ArrowNumericType,\n+    OffsetSize: OffsetSizeTrait,\n+{\n+    if left.len() != right.len() {\n+        return Err(ArrowError::ComputeError(\n+            \"Cannot perform comparison operation on arrays of different length\"\n+                .to_string(),\n+        ));\n+    }\n+\n+    let not_both_null_bit_buffer =\n+        match compare_option_bitmap(left.data_ref(), right.data_ref(), left.len())? {\n+            Some(buff) => buff,\n+            None => new_all_set_buffer(left.len()),\n+        };\n+    let not_both_null_bitmap = not_both_null_bit_buffer.data();\n+\n+    let left_data = left.data();\n+    let left_null_bitmap = match left_data.null_bitmap() {\n+        Some(bitmap) => bitmap.clone().into_buffer(),\n+        _ => new_all_set_buffer(left.len()),\n+    };\n+    let left_null_bitmap = left_null_bitmap.data();\n+\n+    let mut result = BooleanBufferBuilder::new(left.len());\n+\n+    for i in 0..left.len() {\n+        let mut is_in = false;\n+\n+        // contains(null, null) = false\n\nReview comment:\n       I think the test is \r\n   \r\n   ```sql\r\n   SELECT\r\n           'foo' = ANY(ARRAY['foo','bar']::text[]) AS non_null,\r\n           'foo' = ANY(ARRAY[]::text[]) AS empty,\r\n           NULL::text = ANY(ARRAY[NULL, 'foo']::text[]) AS null_value,\r\n           'foo' = ANY(NULL::text[]) AS null_array\r\n   ```\r\n   \r\n   but nonetheless it still yields the same result.\r\n   I copied this from another PR mostly-verbatim, so I'm only scrutinising the code today myself.\r\n   \r\n   I would prefer aligning with the SQL behaviour, that a null value can't be contained in an array if the array has nulls.\r\n   If users want to find out if an array has nulls, they can use the below or something better:\r\n   \r\n   ```rust\r\n   let array: ListArray<i32> = ...;\r\n   \r\n   let ceil = bit_util::ceil(array.len(), 8);\r\n   let mut bools = MutableBuffer::new(ceil).\r\n   for i in -..array.len() {\r\n     if array.is_valid(i) && array.value(i).null_count() > 0 {\r\n       bools.set_bit(i);\r\n     }\r\n   }\r\n   \r\n   // create bool array from bools\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-26T09:07:58.480+0000",
                    "updated": "2020-09-26T09:07:58.480+0000",
                    "started": "2020-09-26T09:07:58.480+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "491550",
                    "issueId": "13329509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329509/worklog/491551",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8280:\nURL: https://github.com/apache/arrow/pull/8280#discussion_r495436663\n\n\n\n##########\nFile path: rust/arrow/src/compute/util.rs\n##########\n@@ -71,6 +71,47 @@ pub(super) fn combine_option_bitmap(\n     }\n }\n \n+/// Compares the null bitmaps of two arrays using a bitwise `or` operation.\n+///\n+/// This function is useful when implementing operations on higher level arrays.\n+pub(super) fn compare_option_bitmap(\n\nReview comment:\n       Added, I ended up not using `compare_option_bitmap`, but it's a useful function to have\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-26T09:20:05.192+0000",
                    "updated": "2020-09-26T09:20:05.192+0000",
                    "started": "2020-09-26T09:20:05.192+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "491551",
                    "issueId": "13329509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329509/worklog/491552",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8280:\nURL: https://github.com/apache/arrow/pull/8280#discussion_r495436762\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/comparison.rs\n##########\n@@ -555,11 +555,159 @@ where\n     compare_op_scalar!(left, right, |a, b| a >= b)\n }\n \n+/// Checks if a `GenericListArray` contains a value in the `PrimitiveArray`\n+pub fn contains<T, OffsetSize>(\n+    left: &PrimitiveArray<T>,\n+    right: &GenericListArray<OffsetSize>,\n+) -> Result<BooleanArray>\n+where\n+    T: ArrowNumericType,\n+    OffsetSize: OffsetSizeTrait,\n+{\n+    if left.len() != right.len() {\n+        return Err(ArrowError::ComputeError(\n+            \"Cannot perform comparison operation on arrays of different length\"\n+                .to_string(),\n+        ));\n+    }\n+\n+    let not_both_null_bit_buffer =\n+        match compare_option_bitmap(left.data_ref(), right.data_ref(), left.len())? {\n+            Some(buff) => buff,\n+            None => new_all_set_buffer(left.len()),\n+        };\n+    let not_both_null_bitmap = not_both_null_bit_buffer.data();\n+\n+    let left_data = left.data();\n+    let left_null_bitmap = match left_data.null_bitmap() {\n+        Some(bitmap) => bitmap.clone().into_buffer(),\n+        _ => new_all_set_buffer(left.len()),\n+    };\n+    let left_null_bitmap = left_null_bitmap.data();\n+\n+    let mut result = BooleanBufferBuilder::new(left.len());\n+\n+    for i in 0..left.len() {\n+        let mut is_in = false;\n+\n+        // contains(null, null) = false\n+        if bit_util::get_bit(not_both_null_bitmap, i) {\n+            let list = right.value(i);\n+\n+            // contains(null, [null]) = true\n+            if !bit_util::get_bit(left_null_bitmap, i) {\n+                if list.null_count() > 0 {\n+                    is_in = true;\n\nReview comment:\n       PTAL at how I've done it now. Instead of using a booelan builder, I set the bits directly on the buffer like we did with `take`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-26T09:21:08.262+0000",
                    "updated": "2020-09-26T09:21:08.262+0000",
                    "started": "2020-09-26T09:21:08.262+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "491552",
                    "issueId": "13329509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329509/worklog/491553",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8280:\nURL: https://github.com/apache/arrow/pull/8280#discussion_r495436864\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/comparison.rs\n##########\n@@ -555,11 +555,159 @@ where\n     compare_op_scalar!(left, right, |a, b| a >= b)\n }\n \n+/// Checks if a `GenericListArray` contains a value in the `PrimitiveArray`\n+pub fn contains<T, OffsetSize>(\n+    left: &PrimitiveArray<T>,\n+    right: &GenericListArray<OffsetSize>,\n+) -> Result<BooleanArray>\n+where\n+    T: ArrowNumericType,\n+    OffsetSize: OffsetSizeTrait,\n+{\n+    if left.len() != right.len() {\n+        return Err(ArrowError::ComputeError(\n+            \"Cannot perform comparison operation on arrays of different length\"\n+                .to_string(),\n+        ));\n+    }\n+\n+    let not_both_null_bit_buffer =\n+        match compare_option_bitmap(left.data_ref(), right.data_ref(), left.len())? {\n+            Some(buff) => buff,\n+            None => new_all_set_buffer(left.len()),\n+        };\n+    let not_both_null_bitmap = not_both_null_bit_buffer.data();\n+\n+    let left_data = left.data();\n+    let left_null_bitmap = match left_data.null_bitmap() {\n+        Some(bitmap) => bitmap.clone().into_buffer(),\n+        _ => new_all_set_buffer(left.len()),\n+    };\n+    let left_null_bitmap = left_null_bitmap.data();\n+\n+    let mut result = BooleanBufferBuilder::new(left.len());\n+\n+    for i in 0..left.len() {\n+        let mut is_in = false;\n+\n+        // contains(null, null) = false\n+        if bit_util::get_bit(not_both_null_bitmap, i) {\n+            let list = right.value(i);\n+\n+            // contains(null, [null]) = true\n+            if !bit_util::get_bit(left_null_bitmap, i) {\n+                if list.null_count() > 0 {\n+                    is_in = true;\n+                }\n+            } else {\n+                let list = list.as_any().downcast_ref::<PrimitiveArray<T>>().unwrap();\n+\n+                for j in 0..list.len() {\n+                    if list.is_valid(j) && (left.value(i) == list.value(j)) {\n+                        is_in = true;\n+                    }\n+                }\n+            }\n+        }\n+        result.append(is_in)?;\n+    }\n+\n+    let data = ArrayData::new(\n+        DataType::Boolean,\n+        left.len(),\n+        None,\n+        None,\n+        left.offset(),\n+        vec![result.finish()],\n+        vec![],\n+    );\n+    Ok(PrimitiveArray::<BooleanType>::from(Arc::new(data)))\n+}\n+\n+/// Checks if a `GenericListArray` contains a value in the `GenericStringArray`\n+pub fn contains_utf8<OffsetSize>(\n+    left: &GenericStringArray<OffsetSize>,\n+    right: &ListArray,\n+) -> Result<BooleanArray>\n+where\n+    OffsetSize: OffsetSizeTrait,\n+{\n+    if left.len() != right.len() {\n+        return Err(ArrowError::ComputeError(\n+            \"Cannot perform comparison operation on arrays of different length\"\n+                .to_string(),\n+        ));\n+    }\n+\n+    let not_both_null_bit_buffer =\n+        match compare_option_bitmap(left.data_ref(), right.data_ref(), left.len())? {\n+            Some(buff) => buff,\n+            None => new_all_set_buffer(left.len()),\n\nReview comment:\n       Changed, ta\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-26T09:22:11.309+0000",
                    "updated": "2020-09-26T09:22:11.309+0000",
                    "started": "2020-09-26T09:22:11.308+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "491553",
                    "issueId": "13329509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329509/worklog/491554",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #8280:\nURL: https://github.com/apache/arrow/pull/8280#issuecomment-699468060\n\n\n   @jhorstmann @jorgecarleitao I've had a look at this with a fresh head, and I've simplified the logic to:\r\n   \r\n   Given a list array, return true if a non-null value exists in the array.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-26T09:23:34.496+0000",
                    "updated": "2020-09-26T09:23:34.496+0000",
                    "started": "2020-09-26T09:23:34.496+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "491554",
                    "issueId": "13329509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329509/worklog/491690",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on pull request #8280:\nURL: https://github.com/apache/arrow/pull/8280#issuecomment-699615864\n\n\n   > Given a list array, return true if a non-null value exists in the array.\r\n   \r\n   Intuitively this makes sense, unfortunately the sql rules are slightly more complex and can also return null in several cases. I'm ok with leaving it like this for now, but we might need to change it later to align more closely with sql.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-27T10:20:19.770+0000",
                    "updated": "2020-09-27T10:20:19.770+0000",
                    "started": "2020-09-27T10:20:19.770+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "491690",
                    "issueId": "13329509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329509/worklog/492724",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "velvia commented on pull request #8280:\nURL: https://github.com/apache/arrow/pull/8280#issuecomment-701046636\n\n\n   @nevi-me Hi there, I'm teammates with @mcassels and @maxburke at UrbanLogiq, and we'd like to check in on the status of this PR.   From looking over it, this is what I can gleam (the PR desc is just one sentence):\r\n   \r\n   * This just has kernel primitives for contains for generic strings and primitives\r\n   * No specific support for dictionary-encoded string arrays?  I guess this could be built on the primitive kernel?\r\n   * Is a separate PR for the rest of the support, ie logical plan, etc. coming?   Would be interested in building on top of this to finish the PR as we would like to use it on a newer branch.\r\n   (we'd be happy to finish the rest of it or work on the follow on PR)\r\n   \r\n   Would love to have an ETA....\r\n   \r\n   Thanks!\r\n   -Evan\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-29T23:31:58.715+0000",
                    "updated": "2020-09-29T23:31:58.715+0000",
                    "started": "2020-09-29T23:31:58.715+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492724",
                    "issueId": "13329509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329509/worklog/492731",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #8280:\nURL: https://github.com/apache/arrow/pull/8280#issuecomment-701050053\n\n\n   Hi @velvia, I pulled these changes from UL's fork while I was rebasing the changes from #6770. I only refactored the existing kernel functions there, but didn't expand any supported data types.\r\n   \r\n   The behaviour does change from what you had on your fork (https://github.com/apache/arrow/pull/8280#discussion_r495433674), so perhaps you can comment on whether this is fine, or bear that in mind when updating your fork.\r\n   \r\n   Regarding an ETA, the PR's still under review, so once it's approved, we'll be able to merge it in.\r\n   \r\n   Yes, you can open JIRAs (https://issues.apache.org/jira/projects/ARROW) then work on top of this PR.\r\n   \r\n   I've spent some time looking at the UL fork, and I think there might be changes there that the wider community would benefit from if you upstream them a bit more frequently. I understand that sometimes we might take longer than is ideal to complete PR reviews and merge them; but that's often a function of the sporadic availability of capacity from the Rust developers.\r\n   \r\n   We've also been very reliant on 2 people on the Parquet side, but I've been spending more time on the codebase so I can start picking up PRs on Parquet.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-29T23:42:24.268+0000",
                    "updated": "2020-09-29T23:42:24.268+0000",
                    "started": "2020-09-29T23:42:24.268+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492731",
                    "issueId": "13329509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329509/worklog/493095",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "velvia commented on pull request #8280:\nURL: https://github.com/apache/arrow/pull/8280#issuecomment-701541243\n\n\n   @nevi-me thanks, will have a look\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-30T17:43:17.375+0000",
                    "updated": "2020-09-30T17:43:17.375+0000",
                    "started": "2020-09-30T17:43:17.375+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "493095",
                    "issueId": "13329509"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329509/worklog/493300",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "maxburke commented on pull request #8280:\nURL: https://github.com/apache/arrow/pull/8280#issuecomment-701902290\n\n\n   > I've spent some time looking at the UL fork, and I think there might be changes there that the wider community would benefit from if you upstream them a bit more frequently. I understand that sometimes we might take longer than is ideal to complete PR reviews and merge them; but that's often a function of the sporadic availability of capacity from the Rust developers.\r\n   \r\n   We would love to get our changes into the mainline Arrow, and that is our goal!, we've just been very constriained lately in how much people-power we can use to get the patches into a state our committers are happy with :slightly_smiling_face: \r\n   \r\n   Slowly but surely we'll have more patches coming!\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-01T05:49:47.136+0000",
                    "updated": "2020-10-01T05:49:47.136+0000",
                    "started": "2020-10-01T05:49:47.136+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "493300",
                    "issueId": "13329509"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 12600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@32af1cbc[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1e00d48[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@53260f2a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@52adc24b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42cd4ccd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6e95ea90[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@da9f737[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@312ac353[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@19a95a9f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5829e250[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1afba62d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7d2cce7a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12600,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Oct 02 02:46:53 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-10-02T02:46:53.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10103/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-09-26T01:10:05.000+0000",
        "updated": "2020-10-02T02:49:41.000+0000",
        "timeoriginalestimate": null,
        "description": "Add a `contains` function that checks whether a list array contains a primitive value. The result of the function is a boolean array",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Add a Contains kernel",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329509/comment/17205948",
                    "id": "17205948",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 8280\n[https://github.com/apache/arrow/pull/8280]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-10-02T02:46:53.412+0000",
                    "updated": "2020-10-02T02:46:53.412+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ixo8:",
        "customfield_12314139": null
    }
}