{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13414893",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893",
    "key": "ARROW-14958",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12627712",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12627712",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13377074",
                    "key": "ARROW-12671",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377074",
                    "fields": {
                        "summary": "[C++] Integrate tracing framework",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334621",
                "id": "12334621",
                "name": "FlightRPC"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14958/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 20,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893/worklog/693485",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request #11920:\nURL: https://github.com/apache/arrow/pull/11920\n\n\n   Adds a client middleware that sends span/trace ID to the server, and a server middleware that gets the span/trace ID and starts a child span.\r\n   \r\n   The middleware are available in builds without OpenTelemetry, they simply do nothing.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-09T18:59:17.690+0000",
                    "updated": "2021-12-09T18:59:17.690+0000",
                    "started": "2021-12-09T18:59:17.690+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "693485",
                    "issueId": "13414893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893/worklog/693486",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11920:\nURL: https://github.com/apache/arrow/pull/11920#issuecomment-990134741\n\n\n   https://issues.apache.org/jira/browse/ARROW-14958\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-09T18:59:40.661+0000",
                    "updated": "2021-12-09T18:59:40.661+0000",
                    "started": "2021-12-09T18:59:40.661+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "693486",
                    "issueId": "13414893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893/worklog/693487",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11920:\nURL: https://github.com/apache/arrow/pull/11920#issuecomment-990135085\n\n\n   Example output, from the unit test:\r\n   \r\n   (The unit test will not normally print this, I just modified it to double-check the results.)\r\n   \r\n   ```\r\n   {\r\n     name          : DoAction\r\n     trace_id      : a9d2a9ecd0aec3bb44bd10ad940a31b7\r\n     span_id       : 7b025703fe739005\r\n     tracestate    : \r\n     parent_span_id: 0000000000000000\r\n     start         : 1639076215603966576\r\n     duration      : 739917\r\n     description   : \r\n     span kind     : Server\r\n     status        : Ok\r\n     attributes    : \r\n   \tthread_id: 140075521935104\r\n   \trpc.grpc.status_code: 0\r\n   \trpc.method: DoAction\r\n   \trpc.service: arrow.flight.protocol.FlightService\r\n   \trpc.system: grpc\r\n     events        : \r\n     links         : \r\n     resources     : \r\n   \tservice.name: unknown_service\r\n   \ttelemetry.sdk.version: 1.1.0\r\n   \ttelemetry.sdk.name: opentelemetry\r\n   \ttelemetry.sdk.language: cpp\r\n     instr-lib     : arrow\r\n   }\r\n   {\r\n     name          : DoAction\r\n     trace_id      : a605cd6ac77d28ea4fc94062bb0ba455\r\n     span_id       : f599a779803fdf67\r\n     tracestate    : \r\n     parent_span_id: a9d7e9435894a240\r\n     start         : 1639076215610106244\r\n     duration      : 236620\r\n     description   : \r\n     span kind     : Server\r\n     status        : Ok\r\n     attributes    : \r\n   \tthread_id: 140075513542400\r\n   \trpc.grpc.status_code: 0\r\n   \trpc.method: DoAction\r\n   \trpc.service: arrow.flight.protocol.FlightService\r\n   \trpc.system: grpc\r\n     events        : \r\n     links         : \r\n     resources     : \r\n   \tservice.name: unknown_service\r\n   \ttelemetry.sdk.version: 1.1.0\r\n   \ttelemetry.sdk.name: opentelemetry\r\n   \ttelemetry.sdk.language: cpp\r\n     instr-lib     : arrow\r\n   }\r\n   {\r\n     name          : test\r\n     trace_id      : a605cd6ac77d28ea4fc94062bb0ba455\r\n     span_id       : a9d7e9435894a240\r\n     tracestate    : \r\n     parent_span_id: 0000000000000000\r\n     start         : 1639076215607131441\r\n     duration      : 3385487\r\n     description   : \r\n     span kind     : Internal\r\n     status        : Unset\r\n     attributes    : \r\n   \tthread_id: 140075633232128\r\n     events        : \r\n     links         : \r\n     resources     : \r\n   \tservice.name: unknown_service\r\n   \ttelemetry.sdk.version: 1.1.0\r\n   \ttelemetry.sdk.name: opentelemetry\r\n   \ttelemetry.sdk.language: cpp\r\n     instr-lib     : arrow\r\n   }\r\n   ```\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-09T19:00:03.730+0000",
                    "updated": "2021-12-09T19:00:03.730+0000",
                    "started": "2021-12-09T19:00:03.730+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "693487",
                    "issueId": "13414893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893/worklog/693551",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11920:\nURL: https://github.com/apache/arrow/pull/11920#issuecomment-990250070\n\n\n   CC @cpcloud, this is \"automatic\" instrumentation for Flight/OpenTelemetry. AFAIK, this isn't generally possible in gRPC/C++. [Server interceptors](https://grpc.github.io/grpc/cpp/classgrpc_1_1experimental_1_1_interceptor_batch_methods.html) have no way to pass data from the interceptor to the RPC handler. (OpenCensus support is achieved by hardcoding it into the library.) Also, IIRC thread locals (i.e. the OTel Context) are not viable because the library makes no guarantee about whether RPC handlers are run on the same thread as interceptors or not.\r\n   \r\n   Flight works around this because the server interceptors don't use the gRPC interceptor framework; instead, the Flight RPC handlers hardcode calls to the interceptors before handing control to the Flight application. Hence, a Span started in a Flight interceptor will be active during the application's RPC handler.\r\n   \r\n   The OpenTelemetry/gRPC [example](https://github.com/open-telemetry/opentelemetry-cpp/blob/main/examples/grpc/server.cc) just hardcodes a call to OpenTelemetry within the RPC handler and does not try to implement more general instrumentation.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-09T21:02:33.693+0000",
                    "updated": "2021-12-09T21:02:33.693+0000",
                    "started": "2021-12-09T21:02:33.693+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "693551",
                    "issueId": "13414893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893/worklog/766142",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #11920:\nURL: https://github.com/apache/arrow/pull/11920#issuecomment-1117560083\n\n   @lidavidm Does this PR need reviving or should it be closed?\n\n\n",
                    "created": "2022-05-04T16:29:51.330+0000",
                    "updated": "2022-05-04T16:29:51.330+0000",
                    "started": "2022-05-04T16:29:51.329+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "766142",
                    "issueId": "13414893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893/worklog/766143",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #11920:\nURL: https://github.com/apache/arrow/pull/11920#issuecomment-1117560564\n\n   I'll clean this up at some point. It mostly needs a suitable reviewer.\n\n\n",
                    "created": "2022-05-04T16:30:24.455+0000",
                    "updated": "2022-05-04T16:30:24.455+0000",
                    "started": "2022-05-04T16:30:24.455+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "766143",
                    "issueId": "13414893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893/worklog/775946",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #11920:\nURL: https://github.com/apache/arrow/pull/11920#issuecomment-1141231061\n\n   It seems this needs rebasing and fixing conflicts :-(\n\n\n",
                    "created": "2022-05-30T14:36:25.549+0000",
                    "updated": "2022-05-30T14:36:25.549+0000",
                    "started": "2022-05-30T14:36:25.549+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "775946",
                    "issueId": "13414893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893/worklog/776991",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #11920:\nURL: https://github.com/apache/arrow/pull/11920#discussion_r887000282\n\n\n##########\ncpp/src/arrow/flight/client_tracing_middleware.cc:\n##########\n@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/client_tracing_middleware.h\"\n+\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/util/make_unique.h\"\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/context/propagation/global_propagator.h>\n+#include <opentelemetry/context/propagation/text_map_propagator.h>\n+#endif\n+\n+namespace arrow {\n+namespace flight {\n+\n+namespace {\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace otel = opentelemetry;\n+class FlightClientCarrier : public otel::context::propagation::TextMapCarrier {\n+ public:\n+  FlightClientCarrier() = default;\n+\n+  otel::nostd::string_view Get(otel::nostd::string_view key) const noexcept override {\n+    return \"\";\n+  }\n+\n+  void Set(otel::nostd::string_view key,\n+           otel::nostd::string_view value) noexcept override {\n+    context_.emplace_back(key, value);\n+  }\n+\n+  std::vector<std::pair<std::string, std::string>> context_;\n+};\n+\n+class TracingClientMiddleware : public ClientMiddleware {\n+ public:\n+  explicit TracingClientMiddleware(FlightClientCarrier carrier)\n+      : carrier_(std::move(carrier)) {}\n+  virtual ~TracingClientMiddleware() = default;\n+\n+  void SendingHeaders(AddCallHeaders* outgoing_headers) override {\n+    for (const auto& pair : carrier_.context_) {\n+      outgoing_headers->AddHeader(pair.first, pair.second);\n+    }\n+  }\n+  void ReceivedHeaders(const CallHeaders&) override {}\n+  void CallCompleted(const Status&) override {}\n+\n+ private:\n+  FlightClientCarrier carrier_;\n+};\n+\n+class TracingClientMiddlewareFactory : public ClientMiddlewareFactory {\n+ public:\n+  virtual ~TracingClientMiddlewareFactory() = default;\n+  void StartCall(const CallInfo& info,\n+                 std::unique_ptr<ClientMiddleware>* middleware) override {\n+    FlightClientCarrier carrier;\n+    auto context = otel::context::RuntimeContext::GetCurrent();\n+    auto propagator =\n+        otel::context::propagation::GlobalTextMapPropagator::GetGlobalPropagator();\n+    propagator->Inject(carrier, context);\n\nReview Comment:\n   Wouldn't this make a copy of `carrier`?\n\n\n\n",
                    "created": "2022-06-01T16:20:57.175+0000",
                    "updated": "2022-06-01T16:20:57.175+0000",
                    "started": "2022-06-01T16:20:57.174+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "776991",
                    "issueId": "13414893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893/worklog/776992",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #11920:\nURL: https://github.com/apache/arrow/pull/11920#discussion_r887001107\n\n\n##########\ncpp/src/arrow/flight/client_tracing_middleware.cc:\n##########\n@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/client_tracing_middleware.h\"\n+\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/util/make_unique.h\"\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/context/propagation/global_propagator.h>\n+#include <opentelemetry/context/propagation/text_map_propagator.h>\n+#endif\n+\n+namespace arrow {\n+namespace flight {\n+\n+namespace {\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace otel = opentelemetry;\n+class FlightClientCarrier : public otel::context::propagation::TextMapCarrier {\n+ public:\n+  FlightClientCarrier() = default;\n+\n+  otel::nostd::string_view Get(otel::nostd::string_view key) const noexcept override {\n+    return \"\";\n+  }\n+\n+  void Set(otel::nostd::string_view key,\n+           otel::nostd::string_view value) noexcept override {\n+    context_.emplace_back(key, value);\n+  }\n+\n+  std::vector<std::pair<std::string, std::string>> context_;\n+};\n+\n+class TracingClientMiddleware : public ClientMiddleware {\n+ public:\n+  explicit TracingClientMiddleware(FlightClientCarrier carrier)\n+      : carrier_(std::move(carrier)) {}\n+  virtual ~TracingClientMiddleware() = default;\n+\n+  void SendingHeaders(AddCallHeaders* outgoing_headers) override {\n+    for (const auto& pair : carrier_.context_) {\n+      outgoing_headers->AddHeader(pair.first, pair.second);\n\nReview Comment:\n   Hmm... if OTel is adding arbitrary key-value pairs, should these really be propagated as HTTP headers, or am I missing something?\n\n\n\n",
                    "created": "2022-06-01T16:21:46.727+0000",
                    "updated": "2022-06-01T16:21:46.727+0000",
                    "started": "2022-06-01T16:21:46.727+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "776992",
                    "issueId": "13414893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893/worklog/776993",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #11920:\nURL: https://github.com/apache/arrow/pull/11920#discussion_r887002900\n\n\n##########\ncpp/src/arrow/flight/middleware.h:\n##########\n@@ -61,6 +60,10 @@ enum class FlightMethod : char {\n   DoExchange = 9,\n };\n \n+/// \\brief Get a human-readable name for a Flight method.\n+ARROW_FLIGHT_EXPORT\n+std::string FlightMethodToString(FlightMethod method);\n\nReview Comment:\n   We already use the `ToString` convention in other places, so perhaps:\r\n   ```suggestion\r\n   std::string ToString(FlightMethod method);\r\n   ```\n\n\n\n",
                    "created": "2022-06-01T16:23:46.925+0000",
                    "updated": "2022-06-01T16:23:46.925+0000",
                    "started": "2022-06-01T16:23:46.924+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "776993",
                    "issueId": "13414893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893/worklog/776994",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #11920:\nURL: https://github.com/apache/arrow/pull/11920#discussion_r887003327\n\n\n##########\ncpp/src/arrow/flight/client_tracing_middleware.cc:\n##########\n@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/client_tracing_middleware.h\"\n+\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/util/make_unique.h\"\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/context/propagation/global_propagator.h>\n+#include <opentelemetry/context/propagation/text_map_propagator.h>\n+#endif\n+\n+namespace arrow {\n+namespace flight {\n+\n+namespace {\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace otel = opentelemetry;\n+class FlightClientCarrier : public otel::context::propagation::TextMapCarrier {\n+ public:\n+  FlightClientCarrier() = default;\n+\n+  otel::nostd::string_view Get(otel::nostd::string_view key) const noexcept override {\n+    return \"\";\n+  }\n+\n+  void Set(otel::nostd::string_view key,\n+           otel::nostd::string_view value) noexcept override {\n+    context_.emplace_back(key, value);\n+  }\n+\n+  std::vector<std::pair<std::string, std::string>> context_;\n+};\n+\n+class TracingClientMiddleware : public ClientMiddleware {\n+ public:\n+  explicit TracingClientMiddleware(FlightClientCarrier carrier)\n+      : carrier_(std::move(carrier)) {}\n+  virtual ~TracingClientMiddleware() = default;\n+\n+  void SendingHeaders(AddCallHeaders* outgoing_headers) override {\n+    for (const auto& pair : carrier_.context_) {\n+      outgoing_headers->AddHeader(pair.first, pair.second);\n+    }\n+  }\n+  void ReceivedHeaders(const CallHeaders&) override {}\n+  void CallCompleted(const Status&) override {}\n+\n+ private:\n+  FlightClientCarrier carrier_;\n+};\n+\n+class TracingClientMiddlewareFactory : public ClientMiddlewareFactory {\n+ public:\n+  virtual ~TracingClientMiddlewareFactory() = default;\n+  void StartCall(const CallInfo& info,\n+                 std::unique_ptr<ClientMiddleware>* middleware) override {\n+    FlightClientCarrier carrier;\n+    auto context = otel::context::RuntimeContext::GetCurrent();\n+    auto propagator =\n+        otel::context::propagation::GlobalTextMapPropagator::GetGlobalPropagator();\n+    propagator->Inject(carrier, context);\n\nReview Comment:\n   No, OTel uses a reference here: https://github.com/open-telemetry/opentelemetry-cpp/blob/9df5c4fef13e962a51768c098fb07a8b4421dd97/api/include/opentelemetry/context/propagation/text_map_propagator.h#L50\n\n\n\n",
                    "created": "2022-06-01T16:24:16.991+0000",
                    "updated": "2022-06-01T16:24:16.991+0000",
                    "started": "2022-06-01T16:24:16.990+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "776994",
                    "issueId": "13414893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893/worklog/776995",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #11920:\nURL: https://github.com/apache/arrow/pull/11920#discussion_r887003875\n\n\n##########\ncpp/src/arrow/flight/server_tracing_middleware.h:\n##########\n@@ -0,0 +1,72 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Middleware implementation for propagating OpenTelemetry spans.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/flight/server_middleware.h\"\n+#include \"arrow/flight/visibility.h\"\n+#include \"arrow/status.h\"\n+\n+namespace arrow {\n+namespace flight {\n+\n+/// \\brief Returns a ServerMiddlewareFactory that handles receiving OpenTelemetry spans.\n+ARROW_FLIGHT_EXPORT std::shared_ptr<ServerMiddlewareFactory>\n+MakeTracingServerMiddlewareFactory();\n+\n+/// \\brief A server middleware that provides access to the\n+///   OpenTelemetry context, if present.\n+///\n+/// Used to make the OpenTelemetry span available in Python.\n+class ARROW_FLIGHT_EXPORT TracingServerMiddleware : public ServerMiddleware {\n+ public:\n+  ~TracingServerMiddleware();\n+\n+  static constexpr char const kMiddlewareName[] =\n+      \"arrow::flight::TracingServerMiddleware\";\n+\n+  std::string name() const override { return kMiddlewareName; }\n+  void SendingHeaders(AddCallHeaders*) override;\n+  void CallCompleted(const Status&) override;\n+\n+  struct TraceKey {\n+    std::string key;\n+    std::string value;\n+\n+    TraceKey() = default;\n+    TraceKey(std::string key, std::string value)\n+        : key(std::move(key)), value(std::move(value)) {}\n\nReview Comment:\n   C++ should synthesize these constructors automatically?\n\n\n\n",
                    "created": "2022-06-01T16:24:57.035+0000",
                    "updated": "2022-06-01T16:24:57.035+0000",
                    "started": "2022-06-01T16:24:57.035+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "776995",
                    "issueId": "13414893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893/worklog/776996",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #11920:\nURL: https://github.com/apache/arrow/pull/11920#discussion_r887005397\n\n\n##########\ncpp/src/arrow/flight/client_tracing_middleware.cc:\n##########\n@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/client_tracing_middleware.h\"\n+\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/util/make_unique.h\"\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/context/propagation/global_propagator.h>\n+#include <opentelemetry/context/propagation/text_map_propagator.h>\n+#endif\n+\n+namespace arrow {\n+namespace flight {\n+\n+namespace {\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace otel = opentelemetry;\n+class FlightClientCarrier : public otel::context::propagation::TextMapCarrier {\n+ public:\n+  FlightClientCarrier() = default;\n+\n+  otel::nostd::string_view Get(otel::nostd::string_view key) const noexcept override {\n+    return \"\";\n+  }\n+\n+  void Set(otel::nostd::string_view key,\n+           otel::nostd::string_view value) noexcept override {\n+    context_.emplace_back(key, value);\n+  }\n+\n+  std::vector<std::pair<std::string, std::string>> context_;\n+};\n+\n+class TracingClientMiddleware : public ClientMiddleware {\n+ public:\n+  explicit TracingClientMiddleware(FlightClientCarrier carrier)\n+      : carrier_(std::move(carrier)) {}\n+  virtual ~TracingClientMiddleware() = default;\n+\n+  void SendingHeaders(AddCallHeaders* outgoing_headers) override {\n+    for (const auto& pair : carrier_.context_) {\n+      outgoing_headers->AddHeader(pair.first, pair.second);\n\nReview Comment:\n   It's designed to be transported in headers, it's just that the API doesn't tell you what they are. They're well defined in the spec (formats listed here: https://github.com/open-telemetry/opentelemetry-specification/blob/e2c2472985b17e37a25a7dc5aa0aa071e6683c98/specification/context/api-propagators.md#propagators-distribution)\n\n\n\n",
                    "created": "2022-06-01T16:26:42.244+0000",
                    "updated": "2022-06-01T16:26:42.244+0000",
                    "started": "2022-06-01T16:26:42.244+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "776996",
                    "issueId": "13414893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893/worklog/776998",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #11920:\nURL: https://github.com/apache/arrow/pull/11920#discussion_r887007784\n\n\n##########\ncpp/src/arrow/flight/server_tracing_middleware.h:\n##########\n@@ -0,0 +1,72 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Middleware implementation for propagating OpenTelemetry spans.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/flight/server_middleware.h\"\n+#include \"arrow/flight/visibility.h\"\n+#include \"arrow/status.h\"\n+\n+namespace arrow {\n+namespace flight {\n+\n+/// \\brief Returns a ServerMiddlewareFactory that handles receiving OpenTelemetry spans.\n+ARROW_FLIGHT_EXPORT std::shared_ptr<ServerMiddlewareFactory>\n+MakeTracingServerMiddlewareFactory();\n+\n+/// \\brief A server middleware that provides access to the\n+///   OpenTelemetry context, if present.\n+///\n+/// Used to make the OpenTelemetry span available in Python.\n+class ARROW_FLIGHT_EXPORT TracingServerMiddleware : public ServerMiddleware {\n+ public:\n+  ~TracingServerMiddleware();\n+\n+  static constexpr char const kMiddlewareName[] =\n+      \"arrow::flight::TracingServerMiddleware\";\n+\n+  std::string name() const override { return kMiddlewareName; }\n+  void SendingHeaders(AddCallHeaders*) override;\n+  void CallCompleted(const Status&) override;\n+\n+  struct TraceKey {\n+    std::string key;\n+    std::string value;\n+\n+    TraceKey() = default;\n+    TraceKey(std::string key, std::string value)\n+        : key(std::move(key)), value(std::move(value)) {}\n\nReview Comment:\n   Apparently this won't work until C++20 (https://stackoverflow.com/a/61205386/262727)\n\n\n\n",
                    "created": "2022-06-01T16:29:12.448+0000",
                    "updated": "2022-06-01T16:29:12.448+0000",
                    "started": "2022-06-01T16:29:12.448+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "776998",
                    "issueId": "13414893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893/worklog/777006",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #11920:\nURL: https://github.com/apache/arrow/pull/11920#discussion_r887012449\n\n\n##########\ncpp/src/arrow/flight/server_tracing_middleware.cc:\n##########\n@@ -0,0 +1,182 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/server_tracing_middleware.h\"\n+\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/flight/transport/grpc/util_internal.h\"\n+#include \"arrow/util/make_unique.h\"\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/context/propagation/global_propagator.h>\n+#include <opentelemetry/context/propagation/text_map_propagator.h>\n+#include <opentelemetry/trace/context.h>\n+#include <opentelemetry/trace/experimental_semantic_conventions.h>\n+#include <opentelemetry/trace/propagation/http_trace_context.h>\n+#endif\n+\n+namespace arrow {\n+namespace flight {\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace otel = opentelemetry;\n+namespace {\n+class FlightServerCarrier : public otel::context::propagation::TextMapCarrier {\n+ public:\n+  explicit FlightServerCarrier(const CallHeaders& incoming_headers)\n+      : incoming_headers_(incoming_headers) {}\n+\n+  otel::nostd::string_view Get(otel::nostd::string_view key) const noexcept override {\n+    util::string_view arrow_key(key.data(), key.size());\n+    auto it = incoming_headers_.find(arrow_key);\n+    if (it == incoming_headers_.end()) return \"\";\n+    util::string_view result = it->second;\n+    return {result.data(), result.size()};\n+  }\n+\n+  void Set(otel::nostd::string_view, otel::nostd::string_view) noexcept override {}\n+\n+  const CallHeaders& incoming_headers_;\n+};\n+class KeyValueCarrier : public otel::context::propagation::TextMapCarrier {\n+ public:\n+  explicit KeyValueCarrier(std::vector<TracingServerMiddleware::TraceKey>* items)\n+      : items_(items) {}\n+  otel::nostd::string_view Get(otel::nostd::string_view key) const noexcept override {\n+    return {};\n+  }\n+  void Set(otel::nostd::string_view key,\n+           otel::nostd::string_view value) noexcept override {\n+    items_->emplace_back(std::string(key), std::string(value));\n+  }\n+\n+ private:\n+  std::vector<TracingServerMiddleware::TraceKey>* items_;\n+};\n+}  // namespace\n+\n+class TracingServerMiddleware::Impl {\n+ public:\n+  Impl(otel::trace::Scope scope, otel::nostd::shared_ptr<otel::trace::Span> span)\n+      : scope_(std::move(scope)), span_(std::move(span)) {}\n+  void CallCompleted(const Status& status) {\n+    if (!status.ok()) {\n+      auto grpc_status = transport::grpc::ToGrpcStatus(status, /*ctx=*/nullptr);\n+      span_->SetStatus(otel::trace::StatusCode::kError, status.ToString());\n+      span_->SetAttribute(OTEL_GET_TRACE_ATTR(AttrRpcGrpcStatusCode),\n+                          static_cast<int32_t>(grpc_status.error_code()));\n+    } else {\n+      span_->SetStatus(otel::trace::StatusCode::kOk, \"\");\n+      span_->SetAttribute(OTEL_GET_TRACE_ATTR(AttrRpcGrpcStatusCode), int32_t(0));\n+    }\n\nReview Comment:\n   Newbie question, but will this automatically end the span?\n\n\n\n##########\ncpp/src/arrow/flight/server_tracing_middleware.h:\n##########\n@@ -0,0 +1,72 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Middleware implementation for propagating OpenTelemetry spans.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/flight/server_middleware.h\"\n+#include \"arrow/flight/visibility.h\"\n+#include \"arrow/status.h\"\n+\n+namespace arrow {\n+namespace flight {\n+\n+/// \\brief Returns a ServerMiddlewareFactory that handles receiving OpenTelemetry spans.\n+ARROW_FLIGHT_EXPORT std::shared_ptr<ServerMiddlewareFactory>\n+MakeTracingServerMiddlewareFactory();\n+\n+/// \\brief A server middleware that provides access to the\n+///   OpenTelemetry context, if present.\n+///\n+/// Used to make the OpenTelemetry span available in Python.\n+class ARROW_FLIGHT_EXPORT TracingServerMiddleware : public ServerMiddleware {\n+ public:\n+  ~TracingServerMiddleware();\n+\n+  static constexpr char const kMiddlewareName[] =\n+      \"arrow::flight::TracingServerMiddleware\";\n+\n+  std::string name() const override { return kMiddlewareName; }\n+  void SendingHeaders(AddCallHeaders*) override;\n+  void CallCompleted(const Status&) override;\n+\n+  struct TraceKey {\n+    std::string key;\n+    std::string value;\n+\n+    TraceKey() = default;\n+    TraceKey(std::string key, std::string value)\n+        : key(std::move(key)), value(std::move(value)) {}\n\nReview Comment:\n   No, but you could try `items_->push_back({std::string(key), std::string(value)})`\n\n\n\n##########\ncpp/src/arrow/flight/types.h:\n##########\n@@ -167,6 +167,9 @@ struct ARROW_FLIGHT_EXPORT Action {\n \n /// \\brief Opaque result returned after executing an action\n struct ARROW_FLIGHT_EXPORT Result {\n+  Result() = default;\n+  explicit Result(std::shared_ptr<Buffer> body) : body(std::move(body)) {}\n\nReview Comment:\n   Neither this should be necessary?\n\n\n\n##########\ncpp/src/arrow/flight/flight_test.cc:\n##########\n@@ -1534,5 +1556,136 @@ TEST_F(TestCancel, DoExchange) {\n   ARROW_UNUSED(do_exchange_result.writer->Close());\n }\n \n+class TracingTestServer : public FlightServerBase {\n+ public:\n+  Status DoAction(const ServerCallContext& call_context, const Action&,\n+                  std::unique_ptr<ResultStream>* result) override {\n+    std::vector<Result> results;\n+    auto* middleware =\n+        reinterpret_cast<TracingServerMiddleware*>(call_context.GetMiddleware(\"tracing\"));\n+    if (!middleware) return Status::Invalid(\"Could not find middleware\");\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+    EXPECT_GT(middleware->GetTraceContext().size(), 0);\n\nReview Comment:\n   Can you comment a bit on what this does/tests?\n\n\n\n##########\ncpp/src/arrow/flight/flight_test.cc:\n##########\n@@ -1534,5 +1556,136 @@ TEST_F(TestCancel, DoExchange) {\n   ARROW_UNUSED(do_exchange_result.writer->Close());\n }\n \n+class TracingTestServer : public FlightServerBase {\n+ public:\n+  Status DoAction(const ServerCallContext& call_context, const Action&,\n+                  std::unique_ptr<ResultStream>* result) override {\n+    std::vector<Result> results;\n+    auto* middleware =\n+        reinterpret_cast<TracingServerMiddleware*>(call_context.GetMiddleware(\"tracing\"));\n+    if (!middleware) return Status::Invalid(\"Could not find middleware\");\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+    EXPECT_GT(middleware->GetTraceContext().size(), 0);\n+    auto span = arrow::internal::tracing::GetTracer()->GetCurrentSpan();\n+    const auto context = span->GetContext();\n+    {\n+      const auto& span_id = context.span_id();\n+      ARROW_ASSIGN_OR_RAISE(auto buffer, AllocateBuffer(span_id.Id().size()));\n+      std::memcpy(buffer->mutable_data(), span_id.Id().data(), span_id.Id().size());\n+      results.emplace_back(std::move(buffer));\n+    }\n+    {\n+      const auto& trace_id = context.trace_id();\n+      ARROW_ASSIGN_OR_RAISE(auto buffer, AllocateBuffer(trace_id.Id().size()));\n+      std::memcpy(buffer->mutable_data(), trace_id.Id().data(), trace_id.Id().size());\n+      results.emplace_back(std::move(buffer));\n+    }\n+#else\n+    EXPECT_EQ(middleware->GetTraceContext().size(), 0);\n+#endif\n+    *result = arrow::internal::make_unique<SimpleResultStream>(std::move(results));\n+    return Status::OK();\n+  }\n+};\n+\n+class TestTracing : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+    // The default tracer always generates no-op spans which have no\n+    // span/trace ID. Set up a different tracer. Note, this needs to\n+    // be run before Arrow uses OTel as GetTracer() gets a tracer once\n+    // and keeps it in a static.\n+    std::vector<std::unique_ptr<opentelemetry::sdk::trace::SpanProcessor>> processors;\n+    auto provider =\n+        opentelemetry::nostd::shared_ptr<opentelemetry::sdk::trace::TracerProvider>(\n+            new opentelemetry::sdk::trace::TracerProvider(std::move(processors)));\n+    opentelemetry::trace::Provider::SetTracerProvider(std::move(provider));\n+\n+    opentelemetry::context::propagation::GlobalTextMapPropagator::SetGlobalPropagator(\n+        opentelemetry::nostd::shared_ptr<\n+            opentelemetry::context::propagation::TextMapPropagator>(\n+            new opentelemetry::trace::propagation::HttpTraceContext()));\n\nReview Comment:\n   Is this the kind of setup that third party server code would have to write as well?\n\n\n\n##########\npython/pyarrow/tests/test_flight.py:\n##########\n@@ -2177,3 +2177,32 @@ def test_interpreter_shutdown():\n     See https://issues.apache.org/jira/browse/ARROW-16597.\n     \"\"\"\n     util.invoke_script(\"arrow_16597.py\")\n+\n+\n+class TracingFlightServer(FlightServerBase):\n+    \"\"\"A server that echoes back trace context values.\"\"\"\n+\n+    def do_action(self, context, action):\n+        trace_context = context.get_middleware(\"tracing\").trace_context\n+        # Don't turn this method into a generator since then it'll be\n+        # lazily evaluated, and the trace context will be lost\n\nReview Comment:\n   If `trace_context` is a regular Python dict, how would it be lost?\n\n\n\n##########\ncpp/src/arrow/flight/client_tracing_middleware.cc:\n##########\n@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/client_tracing_middleware.h\"\n+\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/util/make_unique.h\"\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/context/propagation/global_propagator.h>\n+#include <opentelemetry/context/propagation/text_map_propagator.h>\n+#endif\n+\n+namespace arrow {\n+namespace flight {\n+\n+namespace {\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace otel = opentelemetry;\n+class FlightClientCarrier : public otel::context::propagation::TextMapCarrier {\n+ public:\n+  FlightClientCarrier() = default;\n+\n+  otel::nostd::string_view Get(otel::nostd::string_view key) const noexcept override {\n+    return \"\";\n+  }\n+\n+  void Set(otel::nostd::string_view key,\n+           otel::nostd::string_view value) noexcept override {\n+    context_.emplace_back(key, value);\n+  }\n+\n+  std::vector<std::pair<std::string, std::string>> context_;\n+};\n+\n+class TracingClientMiddleware : public ClientMiddleware {\n+ public:\n+  explicit TracingClientMiddleware(FlightClientCarrier carrier)\n+      : carrier_(std::move(carrier)) {}\n+  virtual ~TracingClientMiddleware() = default;\n+\n+  void SendingHeaders(AddCallHeaders* outgoing_headers) override {\n+    for (const auto& pair : carrier_.context_) {\n+      outgoing_headers->AddHeader(pair.first, pair.second);\n\nReview Comment:\n   Hmm, can you add a comment about that?\n\n\n\n",
                    "created": "2022-06-01T16:45:49.517+0000",
                    "updated": "2022-06-01T16:45:49.517+0000",
                    "started": "2022-06-01T16:45:49.516+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "777006",
                    "issueId": "13414893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893/worklog/777166",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #11920:\nURL: https://github.com/apache/arrow/pull/11920#discussion_r887299997\n\n\n##########\ncpp/src/arrow/flight/flight_test.cc:\n##########\n@@ -1534,5 +1556,136 @@ TEST_F(TestCancel, DoExchange) {\n   ARROW_UNUSED(do_exchange_result.writer->Close());\n }\n \n+class TracingTestServer : public FlightServerBase {\n+ public:\n+  Status DoAction(const ServerCallContext& call_context, const Action&,\n+                  std::unique_ptr<ResultStream>* result) override {\n+    std::vector<Result> results;\n+    auto* middleware =\n+        reinterpret_cast<TracingServerMiddleware*>(call_context.GetMiddleware(\"tracing\"));\n+    if (!middleware) return Status::Invalid(\"Could not find middleware\");\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+    EXPECT_GT(middleware->GetTraceContext().size(), 0);\n+    auto span = arrow::internal::tracing::GetTracer()->GetCurrentSpan();\n+    const auto context = span->GetContext();\n+    {\n+      const auto& span_id = context.span_id();\n+      ARROW_ASSIGN_OR_RAISE(auto buffer, AllocateBuffer(span_id.Id().size()));\n+      std::memcpy(buffer->mutable_data(), span_id.Id().data(), span_id.Id().size());\n+      results.emplace_back(std::move(buffer));\n+    }\n+    {\n+      const auto& trace_id = context.trace_id();\n+      ARROW_ASSIGN_OR_RAISE(auto buffer, AllocateBuffer(trace_id.Id().size()));\n+      std::memcpy(buffer->mutable_data(), trace_id.Id().data(), trace_id.Id().size());\n+      results.emplace_back(std::move(buffer));\n+    }\n+#else\n+    EXPECT_EQ(middleware->GetTraceContext().size(), 0);\n+#endif\n+    *result = arrow::internal::make_unique<SimpleResultStream>(std::move(results));\n+    return Status::OK();\n+  }\n+};\n+\n+class TestTracing : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+    // The default tracer always generates no-op spans which have no\n+    // span/trace ID. Set up a different tracer. Note, this needs to\n+    // be run before Arrow uses OTel as GetTracer() gets a tracer once\n+    // and keeps it in a static.\n+    std::vector<std::unique_ptr<opentelemetry::sdk::trace::SpanProcessor>> processors;\n+    auto provider =\n+        opentelemetry::nostd::shared_ptr<opentelemetry::sdk::trace::TracerProvider>(\n+            new opentelemetry::sdk::trace::TracerProvider(std::move(processors)));\n+    opentelemetry::trace::Provider::SetTracerProvider(std::move(provider));\n+\n+    opentelemetry::context::propagation::GlobalTextMapPropagator::SetGlobalPropagator(\n+        opentelemetry::nostd::shared_ptr<\n+            opentelemetry::context::propagation::TextMapPropagator>(\n+            new opentelemetry::trace::propagation::HttpTraceContext()));\n\nReview Comment:\n   Yes, the application would do this as part of initializing OpenTelemetry, though generally the SDKs provide conveniences to configure this. \n\n\n\n##########\ncpp/src/arrow/flight/server_tracing_middleware.cc:\n##########\n@@ -0,0 +1,182 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/server_tracing_middleware.h\"\n+\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/flight/transport/grpc/util_internal.h\"\n+#include \"arrow/util/make_unique.h\"\n+#include \"arrow/util/tracing_internal.h\"\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+#include <opentelemetry/context/propagation/global_propagator.h>\n+#include <opentelemetry/context/propagation/text_map_propagator.h>\n+#include <opentelemetry/trace/context.h>\n+#include <opentelemetry/trace/experimental_semantic_conventions.h>\n+#include <opentelemetry/trace/propagation/http_trace_context.h>\n+#endif\n+\n+namespace arrow {\n+namespace flight {\n+\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+namespace otel = opentelemetry;\n+namespace {\n+class FlightServerCarrier : public otel::context::propagation::TextMapCarrier {\n+ public:\n+  explicit FlightServerCarrier(const CallHeaders& incoming_headers)\n+      : incoming_headers_(incoming_headers) {}\n+\n+  otel::nostd::string_view Get(otel::nostd::string_view key) const noexcept override {\n+    util::string_view arrow_key(key.data(), key.size());\n+    auto it = incoming_headers_.find(arrow_key);\n+    if (it == incoming_headers_.end()) return \"\";\n+    util::string_view result = it->second;\n+    return {result.data(), result.size()};\n+  }\n+\n+  void Set(otel::nostd::string_view, otel::nostd::string_view) noexcept override {}\n+\n+  const CallHeaders& incoming_headers_;\n+};\n+class KeyValueCarrier : public otel::context::propagation::TextMapCarrier {\n+ public:\n+  explicit KeyValueCarrier(std::vector<TracingServerMiddleware::TraceKey>* items)\n+      : items_(items) {}\n+  otel::nostd::string_view Get(otel::nostd::string_view key) const noexcept override {\n+    return {};\n+  }\n+  void Set(otel::nostd::string_view key,\n+           otel::nostd::string_view value) noexcept override {\n+    items_->emplace_back(std::string(key), std::string(value));\n+  }\n+\n+ private:\n+  std::vector<TracingServerMiddleware::TraceKey>* items_;\n+};\n+}  // namespace\n+\n+class TracingServerMiddleware::Impl {\n+ public:\n+  Impl(otel::trace::Scope scope, otel::nostd::shared_ptr<otel::trace::Span> span)\n+      : scope_(std::move(scope)), span_(std::move(span)) {}\n+  void CallCompleted(const Status& status) {\n+    if (!status.ok()) {\n+      auto grpc_status = transport::grpc::ToGrpcStatus(status, /*ctx=*/nullptr);\n+      span_->SetStatus(otel::trace::StatusCode::kError, status.ToString());\n+      span_->SetAttribute(OTEL_GET_TRACE_ATTR(AttrRpcGrpcStatusCode),\n+                          static_cast<int32_t>(grpc_status.error_code()));\n+    } else {\n+      span_->SetStatus(otel::trace::StatusCode::kOk, \"\");\n+      span_->SetAttribute(OTEL_GET_TRACE_ATTR(AttrRpcGrpcStatusCode), int32_t(0));\n+    }\n\nReview Comment:\n   It'll end when the Span goes out of scope, but I'll just manually end it here to be explicit.\n\n\n\n##########\npython/pyarrow/tests/test_flight.py:\n##########\n@@ -2177,3 +2177,32 @@ def test_interpreter_shutdown():\n     See https://issues.apache.org/jira/browse/ARROW-16597.\n     \"\"\"\n     util.invoke_script(\"arrow_16597.py\")\n+\n+\n+class TracingFlightServer(FlightServerBase):\n+    \"\"\"A server that echoes back trace context values.\"\"\"\n+\n+    def do_action(self, context, action):\n+        trace_context = context.get_middleware(\"tracing\").trace_context\n+        # Don't turn this method into a generator since then it'll be\n+        # lazily evaluated, and the trace context will be lost\n\nReview Comment:\n   Evaluating `.trace_context` is side-effectful and depends on implicit state maintained by OpenTelemetry, so if this is a generator it'll be evaluated after OpenTelemetry has already cleaned up the state.\n\n\n\n",
                    "created": "2022-06-01T21:05:26.383+0000",
                    "updated": "2022-06-01T21:05:26.383+0000",
                    "started": "2022-06-01T21:05:26.383+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "777166",
                    "issueId": "13414893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893/worklog/777169",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #11920:\nURL: https://github.com/apache/arrow/pull/11920#discussion_r887303083\n\n\n##########\npython/pyarrow/tests/test_flight.py:\n##########\n@@ -2177,3 +2177,32 @@ def test_interpreter_shutdown():\n     See https://issues.apache.org/jira/browse/ARROW-16597.\n     \"\"\"\n     util.invoke_script(\"arrow_16597.py\")\n+\n+\n+class TracingFlightServer(FlightServerBase):\n+    \"\"\"A server that echoes back trace context values.\"\"\"\n+\n+    def do_action(self, context, action):\n+        trace_context = context.get_middleware(\"tracing\").trace_context\n+        # Don't turn this method into a generator since then it'll be\n+        # lazily evaluated, and the trace context will be lost\n\nReview Comment:\n   I've updated the comment to be clearer about what goes on.\n\n\n\n",
                    "created": "2022-06-01T21:11:37.144+0000",
                    "updated": "2022-06-01T21:11:37.144+0000",
                    "started": "2022-06-01T21:11:37.144+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "777169",
                    "issueId": "13414893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893/worklog/811223",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #11920:\nURL: https://github.com/apache/arrow/pull/11920#issuecomment-1255001289\n\n   Rebased, will merge assuming no further comments as this has been sitting around for a long time\n\n\n",
                    "created": "2022-09-22T13:09:51.670+0000",
                    "updated": "2022-09-22T13:09:51.670+0000",
                    "started": "2022-09-22T13:09:51.669+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811223",
                    "issueId": "13414893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893/worklog/812075",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm merged PR #11920:\nURL: https://github.com/apache/arrow/pull/11920\n\n\n",
                    "created": "2022-09-26T11:42:31.472+0000",
                    "updated": "2022-09-26T11:42:31.472+0000",
                    "started": "2022-09-26T11:42:31.472+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "812075",
                    "issueId": "13414893"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893/worklog/812162",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on PR #11920:\nURL: https://github.com/apache/arrow/pull/11920#issuecomment-1258276338\n\n   Benchmark runs are scheduled for baseline = f941118ea6ffbe1d1d8367d0218566e9e9dae550 and contender = be30611871f260a350cfbb17003cf676af4432da. be30611871f260a350cfbb17003cf676af4432da is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/3f299579f77741ba9fe0469abef8bb77...3cef8e0f3cde4dd98b710d2872b5e564/)\n   [Failed :arrow_down:0.2% :arrow_up:0.0%] [test-mac-arm](https://conbench.ursa.dev/compare/runs/7deb0d3a14c441db95a36882f5f96d6b...dbc1e09dff4a4aa88516c8c51ba83e36/)\n   [Failed :arrow_down:1.37% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/5b9de6f148be4dc88782a7d535f1b775...a49c2f0c58504bd2bdc79563b73092ae/)\n   [Finished :arrow_down:0.14% :arrow_up:0.04%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/3590d1d2d18648ad9c33da0a941fa005...6ef44be7cb2e430bb21173162ecc038e/)\n   Buildkite builds:\n   [Finished] [`be306118` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1563)\n   [Finished] [`be306118` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1581)\n   [Failed] [`be306118` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1564)\n   [Finished] [`be306118` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1577)\n   [Finished] [`f941118e` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1562)\n   [Failed] [`f941118e` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1580)\n   [Failed] [`f941118e` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1563)\n   [Finished] [`f941118e` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1576)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python, R. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n",
                    "created": "2022-09-26T16:05:59.319+0000",
                    "updated": "2022-09-26T16:05:59.319+0000",
                    "started": "2022-09-26T16:05:59.319+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "812162",
                    "issueId": "13414893"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 12000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4e828a31[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41babb69[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@68eecf2e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7c1b40a9[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6944456e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@63ebfd97[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7de2d97b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5b5ad066[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@10fe8156[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2cc5d19b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4707ec79[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4a53dd1f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12000,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Sep 26 11:42:34 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-09-26T11:42:34.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14958/watchers",
            "watchCount": 2,
            "isWatching": true
        },
        "created": "2021-12-01T19:38:13.000+0000",
        "updated": "2022-09-26T16:05:59.000+0000",
        "timeoriginalestimate": null,
        "description": "Sans Python support, at least for now, since figuring out how to do the bindings will be a challenge there. Also see [https://github.com/open-telemetry/community/discussions/734]",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][FlightRPC] Enable OpenTelemetry with Arrow Flight",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893/comment/17598502",
                    "id": "17598502",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "body": "This issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned per [project policy|https://arrow.apache.org/docs/dev/developers/bug_reports.html#issue-assignment]. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "created": "2022-08-31T16:50:11.798+0000",
                    "updated": "2022-08-31T16:50:11.798+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414893/comment/17609453",
                    "id": "17609453",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 11920\n[https://github.com/apache/arrow/pull/11920]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-09-26T11:42:34.070+0000",
                    "updated": "2022-09-26T11:42:34.070+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0x9ow:",
        "customfield_12314139": null
    }
}