{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13203255",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203255",
    "key": "ARROW-3968",
    "fields": {
        "fixVersions": [],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/10011",
            "id": "10011",
            "description": "Won't Do",
            "name": "Won't Do"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mookerji",
            "name": "mookerji",
            "key": "mookerji",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34051",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34051",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34051",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34051"
            },
            "displayName": "Bhaskar Mookerji",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mookerji",
            "name": "mookerji",
            "key": "mookerji",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34051",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34051",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34051",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34051"
            },
            "displayName": "Bhaskar Mookerji",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 13200,
            "total": 13200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/customFieldOption/10430",
                "value": "Patch",
                "id": "10430",
                "disabled": false
            }
        ],
        "progress": {
            "progress": 13200,
            "total": 13200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3968/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 22,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203255/worklog/173246",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mookerji opened a new pull request #3136: [ARROW-3968]  [C++] csv-to-arrow: CLI utility tool for generating arrow files from CSV.\nURL: https://github.com/apache/arrow/pull/3136\n \n \n   This is a standalone tool for streaming out Arrow from CSV, exposing the CSV reader options via gflags.\r\n   \r\n   For more details, see https://issues.apache.org/jira/browse/ARROW-3968.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-09T07:38:04.471+0000",
                    "updated": "2018-12-09T07:38:04.471+0000",
                    "started": "2018-12-09T07:38:04.470+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173246",
                    "issueId": "13203255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203255/worklog/173268",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #3136: [ARROW-3968]  [C++] csv-to-arrow: CLI utility tool for generating arrow files from CSV.\nURL: https://github.com/apache/arrow/pull/3136#discussion_r240045674\n \n \n\n ##########\n File path: cpp/src/arrow/csv/CMakeLists.txt\n ##########\n @@ -29,3 +29,24 @@ file(GLOB_RECURSE ARROW_CSV_HEADERS \"*.h\")\n install(FILES\n   ${ARROW_CSV_HEADERS}\n   DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/arrow/csv\")\n+\n+set(ARROW_CSV_SRCS\n+  chunker.cc\n+  column-builder.cc\n+  converter.cc\n+  options.cc\n+  parser.cc\n+  reader.cc\n+)\n+\n+ADD_ARROW_LIB(arrow_csv\n+  SOURCES ${ARROW_CSV_SRCS}\n+  DEPENDENCIES arrow_dependencies\n+  SHARED_LINK_LIBS arrow_shared\n+  STATIC_LINK_LIBS arrow_static)\n \n Review comment:\n   -1 on this change. The CSV code is part of libarrow\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-09T17:33:21.042+0000",
                    "updated": "2018-12-09T17:33:21.042+0000",
                    "started": "2018-12-09T17:33:21.041+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173268",
                    "issueId": "13203255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203255/worklog/173319",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mookerji commented on a change in pull request #3136: [ARROW-3968]  [C++] csv-to-arrow: CLI utility tool for generating arrow files from CSV.\nURL: https://github.com/apache/arrow/pull/3136#discussion_r240051778\n \n \n\n ##########\n File path: cpp/src/arrow/csv/CMakeLists.txt\n ##########\n @@ -29,3 +29,24 @@ file(GLOB_RECURSE ARROW_CSV_HEADERS \"*.h\")\n install(FILES\n   ${ARROW_CSV_HEADERS}\n   DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/arrow/csv\")\n+\n+set(ARROW_CSV_SRCS\n+  chunker.cc\n+  column-builder.cc\n+  converter.cc\n+  options.cc\n+  parser.cc\n+  reader.cc\n+)\n+\n+ADD_ARROW_LIB(arrow_csv\n+  SOURCES ${ARROW_CSV_SRCS}\n+  DEPENDENCIES arrow_dependencies\n+  SHARED_LINK_LIBS arrow_shared\n+  STATIC_LINK_LIBS arrow_static)\n \n Review comment:\n   Oh shoot, I should have realized [that](https://github.com/apache/arrow/blob/master/cpp/src/arrow/CMakeLists.txt#L36). I'll fix that in a follow up commit.\r\n   \r\n   Should I gate this executable with the `ARROW_BUILD_UTILITIES` option?\r\n   \r\n   I noticed that a static library build for gflags [config](https://github.com/apache/arrow/blob/57b55de6cafd3dbeaec16973f029618bfb2c6905/cpp/cmake_modules/ThirdpartyToolchain.cmake#L578) is only set when either tests or benchmarks [are enabled](https://github.com/apache/arrow/blob/57b55de6cafd3dbeaec16973f029618bfb2c6905/cpp/cmake_modules/ThirdpartyToolchain.cmake#L528). Should gflags also be configured when `ARROW_BUILD_UTILITIES` is `ON`? If so, are we only permitting static builds?\r\n   \r\n   If 'yes' to the above, I can also make those changes, and open a separate PR for configuring gflags with `ARROW_BUILD_UTILITIES`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-09T20:26:28.240+0000",
                    "updated": "2018-12-09T20:26:28.240+0000",
                    "started": "2018-12-09T20:26:28.239+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173319",
                    "issueId": "13203255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203255/worklog/173322",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mookerji commented on issue #3136: [ARROW-3968]  [C++] csv-to-arrow: CLI utility tool for generating arrow files from CSV.\nURL: https://github.com/apache/arrow/pull/3136#issuecomment-445568963\n \n \n   @wesm Thanks for the quick follow-up. \r\n   \r\n   re: API stability, should that be a comment in the documentation or a configurable warning output by the tool? I'm assuming the latter.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-09T20:32:03.036+0000",
                    "updated": "2018-12-09T20:32:03.036+0000",
                    "started": "2018-12-09T20:32:03.035+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173322",
                    "issueId": "13203255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203255/worklog/173325",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3136: [ARROW-3968]  [C++] csv-to-arrow: CLI utility tool for generating arrow files from CSV.\nURL: https://github.com/apache/arrow/pull/3136#issuecomment-445570504\n \n \n   Let's wait for @pitrou to review so we can discuss. I'm not sure that having CLI utilities in C++ like this makes sense from a maintainability standpoint. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-09T20:50:49.107+0000",
                    "updated": "2018-12-09T20:50:49.107+0000",
                    "started": "2018-12-09T20:50:49.106+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173325",
                    "issueId": "13203255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203255/worklog/173493",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3136: [ARROW-3968]  [C++] csv-to-arrow: CLI utility tool for generating arrow files from CSV.\nURL: https://github.com/apache/arrow/pull/3136#discussion_r240157908\n \n \n\n ##########\n File path: cpp/src/arrow/csv/csv-to-arrow.cc\n ##########\n @@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n \n Review comment:\n   For clarity I'd either name this file something like `cli-csv-to-arrow.cc` or put it in a `arrow/cli` directory.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T10:33:21.522+0000",
                    "updated": "2018-12-10T10:33:21.522+0000",
                    "started": "2018-12-10T10:33:21.521+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173493",
                    "issueId": "13203255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203255/worklog/173497",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3136: [ARROW-3968]  [C++] csv-to-arrow: CLI utility tool for generating arrow files from CSV.\nURL: https://github.com/apache/arrow/pull/3136#discussion_r240158127\n \n \n\n ##########\n File path: cpp/src/arrow/csv/csv-to-arrow.cc\n ##########\n @@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/csv/options.h\"\n+#include \"arrow/csv/reader.h\"\n+#include \"arrow/io/file.h\"\n+#include \"arrow/ipc/writer.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/io-util.h\"\n+\n+#include <iostream>\n+\n+#include <gflags/gflags.h>\n+\n+// CLI options and utilities\n+\n+static bool CheckPositive(const char* flagname, gflags::int32 value) {\n+  if (value > 0) return true;\n+  std::cerr << \"ERROR: -\" << flagname << \" must be > 0!\" << std::endl;\n+  return false;\n+}\n+\n+static bool CheckCharacter(const char* flagname, const std::string& value) {\n+  if (value.length() == 1) return true;\n+  std::cerr << \"ERROR: -\" << flagname << \" must be a character!\" << std::endl;\n+  return false;\n+}\n+\n+// Parsing options\n+DEFINE_string(delimiter, \",\", \"Field delimiter\");\n+DEFINE_bool(quoting, true, \"Use quoting\");\n+DEFINE_string(quote_char, \"\\\"\", \"Quoting character (if `quoting` is true)\");\n \n Review comment:\n   Passing backslashes on the command line will be... fun.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T10:34:04.083+0000",
                    "updated": "2018-12-10T10:34:04.083+0000",
                    "started": "2018-12-10T10:34:04.082+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173497",
                    "issueId": "13203255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203255/worklog/173501",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3136: [ARROW-3968]  [C++] csv-to-arrow: CLI utility tool for generating arrow files from CSV.\nURL: https://github.com/apache/arrow/pull/3136#discussion_r240160911\n \n \n\n ##########\n File path: cpp/src/arrow/csv/csv-to-arrow.cc\n ##########\n @@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/csv/options.h\"\n+#include \"arrow/csv/reader.h\"\n+#include \"arrow/io/file.h\"\n+#include \"arrow/ipc/writer.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/io-util.h\"\n+\n+#include <iostream>\n+\n+#include <gflags/gflags.h>\n+\n+// CLI options and utilities\n+\n+static bool CheckPositive(const char* flagname, gflags::int32 value) {\n+  if (value > 0) return true;\n+  std::cerr << \"ERROR: -\" << flagname << \" must be > 0!\" << std::endl;\n+  return false;\n+}\n+\n+static bool CheckCharacter(const char* flagname, const std::string& value) {\n+  if (value.length() == 1) return true;\n+  std::cerr << \"ERROR: -\" << flagname << \" must be a character!\" << std::endl;\n+  return false;\n+}\n+\n+// Parsing options\n+DEFINE_string(delimiter, \",\", \"Field delimiter\");\n+DEFINE_bool(quoting, true, \"Use quoting\");\n+DEFINE_string(quote_char, \"\\\"\", \"Quoting character (if `quoting` is true)\");\n+DEFINE_bool(double_quote, true, \"Quote inside a value is double-quoted\");\n+DEFINE_bool(escaping, false, \"Use escaping\");\n+DEFINE_string(escape_char, \"\\\\\", \"Escaping character (if `escaping` is true)\");\n+DEFINE_bool(newlines_in_values, false,\n+            \"Values are allowed to contain CR (0x0d) and LF (0x0a) characters\");\n+DEFINE_bool(ignore_empty_lines, true, \"Ignore empty lines\");\n+DEFINE_int32(\n+    header_rows, 1,\n+    \"Number of header rows to skip (including the first row containing column names)\");\n+\n+DEFINE_validator(delimiter, &CheckCharacter);\n+DEFINE_validator(quote_char, &CheckCharacter);\n+DEFINE_validator(escape_char, &CheckCharacter);\n+DEFINE_validator(header_rows, &CheckPositive);\n+\n+// Conversion options\n+DEFINE_bool(check_utf8, true, \"Check UTF8 validity of string columns\");\n+\n+// Read options\n+DEFINE_bool(use_threads, true, \"Use the global CPU thread pool\");\n+DEFINE_int32(block_size, 1 << 20, \"Block size\");\n+DEFINE_validator(block_size, &CheckPositive);\n+\n+// Tool options\n+DEFINE_bool(verbose, true, \"Verbose output\");\n+\n+namespace arrow {\n+namespace csv {\n+\n+static Status InitParseOptions(ParseOptions& options) {\n+  options.delimiter = FLAGS_delimiter.at(0);\n+  options.quoting = FLAGS_quoting;\n+  options.quote_char = FLAGS_quote_char.at(0);\n+  options.double_quote = FLAGS_double_quote;\n+  options.escaping = FLAGS_escaping;\n+  options.escape_char = FLAGS_escape_char.at(0);\n+  options.newlines_in_values = FLAGS_newlines_in_values;\n+  options.ignore_empty_lines = FLAGS_ignore_empty_lines;\n+  options.header_rows = FLAGS_header_rows;\n+  return Status::OK();\n+}\n+\n+static Status InitConvertOptions(ConvertOptions& options) {\n+  options.check_utf8 = FLAGS_check_utf8;\n+  return Status::OK();\n+}\n+\n+static Status InitReadOptions(ReadOptions& options) {\n+  options.use_threads = FLAGS_use_threads;\n+  options.block_size = FLAGS_block_size;\n+  return Status::OK();\n+}\n+\n+static Status Run(int argc, char** argv) {\n+  // Instantiate and handle options\n+  gflags::SetUsageMessage(\"csv-to-arrow [FLAGS] input.csv  > output.arrow\");\n+  gflags::ParseCommandLineFlags(&argc, &argv, true);\n+  if (argc != 2) {\n+    std::cerr << \"Usage: \" << gflags::ProgramUsage() << std::endl;\n+    return Status::Invalid(\"Input filename missing\");\n+  }\n+  auto parse_options = ParseOptions::Defaults();\n+  ARROW_RETURN_NOT_OK(InitParseOptions(parse_options));\n+  auto read_options = ReadOptions::Defaults();\n+  ARROW_RETURN_NOT_OK(InitReadOptions(read_options));\n+  auto convert_options = ConvertOptions::Defaults();\n+  ARROW_RETURN_NOT_OK(InitConvertOptions(convert_options));\n+\n+  // Instantiate reading\n+  std::string input_filename(argv[1]);\n+  std::shared_ptr<io::ReadableFile> input_file;\n+  ARROW_RETURN_NOT_OK(io::ReadableFile::Open(input_filename, &input_file));\n+  auto pool = default_memory_pool();\n+  std::shared_ptr<TableReader> reader;\n+  ARROW_RETURN_NOT_OK(TableReader::Make(pool, input_file, read_options, parse_options,\n+                                        convert_options, &reader));\n+\n+  // Instantiate writing, read from input and write to output\n+  io::StdoutStream stdout;\n \n Review comment:\n   I'm not sure that's a good idea. `io::StdoutStream` uses the C++ `std::cout` stream.\r\n   1) it might be slow with large data\r\n   2) it might not be open in binary mode on Windows\r\n   \r\n   In any case, since the output is binary, you don't gain much by being able to displa it on a terminal. The command-line should probably take an output filename instead.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T10:42:42.507+0000",
                    "updated": "2018-12-10T10:42:42.507+0000",
                    "started": "2018-12-10T10:42:42.506+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173501",
                    "issueId": "13203255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203255/worklog/173503",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3136: [ARROW-3968]  [C++] csv-to-arrow: CLI utility tool for generating arrow files from CSV.\nURL: https://github.com/apache/arrow/pull/3136#discussion_r240161457\n \n \n\n ##########\n File path: cpp/src/arrow/csv/csv-to-arrow.cc\n ##########\n @@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/csv/options.h\"\n+#include \"arrow/csv/reader.h\"\n+#include \"arrow/io/file.h\"\n+#include \"arrow/ipc/writer.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/io-util.h\"\n+\n+#include <iostream>\n+\n+#include <gflags/gflags.h>\n+\n+// CLI options and utilities\n+\n+static bool CheckPositive(const char* flagname, gflags::int32 value) {\n+  if (value > 0) return true;\n+  std::cerr << \"ERROR: -\" << flagname << \" must be > 0!\" << std::endl;\n+  return false;\n+}\n+\n+static bool CheckCharacter(const char* flagname, const std::string& value) {\n+  if (value.length() == 1) return true;\n+  std::cerr << \"ERROR: -\" << flagname << \" must be a character!\" << std::endl;\n+  return false;\n+}\n+\n+// Parsing options\n+DEFINE_string(delimiter, \",\", \"Field delimiter\");\n+DEFINE_bool(quoting, true, \"Use quoting\");\n+DEFINE_string(quote_char, \"\\\"\", \"Quoting character (if `quoting` is true)\");\n+DEFINE_bool(double_quote, true, \"Quote inside a value is double-quoted\");\n+DEFINE_bool(escaping, false, \"Use escaping\");\n+DEFINE_string(escape_char, \"\\\\\", \"Escaping character (if `escaping` is true)\");\n+DEFINE_bool(newlines_in_values, false,\n+            \"Values are allowed to contain CR (0x0d) and LF (0x0a) characters\");\n+DEFINE_bool(ignore_empty_lines, true, \"Ignore empty lines\");\n+DEFINE_int32(\n+    header_rows, 1,\n+    \"Number of header rows to skip (including the first row containing column names)\");\n+\n+DEFINE_validator(delimiter, &CheckCharacter);\n+DEFINE_validator(quote_char, &CheckCharacter);\n+DEFINE_validator(escape_char, &CheckCharacter);\n+DEFINE_validator(header_rows, &CheckPositive);\n+\n+// Conversion options\n+DEFINE_bool(check_utf8, true, \"Check UTF8 validity of string columns\");\n+\n+// Read options\n+DEFINE_bool(use_threads, true, \"Use the global CPU thread pool\");\n+DEFINE_int32(block_size, 1 << 20, \"Block size\");\n+DEFINE_validator(block_size, &CheckPositive);\n+\n+// Tool options\n+DEFINE_bool(verbose, true, \"Verbose output\");\n+\n+namespace arrow {\n+namespace csv {\n+\n+static Status InitParseOptions(ParseOptions& options) {\n+  options.delimiter = FLAGS_delimiter.at(0);\n+  options.quoting = FLAGS_quoting;\n+  options.quote_char = FLAGS_quote_char.at(0);\n+  options.double_quote = FLAGS_double_quote;\n+  options.escaping = FLAGS_escaping;\n+  options.escape_char = FLAGS_escape_char.at(0);\n+  options.newlines_in_values = FLAGS_newlines_in_values;\n+  options.ignore_empty_lines = FLAGS_ignore_empty_lines;\n+  options.header_rows = FLAGS_header_rows;\n+  return Status::OK();\n+}\n+\n+static Status InitConvertOptions(ConvertOptions& options) {\n+  options.check_utf8 = FLAGS_check_utf8;\n+  return Status::OK();\n+}\n+\n+static Status InitReadOptions(ReadOptions& options) {\n+  options.use_threads = FLAGS_use_threads;\n+  options.block_size = FLAGS_block_size;\n+  return Status::OK();\n+}\n+\n+static Status Run(int argc, char** argv) {\n+  // Instantiate and handle options\n+  gflags::SetUsageMessage(\"csv-to-arrow [FLAGS] input.csv  > output.arrow\");\n+  gflags::ParseCommandLineFlags(&argc, &argv, true);\n+  if (argc != 2) {\n+    std::cerr << \"Usage: \" << gflags::ProgramUsage() << std::endl;\n+    return Status::Invalid(\"Input filename missing\");\n+  }\n+  auto parse_options = ParseOptions::Defaults();\n+  ARROW_RETURN_NOT_OK(InitParseOptions(parse_options));\n+  auto read_options = ReadOptions::Defaults();\n+  ARROW_RETURN_NOT_OK(InitReadOptions(read_options));\n+  auto convert_options = ConvertOptions::Defaults();\n+  ARROW_RETURN_NOT_OK(InitConvertOptions(convert_options));\n+\n+  // Instantiate reading\n+  std::string input_filename(argv[1]);\n+  std::shared_ptr<io::ReadableFile> input_file;\n+  ARROW_RETURN_NOT_OK(io::ReadableFile::Open(input_filename, &input_file));\n+  auto pool = default_memory_pool();\n+  std::shared_ptr<TableReader> reader;\n+  ARROW_RETURN_NOT_OK(TableReader::Make(pool, input_file, read_options, parse_options,\n+                                        convert_options, &reader));\n+\n+  // Instantiate writing, read from input and write to output\n+  io::StdoutStream stdout;\n+  std::shared_ptr<ipc::RecordBatchWriter> writer;\n+  bool schema_written = false;\n+  std::shared_ptr<arrow::Table> table;\n+  while (!reader->Read(&table).IsInvalid()) {\n+    if (!schema_written) {\n+      RETURN_NOT_OK(ipc::RecordBatchFileWriter::Open(&stdout, table->schema(), &writer));\n+      schema_written = true;\n+    }\n+    std::shared_ptr<RecordBatch> batch_out;\n+    TableBatchReader table_reader(*table);\n+    while (table_reader.ReadNext(&batch_out).ok()) {\n+      if (batch_out == nullptr) {\n+        break;\n+      }\n+      ARROW_RETURN_NOT_OK(writer->WriteRecordBatch(*batch_out));\n+    }\n+  }\n+\n+  // Cleanup\n+  ARROW_RETURN_NOT_OK(writer->Close());\n+  gflags::ShutDownCommandLineFlags();\n+  return Status::OK();\n+}\n+\n+}  // namespace csv\n+}  // namespace arrow\n+\n+int main(int argc, char** argv) {\n+  arrow::Status status = arrow::csv::Run(argc, argv);\n+  if (!status.ok()) {\n+    std::cerr << \"ERROR! \" << status.ToString() << std::endl;\n \n Review comment:\n   \r\n   \r\n   You also want to return a non-zero error code here.\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T10:44:24.010+0000",
                    "updated": "2018-12-10T10:44:24.010+0000",
                    "started": "2018-12-10T10:44:24.009+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173503",
                    "issueId": "13203255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203255/worklog/173504",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3136: [ARROW-3968]  [C++] csv-to-arrow: CLI utility tool for generating arrow files from CSV.\nURL: https://github.com/apache/arrow/pull/3136#discussion_r240160911\n \n \n\n ##########\n File path: cpp/src/arrow/csv/csv-to-arrow.cc\n ##########\n @@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/csv/options.h\"\n+#include \"arrow/csv/reader.h\"\n+#include \"arrow/io/file.h\"\n+#include \"arrow/ipc/writer.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/io-util.h\"\n+\n+#include <iostream>\n+\n+#include <gflags/gflags.h>\n+\n+// CLI options and utilities\n+\n+static bool CheckPositive(const char* flagname, gflags::int32 value) {\n+  if (value > 0) return true;\n+  std::cerr << \"ERROR: -\" << flagname << \" must be > 0!\" << std::endl;\n+  return false;\n+}\n+\n+static bool CheckCharacter(const char* flagname, const std::string& value) {\n+  if (value.length() == 1) return true;\n+  std::cerr << \"ERROR: -\" << flagname << \" must be a character!\" << std::endl;\n+  return false;\n+}\n+\n+// Parsing options\n+DEFINE_string(delimiter, \",\", \"Field delimiter\");\n+DEFINE_bool(quoting, true, \"Use quoting\");\n+DEFINE_string(quote_char, \"\\\"\", \"Quoting character (if `quoting` is true)\");\n+DEFINE_bool(double_quote, true, \"Quote inside a value is double-quoted\");\n+DEFINE_bool(escaping, false, \"Use escaping\");\n+DEFINE_string(escape_char, \"\\\\\", \"Escaping character (if `escaping` is true)\");\n+DEFINE_bool(newlines_in_values, false,\n+            \"Values are allowed to contain CR (0x0d) and LF (0x0a) characters\");\n+DEFINE_bool(ignore_empty_lines, true, \"Ignore empty lines\");\n+DEFINE_int32(\n+    header_rows, 1,\n+    \"Number of header rows to skip (including the first row containing column names)\");\n+\n+DEFINE_validator(delimiter, &CheckCharacter);\n+DEFINE_validator(quote_char, &CheckCharacter);\n+DEFINE_validator(escape_char, &CheckCharacter);\n+DEFINE_validator(header_rows, &CheckPositive);\n+\n+// Conversion options\n+DEFINE_bool(check_utf8, true, \"Check UTF8 validity of string columns\");\n+\n+// Read options\n+DEFINE_bool(use_threads, true, \"Use the global CPU thread pool\");\n+DEFINE_int32(block_size, 1 << 20, \"Block size\");\n+DEFINE_validator(block_size, &CheckPositive);\n+\n+// Tool options\n+DEFINE_bool(verbose, true, \"Verbose output\");\n+\n+namespace arrow {\n+namespace csv {\n+\n+static Status InitParseOptions(ParseOptions& options) {\n+  options.delimiter = FLAGS_delimiter.at(0);\n+  options.quoting = FLAGS_quoting;\n+  options.quote_char = FLAGS_quote_char.at(0);\n+  options.double_quote = FLAGS_double_quote;\n+  options.escaping = FLAGS_escaping;\n+  options.escape_char = FLAGS_escape_char.at(0);\n+  options.newlines_in_values = FLAGS_newlines_in_values;\n+  options.ignore_empty_lines = FLAGS_ignore_empty_lines;\n+  options.header_rows = FLAGS_header_rows;\n+  return Status::OK();\n+}\n+\n+static Status InitConvertOptions(ConvertOptions& options) {\n+  options.check_utf8 = FLAGS_check_utf8;\n+  return Status::OK();\n+}\n+\n+static Status InitReadOptions(ReadOptions& options) {\n+  options.use_threads = FLAGS_use_threads;\n+  options.block_size = FLAGS_block_size;\n+  return Status::OK();\n+}\n+\n+static Status Run(int argc, char** argv) {\n+  // Instantiate and handle options\n+  gflags::SetUsageMessage(\"csv-to-arrow [FLAGS] input.csv  > output.arrow\");\n+  gflags::ParseCommandLineFlags(&argc, &argv, true);\n+  if (argc != 2) {\n+    std::cerr << \"Usage: \" << gflags::ProgramUsage() << std::endl;\n+    return Status::Invalid(\"Input filename missing\");\n+  }\n+  auto parse_options = ParseOptions::Defaults();\n+  ARROW_RETURN_NOT_OK(InitParseOptions(parse_options));\n+  auto read_options = ReadOptions::Defaults();\n+  ARROW_RETURN_NOT_OK(InitReadOptions(read_options));\n+  auto convert_options = ConvertOptions::Defaults();\n+  ARROW_RETURN_NOT_OK(InitConvertOptions(convert_options));\n+\n+  // Instantiate reading\n+  std::string input_filename(argv[1]);\n+  std::shared_ptr<io::ReadableFile> input_file;\n+  ARROW_RETURN_NOT_OK(io::ReadableFile::Open(input_filename, &input_file));\n+  auto pool = default_memory_pool();\n+  std::shared_ptr<TableReader> reader;\n+  ARROW_RETURN_NOT_OK(TableReader::Make(pool, input_file, read_options, parse_options,\n+                                        convert_options, &reader));\n+\n+  // Instantiate writing, read from input and write to output\n+  io::StdoutStream stdout;\n \n Review comment:\n   I'm not sure that's a good idea. `io::StdoutStream` uses the C++ `std::cout` stream.\r\n   1) it might be slow with large data\r\n   2) it might not be open in binary mode on Windows\r\n   \r\n   In any case, since the output is binary, you don't gain much by being able to display it on a terminal. The command-line should probably take an output filename instead.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T10:45:40.899+0000",
                    "updated": "2018-12-10T10:45:40.899+0000",
                    "started": "2018-12-10T10:45:40.898+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173504",
                    "issueId": "13203255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203255/worklog/173506",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #3136: [ARROW-3968]  [C++] csv-to-arrow: CLI utility tool for generating arrow files from CSV.\nURL: https://github.com/apache/arrow/pull/3136#issuecomment-445773210\n \n \n   Like @wesm I'm a bit torn on this. On the one hand this is a potential \"demo\" application with occasional use. On the other hand maintaining C++ CLI apps may not be a good use of our time.\r\n   \r\n   An alternative would be to do this in Python, if it has educational value to you. The CLI could simply be `python -m arrow.csv [arguments...]`.\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T10:51:25.846+0000",
                    "updated": "2018-12-10T10:51:25.846+0000",
                    "started": "2018-12-10T10:51:25.846+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173506",
                    "issueId": "13203255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203255/worklog/173579",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #3136: [ARROW-3968]  [C++] csv-to-arrow: CLI utility tool for generating arrow files from CSV.\nURL: https://github.com/apache/arrow/pull/3136#discussion_r240213852\n \n \n\n ##########\n File path: cpp/src/arrow/csv/csv-to-arrow.cc\n ##########\n @@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n \n Review comment:\n   We have the tools directory https://github.com/apache/arrow/tree/master/cpp/tools so this would be a good place\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T13:46:12.152+0000",
                    "updated": "2018-12-10T13:46:12.152+0000",
                    "started": "2018-12-10T13:46:12.152+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173579",
                    "issueId": "13203255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203255/worklog/175175",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mookerji commented on a change in pull request #3136: ARROW-3968: [C++] csv-to-arrow: CLI utility tool for generating arrow files from CSV.\nURL: https://github.com/apache/arrow/pull/3136#discussion_r241634425\n \n \n\n ##########\n File path: cpp/src/arrow/csv/csv-to-arrow.cc\n ##########\n @@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/csv/options.h\"\n+#include \"arrow/csv/reader.h\"\n+#include \"arrow/io/file.h\"\n+#include \"arrow/ipc/writer.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/io-util.h\"\n+\n+#include <iostream>\n+\n+#include <gflags/gflags.h>\n+\n+// CLI options and utilities\n+\n+static bool CheckPositive(const char* flagname, gflags::int32 value) {\n+  if (value > 0) return true;\n+  std::cerr << \"ERROR: -\" << flagname << \" must be > 0!\" << std::endl;\n+  return false;\n+}\n+\n+static bool CheckCharacter(const char* flagname, const std::string& value) {\n+  if (value.length() == 1) return true;\n+  std::cerr << \"ERROR: -\" << flagname << \" must be a character!\" << std::endl;\n+  return false;\n+}\n+\n+// Parsing options\n+DEFINE_string(delimiter, \",\", \"Field delimiter\");\n+DEFINE_bool(quoting, true, \"Use quoting\");\n+DEFINE_string(quote_char, \"\\\"\", \"Quoting character (if `quoting` is true)\");\n+DEFINE_bool(double_quote, true, \"Quote inside a value is double-quoted\");\n+DEFINE_bool(escaping, false, \"Use escaping\");\n+DEFINE_string(escape_char, \"\\\\\", \"Escaping character (if `escaping` is true)\");\n+DEFINE_bool(newlines_in_values, false,\n+            \"Values are allowed to contain CR (0x0d) and LF (0x0a) characters\");\n+DEFINE_bool(ignore_empty_lines, true, \"Ignore empty lines\");\n+DEFINE_int32(\n+    header_rows, 1,\n+    \"Number of header rows to skip (including the first row containing column names)\");\n+\n+DEFINE_validator(delimiter, &CheckCharacter);\n+DEFINE_validator(quote_char, &CheckCharacter);\n+DEFINE_validator(escape_char, &CheckCharacter);\n+DEFINE_validator(header_rows, &CheckPositive);\n+\n+// Conversion options\n+DEFINE_bool(check_utf8, true, \"Check UTF8 validity of string columns\");\n+\n+// Read options\n+DEFINE_bool(use_threads, true, \"Use the global CPU thread pool\");\n+DEFINE_int32(block_size, 1 << 20, \"Block size\");\n+DEFINE_validator(block_size, &CheckPositive);\n+\n+// Tool options\n+DEFINE_bool(verbose, true, \"Verbose output\");\n+\n+namespace arrow {\n+namespace csv {\n+\n+static Status InitParseOptions(ParseOptions& options) {\n+  options.delimiter = FLAGS_delimiter.at(0);\n+  options.quoting = FLAGS_quoting;\n+  options.quote_char = FLAGS_quote_char.at(0);\n+  options.double_quote = FLAGS_double_quote;\n+  options.escaping = FLAGS_escaping;\n+  options.escape_char = FLAGS_escape_char.at(0);\n+  options.newlines_in_values = FLAGS_newlines_in_values;\n+  options.ignore_empty_lines = FLAGS_ignore_empty_lines;\n+  options.header_rows = FLAGS_header_rows;\n+  return Status::OK();\n+}\n+\n+static Status InitConvertOptions(ConvertOptions& options) {\n+  options.check_utf8 = FLAGS_check_utf8;\n+  return Status::OK();\n+}\n+\n+static Status InitReadOptions(ReadOptions& options) {\n+  options.use_threads = FLAGS_use_threads;\n+  options.block_size = FLAGS_block_size;\n+  return Status::OK();\n+}\n+\n+static Status Run(int argc, char** argv) {\n+  // Instantiate and handle options\n+  gflags::SetUsageMessage(\"csv-to-arrow [FLAGS] input.csv  > output.arrow\");\n+  gflags::ParseCommandLineFlags(&argc, &argv, true);\n+  if (argc != 2) {\n+    std::cerr << \"Usage: \" << gflags::ProgramUsage() << std::endl;\n+    return Status::Invalid(\"Input filename missing\");\n+  }\n+  auto parse_options = ParseOptions::Defaults();\n+  ARROW_RETURN_NOT_OK(InitParseOptions(parse_options));\n+  auto read_options = ReadOptions::Defaults();\n+  ARROW_RETURN_NOT_OK(InitReadOptions(read_options));\n+  auto convert_options = ConvertOptions::Defaults();\n+  ARROW_RETURN_NOT_OK(InitConvertOptions(convert_options));\n+\n+  // Instantiate reading\n+  std::string input_filename(argv[1]);\n+  std::shared_ptr<io::ReadableFile> input_file;\n+  ARROW_RETURN_NOT_OK(io::ReadableFile::Open(input_filename, &input_file));\n+  auto pool = default_memory_pool();\n+  std::shared_ptr<TableReader> reader;\n+  ARROW_RETURN_NOT_OK(TableReader::Make(pool, input_file, read_options, parse_options,\n+                                        convert_options, &reader));\n+\n+  // Instantiate writing, read from input and write to output\n+  io::StdoutStream stdout;\n \n Review comment:\n   I actually hadn't considered 2, so thanks for pointing that out.\r\n   \r\n   The original motivation here was to pipe to [`stream-to-file.cc`](https://github.com/apache/arrow/blob/master/cpp/src/arrow/ipc/stream-to-file.cc) or redirect directly to a file, and I think I can just revert to the prior commit: https://github.com/apache/arrow/pull/3136/commits/3f259d55e147e86d64db398864c89a6ce186d8d3\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-14T03:18:50.945+0000",
                    "updated": "2018-12-14T03:18:50.945+0000",
                    "started": "2018-12-14T03:18:50.944+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175175",
                    "issueId": "13203255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203255/worklog/175176",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mookerji commented on a change in pull request #3136: ARROW-3968: [C++] csv-to-arrow: CLI utility tool for generating arrow files from CSV.\nURL: https://github.com/apache/arrow/pull/3136#discussion_r241634425\n \n \n\n ##########\n File path: cpp/src/arrow/csv/csv-to-arrow.cc\n ##########\n @@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/csv/options.h\"\n+#include \"arrow/csv/reader.h\"\n+#include \"arrow/io/file.h\"\n+#include \"arrow/ipc/writer.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/io-util.h\"\n+\n+#include <iostream>\n+\n+#include <gflags/gflags.h>\n+\n+// CLI options and utilities\n+\n+static bool CheckPositive(const char* flagname, gflags::int32 value) {\n+  if (value > 0) return true;\n+  std::cerr << \"ERROR: -\" << flagname << \" must be > 0!\" << std::endl;\n+  return false;\n+}\n+\n+static bool CheckCharacter(const char* flagname, const std::string& value) {\n+  if (value.length() == 1) return true;\n+  std::cerr << \"ERROR: -\" << flagname << \" must be a character!\" << std::endl;\n+  return false;\n+}\n+\n+// Parsing options\n+DEFINE_string(delimiter, \",\", \"Field delimiter\");\n+DEFINE_bool(quoting, true, \"Use quoting\");\n+DEFINE_string(quote_char, \"\\\"\", \"Quoting character (if `quoting` is true)\");\n+DEFINE_bool(double_quote, true, \"Quote inside a value is double-quoted\");\n+DEFINE_bool(escaping, false, \"Use escaping\");\n+DEFINE_string(escape_char, \"\\\\\", \"Escaping character (if `escaping` is true)\");\n+DEFINE_bool(newlines_in_values, false,\n+            \"Values are allowed to contain CR (0x0d) and LF (0x0a) characters\");\n+DEFINE_bool(ignore_empty_lines, true, \"Ignore empty lines\");\n+DEFINE_int32(\n+    header_rows, 1,\n+    \"Number of header rows to skip (including the first row containing column names)\");\n+\n+DEFINE_validator(delimiter, &CheckCharacter);\n+DEFINE_validator(quote_char, &CheckCharacter);\n+DEFINE_validator(escape_char, &CheckCharacter);\n+DEFINE_validator(header_rows, &CheckPositive);\n+\n+// Conversion options\n+DEFINE_bool(check_utf8, true, \"Check UTF8 validity of string columns\");\n+\n+// Read options\n+DEFINE_bool(use_threads, true, \"Use the global CPU thread pool\");\n+DEFINE_int32(block_size, 1 << 20, \"Block size\");\n+DEFINE_validator(block_size, &CheckPositive);\n+\n+// Tool options\n+DEFINE_bool(verbose, true, \"Verbose output\");\n+\n+namespace arrow {\n+namespace csv {\n+\n+static Status InitParseOptions(ParseOptions& options) {\n+  options.delimiter = FLAGS_delimiter.at(0);\n+  options.quoting = FLAGS_quoting;\n+  options.quote_char = FLAGS_quote_char.at(0);\n+  options.double_quote = FLAGS_double_quote;\n+  options.escaping = FLAGS_escaping;\n+  options.escape_char = FLAGS_escape_char.at(0);\n+  options.newlines_in_values = FLAGS_newlines_in_values;\n+  options.ignore_empty_lines = FLAGS_ignore_empty_lines;\n+  options.header_rows = FLAGS_header_rows;\n+  return Status::OK();\n+}\n+\n+static Status InitConvertOptions(ConvertOptions& options) {\n+  options.check_utf8 = FLAGS_check_utf8;\n+  return Status::OK();\n+}\n+\n+static Status InitReadOptions(ReadOptions& options) {\n+  options.use_threads = FLAGS_use_threads;\n+  options.block_size = FLAGS_block_size;\n+  return Status::OK();\n+}\n+\n+static Status Run(int argc, char** argv) {\n+  // Instantiate and handle options\n+  gflags::SetUsageMessage(\"csv-to-arrow [FLAGS] input.csv  > output.arrow\");\n+  gflags::ParseCommandLineFlags(&argc, &argv, true);\n+  if (argc != 2) {\n+    std::cerr << \"Usage: \" << gflags::ProgramUsage() << std::endl;\n+    return Status::Invalid(\"Input filename missing\");\n+  }\n+  auto parse_options = ParseOptions::Defaults();\n+  ARROW_RETURN_NOT_OK(InitParseOptions(parse_options));\n+  auto read_options = ReadOptions::Defaults();\n+  ARROW_RETURN_NOT_OK(InitReadOptions(read_options));\n+  auto convert_options = ConvertOptions::Defaults();\n+  ARROW_RETURN_NOT_OK(InitConvertOptions(convert_options));\n+\n+  // Instantiate reading\n+  std::string input_filename(argv[1]);\n+  std::shared_ptr<io::ReadableFile> input_file;\n+  ARROW_RETURN_NOT_OK(io::ReadableFile::Open(input_filename, &input_file));\n+  auto pool = default_memory_pool();\n+  std::shared_ptr<TableReader> reader;\n+  ARROW_RETURN_NOT_OK(TableReader::Make(pool, input_file, read_options, parse_options,\n+                                        convert_options, &reader));\n+\n+  // Instantiate writing, read from input and write to output\n+  io::StdoutStream stdout;\n \n Review comment:\n   I actually hadn't considered 2, so thanks for pointing that out.\r\n   \r\n   The original motivation here was to pipe to [`stream-to-file.cc`](https://github.com/apache/arrow/blob/master/cpp/src/arrow/ipc/stream-to-file.cc) or redirect directly to a file, and I think I can just revert to the prior commit: https://github.com/apache/arrow/pull/3136/commits/3f259d55e147e86d64db398864c89a6ce186d8d3. I didn't have performance in-mind, but I can see the benefits of using a file.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-14T03:19:47.627+0000",
                    "updated": "2018-12-14T03:19:47.627+0000",
                    "started": "2018-12-14T03:19:47.627+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175176",
                    "issueId": "13203255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203255/worklog/175177",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mookerji commented on a change in pull request #3136: ARROW-3968: [C++] csv-to-arrow: CLI utility tool for generating arrow files from CSV.\nURL: https://github.com/apache/arrow/pull/3136#discussion_r241634577\n \n \n\n ##########\n File path: cpp/src/arrow/csv/csv-to-arrow.cc\n ##########\n @@ -0,0 +1,162 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/csv/options.h\"\n+#include \"arrow/csv/reader.h\"\n+#include \"arrow/io/file.h\"\n+#include \"arrow/ipc/writer.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/io-util.h\"\n+\n+#include <iostream>\n+\n+#include <gflags/gflags.h>\n+\n+// CLI options and utilities\n+\n+static bool CheckPositive(const char* flagname, gflags::int32 value) {\n+  if (value > 0) return true;\n+  std::cerr << \"ERROR: -\" << flagname << \" must be > 0!\" << std::endl;\n+  return false;\n+}\n+\n+static bool CheckCharacter(const char* flagname, const std::string& value) {\n+  if (value.length() == 1) return true;\n+  std::cerr << \"ERROR: -\" << flagname << \" must be a character!\" << std::endl;\n+  return false;\n+}\n+\n+// Parsing options\n+DEFINE_string(delimiter, \",\", \"Field delimiter\");\n+DEFINE_bool(quoting, true, \"Use quoting\");\n+DEFINE_string(quote_char, \"\\\"\", \"Quoting character (if `quoting` is true)\");\n+DEFINE_bool(double_quote, true, \"Quote inside a value is double-quoted\");\n+DEFINE_bool(escaping, false, \"Use escaping\");\n+DEFINE_string(escape_char, \"\\\\\", \"Escaping character (if `escaping` is true)\");\n+DEFINE_bool(newlines_in_values, false,\n+            \"Values are allowed to contain CR (0x0d) and LF (0x0a) characters\");\n+DEFINE_bool(ignore_empty_lines, true, \"Ignore empty lines\");\n+DEFINE_int32(\n+    header_rows, 1,\n+    \"Number of header rows to skip (including the first row containing column names)\");\n+\n+DEFINE_validator(delimiter, &CheckCharacter);\n+DEFINE_validator(quote_char, &CheckCharacter);\n+DEFINE_validator(escape_char, &CheckCharacter);\n+DEFINE_validator(header_rows, &CheckPositive);\n+\n+// Conversion options\n+DEFINE_bool(check_utf8, true, \"Check UTF8 validity of string columns\");\n+\n+// Read options\n+DEFINE_bool(use_threads, true, \"Use the global CPU thread pool\");\n+DEFINE_int32(block_size, 1 << 20, \"Block size\");\n+DEFINE_validator(block_size, &CheckPositive);\n+\n+// Tool options\n+DEFINE_bool(verbose, true, \"Verbose output\");\n+\n+namespace arrow {\n+namespace csv {\n+\n+static Status InitParseOptions(ParseOptions& options) {\n+  options.delimiter = FLAGS_delimiter.at(0);\n+  options.quoting = FLAGS_quoting;\n+  options.quote_char = FLAGS_quote_char.at(0);\n+  options.double_quote = FLAGS_double_quote;\n+  options.escaping = FLAGS_escaping;\n+  options.escape_char = FLAGS_escape_char.at(0);\n+  options.newlines_in_values = FLAGS_newlines_in_values;\n+  options.ignore_empty_lines = FLAGS_ignore_empty_lines;\n+  options.header_rows = FLAGS_header_rows;\n+  return Status::OK();\n+}\n+\n+static Status InitConvertOptions(ConvertOptions& options) {\n+  options.check_utf8 = FLAGS_check_utf8;\n+  return Status::OK();\n+}\n+\n+static Status InitReadOptions(ReadOptions& options) {\n+  options.use_threads = FLAGS_use_threads;\n+  options.block_size = FLAGS_block_size;\n+  return Status::OK();\n+}\n+\n+static Status Run(int argc, char** argv) {\n+  // Instantiate and handle options\n+  gflags::SetUsageMessage(\"csv-to-arrow [FLAGS] input.csv  > output.arrow\");\n+  gflags::ParseCommandLineFlags(&argc, &argv, true);\n+  if (argc != 2) {\n+    std::cerr << \"Usage: \" << gflags::ProgramUsage() << std::endl;\n+    return Status::Invalid(\"Input filename missing\");\n+  }\n+  auto parse_options = ParseOptions::Defaults();\n+  ARROW_RETURN_NOT_OK(InitParseOptions(parse_options));\n+  auto read_options = ReadOptions::Defaults();\n+  ARROW_RETURN_NOT_OK(InitReadOptions(read_options));\n+  auto convert_options = ConvertOptions::Defaults();\n+  ARROW_RETURN_NOT_OK(InitConvertOptions(convert_options));\n+\n+  // Instantiate reading\n+  std::string input_filename(argv[1]);\n+  std::shared_ptr<io::ReadableFile> input_file;\n+  ARROW_RETURN_NOT_OK(io::ReadableFile::Open(input_filename, &input_file));\n+  auto pool = default_memory_pool();\n+  std::shared_ptr<TableReader> reader;\n+  ARROW_RETURN_NOT_OK(TableReader::Make(pool, input_file, read_options, parse_options,\n+                                        convert_options, &reader));\n+\n+  // Instantiate writing, read from input and write to output\n+  io::StdoutStream stdout;\n+  std::shared_ptr<ipc::RecordBatchWriter> writer;\n+  bool schema_written = false;\n+  std::shared_ptr<arrow::Table> table;\n+  while (!reader->Read(&table).IsInvalid()) {\n+    if (!schema_written) {\n+      RETURN_NOT_OK(ipc::RecordBatchFileWriter::Open(&stdout, table->schema(), &writer));\n+      schema_written = true;\n+    }\n+    std::shared_ptr<RecordBatch> batch_out;\n+    TableBatchReader table_reader(*table);\n+    while (table_reader.ReadNext(&batch_out).ok()) {\n+      if (batch_out == nullptr) {\n+        break;\n+      }\n+      ARROW_RETURN_NOT_OK(writer->WriteRecordBatch(*batch_out));\n+    }\n+  }\n+\n+  // Cleanup\n+  ARROW_RETURN_NOT_OK(writer->Close());\n+  gflags::ShutDownCommandLineFlags();\n+  return Status::OK();\n+}\n+\n+}  // namespace csv\n+}  // namespace arrow\n+\n+int main(int argc, char** argv) {\n+  arrow::Status status = arrow::csv::Run(argc, argv);\n+  if (!status.ok()) {\n+    std::cerr << \"ERROR! \" << status.ToString() << std::endl;\n \n Review comment:\n   Yep!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-14T03:20:12.776+0000",
                    "updated": "2018-12-14T03:20:12.776+0000",
                    "started": "2018-12-14T03:20:12.776+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175177",
                    "issueId": "13203255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203255/worklog/175185",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mookerji commented on issue #3136: ARROW-3968: [C++] csv-to-arrow: CLI utility tool for generating arrow files from CSV.\nURL: https://github.com/apache/arrow/pull/3136#issuecomment-447206832\n \n \n   @wesm @pitrou feedback on the details aside, it seems like a tool like this is adds clutter. One thing I could do is adapt it into test coverage for `csv::TableReader` (which doesn't seem to have any).\r\n   \r\n   Thoughts?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-14T04:07:13.403+0000",
                    "updated": "2018-12-14T04:07:13.403+0000",
                    "started": "2018-12-14T04:07:13.403+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175185",
                    "issueId": "13203255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203255/worklog/175291",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #3136: ARROW-3968: [C++] csv-to-arrow: CLI utility tool for generating arrow files from CSV.\nURL: https://github.com/apache/arrow/pull/3136#issuecomment-447300713\n \n \n   The `TableReader` is actually covered by the Python tests (in [`test_csv.py`](https://github.com/apache/arrow/blob/master/python/pyarrow/tests/test_csv.py)). I wouldn't mind basic C++ coverage, but it will probably require a non-trivial amount of code.\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-14T11:41:29.128+0000",
                    "updated": "2018-12-14T11:41:29.128+0000",
                    "started": "2018-12-14T11:41:29.128+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175291",
                    "issueId": "13203255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203255/worklog/175416",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on issue #3136: ARROW-3968: [C++] csv-to-arrow: CLI utility tool for generating arrow files from CSV.\nURL: https://github.com/apache/arrow/pull/3136#issuecomment-447366908\n \n \n   Re: CLI maintenance @pitrou \r\n   \r\n   Could we have an official tools repository? If they were not versioned alongside the rest of Arrow then we could pin them to a specific arrow release which would reduce maintenance overhead some.\r\n   \r\n   We could either include a slot for it in arrow/cpp's existing build system ala clang-extra-tools, or roll a new one which uses the installed arrow api. In the latter case it would not only be a set of useful demo applications, it could be a handy template (maybe even a seed project) for new developers trying to get started with Arrow\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-14T15:55:51.963+0000",
                    "updated": "2018-12-14T15:55:51.963+0000",
                    "started": "2018-12-14T15:55:51.962+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175416",
                    "issueId": "13203255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203255/worklog/175444",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #3136: ARROW-3968: [C++] csv-to-arrow: CLI utility tool for generating arrow files from CSV.\nURL: https://github.com/apache/arrow/pull/3136#issuecomment-447380609\n \n \n   I don't really have an opinion on the topic of tools, perhaps @wesm wants to chime in.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-14T16:39:49.789+0000",
                    "updated": "2018-12-14T16:39:49.789+0000",
                    "started": "2018-12-14T16:39:49.787+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175444",
                    "issueId": "13203255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203255/worklog/175453",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3136: ARROW-3968: [C++] csv-to-arrow: CLI utility tool for generating arrow files from CSV.\nURL: https://github.com/apache/arrow/pull/3136#issuecomment-447385332\n \n \n   > Could we have an official tools repository? \r\n   \r\n   IMHO this would just add more maintenance burden. More releases to make, versions to keep in sync. I would not be in favor of it\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-14T16:55:50.164+0000",
                    "updated": "2018-12-14T16:55:50.164+0000",
                    "started": "2018-12-14T16:55:50.164+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175453",
                    "issueId": "13203255"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 13200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@62e1f63[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@17947ce0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@324e0ca1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6090574[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@b930ea9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@21e65695[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@638f6d0c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2de3f6ac[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e1643ff[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2dd7f856[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@35a817ed[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@74cc162[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13200,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Dec 26 20:19:13 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-12-26T20:19:13.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3968/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-12-09T07:27:11.000+0000",
        "updated": "2018-12-26T20:19:13.000+0000",
        "timeoriginalestimate": null,
        "description": "As part of exploring the Arrow C++ implementation, I wrote standalone tool for\u00a0streaming Arrow to a file from CSV, using the new CSV parser implementation from [~pitrou]. I realize that Arrow's emphasis is on in-memory representation, as opposed to efficient storage to disk, so I'd love to know if this has any utility for the project. At the very least, it seems like a quick way to get into exploring the format from a something easily inspectable/familiar (i.e., CSV).\r\n\r\nIn either case, I'm making this issue here as a placeholder for an accompanying PR on Github. Also, I think this is my first issue for this project, so please let me know if I should do anything differently.\r\n\r\n\u00a0\r\n\r\nPR is now available at:\u00a0https://github.com/apache/arrow/pull/3136",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "Standalone CSV to Arrow Conversion Tool",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": "https://github.com/apache/arrow/pull/3136",
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203255/comment/16729173",
                    "id": "16729173",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=mookerji",
                        "name": "mookerji",
                        "key": "mookerji",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34051",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34051",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34051",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34051"
                        },
                        "displayName": "Bhaskar Mookerji",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "See discussion\u00a0around adding C++ CLI tools in https://github.com/apache/arrow/pull/3136.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=mookerji",
                        "name": "mookerji",
                        "key": "mookerji",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34051",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34051",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34051",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34051"
                        },
                        "displayName": "Bhaskar Mookerji",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2018-12-26T20:19:13.112+0000",
                    "updated": "2018-12-26T20:19:13.112+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|s01bhs:",
        "customfield_12314139": null
    }
}