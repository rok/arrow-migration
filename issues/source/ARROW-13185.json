{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13385864",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385864",
    "key": "ARROW-13185",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fionala",
            "name": "fionala",
            "key": "fionala",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Fiona La",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334213",
                "id": "12334213",
                "name": "MATLAB"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sgilmore",
            "name": "sgilmore",
            "key": "sgilmore",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Sarah Gilmore",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sgilmore",
            "name": "sgilmore",
            "key": "sgilmore",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Sarah Gilmore",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 19200,
            "total": 19200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 19200,
            "total": 19200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13185/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 32,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385864/worklog/698977",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lafiona opened a new pull request #12004:\nURL: https://github.com/apache/arrow/pull/12004\n\n\n   ## Overview\r\n   \r\n   This pull request implements a more scalable and sustainable approach to organizing the C++ functionality that needs to be exposed to MATLAB. It adds a new singular MEX gateway function, `mexfcn('<cpp-function-name>', <cpp-function-argument-1>, ..., <cpp-function-argument-N>)`, which delegates to specific C++ functions. To make use of `mexfcn`, the directory containing `mexfcn.<mex-extension>` must be added to the MATLAB path. \r\n   \r\n   Advantages to this approach:\r\n   - Organization\r\n       - All C++ functions that are exposed to MATLAB are registered in one location\r\n       - Reduce the complexity of managing and linking many MEX files and ensuring that they are added to the MATLAB path\r\n       - Reduce cognitive load for adding new functions\r\n   - Avoid polluting the source tree with build artifacts\r\n   - Reduce build times, building a single MEX function is faster than building potentially hundreds\r\n   - Reduce binary bloat caused by creating a separate MEX file for every MEX function\r\n   - Enable flexibility in terms of where C++ implementation files live\r\n   \r\n   ## Implementation\r\n   \r\n   1. One MEX function, `mexfcn`, defined in `matlab/src/cpp/arrow/matlab/mex/mex_util.h`, dispatches to individual C++ implementation files. \r\n   \r\n   For example, to invoke featherread functionality from MATLAB, that is implemented in C++:\r\n   \r\n   ``` matlab\r\n   >> [variables, metadata] = mexfcn('featherread', 'featherfile.feather');\r\n   ```\r\n   \r\n   2. Functionality implemented in C++ that we want to expose in MATLAB is registered in a function map in the file `matlab/src/cpp/arrow/matlab/mex/mex_functions.h`.\r\n   3. Restructured source tree layout and performed general code clean up in preparation for feature implementation work:\r\n     3.1. Split source code to matlab/src/matlab and matlab/src/cpp\r\n     3.2 Make packages, namespaces, and directories consistent in terms of naming and hierarchy for simplifying navigation and header inclusion.\r\n     3.3 Renamed the MATLAB package name `mlarrow` to `arrow` as the `ml` is superfluous.\r\n   4. Refactored `matlab/CMakeLists.txt`:\r\n     4.1. Build shared library, `arrow_matlab`, that contains C++ functionality for the interface.\r\n     4.2. macOS: explicitly add the path of `arrow` to the `rpath` of `arrow_matlab`, as paths of libraries output by imported targets are not automatically included.\r\n     4.3. Windows:\r\n       - Copy shared libraries to the location of the MEX function, `mexfcn`, including `gtest.dll` and `gtest_main.dll` when building C++ tests.\r\n        - Add the path to MATLAB to the ctest `ENVIRONMENT` when building tests.\r\n        - Specify the release version of MSVC Runtime Libraries for all targets created in the CMake file.\r\n   \r\n   ## Testing\r\n   \r\n   Qualified `CMakeLists.txt` changes by building and running all tests:\r\n     - On Windows 10 (Ninja and Visual Studio), macOS 11.5 (Make and Ninja), and Debian 10 (Make and Ninja)\r\n     - Configurations: build both Arrow and GTest, use provided `ARROW_HOME`, use provided `GTEST_ROOT`, use both `ARROW_HOME` and `GTEST_ROOT`.\r\n   \r\n   ## Future Directions\r\n   1. Currently, users on macOS can use Arrow and GTest binaries that were built independently, but they cannot relocate the Arrow and GTest binaries built via the MATLAB Interface build system and reuse them. On macOS, shared libraries contain the paths of linked libraries, therefore, relocating them invalidates the libraries' `rpath` entries. On Windows and Linux, a user can:\r\n       - Build Arrow and GTest binaries in the MATLAB Interface build system\r\n       - Move those binaries to a separate location outside of the build tree\r\n       - Use those binaries for subsequent builds, pointing to them using `ARROW_HOME` and `GTEST_ROOT`\r\n   2. Investigate why the default CMake behavior does not link the test executables against the correct MSVC Runtime libraries (ie. `ucrtbase.dll` versus `ucrtbased.dll`) when building with Ninja on Windows. \r\n   3. Add support for specifying function names and arguments as MATLAB strings to `mexfcn`. Currently, only character vectors are supported. \r\n   4. Refactor `mexfcn` to use [MATLAB Data Arrays](https://uk.mathworks.com/help/matlab/matlab-data-array.html) (MDAs) and [C++ Mex](https://uk.mathworks.com/help/matlab/cpp-mex-file-applications.html).\r\n   5. For multi-configuration generators, the binaries are built into a subdirectory indicating the build configuration. `CMakeLists.txt` currently creates a text file, `is_multi_config.txt`, that lists the configuration used. The next step is to utilize this configuration text file in the MATLAB tests to ensure they are able to find the MEX file. \r\n   \r\n   \r\n   ## Notes\r\n   1. Thank you for all of your help on this pull request, @sgilmore10 and @kevingurney!\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-20T21:00:26.024+0000",
                    "updated": "2021-12-20T21:00:26.024+0000",
                    "started": "2021-12-20T21:00:26.024+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698977",
                    "issueId": "13385864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385864/worklog/698978",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12004:\nURL: https://github.com/apache/arrow/pull/12004#issuecomment-998265178\n\n\n   https://issues.apache.org/jira/browse/ARROW-13185\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-20T21:00:38.824+0000",
                    "updated": "2021-12-20T21:00:38.824+0000",
                    "started": "2021-12-20T21:00:38.824+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698978",
                    "issueId": "13385864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385864/worklog/698982",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lafiona commented on pull request #12004:\nURL: https://github.com/apache/arrow/pull/12004#issuecomment-998274106\n\n\n   I apologize for the size of this pull request. We found it tricky to partition our changes into separate pull requests as they involved modifying the build system and refactoring the structure of the source files. However, in the future, our goal is to submit smaller, more incremental pull requests to reflect more isolated changes. \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-20T21:13:46.491+0000",
                    "updated": "2021-12-20T21:13:46.491+0000",
                    "started": "2021-12-20T21:13:46.491+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698982",
                    "issueId": "13385864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385864/worklog/698993",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #12004:\nURL: https://github.com/apache/arrow/pull/12004#discussion_r772680972\n\n\n\n##########\nFile path: matlab/CMakeLists.txt\n##########\n@@ -212,56 +233,150 @@ if(MATLAB_BUILD_TESTS)\n     # C++ libraries that are built from source.\n     build_arrow(BUILD_GTEST)\n   else()\n+    # GTest is found, on Windows, IMPORTED_LOCATION needs to be set to indicate where the shared\n+    # libraries live\n+    if(WIN32)\n+      set(GTEST_SHARED_LIB_DIR \"${GTEST_ROOT}/bin\")\n+      set(GTEST_SHARED_LIBRARY_FILENAME\n+          \"${CMAKE_SHARED_LIBRARY_PREFIX}gtest${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n+      set(GTEST_SHARED_LIBRARY_LIB\n+          \"${GTEST_SHARED_LIB_DIR}/${GTEST_SHARED_LIBRARY_FILENAME}\")\n+\n+      set(GTEST_MAIN_SHARED_LIB_DIR \"${GTEST_ROOT}/bin\")\n+      set(GTEST_MAIN_SHARED_LIBRARY_FILENAME\n+          \"${CMAKE_SHARED_LIBRARY_PREFIX}gtest_main${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n+      set(GTEST_MAIN_SHARED_LIBRARY_LIB\n+          \"${GTEST_MAIN_SHARED_LIB_DIR}/${GTEST_MAIN_SHARED_LIBRARY_FILENAME}\")\n+\n+      set_target_properties(GTest::gtest PROPERTIES IMPORTED_LOCATION\n+                                                    \"${GTEST_SHARED_LIBRARY_LIB}\")\n+\n+      set_target_properties(GTest::gtest_main\n+                            PROPERTIES IMPORTED_LOCATION\n+                                       \"${GTEST_MAIN_SHARED_LIBRARY_LIB}\")\n+    endif()\n+\n     find_package(Arrow)\n     if(NOT Arrow_FOUND)\n       # Trigger an automatic build of the Arrow C++ libraries.\n       build_arrow()\n     endif()\n   endif()\n+\n+  # On Windows: copy the gtest and gtest_main runtime DLLs into the directory where the\n+  # MATLAB C++ tests reside, since Windows require runtime DLLs that are depended on by\n+  # executables to be in the same directory (or on the %PATH%).\n+  if(WIN32)\n+    set(MATLAB_TESTS_DIR \"${MATLAB_BUILD_OUTPUT_DIR}\")\n+\n+    get_property(GTEST_SHARED_LIB\n+                 TARGET GTest::gtest\n+                 PROPERTY IMPORTED_LOCATION)\n+\n+    get_property(GTEST_MAIN_SHARED_LIB\n+                 TARGET GTest::gtest_main\n+                 PROPERTY IMPORTED_LOCATION)\n+\n+    add_custom_target(copy_gtest_to_tests_dir ALL\n\nReview comment:\n       I don't try this but is this target always run even when GTest files aren't rebuilt?\r\n   Can we use `BYPRODUCTS` and `DEPENDS` to prevent needless execution?\n\n##########\nFile path: matlab/CMakeLists.txt\n##########\n@@ -212,56 +233,150 @@ if(MATLAB_BUILD_TESTS)\n     # C++ libraries that are built from source.\n     build_arrow(BUILD_GTEST)\n   else()\n+    # GTest is found, on Windows, IMPORTED_LOCATION needs to be set to indicate where the shared\n+    # libraries live\n+    if(WIN32)\n+      set(GTEST_SHARED_LIB_DIR \"${GTEST_ROOT}/bin\")\n+      set(GTEST_SHARED_LIBRARY_FILENAME\n+          \"${CMAKE_SHARED_LIBRARY_PREFIX}gtest${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n+      set(GTEST_SHARED_LIBRARY_LIB\n+          \"${GTEST_SHARED_LIB_DIR}/${GTEST_SHARED_LIBRARY_FILENAME}\")\n+\n+      set(GTEST_MAIN_SHARED_LIB_DIR \"${GTEST_ROOT}/bin\")\n+      set(GTEST_MAIN_SHARED_LIBRARY_FILENAME\n+          \"${CMAKE_SHARED_LIBRARY_PREFIX}gtest_main${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n+      set(GTEST_MAIN_SHARED_LIBRARY_LIB\n+          \"${GTEST_MAIN_SHARED_LIB_DIR}/${GTEST_MAIN_SHARED_LIBRARY_FILENAME}\")\n+\n+      set_target_properties(GTest::gtest PROPERTIES IMPORTED_LOCATION\n+                                                    \"${GTEST_SHARED_LIBRARY_LIB}\")\n+\n+      set_target_properties(GTest::gtest_main\n+                            PROPERTIES IMPORTED_LOCATION\n+                                       \"${GTEST_MAIN_SHARED_LIBRARY_LIB}\")\n+    endif()\n+\n     find_package(Arrow)\n     if(NOT Arrow_FOUND)\n       # Trigger an automatic build of the Arrow C++ libraries.\n       build_arrow()\n     endif()\n   endif()\n+\n+  # On Windows: copy the gtest and gtest_main runtime DLLs into the directory where the\n+  # MATLAB C++ tests reside, since Windows require runtime DLLs that are depended on by\n+  # executables to be in the same directory (or on the %PATH%).\n+  if(WIN32)\n+    set(MATLAB_TESTS_DIR \"${MATLAB_BUILD_OUTPUT_DIR}\")\n+\n+    get_property(GTEST_SHARED_LIB\n+                 TARGET GTest::gtest\n+                 PROPERTY IMPORTED_LOCATION)\n+\n+    get_property(GTEST_MAIN_SHARED_LIB\n+                 TARGET GTest::gtest_main\n+                 PROPERTY IMPORTED_LOCATION)\n+\n+    add_custom_target(copy_gtest_to_tests_dir ALL\n+                      COMMAND ${CMAKE_COMMAND} -E make_directory ${MATLAB_TESTS_DIR}\n+                      COMMAND ${CMAKE_COMMAND} -E copy_if_different ${GTEST_SHARED_LIB}\n+                              ${MATLAB_TESTS_DIR}\n+                      COMMAND ${CMAKE_COMMAND} -E copy_if_different\n+                              ${GTEST_MAIN_SHARED_LIB} ${MATLAB_TESTS_DIR}\n+                      COMMENT \"Start copying gtest dlls from ${GTEST_SHARED_LIB} to ${MATLAB_TESTS_DIR} and ${GTEST_MAIN_SHARED_LIB} to ${MATLAB_TESTS_DIR}\"\n+    )\n+    add_dependencies(copy_gtest_to_tests_dir GTest::gtest)\n+    add_dependencies(copy_gtest_to_tests_dir GTest::gtest_main)\n+  endif()\n+\n else()\n   find_package(Arrow)\n   if(NOT Arrow_FOUND)\n     build_arrow()\n   endif()\n endif()\n \n+# On Windows: copy arrow.dll into the directory where the MATLAB C++ tests reside,\n+# since Windows require runtime DLLs that are depended on by executables to be in\n+# the same directory (or on the %PATH%).\n+if(WIN32)\n+  get_property(ARROW_SHARED_LIB\n+               TARGET arrow_shared\n+               PROPERTY IMPORTED_LOCATION)\n+\n+  add_custom_target(copy_arrow_to_build_output_dir ALL\n+                    COMMAND ${CMAKE_COMMAND} -E make_directory ${MATLAB_BUILD_OUTPUT_DIR}\n+                    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${ARROW_SHARED_LIB}\n+                            ${MATLAB_BUILD_OUTPUT_DIR}\n+                    COMMENT \"Start copying arrow.dll from ${ARROW_SHARED_LIB} to ${MATLAB_BUILD_OUTPUT_DIR}\"\n+  )\n+  add_dependencies(copy_arrow_to_build_output_dir arrow_shared)\n+endif()\n+\n # MATLAB is Required\n find_package(Matlab REQUIRED)\n \n-# Construct the absolute path to featherread's source files\n-set(featherread_sources featherreadmex.cc feather_reader.cc util/handle_status.cc\n-                        util/unicode_conversion.cc)\n-list(TRANSFORM featherread_sources PREPEND ${CMAKE_SOURCE_DIR}/src/)\n-\n-# Build featherreadmex MEX binary\n-matlab_add_mex(R2018a\n-               NAME featherreadmex\n-               SRC ${featherread_sources}\n-               LINK_TO arrow_shared)\n+message(STATUS \"Mex Library: ${Matlab_MEX_LIBRARY}\")\n+message(STATUS \"Mex Include Folder: ${Matlab_INCLUDE_DIRS}\")\n+\n+set(CPP_SOURCE_DIR ${CMAKE_SOURCE_DIR}/src/cpp)\n+set(MATLAB_SOURCE_DIR ${CMAKE_SOURCE_DIR}/src/cpp/arrow/matlab)\n+\n+set(arrow_matlab_sources\n+    mex/mex_util.cc\n+    feather/feather_reader.cc\n+    feather/feather_writer.cc\n+    feather/feather_functions.cc\n+    feather/util/handle_status.cc\n+    feather/util/unicode_conversion.cc)\n+list(TRANSFORM arrow_matlab_sources PREPEND ${CPP_SOURCE_DIR}/arrow/matlab/)\n+\n+add_library(arrow_matlab SHARED ${arrow_matlab_sources})\n+\n+# Declare a dependency on arrow_shared (libarrow.so/dylib/dll).\n+target_link_libraries(arrow_matlab arrow_shared)\n+\n+# On macOS, rpaths for linking imported targets are not automatically added to linked libraries\n+if(APPLE)\n+  get_property(ARROW_SHARED_IMPORTED_LOCATION\n+               TARGET arrow_shared\n+               PROPERTY IMPORTED_LOCATION)\n+  get_filename_component(ARROW_SHARED_LIBRARY_DIR ${ARROW_SHARED_IMPORTED_LOCATION}\n+                         DIRECTORY)\n+  target_link_options(arrow_matlab PUBLIC -Wl,-rpath,${ARROW_SHARED_LIBRARY_DIR})\n+endif()\n \n-# Construct the absolute path to featherwrite's source files\n-set(featherwrite_sources featherwritemex.cc feather_writer.cc util/handle_status.cc\n-                         util/unicode_conversion.cc)\n-list(TRANSFORM featherwrite_sources PREPEND ${CMAKE_SOURCE_DIR}/src/)\n+# Declare a dependency on the MEX shared library (libmex.so/dylib/dll).\n+target_link_libraries(arrow_matlab ${Matlab_MX_LIBRARY})\n+target_link_libraries(arrow_matlab ${Matlab_MEX_LIBRARY})\n+\n+# Include the MATLAB MEX headers.\n+target_include_directories(arrow_matlab PRIVATE ${Matlab_INCLUDE_DIRS})\n+target_include_directories(arrow_matlab PRIVATE ${CPP_SOURCE_DIR})\n+target_include_directories(arrow_matlab PRIVATE ${ARROW_INCLUDE_DIR})\n+target_compile_definitions(arrow_matlab PRIVATE ARROW_MATLAB_EXPORTING)\n+\n+set(mexfcn_sources mex/mexfcn.cc)\n+list(TRANSFORM mexfcn_sources PREPEND ${CPP_SOURCE_DIR}/arrow/matlab/)\n+\n+# Store the CMake Configuration Type for multi-configuration generators so\n+# that we can reference it later to automatically add the correct build\n+# folder to the MATLAB Search Path\n+get_property(is_multi_config GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\n+if(is_multi_config)\n+  add_custom_command(TARGET arrow_matlab\n+                     POST_BUILD\n+                     COMMAND \"${CMAKE_COMMAND}\" -E echo $<CONFIG> >\n+                             ${CMAKE_BINARY_DIR}/is_multi_config.txt)\n+endif()\n\nReview comment:\n       Can we deffer this to a follow-up pull request to reduce changes in this pull request?\n\n##########\nFile path: matlab/CMakeLists.txt\n##########\n@@ -273,10 +388,35 @@ if(MATLAB_BUILD_TESTS)\n   # Define a test executable target. TODO: Remove the placeholder test. This is\n   # just for testing GoogleTest integration.\n   add_executable(placeholder_test ${CMAKE_SOURCE_DIR}/src/placeholder_test.cc)\n+  add_executable(mex_util_test ${CPP_SOURCE_DIR}/arrow/matlab/mex/mex_util_test.cc)\n+\n   # Declare a dependency on the GTest::gtest and GTest::gtest_main IMPORTED\n   # targets.\n   target_link_libraries(placeholder_test GTest::gtest GTest::gtest_main)\n \n+  # Declare a dependency on the GTest::gtest and GTest::gtest_main IMPORTED\n+  # targets.\n+  target_link_libraries(mex_util_test GTest::gtest GTest::gtest_main)\n+  target_link_libraries(mex_util_test arrow_matlab)\n+\n+  # Include the MATLAB MEX headers.\n+  target_include_directories(mex_util_test PRIVATE ${Matlab_INCLUDE_DIRS})\n+  # Include the C++ source headers.\n+  target_include_directories(mex_util_test PRIVATE ${CPP_SOURCE_DIR})\n+\n   # Add a test target.\n   add_test(PlaceholderTestTarget placeholder_test)\n+  add_test(CheckNumArgsTestTarget mex_util_test)\n+\n+  # For Windows: add the directory of libmx.dll and libmex.dll to the %PATH% for\n+  # running CheckNumArgsTestTarget\n+  # Note: When appending to the path using set_test_properties' ENVIRONNENT property,\n+  #       make sure that we escape ';' to avoid cmake from interpreting the input as\n+  #       a list of strings.\n+  if(WIN32)\n+    set(MATLAB_DLL_DEPENDENCIES_DIR \"${Matlab_ROOT_DIR}/bin/win64\")\n+    set_tests_properties(CheckNumArgsTestTarget\n+                         PROPERTIES ENVIRONMENT\n+                                    \"PATH=${MATLAB_DLL_DEPENDENCIES_DIR}\\;$ENV{PATH}\")\n\nReview comment:\n       How about using `%PATH%` for GTest too instead of copying GTest files? \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-20T21:51:43.153+0000",
                    "updated": "2021-12-20T21:51:43.153+0000",
                    "started": "2021-12-20T21:51:43.153+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698993",
                    "issueId": "13385864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385864/worklog/700276",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lafiona commented on a change in pull request #12004:\nURL: https://github.com/apache/arrow/pull/12004#discussion_r774191805\n\n\n\n##########\nFile path: matlab/CMakeLists.txt\n##########\n@@ -212,56 +233,150 @@ if(MATLAB_BUILD_TESTS)\n     # C++ libraries that are built from source.\n     build_arrow(BUILD_GTEST)\n   else()\n+    # GTest is found, on Windows, IMPORTED_LOCATION needs to be set to indicate where the shared\n+    # libraries live\n+    if(WIN32)\n+      set(GTEST_SHARED_LIB_DIR \"${GTEST_ROOT}/bin\")\n+      set(GTEST_SHARED_LIBRARY_FILENAME\n+          \"${CMAKE_SHARED_LIBRARY_PREFIX}gtest${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n+      set(GTEST_SHARED_LIBRARY_LIB\n+          \"${GTEST_SHARED_LIB_DIR}/${GTEST_SHARED_LIBRARY_FILENAME}\")\n+\n+      set(GTEST_MAIN_SHARED_LIB_DIR \"${GTEST_ROOT}/bin\")\n+      set(GTEST_MAIN_SHARED_LIBRARY_FILENAME\n+          \"${CMAKE_SHARED_LIBRARY_PREFIX}gtest_main${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n+      set(GTEST_MAIN_SHARED_LIBRARY_LIB\n+          \"${GTEST_MAIN_SHARED_LIB_DIR}/${GTEST_MAIN_SHARED_LIBRARY_FILENAME}\")\n+\n+      set_target_properties(GTest::gtest PROPERTIES IMPORTED_LOCATION\n+                                                    \"${GTEST_SHARED_LIBRARY_LIB}\")\n+\n+      set_target_properties(GTest::gtest_main\n+                            PROPERTIES IMPORTED_LOCATION\n+                                       \"${GTEST_MAIN_SHARED_LIBRARY_LIB}\")\n+    endif()\n+\n     find_package(Arrow)\n     if(NOT Arrow_FOUND)\n       # Trigger an automatic build of the Arrow C++ libraries.\n       build_arrow()\n     endif()\n   endif()\n+\n+  # On Windows: copy the gtest and gtest_main runtime DLLs into the directory where the\n+  # MATLAB C++ tests reside, since Windows require runtime DLLs that are depended on by\n+  # executables to be in the same directory (or on the %PATH%).\n+  if(WIN32)\n+    set(MATLAB_TESTS_DIR \"${MATLAB_BUILD_OUTPUT_DIR}\")\n+\n+    get_property(GTEST_SHARED_LIB\n+                 TARGET GTest::gtest\n+                 PROPERTY IMPORTED_LOCATION)\n+\n+    get_property(GTEST_MAIN_SHARED_LIB\n+                 TARGET GTest::gtest_main\n+                 PROPERTY IMPORTED_LOCATION)\n+\n+    add_custom_target(copy_gtest_to_tests_dir ALL\n\nReview comment:\n       This piece of code is not necessary anymore after adding the path of the shared libraries to the test environment path. \n\n##########\nFile path: matlab/CMakeLists.txt\n##########\n@@ -212,56 +233,150 @@ if(MATLAB_BUILD_TESTS)\n     # C++ libraries that are built from source.\n     build_arrow(BUILD_GTEST)\n   else()\n+    # GTest is found, on Windows, IMPORTED_LOCATION needs to be set to indicate where the shared\n+    # libraries live\n+    if(WIN32)\n+      set(GTEST_SHARED_LIB_DIR \"${GTEST_ROOT}/bin\")\n+      set(GTEST_SHARED_LIBRARY_FILENAME\n+          \"${CMAKE_SHARED_LIBRARY_PREFIX}gtest${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n+      set(GTEST_SHARED_LIBRARY_LIB\n+          \"${GTEST_SHARED_LIB_DIR}/${GTEST_SHARED_LIBRARY_FILENAME}\")\n+\n+      set(GTEST_MAIN_SHARED_LIB_DIR \"${GTEST_ROOT}/bin\")\n+      set(GTEST_MAIN_SHARED_LIBRARY_FILENAME\n+          \"${CMAKE_SHARED_LIBRARY_PREFIX}gtest_main${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n+      set(GTEST_MAIN_SHARED_LIBRARY_LIB\n+          \"${GTEST_MAIN_SHARED_LIB_DIR}/${GTEST_MAIN_SHARED_LIBRARY_FILENAME}\")\n+\n+      set_target_properties(GTest::gtest PROPERTIES IMPORTED_LOCATION\n+                                                    \"${GTEST_SHARED_LIBRARY_LIB}\")\n+\n+      set_target_properties(GTest::gtest_main\n+                            PROPERTIES IMPORTED_LOCATION\n+                                       \"${GTEST_MAIN_SHARED_LIBRARY_LIB}\")\n+    endif()\n+\n     find_package(Arrow)\n     if(NOT Arrow_FOUND)\n       # Trigger an automatic build of the Arrow C++ libraries.\n       build_arrow()\n     endif()\n   endif()\n+\n+  # On Windows: copy the gtest and gtest_main runtime DLLs into the directory where the\n+  # MATLAB C++ tests reside, since Windows require runtime DLLs that are depended on by\n+  # executables to be in the same directory (or on the %PATH%).\n+  if(WIN32)\n+    set(MATLAB_TESTS_DIR \"${MATLAB_BUILD_OUTPUT_DIR}\")\n+\n+    get_property(GTEST_SHARED_LIB\n+                 TARGET GTest::gtest\n+                 PROPERTY IMPORTED_LOCATION)\n+\n+    get_property(GTEST_MAIN_SHARED_LIB\n+                 TARGET GTest::gtest_main\n+                 PROPERTY IMPORTED_LOCATION)\n+\n+    add_custom_target(copy_gtest_to_tests_dir ALL\n+                      COMMAND ${CMAKE_COMMAND} -E make_directory ${MATLAB_TESTS_DIR}\n+                      COMMAND ${CMAKE_COMMAND} -E copy_if_different ${GTEST_SHARED_LIB}\n+                              ${MATLAB_TESTS_DIR}\n+                      COMMAND ${CMAKE_COMMAND} -E copy_if_different\n+                              ${GTEST_MAIN_SHARED_LIB} ${MATLAB_TESTS_DIR}\n+                      COMMENT \"Start copying gtest dlls from ${GTEST_SHARED_LIB} to ${MATLAB_TESTS_DIR} and ${GTEST_MAIN_SHARED_LIB} to ${MATLAB_TESTS_DIR}\"\n+    )\n+    add_dependencies(copy_gtest_to_tests_dir GTest::gtest)\n+    add_dependencies(copy_gtest_to_tests_dir GTest::gtest_main)\n+  endif()\n+\n else()\n   find_package(Arrow)\n   if(NOT Arrow_FOUND)\n     build_arrow()\n   endif()\n endif()\n \n+# On Windows: copy arrow.dll into the directory where the MATLAB C++ tests reside,\n+# since Windows require runtime DLLs that are depended on by executables to be in\n+# the same directory (or on the %PATH%).\n+if(WIN32)\n+  get_property(ARROW_SHARED_LIB\n+               TARGET arrow_shared\n+               PROPERTY IMPORTED_LOCATION)\n+\n+  add_custom_target(copy_arrow_to_build_output_dir ALL\n+                    COMMAND ${CMAKE_COMMAND} -E make_directory ${MATLAB_BUILD_OUTPUT_DIR}\n+                    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${ARROW_SHARED_LIB}\n+                            ${MATLAB_BUILD_OUTPUT_DIR}\n+                    COMMENT \"Start copying arrow.dll from ${ARROW_SHARED_LIB} to ${MATLAB_BUILD_OUTPUT_DIR}\"\n+  )\n+  add_dependencies(copy_arrow_to_build_output_dir arrow_shared)\n+endif()\n+\n # MATLAB is Required\n find_package(Matlab REQUIRED)\n \n-# Construct the absolute path to featherread's source files\n-set(featherread_sources featherreadmex.cc feather_reader.cc util/handle_status.cc\n-                        util/unicode_conversion.cc)\n-list(TRANSFORM featherread_sources PREPEND ${CMAKE_SOURCE_DIR}/src/)\n-\n-# Build featherreadmex MEX binary\n-matlab_add_mex(R2018a\n-               NAME featherreadmex\n-               SRC ${featherread_sources}\n-               LINK_TO arrow_shared)\n+message(STATUS \"Mex Library: ${Matlab_MEX_LIBRARY}\")\n+message(STATUS \"Mex Include Folder: ${Matlab_INCLUDE_DIRS}\")\n+\n+set(CPP_SOURCE_DIR ${CMAKE_SOURCE_DIR}/src/cpp)\n+set(MATLAB_SOURCE_DIR ${CMAKE_SOURCE_DIR}/src/cpp/arrow/matlab)\n+\n+set(arrow_matlab_sources\n+    mex/mex_util.cc\n+    feather/feather_reader.cc\n+    feather/feather_writer.cc\n+    feather/feather_functions.cc\n+    feather/util/handle_status.cc\n+    feather/util/unicode_conversion.cc)\n+list(TRANSFORM arrow_matlab_sources PREPEND ${CPP_SOURCE_DIR}/arrow/matlab/)\n+\n+add_library(arrow_matlab SHARED ${arrow_matlab_sources})\n+\n+# Declare a dependency on arrow_shared (libarrow.so/dylib/dll).\n+target_link_libraries(arrow_matlab arrow_shared)\n+\n+# On macOS, rpaths for linking imported targets are not automatically added to linked libraries\n+if(APPLE)\n+  get_property(ARROW_SHARED_IMPORTED_LOCATION\n+               TARGET arrow_shared\n+               PROPERTY IMPORTED_LOCATION)\n+  get_filename_component(ARROW_SHARED_LIBRARY_DIR ${ARROW_SHARED_IMPORTED_LOCATION}\n+                         DIRECTORY)\n+  target_link_options(arrow_matlab PUBLIC -Wl,-rpath,${ARROW_SHARED_LIBRARY_DIR})\n+endif()\n \n-# Construct the absolute path to featherwrite's source files\n-set(featherwrite_sources featherwritemex.cc feather_writer.cc util/handle_status.cc\n-                         util/unicode_conversion.cc)\n-list(TRANSFORM featherwrite_sources PREPEND ${CMAKE_SOURCE_DIR}/src/)\n+# Declare a dependency on the MEX shared library (libmex.so/dylib/dll).\n+target_link_libraries(arrow_matlab ${Matlab_MX_LIBRARY})\n+target_link_libraries(arrow_matlab ${Matlab_MEX_LIBRARY})\n+\n+# Include the MATLAB MEX headers.\n+target_include_directories(arrow_matlab PRIVATE ${Matlab_INCLUDE_DIRS})\n+target_include_directories(arrow_matlab PRIVATE ${CPP_SOURCE_DIR})\n+target_include_directories(arrow_matlab PRIVATE ${ARROW_INCLUDE_DIR})\n+target_compile_definitions(arrow_matlab PRIVATE ARROW_MATLAB_EXPORTING)\n+\n+set(mexfcn_sources mex/mexfcn.cc)\n+list(TRANSFORM mexfcn_sources PREPEND ${CPP_SOURCE_DIR}/arrow/matlab/)\n+\n+# Store the CMake Configuration Type for multi-configuration generators so\n+# that we can reference it later to automatically add the correct build\n+# folder to the MATLAB Search Path\n+get_property(is_multi_config GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\n+if(is_multi_config)\n+  add_custom_command(TARGET arrow_matlab\n+                     POST_BUILD\n+                     COMMAND \"${CMAKE_COMMAND}\" -E echo $<CONFIG> >\n+                             ${CMAKE_BINARY_DIR}/is_multi_config.txt)\n+endif()\n\nReview comment:\n       This makes sense to me! I have removed the code to create `is_multi_config.txt`. And I will add it in a future pull request for [ARROW-15182](https://issues.apache.org/jira/browse/ARROW-15182).\n\n##########\nFile path: matlab/CMakeLists.txt\n##########\n@@ -273,10 +388,35 @@ if(MATLAB_BUILD_TESTS)\n   # Define a test executable target. TODO: Remove the placeholder test. This is\n   # just for testing GoogleTest integration.\n   add_executable(placeholder_test ${CMAKE_SOURCE_DIR}/src/placeholder_test.cc)\n+  add_executable(mex_util_test ${CPP_SOURCE_DIR}/arrow/matlab/mex/mex_util_test.cc)\n+\n   # Declare a dependency on the GTest::gtest and GTest::gtest_main IMPORTED\n   # targets.\n   target_link_libraries(placeholder_test GTest::gtest GTest::gtest_main)\n \n+  # Declare a dependency on the GTest::gtest and GTest::gtest_main IMPORTED\n+  # targets.\n+  target_link_libraries(mex_util_test GTest::gtest GTest::gtest_main)\n+  target_link_libraries(mex_util_test arrow_matlab)\n+\n+  # Include the MATLAB MEX headers.\n+  target_include_directories(mex_util_test PRIVATE ${Matlab_INCLUDE_DIRS})\n+  # Include the C++ source headers.\n+  target_include_directories(mex_util_test PRIVATE ${CPP_SOURCE_DIR})\n+\n   # Add a test target.\n   add_test(PlaceholderTestTarget placeholder_test)\n+  add_test(CheckNumArgsTestTarget mex_util_test)\n+\n+  # For Windows: add the directory of libmx.dll and libmex.dll to the %PATH% for\n+  # running CheckNumArgsTestTarget\n+  # Note: When appending to the path using set_test_properties' ENVIRONNENT property,\n+  #       make sure that we escape ';' to avoid cmake from interpreting the input as\n+  #       a list of strings.\n+  if(WIN32)\n+    set(MATLAB_DLL_DEPENDENCIES_DIR \"${Matlab_ROOT_DIR}/bin/win64\")\n+    set_tests_properties(CheckNumArgsTestTarget\n+                         PROPERTIES ENVIRONMENT\n+                                    \"PATH=${MATLAB_DLL_DEPENDENCIES_DIR}\\;$ENV{PATH}\")\n\nReview comment:\n       Thanks for this suggestion, it'll be more efficient to skip copying the GTest dlls. I will make this change.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-22T21:37:53.920+0000",
                    "updated": "2021-12-22T21:37:53.920+0000",
                    "started": "2021-12-22T21:37:53.920+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "700276",
                    "issueId": "13385864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385864/worklog/700277",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lafiona commented on pull request #12004:\nURL: https://github.com/apache/arrow/pull/12004#issuecomment-999895755\n\n\n   Thank you for your feedback, @kou! \r\n   \r\n   At this time, `[matlab-actions/setup-matlab]`(https://github.com/matlab-actions/setup-matlab) only supports Linux-based VMs in GitHub Actions. I have created two Jira tickets to track adding GitHub Actions jobs on macOS and Windows once the two platforms are supported: \r\n   - macOS: [ARROW-15195](https://issues.apache.org/jira/browse/ARROW-15195) \r\n   - Windows: [ARROW-15196](https://issues.apache.org/jira/browse/ARROW-15196) \r\n   \r\n   Thank you for checking in about ARROW-13564, it does not need to block this pull request. Because each of the co-authors pushed commits to this pull request, I think everyone will be represented in the final commit after the pull request is merged. \r\n   \r\n   I have addressed your code review feedback, please refer to the individual threads for the code specific comments.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-22T21:38:06.789+0000",
                    "updated": "2021-12-22T21:38:06.789+0000",
                    "started": "2021-12-22T21:38:06.789+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "700277",
                    "issueId": "13385864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385864/worklog/700290",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #12004:\nURL: https://github.com/apache/arrow/pull/12004#discussion_r774197873\n\n\n\n##########\nFile path: matlab/CMakeLists.txt\n##########\n@@ -212,56 +233,113 @@ if(MATLAB_BUILD_TESTS)\n     # C++ libraries that are built from source.\n     build_arrow(BUILD_GTEST)\n   else()\n+    # GTest is found, on Windows, IMPORTED_LOCATION needs to be set to indicate where the shared\n+    # libraries live\n+    if(WIN32)\n+      set(GTEST_SHARED_LIB_DIR \"${GTEST_ROOT}/bin\")\n+      set(GTEST_SHARED_LIBRARY_FILENAME\n+          \"${CMAKE_SHARED_LIBRARY_PREFIX}gtest${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n+      set(GTEST_SHARED_LIBRARY_LIB\n+          \"${GTEST_SHARED_LIB_DIR}/${GTEST_SHARED_LIBRARY_FILENAME}\")\n+\n+      set(GTEST_MAIN_SHARED_LIB_DIR \"${GTEST_ROOT}/bin\")\n+      set(GTEST_MAIN_SHARED_LIBRARY_FILENAME\n+          \"${CMAKE_SHARED_LIBRARY_PREFIX}gtest_main${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n+      set(GTEST_MAIN_SHARED_LIBRARY_LIB\n+          \"${GTEST_MAIN_SHARED_LIB_DIR}/${GTEST_MAIN_SHARED_LIBRARY_FILENAME}\")\n+\n+      set_target_properties(GTest::gtest PROPERTIES IMPORTED_LOCATION\n+                                                    \"${GTEST_SHARED_LIBRARY_LIB}\")\n+\n+      set_target_properties(GTest::gtest_main\n+                            PROPERTIES IMPORTED_LOCATION\n+                                       \"${GTEST_MAIN_SHARED_LIBRARY_LIB}\")\n+    endif()\n+\n     find_package(Arrow)\n     if(NOT Arrow_FOUND)\n       # Trigger an automatic build of the Arrow C++ libraries.\n       build_arrow()\n     endif()\n   endif()\n+\n else()\n   find_package(Arrow)\n   if(NOT Arrow_FOUND)\n     build_arrow()\n   endif()\n endif()\n \n+# On Windows: copy arrow.dll into the directory where the MATLAB C++ tests reside,\n+# since Windows require runtime DLLs that are depended on by executables to be in\n+# the same directory (or on the %PATH%).\n+if(WIN32)\n+  get_property(ARROW_SHARED_LIB\n+               TARGET arrow_shared\n+               PROPERTY IMPORTED_LOCATION)\n+\n+  add_custom_target(copy_arrow_to_build_output_dir ALL\n+                    COMMAND ${CMAKE_COMMAND} -E make_directory ${MATLAB_BUILD_OUTPUT_DIR}\n+                    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${ARROW_SHARED_LIB}\n+                            ${MATLAB_BUILD_OUTPUT_DIR}\n+                    COMMENT \"Start copying arrow.dll from ${ARROW_SHARED_LIB} to ${MATLAB_BUILD_OUTPUT_DIR}\"\n+  )\n\nReview comment:\n       Can we use `%PATH%` for this too?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-22T21:54:13.606+0000",
                    "updated": "2021-12-22T21:54:13.606+0000",
                    "started": "2021-12-22T21:54:13.606+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "700290",
                    "issueId": "13385864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385864/worklog/700308",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lafiona commented on a change in pull request #12004:\nURL: https://github.com/apache/arrow/pull/12004#discussion_r774208166\n\n\n\n##########\nFile path: matlab/CMakeLists.txt\n##########\n@@ -212,56 +233,113 @@ if(MATLAB_BUILD_TESTS)\n     # C++ libraries that are built from source.\n     build_arrow(BUILD_GTEST)\n   else()\n+    # GTest is found, on Windows, IMPORTED_LOCATION needs to be set to indicate where the shared\n+    # libraries live\n+    if(WIN32)\n+      set(GTEST_SHARED_LIB_DIR \"${GTEST_ROOT}/bin\")\n+      set(GTEST_SHARED_LIBRARY_FILENAME\n+          \"${CMAKE_SHARED_LIBRARY_PREFIX}gtest${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n+      set(GTEST_SHARED_LIBRARY_LIB\n+          \"${GTEST_SHARED_LIB_DIR}/${GTEST_SHARED_LIBRARY_FILENAME}\")\n+\n+      set(GTEST_MAIN_SHARED_LIB_DIR \"${GTEST_ROOT}/bin\")\n+      set(GTEST_MAIN_SHARED_LIBRARY_FILENAME\n+          \"${CMAKE_SHARED_LIBRARY_PREFIX}gtest_main${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n+      set(GTEST_MAIN_SHARED_LIBRARY_LIB\n+          \"${GTEST_MAIN_SHARED_LIB_DIR}/${GTEST_MAIN_SHARED_LIBRARY_FILENAME}\")\n+\n+      set_target_properties(GTest::gtest PROPERTIES IMPORTED_LOCATION\n+                                                    \"${GTEST_SHARED_LIBRARY_LIB}\")\n+\n+      set_target_properties(GTest::gtest_main\n+                            PROPERTIES IMPORTED_LOCATION\n+                                       \"${GTEST_MAIN_SHARED_LIBRARY_LIB}\")\n+    endif()\n+\n     find_package(Arrow)\n     if(NOT Arrow_FOUND)\n       # Trigger an automatic build of the Arrow C++ libraries.\n       build_arrow()\n     endif()\n   endif()\n+\n else()\n   find_package(Arrow)\n   if(NOT Arrow_FOUND)\n     build_arrow()\n   endif()\n endif()\n \n+# On Windows: copy arrow.dll into the directory where the MATLAB C++ tests reside,\n+# since Windows require runtime DLLs that are depended on by executables to be in\n+# the same directory (or on the %PATH%).\n+if(WIN32)\n+  get_property(ARROW_SHARED_LIB\n+               TARGET arrow_shared\n+               PROPERTY IMPORTED_LOCATION)\n+\n+  add_custom_target(copy_arrow_to_build_output_dir ALL\n+                    COMMAND ${CMAKE_COMMAND} -E make_directory ${MATLAB_BUILD_OUTPUT_DIR}\n+                    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${ARROW_SHARED_LIB}\n+                            ${MATLAB_BUILD_OUTPUT_DIR}\n+                    COMMENT \"Start copying arrow.dll from ${ARROW_SHARED_LIB} to ${MATLAB_BUILD_OUTPUT_DIR}\"\n+  )\n\nReview comment:\n       Thanks @kou, I've updated the description to reflect the changes that I made in response to your feedback. \r\n   \r\n   `arrow.dll` is not only used by the tests. On Windows, it needs to be copied to the location of `arrow_matlab.dll` and the MEX function, `mexfcn.mexw64`, so that they can access the Arrow APIs. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-22T22:18:41.142+0000",
                    "updated": "2021-12-22T22:18:41.142+0000",
                    "started": "2021-12-22T22:18:41.142+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "700308",
                    "issueId": "13385864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385864/worklog/700344",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #12004:\nURL: https://github.com/apache/arrow/pull/12004#discussion_r774241576\n\n\n\n##########\nFile path: matlab/CMakeLists.txt\n##########\n@@ -212,56 +233,113 @@ if(MATLAB_BUILD_TESTS)\n     # C++ libraries that are built from source.\n     build_arrow(BUILD_GTEST)\n   else()\n+    # GTest is found, on Windows, IMPORTED_LOCATION needs to be set to indicate where the shared\n+    # libraries live\n+    if(WIN32)\n+      set(GTEST_SHARED_LIB_DIR \"${GTEST_ROOT}/bin\")\n+      set(GTEST_SHARED_LIBRARY_FILENAME\n+          \"${CMAKE_SHARED_LIBRARY_PREFIX}gtest${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n+      set(GTEST_SHARED_LIBRARY_LIB\n+          \"${GTEST_SHARED_LIB_DIR}/${GTEST_SHARED_LIBRARY_FILENAME}\")\n+\n+      set(GTEST_MAIN_SHARED_LIB_DIR \"${GTEST_ROOT}/bin\")\n+      set(GTEST_MAIN_SHARED_LIBRARY_FILENAME\n+          \"${CMAKE_SHARED_LIBRARY_PREFIX}gtest_main${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n+      set(GTEST_MAIN_SHARED_LIBRARY_LIB\n+          \"${GTEST_MAIN_SHARED_LIB_DIR}/${GTEST_MAIN_SHARED_LIBRARY_FILENAME}\")\n+\n+      set_target_properties(GTest::gtest PROPERTIES IMPORTED_LOCATION\n+                                                    \"${GTEST_SHARED_LIBRARY_LIB}\")\n+\n+      set_target_properties(GTest::gtest_main\n+                            PROPERTIES IMPORTED_LOCATION\n+                                       \"${GTEST_MAIN_SHARED_LIBRARY_LIB}\")\n+    endif()\n+\n     find_package(Arrow)\n     if(NOT Arrow_FOUND)\n       # Trigger an automatic build of the Arrow C++ libraries.\n       build_arrow()\n     endif()\n   endif()\n+\n else()\n   find_package(Arrow)\n   if(NOT Arrow_FOUND)\n     build_arrow()\n   endif()\n endif()\n \n+# On Windows: copy arrow.dll into the directory where the MATLAB C++ tests reside,\n+# since Windows require runtime DLLs that are depended on by executables to be in\n+# the same directory (or on the %PATH%).\n+if(WIN32)\n+  get_property(ARROW_SHARED_LIB\n+               TARGET arrow_shared\n+               PROPERTY IMPORTED_LOCATION)\n+\n+  add_custom_target(copy_arrow_to_build_output_dir ALL\n+                    COMMAND ${CMAKE_COMMAND} -E make_directory ${MATLAB_BUILD_OUTPUT_DIR}\n+                    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${ARROW_SHARED_LIB}\n+                            ${MATLAB_BUILD_OUTPUT_DIR}\n+                    COMMENT \"Start copying arrow.dll from ${ARROW_SHARED_LIB} to ${MATLAB_BUILD_OUTPUT_DIR}\"\n+  )\n\nReview comment:\n       In normal use (not test use), users run `cmake --build ... --target install` before they use this module, right?\r\n   If it's correct, `arrow.dll` should be located in the same directory as `arrow_matlab.dll` and `mexfcn.mexw64` by `cmake --build ... --target install`.\r\n   \r\n   If your explanation is correct (we need this for not test use too), we should use `install()`  https://cmake.org/cmake/help/latest/command/install.html instead of `add_custom_target()`.\r\n   \r\n   I think that we can use one of them:\r\n   \r\n     * `install(IMPORTED_RUNTIME_ARTIFACTS)`: https://cmake.org/cmake/help/latest/command/install.html#imported-runtime-artifacts\r\n       * This requires CMake 3.21.\r\n     * install(FILES)`:  https://cmake.org/cmake/help/latest/command/install.html#files\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-23T00:08:57.906+0000",
                    "updated": "2021-12-23T00:08:57.906+0000",
                    "started": "2021-12-23T00:08:57.906+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "700344",
                    "issueId": "13385864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385864/worklog/702072",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on pull request #12004:\nURL: https://github.com/apache/arrow/pull/12004#issuecomment-1002771191\n\n\n   Simply out of curiousity, `mexfcn` does not supports C++ functions that take `FunctionOptions` in addition to the function arguments?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-29T20:48:19.209+0000",
                    "updated": "2021-12-29T20:48:19.209+0000",
                    "started": "2021-12-29T20:48:19.209+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "702072",
                    "issueId": "13385864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385864/worklog/703077",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lafiona commented on pull request #12004:\nURL: https://github.com/apache/arrow/pull/12004#issuecomment-1004306539\n\n\n   @edponce, `mexfcn` only receives input arguments from MATLAB. End users will interact with the MATLAB APIs, which will make use of `mexfcn`. `mexfcn` will dispatch to individual C++ functions that implement the necessary function specific behavior. \r\n   \r\n   Depending on the needs of a particular C++ function, developers can pass options in the way that they deem appropriate, in order to get that information to the C++ layer. `mexfcn` accepts a variable number of input arguments, of any type, from MATLAB. So a developer could pass an options struct to `mexfcn` in order to propagate any options to the C++ layer. The translation from the options struct to C++ data structures would need to be taken care of by the specific C++ functions. \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-03T19:27:00.300+0000",
                    "updated": "2022-01-03T19:27:00.300+0000",
                    "started": "2022-01-03T19:27:00.299+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "703077",
                    "issueId": "13385864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385864/worklog/712379",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lafiona commented on a change in pull request #12004:\nURL: https://github.com/apache/arrow/pull/12004#discussion_r789144232\n\n\n\n##########\nFile path: matlab/CMakeLists.txt\n##########\n@@ -212,56 +233,113 @@ if(MATLAB_BUILD_TESTS)\n     # C++ libraries that are built from source.\n     build_arrow(BUILD_GTEST)\n   else()\n+    # GTest is found, on Windows, IMPORTED_LOCATION needs to be set to indicate where the shared\n+    # libraries live\n+    if(WIN32)\n+      set(GTEST_SHARED_LIB_DIR \"${GTEST_ROOT}/bin\")\n+      set(GTEST_SHARED_LIBRARY_FILENAME\n+          \"${CMAKE_SHARED_LIBRARY_PREFIX}gtest${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n+      set(GTEST_SHARED_LIBRARY_LIB\n+          \"${GTEST_SHARED_LIB_DIR}/${GTEST_SHARED_LIBRARY_FILENAME}\")\n+\n+      set(GTEST_MAIN_SHARED_LIB_DIR \"${GTEST_ROOT}/bin\")\n+      set(GTEST_MAIN_SHARED_LIBRARY_FILENAME\n+          \"${CMAKE_SHARED_LIBRARY_PREFIX}gtest_main${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n+      set(GTEST_MAIN_SHARED_LIBRARY_LIB\n+          \"${GTEST_MAIN_SHARED_LIB_DIR}/${GTEST_MAIN_SHARED_LIBRARY_FILENAME}\")\n+\n+      set_target_properties(GTest::gtest PROPERTIES IMPORTED_LOCATION\n+                                                    \"${GTEST_SHARED_LIBRARY_LIB}\")\n+\n+      set_target_properties(GTest::gtest_main\n+                            PROPERTIES IMPORTED_LOCATION\n+                                       \"${GTEST_MAIN_SHARED_LIBRARY_LIB}\")\n+    endif()\n+\n     find_package(Arrow)\n     if(NOT Arrow_FOUND)\n       # Trigger an automatic build of the Arrow C++ libraries.\n       build_arrow()\n     endif()\n   endif()\n+\n else()\n   find_package(Arrow)\n   if(NOT Arrow_FOUND)\n     build_arrow()\n   endif()\n endif()\n \n+# On Windows: copy arrow.dll into the directory where the MATLAB C++ tests reside,\n+# since Windows require runtime DLLs that are depended on by executables to be in\n+# the same directory (or on the %PATH%).\n+if(WIN32)\n+  get_property(ARROW_SHARED_LIB\n+               TARGET arrow_shared\n+               PROPERTY IMPORTED_LOCATION)\n+\n+  add_custom_target(copy_arrow_to_build_output_dir ALL\n+                    COMMAND ${CMAKE_COMMAND} -E make_directory ${MATLAB_BUILD_OUTPUT_DIR}\n+                    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${ARROW_SHARED_LIB}\n+                            ${MATLAB_BUILD_OUTPUT_DIR}\n+                    COMMENT \"Start copying arrow.dll from ${ARROW_SHARED_LIB} to ${MATLAB_BUILD_OUTPUT_DIR}\"\n+  )\n\nReview comment:\n       Thank you for this feedback, @kou! I have thought more about how we are structuring the source files and libraries for deployment.\r\n   \r\n   As you mentioned, it is advantageous to use `install()` to move `arrow.dll` to the installed location for normal use.\r\n   \r\n   With the previous behavior of copying to the build tree, the MATLAB tests were able to find `mexfcn` and its dependencies by adding the path to the build tree to the MATLAB Search Path. However, enabling the install step allows a user to install the interface files (including source files and mex functions) to any location that the user specifies. Therefore, we enabled options to add the install directory, specified by `CMAKE_INSTALL_PREFIX`, to the MATLAB Search Path, as part of the install step. I have updated the pull request description with more details to reflect the changes we have made.\r\n   \r\n   For running the C++ tests on Windows and macOS, the paths to `arrow.dll`/`libarrow.dylib` are added to the `ctest` environment to eliminate the need to copy at all.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-20T20:56:44.804+0000",
                    "updated": "2022-01-20T20:56:44.804+0000",
                    "started": "2022-01-20T20:56:44.804+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "712379",
                    "issueId": "13385864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385864/worklog/717457",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #12004:\nURL: https://github.com/apache/arrow/pull/12004#discussion_r790106478\n\n\n\n##########\nFile path: matlab/CMakeLists.txt\n##########\n@@ -273,10 +328,209 @@ if(MATLAB_BUILD_TESTS)\n   # Define a test executable target. TODO: Remove the placeholder test. This is\n   # just for testing GoogleTest integration.\n   add_executable(placeholder_test ${CMAKE_SOURCE_DIR}/src/placeholder_test.cc)\n+  add_executable(mex_util_test ${CPP_SOURCE_DIR}/arrow/matlab/mex/mex_util_test.cc)\n+\n   # Declare a dependency on the GTest::gtest and GTest::gtest_main IMPORTED\n   # targets.\n   target_link_libraries(placeholder_test GTest::gtest GTest::gtest_main)\n \n-  # Add a test target.\n+  # Declare a dependency on the GTest::gtest and GTest::gtest_main IMPORTED\n+  # targets.\n+  target_link_libraries(mex_util_test GTest::gtest GTest::gtest_main)\n+  target_link_libraries(mex_util_test arrow_matlab)\n+\n+  # Include the MATLAB MEX headers.\n+  target_include_directories(mex_util_test PRIVATE ${Matlab_INCLUDE_DIRS})\n+  # Include the C++ source headers.\n+  target_include_directories(mex_util_test PRIVATE ${CPP_SOURCE_DIR})\n+\n+  # Add test targets for C++ tests.\n   add_test(PlaceholderTestTarget placeholder_test)\n+  add_test(CheckNumArgsTestTarget mex_util_test)\n+\n+  # On macOS, add the directory of libarrow.dylib to the $DYLD_LIBRARY_PATH for\n+  # running CheckNumArgsTestTarget.\n+  if(APPLE)\n+    get_target_property(ARROW_SHARED_LIB arrow_shared IMPORTED_LOCATION)\n+    get_filename_component(ARROW_SHARED_LIB_DIR ${ARROW_SHARED_LIB} DIRECTORY)\n+\n+    set_tests_properties(CheckNumArgsTestTarget\n+                         PROPERTIES ENVIRONMENT\n+                                    \"DYLD_LIBRARY_PATH=${ARROW_SHARED_LIB_DIR}\")\n+  endif()\n+\n+  # On Windows:\n+  # Add the directory of gtest.dll and gtest_main.dll to the %PATH% for running\n+  # all tests.\n+  # Add the directory of libmx.dll, libmex.dll, and libarrow.dll to the %PATH% for running\n+  # CheckNumArgsTestTarget.\n+  # Note: When appending to the path using set_test_properties' ENVIRONMENT property,\n+  #       make sure that we escape ';' to prevent CMake from interpreting the input as\n+  #       a list of strings.\n+  if(WIN32)\n+    get_target_property(GTEST_SHARED_LIB GTest::gtest IMPORTED_LOCATION)\n+    get_filename_component(GTEST_SHARED_LIB_DIR ${GTEST_SHARED_LIB} DIRECTORY)\n+\n+    get_target_property(GTEST_MAIN_SHARED_LIB GTest::gtest_main IMPORTED_LOCATION)\n+    get_filename_component(GTEST_MAIN_SHARED_LIB_DIR ${GTEST_MAIN_SHARED_LIB} DIRECTORY)\n+\n+    set_tests_properties(PlaceholderTestTarget\n+                         PROPERTIES ENVIRONMENT\n+                                    \"PATH=${GTEST_SHARED_LIB_DIR}\\;${GTEST_MAIN_SHARED_LIB_DIR}\\;$ENV{PATH}\"\n+    )\n+\n+    get_target_property(ARROW_SHARED_LIB arrow_shared IMPORTED_LOCATION)\n+    get_filename_component(ARROW_SHARED_LIB_DIR ${ARROW_SHARED_LIB} DIRECTORY)\n+\n+    set(MATLAB_DLL_DEPENDENCIES_DIR \"${Matlab_ROOT_DIR}/bin/win64\")\n+\n+    set_tests_properties(CheckNumArgsTestTarget\n+                         PROPERTIES ENVIRONMENT\n+                                    \"PATH=${ARROW_SHARED_LIB_DIR}\\;${MATLAB_DLL_DEPENDENCIES_DIR}\\;${GTEST_SHARED_LIB_DIR}\\;${GTEST_MAIN_SHARED_LIB_DIR}\\;$ENV{PATH}\"\n+    )\n+  endif()\n+endif()\n+\n+# ##############################################################################\n+# Install\n+# ##############################################################################\n+# Create a subdirectory at CMAKE_INSTALL_PREFIX to install the interface.\n+set(CMAKE_INSTALL_DIR \"${CMAKE_INSTALL_PREFIX}/arrow_matlab\")\n+\n+# Install MATLAB source files.\n+if(APPLE)\n+  # On macOS, exclude '.DS_Store' files in the source tree from installation.\n+  install(DIRECTORY \"${CMAKE_SOURCE_DIR}/src/matlab/\"\n+          DESTINATION ${CMAKE_INSTALL_DIR}\n+          PATTERN \".DS_Store\" EXCLUDE)\n+else()\n+  install(DIRECTORY \"${CMAKE_SOURCE_DIR}/src/matlab/\" DESTINATION ${CMAKE_INSTALL_DIR})\n+endif()\n\nReview comment:\n       How about always using `APPLE` clause?\r\n   \r\n   ```suggestion\r\n   # On macOS, exclude '.DS_Store' files in the source tree from installation.\r\n   install(DIRECTORY \"${CMAKE_SOURCE_DIR}/src/matlab/\"\r\n           DESTINATION ${CMAKE_INSTALL_DIR}\r\n           PATTERN \".DS_Store\" EXCLUDE)\r\n   ```\r\n   \r\n   Generally, `.DS_Store` doesn't exist on non macOS environments. It just does nothing.\n\n##########\nFile path: matlab/CMakeLists.txt\n##########\n@@ -76,108 +96,96 @@ function(build_arrow)\n   file(MAKE_DIRECTORY \"${ARROW_INCLUDE_DIR}\")\n   add_library(${ARROW_LIBRARY_TARGET} SHARED IMPORTED)\n   set_target_properties(${ARROW_LIBRARY_TARGET}\n-                        PROPERTIES ${ARROW_IMPORTED_TYPE} ${ARROW_SHARED_LIB}\n-                                   INTERFACE_INCLUDE_DIRECTORIES ${ARROW_INCLUDE_DIR})\n+                        PROPERTIES INTERFACE_INCLUDE_DIRECTORIES ${ARROW_INCLUDE_DIR}\n+                                   IMPORTED_LOCATION ${ARROW_SHARED_LIB})\n+  if(WIN32)\n+    set_target_properties(${ARROW_LIBRARY_TARGET} PROPERTIES IMPORTED_IMPLIB\n+                                                             ${ARROW_LINK_LIB})\n+  endif()\n \n   add_dependencies(${ARROW_LIBRARY_TARGET} arrow_ep)\n \n   if(ARG_BUILD_GTEST)\n     build_gtest()\n   endif()\n-\n endfunction()\n \n macro(enable_gtest)\n-  if(WIN32)\n-    set(ARROW_GTEST_IMPORTED_TYPE IMPORTED_IMPLIB)\n-    set(ARROW_GTEST_MAIN_IMPORTED_TYPE IMPORTED_IMPLIB)\n+  set(ARROW_GTEST_PREFIX \"${ARROW_BINARY_DIR}/googletest_ep-prefix\")\n+  set(ARROW_GTEST_MAIN_PREFIX \"${ARROW_BINARY_DIR}/googletest_ep-prefix\")\n \n-    set(ARROW_GTEST_LIBRARY_SUFFIX ${CMAKE_IMPORT_LIBRARY_SUFFIX})\n-    set(ARROW_GTEST_MAIN_LIBRARY_SUFFIX ${CMAKE_IMPORT_LIBRARY_SUFFIX})\n+  if(WIN32)\n+    set(ARROW_GTEST_LINK_SUFFIX ${CMAKE_IMPORT_LIBRARY_SUFFIX})\n+    set(ARROW_GTEST_SHARED_LIB_DIR \"${ARROW_GTEST_PREFIX}/bin\")\n+    set(ARROW_GTEST_MAIN_LINK_SUFFIX ${CMAKE_IMPORT_LIBRARY_SUFFIX})\n+    set(ARROW_GTEST_MAIN_SHARED_LIB_DIR \"${ARROW_GTEST_MAIN_PREFIX}/bin\")\n   else()\n-    set(ARROW_GTEST_IMPORTED_TYPE IMPORTED_LOCATION)\n-    set(ARROW_GTEST_MAIN_IMPORTED_TYPE IMPORTED_LOCATION)\n-\n-    set(ARROW_GTEST_LIBRARY_SUFFIX ${CMAKE_SHARED_LIBRARY_SUFFIX})\n-    set(ARROW_GTEST_MAIN_LIBRARY_SUFFIX ${CMAKE_SHARED_LIBRARY_SUFFIX})\n+    set(ARROW_GTEST_LINK_SUFFIX ${CMAKE_SHARED_LIBRARY_SUFFIX})\n+    set(ARROW_GTEST_SHARED_LIB_DIR \"${ARROW_GTEST_PREFIX}/lib\")\n+    set(ARROW_GTEST_MAIN_LINK_SUFFIX ${CMAKE_SHARED_LIBRARY_SUFFIX})\n+    set(ARROW_GTEST_MAIN_SHARED_LIB_DIR \"${ARROW_GTEST_MAIN_PREFIX}/lib\")\n   endif()\n \n-  set(ARROW_GTEST_PREFIX \"${ARROW_BINARY_DIR}/googletest_ep-prefix\")\n   set(ARROW_GTEST_INCLUDE_DIR \"${ARROW_GTEST_PREFIX}/include\")\n-  set(ARROW_GTEST_LIBRARY_DIR \"${ARROW_GTEST_PREFIX}/lib\")\n+  set(ARROW_GTEST_LINK_LIB_DIR \"${ARROW_GTEST_PREFIX}/lib\")\n+  set(ARROW_GTEST_LINK_LIB\n+      \"${ARROW_GTEST_LINK_LIB_DIR}/${CMAKE_IMPORT_LIBRARY_PREFIX}gtest${ARROW_GTEST_LINK_SUFFIX}\"\n\nReview comment:\n       It seems that we can always use `CMAKE_IMPORT_LIBRARY_SUFFIX` here.\n\n##########\nFile path: matlab/CMakeLists.txt\n##########\n@@ -273,10 +328,209 @@ if(MATLAB_BUILD_TESTS)\n   # Define a test executable target. TODO: Remove the placeholder test. This is\n   # just for testing GoogleTest integration.\n   add_executable(placeholder_test ${CMAKE_SOURCE_DIR}/src/placeholder_test.cc)\n+  add_executable(mex_util_test ${CPP_SOURCE_DIR}/arrow/matlab/mex/mex_util_test.cc)\n+\n   # Declare a dependency on the GTest::gtest and GTest::gtest_main IMPORTED\n   # targets.\n   target_link_libraries(placeholder_test GTest::gtest GTest::gtest_main)\n \n-  # Add a test target.\n+  # Declare a dependency on the GTest::gtest and GTest::gtest_main IMPORTED\n+  # targets.\n+  target_link_libraries(mex_util_test GTest::gtest GTest::gtest_main)\n+  target_link_libraries(mex_util_test arrow_matlab)\n+\n+  # Include the MATLAB MEX headers.\n+  target_include_directories(mex_util_test PRIVATE ${Matlab_INCLUDE_DIRS})\n+  # Include the C++ source headers.\n+  target_include_directories(mex_util_test PRIVATE ${CPP_SOURCE_DIR})\n+\n+  # Add test targets for C++ tests.\n   add_test(PlaceholderTestTarget placeholder_test)\n+  add_test(CheckNumArgsTestTarget mex_util_test)\n+\n+  # On macOS, add the directory of libarrow.dylib to the $DYLD_LIBRARY_PATH for\n+  # running CheckNumArgsTestTarget.\n+  if(APPLE)\n+    get_target_property(ARROW_SHARED_LIB arrow_shared IMPORTED_LOCATION)\n+    get_filename_component(ARROW_SHARED_LIB_DIR ${ARROW_SHARED_LIB} DIRECTORY)\n+\n+    set_tests_properties(CheckNumArgsTestTarget\n+                         PROPERTIES ENVIRONMENT\n+                                    \"DYLD_LIBRARY_PATH=${ARROW_SHARED_LIB_DIR}\")\n+  endif()\n+\n+  # On Windows:\n+  # Add the directory of gtest.dll and gtest_main.dll to the %PATH% for running\n+  # all tests.\n+  # Add the directory of libmx.dll, libmex.dll, and libarrow.dll to the %PATH% for running\n+  # CheckNumArgsTestTarget.\n+  # Note: When appending to the path using set_test_properties' ENVIRONMENT property,\n+  #       make sure that we escape ';' to prevent CMake from interpreting the input as\n+  #       a list of strings.\n+  if(WIN32)\n+    get_target_property(GTEST_SHARED_LIB GTest::gtest IMPORTED_LOCATION)\n+    get_filename_component(GTEST_SHARED_LIB_DIR ${GTEST_SHARED_LIB} DIRECTORY)\n+\n+    get_target_property(GTEST_MAIN_SHARED_LIB GTest::gtest_main IMPORTED_LOCATION)\n+    get_filename_component(GTEST_MAIN_SHARED_LIB_DIR ${GTEST_MAIN_SHARED_LIB} DIRECTORY)\n+\n+    set_tests_properties(PlaceholderTestTarget\n+                         PROPERTIES ENVIRONMENT\n+                                    \"PATH=${GTEST_SHARED_LIB_DIR}\\;${GTEST_MAIN_SHARED_LIB_DIR}\\;$ENV{PATH}\"\n+    )\n+\n+    get_target_property(ARROW_SHARED_LIB arrow_shared IMPORTED_LOCATION)\n+    get_filename_component(ARROW_SHARED_LIB_DIR ${ARROW_SHARED_LIB} DIRECTORY)\n+\n+    set(MATLAB_DLL_DEPENDENCIES_DIR \"${Matlab_ROOT_DIR}/bin/win64\")\n+\n+    set_tests_properties(CheckNumArgsTestTarget\n+                         PROPERTIES ENVIRONMENT\n+                                    \"PATH=${ARROW_SHARED_LIB_DIR}\\;${MATLAB_DLL_DEPENDENCIES_DIR}\\;${GTEST_SHARED_LIB_DIR}\\;${GTEST_MAIN_SHARED_LIB_DIR}\\;$ENV{PATH}\"\n+    )\n+  endif()\n+endif()\n+\n+# ##############################################################################\n+# Install\n+# ##############################################################################\n+# Create a subdirectory at CMAKE_INSTALL_PREFIX to install the interface.\n+set(CMAKE_INSTALL_DIR \"${CMAKE_INSTALL_PREFIX}/arrow_matlab\")\n+\n+# Install MATLAB source files.\n+if(APPLE)\n+  # On macOS, exclude '.DS_Store' files in the source tree from installation.\n+  install(DIRECTORY \"${CMAKE_SOURCE_DIR}/src/matlab/\"\n+          DESTINATION ${CMAKE_INSTALL_DIR}\n+          PATTERN \".DS_Store\" EXCLUDE)\n+else()\n+  install(DIRECTORY \"${CMAKE_SOURCE_DIR}/src/matlab/\" DESTINATION ${CMAKE_INSTALL_DIR})\n+endif()\n+\n+# Install arrow_matlab and mexfcn.\n+if(WIN32)\n+  install(TARGETS arrow_matlab mexfcn RUNTIME DESTINATION ${CMAKE_INSTALL_DIR})\n+else()\n+  # On Linux install arrow_matlab.so and on macOS install arrow_matlab.dylib\n+  # using the LIBRARY keyword.\n+  install(TARGETS arrow_matlab mexfcn LIBRARY DESTINATION ${CMAKE_INSTALL_DIR})\n+endif()\n\nReview comment:\n       We can simplify this like the following:\r\n   \r\n   ```suggestion\r\n   install(TARGETS arrow_matlab mexfcn\r\n           RUNTIME DESTINATION ${CMAKE_INSTALL_DIR}\r\n           LIBRARY DESTINATION ${CMAKE_INSTALL_DIR})\r\n   ```\n\n##########\nFile path: matlab/CMakeLists.txt\n##########\n@@ -76,108 +96,96 @@ function(build_arrow)\n   file(MAKE_DIRECTORY \"${ARROW_INCLUDE_DIR}\")\n   add_library(${ARROW_LIBRARY_TARGET} SHARED IMPORTED)\n   set_target_properties(${ARROW_LIBRARY_TARGET}\n-                        PROPERTIES ${ARROW_IMPORTED_TYPE} ${ARROW_SHARED_LIB}\n-                                   INTERFACE_INCLUDE_DIRECTORIES ${ARROW_INCLUDE_DIR})\n+                        PROPERTIES INTERFACE_INCLUDE_DIRECTORIES ${ARROW_INCLUDE_DIR}\n+                                   IMPORTED_LOCATION ${ARROW_SHARED_LIB})\n+  if(WIN32)\n+    set_target_properties(${ARROW_LIBRARY_TARGET} PROPERTIES IMPORTED_IMPLIB\n+                                                             ${ARROW_LINK_LIB})\n\nReview comment:\n       Can we always set `IMPORTED_IMPLIB` here?\r\n   I expect it's only used on Windows. (It's ignored on non Windows environments such as Linux and macOS.)\n\n##########\nFile path: matlab/CMakeLists.txt\n##########\n@@ -31,23 +32,42 @@ function(build_arrow)\n     message(SEND_ERROR \"Error: unrecognized arguments: ${ARG_UNPARSED_ARGUMENTS}\")\n   endif()\n \n+  # If Arrow needs to be built, the default location will be within the build tree.\n+  set(ARROW_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}/arrow_ep-prefix\")\n+\n   if(WIN32)\n-    set(ARROW_IMPORTED_TYPE IMPORTED_IMPLIB)\n-    set(ARROW_LIBRARY_SUFFIX ${CMAKE_IMPORT_LIBRARY_SUFFIX})\n+    # On Windows, the link time suffix (.lib) and runtime library suffixes (.dll) are different.\n+    set(ARROW_LINK_SUFFIX ${CMAKE_IMPORT_LIBRARY_SUFFIX})\n+    # The shared library is located in the \"bin\" directory.\n+    set(ARROW_SHARED_LIBRARY_DIR \"${ARROW_PREFIX}/bin\")\n   else()\n-    set(ARROW_IMPORTED_TYPE IMPORTED_LOCATION)\n-    set(ARROW_LIBRARY_SUFFIX ${CMAKE_SHARED_LIBRARY_SUFFIX})\n+    # On Linux and macOS, the link time suffix and runtime suffixes are consistent, (.so and .dylib).\n+    set(ARROW_LINK_SUFFIX ${CMAKE_SHARED_LIBRARY_SUFFIX})\n+    # The shared library is located in the \"lib\" directory.\n+    set(ARROW_SHARED_LIBRARY_DIR \"${ARROW_PREFIX}/lib\")\n   endif()\n \n-  set(ARROW_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}/arrow_ep-prefix\")\n-  set(ARROW_INCLUDE_DIR \"${ARROW_PREFIX}/include\")\n-  set(ARROW_LIBRARY_DIR \"${ARROW_PREFIX}/lib\")\n-  set(ARROW_SHARED_LIB\n-      \"${ARROW_LIBRARY_DIR}/${CMAKE_SHARED_LIBRARY_PREFIX}arrow${ARROW_LIBRARY_SUFFIX}\")\n+  set(ARROW_LINK_LIB_FILENAME \"${CMAKE_IMPORT_LIBRARY_PREFIX}arrow${ARROW_LINK_SUFFIX}\")\n\nReview comment:\n       It seems that we can always use `CMAKE_IMPORT_LIBRARY_SUFFIX` here.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-29T02:28:21.466+0000",
                    "updated": "2022-01-29T02:28:21.466+0000",
                    "started": "2022-01-29T02:28:21.466+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "717457",
                    "issueId": "13385864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385864/worklog/718281",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lafiona commented on a change in pull request #12004:\nURL: https://github.com/apache/arrow/pull/12004#discussion_r796124412\n\n\n\n##########\nFile path: matlab/CMakeLists.txt\n##########\n@@ -273,10 +328,209 @@ if(MATLAB_BUILD_TESTS)\n   # Define a test executable target. TODO: Remove the placeholder test. This is\n   # just for testing GoogleTest integration.\n   add_executable(placeholder_test ${CMAKE_SOURCE_DIR}/src/placeholder_test.cc)\n+  add_executable(mex_util_test ${CPP_SOURCE_DIR}/arrow/matlab/mex/mex_util_test.cc)\n+\n   # Declare a dependency on the GTest::gtest and GTest::gtest_main IMPORTED\n   # targets.\n   target_link_libraries(placeholder_test GTest::gtest GTest::gtest_main)\n \n-  # Add a test target.\n+  # Declare a dependency on the GTest::gtest and GTest::gtest_main IMPORTED\n+  # targets.\n+  target_link_libraries(mex_util_test GTest::gtest GTest::gtest_main)\n+  target_link_libraries(mex_util_test arrow_matlab)\n+\n+  # Include the MATLAB MEX headers.\n+  target_include_directories(mex_util_test PRIVATE ${Matlab_INCLUDE_DIRS})\n+  # Include the C++ source headers.\n+  target_include_directories(mex_util_test PRIVATE ${CPP_SOURCE_DIR})\n+\n+  # Add test targets for C++ tests.\n   add_test(PlaceholderTestTarget placeholder_test)\n+  add_test(CheckNumArgsTestTarget mex_util_test)\n+\n+  # On macOS, add the directory of libarrow.dylib to the $DYLD_LIBRARY_PATH for\n+  # running CheckNumArgsTestTarget.\n+  if(APPLE)\n+    get_target_property(ARROW_SHARED_LIB arrow_shared IMPORTED_LOCATION)\n+    get_filename_component(ARROW_SHARED_LIB_DIR ${ARROW_SHARED_LIB} DIRECTORY)\n+\n+    set_tests_properties(CheckNumArgsTestTarget\n+                         PROPERTIES ENVIRONMENT\n+                                    \"DYLD_LIBRARY_PATH=${ARROW_SHARED_LIB_DIR}\")\n+  endif()\n+\n+  # On Windows:\n+  # Add the directory of gtest.dll and gtest_main.dll to the %PATH% for running\n+  # all tests.\n+  # Add the directory of libmx.dll, libmex.dll, and libarrow.dll to the %PATH% for running\n+  # CheckNumArgsTestTarget.\n+  # Note: When appending to the path using set_test_properties' ENVIRONMENT property,\n+  #       make sure that we escape ';' to prevent CMake from interpreting the input as\n+  #       a list of strings.\n+  if(WIN32)\n+    get_target_property(GTEST_SHARED_LIB GTest::gtest IMPORTED_LOCATION)\n+    get_filename_component(GTEST_SHARED_LIB_DIR ${GTEST_SHARED_LIB} DIRECTORY)\n+\n+    get_target_property(GTEST_MAIN_SHARED_LIB GTest::gtest_main IMPORTED_LOCATION)\n+    get_filename_component(GTEST_MAIN_SHARED_LIB_DIR ${GTEST_MAIN_SHARED_LIB} DIRECTORY)\n+\n+    set_tests_properties(PlaceholderTestTarget\n+                         PROPERTIES ENVIRONMENT\n+                                    \"PATH=${GTEST_SHARED_LIB_DIR}\\;${GTEST_MAIN_SHARED_LIB_DIR}\\;$ENV{PATH}\"\n+    )\n+\n+    get_target_property(ARROW_SHARED_LIB arrow_shared IMPORTED_LOCATION)\n+    get_filename_component(ARROW_SHARED_LIB_DIR ${ARROW_SHARED_LIB} DIRECTORY)\n+\n+    set(MATLAB_DLL_DEPENDENCIES_DIR \"${Matlab_ROOT_DIR}/bin/win64\")\n+\n+    set_tests_properties(CheckNumArgsTestTarget\n+                         PROPERTIES ENVIRONMENT\n+                                    \"PATH=${ARROW_SHARED_LIB_DIR}\\;${MATLAB_DLL_DEPENDENCIES_DIR}\\;${GTEST_SHARED_LIB_DIR}\\;${GTEST_MAIN_SHARED_LIB_DIR}\\;$ENV{PATH}\"\n+    )\n+  endif()\n+endif()\n+\n+# ##############################################################################\n+# Install\n+# ##############################################################################\n+# Create a subdirectory at CMAKE_INSTALL_PREFIX to install the interface.\n+set(CMAKE_INSTALL_DIR \"${CMAKE_INSTALL_PREFIX}/arrow_matlab\")\n+\n+# Install MATLAB source files.\n+if(APPLE)\n+  # On macOS, exclude '.DS_Store' files in the source tree from installation.\n+  install(DIRECTORY \"${CMAKE_SOURCE_DIR}/src/matlab/\"\n+          DESTINATION ${CMAKE_INSTALL_DIR}\n+          PATTERN \".DS_Store\" EXCLUDE)\n+else()\n+  install(DIRECTORY \"${CMAKE_SOURCE_DIR}/src/matlab/\" DESTINATION ${CMAKE_INSTALL_DIR})\n+endif()\n\nReview comment:\n       @kou, thank you for this suggestion. I removed the if-statement to only exclude `.DS_Store` files on macOS, as this logic can be included for Linux and Windows platforms, without affecting the result.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-31T22:42:29.346+0000",
                    "updated": "2022-01-31T22:42:29.346+0000",
                    "started": "2022-01-31T22:42:29.346+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718281",
                    "issueId": "13385864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385864/worklog/718282",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lafiona commented on a change in pull request #12004:\nURL: https://github.com/apache/arrow/pull/12004#discussion_r796124859\n\n\n\n##########\nFile path: matlab/CMakeLists.txt\n##########\n@@ -273,10 +328,209 @@ if(MATLAB_BUILD_TESTS)\n   # Define a test executable target. TODO: Remove the placeholder test. This is\n   # just for testing GoogleTest integration.\n   add_executable(placeholder_test ${CMAKE_SOURCE_DIR}/src/placeholder_test.cc)\n+  add_executable(mex_util_test ${CPP_SOURCE_DIR}/arrow/matlab/mex/mex_util_test.cc)\n+\n   # Declare a dependency on the GTest::gtest and GTest::gtest_main IMPORTED\n   # targets.\n   target_link_libraries(placeholder_test GTest::gtest GTest::gtest_main)\n \n-  # Add a test target.\n+  # Declare a dependency on the GTest::gtest and GTest::gtest_main IMPORTED\n+  # targets.\n+  target_link_libraries(mex_util_test GTest::gtest GTest::gtest_main)\n+  target_link_libraries(mex_util_test arrow_matlab)\n+\n+  # Include the MATLAB MEX headers.\n+  target_include_directories(mex_util_test PRIVATE ${Matlab_INCLUDE_DIRS})\n+  # Include the C++ source headers.\n+  target_include_directories(mex_util_test PRIVATE ${CPP_SOURCE_DIR})\n+\n+  # Add test targets for C++ tests.\n   add_test(PlaceholderTestTarget placeholder_test)\n+  add_test(CheckNumArgsTestTarget mex_util_test)\n+\n+  # On macOS, add the directory of libarrow.dylib to the $DYLD_LIBRARY_PATH for\n+  # running CheckNumArgsTestTarget.\n+  if(APPLE)\n+    get_target_property(ARROW_SHARED_LIB arrow_shared IMPORTED_LOCATION)\n+    get_filename_component(ARROW_SHARED_LIB_DIR ${ARROW_SHARED_LIB} DIRECTORY)\n+\n+    set_tests_properties(CheckNumArgsTestTarget\n+                         PROPERTIES ENVIRONMENT\n+                                    \"DYLD_LIBRARY_PATH=${ARROW_SHARED_LIB_DIR}\")\n+  endif()\n+\n+  # On Windows:\n+  # Add the directory of gtest.dll and gtest_main.dll to the %PATH% for running\n+  # all tests.\n+  # Add the directory of libmx.dll, libmex.dll, and libarrow.dll to the %PATH% for running\n+  # CheckNumArgsTestTarget.\n+  # Note: When appending to the path using set_test_properties' ENVIRONMENT property,\n+  #       make sure that we escape ';' to prevent CMake from interpreting the input as\n+  #       a list of strings.\n+  if(WIN32)\n+    get_target_property(GTEST_SHARED_LIB GTest::gtest IMPORTED_LOCATION)\n+    get_filename_component(GTEST_SHARED_LIB_DIR ${GTEST_SHARED_LIB} DIRECTORY)\n+\n+    get_target_property(GTEST_MAIN_SHARED_LIB GTest::gtest_main IMPORTED_LOCATION)\n+    get_filename_component(GTEST_MAIN_SHARED_LIB_DIR ${GTEST_MAIN_SHARED_LIB} DIRECTORY)\n+\n+    set_tests_properties(PlaceholderTestTarget\n+                         PROPERTIES ENVIRONMENT\n+                                    \"PATH=${GTEST_SHARED_LIB_DIR}\\;${GTEST_MAIN_SHARED_LIB_DIR}\\;$ENV{PATH}\"\n+    )\n+\n+    get_target_property(ARROW_SHARED_LIB arrow_shared IMPORTED_LOCATION)\n+    get_filename_component(ARROW_SHARED_LIB_DIR ${ARROW_SHARED_LIB} DIRECTORY)\n+\n+    set(MATLAB_DLL_DEPENDENCIES_DIR \"${Matlab_ROOT_DIR}/bin/win64\")\n+\n+    set_tests_properties(CheckNumArgsTestTarget\n+                         PROPERTIES ENVIRONMENT\n+                                    \"PATH=${ARROW_SHARED_LIB_DIR}\\;${MATLAB_DLL_DEPENDENCIES_DIR}\\;${GTEST_SHARED_LIB_DIR}\\;${GTEST_MAIN_SHARED_LIB_DIR}\\;$ENV{PATH}\"\n+    )\n+  endif()\n+endif()\n+\n+# ##############################################################################\n+# Install\n+# ##############################################################################\n+# Create a subdirectory at CMAKE_INSTALL_PREFIX to install the interface.\n+set(CMAKE_INSTALL_DIR \"${CMAKE_INSTALL_PREFIX}/arrow_matlab\")\n+\n+# Install MATLAB source files.\n+if(APPLE)\n+  # On macOS, exclude '.DS_Store' files in the source tree from installation.\n+  install(DIRECTORY \"${CMAKE_SOURCE_DIR}/src/matlab/\"\n+          DESTINATION ${CMAKE_INSTALL_DIR}\n+          PATTERN \".DS_Store\" EXCLUDE)\n+else()\n+  install(DIRECTORY \"${CMAKE_SOURCE_DIR}/src/matlab/\" DESTINATION ${CMAKE_INSTALL_DIR})\n+endif()\n+\n+# Install arrow_matlab and mexfcn.\n+if(WIN32)\n+  install(TARGETS arrow_matlab mexfcn RUNTIME DESTINATION ${CMAKE_INSTALL_DIR})\n+else()\n+  # On Linux install arrow_matlab.so and on macOS install arrow_matlab.dylib\n+  # using the LIBRARY keyword.\n+  install(TARGETS arrow_matlab mexfcn LIBRARY DESTINATION ${CMAKE_INSTALL_DIR})\n+endif()\n\nReview comment:\n       This makes sense to me! I've accepted your suggestion to simplify this logic into one line of code. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-31T22:43:23.595+0000",
                    "updated": "2022-01-31T22:43:23.595+0000",
                    "started": "2022-01-31T22:43:23.595+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718282",
                    "issueId": "13385864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385864/worklog/718285",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lafiona commented on a change in pull request #12004:\nURL: https://github.com/apache/arrow/pull/12004#discussion_r796126455\n\n\n\n##########\nFile path: matlab/CMakeLists.txt\n##########\n@@ -31,23 +32,42 @@ function(build_arrow)\n     message(SEND_ERROR \"Error: unrecognized arguments: ${ARG_UNPARSED_ARGUMENTS}\")\n   endif()\n \n+  # If Arrow needs to be built, the default location will be within the build tree.\n+  set(ARROW_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}/arrow_ep-prefix\")\n+\n   if(WIN32)\n-    set(ARROW_IMPORTED_TYPE IMPORTED_IMPLIB)\n-    set(ARROW_LIBRARY_SUFFIX ${CMAKE_IMPORT_LIBRARY_SUFFIX})\n+    # On Windows, the link time suffix (.lib) and runtime library suffixes (.dll) are different.\n+    set(ARROW_LINK_SUFFIX ${CMAKE_IMPORT_LIBRARY_SUFFIX})\n+    # The shared library is located in the \"bin\" directory.\n+    set(ARROW_SHARED_LIBRARY_DIR \"${ARROW_PREFIX}/bin\")\n   else()\n-    set(ARROW_IMPORTED_TYPE IMPORTED_LOCATION)\n-    set(ARROW_LIBRARY_SUFFIX ${CMAKE_SHARED_LIBRARY_SUFFIX})\n+    # On Linux and macOS, the link time suffix and runtime suffixes are consistent, (.so and .dylib).\n+    set(ARROW_LINK_SUFFIX ${CMAKE_SHARED_LIBRARY_SUFFIX})\n+    # The shared library is located in the \"lib\" directory.\n+    set(ARROW_SHARED_LIBRARY_DIR \"${ARROW_PREFIX}/lib\")\n   endif()\n \n-  set(ARROW_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}/arrow_ep-prefix\")\n-  set(ARROW_INCLUDE_DIR \"${ARROW_PREFIX}/include\")\n-  set(ARROW_LIBRARY_DIR \"${ARROW_PREFIX}/lib\")\n-  set(ARROW_SHARED_LIB\n-      \"${ARROW_LIBRARY_DIR}/${CMAKE_SHARED_LIBRARY_PREFIX}arrow${ARROW_LIBRARY_SUFFIX}\")\n+  set(ARROW_LINK_LIB_FILENAME \"${CMAKE_IMPORT_LIBRARY_PREFIX}arrow${ARROW_LINK_SUFFIX}\")\n\nReview comment:\n       Than you for this suggestion! I will make this change for arrow_shared and the GTest targets.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-31T22:46:12.575+0000",
                    "updated": "2022-01-31T22:46:12.575+0000",
                    "started": "2022-01-31T22:46:12.574+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718285",
                    "issueId": "13385864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385864/worklog/718287",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lafiona commented on a change in pull request #12004:\nURL: https://github.com/apache/arrow/pull/12004#discussion_r796127733\n\n\n\n##########\nFile path: matlab/CMakeLists.txt\n##########\n@@ -76,108 +96,96 @@ function(build_arrow)\n   file(MAKE_DIRECTORY \"${ARROW_INCLUDE_DIR}\")\n   add_library(${ARROW_LIBRARY_TARGET} SHARED IMPORTED)\n   set_target_properties(${ARROW_LIBRARY_TARGET}\n-                        PROPERTIES ${ARROW_IMPORTED_TYPE} ${ARROW_SHARED_LIB}\n-                                   INTERFACE_INCLUDE_DIRECTORIES ${ARROW_INCLUDE_DIR})\n+                        PROPERTIES INTERFACE_INCLUDE_DIRECTORIES ${ARROW_INCLUDE_DIR}\n+                                   IMPORTED_LOCATION ${ARROW_SHARED_LIB})\n+  if(WIN32)\n+    set_target_properties(${ARROW_LIBRARY_TARGET} PROPERTIES IMPORTED_IMPLIB\n+                                                             ${ARROW_LINK_LIB})\n\nReview comment:\n       Yes, it's true that the `IMPORTED_IMPLIB` variable is only used on Windows. Because imported libraries are not used on macOS and Linux, `CMAKE_IMPORT_LIBRARY_SUFFIX` and `CMAKE_IMPORT_LIBRARY_PREFIX` are not set on these platforms. They are used to create the file path contained by `ARROW_LINK_LIB`. Therefore, the value of `ARROW_LINK_LIB` is not set for macOS and Linux. \r\n   \r\n   Because of this, I would prefer to only set `IMPORTED_IMPLIB` on Windows.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-31T22:48:42.138+0000",
                    "updated": "2022-01-31T22:48:42.138+0000",
                    "started": "2022-01-31T22:48:42.138+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718287",
                    "issueId": "13385864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385864/worklog/721623",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou closed pull request #12004:\nURL: https://github.com/apache/arrow/pull/12004\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-06T11:27:40.271+0000",
                    "updated": "2022-02-06T11:27:40.271+0000",
                    "started": "2022-02-06T11:27:40.271+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721623",
                    "issueId": "13385864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385864/worklog/721625",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #12004:\nURL: https://github.com/apache/arrow/pull/12004#issuecomment-1030813527\n\n\n   Benchmark runs are scheduled for baseline = dc2f678797d70ce990d4d73551ee573965dd38aa and contender = 9c5e4b3e76b0a4de75f0cced731de8a5582c571e. 9c5e4b3e76b0a4de75f0cced731de8a5582c571e is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Scheduled] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/836a68819ff04906aee38b9682b14b6b...dc55b45ed58344268667e69356af676b/)\n   [Scheduled] [test-mac-arm](https://conbench.ursa.dev/compare/runs/831d33894b7c4fbe9bdd3e6280f8f598...0c1cbcdebb7c48f0980bff93c6e98827/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/3e9c56818333433b8110c7aa27b0ac71...eb35e9f5278b4b858e03c671f58fbce4/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/e04f45a7bd974c39b3a3b2ad6f441d3c...02c2786b5b1d43be98661286b53677b5/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-06T11:31:06.495+0000",
                    "updated": "2022-02-06T11:31:06.495+0000",
                    "started": "2022-02-06T11:31:06.494+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721625",
                    "issueId": "13385864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385864/worklog/721629",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #12004:\nURL: https://github.com/apache/arrow/pull/12004#issuecomment-1030813527\n\n\n   Benchmark runs are scheduled for baseline = dc2f678797d70ce990d4d73551ee573965dd38aa and contender = 9c5e4b3e76b0a4de75f0cced731de8a5582c571e. 9c5e4b3e76b0a4de75f0cced731de8a5582c571e is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/836a68819ff04906aee38b9682b14b6b...dc55b45ed58344268667e69356af676b/)\n   [Scheduled] [test-mac-arm](https://conbench.ursa.dev/compare/runs/831d33894b7c4fbe9bdd3e6280f8f598...0c1cbcdebb7c48f0980bff93c6e98827/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/3e9c56818333433b8110c7aa27b0ac71...eb35e9f5278b4b858e03c671f58fbce4/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/e04f45a7bd974c39b3a3b2ad6f441d3c...02c2786b5b1d43be98661286b53677b5/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-06T11:41:07.692+0000",
                    "updated": "2022-02-06T11:41:07.692+0000",
                    "started": "2022-02-06T11:41:07.692+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721629",
                    "issueId": "13385864"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 19200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@eadc772[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32e25d5c[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4a9d2439[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6a35888b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f06b74[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@73ecfa83[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5073b42b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@16c40f7e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@13ea6d19[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@746a505[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4ad99b2a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7c50d2f0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 19200,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Feb 06 11:27:31 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-02-06T11:27:31.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13185/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-06-25T13:46:57.000+0000",
        "updated": "2022-02-07T22:04:38.000+0000",
        "timeoriginalestimate": null,
        "description": "Since modifying the source directory via the build process is generally considered non-optimal, we may want to explore alternative approaches.\u00a0Our preferred approach is to create a single MEX gateway function which delegates to specific C++ functions. This singular MEX function will always be placed in the build tree and added to the MATLAB path.\r\n\r\nAdvantages to this approach:\r\n * Better organization\r\n ** All MEX functions are registered in one location\r\n ** Reduce the complexity of managing and linking many MEX files and ensuring that they are added to the MATLAB path\r\n ** Reduce cognitive load for adding a new function\r\n * Avoid polluting the source tree with build artifacts\r\n * Reduce build times, building a single MEX function is faster than building potentially hundreds\r\n * Reduce binary bloat caused by creating a separate MEX file for every MEX function\r\n * Enable flexibility in terms of where C++ implementation files live\r\n\r\n\u00a0\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 19200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[MATLAB] Create a single MEX gateway function which delegates to specific C++ functions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13385864/comment/17487694",
                    "id": "17487694",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 12004\n[https://github.com/apache/arrow/pull/12004]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2022-02-06T11:27:31.804+0000",
                    "updated": "2022-02-06T11:27:31.804+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0sauo:",
        "customfield_12314139": null
    }
}