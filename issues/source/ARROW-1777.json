{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13116804",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116804",
    "key": "ARROW-1777",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1777/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@523bdb42[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@468bbab6[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@33595293[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@281c1044[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1efd587[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1d381159[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@648c15a7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2c5ab742[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@53661ca3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@e097d4f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@a2c6004[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@733536a4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Nov 25 17:18:45 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2017-11-25T17:18:44.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1777/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2017-11-07T21:30:12.000+0000",
        "updated": "2017-11-25T17:18:45.000+0000",
        "timeoriginalestimate": null,
        "description": "Because of the fickleness of {{std::make_shared}}, we are having to store a vector of buffers in an lvalue rather than passing the buffers in the {{make_shared}} function call as an initializer list. This makes things a bit awkward, and could be made possibly better with a factory function",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add static ctor ArrayData::Make for nicer syntax in places",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116804/comment/16264786",
                    "id": "16264786",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm opened a new pull request #1353: ARROW-1777: [C++] Add ArrayData::Make static ctor for more convenient construction\nURL: https://github.com/apache/arrow/pull/1353\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-23T21:20:49.420+0000",
                    "updated": "2017-11-23T21:20:49.420+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116804/comment/16265782",
                    "id": "16265782",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1353\n[https://github.com/apache/arrow/pull/1353]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-11-25T17:18:44.455+0000",
                    "updated": "2017-11-25T17:18:44.455+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13116804/comment/16265783",
                    "id": "16265783",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1353: ARROW-1777: [C++] Add ArrayData::Make static ctor for more convenient construction\nURL: https://github.com/apache/arrow/pull/1353\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/array.cc b/cpp/src/arrow/array.cc\nindex 4ceb071ac..4b1fabfdc 100644\n--- a/cpp/src/arrow/array.cc\n+++ b/cpp/src/arrow/array.cc\n@@ -36,6 +36,20 @@\n \n namespace arrow {\n \n+std::shared_ptr<ArrayData> ArrayData::Make(const std::shared_ptr<DataType>& type,\n+                                           int64_t length,\n+                                           std::vector<std::shared_ptr<Buffer>>&& buffers,\n+                                           int64_t null_count, int64_t offset) {\n+  return std::make_shared<ArrayData>(type, length, std::move(buffers), null_count,\n+                                     offset);\n+}\n+\n+std::shared_ptr<ArrayData> ArrayData::Make(const std::shared_ptr<DataType>& type,\n+                                           int64_t length, int64_t null_count,\n+                                           int64_t offset) {\n+  return std::make_shared<ArrayData>(type, length, null_count, offset);\n+}\n+\n // ----------------------------------------------------------------------\n // Base array class\n \n@@ -112,8 +126,7 @@ std::string Array::ToString() const {\n }\n \n NullArray::NullArray(int64_t length) {\n-  BufferVector buffers = {nullptr};\n-  SetData(std::make_shared<ArrayData>(null(), length, std::move(buffers), length));\n+  SetData(ArrayData::Make(null(), length, {nullptr}, length));\n }\n \n // ----------------------------------------------------------------------\n@@ -123,9 +136,7 @@ PrimitiveArray::PrimitiveArray(const std::shared_ptr<DataType>& type, int64_t le\n                                const std::shared_ptr<Buffer>& data,\n                                const std::shared_ptr<Buffer>& null_bitmap,\n                                int64_t null_count, int64_t offset) {\n-  BufferVector buffers = {null_bitmap, data};\n-  SetData(\n-      std::make_shared<ArrayData>(type, length, std::move(buffers), null_count, offset));\n+  SetData(ArrayData::Make(type, length, {null_bitmap, data}, null_count, offset));\n }\n \n const uint8_t* PrimitiveArray::raw_values() const {\n@@ -165,9 +176,8 @@ ListArray::ListArray(const std::shared_ptr<DataType>& type, int64_t length,\n                      const std::shared_ptr<Array>& values,\n                      const std::shared_ptr<Buffer>& null_bitmap, int64_t null_count,\n                      int64_t offset) {\n-  BufferVector buffers = {null_bitmap, value_offsets};\n   auto internal_data =\n-      std::make_shared<ArrayData>(type, length, std::move(buffers), null_count, offset);\n+      ArrayData::Make(type, length, {null_bitmap, value_offsets}, null_count, offset);\n   internal_data->child_data.emplace_back(values->data());\n   SetData(internal_data);\n }\n@@ -219,9 +229,8 @@ Status ListArray::FromArrays(const Array& offsets, const Array& values, MemoryPo\n   }\n \n   auto list_type = list(values.type());\n-  auto internal_data =\n-      std::make_shared<ArrayData>(list_type, num_offsets - 1, std::move(buffers),\n-                                  offsets.null_count(), offsets.offset());\n+  auto internal_data = ArrayData::Make(list_type, num_offsets - 1, std::move(buffers),\n+                                       offsets.null_count(), offsets.offset());\n   internal_data->child_data.push_back(values.data());\n \n   *out = std::make_shared<ListArray>(internal_data);\n@@ -276,9 +285,8 @@ BinaryArray::BinaryArray(const std::shared_ptr<DataType>& type, int64_t length,\n                          const std::shared_ptr<Buffer>& data,\n                          const std::shared_ptr<Buffer>& null_bitmap, int64_t null_count,\n                          int64_t offset) {\n-  BufferVector buffers = {null_bitmap, value_offsets, data};\n-  SetData(\n-      std::make_shared<ArrayData>(type, length, std::move(buffers), null_count, offset));\n+  SetData(ArrayData::Make(type, length, {null_bitmap, value_offsets, data}, null_count,\n+                          offset));\n }\n \n StringArray::StringArray(const std::shared_ptr<ArrayData>& data) {\n@@ -338,9 +346,7 @@ StructArray::StructArray(const std::shared_ptr<DataType>& type, int64_t length,\n                          const std::vector<std::shared_ptr<Array>>& children,\n                          std::shared_ptr<Buffer> null_bitmap, int64_t null_count,\n                          int64_t offset) {\n-  BufferVector buffers = {null_bitmap};\n-  SetData(\n-      std::make_shared<ArrayData>(type, length, std::move(buffers), null_count, offset));\n+  SetData(ArrayData::Make(type, length, {null_bitmap}, null_count, offset));\n   for (const auto& child : children) {\n     data_->child_data.push_back(child->data());\n   }\n@@ -384,9 +390,8 @@ UnionArray::UnionArray(const std::shared_ptr<DataType>& type, int64_t length,\n                        const std::shared_ptr<Buffer>& value_offsets,\n                        const std::shared_ptr<Buffer>& null_bitmap, int64_t null_count,\n                        int64_t offset) {\n-  BufferVector buffers = {null_bitmap, type_ids, value_offsets};\n-  auto internal_data =\n-      std::make_shared<ArrayData>(type, length, std::move(buffers), null_count, offset);\n+  auto internal_data = ArrayData::Make(\n+      type, length, {null_bitmap, type_ids, value_offsets}, null_count, offset);\n   for (const auto& child : children) {\n     internal_data->child_data.push_back(child->data());\n   }\n@@ -416,9 +421,8 @@ Status UnionArray::MakeDense(const Array& type_ids, const Array& value_offsets,\n                           static_cast<const UInt8Array&>(type_ids).values(),\n                           static_cast<const Int32Array&>(value_offsets).values()};\n   auto union_type = union_(children, UnionMode::DENSE);\n-  auto internal_data =\n-      std::make_shared<ArrayData>(union_type, type_ids.length(), std::move(buffers),\n-                                  type_ids.null_count(), type_ids.offset());\n+  auto internal_data = ArrayData::Make(union_type, type_ids.length(), std::move(buffers),\n+                                       type_ids.null_count(), type_ids.offset());\n   for (const auto& child : children) {\n     internal_data->child_data.push_back(child->data());\n   }\n@@ -435,9 +439,8 @@ Status UnionArray::MakeSparse(const Array& type_ids,\n   BufferVector buffers = {type_ids.null_bitmap(),\n                           static_cast<const UInt8Array&>(type_ids).values(), nullptr};\n   auto union_type = union_(children, UnionMode::SPARSE);\n-  auto internal_data =\n-      std::make_shared<ArrayData>(union_type, type_ids.length(), std::move(buffers),\n-                                  type_ids.null_count(), type_ids.offset());\n+  auto internal_data = ArrayData::Make(union_type, type_ids.length(), std::move(buffers),\n+                                       type_ids.null_count(), type_ids.offset());\n   for (const auto& child : children) {\n     internal_data->child_data.push_back(child->data());\n     if (child->length() != type_ids.length()) {\ndiff --git a/cpp/src/arrow/array.h b/cpp/src/arrow/array.h\nindex dda9dd38b..ec5381d6e 100644\n--- a/cpp/src/arrow/array.h\n+++ b/cpp/src/arrow/array.h\n@@ -104,6 +104,17 @@ struct ARROW_EXPORT ArrayData {\n     this->buffers = std::move(buffers);\n   }\n \n+  static std::shared_ptr<ArrayData> Make(const std::shared_ptr<DataType>& type,\n+                                         int64_t length,\n+                                         std::vector<std::shared_ptr<Buffer>>&& buffers,\n+                                         int64_t null_count = kUnknownNullCount,\n+                                         int64_t offset = 0);\n+\n+  static std::shared_ptr<ArrayData> Make(const std::shared_ptr<DataType>& type,\n+                                         int64_t length,\n+                                         int64_t null_count = kUnknownNullCount,\n+                                         int64_t offset = 0);\n+\n   // Move constructor\n   ArrayData(ArrayData&& other) noexcept\n       : type(std::move(other.type)),\ndiff --git a/cpp/src/arrow/builder.cc b/cpp/src/arrow/builder.cc\nindex a42f90245..4d7fd5ff8 100644\n--- a/cpp/src/arrow/builder.cc\n+++ b/cpp/src/arrow/builder.cc\n@@ -219,8 +219,7 @@ void ArrayBuilder::UnsafeSetNotNull(int64_t length) {\n // Null builder\n \n Status NullBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n-  BufferVector buffers = {nullptr};\n-  *out = std::make_shared<ArrayData>(null(), length_, std::move(buffers), length_);\n+  *out = ArrayData::Make(null(), length_, {nullptr}, length_);\n   length_ = null_count_ = 0;\n   return Status::OK();\n }\n@@ -314,8 +313,7 @@ Status PrimitiveBuilder<T>::FinishInternal(std::shared_ptr<ArrayData>* out) {\n     // Trim buffers\n     RETURN_NOT_OK(data_->Resize(bytes_required));\n   }\n-  BufferVector buffers = {null_bitmap_, data_};\n-  *out = std::make_shared<ArrayData>(type_, length_, std::move(buffers), null_count_);\n+  *out = ArrayData::Make(type_, length_, {null_bitmap_, data_}, null_count_);\n \n   data_ = null_bitmap_ = nullptr;\n   capacity_ = length_ = null_count_ = 0;\n@@ -404,9 +402,7 @@ Status AdaptiveIntBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n       return Status::NotImplemented(\"Only ints of size 1,2,4,8 are supported\");\n   }\n \n-  BufferVector buffers = {null_bitmap_, data_};\n-  *out =\n-      std::make_shared<ArrayData>(output_type, length_, std::move(buffers), null_count_);\n+  *out = ArrayData::Make(output_type, length_, {null_bitmap_, data_}, null_count_);\n \n   data_ = null_bitmap_ = nullptr;\n   capacity_ = length_ = null_count_ = 0;\n@@ -562,9 +558,7 @@ Status AdaptiveUIntBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n       return Status::NotImplemented(\"Only ints of size 1,2,4,8 are supported\");\n   }\n \n-  BufferVector buffers = {null_bitmap_, data_};\n-  *out =\n-      std::make_shared<ArrayData>(output_type, length_, std::move(buffers), null_count_);\n+  *out = ArrayData::Make(output_type, length_, {null_bitmap_, data_}, null_count_);\n \n   data_ = null_bitmap_ = nullptr;\n   capacity_ = length_ = null_count_ = 0;\n@@ -741,8 +735,7 @@ Status BooleanBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n     // Trim buffers\n     RETURN_NOT_OK(data_->Resize(bytes_required));\n   }\n-  BufferVector buffers = {null_bitmap_, data_};\n-  *out = std::make_shared<ArrayData>(boolean(), length_, std::move(buffers), null_count_);\n+  *out = ArrayData::Make(boolean(), length_, {null_bitmap_, data_}, null_count_);\n \n   data_ = null_bitmap_ = nullptr;\n   capacity_ = length_ = null_count_ = 0;\n@@ -828,8 +821,7 @@ Status Decimal128Builder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n   std::shared_ptr<Buffer> data;\n   RETURN_NOT_OK(byte_builder_.Finish(&data));\n \n-  BufferVector buffers = {null_bitmap_, data};\n-  *out = std::make_shared<ArrayData>(type_, length_, std::move(buffers), null_count_);\n+  *out = ArrayData::Make(type_, length_, {null_bitmap_, data}, null_count_);\n   return Status::OK();\n }\n \n@@ -896,8 +888,7 @@ Status ListBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n     RETURN_NOT_OK(value_builder_->FinishInternal(&items));\n   }\n \n-  BufferVector buffers = {null_bitmap_, offsets};\n-  *out = std::make_shared<ArrayData>(type_, length_, std::move(buffers), null_count_);\n+  *out = ArrayData::Make(type_, length_, {null_bitmap_, offsets}, null_count_);\n   (*out)->child_data.emplace_back(std::move(items));\n   Reset();\n   return Status::OK();\n@@ -969,8 +960,8 @@ Status BinaryBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n   RETURN_NOT_OK(offsets_builder_.Finish(&offsets));\n   RETURN_NOT_OK(value_data_builder_.Finish(&value_data));\n \n-  BufferVector buffers = {null_bitmap_, offsets, value_data};\n-  *out = std::make_shared<ArrayData>(type_, length_, std::move(buffers), null_count_, 0);\n+  *out = ArrayData::Make(type_, length_, {null_bitmap_, offsets, value_data}, null_count_,\n+                         0);\n   Reset();\n   return Status::OK();\n }\n@@ -1040,8 +1031,7 @@ Status FixedSizeBinaryBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n   std::shared_ptr<Buffer> data;\n   RETURN_NOT_OK(byte_builder_.Finish(&data));\n \n-  BufferVector buffers = {null_bitmap_, data};\n-  *out = std::make_shared<ArrayData>(type_, length_, std::move(buffers), null_count_);\n+  *out = ArrayData::Make(type_, length_, {null_bitmap_, data}, null_count_);\n   return Status::OK();\n }\n \n@@ -1060,8 +1050,7 @@ StructBuilder::StructBuilder(const std::shared_ptr<DataType>& type, MemoryPool*\n }\n \n Status StructBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n-  BufferVector buffers = {null_bitmap_};\n-  *out = std::make_shared<ArrayData>(type_, length_, std::move(buffers), null_count_);\n+  *out = ArrayData::Make(type_, length_, {null_bitmap_}, null_count_);\n \n   (*out)->child_data.resize(field_builders_.size());\n   for (size_t i = 0; i < field_builders_.size(); ++i) {\ndiff --git a/cpp/src/arrow/compute/compute-test.cc b/cpp/src/arrow/compute/compute-test.cc\nindex 96edd8f01..d5158978c 100644\n--- a/cpp/src/arrow/compute/compute-test.cc\n+++ b/cpp/src/arrow/compute/compute-test.cc\n@@ -688,7 +688,7 @@ TEST_F(TestCast, PreallocatedMemory) {\n   std::unique_ptr<UnaryKernel> kernel;\n   ASSERT_OK(GetCastFunction(*int32(), out_type, options, &kernel));\n \n-  auto out_data = std::make_shared<ArrayData>(out_type, length);\n+  auto out_data = ArrayData::Make(out_type, length);\n \n   shared_ptr<Buffer> out_values;\n   ASSERT_OK(this->ctx_.Allocate(length * sizeof(int64_t), &out_values));\ndiff --git a/cpp/src/arrow/compute/kernels/cast.cc b/cpp/src/arrow/compute/kernels/cast.cc\nindex d595d2ea5..d48d66992 100644\n--- a/cpp/src/arrow/compute/kernels/cast.cc\n+++ b/cpp/src/arrow/compute/kernels/cast.cc\n@@ -747,7 +747,7 @@ class CastKernel : public UnaryKernel {\n     ArrayData* result;\n \n     if (out->kind() == Datum::NONE) {\n-      out->value = std::make_shared<ArrayData>(out_type_, in_data.length);\n+      out->value = ArrayData::Make(out_type_, in_data.length);\n     }\n \n     result = out->array().get();\ndiff --git a/cpp/src/arrow/compute/kernels/hash.cc b/cpp/src/arrow/compute/kernels/hash.cc\nindex e47759d4d..66c907369 100644\n--- a/cpp/src/arrow/compute/kernels/hash.cc\n+++ b/cpp/src/arrow/compute/kernels/hash.cc\n@@ -342,8 +342,7 @@ class HashTableKernel<Type, Action, enable_if_has_c_type<Type>> : public HashTab\n     auto dict_data = dict_.buffer;\n     RETURN_NOT_OK(dict_data->Resize(dict_.size * sizeof(T), false));\n \n-    BufferVector buffers = {nullptr, dict_data};\n-    *out = std::make_shared<ArrayData>(type_, dict_.size, std::move(buffers), 0);\n+    *out = ArrayData::Make(type_, dict_.size, {nullptr, dict_data}, 0);\n     return Status::OK();\n   }\n \n@@ -528,7 +527,7 @@ class HashTableKernel<Type, Action, enable_if_binary<Type>> : public HashTable {\n     RETURN_NOT_OK(dict_offsets_.Finish(&buffers[1]));\n     RETURN_NOT_OK(dict_data_.Finish(&buffers[2]));\n \n-    *out = std::make_shared<ArrayData>(type_, dict_size_, std::move(buffers), 0);\n+    *out = ArrayData::Make(type_, dict_size_, std::move(buffers), 0);\n     return Status::OK();\n   }\n \n@@ -634,7 +633,7 @@ class HashTableKernel<Type, Action, enable_if_fixed_size_binary<Type>>\n     BufferVector buffers = {nullptr, nullptr};\n     RETURN_NOT_OK(dict_data_.Finish(&buffers[1]));\n \n-    *out = std::make_shared<ArrayData>(type_, dict_size_, std::move(buffers), 0);\n+    *out = ArrayData::Make(type_, dict_size_, std::move(buffers), 0);\n     return Status::OK();\n   }\n \ndiff --git a/cpp/src/arrow/ipc/feather-test.cc b/cpp/src/arrow/ipc/feather-test.cc\nindex e3de17f1f..8ec3b0e4a 100644\n--- a/cpp/src/arrow/ipc/feather-test.cc\n+++ b/cpp/src/arrow/ipc/feather-test.cc\n@@ -366,15 +366,14 @@ TEST_F(TestTableWriter, TimeTypes) {\n   ArrayFromVector<Date32Type, int32_t>(is_valid, date_values_vec, &date_array);\n \n   const auto& prim_values = static_cast<const PrimitiveArray&>(*values);\n-  std::vector<std::shared_ptr<Buffer>> buffers = {prim_values.null_bitmap(),\n-                                                  prim_values.values()};\n+  BufferVector buffers = {prim_values.null_bitmap(), prim_values.values()};\n \n   std::vector<std::shared_ptr<ArrayData>> arrays;\n   arrays.push_back(date_array->data());\n \n   for (int i = 1; i < schema->num_fields(); ++i) {\n-    arrays.emplace_back(std::make_shared<ArrayData>(\n-        schema->field(i)->type(), values->length(), buffers, values->null_count(), 0));\n+    arrays.emplace_back(ArrayData::Make(schema->field(i)->type(), values->length(),\n+                                        BufferVector(buffers), values->null_count(), 0));\n   }\n \n   auto batch = RecordBatch::Make(schema, values->length(), std::move(arrays));\ndiff --git a/cpp/src/arrow/ipc/feather.cc b/cpp/src/arrow/ipc/feather.cc\nindex 077dc3930..d339449c0 100644\n--- a/cpp/src/arrow/ipc/feather.cc\n+++ b/cpp/src/arrow/ipc/feather.cc\n@@ -371,7 +371,7 @@ class TableReader::TableReaderImpl {\n     buffers.push_back(SliceBuffer(buffer, offset, buffer->size() - offset));\n \n     auto arr_data =\n-        std::make_shared<ArrayData>(type, meta->length(), buffers, meta->null_count());\n+        ArrayData::Make(type, meta->length(), std::move(buffers), meta->null_count());\n     *out = MakeArray(arr_data);\n     return Status::OK();\n   }\ndiff --git a/cpp/src/arrow/python/numpy_to_arrow.cc b/cpp/src/arrow/python/numpy_to_arrow.cc\nindex 0d2df9315..0c0d1a9b3 100644\n--- a/cpp/src/arrow/python/numpy_to_arrow.cc\n+++ b/cpp/src/arrow/python/numpy_to_arrow.cc\n@@ -392,9 +392,7 @@ class NumPyConverter {\n       null_count = ValuesToBitmap<traits::npy_type>(arr_, null_bitmap_data_);\n     }\n \n-    BufferVector buffers = {null_bitmap_, data};\n-    auto arr_data =\n-        std::make_shared<ArrayData>(type_, length_, std::move(buffers), null_count, 0);\n+    auto arr_data = ArrayData::Make(type_, length_, {null_bitmap_, data}, null_count, 0);\n     return PushArray(arr_data);\n   }\n \n@@ -472,8 +470,7 @@ Status CastBuffer(const std::shared_ptr<DataType>& in_type,\n                   const std::shared_ptr<DataType>& out_type, MemoryPool* pool,\n                   std::shared_ptr<Buffer>* out) {\n   // Must cast\n-  std::vector<std::shared_ptr<Buffer>> buffers = {valid_bitmap, input};\n-  auto tmp_data = std::make_shared<ArrayData>(in_type, length, buffers, null_count);\n+  auto tmp_data = ArrayData::Make(in_type, length, {valid_bitmap, input}, null_count);\n \n   std::shared_ptr<Array> tmp_array = MakeArray(tmp_data);\n   std::shared_ptr<Array> casted_array;\ndiff --git a/python/pyarrow/public-api.pxi b/python/pyarrow/public-api.pxi\nindex 9776f2ad7..2fdb606a7 100644\n--- a/python/pyarrow/public-api.pxi\n+++ b/python/pyarrow/public-api.pxi\n@@ -44,7 +44,7 @@ cdef public api object pyarrow_wrap_buffer(const shared_ptr[CBuffer]& buf):\n \n \n cdef public api object pyarrow_wrap_resizable_buffer(\n-    const shared_ptr[CResizableBuffer]& buf):\n+        const shared_ptr[CResizableBuffer]& buf):\n     cdef ResizableBuffer result = ResizableBuffer()\n     result.init_rz(buf)\n     return result\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-25T17:18:45.901+0000",
                    "updated": "2017-11-25T17:18:45.901+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|i3mihz:",
        "customfield_12314139": null
    }
}