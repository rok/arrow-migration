{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13477281",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281",
    "key": "ARROW-17450",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "1.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12649411",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12649411",
                "type": {
                    "id": "12310560",
                    "name": "Problem/Incident",
                    "inward": "is caused by",
                    "outward": "causes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310560"
                },
                "outwardIssue": {
                    "id": "13486105",
                    "key": "ARROW-18031",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13486105",
                    "fields": {
                        "summary": "[C++][Parquet] Undefined behavior in boolean RLE decoder",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/1",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/blocker.svg",
                            "name": "Blocker",
                            "id": "1"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sfc-gh-nthimmegowda",
            "name": "sfc-gh-nthimmegowda",
            "key": "JIRAUSER294562",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Nishanth",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12337837",
                "id": "12337837",
                "name": "Parquet"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sfc-gh-nthimmegowda",
            "name": "sfc-gh-nthimmegowda",
            "key": "JIRAUSER294562",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Nishanth",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sfc-gh-nthimmegowda",
            "name": "sfc-gh-nthimmegowda",
            "key": "JIRAUSER294562",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Nishanth",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 34200,
            "total": 34200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 34200,
            "total": 34200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17450/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 57,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281/worklog/809306",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sfc-gh-nthimmegowda opened a new pull request, #14147:\nURL: https://github.com/apache/arrow/pull/14147\n\n   ARROW-17450\r\n   \r\n   Currently, parquet-cpp does not support columns encoded with RLE encoding. Although the users of RLE encoding are quite sparse with uses of one of the 3 types [Repetition and definition levels, dictionary indices and boolean values in data pages], some implementations do encode this directly on boolean columns (Athena on AWS). Even though there is encoding and decoding support for repetition and definition levels, there is no support for boolean column with RLE encoding. \r\n   \r\n   This PR integrates the column scanning to support columns with RLE encoding. The first 4 bytes of the data length are size of the encoded data, which is parsed first and then passes to decoder. \r\n   \r\n   Added a test with rle boolean encoded parquet file to validate that values can be parsed individually and in batch. \n\n\n",
                    "created": "2022-09-15T20:30:51.101+0000",
                    "updated": "2022-09-15T20:30:51.101+0000",
                    "started": "2022-09-15T20:30:51.101+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809306",
                    "issueId": "13477281"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281/worklog/809323",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14147:\nURL: https://github.com/apache/arrow/pull/14147#issuecomment-1248637407\n\n   https://issues.apache.org/jira/browse/ARROW-17450\n\n\n",
                    "created": "2022-09-15T21:13:17.042+0000",
                    "updated": "2022-09-15T21:13:17.042+0000",
                    "started": "2022-09-15T21:13:17.042+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809323",
                    "issueId": "13477281"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281/worklog/809324",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14147:\nURL: https://github.com/apache/arrow/pull/14147#issuecomment-1248637449\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-09-15T21:13:18.490+0000",
                    "updated": "2022-09-15T21:13:18.490+0000",
                    "started": "2022-09-15T21:13:18.490+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809324",
                    "issueId": "13477281"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281/worklog/809353",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sfc-gh-nthimmegowda commented on PR #14147:\nURL: https://github.com/apache/arrow/pull/14147#issuecomment-1248778935\n\n   @kou Could you please review this change?\n\n\n",
                    "created": "2022-09-16T00:21:00.595+0000",
                    "updated": "2022-09-16T00:21:00.595+0000",
                    "started": "2022-09-16T00:21:00.595+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809353",
                    "issueId": "13477281"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281/worklog/809459",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #14147:\nURL: https://github.com/apache/arrow/pull/14147#discussion_r972757477\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2355,6 +2355,83 @@ class DeltaLengthByteArrayDecoder : public DecoderImpl,\n   std::shared_ptr<ResizableBuffer> buffered_data_;\n };\n \n+// ----------------------------------------------------------------------\n+// RLE_BOOLEAN_DECODER\n+\n+class RleBooleanDecoder : public DecoderImpl,  virtual public BooleanDecoder {\n+\n+  public:\n+    explicit RleBooleanDecoder(const ColumnDescriptor* descr)\n+            :DecoderImpl(descr, Encoding::RLE) {}\n+\n+    void SetData(int num_values, const uint8_t* data, int len) override {\n+      num_values_ = num_values;\n+      int32_t num_bytes = 0;\n+\n+      if (len < 4) {\n+        throw ParquetException(\"Received invalid length (corrupt data page?)\");\n\nReview Comment:\n   How about showing the invalid length too?\n\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2355,6 +2355,83 @@ class DeltaLengthByteArrayDecoder : public DecoderImpl,\n   std::shared_ptr<ResizableBuffer> buffered_data_;\n };\n \n+// ----------------------------------------------------------------------\n+// RLE_BOOLEAN_DECODER\n+\n+class RleBooleanDecoder : public DecoderImpl,  virtual public BooleanDecoder {\n+\n+  public:\n+    explicit RleBooleanDecoder(const ColumnDescriptor* descr)\n+            :DecoderImpl(descr, Encoding::RLE) {}\n+\n+    void SetData(int num_values, const uint8_t* data, int len) override {\n+      num_values_ = num_values;\n+      int32_t num_bytes = 0;\n+\n+      if (len < 4) {\n+        throw ParquetException(\"Received invalid length (corrupt data page?)\");\n+      }\n+      // Load the first 4 bytes, which indicates the legnth\n+      num_bytes = ::arrow::util::SafeLoadAs<int32_t>(data);\n+      if (num_bytes < 0 || num_bytes > len - 4) {\n+        throw ParquetException(\"Received invalid number of bytes (corrupt data page?)\");\n\nReview Comment:\n   Could you also show the invalid value?\n\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2355,6 +2355,83 @@ class DeltaLengthByteArrayDecoder : public DecoderImpl,\n   std::shared_ptr<ResizableBuffer> buffered_data_;\n };\n \n+// ----------------------------------------------------------------------\n+// RLE_BOOLEAN_DECODER\n+\n+class RleBooleanDecoder : public DecoderImpl,  virtual public BooleanDecoder {\n+\n+  public:\n+    explicit RleBooleanDecoder(const ColumnDescriptor* descr)\n+            :DecoderImpl(descr, Encoding::RLE) {}\n+\n+    void SetData(int num_values, const uint8_t* data, int len) override {\n+      num_values_ = num_values;\n+      int32_t num_bytes = 0;\n+\n+      if (len < 4) {\n+        throw ParquetException(\"Received invalid length (corrupt data page?)\");\n+      }\n+      // Load the first 4 bytes, which indicates the legnth\n+      num_bytes = ::arrow::util::SafeLoadAs<int32_t>(data);\n+      if (num_bytes < 0 || num_bytes > len - 4) {\n+        throw ParquetException(\"Received invalid number of bytes (corrupt data page?)\");\n+      }\n+\n+      const uint8_t* decoder_data = data + 4;\n+      if (len == 0) {\n\nReview Comment:\n   It seems that `len` is always `>= 4` here.\n\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2762,6 +2839,11 @@ std::unique_ptr<Decoder> MakeDecoder(Type::type type_num, Encoding::type encodin\n       return std::unique_ptr<Decoder>(new DeltaLengthByteArrayDecoder(descr));\n     }\n     throw ParquetException(\"DELTA_LENGTH_BYTE_ARRAY only supports BYTE_ARRAY\");\n+  } else if (encoding == Encoding::RLE) {\n+    if (type_num == Type::BOOLEAN) {\n+      return std::unique_ptr<Decoder>(new RleBooleanDecoder(descr));\n+    }\n+    throw ParquetException(\"RLE encoding only supports BINARY\");\n\nReview Comment:\n   boolean?\n\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2355,6 +2355,83 @@ class DeltaLengthByteArrayDecoder : public DecoderImpl,\n   std::shared_ptr<ResizableBuffer> buffered_data_;\n };\n \n+// ----------------------------------------------------------------------\n+// RLE_BOOLEAN_DECODER\n+\n+class RleBooleanDecoder : public DecoderImpl,  virtual public BooleanDecoder {\n+\n+  public:\n+    explicit RleBooleanDecoder(const ColumnDescriptor* descr)\n+            :DecoderImpl(descr, Encoding::RLE) {}\n+\n+    void SetData(int num_values, const uint8_t* data, int len) override {\n+      num_values_ = num_values;\n+      int32_t num_bytes = 0;\n+\n+      if (len < 4) {\n+        throw ParquetException(\"Received invalid length (corrupt data page?)\");\n+      }\n+      // Load the first 4 bytes, which indicates the legnth\n+      num_bytes = ::arrow::util::SafeLoadAs<int32_t>(data);\n\nReview Comment:\n   `uint32_t`?\r\n   \r\n   https://parquet.apache.org/docs/file-format/data-pages/encodings/#a-namerlearun-length-encoding--bit-packing-hybrid-rle--3\r\n   \r\n   > length := length of the <encoded-data> in bytes stored as 4 bytes little endian (unsigned int32)\r\n   \r\n   Could you parse this as little endian value on both little/big endian environment?\r\n   \r\n   We may be able to use `arrow/util/endian.h` for it...\n\n\n\n",
                    "created": "2022-09-16T08:48:20.585+0000",
                    "updated": "2022-09-16T08:48:20.585+0000",
                    "started": "2022-09-16T08:48:20.585+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809459",
                    "issueId": "13477281"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281/worklog/809841",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sfc-gh-nthimmegowda commented on code in PR #14147:\nURL: https://github.com/apache/arrow/pull/14147#discussion_r973666767\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2355,6 +2355,83 @@ class DeltaLengthByteArrayDecoder : public DecoderImpl,\n   std::shared_ptr<ResizableBuffer> buffered_data_;\n };\n \n+// ----------------------------------------------------------------------\n+// RLE_BOOLEAN_DECODER\n+\n+class RleBooleanDecoder : public DecoderImpl,  virtual public BooleanDecoder {\n+\n+  public:\n+    explicit RleBooleanDecoder(const ColumnDescriptor* descr)\n+            :DecoderImpl(descr, Encoding::RLE) {}\n+\n+    void SetData(int num_values, const uint8_t* data, int len) override {\n+      num_values_ = num_values;\n+      int32_t num_bytes = 0;\n+\n+      if (len < 4) {\n+        throw ParquetException(\"Received invalid length (corrupt data page?)\");\n\nReview Comment:\n   Modified error message to show invalid length. \n\n\n\n",
                    "created": "2022-09-18T06:18:28.212+0000",
                    "updated": "2022-09-18T06:18:28.212+0000",
                    "started": "2022-09-18T06:18:28.212+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809841",
                    "issueId": "13477281"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281/worklog/809842",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sfc-gh-nthimmegowda commented on code in PR #14147:\nURL: https://github.com/apache/arrow/pull/14147#discussion_r973666794\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2355,6 +2355,83 @@ class DeltaLengthByteArrayDecoder : public DecoderImpl,\n   std::shared_ptr<ResizableBuffer> buffered_data_;\n };\n \n+// ----------------------------------------------------------------------\n+// RLE_BOOLEAN_DECODER\n+\n+class RleBooleanDecoder : public DecoderImpl,  virtual public BooleanDecoder {\n+\n+  public:\n+    explicit RleBooleanDecoder(const ColumnDescriptor* descr)\n+            :DecoderImpl(descr, Encoding::RLE) {}\n+\n+    void SetData(int num_values, const uint8_t* data, int len) override {\n+      num_values_ = num_values;\n+      int32_t num_bytes = 0;\n+\n+      if (len < 4) {\n+        throw ParquetException(\"Received invalid length (corrupt data page?)\");\n+      }\n+      // Load the first 4 bytes, which indicates the legnth\n+      num_bytes = ::arrow::util::SafeLoadAs<int32_t>(data);\n\nReview Comment:\n   Converted to unsignedint32_t and parsed as little endian. \n\n\n\n",
                    "created": "2022-09-18T06:18:58.286+0000",
                    "updated": "2022-09-18T06:18:58.286+0000",
                    "started": "2022-09-18T06:18:58.285+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809842",
                    "issueId": "13477281"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281/worklog/809844",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sfc-gh-nthimmegowda commented on code in PR #14147:\nURL: https://github.com/apache/arrow/pull/14147#discussion_r973666835\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2355,6 +2355,83 @@ class DeltaLengthByteArrayDecoder : public DecoderImpl,\n   std::shared_ptr<ResizableBuffer> buffered_data_;\n };\n \n+// ----------------------------------------------------------------------\n+// RLE_BOOLEAN_DECODER\n+\n+class RleBooleanDecoder : public DecoderImpl,  virtual public BooleanDecoder {\n+\n+  public:\n+    explicit RleBooleanDecoder(const ColumnDescriptor* descr)\n+            :DecoderImpl(descr, Encoding::RLE) {}\n+\n+    void SetData(int num_values, const uint8_t* data, int len) override {\n+      num_values_ = num_values;\n+      int32_t num_bytes = 0;\n+\n+      if (len < 4) {\n+        throw ParquetException(\"Received invalid length (corrupt data page?)\");\n+      }\n+      // Load the first 4 bytes, which indicates the legnth\n+      num_bytes = ::arrow::util::SafeLoadAs<int32_t>(data);\n+      if (num_bytes < 0 || num_bytes > len - 4) {\n+        throw ParquetException(\"Received invalid number of bytes (corrupt data page?)\");\n+      }\n+\n+      const uint8_t* decoder_data = data + 4;\n+      if (len == 0) {\n\nReview Comment:\n   Agreed. This check is unnecessary. Removed. \n\n\n\n",
                    "created": "2022-09-18T06:19:13.358+0000",
                    "updated": "2022-09-18T06:19:13.358+0000",
                    "started": "2022-09-18T06:19:13.357+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809844",
                    "issueId": "13477281"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281/worklog/809845",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sfc-gh-nthimmegowda commented on code in PR #14147:\nURL: https://github.com/apache/arrow/pull/14147#discussion_r973666860\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2355,6 +2355,83 @@ class DeltaLengthByteArrayDecoder : public DecoderImpl,\n   std::shared_ptr<ResizableBuffer> buffered_data_;\n };\n \n+// ----------------------------------------------------------------------\n+// RLE_BOOLEAN_DECODER\n+\n+class RleBooleanDecoder : public DecoderImpl,  virtual public BooleanDecoder {\n+\n+  public:\n+    explicit RleBooleanDecoder(const ColumnDescriptor* descr)\n+            :DecoderImpl(descr, Encoding::RLE) {}\n+\n+    void SetData(int num_values, const uint8_t* data, int len) override {\n+      num_values_ = num_values;\n+      int32_t num_bytes = 0;\n+\n+      if (len < 4) {\n+        throw ParquetException(\"Received invalid length (corrupt data page?)\");\n+      }\n+      // Load the first 4 bytes, which indicates the legnth\n+      num_bytes = ::arrow::util::SafeLoadAs<int32_t>(data);\n+      if (num_bytes < 0 || num_bytes > len - 4) {\n+        throw ParquetException(\"Received invalid number of bytes (corrupt data page?)\");\n\nReview Comment:\n   Modified error message to show invalid bytes value. \n\n\n\n",
                    "created": "2022-09-18T06:19:28.361+0000",
                    "updated": "2022-09-18T06:19:28.361+0000",
                    "started": "2022-09-18T06:19:28.361+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809845",
                    "issueId": "13477281"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281/worklog/809846",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sfc-gh-nthimmegowda commented on code in PR #14147:\nURL: https://github.com/apache/arrow/pull/14147#discussion_r973666875\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2762,6 +2839,11 @@ std::unique_ptr<Decoder> MakeDecoder(Type::type type_num, Encoding::type encodin\n       return std::unique_ptr<Decoder>(new DeltaLengthByteArrayDecoder(descr));\n     }\n     throw ParquetException(\"DELTA_LENGTH_BYTE_ARRAY only supports BYTE_ARRAY\");\n+  } else if (encoding == Encoding::RLE) {\n+    if (type_num == Type::BOOLEAN) {\n+      return std::unique_ptr<Decoder>(new RleBooleanDecoder(descr));\n+    }\n+    throw ParquetException(\"RLE encoding only supports BINARY\");\n\nReview Comment:\n   Ooops. My bad. Changed to BOOLEAN. \n\n\n\n",
                    "created": "2022-09-18T06:19:43.418+0000",
                    "updated": "2022-09-18T06:19:43.418+0000",
                    "started": "2022-09-18T06:19:43.417+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809846",
                    "issueId": "13477281"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281/worklog/809847",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sfc-gh-nthimmegowda commented on PR #14147:\nURL: https://github.com/apache/arrow/pull/14147#issuecomment-1250201672\n\n   > Could you fix style by `cmake --build BUILD_DIR --config Debug --target format`?\r\n   \r\n   Ack. Ran `--target format` . Had changes in 2 other files which I included since those were minor. \n\n\n",
                    "created": "2022-09-18T06:20:24.842+0000",
                    "updated": "2022-09-18T06:20:24.842+0000",
                    "started": "2022-09-18T06:20:24.841+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809847",
                    "issueId": "13477281"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281/worklog/809890",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #14147:\nURL: https://github.com/apache/arrow/pull/14147#discussion_r973778431\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2355,6 +2355,80 @@ class DeltaLengthByteArrayDecoder : public DecoderImpl,\n   std::shared_ptr<ResizableBuffer> buffered_data_;\n };\n \n+// ----------------------------------------------------------------------\n+// RLE_BOOLEAN_DECODER\n+\n+class RleBooleanDecoder : public DecoderImpl, virtual public BooleanDecoder {\n+ public:\n+  explicit RleBooleanDecoder(const ColumnDescriptor* descr)\n+      : DecoderImpl(descr, Encoding::RLE) {}\n+\n+  void SetData(int num_values, const uint8_t* data, int len) override {\n+    num_values_ = num_values;\n+    uint32_t num_bytes = 0;\n+\n+    if (len < 4) {\n+      throw ParquetException(\"Received invalid length : \" + std::to_string(len) +\n+                             \" (corrupt data page?)\");\n+    }\n+    // Load the first 4 bytes in little-endian, which indicates the length\n+    num_bytes =\n+        ::arrow::bit_util::ToLittleEndian(::arrow::util::SafeLoadAs<uint32_t>(data));\n+    if (num_bytes < 0 || num_bytes > (uint32_t)(len - 4)) {\n+      throw ParquetException(\"Received invalid number of bytes : \" +\n+                             std::to_string(num_bytes) + \" (corrupt data page?)\");\n+    }\n+\n+    const uint8_t* decoder_data = data + 4;\n+    decoder_ = std::make_shared<::arrow::util::RleDecoder>(decoder_data, num_bytes,\n+                                                           /*bit_width=*/1);\n+  }\n+\n+  int Decode(bool* buffer, int max_values) override {\n+    max_values = std::min(max_values, num_values_);\n+    int val = 0;\n\nReview Comment:\n   `bool`?\r\n   \r\n   Or can we use `decoder_->GetBatch()` in this method too?\n\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2355,6 +2355,80 @@ class DeltaLengthByteArrayDecoder : public DecoderImpl,\n   std::shared_ptr<ResizableBuffer> buffered_data_;\n };\n \n+// ----------------------------------------------------------------------\n+// RLE_BOOLEAN_DECODER\n+\n+class RleBooleanDecoder : public DecoderImpl, virtual public BooleanDecoder {\n+ public:\n+  explicit RleBooleanDecoder(const ColumnDescriptor* descr)\n+      : DecoderImpl(descr, Encoding::RLE) {}\n+\n+  void SetData(int num_values, const uint8_t* data, int len) override {\n+    num_values_ = num_values;\n+    uint32_t num_bytes = 0;\n+\n+    if (len < 4) {\n+      throw ParquetException(\"Received invalid length : \" + std::to_string(len) +\n+                             \" (corrupt data page?)\");\n+    }\n+    // Load the first 4 bytes in little-endian, which indicates the length\n+    num_bytes =\n+        ::arrow::bit_util::ToLittleEndian(::arrow::util::SafeLoadAs<uint32_t>(data));\n+    if (num_bytes < 0 || num_bytes > (uint32_t)(len - 4)) {\n+      throw ParquetException(\"Received invalid number of bytes : \" +\n+                             std::to_string(num_bytes) + \" (corrupt data page?)\");\n+    }\n+\n+    const uint8_t* decoder_data = data + 4;\n+    decoder_ = std::make_shared<::arrow::util::RleDecoder>(decoder_data, num_bytes,\n+                                                           /*bit_width=*/1);\n+  }\n+\n+  int Decode(bool* buffer, int max_values) override {\n+    max_values = std::min(max_values, num_values_);\n+    int val = 0;\n+\n+    for (int i = 0; i < max_values; ++i) {\n+      if (!decoder_->Get(&val)) {\n+        throw ParquetException(\"Unable to parse bits (corrupt data page?)\");\n\nReview Comment:\n   Can we also show invalid position?\n\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2355,6 +2355,80 @@ class DeltaLengthByteArrayDecoder : public DecoderImpl,\n   std::shared_ptr<ResizableBuffer> buffered_data_;\n };\n \n+// ----------------------------------------------------------------------\n+// RLE_BOOLEAN_DECODER\n+\n+class RleBooleanDecoder : public DecoderImpl, virtual public BooleanDecoder {\n+ public:\n+  explicit RleBooleanDecoder(const ColumnDescriptor* descr)\n+      : DecoderImpl(descr, Encoding::RLE) {}\n+\n+  void SetData(int num_values, const uint8_t* data, int len) override {\n+    num_values_ = num_values;\n+    uint32_t num_bytes = 0;\n+\n+    if (len < 4) {\n+      throw ParquetException(\"Received invalid length : \" + std::to_string(len) +\n+                             \" (corrupt data page?)\");\n+    }\n+    // Load the first 4 bytes in little-endian, which indicates the length\n+    num_bytes =\n+        ::arrow::bit_util::ToLittleEndian(::arrow::util::SafeLoadAs<uint32_t>(data));\n+    if (num_bytes < 0 || num_bytes > (uint32_t)(len - 4)) {\n+      throw ParquetException(\"Received invalid number of bytes : \" +\n+                             std::to_string(num_bytes) + \" (corrupt data page?)\");\n+    }\n+\n+    const uint8_t* decoder_data = data + 4;\n\nReview Comment:\n   ```suggestion\r\n       auto decoder_data = data + 4;\r\n   ```\n\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2355,6 +2355,80 @@ class DeltaLengthByteArrayDecoder : public DecoderImpl,\n   std::shared_ptr<ResizableBuffer> buffered_data_;\n };\n \n+// ----------------------------------------------------------------------\n+// RLE_BOOLEAN_DECODER\n+\n+class RleBooleanDecoder : public DecoderImpl, virtual public BooleanDecoder {\n+ public:\n+  explicit RleBooleanDecoder(const ColumnDescriptor* descr)\n+      : DecoderImpl(descr, Encoding::RLE) {}\n+\n+  void SetData(int num_values, const uint8_t* data, int len) override {\n+    num_values_ = num_values;\n+    uint32_t num_bytes = 0;\n+\n+    if (len < 4) {\n+      throw ParquetException(\"Received invalid length : \" + std::to_string(len) +\n+                             \" (corrupt data page?)\");\n+    }\n+    // Load the first 4 bytes in little-endian, which indicates the length\n+    num_bytes =\n+        ::arrow::bit_util::ToLittleEndian(::arrow::util::SafeLoadAs<uint32_t>(data));\n+    if (num_bytes < 0 || num_bytes > (uint32_t)(len - 4)) {\n\nReview Comment:\n   ```suggestion\r\n       if (num_bytes < 0 || num_bytes > static_cast<uint32_t>(len - 4)) {\r\n   ```\n\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2355,6 +2355,80 @@ class DeltaLengthByteArrayDecoder : public DecoderImpl,\n   std::shared_ptr<ResizableBuffer> buffered_data_;\n };\n \n+// ----------------------------------------------------------------------\n+// RLE_BOOLEAN_DECODER\n+\n+class RleBooleanDecoder : public DecoderImpl, virtual public BooleanDecoder {\n+ public:\n+  explicit RleBooleanDecoder(const ColumnDescriptor* descr)\n+      : DecoderImpl(descr, Encoding::RLE) {}\n+\n+  void SetData(int num_values, const uint8_t* data, int len) override {\n+    num_values_ = num_values;\n+    uint32_t num_bytes = 0;\n+\n+    if (len < 4) {\n+      throw ParquetException(\"Received invalid length : \" + std::to_string(len) +\n+                             \" (corrupt data page?)\");\n+    }\n+    // Load the first 4 bytes in little-endian, which indicates the length\n+    num_bytes =\n+        ::arrow::bit_util::ToLittleEndian(::arrow::util::SafeLoadAs<uint32_t>(data));\n+    if (num_bytes < 0 || num_bytes > (uint32_t)(len - 4)) {\n+      throw ParquetException(\"Received invalid number of bytes : \" +\n+                             std::to_string(num_bytes) + \" (corrupt data page?)\");\n+    }\n+\n+    const uint8_t* decoder_data = data + 4;\n+    decoder_ = std::make_shared<::arrow::util::RleDecoder>(decoder_data, num_bytes,\n+                                                           /*bit_width=*/1);\n+  }\n+\n+  int Decode(bool* buffer, int max_values) override {\n+    max_values = std::min(max_values, num_values_);\n+    int val = 0;\n+\n+    for (int i = 0; i < max_values; ++i) {\n+      if (!decoder_->Get(&val)) {\n+        throw ParquetException(\"Unable to parse bits (corrupt data page?)\");\n+      }\n+      if (val) {\n+        buffer[i] = true;\n+      } else {\n+        buffer[i] = false;\n+      }\n+    }\n+    num_values_ -= max_values;\n+    return max_values;\n+  }\n+\n+  int Decode(uint8_t* buffer, int max_values) {\n+    max_values = std::min(max_values, num_values_);\n+    if (!decoder_->GetBatch(buffer, max_values)) {\n+      ParquetException::EofException();\n+    }\n+\n+    num_values_ -= max_values;\n\nReview Comment:\n   It seems that `decoder_->GetBatch()` returns the number of read values. It may be smaller than `max_values`. So this may cause invalid `num_values_`.\n\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2355,6 +2355,80 @@ class DeltaLengthByteArrayDecoder : public DecoderImpl,\n   std::shared_ptr<ResizableBuffer> buffered_data_;\n };\n \n+// ----------------------------------------------------------------------\n+// RLE_BOOLEAN_DECODER\n+\n+class RleBooleanDecoder : public DecoderImpl, virtual public BooleanDecoder {\n+ public:\n+  explicit RleBooleanDecoder(const ColumnDescriptor* descr)\n+      : DecoderImpl(descr, Encoding::RLE) {}\n+\n+  void SetData(int num_values, const uint8_t* data, int len) override {\n+    num_values_ = num_values;\n+    uint32_t num_bytes = 0;\n+\n+    if (len < 4) {\n+      throw ParquetException(\"Received invalid length : \" + std::to_string(len) +\n+                             \" (corrupt data page?)\");\n+    }\n+    // Load the first 4 bytes in little-endian, which indicates the length\n+    num_bytes =\n+        ::arrow::bit_util::ToLittleEndian(::arrow::util::SafeLoadAs<uint32_t>(data));\n+    if (num_bytes < 0 || num_bytes > (uint32_t)(len - 4)) {\n+      throw ParquetException(\"Received invalid number of bytes : \" +\n+                             std::to_string(num_bytes) + \" (corrupt data page?)\");\n+    }\n+\n+    const uint8_t* decoder_data = data + 4;\n+    decoder_ = std::make_shared<::arrow::util::RleDecoder>(decoder_data, num_bytes,\n+                                                           /*bit_width=*/1);\n+  }\n+\n+  int Decode(bool* buffer, int max_values) override {\n+    max_values = std::min(max_values, num_values_);\n+    int val = 0;\n+\n+    for (int i = 0; i < max_values; ++i) {\n+      if (!decoder_->Get(&val)) {\n+        throw ParquetException(\"Unable to parse bits (corrupt data page?)\");\n+      }\n+      if (val) {\n+        buffer[i] = true;\n+      } else {\n+        buffer[i] = false;\n+      }\n+    }\n+    num_values_ -= max_values;\n+    return max_values;\n+  }\n+\n+  int Decode(uint8_t* buffer, int max_values) {\n\nReview Comment:\n   `override` is missing?\r\n   \r\n   https://github.com/apache/arrow/actions/runs/3076096805/jobs/4970024700#step:6:1903\r\n   \r\n   ```text\r\n   FAILED: src/parquet/CMakeFiles/parquet_objlib.dir/encoding.cc.o \r\n   /usr/bin/ccache /usr/lib/ccache/clang++-12  -DARROW_HAVE_RUNTIME_AVX2 -DARROW_HAVE_RUNTIME_AVX512 -DARROW_HAVE_RUNTIME_BMI2 -DARROW_HAVE_RUNTIME_SSE4_2 -DARROW_HAVE_SSE4_2 -DARROW_NO_DEPRECATED_API -DARROW_UBSAN -DARROW_WITH_BROTLI -DARROW_WITH_BZ2 -DARROW_WITH_LZ4 -DARROW_WITH_RE2 -DARROW_WITH_SNAPPY -DARROW_WITH_UTF8PROC -DARROW_WITH_ZLIB -DARROW_WITH_ZSTD -DBOOST_ALL_NO_LIB -DHAVE_INTTYPES_H -DHAVE_NETDB_H -DHAVE_NETINET_IN_H -DPARQUET_EXPORTING -DPARQUET_THRIFT_VERSION_MAJOR=0 -DPARQUET_THRIFT_VERSION_MINOR=13 -DUTF8PROC_STATIC -Isrc -I/arrow/cpp/src -I/arrow/cpp/src/generated -isystem /arrow/cpp/thirdparty/flatbuffers/include -isystem /arrow/cpp/thirdparty/hadoop/include -isystem google_cloud_cpp_ep-install/include -isystem absl_ep-install/include -isystem crc32c_ep-install/include -isystem opentelemetry_ep-install/include -isystem protobuf_ep-install/include -isystem utf8proc_ep-install/include -isystem xsimd_ep/src/xsimd_ep-install/include -Qunused-arguments -fcolor-diagnostics -ggdb -O0  -Wall -Wextra -Wdocumentation -Wshorten-64-to-32 -Wno-missing-braces -Wno-unused-parameter -Wno-constant-logical-operand -Wno-return-stack-address -Werror -Wno-unknown-warning-option -Wno-pass-failed -msse4.2  -fsanitize=address -DADDRESS_SANITIZER -fsanitize=undefined -fno-sanitize=alignment,vptr,function,float-divide-by-zero -fno-sanitize-recover=all -fsanitize-coverage=pc-table,inline-8bit-counters,edge,no-prune,trace-cmp,trace-div,trace-gep -fsanitize-blacklist=/arrow/cpp/build-support/sanitizer-disallowed-entries.txt -g -fPIC   -fsanitize-coverage=pc-table,inline-8bit-counters,edge,no-prune,trace-cmp,trace-div,trace-gep -pthread -std=c++17 -MD -MT src/parquet/CMakeFiles/parquet_objlib.dir/encoding.cc.o -MF src/parquet/CMakeFiles/parquet_objlib.dir/encoding.cc.o.d -o src/parquet/CMakeFiles/parquet_objlib.dir/encoding.cc.o -c /arrow/cpp/src/parquet/encoding.cc\r\n   /arrow/cpp/src/parquet/encoding.cc:2405:7: error: 'Decode' overrides a member function but is not marked 'override' [-Werror,-Winconsistent-missing-override]\r\n     int Decode(uint8_t* buffer, int max_values) {\r\n         ^\r\n   /arrow/cpp/src/parquet/encoding.h:400:15: note: overridden virtual function is here\r\n     virtual int Decode(uint8_t* buffer, int max_values) = 0;\r\n                 ^\r\n   1 error generated.\r\n   ```\n\n\n\n##########\ncpp/src/parquet/level_comparison.cc:\n##########\n@@ -44,10 +44,10 @@ struct GreaterThanDynamicFunction {\n   using FunctionType = decltype(&GreaterThanBitmap);\n \n   static std::vector<std::pair<DispatchLevel, FunctionType>> implementations() {\n-    return {\n-      { DispatchLevel::NONE, standard::GreaterThanBitmapImpl }\n+    return {{DispatchLevel::NONE, standard::GreaterThanBitmapImpl}\n #if defined(ARROW_HAVE_RUNTIME_AVX2)\n-      , { DispatchLevel::AVX2, GreaterThanBitmapAvx2 }\n+            ,\n+            {DispatchLevel::AVX2, GreaterThanBitmapAvx2}\n\nReview Comment:\n   Hmm, you might not use `clang-format-12`:\r\n   \r\n   https://github.com/apache/arrow/actions/runs/3076096806/jobs/4970024641#step:5:869\r\n   \r\n   ```text\r\n   FAILED: CMakeFiles/check-format \r\n   cd /tmp/arrow-lint-mbv5v4zf/cpp-build && /usr/local/bin/python /arrow/cpp/build-support/run_clang_format.py --clang_format_binary /usr/bin/clang-format-12 --exclude_globs /arrow/cpp/build-support/lint_exclusions.txt --source_dir /arrow/cpp/src --source_dir /arrow/cpp/examples --source_dir /arrow/cpp/tools --quiet\r\n   \r\n   -",
                    "created": "2022-09-18T21:47:09.072+0000",
                    "updated": "2022-09-18T21:47:09.072+0000",
                    "started": "2022-09-18T21:47:09.071+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809890",
                    "issueId": "13477281"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281/worklog/810199",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sfc-gh-nthimmegowda commented on code in PR #14147:\nURL: https://github.com/apache/arrow/pull/14147#discussion_r974762118\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2355,6 +2355,80 @@ class DeltaLengthByteArrayDecoder : public DecoderImpl,\n   std::shared_ptr<ResizableBuffer> buffered_data_;\n };\n \n+// ----------------------------------------------------------------------\n+// RLE_BOOLEAN_DECODER\n+\n+class RleBooleanDecoder : public DecoderImpl, virtual public BooleanDecoder {\n+ public:\n+  explicit RleBooleanDecoder(const ColumnDescriptor* descr)\n+      : DecoderImpl(descr, Encoding::RLE) {}\n+\n+  void SetData(int num_values, const uint8_t* data, int len) override {\n+    num_values_ = num_values;\n+    uint32_t num_bytes = 0;\n+\n+    if (len < 4) {\n+      throw ParquetException(\"Received invalid length : \" + std::to_string(len) +\n+                             \" (corrupt data page?)\");\n+    }\n+    // Load the first 4 bytes in little-endian, which indicates the length\n+    num_bytes =\n+        ::arrow::bit_util::ToLittleEndian(::arrow::util::SafeLoadAs<uint32_t>(data));\n+    if (num_bytes < 0 || num_bytes > (uint32_t)(len - 4)) {\n+      throw ParquetException(\"Received invalid number of bytes : \" +\n+                             std::to_string(num_bytes) + \" (corrupt data page?)\");\n+    }\n+\n+    const uint8_t* decoder_data = data + 4;\n+    decoder_ = std::make_shared<::arrow::util::RleDecoder>(decoder_data, num_bytes,\n+                                                           /*bit_width=*/1);\n+  }\n+\n+  int Decode(bool* buffer, int max_values) override {\n+    max_values = std::min(max_values, num_values_);\n+    int val = 0;\n+\n+    for (int i = 0; i < max_values; ++i) {\n+      if (!decoder_->Get(&val)) {\n+        throw ParquetException(\"Unable to parse bits (corrupt data page?)\");\n\nReview Comment:\n   Updated to show invalid position\n\n\n\n",
                    "created": "2022-09-19T23:25:14.072+0000",
                    "updated": "2022-09-19T23:25:14.072+0000",
                    "started": "2022-09-19T23:25:14.072+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "810199",
                    "issueId": "13477281"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281/worklog/810200",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sfc-gh-nthimmegowda commented on code in PR #14147:\nURL: https://github.com/apache/arrow/pull/14147#discussion_r974763276\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2355,6 +2355,80 @@ class DeltaLengthByteArrayDecoder : public DecoderImpl,\n   std::shared_ptr<ResizableBuffer> buffered_data_;\n };\n \n+// ----------------------------------------------------------------------\n+// RLE_BOOLEAN_DECODER\n+\n+class RleBooleanDecoder : public DecoderImpl, virtual public BooleanDecoder {\n+ public:\n+  explicit RleBooleanDecoder(const ColumnDescriptor* descr)\n+      : DecoderImpl(descr, Encoding::RLE) {}\n+\n+  void SetData(int num_values, const uint8_t* data, int len) override {\n+    num_values_ = num_values;\n+    uint32_t num_bytes = 0;\n+\n+    if (len < 4) {\n+      throw ParquetException(\"Received invalid length : \" + std::to_string(len) +\n+                             \" (corrupt data page?)\");\n+    }\n+    // Load the first 4 bytes in little-endian, which indicates the length\n+    num_bytes =\n+        ::arrow::bit_util::ToLittleEndian(::arrow::util::SafeLoadAs<uint32_t>(data));\n+    if (num_bytes < 0 || num_bytes > (uint32_t)(len - 4)) {\n+      throw ParquetException(\"Received invalid number of bytes : \" +\n+                             std::to_string(num_bytes) + \" (corrupt data page?)\");\n+    }\n+\n+    const uint8_t* decoder_data = data + 4;\n+    decoder_ = std::make_shared<::arrow::util::RleDecoder>(decoder_data, num_bytes,\n+                                                           /*bit_width=*/1);\n+  }\n+\n+  int Decode(bool* buffer, int max_values) override {\n+    max_values = std::min(max_values, num_values_);\n+    int val = 0;\n\nReview Comment:\n   Changing to `bool` or `decoder_->GetBatch()` fails in compilation stage. \r\n   \r\n   This barfs at compile time check with \r\n   ```\r\n   bit_stream_utils.h:415:41: error: no matching function for call to \u2018FromLittleEndian(bool&)\u2019\r\n     415 |   *v = arrow::bit_util::FromLittleEndian(*v);\r\n   \r\n   arrow/util/type_traits.h: In substitution of \u2018template<class T, class ... Args> using EnableIfIsOneOf = typename std::enable_if<arrow::internal::IsOneOf<T, Args ...>::value, T>::type [with T = bool; Args = {long int, long unsigned int, int, unsigned int, short int, short unsigned int, unsigned char, signed char, float, double}]\u2019:\r\n   ```\r\n   \r\n   \r\n   Code path \r\n   **RleDecoder::GetBatch(T*, int) -> RleDecoder::NextCounts() -> BitReader::GetAligned(int, T*)**\r\n   \r\n   In BitReader::GetAligned() :::: Line 415 , there is a call to bit_util::FromLittleEndian. \r\n   However FromLittleEndian can be called on only one of the following types int8...int64, float and double, whereas in this case it is bool All the accepted values are at the byte boundary / 8 bits -",
                    "created": "2022-09-19T23:28:04.270+0000",
                    "updated": "2022-09-19T23:28:04.270+0000",
                    "started": "2022-09-19T23:28:04.269+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "810200",
                    "issueId": "13477281"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281/worklog/810201",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sfc-gh-nthimmegowda commented on code in PR #14147:\nURL: https://github.com/apache/arrow/pull/14147#discussion_r974763886\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2355,6 +2355,80 @@ class DeltaLengthByteArrayDecoder : public DecoderImpl,\n   std::shared_ptr<ResizableBuffer> buffered_data_;\n };\n \n+// ----------------------------------------------------------------------\n+// RLE_BOOLEAN_DECODER\n+\n+class RleBooleanDecoder : public DecoderImpl, virtual public BooleanDecoder {\n+ public:\n+  explicit RleBooleanDecoder(const ColumnDescriptor* descr)\n+      : DecoderImpl(descr, Encoding::RLE) {}\n+\n+  void SetData(int num_values, const uint8_t* data, int len) override {\n+    num_values_ = num_values;\n+    uint32_t num_bytes = 0;\n+\n+    if (len < 4) {\n+      throw ParquetException(\"Received invalid length : \" + std::to_string(len) +\n+                             \" (corrupt data page?)\");\n+    }\n+    // Load the first 4 bytes in little-endian, which indicates the length\n+    num_bytes =\n+        ::arrow::bit_util::ToLittleEndian(::arrow::util::SafeLoadAs<uint32_t>(data));\n+    if (num_bytes < 0 || num_bytes > (uint32_t)(len - 4)) {\n+      throw ParquetException(\"Received invalid number of bytes : \" +\n+                             std::to_string(num_bytes) + \" (corrupt data page?)\");\n+    }\n+\n+    const uint8_t* decoder_data = data + 4;\n+    decoder_ = std::make_shared<::arrow::util::RleDecoder>(decoder_data, num_bytes,\n+                                                           /*bit_width=*/1);\n+  }\n+\n+  int Decode(bool* buffer, int max_values) override {\n+    max_values = std::min(max_values, num_values_);\n+    int val = 0;\n+\n+    for (int i = 0; i < max_values; ++i) {\n+      if (!decoder_->Get(&val)) {\n+        throw ParquetException(\"Unable to parse bits (corrupt data page?)\");\n+      }\n+      if (val) {\n+        buffer[i] = true;\n+      } else {\n+        buffer[i] = false;\n+      }\n+    }\n+    num_values_ -= max_values;\n+    return max_values;\n+  }\n+\n+  int Decode(uint8_t* buffer, int max_values) {\n+    max_values = std::min(max_values, num_values_);\n+    if (!decoder_->GetBatch(buffer, max_values)) {\n+      ParquetException::EofException();\n+    }\n+\n+    num_values_ -= max_values;\n\nReview Comment:\n   Agreed. Changed to validate that number of read values is equal to `max_values` . This makes it inline with rest of GetBatch()\n\n\n\n",
                    "created": "2022-09-19T23:29:39.419+0000",
                    "updated": "2022-09-19T23:29:39.419+0000",
                    "started": "2022-09-19T23:29:39.419+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "810201",
                    "issueId": "13477281"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281/worklog/810202",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sfc-gh-nthimmegowda commented on code in PR #14147:\nURL: https://github.com/apache/arrow/pull/14147#discussion_r974763965\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2355,6 +2355,80 @@ class DeltaLengthByteArrayDecoder : public DecoderImpl,\n   std::shared_ptr<ResizableBuffer> buffered_data_;\n };\n \n+// ----------------------------------------------------------------------\n+// RLE_BOOLEAN_DECODER\n+\n+class RleBooleanDecoder : public DecoderImpl, virtual public BooleanDecoder {\n+ public:\n+  explicit RleBooleanDecoder(const ColumnDescriptor* descr)\n+      : DecoderImpl(descr, Encoding::RLE) {}\n+\n+  void SetData(int num_values, const uint8_t* data, int len) override {\n+    num_values_ = num_values;\n+    uint32_t num_bytes = 0;\n+\n+    if (len < 4) {\n+      throw ParquetException(\"Received invalid length : \" + std::to_string(len) +\n+                             \" (corrupt data page?)\");\n+    }\n+    // Load the first 4 bytes in little-endian, which indicates the length\n+    num_bytes =\n+        ::arrow::bit_util::ToLittleEndian(::arrow::util::SafeLoadAs<uint32_t>(data));\n+    if (num_bytes < 0 || num_bytes > (uint32_t)(len - 4)) {\n+      throw ParquetException(\"Received invalid number of bytes : \" +\n+                             std::to_string(num_bytes) + \" (corrupt data page?)\");\n+    }\n+\n+    const uint8_t* decoder_data = data + 4;\n+    decoder_ = std::make_shared<::arrow::util::RleDecoder>(decoder_data, num_bytes,\n+                                                           /*bit_width=*/1);\n+  }\n+\n+  int Decode(bool* buffer, int max_values) override {\n+    max_values = std::min(max_values, num_values_);\n+    int val = 0;\n+\n+    for (int i = 0; i < max_values; ++i) {\n+      if (!decoder_->Get(&val)) {\n+        throw ParquetException(\"Unable to parse bits (corrupt data page?)\");\n+      }\n+      if (val) {\n+        buffer[i] = true;\n+      } else {\n+        buffer[i] = false;\n+      }\n+    }\n+    num_values_ -= max_values;\n+    return max_values;\n+  }\n+\n+  int Decode(uint8_t* buffer, int max_values) {\n\nReview Comment:\n   Oops ! My bad . Added\n\n\n\n",
                    "created": "2022-09-19T23:29:54.484+0000",
                    "updated": "2022-09-19T23:29:54.484+0000",
                    "started": "2022-09-19T23:29:54.484+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "810202",
                    "issueId": "13477281"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281/worklog/810203",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sfc-gh-nthimmegowda commented on code in PR #14147:\nURL: https://github.com/apache/arrow/pull/14147#discussion_r974764215\n\n\n##########\ncpp/src/parquet/level_comparison.cc:\n##########\n@@ -44,10 +44,10 @@ struct GreaterThanDynamicFunction {\n   using FunctionType = decltype(&GreaterThanBitmap);\n \n   static std::vector<std::pair<DispatchLevel, FunctionType>> implementations() {\n-    return {\n-      { DispatchLevel::NONE, standard::GreaterThanBitmapImpl }\n+    return {{DispatchLevel::NONE, standard::GreaterThanBitmapImpl}\n #if defined(ARROW_HAVE_RUNTIME_AVX2)\n-      , { DispatchLevel::AVX2, GreaterThanBitmapAvx2 }\n+            ,\n+            {DispatchLevel::AVX2, GreaterThanBitmapAvx2}\n\nReview Comment:\n   You are right. I was using clang-format-14. Changed to use clang-format-12 and this gets it inline. \r\n   Waiting for Merge gates validation. \n\n\n\n",
                    "created": "2022-09-19T23:30:29.854+0000",
                    "updated": "2022-09-19T23:30:29.854+0000",
                    "started": "2022-09-19T23:30:29.853+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "810203",
                    "issueId": "13477281"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281/worklog/810222",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sfc-gh-nthimmegowda commented on code in PR #14147:\nURL: https://github.com/apache/arrow/pull/14147#discussion_r974763886\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2355,6 +2355,80 @@ class DeltaLengthByteArrayDecoder : public DecoderImpl,\n   std::shared_ptr<ResizableBuffer> buffered_data_;\n };\n \n+// ----------------------------------------------------------------------\n+// RLE_BOOLEAN_DECODER\n+\n+class RleBooleanDecoder : public DecoderImpl, virtual public BooleanDecoder {\n+ public:\n+  explicit RleBooleanDecoder(const ColumnDescriptor* descr)\n+      : DecoderImpl(descr, Encoding::RLE) {}\n+\n+  void SetData(int num_values, const uint8_t* data, int len) override {\n+    num_values_ = num_values;\n+    uint32_t num_bytes = 0;\n+\n+    if (len < 4) {\n+      throw ParquetException(\"Received invalid length : \" + std::to_string(len) +\n+                             \" (corrupt data page?)\");\n+    }\n+    // Load the first 4 bytes in little-endian, which indicates the length\n+    num_bytes =\n+        ::arrow::bit_util::ToLittleEndian(::arrow::util::SafeLoadAs<uint32_t>(data));\n+    if (num_bytes < 0 || num_bytes > (uint32_t)(len - 4)) {\n+      throw ParquetException(\"Received invalid number of bytes : \" +\n+                             std::to_string(num_bytes) + \" (corrupt data page?)\");\n+    }\n+\n+    const uint8_t* decoder_data = data + 4;\n+    decoder_ = std::make_shared<::arrow::util::RleDecoder>(decoder_data, num_bytes,\n+                                                           /*bit_width=*/1);\n+  }\n+\n+  int Decode(bool* buffer, int max_values) override {\n+    max_values = std::min(max_values, num_values_);\n+    int val = 0;\n+\n+    for (int i = 0; i < max_values; ++i) {\n+      if (!decoder_->Get(&val)) {\n+        throw ParquetException(\"Unable to parse bits (corrupt data page?)\");\n+      }\n+      if (val) {\n+        buffer[i] = true;\n+      } else {\n+        buffer[i] = false;\n+      }\n+    }\n+    num_values_ -= max_values;\n+    return max_values;\n+  }\n+\n+  int Decode(uint8_t* buffer, int max_values) {\n+    max_values = std::min(max_values, num_values_);\n+    if (!decoder_->GetBatch(buffer, max_values)) {\n+      ParquetException::EofException();\n+    }\n+\n+    num_values_ -= max_values;\n\nReview Comment:\n   Agreed. Changed to validate that number of read values is equal to `max_values` . This makes it inline with rest of `GetBatch() `calls in the file. \n\n\n\n",
                    "created": "2022-09-20T01:03:51.817+0000",
                    "updated": "2022-09-20T01:03:51.817+0000",
                    "started": "2022-09-20T01:03:51.816+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "810222",
                    "issueId": "13477281"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281/worklog/810253",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #14147:\nURL: https://github.com/apache/arrow/pull/14147#discussion_r974887734\n\n\n##########\ncpp/src/parquet/reader_test.cc:\n##########\n@@ -127,6 +127,89 @@ void CheckRowGroupMetadata(const RowGroupMetaData* rg_metadata,\n   }\n }\n \n+class TestBooleanRLE : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+    reader_ = ParquetFileReader::OpenFile(data_file(\"rle_boolean_encoding.parquet\"));\n+  }\n+\n+  void TearDown() {}\n+\n+ protected:\n+  std::unique_ptr<ParquetFileReader> reader_;\n+};\n+\n+TEST_F(TestBooleanRLE, TestBooleanScanner) {\n+  auto group = reader_->RowGroup(0);\n+\n+  // column 0, id\n+  auto scanner = std::make_shared<BoolScanner>(group->Column(0));\n+\n+  bool val = false;\n+  bool is_null = false;\n+  for (int i = 0; i < 8; i++) {\n+    ASSERT_TRUE(scanner->HasNext());\n+    ASSERT_TRUE(scanner->NextValue(&val, &is_null));\n+\n+    // For this file, 3rd index value is null\n+    if (i == 2) {\n+      ASSERT_TRUE(is_null);\n+    } else {\n+      ASSERT_FALSE(is_null);\n+    }\n+  }\n+\n+  ASSERT_FALSE(scanner->HasNext());\n+  ASSERT_FALSE(scanner->NextValue(&val, &is_null));\n+}\n+\n+TEST_F(TestBooleanRLE, TestBatchRead) {\n+  auto group = reader_->RowGroup(0);\n+\n+  // column 0, id\n+  auto col = std::dynamic_pointer_cast<BoolReader>(group->Column(0));\n+\n+  // This file only has 8 rows\n+  ASSERT_EQ(8, reader_->metadata()->num_rows());\n+  // This file only has 1 row group\n+  ASSERT_EQ(1, reader_->metadata()->num_row_groups());\n+  // Size of the metadata is 106 bytes\n+  ASSERT_EQ(106, reader_->metadata()->size());\n+  // This row group must have 8 rows\n+  ASSERT_EQ(8, group->metadata()->num_rows());\n+\n+  // Check if the column is encoded with RLE\n+  auto col_chunk = group->metadata()->ColumnChunk(0);\n+  ASSERT_TRUE(std::find(col_chunk->encodings().begin(), col_chunk->encodings().end(),\n+                        Encoding::RLE) != col_chunk->encodings().end());\n+\n+  // Assert column has values to be read\n+  ASSERT_TRUE(col->HasNext());\n+  int64_t curr_batch_read = 0;\n+\n+  const int16_t batch_size = 8;\n+  int16_t def_levels[batch_size];\n+  int16_t rep_levels[batch_size];\n+  bool values[batch_size - 1];\n+\n+  auto levels_read =\n+      col->ReadBatch(batch_size, def_levels, rep_levels, values, &curr_batch_read);\n+  ASSERT_EQ(batch_size, levels_read);\n+\n+  // Since one value is a null value, expect batches read to be one less than indicated\n+  // batch_size\n+  ASSERT_EQ(batch_size - 1, curr_batch_read);\n+\n+  // 3rd index is null value\n+  ASSERT_THAT(def_levels, testing::ElementsAre(1, 1, 0, 1, 1, 1, 1, 1));\n+\n+  // Validate inserted data is as expected\n+  ASSERT_THAT(values, testing::ElementsAre(1, 0, 1, 1, 0, 0, 1));\n\nReview Comment:\n   Does the input have both `<bit-packed-run>` and `<rle-run>` cases in https://parquet.apache.org/docs/file-format/data-pages/encodings/#a-namerlearun-length-encoding--bit-packing-hybrid-rle--3 ?\n\n\n\n##########\ncpp/src/parquet/reader_test.cc:\n##########\n@@ -127,6 +127,89 @@ void CheckRowGroupMetadata(const RowGroupMetaData* rg_metadata,\n   }\n }\n \n+class TestBooleanRLE : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+    reader_ = ParquetFileReader::OpenFile(data_file(\"rle_boolean_encoding.parquet\"));\n+  }\n+\n+  void TearDown() {}\n+\n+ protected:\n+  std::unique_ptr<ParquetFileReader> reader_;\n+};\n+\n+TEST_F(TestBooleanRLE, TestBooleanScanner) {\n+  auto group = reader_->RowGroup(0);\n+\n+  // column 0, id\n+  auto scanner = std::make_shared<BoolScanner>(group->Column(0));\n+\n+  bool val = false;\n+  bool is_null = false;\n+  for (int i = 0; i < 8; i++) {\n+    ASSERT_TRUE(scanner->HasNext());\n+    ASSERT_TRUE(scanner->NextValue(&val, &is_null));\n\nReview Comment:\n   Could you also validate `val`?\n\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2355,6 +2355,81 @@ class DeltaLengthByteArrayDecoder : public DecoderImpl,\n   std::shared_ptr<ResizableBuffer> buffered_data_;\n };\n \n+// ----------------------------------------------------------------------\n+// RLE_BOOLEAN_DECODER\n+\n+class RleBooleanDecoder : public DecoderImpl, virtual public BooleanDecoder {\n+ public:\n+  explicit RleBooleanDecoder(const ColumnDescriptor* descr)\n+      : DecoderImpl(descr, Encoding::RLE) {}\n+\n+  void SetData(int num_values, const uint8_t* data, int len) override {\n+    num_values_ = num_values;\n+    uint32_t num_bytes = 0;\n+\n+    if (len < 4) {\n+      throw ParquetException(\"Received invalid length : \" + std::to_string(len) +\n+                             \" (corrupt data page?)\");\n+    }\n+    // Load the first 4 bytes in little-endian, which indicates the length\n+    num_bytes =\n+        ::arrow::bit_util::ToLittleEndian(::arrow::util::SafeLoadAs<uint32_t>(data));\n+    if (num_bytes < 0 || num_bytes > static_cast<uint32_t>(len - 4)) {\n+      throw ParquetException(\"Received invalid number of bytes : \" +\n+                             std::to_string(num_bytes) + \" (corrupt data page?)\");\n+    }\n+\n+    auto decoder_data = data + 4;\n+    decoder_ = std::make_shared<::arrow::util::RleDecoder>(decoder_data, num_bytes,\n+                                                           /*bit_width=*/1);\n+  }\n+\n+  int Decode(bool* buffer, int max_values) override {\n+    max_values = std::min(max_values, num_values_);\n+    int val = 0;\n+\n+    for (int i = 0; i < max_values; ++i) {\n+      if (!decoder_->Get(&val)) {\n+        throw ParquetException(\"Unable to parse bits for position (0 based) : \" +\n+                               std::to_string(i) + \" (corrupt data page?)\");\n+      }\n+      if (val) {\n+        buffer[i] = true;\n+      } else {\n+        buffer[i] = false;\n+      }\n+    }\n+    num_values_ -= max_values;\n+    return max_values;\n+  }\n+\n+  int Decode(uint8_t* buffer, int max_values) override {\n+    max_values = std::min(max_values, num_values_);\n+    if (decoder_->GetBatch(buffer, max_values) != max_values) {\n\nReview Comment:\n   It seems that this writes each value as 1byte value to `buffer`.\r\n   But `PlainBooleanDecoder::Decode(uint8_t* buffer)` writes each value as 1bit value to `buffer`.\r\n   \r\n   Does the added tests use this method?\n\n\n\n##########\ncpp/src/parquet/encoding.cc:\n##########\n@@ -2355,6 +2355,80 @@ class DeltaLengthByteArrayDecoder : public DecoderImpl,\n   std::shared_ptr<ResizableBuffer> buffered_data_;\n };\n \n+// ----------------------------------------------------------------------\n+// RLE_BOOLEAN_DECODER\n+\n+class RleBooleanDecoder : public DecoderImpl, virtual public BooleanDecoder {\n+ public:\n+  explicit RleBooleanDecoder(const ColumnDescriptor* descr)\n+      : DecoderImpl(descr, Encoding::RLE) {}\n+\n+  void SetData(int num_values, const uint8_t* data, int len) override {\n+    num_values_ = num_values;\n+    uint32_t num_bytes = 0;\n+\n+    if (len < 4) {\n+      throw ParquetException(\"Received invalid length : \" + std::to_string(len) +\n+                             \" (corrupt data page?)\");\n+    }\n+    // Load the first 4 bytes in little-endian, which indicates the length\n+    num_bytes =\n+        ::arrow::bit_util::ToLittleEndian(::arrow::util::SafeLoadAs<uint32_t>(data));\n+    if (num_bytes < 0 || num_bytes > (uint32_t)(len - 4)) {\n+      throw ParquetException(\"Received invalid number of bytes : \" +\n+                             std::to_string(num_bytes) + \" (corrupt data page?)\");\n+    }\n+\n+    const uint8_t* decoder_data = data + 4;\n+    decoder_ = std::make_shared<::arrow::util::RleDecoder>(decoder_data, num_bytes,\n+                                                           /*bit_width=*/1);\n+  }\n+\n+  int Decode(bool* buffer, int max_values) override {\n+    max_values = std::min(max_values, num_values_);\n+    int val = 0;\n\nReview Comment:\n   Hmm. Do you know what value is used for boolean in Parquet? (`0` and `1`?) And do you also know the size of a boolean value in Parquet? (1bit? 8bits?)\r\n   I can't find them in https://parquet.apache.org/docs/file-format/data-pages/encodings/ .\r\n   \r\n   I think that we need to use the same type for this. If Parquet uses 8bits, we can use `int8_t` or `uint8_t` here.\n\n\n\n",
                    "created": "2022-09-20T05:30:39.169+0000",
                    "updated": "2022-09-20T05:30:39.169+0000",
                    "started": "2022-09-20T05:30:39.168+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "810253",
                    "issueId": "13477281"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281/worklog/810265",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sfc-gh-nthimmegowda commented on code in PR #14147:\nURL: https://github.com/apache/arrow/pull/14147#discussion_r974947517\n\n\n##########\ncpp/src/parquet/reader_test.cc:\n##########\n@@ -127,6 +127,89 @@ void CheckRowGroupMetadata(const RowGroupMetaData* rg_metadata,\n   }\n }\n \n+class TestBooleanRLE : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+    reader_ = ParquetFileReader::OpenFile(data_file(\"rle_boolean_encoding.parquet\"));\n+  }\n+\n+  void TearDown() {}\n+\n+ protected:\n+  std::unique_ptr<ParquetFileReader> reader_;\n+};\n+\n+TEST_F(TestBooleanRLE, TestBooleanScanner) {\n+  auto group = reader_->RowGroup(0);\n+\n+  // column 0, id\n+  auto scanner = std::make_shared<BoolScanner>(group->Column(0));\n+\n+  bool val = false;\n+  bool is_null = false;\n+  for (int i = 0; i < 8; i++) {\n+    ASSERT_TRUE(scanner->HasNext());\n+    ASSERT_TRUE(scanner->NextValue(&val, &is_null));\n\nReview Comment:\n   Added. \n\n\n\n",
                    "created": "2022-09-20T06:47:33.625+0000",
                    "updated": "2022-09-20T06:47:33.625+0000",
                    "started": "2022-09-20T06:47:33.624+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "810265",
                    "issueId": "13477281"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 34200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4c8f4088[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1404013d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@57432d3c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@637ad300[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58b6d56d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4c088692[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2ec78e2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@373b496c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@59c8ef5b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@517cdee6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@30369743[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5dabc800[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 34200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Oct 04 07:00:36 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-10-04T07:00:36.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17450/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-08-17T18:28:10.000+0000",
        "updated": "2022-10-13T10:27:00.000+0000",
        "timeoriginalestimate": null,
        "description": "Reading from Arrow-Parquet c++, Parquet files with RLE encoding in columns error out with\u00a0\r\n{code:java}\r\n\"Unknown encoding type.\"{code}\r\n\r\nThe error is thrown only in arrow-parquet c++ and error is due to RLE encoding not defined in the decoder.\u00a0\r\n\r\n\u00a0\r\n\r\n[https://github.com/apache/arrow/blob/master/cpp/src/parquet/column_reader.cc#L769|http://example.com/]\r\n\r\nThe files were generated from Athena using Iceberg, with the following query.\u00a0\r\n\r\n\r\n\r\n\u00a0\r\n{code:java}\r\ncreate table test (d_bool1 boolean)\r\nLOCATION 's3://'\r\nTBLPROPERTIES (\r\n'table_type'='ICEBERG',\r\n'format'='parquet'\r\n);\r\ninsert into \u00a0test VALUES (true);\r\n{code}\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "9.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 34200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/attachment/13048992",
                "id": "13048992",
                "filename": "athena_boolean.gz.parquet",
                "author": {
                    "self": "https://issues.apache.org/jira/rest/api/2/user?username=sfc-gh-nthimmegowda",
                    "name": "sfc-gh-nthimmegowda",
                    "key": "JIRAUSER294562",
                    "avatarUrls": {
                        "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                        "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                        "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                        "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                    },
                    "displayName": "Nishanth",
                    "active": true,
                    "timeZone": "Etc/UTC"
                },
                "created": "2022-09-06T07:44:02.565+0000",
                "size": 156,
                "mimeType": "application/octet-stream",
                "content": "https://issues.apache.org/jira/secure/attachment/13048992/athena_boolean.gz.parquet"
            }
        ],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Parquet] Cannot read columns with Run Length Encoding (RLE)",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281/comment/17600649",
                    "id": "17600649",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=sfc-gh-nthimmegowda",
                        "name": "sfc-gh-nthimmegowda",
                        "key": "JIRAUSER294562",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Nishanth",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Attached a sample file",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=sfc-gh-nthimmegowda",
                        "name": "sfc-gh-nthimmegowda",
                        "key": "JIRAUSER294562",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Nishanth",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-09-06T07:44:18.638+0000",
                    "updated": "2022-09-06T07:44:18.638+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477281/comment/17612493",
                    "id": "17612493",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 14147\n[https://github.com/apache/arrow/pull/14147]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2022-10-04T07:00:36.494+0000",
                    "updated": "2022-10-04T07:00:36.494+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z17u48:",
        "customfield_12314139": null
    }
}