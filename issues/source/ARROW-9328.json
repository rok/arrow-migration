{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13315059",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315059",
    "key": "ARROW-9328",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sagnikc",
            "name": "sagnikc",
            "key": "sagnikc",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
            },
            "displayName": "Sagnik Chakraborty",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334626",
                "id": "12334626",
                "name": "C++ - Gandiva"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sagnikc",
            "name": "sagnikc",
            "key": "sagnikc",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
            },
            "displayName": "Sagnik Chakraborty",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sagnikc",
            "name": "sagnikc",
            "key": "sagnikc",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
            },
            "displayName": "Sagnik Chakraborty",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9328/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 21,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315059/worklog/454674",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sagnikc-dremio opened a new pull request #7641:\nURL: https://github.com/apache/arrow/pull/7641\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-06T01:56:39.980+0000",
                    "updated": "2020-07-06T01:56:39.980+0000",
                    "started": "2020-07-06T01:56:39.980+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "454674",
                    "issueId": "13315059"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315059/worklog/454675",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7641:\nURL: https://github.com/apache/arrow/pull/7641#issuecomment-653977929\n\n\n   https://issues.apache.org/jira/browse/ARROW-9328\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-06T02:04:31.455+0000",
                    "updated": "2020-07-06T02:04:31.455+0000",
                    "started": "2020-07-06T02:04:31.454+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "454675",
                    "issueId": "13315059"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315059/worklog/455787",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sagnikc-dremio commented on pull request #7641:\nURL: https://github.com/apache/arrow/pull/7641#issuecomment-655228953\n\n\n   @pprudhvi @projjal Can you please review this change?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-08T01:39:29.495+0000",
                    "updated": "2020-07-08T01:39:29.495+0000",
                    "started": "2020-07-08T01:39:29.494+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "455787",
                    "issueId": "13315059"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315059/worklog/455947",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "praveenbingo commented on a change in pull request #7641:\nURL: https://github.com/apache/arrow/pull/7641#discussion_r451391005\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -284,10 +285,74 @@ const char* reverse_utf8(gdv_int64 context, const char* data, gdv_int32 data_len\n   return ret;\n }\n \n-// Trim a utf8 sequence\n+// Trims whitespaces from the left end of the input utf8 sequence\n FORCE_INLINE\n-const char* trim_utf8(gdv_int64 context, const char* data, gdv_int32 data_len,\n-                      int32_t* out_len) {\n+const char* ltrim_utf8(gdv_int64 context, const char* data, gdv_int32 data_len,\n+                       int32_t* out_len) {\n+  if (data_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  gdv_int32 start = 0;\n+  // start denotes the first position of non-space characters in the input string\n+  while (start < data_len && data[start] == ' ') {\n+    ++start;\n+  }\n+\n+  // string with no leading spaces, return original string\n+  if (start == 0) {\n+    *out_len = data_len;\n+    return data;\n+  }\n+\n+  // string with all spaces\n+  if (start == data_len) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  // string has some leading spaces and some non-space characters\n+  *out_len = data_len - start;\n+  return data + start;\n+}\n+\n+// Trims whitespaces from the right end of the input utf8 sequence\n+FORCE_INLINE\n+const char* rtrim_utf8(gdv_int64 context, const char* data, gdv_int32 data_len,\n+                       int32_t* out_len) {\n+  if (data_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  gdv_int32 end = data_len - 1;\n+  // end denotes the last position of non-space characters in the input string\n+  while (end >= 0 && data[end] == ' ') {\n\nReview comment:\n       is this the only utf8 space character?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-08T09:00:22.098+0000",
                    "updated": "2020-07-08T09:00:22.098+0000",
                    "started": "2020-07-08T09:00:22.098+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "455947",
                    "issueId": "13315059"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315059/worklog/456973",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "projjal commented on a change in pull request #7641:\nURL: https://github.com/apache/arrow/pull/7641#discussion_r452613034\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -320,6 +385,143 @@ const char* trim_utf8(gdv_int64 context, const char* data, gdv_int32 data_len,\n   return data + start;\n }\n \n+// Trims characters present in the trim text from the left end of the base text\n+FORCE_INLINE\n+const char* ltrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n\nReview comment:\n       The utf8 handling seems incorrect. You need to decode the utf8 char and match against the target string instead of matching individual bytes. In this case a byte of multibyte char in trim_text might match against a byte of another multibyte char in target string\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-10T04:15:13.448+0000",
                    "updated": "2020-07-10T04:15:13.448+0000",
                    "started": "2020-07-10T04:15:13.448+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456973",
                    "issueId": "13315059"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315059/worklog/456977",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "projjal commented on a change in pull request #7641:\nURL: https://github.com/apache/arrow/pull/7641#discussion_r452615768\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -284,10 +285,74 @@ const char* reverse_utf8(gdv_int64 context, const char* data, gdv_int32 data_len\n   return ret;\n }\n \n-// Trim a utf8 sequence\n+// Trims whitespaces from the left end of the input utf8 sequence\n FORCE_INLINE\n-const char* trim_utf8(gdv_int64 context, const char* data, gdv_int32 data_len,\n-                      int32_t* out_len) {\n+const char* ltrim_utf8(gdv_int64 context, const char* data, gdv_int32 data_len,\n+                       int32_t* out_len) {\n+  if (data_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  gdv_int32 start = 0;\n+  // start denotes the first position of non-space characters in the input string\n+  while (start < data_len && data[start] == ' ') {\n+    ++start;\n+  }\n+\n+  // string with no leading spaces, return original string\n+  if (start == 0) {\n+    *out_len = data_len;\n+    return data;\n+  }\n+\n+  // string with all spaces\n+  if (start == data_len) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  // string has some leading spaces and some non-space characters\n+  *out_len = data_len - start;\n+  return data + start;\n+}\n+\n+// Trims whitespaces from the right end of the input utf8 sequence\n+FORCE_INLINE\n+const char* rtrim_utf8(gdv_int64 context, const char* data, gdv_int32 data_len,\n+                       int32_t* out_len) {\n+  if (data_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  gdv_int32 end = data_len - 1;\n+  // end denotes the last position of non-space characters in the input string\n+  while (end >= 0 && data[end] == ' ') {\n\nReview comment:\n       there is only one unicode codepoint for each character\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-10T04:28:34.735+0000",
                    "updated": "2020-07-10T04:28:34.735+0000",
                    "started": "2020-07-10T04:28:34.735+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "456977",
                    "issueId": "13315059"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315059/worklog/461041",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "projjal commented on a change in pull request #7641:\nURL: https://github.com/apache/arrow/pull/7641#discussion_r457311111\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -16,6 +16,7 @@\n // under the License.\n \n // String functions\n+#include <unordered_set>\n\nReview comment:\n       Not being used now\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -322,6 +387,138 @@ const char* trim_utf8(gdv_int64 context, const char* data, gdv_int32 data_len,\n   return data + start;\n }\n \n+// Trims characters present in the trim text from the left end of the base text\n+FORCE_INLINE\n+const char* ltrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n+  if (basetext_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  } else if (trimtext_len == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  gdv_int32 start_ptr, char_len;\n+  // scan the base text from left to right and increment the start pointer till\n+  // there is a character which is not present in the trim text\n+  for (start_ptr = 0; start_ptr < basetext_len; start_ptr += char_len) {\n+    char_len = utf8_char_length(basetext[start_ptr]);\n+    if (!is_substr_utf8_utf8(trimtext, trimtext_len, basetext + start_ptr, char_len)) {\n+      break;\n+    }\n+  }\n+\n+  // the first character from the left is not present in the trim text,\n+  // hence there is nothing to be trimmed, return original string\n+  if (start_ptr == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  // all the characters in the base text are present in the trim text,\n+  // hence trim the entire string, return empty string\n+  if (start_ptr == trimtext_len) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  // base text has some characters which are not present in the trim text\n+  *out_len = basetext_len - start_ptr;\n+  return basetext + start_ptr;\n+}\n+\n+// Trims characters present in the trim text from the right end of the base text\n+FORCE_INLINE\n+const char* rtrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n+  if (basetext_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  } else if (trimtext_len == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  gdv_int32 end_cnt, char_len, end_ptr = 0;\n+  // scan the base text from left to right and increment the end pointer to the current\n+  // position when there is a character which is not present in the trim text\n+  for (end_cnt = 0; end_cnt < basetext_len; end_cnt += char_len) {\n\nReview comment:\n       Why are you moving from left to right. You will have to pass and decode the entire string even when there is no trim text or only a single character in the basetext. Better move from right to left and break when not found.\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -322,6 +387,138 @@ const char* trim_utf8(gdv_int64 context, const char* data, gdv_int32 data_len,\n   return data + start;\n }\n \n+// Trims characters present in the trim text from the left end of the base text\n+FORCE_INLINE\n+const char* ltrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n+  if (basetext_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  } else if (trimtext_len == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  gdv_int32 start_ptr, char_len;\n+  // scan the base text from left to right and increment the start pointer till\n+  // there is a character which is not present in the trim text\n+  for (start_ptr = 0; start_ptr < basetext_len; start_ptr += char_len) {\n+    char_len = utf8_char_length(basetext[start_ptr]);\n+    if (!is_substr_utf8_utf8(trimtext, trimtext_len, basetext + start_ptr, char_len)) {\n+      break;\n+    }\n+  }\n+\n+  // the first character from the left is not present in the trim text,\n+  // hence there is nothing to be trimmed, return original string\n+  if (start_ptr == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  // all the characters in the base text are present in the trim text,\n+  // hence trim the entire string, return empty string\n+  if (start_ptr == trimtext_len) {\n\nReview comment:\n       start_ptr == _basetext_len_\r\n   Also, you don't need these checks to return empty string and original string, these add unnecessary branching. The final calculations in Line428 will take care of them.\r\n   Same for the other trim functions.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-20T12:01:11.610+0000",
                    "updated": "2020-07-20T12:01:11.610+0000",
                    "started": "2020-07-20T12:01:11.610+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "461041",
                    "issueId": "13315059"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315059/worklog/461043",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "projjal commented on a change in pull request #7641:\nURL: https://github.com/apache/arrow/pull/7641#discussion_r457316490\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -322,6 +387,138 @@ const char* trim_utf8(gdv_int64 context, const char* data, gdv_int32 data_len,\n   return data + start;\n }\n \n+// Trims characters present in the trim text from the left end of the base text\n+FORCE_INLINE\n+const char* ltrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n+  if (basetext_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  } else if (trimtext_len == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  gdv_int32 start_ptr, char_len;\n+  // scan the base text from left to right and increment the start pointer till\n+  // there is a character which is not present in the trim text\n+  for (start_ptr = 0; start_ptr < basetext_len; start_ptr += char_len) {\n+    char_len = utf8_char_length(basetext[start_ptr]);\n+    if (!is_substr_utf8_utf8(trimtext, trimtext_len, basetext + start_ptr, char_len)) {\n+      break;\n+    }\n+  }\n+\n+  // the first character from the left is not present in the trim text,\n+  // hence there is nothing to be trimmed, return original string\n+  if (start_ptr == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  // all the characters in the base text are present in the trim text,\n+  // hence trim the entire string, return empty string\n+  if (start_ptr == trimtext_len) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  // base text has some characters which are not present in the trim text\n+  *out_len = basetext_len - start_ptr;\n+  return basetext + start_ptr;\n+}\n+\n+// Trims characters present in the trim text from the right end of the base text\n+FORCE_INLINE\n+const char* rtrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n+  if (basetext_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  } else if (trimtext_len == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  gdv_int32 end_cnt, char_len, end_ptr = 0;\n+  // scan the base text from left to right and increment the end pointer to the current\n+  // position when there is a character which is not present in the trim text\n+  for (end_cnt = 0; end_cnt < basetext_len; end_cnt += char_len) {\n\nReview comment:\n       Why are you moving from left to right. You will have to pass and decode the entire string even when there is no trim text or only a single trim character in the basetext. Better move from right to left and break when not found.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-20T12:04:41.177+0000",
                    "updated": "2020-07-20T12:04:41.177+0000",
                    "started": "2020-07-20T12:04:41.177+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "461043",
                    "issueId": "13315059"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315059/worklog/461407",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sagnikc-dremio commented on a change in pull request #7641:\nURL: https://github.com/apache/arrow/pull/7641#discussion_r457838825\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -16,6 +16,7 @@\n // under the License.\n \n // String functions\n+#include <unordered_set>\n\nReview comment:\n       Removed it.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-21T05:06:59.587+0000",
                    "updated": "2020-07-21T05:06:59.587+0000",
                    "started": "2020-07-21T05:06:59.587+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "461407",
                    "issueId": "13315059"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315059/worklog/461409",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sagnikc-dremio commented on a change in pull request #7641:\nURL: https://github.com/apache/arrow/pull/7641#discussion_r457840242\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -322,6 +387,138 @@ const char* trim_utf8(gdv_int64 context, const char* data, gdv_int32 data_len,\n   return data + start;\n }\n \n+// Trims characters present in the trim text from the left end of the base text\n+FORCE_INLINE\n+const char* ltrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n+  if (basetext_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  } else if (trimtext_len == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  gdv_int32 start_ptr, char_len;\n+  // scan the base text from left to right and increment the start pointer till\n+  // there is a character which is not present in the trim text\n+  for (start_ptr = 0; start_ptr < basetext_len; start_ptr += char_len) {\n+    char_len = utf8_char_length(basetext[start_ptr]);\n+    if (!is_substr_utf8_utf8(trimtext, trimtext_len, basetext + start_ptr, char_len)) {\n+      break;\n+    }\n+  }\n+\n+  // the first character from the left is not present in the trim text,\n+  // hence there is nothing to be trimmed, return original string\n+  if (start_ptr == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  // all the characters in the base text are present in the trim text,\n+  // hence trim the entire string, return empty string\n+  if (start_ptr == trimtext_len) {\n\nReview comment:\n       Yes, thanks for pointing out. Removed the redundant checks.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-21T05:11:56.799+0000",
                    "updated": "2020-07-21T05:11:56.799+0000",
                    "started": "2020-07-21T05:11:56.798+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "461409",
                    "issueId": "13315059"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315059/worklog/461410",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sagnikc-dremio commented on a change in pull request #7641:\nURL: https://github.com/apache/arrow/pull/7641#discussion_r457843985\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -322,6 +387,138 @@ const char* trim_utf8(gdv_int64 context, const char* data, gdv_int32 data_len,\n   return data + start;\n }\n \n+// Trims characters present in the trim text from the left end of the base text\n+FORCE_INLINE\n+const char* ltrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n+  if (basetext_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  } else if (trimtext_len == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  gdv_int32 start_ptr, char_len;\n+  // scan the base text from left to right and increment the start pointer till\n+  // there is a character which is not present in the trim text\n+  for (start_ptr = 0; start_ptr < basetext_len; start_ptr += char_len) {\n+    char_len = utf8_char_length(basetext[start_ptr]);\n+    if (!is_substr_utf8_utf8(trimtext, trimtext_len, basetext + start_ptr, char_len)) {\n+      break;\n+    }\n+  }\n+\n+  // the first character from the left is not present in the trim text,\n+  // hence there is nothing to be trimmed, return original string\n+  if (start_ptr == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  // all the characters in the base text are present in the trim text,\n+  // hence trim the entire string, return empty string\n+  if (start_ptr == trimtext_len) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  // base text has some characters which are not present in the trim text\n+  *out_len = basetext_len - start_ptr;\n+  return basetext + start_ptr;\n+}\n+\n+// Trims characters present in the trim text from the right end of the base text\n+FORCE_INLINE\n+const char* rtrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n+  if (basetext_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  } else if (trimtext_len == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  gdv_int32 end_cnt, char_len, end_ptr = 0;\n+  // scan the base text from left to right and increment the end pointer to the current\n+  // position when there is a character which is not present in the trim text\n+  for (end_cnt = 0; end_cnt < basetext_len; end_cnt += char_len) {\n\nReview comment:\n       I did consider that option previously and it worked well and good for single-byte character strings, but I was facing some issues with multibyte character strings.\r\n   \r\n   So, we need to decode the utf8 char and compute its length before we can move to the subsequent character. So if we are traversing from right to left, we need to find the byte position of the last character and check if that character belongs to the trimtext character set, then find the byte position of the second-to-last character and so on. It can be done, but it looks a little complex to me, whereas while moving from left to right, we don't come across this.\r\n   \r\n   Maybe there is a better way to do it. Please suggest if you have anything in mind.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-21T05:24:45.574+0000",
                    "updated": "2020-07-21T05:24:45.574+0000",
                    "started": "2020-07-21T05:24:45.574+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "461410",
                    "issueId": "13315059"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315059/worklog/461413",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "projjal commented on a change in pull request #7641:\nURL: https://github.com/apache/arrow/pull/7641#discussion_r457847628\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -322,6 +387,138 @@ const char* trim_utf8(gdv_int64 context, const char* data, gdv_int32 data_len,\n   return data + start;\n }\n \n+// Trims characters present in the trim text from the left end of the base text\n+FORCE_INLINE\n+const char* ltrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n+  if (basetext_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  } else if (trimtext_len == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  gdv_int32 start_ptr, char_len;\n+  // scan the base text from left to right and increment the start pointer till\n+  // there is a character which is not present in the trim text\n+  for (start_ptr = 0; start_ptr < basetext_len; start_ptr += char_len) {\n+    char_len = utf8_char_length(basetext[start_ptr]);\n+    if (!is_substr_utf8_utf8(trimtext, trimtext_len, basetext + start_ptr, char_len)) {\n+      break;\n+    }\n+  }\n+\n+  // the first character from the left is not present in the trim text,\n+  // hence there is nothing to be trimmed, return original string\n+  if (start_ptr == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  // all the characters in the base text are present in the trim text,\n+  // hence trim the entire string, return empty string\n+  if (start_ptr == trimtext_len) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  // base text has some characters which are not present in the trim text\n+  *out_len = basetext_len - start_ptr;\n+  return basetext + start_ptr;\n+}\n+\n+// Trims characters present in the trim text from the right end of the base text\n+FORCE_INLINE\n+const char* rtrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n+  if (basetext_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  } else if (trimtext_len == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  gdv_int32 end_cnt, char_len, end_ptr = 0;\n+  // scan the base text from left to right and increment the end pointer to the current\n+  // position when there is a character which is not present in the trim text\n+  for (end_cnt = 0; end_cnt < basetext_len; end_cnt += char_len) {\n\nReview comment:\n       You can go back byte by byte and check in the trim set if the current byte is the first byte in utf8 char.\r\n   ```\r\n   while (end >= start) {\r\n   \tint char_len = utf8_char_len(end);\r\n   \tif (char_len == 0) {end\u2014; break;} // trailing byte in mutlitbyte char\r\n   \tif (char, char_len) present in (trim, trim_len) break;\r\n   \tend\u2014;```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-21T05:37:02.754+0000",
                    "updated": "2020-07-21T05:37:02.754+0000",
                    "started": "2020-07-21T05:37:02.728+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "461413",
                    "issueId": "13315059"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315059/worklog/461414",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "projjal commented on a change in pull request #7641:\nURL: https://github.com/apache/arrow/pull/7641#discussion_r457847628\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -322,6 +387,138 @@ const char* trim_utf8(gdv_int64 context, const char* data, gdv_int32 data_len,\n   return data + start;\n }\n \n+// Trims characters present in the trim text from the left end of the base text\n+FORCE_INLINE\n+const char* ltrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n+  if (basetext_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  } else if (trimtext_len == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  gdv_int32 start_ptr, char_len;\n+  // scan the base text from left to right and increment the start pointer till\n+  // there is a character which is not present in the trim text\n+  for (start_ptr = 0; start_ptr < basetext_len; start_ptr += char_len) {\n+    char_len = utf8_char_length(basetext[start_ptr]);\n+    if (!is_substr_utf8_utf8(trimtext, trimtext_len, basetext + start_ptr, char_len)) {\n+      break;\n+    }\n+  }\n+\n+  // the first character from the left is not present in the trim text,\n+  // hence there is nothing to be trimmed, return original string\n+  if (start_ptr == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  // all the characters in the base text are present in the trim text,\n+  // hence trim the entire string, return empty string\n+  if (start_ptr == trimtext_len) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  // base text has some characters which are not present in the trim text\n+  *out_len = basetext_len - start_ptr;\n+  return basetext + start_ptr;\n+}\n+\n+// Trims characters present in the trim text from the right end of the base text\n+FORCE_INLINE\n+const char* rtrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n+  if (basetext_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  } else if (trimtext_len == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  gdv_int32 end_cnt, char_len, end_ptr = 0;\n+  // scan the base text from left to right and increment the end pointer to the current\n+  // position when there is a character which is not present in the trim text\n+  for (end_cnt = 0; end_cnt < basetext_len; end_cnt += char_len) {\n\nReview comment:\n       You can go back byte by byte and check in the trim set if the current byte is the first byte in utf8 char.\r\n   ```\r\n   while (end >= start) {\r\n   \tint char_len = utf8_char_len(end);\r\n   \tif (char_len == 0) {end--; break;} // trailing byte in mutlitbyte char\r\n   \tif basetext(end, char_len) present in trim(0, trim_len) break;\r\n   \tend--;```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-21T05:38:29.031+0000",
                    "updated": "2020-07-21T05:38:29.031+0000",
                    "started": "2020-07-21T05:38:29.031+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "461414",
                    "issueId": "13315059"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315059/worklog/461417",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "projjal commented on a change in pull request #7641:\nURL: https://github.com/apache/arrow/pull/7641#discussion_r457847628\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -322,6 +387,138 @@ const char* trim_utf8(gdv_int64 context, const char* data, gdv_int32 data_len,\n   return data + start;\n }\n \n+// Trims characters present in the trim text from the left end of the base text\n+FORCE_INLINE\n+const char* ltrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n+  if (basetext_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  } else if (trimtext_len == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  gdv_int32 start_ptr, char_len;\n+  // scan the base text from left to right and increment the start pointer till\n+  // there is a character which is not present in the trim text\n+  for (start_ptr = 0; start_ptr < basetext_len; start_ptr += char_len) {\n+    char_len = utf8_char_length(basetext[start_ptr]);\n+    if (!is_substr_utf8_utf8(trimtext, trimtext_len, basetext + start_ptr, char_len)) {\n+      break;\n+    }\n+  }\n+\n+  // the first character from the left is not present in the trim text,\n+  // hence there is nothing to be trimmed, return original string\n+  if (start_ptr == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  // all the characters in the base text are present in the trim text,\n+  // hence trim the entire string, return empty string\n+  if (start_ptr == trimtext_len) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+\n+  // base text has some characters which are not present in the trim text\n+  *out_len = basetext_len - start_ptr;\n+  return basetext + start_ptr;\n+}\n+\n+// Trims characters present in the trim text from the right end of the base text\n+FORCE_INLINE\n+const char* rtrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n+  if (basetext_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  } else if (trimtext_len == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  gdv_int32 end_cnt, char_len, end_ptr = 0;\n+  // scan the base text from left to right and increment the end pointer to the current\n+  // position when there is a character which is not present in the trim text\n+  for (end_cnt = 0; end_cnt < basetext_len; end_cnt += char_len) {\n\nReview comment:\n       You can go back byte by byte and check in the trim set if the current byte is the first byte in utf8 char.\r\n   ```\r\n   while (end >= start) {\r\n   \tint char_len = utf8_char_len(end);\r\n   \tif (char_len == 0) {end--; continue;} // trailing byte in mutlitbyte char\r\n   \tif basetext(end, char_len) present in trim(0, trim_len) break;\r\n   \tend--;```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-21T05:47:02.842+0000",
                    "updated": "2020-07-21T05:47:02.842+0000",
                    "started": "2020-07-21T05:47:02.842+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "461417",
                    "issueId": "13315059"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315059/worklog/461557",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "projjal commented on a change in pull request #7641:\nURL: https://github.com/apache/arrow/pull/7641#discussion_r458053012\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -305,21 +342,104 @@ const char* trim_utf8(gdv_int64 context, const char* data, gdv_int32 data_len,\n     --end;\n   }\n \n-  // string with no leading/trailing spaces, return original string\n-  if (start == 0 && end == data_len - 1) {\n-    *out_len = data_len;\n-    return data;\n+  // string has some leading/trailing spaces and some non-space characters\n+  *out_len = end - start + 1;\n+  return data + start;\n+}\n+\n+// Trims characters present in the trim text from the left end of the base text\n+FORCE_INLINE\n+const char* ltrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n+  if (basetext_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  } else if (trimtext_len == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  gdv_int32 start_ptr, char_len;\n+  // scan the base text from left to right and increment the start pointer till\n+  // there is a character which is not present in the trim text\n+  for (start_ptr = 0; start_ptr < basetext_len; start_ptr += char_len) {\n+    char_len = utf8_char_length(basetext[start_ptr]);\n+    if (!is_substr_utf8_utf8(trimtext, trimtext_len, basetext + start_ptr, char_len)) {\n+      break;\n+    }\n+  }\n+\n+  *out_len = basetext_len - start_ptr;\n+  return basetext + start_ptr;\n+}\n+\n+// Trims characters present in the trim text from the right end of the base text\n+FORCE_INLINE\n+const char* rtrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n+  if (basetext_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  } else if (trimtext_len == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  gdv_int32 char_len, end_ptr;\n+  // scan the base text from right to left and decrement the end pointer till\n+  // there is a character which is not present in the trim text\n+  for (end_ptr = basetext_len - 1; end_ptr >= 0; --end_ptr) {\n+    char_len = utf8_char_length(basetext[end_ptr]);\n+    if (char_len == 0) {  // trailing bytes of multibyte character\n+      continue;\n+    }\n+    if (!is_substr_utf8_utf8(trimtext, trimtext_len, basetext + end_ptr, char_len)) {\n+      break;\n+    }\n   }\n \n-  // string with all spaces\n-  if (start > end) {\n+  end_ptr += utf8_char_length(basetext[end_ptr]);  // point to the next character\n\nReview comment:\n       here end_ptr can be -1 and will be buffer overflow. You need to separately handle that case.\r\n   \n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -305,21 +342,104 @@ const char* trim_utf8(gdv_int64 context, const char* data, gdv_int32 data_len,\n     --end;\n   }\n \n-  // string with no leading/trailing spaces, return original string\n-  if (start == 0 && end == data_len - 1) {\n-    *out_len = data_len;\n-    return data;\n+  // string has some leading/trailing spaces and some non-space characters\n+  *out_len = end - start + 1;\n+  return data + start;\n+}\n+\n+// Trims characters present in the trim text from the left end of the base text\n+FORCE_INLINE\n+const char* ltrim_utf8_utf8(gdv_int64 context, const char* basetext,\n\nReview comment:\n       You need to handle the cases when the input is a malformed utf8 string. Currently the code might give buffer overflow if last character is incomplete multibyte character or the ltrim() might go into an infinite loop if there is an invalid byte in the middle.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-21T12:56:28.232+0000",
                    "updated": "2020-07-21T12:56:28.232+0000",
                    "started": "2020-07-21T12:56:28.232+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "461557",
                    "issueId": "13315059"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315059/worklog/462381",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sagnikc-dremio commented on a change in pull request #7641:\nURL: https://github.com/apache/arrow/pull/7641#discussion_r459212543\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -305,21 +342,104 @@ const char* trim_utf8(gdv_int64 context, const char* data, gdv_int32 data_len,\n     --end;\n   }\n \n-  // string with no leading/trailing spaces, return original string\n-  if (start == 0 && end == data_len - 1) {\n-    *out_len = data_len;\n-    return data;\n+  // string has some leading/trailing spaces and some non-space characters\n+  *out_len = end - start + 1;\n+  return data + start;\n+}\n+\n+// Trims characters present in the trim text from the left end of the base text\n+FORCE_INLINE\n+const char* ltrim_utf8_utf8(gdv_int64 context, const char* basetext,\n\nReview comment:\n       Added logic which will sniff out an invalid byte or an incomplete multibyte character and will throw an error, as was discussed offline. Also, added unit tests for the same.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-23T04:48:26.071+0000",
                    "updated": "2020-07-23T04:48:26.071+0000",
                    "started": "2020-07-23T04:48:26.071+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "462381",
                    "issueId": "13315059"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315059/worklog/462447",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "projjal commented on a change in pull request #7641:\nURL: https://github.com/apache/arrow/pull/7641#discussion_r459302381\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -305,21 +342,161 @@ const char* trim_utf8(gdv_int64 context, const char* data, gdv_int32 data_len,\n     --end;\n   }\n \n-  // string with no leading/trailing spaces, return original string\n-  if (start == 0 && end == data_len - 1) {\n-    *out_len = data_len;\n-    return data;\n+  // string has some leading/trailing spaces and some non-space characters\n+  *out_len = end - start + 1;\n+  return data + start;\n+}\n+\n+// Trims characters present in the trim text from the left end of the base text\n+FORCE_INLINE\n+const char* ltrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n+  if (basetext_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  } else if (trimtext_len == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  gdv_int32 start_ptr, char_len;\n+  // scan the base text from left to right and increment the start pointer till\n+  // there is a character which is not present in the trim text\n+  for (start_ptr = 0; start_ptr < basetext_len; start_ptr += char_len) {\n+    char_len = utf8_char_length(basetext[start_ptr]);\n+    if (char_len == 0 || start_ptr + char_len > basetext_len) {\n+      // invalid byte or incomplete glyph\n+      set_error_for_invalid_utf(context, basetext[start_ptr]);\n+      *out_len = 0;\n+      return \"\";\n+    }\n+    for (gdv_int32 char_ptr = 1; char_ptr < char_len; ++char_ptr) {\n+      if ((basetext[start_ptr + char_ptr] & 0xC0) != 0x80) {\n+        // bytes following head-byte of glyph\n+        set_error_for_invalid_utf(context, basetext[start_ptr + char_ptr]);\n+        *out_len = 0;\n+        return \"\";\n+      }\n+    }\n+    if (!is_substr_utf8_utf8(trimtext, trimtext_len, basetext + start_ptr, char_len)) {\n+      break;\n+    }\n   }\n \n-  // string with all spaces\n-  if (start > end) {\n+  *out_len = basetext_len - start_ptr;\n+  return basetext + start_ptr;\n+}\n+\n+// Trims characters present in the trim text from the right end of the base text\n+FORCE_INLINE\n+const char* rtrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n+  if (basetext_len == 0) {\n     *out_len = 0;\n     return \"\";\n+  } else if (trimtext_len == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  gdv_int32 char_len, end_ptr, char_cnt = 1;\n+  // scan the base text from right to left and decrement the end pointer till\n+  // there is a character which is not present in the trim text\n+  for (end_ptr = basetext_len - 1; end_ptr >= 0; --end_ptr) {\n+    char_len = utf8_char_length(basetext[end_ptr]);\n+    if (char_len == 0) {  // trailing bytes of multibyte character\n+      ++char_cnt;\n\nReview comment:\n       byte_cnt would be a better name\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -305,21 +342,161 @@ const char* trim_utf8(gdv_int64 context, const char* data, gdv_int32 data_len,\n     --end;\n   }\n \n-  // string with no leading/trailing spaces, return original string\n-  if (start == 0 && end == data_len - 1) {\n-    *out_len = data_len;\n-    return data;\n+  // string has some leading/trailing spaces and some non-space characters\n+  *out_len = end - start + 1;\n+  return data + start;\n+}\n+\n+// Trims characters present in the trim text from the left end of the base text\n+FORCE_INLINE\n+const char* ltrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n+  if (basetext_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  } else if (trimtext_len == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  gdv_int32 start_ptr, char_len;\n+  // scan the base text from left to right and increment the start pointer till\n+  // there is a character which is not present in the trim text\n+  for (start_ptr = 0; start_ptr < basetext_len; start_ptr += char_len) {\n+    char_len = utf8_char_length(basetext[start_ptr]);\n+    if (char_len == 0 || start_ptr + char_len > basetext_len) {\n+      // invalid byte or incomplete glyph\n+      set_error_for_invalid_utf(context, basetext[start_ptr]);\n+      *out_len = 0;\n+      return \"\";\n+    }\n+    for (gdv_int32 char_ptr = 1; char_ptr < char_len; ++char_ptr) {\n\nReview comment:\n       I am not sure if this check is really needed. Verifying all the bytes seems extra overhead unless this function really means to validate the entire utf8 string. The check at L388 is required because otherwise it may crash.\r\n   If you do think it is required we should also do this in rtrim to have consistent behavior in both.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-23T08:58:22.822+0000",
                    "updated": "2020-07-23T08:58:22.822+0000",
                    "started": "2020-07-23T08:58:22.822+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "462447",
                    "issueId": "13315059"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315059/worklog/462503",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sagnikc-dremio commented on a change in pull request #7641:\nURL: https://github.com/apache/arrow/pull/7641#discussion_r459372973\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -305,21 +342,161 @@ const char* trim_utf8(gdv_int64 context, const char* data, gdv_int32 data_len,\n     --end;\n   }\n \n-  // string with no leading/trailing spaces, return original string\n-  if (start == 0 && end == data_len - 1) {\n-    *out_len = data_len;\n-    return data;\n+  // string has some leading/trailing spaces and some non-space characters\n+  *out_len = end - start + 1;\n+  return data + start;\n+}\n+\n+// Trims characters present in the trim text from the left end of the base text\n+FORCE_INLINE\n+const char* ltrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n+  if (basetext_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  } else if (trimtext_len == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  gdv_int32 start_ptr, char_len;\n+  // scan the base text from left to right and increment the start pointer till\n+  // there is a character which is not present in the trim text\n+  for (start_ptr = 0; start_ptr < basetext_len; start_ptr += char_len) {\n+    char_len = utf8_char_length(basetext[start_ptr]);\n+    if (char_len == 0 || start_ptr + char_len > basetext_len) {\n+      // invalid byte or incomplete glyph\n+      set_error_for_invalid_utf(context, basetext[start_ptr]);\n+      *out_len = 0;\n+      return \"\";\n+    }\n+    for (gdv_int32 char_ptr = 1; char_ptr < char_len; ++char_ptr) {\n+      if ((basetext[start_ptr + char_ptr] & 0xC0) != 0x80) {\n+        // bytes following head-byte of glyph\n+        set_error_for_invalid_utf(context, basetext[start_ptr + char_ptr]);\n+        *out_len = 0;\n+        return \"\";\n+      }\n+    }\n+    if (!is_substr_utf8_utf8(trimtext, trimtext_len, basetext + start_ptr, char_len)) {\n+      break;\n+    }\n   }\n \n-  // string with all spaces\n-  if (start > end) {\n+  *out_len = basetext_len - start_ptr;\n+  return basetext + start_ptr;\n+}\n+\n+// Trims characters present in the trim text from the right end of the base text\n+FORCE_INLINE\n+const char* rtrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n+  if (basetext_len == 0) {\n     *out_len = 0;\n     return \"\";\n+  } else if (trimtext_len == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  gdv_int32 char_len, end_ptr, char_cnt = 1;\n+  // scan the base text from right to left and decrement the end pointer till\n+  // there is a character which is not present in the trim text\n+  for (end_ptr = basetext_len - 1; end_ptr >= 0; --end_ptr) {\n+    char_len = utf8_char_length(basetext[end_ptr]);\n+    if (char_len == 0) {  // trailing bytes of multibyte character\n+      ++char_cnt;\n\nReview comment:\n       Done.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-23T11:08:14.954+0000",
                    "updated": "2020-07-23T11:08:14.954+0000",
                    "started": "2020-07-23T11:08:14.953+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "462503",
                    "issueId": "13315059"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315059/worklog/462504",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sagnikc-dremio commented on a change in pull request #7641:\nURL: https://github.com/apache/arrow/pull/7641#discussion_r459373149\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -305,21 +342,161 @@ const char* trim_utf8(gdv_int64 context, const char* data, gdv_int32 data_len,\n     --end;\n   }\n \n-  // string with no leading/trailing spaces, return original string\n-  if (start == 0 && end == data_len - 1) {\n-    *out_len = data_len;\n-    return data;\n+  // string has some leading/trailing spaces and some non-space characters\n+  *out_len = end - start + 1;\n+  return data + start;\n+}\n+\n+// Trims characters present in the trim text from the left end of the base text\n+FORCE_INLINE\n+const char* ltrim_utf8_utf8(gdv_int64 context, const char* basetext,\n+                            gdv_int32 basetext_len, const char* trimtext,\n+                            gdv_int32 trimtext_len, int32_t* out_len) {\n+  if (basetext_len == 0) {\n+    *out_len = 0;\n+    return \"\";\n+  } else if (trimtext_len == 0) {\n+    *out_len = basetext_len;\n+    return basetext;\n+  }\n+\n+  gdv_int32 start_ptr, char_len;\n+  // scan the base text from left to right and increment the start pointer till\n+  // there is a character which is not present in the trim text\n+  for (start_ptr = 0; start_ptr < basetext_len; start_ptr += char_len) {\n+    char_len = utf8_char_length(basetext[start_ptr]);\n+    if (char_len == 0 || start_ptr + char_len > basetext_len) {\n+      // invalid byte or incomplete glyph\n+      set_error_for_invalid_utf(context, basetext[start_ptr]);\n+      *out_len = 0;\n+      return \"\";\n+    }\n+    for (gdv_int32 char_ptr = 1; char_ptr < char_len; ++char_ptr) {\n\nReview comment:\n       Removed the check.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-23T11:08:38.858+0000",
                    "updated": "2020-07-23T11:08:38.858+0000",
                    "started": "2020-07-23T11:08:38.858+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "462504",
                    "issueId": "13315059"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315059/worklog/462520",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "projjal commented on pull request #7641:\nURL: https://github.com/apache/arrow/pull/7641#issuecomment-662958111\n\n\n   Thanks @sagnikc-dremio \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-23T11:39:04.127+0000",
                    "updated": "2020-07-23T11:39:04.127+0000",
                    "started": "2020-07-23T11:39:04.126+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "462520",
                    "issueId": "13315059"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 12600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2bf9b491[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7173153a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2bc2ae24[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4271a4a3[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5bb46013[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@587fd5b5[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6672f310[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@296917c1[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@51255e07[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@77d1ebeb[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6ca6c72[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@677ca475[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12600,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jul 23 12:27:55 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-07-23T12:27:55.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9328/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-07-06T01:48:56.000+0000",
        "updated": "2020-10-07T21:44:55.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Gandiva] Add LTRIM, RTRIM, BTRIM functions for string",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315059/comment/17163510",
                    "id": "17163510",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=praveenbingo",
                        "name": "praveenbingo",
                        "key": "praveenbingo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Praveen Kumar",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 7641\n[https://github.com/apache/arrow/pull/7641]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=praveenbingo",
                        "name": "praveenbingo",
                        "key": "praveenbingo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Praveen Kumar",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-07-23T12:27:55.914+0000",
                    "updated": "2020-07-23T12:27:55.914+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ggrk:",
        "customfield_12314139": null
    }
}