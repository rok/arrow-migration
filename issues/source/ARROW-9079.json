{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13310381",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13310381",
    "key": "ARROW-9079",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
            "name": "kszucs",
            "key": "kszucs",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Krisztian Szucs",
            "active": true,
            "timeZone": "Europe/Budapest"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
            "name": "kszucs",
            "key": "kszucs",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Krisztian Szucs",
            "active": true,
            "timeZone": "Europe/Budapest"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
            "name": "kszucs",
            "key": "kszucs",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Krisztian Szucs",
            "active": true,
            "timeZone": "Europe/Budapest"
        },
        "aggregateprogress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9079/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 18,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13310381/worklog/444815",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs opened a new pull request #7417:\nURL: https://github.com/apache/arrow/pull/7417\n\n\n   Quickly wanted to add a benchmark for the `Add` function to verify that no significant regressions were introduced by https://github.com/apache/arrow/pull/7341\r\n   \r\n   Before:\r\n   ```\r\n   ---------------------------------------------------------------------------------------\r\n   Benchmark                                Time           CPU Iterations UserCounters...\r\n   ---------------------------------------------------------------------------------------\r\n   AddArrayArrayKernel/32768/10000         18 us         18 us      35892 null_percent=0.01 size=32.768k   1.67854GB/s\r\n   AddArrayArrayKernel/32768/100           19 us         19 us      37540 null_percent=1 size=32.768k   1.61941GB/s\r\n   AddArrayArrayKernel/32768/10            20 us         20 us      37049 null_percent=10 size=32.768k   1.55599GB/s\r\n   AddArrayArrayKernel/32768/2             20 us         20 us      35394 null_percent=50 size=32.768k   1.54512GB/s\r\n   AddArrayArrayKernel/32768/1             19 us         19 us      37901 null_percent=100 size=32.768k   1.63153GB/s\r\n   ```\r\n   \r\n   After:\r\n   ```\r\n   ---------------------------------------------------------------------------------------\r\n   Benchmark                                Time           CPU Iterations UserCounters...\r\n   ---------------------------------------------------------------------------------------\r\n   AddArrayArrayKernel/32768/10000         19 us         19 us      36704 null_percent=0.01 size=32.768k   1.64619GB/s\r\n   AddArrayArrayKernel/32768/100           18 us         18 us      37194 null_percent=1 size=32.768k   1.67588GB/s\r\n   AddArrayArrayKernel/32768/10            18 us         18 us      36341 null_percent=10 size=32.768k   1.65205GB/s\r\n   AddArrayArrayKernel/32768/2             18 us         18 us      37502 null_percent=50 size=32.768k     1.662GB/s\r\n   AddArrayArrayKernel/32768/1             18 us         18 us      38622 null_percent=100 size=32.768k   1.66593GB/s\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-12T11:43:13.031+0000",
                    "updated": "2020-06-12T11:43:13.031+0000",
                    "started": "2020-06-12T11:43:13.031+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "444815",
                    "issueId": "13310381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13310381/worklog/444817",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #7417:\nURL: https://github.com/apache/arrow/pull/7417#discussion_r439371127\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_benchmark.cc\n##########\n@@ -0,0 +1,92 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include <vector>\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/benchmark_util.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x94378165;\n+\n+template <typename ArrowType, typename CType = typename ArrowType::c_type>\n+static void AddArrayScalarKernel(benchmark::State& state) {\n+  RegressionArgs args(state);\n+\n+  const int64_t array_size = args.size / sizeof(CType);\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  auto rand = random::RandomArrayGenerator(kSeed);\n+  auto lhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(Add(lhs, Datum(CType(15))).status());\n+  }\n+}\n+\n+template <typename ArrowType, typename CType = typename ArrowType::c_type>\n+static void AddArrayArrayKernel(benchmark::State& state) {\n+  RegressionArgs args(state);\n+\n+  const int64_t array_size = args.size / sizeof(CType);\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  auto rand = random::RandomArrayGenerator(kSeed);\n+  auto lhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+  auto rhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(Add(lhs, rhs).status());\n+  }\n+}\n+\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, Int64Type)->Apply(RegressionSetArgs);\n\nReview comment:\n       @bkietz I assume it would be better to parametrize the benchmark over the binary operator, although I don't know how to pass both define a template parameter and pass an argument to gbench.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-12T11:46:32.026+0000",
                    "updated": "2020-06-12T11:46:32.026+0000",
                    "started": "2020-06-12T11:46:32.026+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "444817",
                    "issueId": "13310381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13310381/worklog/444818",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7417:\nURL: https://github.com/apache/arrow/pull/7417#issuecomment-643228149\n\n\n   https://issues.apache.org/jira/browse/ARROW-9079\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-12T11:46:55.018+0000",
                    "updated": "2020-06-12T11:46:55.018+0000",
                    "started": "2020-06-12T11:46:55.017+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "444818",
                    "issueId": "13310381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13310381/worklog/444819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #7417:\nURL: https://github.com/apache/arrow/pull/7417#discussion_r439371127\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_benchmark.cc\n##########\n@@ -0,0 +1,92 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include <vector>\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/benchmark_util.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x94378165;\n+\n+template <typename ArrowType, typename CType = typename ArrowType::c_type>\n+static void AddArrayScalarKernel(benchmark::State& state) {\n+  RegressionArgs args(state);\n+\n+  const int64_t array_size = args.size / sizeof(CType);\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  auto rand = random::RandomArrayGenerator(kSeed);\n+  auto lhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(Add(lhs, Datum(CType(15))).status());\n+  }\n+}\n+\n+template <typename ArrowType, typename CType = typename ArrowType::c_type>\n+static void AddArrayArrayKernel(benchmark::State& state) {\n+  RegressionArgs args(state);\n+\n+  const int64_t array_size = args.size / sizeof(CType);\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  auto rand = random::RandomArrayGenerator(kSeed);\n+  auto lhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+  auto rhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(Add(lhs, rhs).status());\n+  }\n+}\n+\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, Int64Type)->Apply(RegressionSetArgs);\n\nReview comment:\n       @bkietz I assume it would be better to parametrize the benchmark over the binary operator (`Add`, `Subtract`, `Multiply`), although I don't know how to pass both define a template parameter and pass an argument to gbench.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-12T11:46:58.008+0000",
                    "updated": "2020-06-12T11:46:58.008+0000",
                    "started": "2020-06-12T11:46:58.008+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "444819",
                    "issueId": "13310381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13310381/worklog/444872",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7417:\nURL: https://github.com/apache/arrow/pull/7417#issuecomment-643266987\n\n\n   Thanks for working on this. I'll check the benchmarks on MSVC also\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-12T13:20:49.741+0000",
                    "updated": "2020-06-12T13:20:49.741+0000",
                    "started": "2020-06-12T13:20:49.741+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "444872",
                    "issueId": "13310381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13310381/worklog/444884",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #7417:\nURL: https://github.com/apache/arrow/pull/7417#discussion_r439371127\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_benchmark.cc\n##########\n@@ -0,0 +1,92 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include <vector>\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/benchmark_util.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x94378165;\n+\n+template <typename ArrowType, typename CType = typename ArrowType::c_type>\n+static void AddArrayScalarKernel(benchmark::State& state) {\n+  RegressionArgs args(state);\n+\n+  const int64_t array_size = args.size / sizeof(CType);\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  auto rand = random::RandomArrayGenerator(kSeed);\n+  auto lhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(Add(lhs, Datum(CType(15))).status());\n+  }\n+}\n+\n+template <typename ArrowType, typename CType = typename ArrowType::c_type>\n+static void AddArrayArrayKernel(benchmark::State& state) {\n+  RegressionArgs args(state);\n+\n+  const int64_t array_size = args.size / sizeof(CType);\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  auto rand = random::RandomArrayGenerator(kSeed);\n+  auto lhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+  auto rhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(Add(lhs, rhs).status());\n+  }\n+}\n+\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, Int64Type)->Apply(RegressionSetArgs);\n\nReview comment:\n       @bkietz I assume it would be better to parametrize the benchmark over the binary operator (`Add`, `Subtract`, `Multiply`), although I don't know how to pass both a template parameter and a runtime argument to gbench.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-12T13:49:56.084+0000",
                    "updated": "2020-06-12T13:49:56.084+0000",
                    "started": "2020-06-12T13:49:56.083+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "444884",
                    "issueId": "13310381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13310381/worklog/444887",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7417:\nURL: https://github.com/apache/arrow/pull/7417#issuecomment-643281405\n\n\n   There don't seem to be issues on MSVC\r\n   \r\n   https://gist.github.com/wesm/45be57393b2d9186f87faae228f12380/revisions\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-12T13:51:54.414+0000",
                    "updated": "2020-06-12T13:51:54.414+0000",
                    "started": "2020-06-12T13:51:54.414+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "444887",
                    "issueId": "13310381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13310381/worklog/444892",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7417:\nURL: https://github.com/apache/arrow/pull/7417#discussion_r439431785\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_benchmark.cc\n##########\n@@ -0,0 +1,92 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include <vector>\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/benchmark_util.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x94378165;\n+\n+template <typename ArrowType, typename CType = typename ArrowType::c_type>\n+static void AddArrayScalarKernel(benchmark::State& state) {\n+  RegressionArgs args(state);\n+\n+  const int64_t array_size = args.size / sizeof(CType);\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  auto rand = random::RandomArrayGenerator(kSeed);\n+  auto lhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(Add(lhs, Datum(CType(15))).status());\n+  }\n+}\n+\n+template <typename ArrowType, typename CType = typename ArrowType::c_type>\n+static void AddArrayArrayKernel(benchmark::State& state) {\n+  RegressionArgs args(state);\n+\n+  const int64_t array_size = args.size / sizeof(CType);\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  auto rand = random::RandomArrayGenerator(kSeed);\n+  auto lhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+  auto rhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(Add(lhs, rhs).status());\n+  }\n\nReview comment:\n       can you add the items processed here also? (should be `state.iterations() * lhs->length()`)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_benchmark.cc\n##########\n@@ -0,0 +1,92 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include <vector>\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/benchmark_util.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x94378165;\n+\n+template <typename ArrowType, typename CType = typename ArrowType::c_type>\n+static void AddArrayScalarKernel(benchmark::State& state) {\n+  RegressionArgs args(state);\n+\n+  const int64_t array_size = args.size / sizeof(CType);\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  auto rand = random::RandomArrayGenerator(kSeed);\n+  auto lhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(Add(lhs, Datum(CType(15))).status());\n+  }\n+}\n+\n+template <typename ArrowType, typename CType = typename ArrowType::c_type>\n+static void AddArrayArrayKernel(benchmark::State& state) {\n+  RegressionArgs args(state);\n+\n+  const int64_t array_size = args.size / sizeof(CType);\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  auto rand = random::RandomArrayGenerator(kSeed);\n+  auto lhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+  auto rhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(Add(lhs, rhs).status());\n+  }\n+}\n+\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, Int64Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, Int32Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, Int16Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, Int8Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, UInt64Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, UInt32Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, UInt16Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, UInt8Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, FloatType)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, DoubleType)->Apply(RegressionSetArgs);\n+\n+BENCHMARK_TEMPLATE(AddArrayScalarKernel, Int64Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayScalarKernel, Int32Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayScalarKernel, Int16Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayScalarKernel, Int8Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayScalarKernel, UInt64Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayScalarKernel, UInt32Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayScalarKernel, UInt16Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayScalarKernel, UInt8Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayScalarKernel, FloatType)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayScalarKernel, DoubleType)->Apply(RegressionSetArgs);\n\nReview comment:\n       I don't think that having benchmarks across so many different null percentages for these kernels is useful because of how the validity bitmaps are handled (batch intersection). I'd suggest just having a \"with nulls\" and a \"no nulls\" benchmark (currently there isn't a no-nulls benchmark, so we don't know the overhead involved with propagating the nulls relative to computing the arithmetic output)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-12T13:56:10.810+0000",
                    "updated": "2020-06-12T13:56:10.810+0000",
                    "started": "2020-06-12T13:56:10.810+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "444892",
                    "issueId": "13310381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13310381/worklog/444947",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #7417:\nURL: https://github.com/apache/arrow/pull/7417#discussion_r439478018\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_benchmark.cc\n##########\n@@ -0,0 +1,92 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include <vector>\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/benchmark_util.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x94378165;\n+\n+template <typename ArrowType, typename CType = typename ArrowType::c_type>\n+static void AddArrayScalarKernel(benchmark::State& state) {\n+  RegressionArgs args(state);\n+\n+  const int64_t array_size = args.size / sizeof(CType);\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  auto rand = random::RandomArrayGenerator(kSeed);\n+  auto lhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(Add(lhs, Datum(CType(15))).status());\n+  }\n+}\n+\n+template <typename ArrowType, typename CType = typename ArrowType::c_type>\n+static void AddArrayArrayKernel(benchmark::State& state) {\n+  RegressionArgs args(state);\n+\n+  const int64_t array_size = args.size / sizeof(CType);\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  auto rand = random::RandomArrayGenerator(kSeed);\n+  auto lhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+  auto rhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(Add(lhs, rhs).status());\n+  }\n+}\n+\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, Int64Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, Int32Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, Int16Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, Int8Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, UInt64Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, UInt32Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, UInt16Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, UInt8Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, FloatType)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, DoubleType)->Apply(RegressionSetArgs);\n+\n+BENCHMARK_TEMPLATE(AddArrayScalarKernel, Int64Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayScalarKernel, Int32Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayScalarKernel, Int16Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayScalarKernel, Int8Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayScalarKernel, UInt64Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayScalarKernel, UInt32Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayScalarKernel, UInt16Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayScalarKernel, UInt8Type)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayScalarKernel, FloatType)->Apply(RegressionSetArgs);\n+BENCHMARK_TEMPLATE(AddArrayScalarKernel, DoubleType)->Apply(RegressionSetArgs);\n\nReview comment:\n       Okay\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-12T15:09:39.360+0000",
                    "updated": "2020-06-12T15:09:39.360+0000",
                    "started": "2020-06-12T15:09:39.360+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "444947",
                    "issueId": "13310381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13310381/worklog/444949",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #7417:\nURL: https://github.com/apache/arrow/pull/7417#discussion_r439478095\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_benchmark.cc\n##########\n@@ -0,0 +1,92 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include <vector>\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/benchmark_util.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x94378165;\n+\n+template <typename ArrowType, typename CType = typename ArrowType::c_type>\n+static void AddArrayScalarKernel(benchmark::State& state) {\n+  RegressionArgs args(state);\n+\n+  const int64_t array_size = args.size / sizeof(CType);\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  auto rand = random::RandomArrayGenerator(kSeed);\n+  auto lhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(Add(lhs, Datum(CType(15))).status());\n+  }\n+}\n+\n+template <typename ArrowType, typename CType = typename ArrowType::c_type>\n+static void AddArrayArrayKernel(benchmark::State& state) {\n+  RegressionArgs args(state);\n+\n+  const int64_t array_size = args.size / sizeof(CType);\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  auto rand = random::RandomArrayGenerator(kSeed);\n+  auto lhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+  auto rhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(Add(lhs, rhs).status());\n+  }\n\nReview comment:\n       Sure\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-12T15:09:55.603+0000",
                    "updated": "2020-06-12T15:09:55.603+0000",
                    "started": "2020-06-12T15:09:55.602+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "444949",
                    "issueId": "13310381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13310381/worklog/445087",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7417:\nURL: https://github.com/apache/arrow/pull/7417#discussion_r439577349\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_benchmark.cc\n##########\n@@ -0,0 +1,92 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include <vector>\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/benchmark_util.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x94378165;\n+\n+template <typename ArrowType, typename CType = typename ArrowType::c_type>\n+static void AddArrayScalarKernel(benchmark::State& state) {\n+  RegressionArgs args(state);\n+\n+  const int64_t array_size = args.size / sizeof(CType);\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  auto rand = random::RandomArrayGenerator(kSeed);\n+  auto lhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(Add(lhs, Datum(CType(15))).status());\n+  }\n+}\n+\n+template <typename ArrowType, typename CType = typename ArrowType::c_type>\n+static void AddArrayArrayKernel(benchmark::State& state) {\n+  RegressionArgs args(state);\n+\n+  const int64_t array_size = args.size / sizeof(CType);\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  auto rand = random::RandomArrayGenerator(kSeed);\n+  auto lhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+  auto rhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(Add(lhs, rhs).status());\n+  }\n+}\n+\n+BENCHMARK_TEMPLATE(AddArrayArrayKernel, Int64Type)->Apply(RegressionSetArgs);\n\nReview comment:\n       @kszucs we can use pass the operator as a template argument. I'll push a commit\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-12T18:24:01.031+0000",
                    "updated": "2020-06-12T18:24:01.031+0000",
                    "started": "2020-06-12T18:24:01.031+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "445087",
                    "issueId": "13310381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13310381/worklog/445096",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7417:\nURL: https://github.com/apache/arrow/pull/7417#discussion_r439583288\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_benchmark.cc\n##########\n@@ -0,0 +1,92 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include <vector>\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/benchmark_util.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x94378165;\n+\n+template <typename ArrowType, typename CType = typename ArrowType::c_type>\n+static void AddArrayScalarKernel(benchmark::State& state) {\n+  RegressionArgs args(state);\n+\n+  const int64_t array_size = args.size / sizeof(CType);\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  auto rand = random::RandomArrayGenerator(kSeed);\n+  auto lhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(Add(lhs, Datum(CType(15))).status());\n+  }\n+}\n+\n+template <typename ArrowType, typename CType = typename ArrowType::c_type>\n+static void AddArrayArrayKernel(benchmark::State& state) {\n+  RegressionArgs args(state);\n+\n+  const int64_t array_size = args.size / sizeof(CType);\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  auto rand = random::RandomArrayGenerator(kSeed);\n+  auto lhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+  auto rhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(Add(lhs, rhs).status());\n+  }\n\nReview comment:\n       Isn't that handled in `~RegressionArgs`?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-12T18:37:14.021+0000",
                    "updated": "2020-06-12T18:37:14.021+0000",
                    "started": "2020-06-12T18:37:14.021+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "445096",
                    "issueId": "13310381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13310381/worklog/445098",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7417:\nURL: https://github.com/apache/arrow/pull/7417#discussion_r439588572\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_benchmark.cc\n##########\n@@ -0,0 +1,92 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include <vector>\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/benchmark_util.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x94378165;\n+\n+template <typename ArrowType, typename CType = typename ArrowType::c_type>\n+static void AddArrayScalarKernel(benchmark::State& state) {\n+  RegressionArgs args(state);\n+\n+  const int64_t array_size = args.size / sizeof(CType);\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  auto rand = random::RandomArrayGenerator(kSeed);\n+  auto lhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(Add(lhs, Datum(CType(15))).status());\n+  }\n+}\n+\n+template <typename ArrowType, typename CType = typename ArrowType::c_type>\n+static void AddArrayArrayKernel(benchmark::State& state) {\n+  RegressionArgs args(state);\n+\n+  const int64_t array_size = args.size / sizeof(CType);\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  auto rand = random::RandomArrayGenerator(kSeed);\n+  auto lhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+  auto rhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(Add(lhs, rhs).status());\n+  }\n\nReview comment:\n       It's not -- there's a toggle whether the \"size\" that is supplied is bytes or items, but it's not possible to indicate both at the moment\r\n   \r\n   https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/benchmark_util.h#L100-L104\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-12T18:49:08.164+0000",
                    "updated": "2020-06-12T18:49:08.164+0000",
                    "started": "2020-06-12T18:49:08.163+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "445098",
                    "issueId": "13310381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13310381/worklog/445420",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7417:\nURL: https://github.com/apache/arrow/pull/7417#discussion_r439765195\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_benchmark.cc\n##########\n@@ -0,0 +1,92 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include <vector>\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/benchmark_util.h\"\n+#include \"arrow/compute/kernels/test_util.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+constexpr auto kSeed = 0x94378165;\n+\n+template <typename ArrowType, typename CType = typename ArrowType::c_type>\n+static void AddArrayScalarKernel(benchmark::State& state) {\n+  RegressionArgs args(state);\n+\n+  const int64_t array_size = args.size / sizeof(CType);\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  auto rand = random::RandomArrayGenerator(kSeed);\n+  auto lhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(Add(lhs, Datum(CType(15))).status());\n+  }\n+}\n+\n+template <typename ArrowType, typename CType = typename ArrowType::c_type>\n+static void AddArrayArrayKernel(benchmark::State& state) {\n+  RegressionArgs args(state);\n+\n+  const int64_t array_size = args.size / sizeof(CType);\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  auto rand = random::RandomArrayGenerator(kSeed);\n+  auto lhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+  auto rhs = std::static_pointer_cast<NumericArray<ArrowType>>(\n+      rand.Numeric<ArrowType>(array_size, min, max, args.null_proportion));\n+\n+  for (auto _ : state) {\n+    ABORT_NOT_OK(Add(lhs, rhs).status());\n+  }\n\nReview comment:\n       I just did this\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-13T20:00:43.371+0000",
                    "updated": "2020-06-13T20:00:43.371+0000",
                    "started": "2020-06-13T20:00:43.371+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "445420",
                    "issueId": "13310381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13310381/worklog/445421",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7417:\nURL: https://github.com/apache/arrow/pull/7417#issuecomment-643671002\n\n\n   +1. I fixed a few lingering issues that jumped out at me, will merge this once build passes\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-13T20:01:36.230+0000",
                    "updated": "2020-06-13T20:01:36.230+0000",
                    "started": "2020-06-13T20:01:36.230+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "445421",
                    "issueId": "13310381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13310381/worklog/445423",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7417:\nURL: https://github.com/apache/arrow/pull/7417#discussion_r439765330\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_benchmark.cc\n##########\n@@ -67,89 +68,35 @@ static void ArrayArrayKernel(benchmark::State& state) {\n   for (auto _ : state) {\n     ABORT_NOT_OK(Op(lhs, rhs, nullptr).status());\n   }\n+  state.SetItemsProcessed(state.iterations() * array_size);\n }\n \n void SetArgs(benchmark::internal::Benchmark* bench) {\n-  bench->Unit(benchmark::kMicrosecond);\n-\n-  for (const auto size : kMemorySizes) {\n+  for (const auto size : {kL1Size, kL2Size}) {\n\nReview comment:\n       I have a processor with 22MB L3 cache so generating that much random data is quite expensive. If we want to benchmark arrays that big we should generate a smaller sample of random data and repeat/tile it to make the bigger array. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-13T20:02:42.720+0000",
                    "updated": "2020-06-13T20:02:42.720+0000",
                    "started": "2020-06-13T20:02:42.720+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "445423",
                    "issueId": "13310381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13310381/worklog/445629",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #7417:\nURL: https://github.com/apache/arrow/pull/7417\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-15T02:14:51.553+0000",
                    "updated": "2020-06-15T02:14:51.553+0000",
                    "started": "2020-06-15T02:14:51.553+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "445629",
                    "issueId": "13310381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13310381/worklog/445802",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #7417:\nURL: https://github.com/apache/arrow/pull/7417#issuecomment-644083982\n\n\n   Thanks!\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-15T11:56:29.624+0000",
                    "updated": "2020-06-15T11:56:29.624+0000",
                    "started": "2020-06-15T11:56:29.624+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "445802",
                    "issueId": "13310381"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 10800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@240cd7b[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@51e9ff[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@563a068b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@592b03a2[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@63cddb3f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1836dd6b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ebe9eb8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1f89b8de[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@12108c33[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3ce3c69f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5642c4e5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@45fc9bb[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10800,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jun 15 02:14:54 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-06-15T02:14:54.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9079/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-06-09T12:15:15.000+0000",
        "updated": "2020-06-15T11:56:30.000+0000",
        "timeoriginalestimate": null,
        "description": "The add kernel's implementation has changed in https://github.com/apache/arrow/pull/7341, in order to ensure that no performance regression was introduced write a benchmark for the kernels and compare the results with the previous implementation.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Write benchmark for arithmetic kernels",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13310381/comment/17135335",
                    "id": "17135335",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 7417\n[https://github.com/apache/arrow/pull/7417]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-06-15T02:14:54.207+0000",
                    "updated": "2020-06-15T02:14:54.207+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0fo40:",
        "customfield_12314139": null
    }
}