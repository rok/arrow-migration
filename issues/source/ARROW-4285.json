{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13210311",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210311",
    "key": "ARROW-4285",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
            "name": "pcmoritz",
            "key": "pcmoritz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Philipp Moritz",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
            "name": "pcmoritz",
            "key": "pcmoritz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Philipp Moritz",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
            "name": "pcmoritz",
            "key": "pcmoritz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Philipp Moritz",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 40200,
            "total": 40200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 40200,
            "total": 40200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4285/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 74,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210311/worklog/186751",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz commented on pull request #3423: ARROW-4285: [Python] Use proper builder interface for serialization\nURL: https://github.com/apache/arrow/pull/3423\n \n \n   The UnionBuilder API is still pretty rough, feedback on where it should go is appreciated. It also raises the question on what the best way to do type inference (i.e. which type will the UnionArray have?). Having this in the builder would be super useful though also for other applications where the schema is not known in advance.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-18T06:49:17.432+0000",
                    "updated": "2019-01-18T06:49:17.432+0000",
                    "started": "2019-01-18T06:49:17.431+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "186751",
                    "issueId": "13210311"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210311/worklog/186761",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3423: ARROW-4285: [Python] Use proper builder interface for serialization\nURL: https://github.com/apache/arrow/pull/3423#issuecomment-455451432\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3423?src=pr&el=h1) Report\n   > Merging [#3423](https://codecov.io/gh/apache/arrow/pull/3423?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/0f8bd747468dd28c909ef823bed77d8082a5b373?src=pr&el=desc) will **increase** coverage by `0.97%`.\n   > The diff coverage is `93.02%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3423/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3423?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##           master   #3423      +/-   ##\n   =========================================\n   + Coverage   88.32%   89.3%   +0.97%     \n   =========================================\n     Files         631     504     -127     \n     Lines       79310   70265    -9045     \n     Branches     1069       0    -1069     \n   =========================================\n   - Hits        70052   62749    -7303     \n   + Misses       9147    7516    -1631     \n   + Partials      111       0     -111\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3423?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/python/serialize.h](https://codecov.io/gh/apache/arrow/pull/3423/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vc2VyaWFsaXplLmg=) | `0% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/array/builder\\_union.cc](https://codecov.io/gh/apache/arrow/pull/3423/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS9idWlsZGVyX3VuaW9uLmNj) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/array/builder\\_union.h](https://codecov.io/gh/apache/arrow/pull/3423/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS9idWlsZGVyX3VuaW9uLmg=) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/array/builder\\_nested.cc](https://codecov.io/gh/apache/arrow/pull/3423/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS9idWlsZGVyX25lc3RlZC5jYw==) | `97.33% <100%> (+0.36%)` | :arrow_up: |\n   | [cpp/src/arrow/python/serialize.cc](https://codecov.io/gh/apache/arrow/pull/3423/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vc2VyaWFsaXplLmNj) | `86.41% <89.79%> (-1.11%)` | :arrow_down: |\n   | [cpp/src/arrow/python/deserialize.cc](https://codecov.io/gh/apache/arrow/pull/3423/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vZGVzZXJpYWxpemUuY2M=) | `87.56% <91.66%> (+0.5%)` | :arrow_up: |\n   | [cpp/src/arrow/python/iterators.h](https://codecov.io/gh/apache/arrow/pull/3423/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vaXRlcmF0b3JzLmg=) | `75% <0%> (-16.08%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3423/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3423/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | | |\n   | [js/src/enum.ts](https://codecov.io/gh/apache/arrow/pull/3423/diff?src=pr&el=tree#diff-anMvc3JjL2VudW0udHM=) | | |\n   | ... and [130 more](https://codecov.io/gh/apache/arrow/pull/3423/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3423?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3423?src=pr&el=footer). Last update [0f8bd74...94a169d](https://codecov.io/gh/apache/arrow/pull/3423?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-18T07:24:27.837+0000",
                    "updated": "2019-01-18T07:24:27.837+0000",
                    "started": "2019-01-18T07:24:27.837+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "186761",
                    "issueId": "13210311"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210311/worklog/187370",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3423: ARROW-4285: [Python] Use proper builder interface for serialization\nURL: https://github.com/apache/arrow/pull/3423#issuecomment-455795281\n \n \n   rebased. I had to squash because the prior merge commit made rebasing on master impossible\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-19T16:41:23.083+0000",
                    "updated": "2019-01-19T16:41:23.083+0000",
                    "started": "2019-01-19T16:41:23.083+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "187370",
                    "issueId": "13210311"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210311/worklog/188395",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3423: ARROW-4285: [Python] Use proper builder interface for serialization\nURL: https://github.com/apache/arrow/pull/3423#discussion_r249892186\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_nested.cc\n ##########\n @@ -135,17 +140,28 @@ void StructBuilder::Reset() {\n \n Status StructBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n   RETURN_NOT_OK(TrimBuffer(BitUtil::BytesForBits(length_), null_bitmap_.get()));\n-  *out = ArrayData::Make(type_, length_, {null_bitmap_}, null_count_);\n \n-  (*out)->child_data.resize(children_.size());\n+  std::vector<std::shared_ptr<ArrayData>> child_data(children_.size());\n   for (size_t i = 0; i < children_.size(); ++i) {\n     if (length_ == 0) {\n       // Try to make sure the child buffers are initialized\n       RETURN_NOT_OK(children_[i]->Resize(0));\n     }\n-    RETURN_NOT_OK(children_[i]->FinishInternal(&(*out)->child_data[i]));\n+    RETURN_NOT_OK(children_[i]->FinishInternal(&child_data[i]));\n   }\n \n+  // If the type has not been specified, infer it.\n+  if (!type_) {\n+    std::vector<std::shared_ptr<Field>> fields;\n+    for (const auto& field_builder : children_) {\n+      fields.push_back(std::make_shared<Field>(\"\", field_builder->type()));\n \n Review comment:\n   Should use the `field()` factory function.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-22T18:25:33.852+0000",
                    "updated": "2019-01-22T18:25:33.852+0000",
                    "started": "2019-01-22T18:25:33.851+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188395",
                    "issueId": "13210311"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210311/worklog/188396",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3423: ARROW-4285: [Python] Use proper builder interface for serialization\nURL: https://github.com/apache/arrow/pull/3423#discussion_r249893936\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_nested.cc\n ##########\n @@ -99,6 +99,11 @@ Status ListBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n     RETURN_NOT_OK(value_builder_->FinishInternal(&items));\n   }\n \n+  // If the type hasn't been specified in the constructor, try to infer it\n \n Review comment:\n   When does it happen? The same initialization already happens in `ListBuilder::ListBuilder` above.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-22T18:25:34.637+0000",
                    "updated": "2019-01-22T18:25:34.637+0000",
                    "started": "2019-01-22T18:25:34.637+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188396",
                    "issueId": "13210311"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210311/worklog/188397",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3423: ARROW-4285: [Python] Use proper builder interface for serialization\nURL: https://github.com/apache/arrow/pull/3423#discussion_r249892398\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_nested.cc\n ##########\n @@ -135,17 +140,28 @@ void StructBuilder::Reset() {\n \n Status StructBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n   RETURN_NOT_OK(TrimBuffer(BitUtil::BytesForBits(length_), null_bitmap_.get()));\n-  *out = ArrayData::Make(type_, length_, {null_bitmap_}, null_count_);\n \n-  (*out)->child_data.resize(children_.size());\n+  std::vector<std::shared_ptr<ArrayData>> child_data(children_.size());\n   for (size_t i = 0; i < children_.size(); ++i) {\n     if (length_ == 0) {\n       // Try to make sure the child buffers are initialized\n       RETURN_NOT_OK(children_[i]->Resize(0));\n     }\n-    RETURN_NOT_OK(children_[i]->FinishInternal(&(*out)->child_data[i]));\n+    RETURN_NOT_OK(children_[i]->FinishInternal(&child_data[i]));\n   }\n \n+  // If the type has not been specified, infer it.\n+  if (!type_) {\n+    std::vector<std::shared_ptr<Field>> fields;\n+    for (const auto& field_builder : children_) {\n+      fields.push_back(std::make_shared<Field>(\"\", field_builder->type()));\n+    }\n+    type_ = std::make_shared<StructType>(fields);\n \n Review comment:\n   Should use the `struct_()` factory function.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-22T18:25:34.667+0000",
                    "updated": "2019-01-22T18:25:34.667+0000",
                    "started": "2019-01-22T18:25:34.667+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188397",
                    "issueId": "13210311"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210311/worklog/188398",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3423: ARROW-4285: [Python] Use proper builder interface for serialization\nURL: https://github.com/apache/arrow/pull/3423#discussion_r249896175\n \n \n\n ##########\n File path: cpp/src/arrow/python/serialize.h\n ##########\n @@ -107,6 +107,24 @@ Status WriteNdarrayHeader(std::shared_ptr<DataType> dtype,\n                           const std::vector<int64_t>& shape, int64_t tensor_num_bytes,\n                           io::OutputStream* dst);\n \n+constexpr int8_t kBoolTag = 0;\n \n Review comment:\n   Please make this an enumeration instead.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-22T18:25:34.913+0000",
                    "updated": "2019-01-22T18:25:34.913+0000",
                    "started": "2019-01-22T18:25:34.913+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188398",
                    "issueId": "13210311"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210311/worklog/188399",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3423: ARROW-4285: [Python] Use proper builder interface for serialization\nURL: https://github.com/apache/arrow/pull/3423#discussion_r249897228\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_union.h\n ##########\n @@ -0,0 +1,57 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/array/builder_base.h\"\n+#include \"arrow/buffer-builder.h\"\n+\n+namespace arrow {\n+\n+class ARROW_EXPORT UnionBuilder : public ArrayBuilder {\n+ public:\n+  UnionBuilder(MemoryPool* pool,\n+               const std::vector<std::shared_ptr<ArrayBuilder>>& children);\n+\n+  Status AppendNull() {\n+    ARROW_RETURN_NOT_OK(types_builder_.Append(0));\n+    ARROW_RETURN_NOT_OK(offsets_builder_.Append(0));\n+    return AppendToBitmap(false);\n+  }\n+\n+  Status Append(int8_t type, int32_t offset) {\n+    ARROW_RETURN_NOT_OK(types_builder_.Append(type));\n+    ARROW_RETURN_NOT_OK(offsets_builder_.Append(offset));\n+    return AppendToBitmap(true);\n+  }\n+\n+  Status FinishInternal(std::shared_ptr<ArrayData>* out) override;\n+\n+  void SetChild(int32_t i, const std::shared_ptr<ArrayBuilder>& child) {\n \n Review comment:\n   This doesn't look like a very nice API (you are expected to know up front the maximum number of union fields, and you can get \"holes\" in the children types). I think it would be better to have something like:\r\n   ```cpp\r\n   int32_t AppendChild(const std::shared_ptr<ArrayBuilder>& child) {\r\n     children_.push_back(child);\r\n     return static_cast<int32_t>(children_.size() - 1);\r\n   }\r\n   ```\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-22T18:25:35.170+0000",
                    "updated": "2019-01-22T18:25:35.170+0000",
                    "started": "2019-01-22T18:25:35.169+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188399",
                    "issueId": "13210311"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210311/worklog/188400",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3423: ARROW-4285: [Python] Use proper builder interface for serialization\nURL: https://github.com/apache/arrow/pull/3423#discussion_r249897494\n \n \n\n ##########\n File path: cpp/src/arrow/python/deserialize.cc\n ##########\n @@ -108,111 +108,108 @@ Status DeserializeArray(int32_t index, PyObject* base, const SerializedPyObject&\n   return Status::OK();\n }\n \n-Status GetValue(PyObject* context, const UnionArray& parent, const Array& arr,\n-                int64_t index, int32_t type, PyObject* base,\n-                const SerializedPyObject& blobs, PyObject** result) {\n-  switch (arr.type()->id()) {\n-    case Type::BOOL:\n+Status GetValue(PyObject* context, const Array& arr, int64_t index, int32_t type,\n+                PyObject* base, const SerializedPyObject& blobs, PyObject** result) {\n+  switch (type) {\n+    case kBoolTag:\n       *result = PyBool_FromLong(checked_cast<const BooleanArray&>(arr).Value(index));\n       return Status::OK();\n-    case Type::INT64: {\n+    case kPy2IntTag:\n+    case kIntTag: {\n #if PY_MAJOR_VERSION < 3\n-      const std::string& child_name = parent.type()->child(type)->name();\n-      if (child_name == \"py2_int\") {\n \n Review comment:\n   It's nice to get rid of this hack :-)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-22T18:25:35.196+0000",
                    "updated": "2019-01-22T18:25:35.196+0000",
                    "started": "2019-01-22T18:25:35.196+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188400",
                    "issueId": "13210311"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210311/worklog/188401",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3423: ARROW-4285: [Python] Use proper builder interface for serialization\nURL: https://github.com/apache/arrow/pull/3423#discussion_r249901500\n \n \n\n ##########\n File path: cpp/src/arrow/python/serialize.cc\n ##########\n @@ -55,305 +56,199 @@ using internal::checked_cast;\n \n namespace py {\n \n+class SequenceBuilder;\n+class DictBuilder;\n+\n+Status Append(PyObject* context, PyObject* elem, SequenceBuilder* builder,\n+              int32_t recursion_depth, SerializedPyObject* blobs_out);\n+\n // A Sequence is a heterogeneous collections of elements. It can contain\n // scalar Python types, lists, tuples, dictionaries and tensors.\n class SequenceBuilder {\n  public:\n   explicit SequenceBuilder(MemoryPool* pool ARROW_MEMORY_POOL_DEFAULT)\n-      : pool_(pool),\n-        types_(::arrow::int8(), pool),\n-        offsets_(::arrow::int32(), pool),\n-        nones_(pool),\n-        bools_(::arrow::boolean(), pool),\n-        ints_(::arrow::int64(), pool),\n-        py2_ints_(::arrow::int64(), pool),\n-        bytes_(::arrow::binary(), pool),\n-        strings_(pool),\n-        half_floats_(::arrow::float16(), pool),\n-        floats_(::arrow::float32(), pool),\n-        doubles_(::arrow::float64(), pool),\n-        date64s_(::arrow::date64(), pool),\n-        tensor_indices_(::arrow::int32(), pool),\n-        ndarray_indices_(::arrow::int32(), pool),\n-        buffer_indices_(::arrow::int32(), pool),\n-        list_offsets_({0}),\n-        tuple_offsets_({0}),\n-        dict_offsets_({0}),\n-        set_offsets_({0}) {}\n+      : pool_(pool), types_(::arrow::int8(), pool), offsets_(::arrow::int32(), pool) {\n+    std::vector<std::shared_ptr<ArrayBuilder>> child_builders(kNumTags);\n+    builder_.reset(new UnionBuilder(pool, child_builders));\n+  }\n \n   // Appending a none to the sequence\n-  Status AppendNone() {\n-    RETURN_NOT_OK(offsets_.Append(0));\n-    RETURN_NOT_OK(types_.Append(0));\n-    return nones_.AppendNull();\n-  }\n+  Status AppendNone() { return builder_->AppendNull(); }\n \n-  Status Update(int64_t offset, int8_t* tag) {\n-    if (*tag == -1) {\n-      *tag = num_tags_++;\n-    }\n+  template <typename BuilderType>\n+  Status Update(std::shared_ptr<BuilderType>& child_builder, int8_t tag) {\n \n Review comment:\n   Can make this `BuilderType* child_builder`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-22T18:25:35.216+0000",
                    "updated": "2019-01-22T18:25:35.216+0000",
                    "started": "2019-01-22T18:25:35.216+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188401",
                    "issueId": "13210311"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210311/worklog/188402",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3423: ARROW-4285: [Python] Use proper builder interface for serialization\nURL: https://github.com/apache/arrow/pull/3423#discussion_r249901892\n \n \n\n ##########\n File path: cpp/src/arrow/python/serialize.cc\n ##########\n @@ -55,305 +56,199 @@ using internal::checked_cast;\n \n namespace py {\n \n+class SequenceBuilder;\n+class DictBuilder;\n+\n+Status Append(PyObject* context, PyObject* elem, SequenceBuilder* builder,\n+              int32_t recursion_depth, SerializedPyObject* blobs_out);\n+\n // A Sequence is a heterogeneous collections of elements. It can contain\n // scalar Python types, lists, tuples, dictionaries and tensors.\n class SequenceBuilder {\n  public:\n   explicit SequenceBuilder(MemoryPool* pool ARROW_MEMORY_POOL_DEFAULT)\n-      : pool_(pool),\n-        types_(::arrow::int8(), pool),\n-        offsets_(::arrow::int32(), pool),\n-        nones_(pool),\n-        bools_(::arrow::boolean(), pool),\n-        ints_(::arrow::int64(), pool),\n-        py2_ints_(::arrow::int64(), pool),\n-        bytes_(::arrow::binary(), pool),\n-        strings_(pool),\n-        half_floats_(::arrow::float16(), pool),\n-        floats_(::arrow::float32(), pool),\n-        doubles_(::arrow::float64(), pool),\n-        date64s_(::arrow::date64(), pool),\n-        tensor_indices_(::arrow::int32(), pool),\n-        ndarray_indices_(::arrow::int32(), pool),\n-        buffer_indices_(::arrow::int32(), pool),\n-        list_offsets_({0}),\n-        tuple_offsets_({0}),\n-        dict_offsets_({0}),\n-        set_offsets_({0}) {}\n+      : pool_(pool), types_(::arrow::int8(), pool), offsets_(::arrow::int32(), pool) {\n+    std::vector<std::shared_ptr<ArrayBuilder>> child_builders(kNumTags);\n+    builder_.reset(new UnionBuilder(pool, child_builders));\n+  }\n \n   // Appending a none to the sequence\n-  Status AppendNone() {\n-    RETURN_NOT_OK(offsets_.Append(0));\n-    RETURN_NOT_OK(types_.Append(0));\n-    return nones_.AppendNull();\n-  }\n+  Status AppendNone() { return builder_->AppendNull(); }\n \n-  Status Update(int64_t offset, int8_t* tag) {\n-    if (*tag == -1) {\n-      *tag = num_tags_++;\n-    }\n+  template <typename BuilderType>\n+  Status Update(std::shared_ptr<BuilderType>& child_builder, int8_t tag) {\n     int32_t offset32 = -1;\n-    RETURN_NOT_OK(internal::CastSize(offset, &offset32));\n+    RETURN_NOT_OK(internal::CastSize(child_builder->length(), &offset32));\n     DCHECK_GE(offset32, 0);\n-    RETURN_NOT_OK(offsets_.Append(offset32));\n-    RETURN_NOT_OK(types_.Append(*tag));\n-    return nones_.Append(true);\n+    return builder_->Append(tag, offset32);\n+  }\n+\n+  template <typename BuilderType>\n+  Status CreateAndUpdate(std::shared_ptr<BuilderType>& child_builder, int8_t tag) {\n+    if (!child_builder) {\n+      child_builder.reset(new BuilderType(pool_));\n+      builder_->SetChild(tag, child_builder);\n+    }\n+    return Update(child_builder, tag);\n   }\n \n   template <typename BuilderType, typename T>\n-  Status AppendPrimitive(const T val, int8_t* tag, BuilderType* out) {\n-    RETURN_NOT_OK(Update(out->length(), tag));\n-    return out->Append(val);\n+  Status AppendPrimitive(const T val, int8_t tag,\n+                         std::shared_ptr<BuilderType>& child_builder) {\n \n Review comment:\n   Same here (make `child_builder` a pointer).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-22T18:25:35.258+0000",
                    "updated": "2019-01-22T18:25:35.258+0000",
                    "started": "2019-01-22T18:25:35.257+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188402",
                    "issueId": "13210311"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210311/worklog/188403",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3423: ARROW-4285: [Python] Use proper builder interface for serialization\nURL: https://github.com/apache/arrow/pull/3423#discussion_r249892802\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_union.h\n ##########\n @@ -0,0 +1,57 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/array/builder_base.h\"\n+#include \"arrow/buffer-builder.h\"\n+\n+namespace arrow {\n+\n+class ARROW_EXPORT UnionBuilder : public ArrayBuilder {\n \n Review comment:\n   Please add a docstring here and for the various methods.\r\n   Also, make it explicitly whether it builds dense or sparse unions (call it `DenseUnionBuilder`?).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-22T18:25:35.274+0000",
                    "updated": "2019-01-22T18:25:35.274+0000",
                    "started": "2019-01-22T18:25:35.274+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188403",
                    "issueId": "13210311"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210311/worklog/188404",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3423: ARROW-4285: [Python] Use proper builder interface for serialization\nURL: https://github.com/apache/arrow/pull/3423#discussion_r249900652\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_union.cc\n ##########\n @@ -0,0 +1,62 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/array/builder_union.h\"\n+\n+#include <utility>\n+\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+\n+UnionBuilder::UnionBuilder(MemoryPool* pool,\n+                           const std::vector<std::shared_ptr<ArrayBuilder>>& children)\n+    : ArrayBuilder(nullptr, pool), types_builder_(pool), offsets_builder_(pool) {\n+  children_ = children;\n+}\n+\n+Status UnionBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n+  std::shared_ptr<Buffer> types;\n+  RETURN_NOT_OK(types_builder_.Finish(&types));\n+  std::shared_ptr<Buffer> offsets;\n+  RETURN_NOT_OK(offsets_builder_.Finish(&offsets));\n+\n+  std::vector<std::shared_ptr<Field>> fields;\n+  std::vector<std::shared_ptr<ArrayData>> child_data(children_.size());\n+  std::vector<uint8_t> type_ids;\n+  for (size_t i = 0; i < children_.size(); ++i) {\n+    if (children_[i]) {\n+      std::shared_ptr<ArrayData> data;\n+      RETURN_NOT_OK(children_[i]->FinishInternal(&data));\n+      child_data[i] = data;\n+      fields.push_back(::arrow::field(\"\", children_[i]->type()));\n+      type_ids.push_back(static_cast<uint8_t>(i));\n+    } else {\n+      fields.push_back(::arrow::field(\"\", ::arrow::null()));\n+      child_data[i] = ArrayData::Make(::arrow::null(), 0);\n+      type_ids.push_back(static_cast<uint8_t>(i));\n+    }\n+  }\n+\n+  type_ = ::arrow::union_(fields, type_ids, UnionMode::DENSE);\n \n Review comment:\n   We're already in the `arrow` namespace, so you should be able to call `union_()` directly.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-22T18:25:35.289+0000",
                    "updated": "2019-01-22T18:25:35.289+0000",
                    "started": "2019-01-22T18:25:35.288+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188404",
                    "issueId": "13210311"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210311/worklog/188405",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3423: ARROW-4285: [Python] Use proper builder interface for serialization\nURL: https://github.com/apache/arrow/pull/3423#discussion_r249902448\n \n \n\n ##########\n File path: cpp/src/arrow/python/serialize.cc\n ##########\n @@ -55,305 +56,199 @@ using internal::checked_cast;\n \n namespace py {\n \n+class SequenceBuilder;\n+class DictBuilder;\n+\n+Status Append(PyObject* context, PyObject* elem, SequenceBuilder* builder,\n+              int32_t recursion_depth, SerializedPyObject* blobs_out);\n+\n // A Sequence is a heterogeneous collections of elements. It can contain\n // scalar Python types, lists, tuples, dictionaries and tensors.\n class SequenceBuilder {\n  public:\n   explicit SequenceBuilder(MemoryPool* pool ARROW_MEMORY_POOL_DEFAULT)\n-      : pool_(pool),\n-        types_(::arrow::int8(), pool),\n-        offsets_(::arrow::int32(), pool),\n-        nones_(pool),\n-        bools_(::arrow::boolean(), pool),\n-        ints_(::arrow::int64(), pool),\n-        py2_ints_(::arrow::int64(), pool),\n-        bytes_(::arrow::binary(), pool),\n-        strings_(pool),\n-        half_floats_(::arrow::float16(), pool),\n-        floats_(::arrow::float32(), pool),\n-        doubles_(::arrow::float64(), pool),\n-        date64s_(::arrow::date64(), pool),\n-        tensor_indices_(::arrow::int32(), pool),\n-        ndarray_indices_(::arrow::int32(), pool),\n-        buffer_indices_(::arrow::int32(), pool),\n-        list_offsets_({0}),\n-        tuple_offsets_({0}),\n-        dict_offsets_({0}),\n-        set_offsets_({0}) {}\n+      : pool_(pool), types_(::arrow::int8(), pool), offsets_(::arrow::int32(), pool) {\n+    std::vector<std::shared_ptr<ArrayBuilder>> child_builders(kNumTags);\n+    builder_.reset(new UnionBuilder(pool, child_builders));\n+  }\n \n   // Appending a none to the sequence\n-  Status AppendNone() {\n-    RETURN_NOT_OK(offsets_.Append(0));\n-    RETURN_NOT_OK(types_.Append(0));\n-    return nones_.AppendNull();\n-  }\n+  Status AppendNone() { return builder_->AppendNull(); }\n \n-  Status Update(int64_t offset, int8_t* tag) {\n-    if (*tag == -1) {\n-      *tag = num_tags_++;\n-    }\n+  template <typename BuilderType>\n+  Status Update(std::shared_ptr<BuilderType>& child_builder, int8_t tag) {\n     int32_t offset32 = -1;\n-    RETURN_NOT_OK(internal::CastSize(offset, &offset32));\n+    RETURN_NOT_OK(internal::CastSize(child_builder->length(), &offset32));\n     DCHECK_GE(offset32, 0);\n-    RETURN_NOT_OK(offsets_.Append(offset32));\n-    RETURN_NOT_OK(types_.Append(*tag));\n-    return nones_.Append(true);\n+    return builder_->Append(tag, offset32);\n+  }\n+\n+  template <typename BuilderType>\n+  Status CreateAndUpdate(std::shared_ptr<BuilderType>& child_builder, int8_t tag) {\n+    if (!child_builder) {\n+      child_builder.reset(new BuilderType(pool_));\n+      builder_->SetChild(tag, child_builder);\n+    }\n+    return Update(child_builder, tag);\n   }\n \n   template <typename BuilderType, typename T>\n-  Status AppendPrimitive(const T val, int8_t* tag, BuilderType* out) {\n-    RETURN_NOT_OK(Update(out->length(), tag));\n-    return out->Append(val);\n+  Status AppendPrimitive(const T val, int8_t tag,\n+                         std::shared_ptr<BuilderType>& child_builder) {\n+    RETURN_NOT_OK(CreateAndUpdate(child_builder, tag));\n+    return child_builder->Append(val);\n   }\n \n   // Appending a boolean to the sequence\n-  Status AppendBool(const bool data) {\n-    return AppendPrimitive(data, &bool_tag_, &bools_);\n-  }\n+  Status AppendBool(const bool data) { return AppendPrimitive(data, kBoolTag, bools_); }\n \n   // Appending a python 2 int64_t to the sequence\n   Status AppendPy2Int64(const int64_t data) {\n-    return AppendPrimitive(data, &py2_int_tag_, &py2_ints_);\n+    return AppendPrimitive(data, kPy2IntTag, py2_ints_);\n   }\n \n   // Appending an int64_t to the sequence\n-  Status AppendInt64(const int64_t data) {\n-    return AppendPrimitive(data, &int_tag_, &ints_);\n-  }\n+  Status AppendInt64(const int64_t data) { return AppendPrimitive(data, kIntTag, ints_); }\n \n   // Append a list of bytes to the sequence\n   Status AppendBytes(const uint8_t* data, int32_t length) {\n-    RETURN_NOT_OK(Update(bytes_.length(), &bytes_tag_));\n-    return bytes_.Append(data, length);\n+    RETURN_NOT_OK(CreateAndUpdate(bytes_, kBytesTag));\n+    return bytes_->Append(data, length);\n   }\n \n   // Appending a string to the sequence\n   Status AppendString(const char* data, int32_t length) {\n-    RETURN_NOT_OK(Update(strings_.length(), &string_tag_));\n-    return strings_.Append(data, length);\n+    RETURN_NOT_OK(CreateAndUpdate(strings_, kStringTag));\n+    return strings_->Append(data, length);\n   }\n \n   // Appending a half_float to the sequence\n   Status AppendHalfFloat(const npy_half data) {\n-    return AppendPrimitive(data, &half_float_tag_, &half_floats_);\n+    return AppendPrimitive(data, kHalfFloatTag, half_floats_);\n   }\n \n   // Appending a float to the sequence\n   Status AppendFloat(const float data) {\n-    return AppendPrimitive(data, &float_tag_, &floats_);\n+    return AppendPrimitive(data, kFloatTag, floats_);\n   }\n \n   // Appending a double to the sequence\n   Status AppendDouble(const double data) {\n-    return AppendPrimitive(data, &double_tag_, &doubles_);\n+    return AppendPrimitive(data, kDoubleTag, doubles_);\n   }\n \n   // Appending a Date64 timestamp to the sequence\n   Status AppendDate64(const int64_t timestamp) {\n-    return AppendPrimitive(timestamp, &date64_tag_, &date64s_);\n+    return AppendPrimitive(timestamp, kDate64Tag, date64s_);\n   }\n \n   // Appending a tensor to the sequence\n   //\n   // \\param tensor_index Index of the tensor in the object.\n   Status AppendTensor(const int32_t tensor_index) {\n-    RETURN_NOT_OK(Update(tensor_indices_.length(), &tensor_tag_));\n-    return tensor_indices_.Append(tensor_index);\n+    RETURN_NOT_OK(CreateAndUpdate(tensor_indices_, kTensorTag));\n+    return tensor_indices_->Append(tensor_index);\n   }\n \n   // Appending a numpy ndarray to the sequence\n   //\n   // \\param tensor_index Index of the tensor in the object.\n   Status AppendNdarray(const int32_t ndarray_index) {\n-    RETURN_NOT_OK(Update(ndarray_indices_.length(), &ndarray_tag_));\n-    return ndarray_indices_.Append(ndarray_index);\n+    RETURN_NOT_OK(CreateAndUpdate(ndarray_indices_, kNdarrayTag));\n+    return ndarray_indices_->Append(ndarray_index);\n   }\n \n   // Appending a buffer to the sequence\n   //\n   // \\param buffer_index Indes of the buffer in the object.\n   Status AppendBuffer(const int32_t buffer_index) {\n-    RETURN_NOT_OK(Update(buffer_indices_.length(), &buffer_tag_));\n-    return buffer_indices_.Append(buffer_index);\n-  }\n-\n-  // Add a sublist to the sequence. The data contained in the sublist will be\n-  // specified in the \"Finish\" method.\n-  //\n-  // To construct l = [[11, 22], 33, [44, 55]] you would for example run\n-  // list = ListBuilder();\n-  // list.AppendList(2);\n-  // list.Append(33);\n-  // list.AppendList(2);\n-  // list.Finish([11, 22, 44, 55]);\n-  // list.Finish();\n-\n-  // \\param size\n-  // The size of the sublist\n-  Status AppendList(Py_ssize_t size) {\n-    int32_t offset;\n-    RETURN_NOT_OK(internal::CastSize(list_offsets_.back() + size, &offset));\n-    RETURN_NOT_OK(Update(list_offsets_.size() - 1, &list_tag_));\n-    list_offsets_.push_back(offset);\n+    RETURN_NOT_OK(CreateAndUpdate(buffer_indices_, kBufferTag));\n+    return buffer_indices_->Append(buffer_index);\n+  }\n+\n+  Status AppendSequence(PyObject* context, PyObject* sequence, int8_t tag,\n+                        std::shared_ptr<ListBuilder>& target_sequence,\n+                        std::unique_ptr<SequenceBuilder>& values, int32_t recursion_depth,\n+                        SerializedPyObject* blobs_out) {\n+    if (recursion_depth >= kMaxRecursionDepth) {\n+      return Status::NotImplemented(\n+          \"This object exceeds the maximum recursion depth. It may contain itself \"\n+          \"recursively.\");\n+    }\n+    if (!values) {\n+      values.reset(new SequenceBuilder(pool_));\n+      target_sequence.reset(new ListBuilder(pool_, values->builder()));\n+      builder_->SetChild(tag, target_sequence);\n+    }\n+    RETURN_NOT_OK(Update(target_sequence, tag));\n+    RETURN_NOT_OK(target_sequence->Append());\n+    PyObject* iter = PyObject_GetIter(sequence);\n \n Review comment:\n   When is `iter` decref'ed?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-22T18:25:35.293+0000",
                    "updated": "2019-01-22T18:25:35.293+0000",
                    "started": "2019-01-22T18:25:35.293+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188405",
                    "issueId": "13210311"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210311/worklog/188406",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3423: ARROW-4285: [Python] Use proper builder interface for serialization\nURL: https://github.com/apache/arrow/pull/3423#discussion_r249902612\n \n \n\n ##########\n File path: cpp/src/arrow/python/serialize.cc\n ##########\n @@ -55,305 +56,199 @@ using internal::checked_cast;\n \n namespace py {\n \n+class SequenceBuilder;\n+class DictBuilder;\n+\n+Status Append(PyObject* context, PyObject* elem, SequenceBuilder* builder,\n+              int32_t recursion_depth, SerializedPyObject* blobs_out);\n+\n // A Sequence is a heterogeneous collections of elements. It can contain\n // scalar Python types, lists, tuples, dictionaries and tensors.\n class SequenceBuilder {\n  public:\n   explicit SequenceBuilder(MemoryPool* pool ARROW_MEMORY_POOL_DEFAULT)\n-      : pool_(pool),\n-        types_(::arrow::int8(), pool),\n-        offsets_(::arrow::int32(), pool),\n-        nones_(pool),\n-        bools_(::arrow::boolean(), pool),\n-        ints_(::arrow::int64(), pool),\n-        py2_ints_(::arrow::int64(), pool),\n-        bytes_(::arrow::binary(), pool),\n-        strings_(pool),\n-        half_floats_(::arrow::float16(), pool),\n-        floats_(::arrow::float32(), pool),\n-        doubles_(::arrow::float64(), pool),\n-        date64s_(::arrow::date64(), pool),\n-        tensor_indices_(::arrow::int32(), pool),\n-        ndarray_indices_(::arrow::int32(), pool),\n-        buffer_indices_(::arrow::int32(), pool),\n-        list_offsets_({0}),\n-        tuple_offsets_({0}),\n-        dict_offsets_({0}),\n-        set_offsets_({0}) {}\n+      : pool_(pool), types_(::arrow::int8(), pool), offsets_(::arrow::int32(), pool) {\n+    std::vector<std::shared_ptr<ArrayBuilder>> child_builders(kNumTags);\n+    builder_.reset(new UnionBuilder(pool, child_builders));\n+  }\n \n   // Appending a none to the sequence\n-  Status AppendNone() {\n-    RETURN_NOT_OK(offsets_.Append(0));\n-    RETURN_NOT_OK(types_.Append(0));\n-    return nones_.AppendNull();\n-  }\n+  Status AppendNone() { return builder_->AppendNull(); }\n \n-  Status Update(int64_t offset, int8_t* tag) {\n-    if (*tag == -1) {\n-      *tag = num_tags_++;\n-    }\n+  template <typename BuilderType>\n+  Status Update(std::shared_ptr<BuilderType>& child_builder, int8_t tag) {\n     int32_t offset32 = -1;\n-    RETURN_NOT_OK(internal::CastSize(offset, &offset32));\n+    RETURN_NOT_OK(internal::CastSize(child_builder->length(), &offset32));\n     DCHECK_GE(offset32, 0);\n-    RETURN_NOT_OK(offsets_.Append(offset32));\n-    RETURN_NOT_OK(types_.Append(*tag));\n-    return nones_.Append(true);\n+    return builder_->Append(tag, offset32);\n+  }\n+\n+  template <typename BuilderType>\n+  Status CreateAndUpdate(std::shared_ptr<BuilderType>& child_builder, int8_t tag) {\n+    if (!child_builder) {\n+      child_builder.reset(new BuilderType(pool_));\n+      builder_->SetChild(tag, child_builder);\n+    }\n+    return Update(child_builder, tag);\n   }\n \n   template <typename BuilderType, typename T>\n-  Status AppendPrimitive(const T val, int8_t* tag, BuilderType* out) {\n-    RETURN_NOT_OK(Update(out->length(), tag));\n-    return out->Append(val);\n+  Status AppendPrimitive(const T val, int8_t tag,\n+                         std::shared_ptr<BuilderType>& child_builder) {\n+    RETURN_NOT_OK(CreateAndUpdate(child_builder, tag));\n+    return child_builder->Append(val);\n   }\n \n   // Appending a boolean to the sequence\n-  Status AppendBool(const bool data) {\n-    return AppendPrimitive(data, &bool_tag_, &bools_);\n-  }\n+  Status AppendBool(const bool data) { return AppendPrimitive(data, kBoolTag, bools_); }\n \n   // Appending a python 2 int64_t to the sequence\n   Status AppendPy2Int64(const int64_t data) {\n-    return AppendPrimitive(data, &py2_int_tag_, &py2_ints_);\n+    return AppendPrimitive(data, kPy2IntTag, py2_ints_);\n   }\n \n   // Appending an int64_t to the sequence\n-  Status AppendInt64(const int64_t data) {\n-    return AppendPrimitive(data, &int_tag_, &ints_);\n-  }\n+  Status AppendInt64(const int64_t data) { return AppendPrimitive(data, kIntTag, ints_); }\n \n   // Append a list of bytes to the sequence\n   Status AppendBytes(const uint8_t* data, int32_t length) {\n-    RETURN_NOT_OK(Update(bytes_.length(), &bytes_tag_));\n-    return bytes_.Append(data, length);\n+    RETURN_NOT_OK(CreateAndUpdate(bytes_, kBytesTag));\n+    return bytes_->Append(data, length);\n   }\n \n   // Appending a string to the sequence\n   Status AppendString(const char* data, int32_t length) {\n-    RETURN_NOT_OK(Update(strings_.length(), &string_tag_));\n-    return strings_.Append(data, length);\n+    RETURN_NOT_OK(CreateAndUpdate(strings_, kStringTag));\n+    return strings_->Append(data, length);\n   }\n \n   // Appending a half_float to the sequence\n   Status AppendHalfFloat(const npy_half data) {\n-    return AppendPrimitive(data, &half_float_tag_, &half_floats_);\n+    return AppendPrimitive(data, kHalfFloatTag, half_floats_);\n   }\n \n   // Appending a float to the sequence\n   Status AppendFloat(const float data) {\n-    return AppendPrimitive(data, &float_tag_, &floats_);\n+    return AppendPrimitive(data, kFloatTag, floats_);\n   }\n \n   // Appending a double to the sequence\n   Status AppendDouble(const double data) {\n-    return AppendPrimitive(data, &double_tag_, &doubles_);\n+    return AppendPrimitive(data, kDoubleTag, doubles_);\n   }\n \n   // Appending a Date64 timestamp to the sequence\n   Status AppendDate64(const int64_t timestamp) {\n-    return AppendPrimitive(timestamp, &date64_tag_, &date64s_);\n+    return AppendPrimitive(timestamp, kDate64Tag, date64s_);\n   }\n \n   // Appending a tensor to the sequence\n   //\n   // \\param tensor_index Index of the tensor in the object.\n   Status AppendTensor(const int32_t tensor_index) {\n-    RETURN_NOT_OK(Update(tensor_indices_.length(), &tensor_tag_));\n-    return tensor_indices_.Append(tensor_index);\n+    RETURN_NOT_OK(CreateAndUpdate(tensor_indices_, kTensorTag));\n+    return tensor_indices_->Append(tensor_index);\n   }\n \n   // Appending a numpy ndarray to the sequence\n   //\n   // \\param tensor_index Index of the tensor in the object.\n   Status AppendNdarray(const int32_t ndarray_index) {\n-    RETURN_NOT_OK(Update(ndarray_indices_.length(), &ndarray_tag_));\n-    return ndarray_indices_.Append(ndarray_index);\n+    RETURN_NOT_OK(CreateAndUpdate(ndarray_indices_, kNdarrayTag));\n+    return ndarray_indices_->Append(ndarray_index);\n   }\n \n   // Appending a buffer to the sequence\n   //\n   // \\param buffer_index Indes of the buffer in the object.\n   Status AppendBuffer(const int32_t buffer_index) {\n-    RETURN_NOT_OK(Update(buffer_indices_.length(), &buffer_tag_));\n-    return buffer_indices_.Append(buffer_index);\n-  }\n-\n-  // Add a sublist to the sequence. The data contained in the sublist will be\n-  // specified in the \"Finish\" method.\n-  //\n-  // To construct l = [[11, 22], 33, [44, 55]] you would for example run\n-  // list = ListBuilder();\n-  // list.AppendList(2);\n-  // list.Append(33);\n-  // list.AppendList(2);\n-  // list.Finish([11, 22, 44, 55]);\n-  // list.Finish();\n-\n-  // \\param size\n-  // The size of the sublist\n-  Status AppendList(Py_ssize_t size) {\n-    int32_t offset;\n-    RETURN_NOT_OK(internal::CastSize(list_offsets_.back() + size, &offset));\n-    RETURN_NOT_OK(Update(list_offsets_.size() - 1, &list_tag_));\n-    list_offsets_.push_back(offset);\n+    RETURN_NOT_OK(CreateAndUpdate(buffer_indices_, kBufferTag));\n+    return buffer_indices_->Append(buffer_index);\n+  }\n+\n+  Status AppendSequence(PyObject* context, PyObject* sequence, int8_t tag,\n+                        std::shared_ptr<ListBuilder>& target_sequence,\n+                        std::unique_ptr<SequenceBuilder>& values, int32_t recursion_depth,\n+                        SerializedPyObject* blobs_out) {\n+    if (recursion_depth >= kMaxRecursionDepth) {\n+      return Status::NotImplemented(\n+          \"This object exceeds the maximum recursion depth. It may contain itself \"\n+          \"recursively.\");\n+    }\n+    if (!values) {\n+      values.reset(new SequenceBuilder(pool_));\n+      target_sequence.reset(new ListBuilder(pool_, values->builder()));\n+      builder_->SetChild(tag, target_sequence);\n+    }\n+    RETURN_NOT_OK(Update(target_sequence, tag));\n+    RETURN_NOT_OK(target_sequence->Append());\n+    PyObject* iter = PyObject_GetIter(sequence);\n+    RETURN_IF_PYERROR();\n+    while (true) {\n+      PyObject* item = PyIter_Next(iter);\n \n Review comment:\n   When is `item` decref'ed?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-22T18:25:35.357+0000",
                    "updated": "2019-01-22T18:25:35.357+0000",
                    "started": "2019-01-22T18:25:35.357+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188406",
                    "issueId": "13210311"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210311/worklog/188407",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3423: ARROW-4285: [Python] Use proper builder interface for serialization\nURL: https://github.com/apache/arrow/pull/3423#discussion_r249901802\n \n \n\n ##########\n File path: cpp/src/arrow/python/serialize.cc\n ##########\n @@ -55,305 +56,199 @@ using internal::checked_cast;\n \n namespace py {\n \n+class SequenceBuilder;\n+class DictBuilder;\n+\n+Status Append(PyObject* context, PyObject* elem, SequenceBuilder* builder,\n+              int32_t recursion_depth, SerializedPyObject* blobs_out);\n+\n // A Sequence is a heterogeneous collections of elements. It can contain\n // scalar Python types, lists, tuples, dictionaries and tensors.\n class SequenceBuilder {\n  public:\n   explicit SequenceBuilder(MemoryPool* pool ARROW_MEMORY_POOL_DEFAULT)\n-      : pool_(pool),\n-        types_(::arrow::int8(), pool),\n-        offsets_(::arrow::int32(), pool),\n-        nones_(pool),\n-        bools_(::arrow::boolean(), pool),\n-        ints_(::arrow::int64(), pool),\n-        py2_ints_(::arrow::int64(), pool),\n-        bytes_(::arrow::binary(), pool),\n-        strings_(pool),\n-        half_floats_(::arrow::float16(), pool),\n-        floats_(::arrow::float32(), pool),\n-        doubles_(::arrow::float64(), pool),\n-        date64s_(::arrow::date64(), pool),\n-        tensor_indices_(::arrow::int32(), pool),\n-        ndarray_indices_(::arrow::int32(), pool),\n-        buffer_indices_(::arrow::int32(), pool),\n-        list_offsets_({0}),\n-        tuple_offsets_({0}),\n-        dict_offsets_({0}),\n-        set_offsets_({0}) {}\n+      : pool_(pool), types_(::arrow::int8(), pool), offsets_(::arrow::int32(), pool) {\n+    std::vector<std::shared_ptr<ArrayBuilder>> child_builders(kNumTags);\n+    builder_.reset(new UnionBuilder(pool, child_builders));\n+  }\n \n   // Appending a none to the sequence\n-  Status AppendNone() {\n-    RETURN_NOT_OK(offsets_.Append(0));\n-    RETURN_NOT_OK(types_.Append(0));\n-    return nones_.AppendNull();\n-  }\n+  Status AppendNone() { return builder_->AppendNull(); }\n \n-  Status Update(int64_t offset, int8_t* tag) {\n-    if (*tag == -1) {\n-      *tag = num_tags_++;\n-    }\n+  template <typename BuilderType>\n+  Status Update(std::shared_ptr<BuilderType>& child_builder, int8_t tag) {\n     int32_t offset32 = -1;\n-    RETURN_NOT_OK(internal::CastSize(offset, &offset32));\n+    RETURN_NOT_OK(internal::CastSize(child_builder->length(), &offset32));\n     DCHECK_GE(offset32, 0);\n-    RETURN_NOT_OK(offsets_.Append(offset32));\n-    RETURN_NOT_OK(types_.Append(*tag));\n-    return nones_.Append(true);\n+    return builder_->Append(tag, offset32);\n+  }\n+\n+  template <typename BuilderType>\n+  Status CreateAndUpdate(std::shared_ptr<BuilderType>& child_builder, int8_t tag) {\n \n Review comment:\n   If `child_builder` is mutable, it should be a pointer: `std::shared_ptr<BuilderType>* child_builder`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-22T18:25:35.417+0000",
                    "updated": "2019-01-22T18:25:35.417+0000",
                    "started": "2019-01-22T18:25:35.417+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188407",
                    "issueId": "13210311"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210311/worklog/188408",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3423: ARROW-4285: [Python] Use proper builder interface for serialization\nURL: https://github.com/apache/arrow/pull/3423#discussion_r249904279\n \n \n\n ##########\n File path: cpp/src/arrow/python/serialize.cc\n ##########\n @@ -55,305 +56,199 @@ using internal::checked_cast;\n \n namespace py {\n \n+class SequenceBuilder;\n+class DictBuilder;\n+\n+Status Append(PyObject* context, PyObject* elem, SequenceBuilder* builder,\n+              int32_t recursion_depth, SerializedPyObject* blobs_out);\n+\n // A Sequence is a heterogeneous collections of elements. It can contain\n // scalar Python types, lists, tuples, dictionaries and tensors.\n class SequenceBuilder {\n  public:\n   explicit SequenceBuilder(MemoryPool* pool ARROW_MEMORY_POOL_DEFAULT)\n-      : pool_(pool),\n-        types_(::arrow::int8(), pool),\n-        offsets_(::arrow::int32(), pool),\n-        nones_(pool),\n-        bools_(::arrow::boolean(), pool),\n-        ints_(::arrow::int64(), pool),\n-        py2_ints_(::arrow::int64(), pool),\n-        bytes_(::arrow::binary(), pool),\n-        strings_(pool),\n-        half_floats_(::arrow::float16(), pool),\n-        floats_(::arrow::float32(), pool),\n-        doubles_(::arrow::float64(), pool),\n-        date64s_(::arrow::date64(), pool),\n-        tensor_indices_(::arrow::int32(), pool),\n-        ndarray_indices_(::arrow::int32(), pool),\n-        buffer_indices_(::arrow::int32(), pool),\n-        list_offsets_({0}),\n-        tuple_offsets_({0}),\n-        dict_offsets_({0}),\n-        set_offsets_({0}) {}\n+      : pool_(pool), types_(::arrow::int8(), pool), offsets_(::arrow::int32(), pool) {\n+    std::vector<std::shared_ptr<ArrayBuilder>> child_builders(kNumTags);\n+    builder_.reset(new UnionBuilder(pool, child_builders));\n+  }\n \n   // Appending a none to the sequence\n-  Status AppendNone() {\n-    RETURN_NOT_OK(offsets_.Append(0));\n-    RETURN_NOT_OK(types_.Append(0));\n-    return nones_.AppendNull();\n-  }\n+  Status AppendNone() { return builder_->AppendNull(); }\n \n-  Status Update(int64_t offset, int8_t* tag) {\n-    if (*tag == -1) {\n-      *tag = num_tags_++;\n-    }\n+  template <typename BuilderType>\n+  Status Update(std::shared_ptr<BuilderType>& child_builder, int8_t tag) {\n     int32_t offset32 = -1;\n-    RETURN_NOT_OK(internal::CastSize(offset, &offset32));\n+    RETURN_NOT_OK(internal::CastSize(child_builder->length(), &offset32));\n     DCHECK_GE(offset32, 0);\n-    RETURN_NOT_OK(offsets_.Append(offset32));\n-    RETURN_NOT_OK(types_.Append(*tag));\n-    return nones_.Append(true);\n+    return builder_->Append(tag, offset32);\n+  }\n+\n+  template <typename BuilderType>\n+  Status CreateAndUpdate(std::shared_ptr<BuilderType>& child_builder, int8_t tag) {\n+    if (!child_builder) {\n+      child_builder.reset(new BuilderType(pool_));\n+      builder_->SetChild(tag, child_builder);\n+    }\n+    return Update(child_builder, tag);\n   }\n \n   template <typename BuilderType, typename T>\n-  Status AppendPrimitive(const T val, int8_t* tag, BuilderType* out) {\n-    RETURN_NOT_OK(Update(out->length(), tag));\n-    return out->Append(val);\n+  Status AppendPrimitive(const T val, int8_t tag,\n+                         std::shared_ptr<BuilderType>& child_builder) {\n+    RETURN_NOT_OK(CreateAndUpdate(child_builder, tag));\n+    return child_builder->Append(val);\n   }\n \n   // Appending a boolean to the sequence\n-  Status AppendBool(const bool data) {\n-    return AppendPrimitive(data, &bool_tag_, &bools_);\n-  }\n+  Status AppendBool(const bool data) { return AppendPrimitive(data, kBoolTag, bools_); }\n \n   // Appending a python 2 int64_t to the sequence\n   Status AppendPy2Int64(const int64_t data) {\n-    return AppendPrimitive(data, &py2_int_tag_, &py2_ints_);\n+    return AppendPrimitive(data, kPy2IntTag, py2_ints_);\n   }\n \n   // Appending an int64_t to the sequence\n-  Status AppendInt64(const int64_t data) {\n-    return AppendPrimitive(data, &int_tag_, &ints_);\n-  }\n+  Status AppendInt64(const int64_t data) { return AppendPrimitive(data, kIntTag, ints_); }\n \n   // Append a list of bytes to the sequence\n   Status AppendBytes(const uint8_t* data, int32_t length) {\n-    RETURN_NOT_OK(Update(bytes_.length(), &bytes_tag_));\n-    return bytes_.Append(data, length);\n+    RETURN_NOT_OK(CreateAndUpdate(bytes_, kBytesTag));\n+    return bytes_->Append(data, length);\n   }\n \n   // Appending a string to the sequence\n   Status AppendString(const char* data, int32_t length) {\n-    RETURN_NOT_OK(Update(strings_.length(), &string_tag_));\n-    return strings_.Append(data, length);\n+    RETURN_NOT_OK(CreateAndUpdate(strings_, kStringTag));\n+    return strings_->Append(data, length);\n   }\n \n   // Appending a half_float to the sequence\n   Status AppendHalfFloat(const npy_half data) {\n-    return AppendPrimitive(data, &half_float_tag_, &half_floats_);\n+    return AppendPrimitive(data, kHalfFloatTag, half_floats_);\n   }\n \n   // Appending a float to the sequence\n   Status AppendFloat(const float data) {\n-    return AppendPrimitive(data, &float_tag_, &floats_);\n+    return AppendPrimitive(data, kFloatTag, floats_);\n   }\n \n   // Appending a double to the sequence\n   Status AppendDouble(const double data) {\n-    return AppendPrimitive(data, &double_tag_, &doubles_);\n+    return AppendPrimitive(data, kDoubleTag, doubles_);\n   }\n \n   // Appending a Date64 timestamp to the sequence\n   Status AppendDate64(const int64_t timestamp) {\n-    return AppendPrimitive(timestamp, &date64_tag_, &date64s_);\n+    return AppendPrimitive(timestamp, kDate64Tag, date64s_);\n   }\n \n   // Appending a tensor to the sequence\n   //\n   // \\param tensor_index Index of the tensor in the object.\n   Status AppendTensor(const int32_t tensor_index) {\n-    RETURN_NOT_OK(Update(tensor_indices_.length(), &tensor_tag_));\n-    return tensor_indices_.Append(tensor_index);\n+    RETURN_NOT_OK(CreateAndUpdate(tensor_indices_, kTensorTag));\n+    return tensor_indices_->Append(tensor_index);\n   }\n \n   // Appending a numpy ndarray to the sequence\n   //\n   // \\param tensor_index Index of the tensor in the object.\n   Status AppendNdarray(const int32_t ndarray_index) {\n-    RETURN_NOT_OK(Update(ndarray_indices_.length(), &ndarray_tag_));\n-    return ndarray_indices_.Append(ndarray_index);\n+    RETURN_NOT_OK(CreateAndUpdate(ndarray_indices_, kNdarrayTag));\n+    return ndarray_indices_->Append(ndarray_index);\n   }\n \n   // Appending a buffer to the sequence\n   //\n   // \\param buffer_index Indes of the buffer in the object.\n   Status AppendBuffer(const int32_t buffer_index) {\n-    RETURN_NOT_OK(Update(buffer_indices_.length(), &buffer_tag_));\n-    return buffer_indices_.Append(buffer_index);\n-  }\n-\n-  // Add a sublist to the sequence. The data contained in the sublist will be\n-  // specified in the \"Finish\" method.\n-  //\n-  // To construct l = [[11, 22], 33, [44, 55]] you would for example run\n-  // list = ListBuilder();\n-  // list.AppendList(2);\n-  // list.Append(33);\n-  // list.AppendList(2);\n-  // list.Finish([11, 22, 44, 55]);\n-  // list.Finish();\n-\n-  // \\param size\n-  // The size of the sublist\n-  Status AppendList(Py_ssize_t size) {\n-    int32_t offset;\n-    RETURN_NOT_OK(internal::CastSize(list_offsets_.back() + size, &offset));\n-    RETURN_NOT_OK(Update(list_offsets_.size() - 1, &list_tag_));\n-    list_offsets_.push_back(offset);\n+    RETURN_NOT_OK(CreateAndUpdate(buffer_indices_, kBufferTag));\n+    return buffer_indices_->Append(buffer_index);\n+  }\n+\n+  Status AppendSequence(PyObject* context, PyObject* sequence, int8_t tag,\n+                        std::shared_ptr<ListBuilder>& target_sequence,\n+                        std::unique_ptr<SequenceBuilder>& values, int32_t recursion_depth,\n+                        SerializedPyObject* blobs_out) {\n+    if (recursion_depth >= kMaxRecursionDepth) {\n+      return Status::NotImplemented(\n+          \"This object exceeds the maximum recursion depth. It may contain itself \"\n+          \"recursively.\");\n+    }\n+    if (!values) {\n+      values.reset(new SequenceBuilder(pool_));\n+      target_sequence.reset(new ListBuilder(pool_, values->builder()));\n+      builder_->SetChild(tag, target_sequence);\n+    }\n+    RETURN_NOT_OK(Update(target_sequence, tag));\n+    RETURN_NOT_OK(target_sequence->Append());\n+    PyObject* iter = PyObject_GetIter(sequence);\n \n Review comment:\n   Note, perhaps you could use `VisitIterable` here.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-22T18:25:35.438+0000",
                    "updated": "2019-01-22T18:25:35.438+0000",
                    "started": "2019-01-22T18:25:35.438+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188408",
                    "issueId": "13210311"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210311/worklog/188409",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3423: ARROW-4285: [Python] Use proper builder interface for serialization\nURL: https://github.com/apache/arrow/pull/3423#discussion_r249902809\n \n \n\n ##########\n File path: cpp/src/arrow/python/serialize.cc\n ##########\n @@ -55,305 +56,199 @@ using internal::checked_cast;\n \n namespace py {\n \n+class SequenceBuilder;\n+class DictBuilder;\n+\n+Status Append(PyObject* context, PyObject* elem, SequenceBuilder* builder,\n+              int32_t recursion_depth, SerializedPyObject* blobs_out);\n+\n // A Sequence is a heterogeneous collections of elements. It can contain\n // scalar Python types, lists, tuples, dictionaries and tensors.\n class SequenceBuilder {\n  public:\n   explicit SequenceBuilder(MemoryPool* pool ARROW_MEMORY_POOL_DEFAULT)\n-      : pool_(pool),\n-        types_(::arrow::int8(), pool),\n-        offsets_(::arrow::int32(), pool),\n-        nones_(pool),\n-        bools_(::arrow::boolean(), pool),\n-        ints_(::arrow::int64(), pool),\n-        py2_ints_(::arrow::int64(), pool),\n-        bytes_(::arrow::binary(), pool),\n-        strings_(pool),\n-        half_floats_(::arrow::float16(), pool),\n-        floats_(::arrow::float32(), pool),\n-        doubles_(::arrow::float64(), pool),\n-        date64s_(::arrow::date64(), pool),\n-        tensor_indices_(::arrow::int32(), pool),\n-        ndarray_indices_(::arrow::int32(), pool),\n-        buffer_indices_(::arrow::int32(), pool),\n-        list_offsets_({0}),\n-        tuple_offsets_({0}),\n-        dict_offsets_({0}),\n-        set_offsets_({0}) {}\n+      : pool_(pool), types_(::arrow::int8(), pool), offsets_(::arrow::int32(), pool) {\n+    std::vector<std::shared_ptr<ArrayBuilder>> child_builders(kNumTags);\n+    builder_.reset(new UnionBuilder(pool, child_builders));\n+  }\n \n   // Appending a none to the sequence\n-  Status AppendNone() {\n-    RETURN_NOT_OK(offsets_.Append(0));\n-    RETURN_NOT_OK(types_.Append(0));\n-    return nones_.AppendNull();\n-  }\n+  Status AppendNone() { return builder_->AppendNull(); }\n \n-  Status Update(int64_t offset, int8_t* tag) {\n-    if (*tag == -1) {\n-      *tag = num_tags_++;\n-    }\n+  template <typename BuilderType>\n+  Status Update(std::shared_ptr<BuilderType>& child_builder, int8_t tag) {\n     int32_t offset32 = -1;\n-    RETURN_NOT_OK(internal::CastSize(offset, &offset32));\n+    RETURN_NOT_OK(internal::CastSize(child_builder->length(), &offset32));\n     DCHECK_GE(offset32, 0);\n-    RETURN_NOT_OK(offsets_.Append(offset32));\n-    RETURN_NOT_OK(types_.Append(*tag));\n-    return nones_.Append(true);\n+    return builder_->Append(tag, offset32);\n+  }\n+\n+  template <typename BuilderType>\n+  Status CreateAndUpdate(std::shared_ptr<BuilderType>& child_builder, int8_t tag) {\n+    if (!child_builder) {\n+      child_builder.reset(new BuilderType(pool_));\n+      builder_->SetChild(tag, child_builder);\n+    }\n+    return Update(child_builder, tag);\n   }\n \n   template <typename BuilderType, typename T>\n-  Status AppendPrimitive(const T val, int8_t* tag, BuilderType* out) {\n-    RETURN_NOT_OK(Update(out->length(), tag));\n-    return out->Append(val);\n+  Status AppendPrimitive(const T val, int8_t tag,\n+                         std::shared_ptr<BuilderType>& child_builder) {\n+    RETURN_NOT_OK(CreateAndUpdate(child_builder, tag));\n+    return child_builder->Append(val);\n   }\n \n   // Appending a boolean to the sequence\n-  Status AppendBool(const bool data) {\n-    return AppendPrimitive(data, &bool_tag_, &bools_);\n-  }\n+  Status AppendBool(const bool data) { return AppendPrimitive(data, kBoolTag, bools_); }\n \n   // Appending a python 2 int64_t to the sequence\n   Status AppendPy2Int64(const int64_t data) {\n-    return AppendPrimitive(data, &py2_int_tag_, &py2_ints_);\n+    return AppendPrimitive(data, kPy2IntTag, py2_ints_);\n   }\n \n   // Appending an int64_t to the sequence\n-  Status AppendInt64(const int64_t data) {\n-    return AppendPrimitive(data, &int_tag_, &ints_);\n-  }\n+  Status AppendInt64(const int64_t data) { return AppendPrimitive(data, kIntTag, ints_); }\n \n   // Append a list of bytes to the sequence\n   Status AppendBytes(const uint8_t* data, int32_t length) {\n-    RETURN_NOT_OK(Update(bytes_.length(), &bytes_tag_));\n-    return bytes_.Append(data, length);\n+    RETURN_NOT_OK(CreateAndUpdate(bytes_, kBytesTag));\n+    return bytes_->Append(data, length);\n   }\n \n   // Appending a string to the sequence\n   Status AppendString(const char* data, int32_t length) {\n-    RETURN_NOT_OK(Update(strings_.length(), &string_tag_));\n-    return strings_.Append(data, length);\n+    RETURN_NOT_OK(CreateAndUpdate(strings_, kStringTag));\n+    return strings_->Append(data, length);\n   }\n \n   // Appending a half_float to the sequence\n   Status AppendHalfFloat(const npy_half data) {\n-    return AppendPrimitive(data, &half_float_tag_, &half_floats_);\n+    return AppendPrimitive(data, kHalfFloatTag, half_floats_);\n   }\n \n   // Appending a float to the sequence\n   Status AppendFloat(const float data) {\n-    return AppendPrimitive(data, &float_tag_, &floats_);\n+    return AppendPrimitive(data, kFloatTag, floats_);\n   }\n \n   // Appending a double to the sequence\n   Status AppendDouble(const double data) {\n-    return AppendPrimitive(data, &double_tag_, &doubles_);\n+    return AppendPrimitive(data, kDoubleTag, doubles_);\n   }\n \n   // Appending a Date64 timestamp to the sequence\n   Status AppendDate64(const int64_t timestamp) {\n-    return AppendPrimitive(timestamp, &date64_tag_, &date64s_);\n+    return AppendPrimitive(timestamp, kDate64Tag, date64s_);\n   }\n \n   // Appending a tensor to the sequence\n   //\n   // \\param tensor_index Index of the tensor in the object.\n   Status AppendTensor(const int32_t tensor_index) {\n-    RETURN_NOT_OK(Update(tensor_indices_.length(), &tensor_tag_));\n-    return tensor_indices_.Append(tensor_index);\n+    RETURN_NOT_OK(CreateAndUpdate(tensor_indices_, kTensorTag));\n+    return tensor_indices_->Append(tensor_index);\n   }\n \n   // Appending a numpy ndarray to the sequence\n   //\n   // \\param tensor_index Index of the tensor in the object.\n   Status AppendNdarray(const int32_t ndarray_index) {\n-    RETURN_NOT_OK(Update(ndarray_indices_.length(), &ndarray_tag_));\n-    return ndarray_indices_.Append(ndarray_index);\n+    RETURN_NOT_OK(CreateAndUpdate(ndarray_indices_, kNdarrayTag));\n+    return ndarray_indices_->Append(ndarray_index);\n   }\n \n   // Appending a buffer to the sequence\n   //\n   // \\param buffer_index Indes of the buffer in the object.\n   Status AppendBuffer(const int32_t buffer_index) {\n-    RETURN_NOT_OK(Update(buffer_indices_.length(), &buffer_tag_));\n-    return buffer_indices_.Append(buffer_index);\n-  }\n-\n-  // Add a sublist to the sequence. The data contained in the sublist will be\n-  // specified in the \"Finish\" method.\n-  //\n-  // To construct l = [[11, 22], 33, [44, 55]] you would for example run\n-  // list = ListBuilder();\n-  // list.AppendList(2);\n-  // list.Append(33);\n-  // list.AppendList(2);\n-  // list.Finish([11, 22, 44, 55]);\n-  // list.Finish();\n-\n-  // \\param size\n-  // The size of the sublist\n-  Status AppendList(Py_ssize_t size) {\n-    int32_t offset;\n-    RETURN_NOT_OK(internal::CastSize(list_offsets_.back() + size, &offset));\n-    RETURN_NOT_OK(Update(list_offsets_.size() - 1, &list_tag_));\n-    list_offsets_.push_back(offset);\n+    RETURN_NOT_OK(CreateAndUpdate(buffer_indices_, kBufferTag));\n+    return buffer_indices_->Append(buffer_index);\n+  }\n+\n+  Status AppendSequence(PyObject* context, PyObject* sequence, int8_t tag,\n+                        std::shared_ptr<ListBuilder>& target_sequence,\n+                        std::unique_ptr<SequenceBuilder>& values, int32_t recursion_depth,\n+                        SerializedPyObject* blobs_out) {\n+    if (recursion_depth >= kMaxRecursionDepth) {\n+      return Status::NotImplemented(\n+          \"This object exceeds the maximum recursion depth. It may contain itself \"\n+          \"recursively.\");\n+    }\n+    if (!values) {\n+      values.reset(new SequenceBuilder(pool_));\n+      target_sequence.reset(new ListBuilder(pool_, values->builder()));\n+      builder_->SetChild(tag, target_sequence);\n+    }\n+    RETURN_NOT_OK(Update(target_sequence, tag));\n+    RETURN_NOT_OK(target_sequence->Append());\n+    PyObject* iter = PyObject_GetIter(sequence);\n+    RETURN_IF_PYERROR();\n+    while (true) {\n+      PyObject* item = PyIter_Next(iter);\n+      if (!item) break;\n \n Review comment:\n   `PyIter_Next` may have raised an exception, you need to check for it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-22T18:25:35.443+0000",
                    "updated": "2019-01-22T18:25:35.443+0000",
                    "started": "2019-01-22T18:25:35.442+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188409",
                    "issueId": "13210311"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210311/worklog/188410",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3423: ARROW-4285: [Python] Use proper builder interface for serialization\nURL: https://github.com/apache/arrow/pull/3423#discussion_r249894677\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_nested.cc\n ##########\n @@ -135,17 +140,28 @@ void StructBuilder::Reset() {\n \n Status StructBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n   RETURN_NOT_OK(TrimBuffer(BitUtil::BytesForBits(length_), null_bitmap_.get()));\n-  *out = ArrayData::Make(type_, length_, {null_bitmap_}, null_count_);\n \n-  (*out)->child_data.resize(children_.size());\n+  std::vector<std::shared_ptr<ArrayData>> child_data(children_.size());\n   for (size_t i = 0; i < children_.size(); ++i) {\n     if (length_ == 0) {\n       // Try to make sure the child buffers are initialized\n       RETURN_NOT_OK(children_[i]->Resize(0));\n     }\n-    RETURN_NOT_OK(children_[i]->FinishInternal(&(*out)->child_data[i]));\n+    RETURN_NOT_OK(children_[i]->FinishInternal(&child_data[i]));\n   }\n \n+  // If the type has not been specified, infer it.\n \n Review comment:\n   This would preferably be done at constructor time, so that `builder->type()` returns something valid.\r\n   \r\n   Also, I think you should add a `StructBuilder` constructor without a type argument, to reflect the fact that the type is now optional.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-22T18:25:35.444+0000",
                    "updated": "2019-01-22T18:25:35.444+0000",
                    "started": "2019-01-22T18:25:35.444+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188410",
                    "issueId": "13210311"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210311/worklog/188411",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3423: ARROW-4285: [Python] Use proper builder interface for serialization\nURL: https://github.com/apache/arrow/pull/3423#discussion_r249900061\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_union.cc\n ##########\n @@ -0,0 +1,62 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/array/builder_union.h\"\n+\n+#include <utility>\n+\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+\n+UnionBuilder::UnionBuilder(MemoryPool* pool,\n+                           const std::vector<std::shared_ptr<ArrayBuilder>>& children)\n+    : ArrayBuilder(nullptr, pool), types_builder_(pool), offsets_builder_(pool) {\n+  children_ = children;\n+}\n+\n+Status UnionBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n+  std::shared_ptr<Buffer> types;\n+  RETURN_NOT_OK(types_builder_.Finish(&types));\n+  std::shared_ptr<Buffer> offsets;\n+  RETURN_NOT_OK(offsets_builder_.Finish(&offsets));\n+\n+  std::vector<std::shared_ptr<Field>> fields;\n+  std::vector<std::shared_ptr<ArrayData>> child_data(children_.size());\n+  std::vector<uint8_t> type_ids;\n+  for (size_t i = 0; i < children_.size(); ++i) {\n+    if (children_[i]) {\n+      std::shared_ptr<ArrayData> data;\n+      RETURN_NOT_OK(children_[i]->FinishInternal(&data));\n+      child_data[i] = data;\n+      fields.push_back(::arrow::field(\"\", children_[i]->type()));\n+      type_ids.push_back(static_cast<uint8_t>(i));\n+    } else {\n+      fields.push_back(::arrow::field(\"\", ::arrow::null()));\n \n Review comment:\n   I think this shows that the idea of having \"holes\" in the children types is ugly.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-22T18:25:35.509+0000",
                    "updated": "2019-01-22T18:25:35.509+0000",
                    "started": "2019-01-22T18:25:35.509+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188411",
                    "issueId": "13210311"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 40200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7969b428[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4ef3b619[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1fe6c6e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@526e4136[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@65414ed4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@42543638[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@30bbbf00[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@10fc2fd0[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7fa4f4f5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1ca2e8cf[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@710c07e4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7f24ba[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 40200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jan 31 12:12:17 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-01-31T12:12:17.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4285/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-01-18T06:37:38.000+0000",
        "updated": "2019-01-31T19:53:43.000+0000",
        "timeoriginalestimate": null,
        "description": "As a preparation for ARROW-3919, refactor the python serialization code such that the default builder interface is used. In the next step we can then plug in ChunkedBuilders to make sure that the generated arrays are properly chunked.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "11h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 40200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Use proper builder interface for serialization",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13210311/comment/16757175",
                    "id": "16757175",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 3423\n[https://github.com/apache/arrow/pull/3423]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-01-31T12:12:17.712+0000",
                    "updated": "2019-01-31T12:12:17.712+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|yi01zs:",
        "customfield_12314139": null
    }
}