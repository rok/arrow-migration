{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13474760",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474760",
    "key": "ARROW-17290",
    "fields": {
        "fixVersions": [],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/2",
            "id": "2",
            "description": "The problem described is an issue which will never be fixed.",
            "name": "Won't Fix"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
            "name": "rtpsw",
            "key": "JIRAUSER284707",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
            },
            "displayName": "Yaron Gvili",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
            "name": "rtpsw",
            "key": "JIRAUSER284707",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
            },
            "displayName": "Yaron Gvili",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
            "name": "rtpsw",
            "key": "JIRAUSER284707",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
            },
            "displayName": "Yaron Gvili",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17290/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 13,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474760/worklog/797394",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw opened a new pull request, #13784:\nURL: https://github.com/apache/arrow/pull/13784\n\n   See https://issues.apache.org/jira/browse/ARROW-17290\n\n\n",
                    "created": "2022-08-02T21:26:00.843+0000",
                    "updated": "2022-08-02T21:26:00.843+0000",
                    "started": "2022-08-02T21:26:00.843+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797394",
                    "issueId": "13474760"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474760/worklog/797395",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13784:\nURL: https://github.com/apache/arrow/pull/13784#issuecomment-1203230395\n\n   https://issues.apache.org/jira/browse/ARROW-17290\n\n\n",
                    "created": "2022-08-02T21:26:38.526+0000",
                    "updated": "2022-08-02T21:26:38.526+0000",
                    "started": "2022-08-02T21:26:38.526+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797395",
                    "issueId": "13474760"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474760/worklog/797396",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13784:\nURL: https://github.com/apache/arrow/pull/13784#issuecomment-1203230425\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-08-02T21:26:40.576+0000",
                    "updated": "2022-08-02T21:26:40.576+0000",
                    "started": "2022-08-02T21:26:40.576+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797396",
                    "issueId": "13474760"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474760/worklog/798740",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw commented on PR #13784:\nURL: https://github.com/apache/arrow/pull/13784#issuecomment-1207427998\n\n   @pitrou, could you review? \r\n   \r\n   cc @icexelloss \n\n\n",
                    "created": "2022-08-07T15:08:29.029+0000",
                    "updated": "2022-08-07T15:08:29.029+0000",
                    "started": "2022-08-07T15:08:29.029+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798740",
                    "issueId": "13474760"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474760/worklog/798936",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13784:\nURL: https://github.com/apache/arrow/pull/13784#discussion_r940204831\n\n\n##########\ncpp/src/arrow/compare.h:\n##########\n@@ -32,8 +36,14 @@ class DataType;\n class Tensor;\n class SparseTensor;\n struct Scalar;\n+template <typename>\n+struct NumericScalar;\n+template <typename>\n+class Result;\n\nReview Comment:\n   Actually, all these declarations (starting from `class Array`) should already be in `arrow/type_fwd.h` (thanks for including this!), so can be removed.\n\n\n\n##########\ncpp/src/arrow/compare.h:\n##########\n@@ -142,4 +152,208 @@ bool ARROW_EXPORT\n ScalarApproxEquals(const Scalar& left, const Scalar& right,\n                    const EqualOptions& options = EqualOptions::Defaults());\n \n+class OrderOptions {\n+ public:\n+  // Whether NaNs are considered least in order\n+  bool nans_least() const { return nans_least_; }\n\nReview Comment:\n   That's... weird. In which situation you need such a convention?\n\n\n\n##########\ncpp/src/arrow/scalar_test.cc:\n##########\n@@ -156,6 +157,90 @@ TYPED_TEST(TestNumericScalar, Basics) {\n   ASSERT_FALSE(two->ApproxEquals(ScalarType(3)));\n }\n \n+template <typename T>\n+void TestNumericScalarOrder(typename NumericScalar<T>::ValueType v1,\n+                            typename NumericScalar<T>::ValueType v2,\n+                            const OrderOptions& options, bool expectedLessThan,\n+                            bool expectedIsAtMost, bool expectedMoreThan,\n+                            bool expectedIsAtLeast) {\n+  NumericScalar<T> s1{v1}, s2{v2};\n+\n+#define ARROW_NUMERIC_ORDER_TEST(Op)                                                    \\\n+  ASSERT_EQ(expected##Op, Scalar##Op(s1, s2, options));                                 \\\n+  ASSERT_EQ(expected##Op, s1.Op(s2, options));                                          \\\n+  ASSERT_OK_AND_ASSIGN(auto actual##Op, Scalar##Op(static_cast<Scalar&>(s1),            \\\n+                                                   static_cast<Scalar&>(s2), options)); \\\n+  ASSERT_EQ(expected##Op, actual##Op);\n+\n+  ARROW_NUMERIC_ORDER_TEST(LessThan);\n+  ARROW_NUMERIC_ORDER_TEST(IsAtMost);\n+  ARROW_NUMERIC_ORDER_TEST(MoreThan);\n+  ARROW_NUMERIC_ORDER_TEST(IsAtLeast);\n+\n+#undef ARROW_NUMERIC_ORDER_TEST\n+}\n+\n+template <typename T>\n+void TestNumericScalarOrder(typename NumericScalar<T>::ValueType v1,\n+                            typename NumericScalar<T>::ValueType v2,\n+                            bool expectedLessThan, bool expectedIsAtMost,\n+                            bool expectedMoreThan, bool expectedIsAtLeast) {\n+  auto p1 = std::make_shared<NumericScalar<T>>(v1);\n+  auto p2 = std::make_shared<NumericScalar<T>>(v2);\n+  auto& s1 = *p1;\n+  auto& s2 = *p2;\n\nReview Comment:\n   ```suggestion\r\n     const auto& s1 = *p1;\r\n     const auto& s2 = *p2;\r\n   ```\n\n\n\n##########\ncpp/src/arrow/compare.h:\n##########\n@@ -142,4 +152,208 @@ bool ARROW_EXPORT\n ScalarApproxEquals(const Scalar& left, const Scalar& right,\n                    const EqualOptions& options = EqualOptions::Defaults());\n \n+class OrderOptions {\n+ public:\n+  // Whether NaNs are considered least in order\n+  bool nans_least() const { return nans_least_; }\n+\n+  OrderOptions nans_least(bool v) const {\n+    auto res = OrderOptions(*this);\n+    res.nans_least_ = v;\n+    return res;\n+  }\n+\n+  /// The absolute tolerance for approximate comparisons of floating-point values.\n+  double atolf() const { return atolf_; }\n+\n+  /// Return a new EqualOptions object with the \"atol\" property changed.\n+  OrderOptions atolf(double v) const {\n+    auto res = OrderOptions(*this);\n+    res.atolf_ = v;\n+    return res;\n+  }\n+\n+  /// The absolute tolerance for approximate comparisons of integer values.\n+  uint64_t atold() const { return atold_; }\n+\n+  /// Return a new EqualOptions object with the \"atol\" property changed.\n+  OrderOptions atold(double v) const {\n+    auto res = OrderOptions(*this);\n+    res.atold_ = v;\n+    return res;\n+  }\n+\n+  static OrderOptions Defaults() { return {}; }\n+\n+ protected:\n+  double atolf_ = kDefaultOrderFloatingPointAbsoluteTolerance;\n+  uint64_t atold_ = kDefaultOrderIntegerAbsoluteTolerance;\n+  bool nans_least_ = false;\n+};\n+\n+namespace internal {\n+\n+template <typename T>\n+T TypeAdjustedTolerance(double tolerance) {\n+  T max = std::numeric_limits<T>::max();\n+  return tolerance >= max ? max : static_cast<T>(tolerance);\n+}\n+\n+template <typename T>\n+T TypeAdjustedTolerance(uint64_t tolerance) {\n+  T max = std::numeric_limits<T>::max();\n+  return tolerance >= static_cast<uint64_t>(max) ? max : static_cast<T>(tolerance);\n+}\n+\n+template <typename T, template <typename> class Op,\n+          typename = std::enable_if<std::is_base_of<Scalar, T>::value>>\n+bool NumericScalarCompare(const T& left, const T& right, const OrderOptions& options) {\n\nReview Comment:\n   I'm not sure why we're exposing these publicly? Aren't the high-level variants taking a `const Scalar&` sufficient?\n\n\n\n##########\ncpp/src/arrow/scalar_test.cc:\n##########\n@@ -156,6 +157,90 @@ TYPED_TEST(TestNumericScalar, Basics) {\n   ASSERT_FALSE(two->ApproxEquals(ScalarType(3)));\n }\n \n+template <typename T>\n+void TestNumericScalarOrder(typename NumericScalar<T>::ValueType v1,\n+                            typename NumericScalar<T>::ValueType v2,\n+                            const OrderOptions& options, bool expectedLessThan,\n+                            bool expectedIsAtMost, bool expectedMoreThan,\n+                            bool expectedIsAtLeast) {\n+  NumericScalar<T> s1{v1}, s2{v2};\n+\n+#define ARROW_NUMERIC_ORDER_TEST(Op)                                                    \\\n+  ASSERT_EQ(expected##Op, Scalar##Op(s1, s2, options));                                 \\\n+  ASSERT_EQ(expected##Op, s1.Op(s2, options));                                          \\\n+  ASSERT_OK_AND_ASSIGN(auto actual##Op, Scalar##Op(static_cast<Scalar&>(s1),            \\\n+                                                   static_cast<Scalar&>(s2), options)); \\\n+  ASSERT_EQ(expected##Op, actual##Op);\n+\n+  ARROW_NUMERIC_ORDER_TEST(LessThan);\n+  ARROW_NUMERIC_ORDER_TEST(IsAtMost);\n+  ARROW_NUMERIC_ORDER_TEST(MoreThan);\n+  ARROW_NUMERIC_ORDER_TEST(IsAtLeast);\n+\n+#undef ARROW_NUMERIC_ORDER_TEST\n+}\n+\n+template <typename T>\n+void TestNumericScalarOrder(typename NumericScalar<T>::ValueType v1,\n+                            typename NumericScalar<T>::ValueType v2,\n+                            bool expectedLessThan, bool expectedIsAtMost,\n+                            bool expectedMoreThan, bool expectedIsAtLeast) {\n+  auto p1 = std::make_shared<NumericScalar<T>>(v1);\n+  auto p2 = std::make_shared<NumericScalar<T>>(v2);\n+  auto& s1 = *p1;\n+  auto& s2 = *p2;\n+  using Order = util::OrderComparable<NumericScalar<T>>;\n+  ASSERT_EQ(expectedLessThan, typename Order::PtrsLessThan()(p1, p2));\n+  ASSERT_EQ(expectedIsAtMost, typename Order::PtrsIsAtMost()(p1, p2));\n+  ASSERT_EQ(expectedMoreThan, typename Order::PtrsMoreThan()(p1, p2));\n+  ASSERT_EQ(expectedIsAtLeast, typename Order::PtrsIsAtLeast()(p1, p2));\n+  ASSERT_EQ(expectedLessThan, s1 < s2);\n+  ASSERT_EQ(expectedIsAtMost, s1 <= s2);\n+  ASSERT_EQ(expectedMoreThan, s1 > s2);\n+  ASSERT_EQ(expectedIsAtLeast, s1 >= s2);\n+  TestNumericScalarOrder<T>(v1, v2, OrderOptions::Defaults(), expectedLessThan,\n+                            expectedIsAtMost, expectedMoreThan, expectedIsAtLeast);\n+}\n+\n+#define TEST_FLOATING_POINT_SCALAR_ORDER(...)        \\\n+  {                                                  \\\n+    TestNumericScalarOrder<FloatType>(__VA_ARGS__);  \\\n\nReview Comment:\n   Hmm... I'm not sure `__VA_ARGS__` is supported on all compilers? \n\n\n\n##########\ncpp/src/arrow/compare.h:\n##########\n@@ -142,4 +152,208 @@ bool ARROW_EXPORT\n ScalarApproxEquals(const Scalar& left, const Scalar& right,\n                    const EqualOptions& options = EqualOptions::Defaults());\n \n+class OrderOptions {\n+ public:\n+  // Whether NaNs are considered least in order\n+  bool nans_least() const { return nans_least_; }\n+\n+  OrderOptions nans_least(bool v) const {\n+    auto res = OrderOptions(*this);\n+    res.nans_least_ = v;\n+    return res;\n+  }\n+\n+  /// The absolute tolerance for approximate comparisons of floating-point values.\n+  double atolf() const { return atolf_; }\n+\n+  /// Return a new EqualOptions object with the \"atol\" property changed.\n+  OrderOptions atolf(double v) const {\n+    auto res = OrderOptions(*this);\n+    res.atolf_ = v;\n+    return res;\n+  }\n+\n+  /// The absolute tolerance for approximate comparisons of integer values.\n\nReview Comment:\n   Why is it this useful?\n\n\n\n##########\ncpp/src/arrow/compare.h:\n##########\n@@ -142,4 +152,208 @@ bool ARROW_EXPORT\n ScalarApproxEquals(const Scalar& left, const Scalar& right,\n                    const EqualOptions& options = EqualOptions::Defaults());\n \n+class OrderOptions {\n+ public:\n+  // Whether NaNs are considered least in order\n+  bool nans_least() const { return nans_least_; }\n+\n+  OrderOptions nans_least(bool v) const {\n+    auto res = OrderOptions(*this);\n+    res.nans_least_ = v;\n+    return res;\n+  }\n+\n+  /// The absolute tolerance for approximate comparisons of floating-point values.\n+  double atolf() const { return atolf_; }\n+\n+  /// Return a new EqualOptions object with the \"atol\" property changed.\n+  OrderOptions atolf(double v) const {\n+    auto res = OrderOptions(*this);\n+    res.atolf_ = v;\n+    return res;\n+  }\n+\n+  /// The absolute tolerance for approximate comparisons of integer values.\n+  uint64_t atold() const { return atold_; }\n+\n+  /// Return a new EqualOptions object with the \"atol\" property changed.\n+  OrderOptions atold(double v) const {\n+    auto res = OrderOptions(*this);\n+    res.atold_ = v;\n+    return res;\n+  }\n+\n+  static OrderOptions Defaults() { return {}; }\n+\n+ protected:\n+  double atolf_ = kDefaultOrderFloatingPointAbsoluteTolerance;\n+  uint64_t atold_ = kDefaultOrderIntegerAbsoluteTolerance;\n+  bool nans_least_ = false;\n+};\n+\n+namespace internal {\n+\n+template <typename T>\n+T TypeAdjustedTolerance(double tolerance) {\n+  T max = std::numeric_limits<T>::max();\n+  return tolerance >= max ? max : static_cast<T>(tolerance);\n+}\n+\n+template <typename T>\n+T TypeAdjustedTolerance(uint64_t tolerance) {\n+  T max = std::numeric_limits<T>::max();\n+  return tolerance >= static_cast<uint64_t>(max) ? max : static_cast<T>(tolerance);\n+}\n+\n+template <typename T, template <typename> class Op,\n+          typename = std::enable_if<std::is_base_of<Scalar, T>::value>>\n+bool NumericScalarCompare(const T& left, const T& right, const OrderOptions& options) {\n+  if (left.type != right.type) {\n+    return false;  // arbitrary - unequal types are unordered\n+  }\n+  auto ty = left.type;\n+  bool fp_type = is_floating(left.type->id());\n+  bool left_nan = !left.is_valid || (fp_type && std::isnan(left.value));\n+  bool right_nan = !right.is_valid || (fp_type && std::isnan(right.value));\n+  using V = decltype(left.value);\n+  Op<V> cmp;\n+  if (left_nan) {\n+    if (right_nan) {\n+      return false;  // arbitrary - NaNs are unordered\n+    } else {\n+      return options.nans_least() ? cmp(true) : cmp(false);\n+    }\n+  } else {\n+    if (right_nan) {\n+      return options.nans_least() ? cmp(false) : cmp(true);\n+    } else {\n+      V tolerance = fp_type ? TypeAdjustedTolerance<V>(options.atolf())\n+                            : TypeAdjustedTolerance<V>(options.atold());\n+      return cmp(left.value, right.value, tolerance);\n+    }\n+  }\n+}\n+\n+template <typename T>\n+struct LessThanOp {\n+  bool operator()(T left, T right, T tolerance) {\n+    return (left < right) || (left - right < tolerance);\n+  }\n+  bool operator()(bool left_least) { return left_least; }\n+};\n+\n+template <typename T>\n+struct IsAtMostOp {\n+  bool operator()(T left, T right, T tolerance) {\n+    return (left <= right) || (left - right <= tolerance);\n+  }\n+  bool operator()(bool left_least) { return left_least; }\n+};\n+\n+template <typename T>\n+struct MoreThanOp {\n+  bool operator()(T left, T right, T tolerance) {\n+    return (left > right) || (right - left < tolerance);\n+  }\n+  bool operator()(bool left_least) { return !left_least; }\n+};\n+\n+template <typename T>\n+struct IsAtLeastOp {\n+  bool operator()(T left, T right, T tolerance) {\n+    return (left >= right) || (right - left <= tolerance);\n+  }\n+  bool operator()(bool left_least) { return !left_least; }\n+};\n+\n+}  // namespace internal\n+\n+/// Returns true if left numeric scalar is less than right numeric scalar\n+/// \\param[in] left a NumericScalar\n+/// \\param[in] right a NumericScalar\n+/// \\param[in] options comparison options\n+template <typename T>\n+bool ScalarLessThan(const NumericScalar<T>& left, const NumericScalar<T>& right,\n+                    const OrderOptions& options = OrderOptions::Defaults()) {\n+  return internal::NumericScalarCompare<NumericScalar<T>, internal::LessThanOp>(\n+      left, right, options);\n+}\n+\n+/// Returns true if left numeric scalar is at most right numeric scalar\n+/// \\param[in] left a NumericScalar\n+/// \\param[in] right a NumericScalar\n+/// \\param[in] options comparison options\n+template <typename T>\n+bool ScalarIsAtMost(const NumericScalar<T>& left, const NumericScalar<T>& right,\n\nReview Comment:\n   In my experience this is usually spelled \"LessEqual\" rather than \"IsAtMost\", is this convention widely used in some places?\r\n   \n\n\n\n##########\ncpp/src/arrow/compare.cc:\n##########\n@@ -1336,4 +1336,52 @@ bool TypeEquals(const DataType& left, const DataType& right, bool check_metadata\n   }\n }\n \n+#define ARROW_CMP_TYPE_CASE(id, T, Op)                           \\\n+  case Type::id:                                                 \\\n+    return internal::NumericScalarCompare<NumericScalar<T>, Op>( \\\n+        static_cast<const NumericScalar<T>&>(left),              \\\n+        static_cast<const NumericScalar<T>&>(right), options);\n+\n+#define ARROW_CMP_FUNCTION_BODY(Op)                                    \\\n+  if (left.type != right.type) {                                       \\\n+    return Status::Invalid(\"comparing unequal types is unsupported\");  \\\n\nReview Comment:\n   Should be `TypeError`.\n\n\n\n##########\ncpp/src/arrow/compare.h:\n##########\n@@ -142,4 +152,208 @@ bool ARROW_EXPORT\n ScalarApproxEquals(const Scalar& left, const Scalar& right,\n                    const EqualOptions& options = EqualOptions::Defaults());\n \n+class OrderOptions {\n+ public:\n+  // Whether NaNs are considered least in order\n+  bool nans_least() const { return nans_least_; }\n+\n+  OrderOptions nans_least(bool v) const {\n+    auto res = OrderOptions(*this);\n+    res.nans_least_ = v;\n+    return res;\n+  }\n+\n+  /// The absolute tolerance for approximate comparisons of floating-point values.\n+  double atolf() const { return atolf_; }\n+\n+  /// Return a new EqualOptions object with the \"atol\" property changed.\n+  OrderOptions atolf(double v) const {\n+    auto res = OrderOptions(*this);\n+    res.atolf_ = v;\n+    return res;\n+  }\n+\n+  /// The absolute tolerance for approximate comparisons of integer values.\n+  uint64_t atold() const { return atold_; }\n+\n+  /// Return a new EqualOptions object with the \"atol\" property changed.\n+  OrderOptions atold(double v) const {\n+    auto res = OrderOptions(*this);\n+    res.atold_ = v;\n+    return res;\n+  }\n+\n+  static OrderOptions Defaults() { return {}; }\n+\n+ protected:\n+  double atolf_ = kDefaultOrderFloatingPointAbsoluteTolerance;\n+  uint64_t atold_ = kDefaultOrderIntegerAbsoluteTolerance;\n+  bool nans_least_ = false;\n+};\n+\n+namespace internal {\n+\n+template <typename T>\n+T TypeAdjustedTolerance(double tolerance) {\n+  T max = std::numeric_limits<T>::max();\n+  return tolerance >= max ? max : static_cast<T>(tolerance);\n+}\n+\n+template <typename T>\n+T TypeAdjustedTolerance(uint64_t tolerance) {\n+  T max = std::numeric_limits<T>::max();\n+  return tolerance >= static_cast<uint64_t>(max) ? max : static_cast<T>(tolerance);\n+}\n+\n+template <typename T, template <typename> class Op,\n+          typename = std::enable_if<std::is_base_of<Scalar, T>::value>>\n+bool NumericScalarCompare(const T& left, const T& right, const OrderOptions& options) {\n+  if (left.type != right.type) {\n+    return false;  // arbitrary - unequal types are unordered\n+  }\n+  auto ty = left.type;\n+  bool fp_type = is_floating(left.type->id());\n+  bool left_nan = !left.is_valid || (fp_type && std::isnan(left.value));\n+  bool right_nan = !right.is_valid || (fp_type && std::isnan(right.value));\n+  using V = decltype(left.value);\n+  Op<V> cmp;\n+  if (left_nan) {\n+    if (right_nan) {\n+      return false;  // arbitrary - NaNs are unordered\n+    } else {\n+      return options.nans_least() ? cmp(true) : cmp(false);\n+    }\n+  } else {\n+    if (right_nan) {\n+      return options.nans_least() ? cmp(false) : cmp(true);\n+    } else {\n+      V tolerance = fp_type ? TypeAdjustedTolerance<V>(options.atolf())\n+                            : TypeAdjustedTolerance<V>(options.atold());\n+      return cmp(left.value, right.value, tolerance);\n+    }\n+  }\n+}\n+\n+template <typename T>\n+struct LessThanOp {\n+  bool operator()(T left, T right, T tolerance) {\n+    return (left < right) || (left - right < tolerance);\n+  }\n+  bool operator()(bool left_least) { return left_least; }\n+};\n+\n+template <typename T>\n+struct IsAtMostOp {\n+  bool operator()(T left, T right, T tolerance) {\n+    return (left <= right) || (left - right <= tolerance);\n+  }\n+  bool operator()(bool left_least) { return left_least; }\n+};\n+\n+template <typename T>\n+struct MoreThanOp {\n+  bool operator()(T left, T right, T tolerance) {\n+    return (left > right) || (right - left < tolerance);\n+  }\n+  bool operator()(bool left_least) { return !left_least; }\n+};\n+\n+template <typename T>\n+struct IsAtLeastOp {\n+  bool operator()(T left, T right, T tolerance) {\n+    return (left >= right) || (right - left <= tolerance);\n+  }\n+  bool operator()(bool left_least) { return !left_least; }\n+};\n+\n+}  // namespace internal\n+\n+/// Returns true if left numeric scalar is less than right numeric scalar\n+/// \\param[in] left a NumericScalar\n+/// \\param[in] right a NumericScalar\n+/// \\param[in] options comparison options\n+template <typename T>\n+bool ScalarLessThan(const NumericScalar<T>& left, const NumericScalar<T>& right,\n+                    const OrderOptions& options = OrderOptions::Defaults()) {\n+  return internal::NumericScalarCompare<NumericScalar<T>, internal::LessThanOp>(\n+      left, right, options);\n+}\n+\n+/// Returns true if left numeric scalar is at most right numeric scalar\n+/// \\param[in] left a NumericScalar\n+/// \\param[in] right a NumericScalar\n+/// \\param[in] options comparison options\n+template <typename T>\n+bool ScalarIsAtMost(const NumericScalar<T>& left, const NumericScalar<T>& right,\n+                    const OrderOptions& options = OrderOptions::Defaults()) {\n+  return internal::NumericScalarCompare<NumericScalar<T>, internal::IsAtMostOp>(\n+      left, right, options);\n+}\n+\n+/// Returns true if left numeric scalar is more than right numeric scalar\n+/// \\param[in] left a NumericScalar\n+/// \\param[in] right a NumericScalar\n+/// \\param[in] options comparison options\n+template <typename T>\n+bool ScalarMoreThan(const NumericScalar<T>& left, const NumericScalar<T>& right,\n+                    const OrderOptions& options = OrderOptions::Defaults()) {\n+  return internal::NumericScalarCompare<NumericScalar<T>, internal::MoreThanOp>(\n+      left, right, options);\n\nReview Comment:\n   Could perhaps save on code generation by avoiding a separate op for this:\r\n   ```suggestion\r\n     return internal::NumericScalarCompare<NumericScalar<T>, internal::LessEqualOp>(\r\n         right, left, options);\r\n   ```\n\n\n\n##########\ncpp/src/arrow/compare.h:\n##########\n@@ -142,4 +152,208 @@ bool ARROW_EXPORT\n ScalarApproxEquals(const Scalar& left, const Scalar& right,\n                    const EqualOptions& options = EqualOptions::Defaults());\n \n+class OrderOptions {\n+ public:\n+  // Whether NaNs are considered least in order\n+  bool nans_least() const { return nans_least_; }\n+\n+  OrderOptions nans_least(bool v) const {\n+    auto res = OrderOptions(*this);\n+    res.nans_least_ = v;\n+    return res;\n+  }\n+\n+  /// The absolute tolerance for approximate comparisons of floating-point values.\n+  double atolf() const { return atolf_; }\n+\n+  /// Return a new EqualOptions object with the \"atol\" property changed.\n+  OrderOptions atolf(double v) const {\n+    auto res = OrderOptions(*this);\n+    res.atolf_ = v;\n+    return res;\n+  }\n+\n+  /// The absolute tolerance for approximate comparisons of integer values.\n+  uint64_t atold() const { return atold_; }\n+\n+  /// Return a new EqualOptions object with the \"atol\" property changed.\n+  OrderOptions atold(double v) const {\n+    auto res = OrderOptions(*this);\n+    res.atold_ = v;\n+    return res;\n+  }\n+\n+  static OrderOptions Defaults() { return {}; }\n+\n+ protected:\n+  double atolf_ = kDefaultOrderFloatingPointAbsoluteTolerance;\n+  uint64_t atold_ = kDefaultOrderIntegerAbsoluteTolerance;\n+  bool nans_least_ = false;\n+};\n+\n+namespace internal {\n+\n+template <typename T>\n+T TypeAdjustedTolerance(double tolerance) {\n+  T max = std::numeric_limits<T>::max();\n+  return tolerance >= max ? max : static_cast<T>(tolerance);\n+}\n+\n+template <typename T>\n+T TypeAdjustedTolerance(uint64_t tolerance) {\n+  T max = std::numeric_limits<T>::max();\n+  return tolerance >= static_cast<uint64_t>(max) ? max : static_cast<T>(tolerance);\n+}\n+\n+template <typename T, template <typename> class Op,\n+          typename = std::enable_if<std::is_base_of<Scalar, T>::value>>\n+bool NumericScalarCompare(const T& left, const T& right, const OrderOptions& options) {\n+  if (left.type != right.type) {\n+    return false;  // arbitrary - unequal types are unordered\n+  }\n+  auto ty = left.type;\n+  bool fp_type = is_floating(left.type->id());\n+  bool left_nan = !left.is_valid || (fp_type && std::isnan(left.value));\n+  bool right_nan = !right.is_valid || (fp_type && std::isnan(right.value));\n+  using V = decltype(left.value);\n+  Op<V> cmp;\n+  if (left_nan) {\n+    if (right_nan) {\n+      return false;  // arbitrary - NaNs are unordered\n+    } else {\n+      return options.nans_least() ? cmp(true) : cmp(false);\n+    }\n+  } else {\n+    if (right_nan) {\n+      return options.nans_least() ? cmp(false) : cmp(true);\n+    } else {\n+      V tolerance = fp_type ? TypeAdjustedTolerance<V>(options.atolf())\n+                            : TypeAdjustedTolerance<V>(options.atold());\n+      return cmp(left.value, right.value, tolerance);\n+    }\n+  }\n+}\n+\n+template <typename T>\n+struct LessThanOp {\n+  bool operator()(T left, T right, T tolerance) {\n+    return (left < right) || (left - right < tolerance);\n+  }\n+  bool operator()(bool left_least) { return left_least; }\n+};\n+\n+template <typename T>\n+struct IsAtMostOp {\n+  bool operator()(T left, T right, T tolerance) {\n+    return (left <= right) || (left - right <= tolerance);\n+  }\n+  bool operator()(bool left_least) { return left_least; }\n+};\n+\n+template <typename T>\n+struct MoreThanOp {\n+  bool operator()(T left, T right, T tolerance) {\n+    return (left > right) || (right - left < tolerance);\n+  }\n+  bool operator()(bool left_least) { return !left_least; }\n+};\n+\n+template <typename T>\n+struct IsAtLeastOp {\n+  bool operator()(T left, T right, T tolerance) {\n+    return (left >= right) || (right - left <= tolerance);\n+  }\n+  bool operator()(bool left_least) { return !left_least; }\n+};\n+\n+}  // namespace internal\n+\n+/// Returns true if left numeric scalar is less than right numeric scalar\n+/// \\param[in] left a NumericScalar\n+/// \\param[in] right a NumericScalar\n+/// \\param[in] options comparison options\n+template <typename T>\n+bool ScalarLessThan(const NumericScalar<T>& left, const NumericScalar<T>& right,\n+                    const OrderOptions& options = OrderOptions::Defaults()) {\n+  return internal::NumericScalarCompare<NumericScalar<T>, internal::LessThanOp>(\n+      left, right, options);\n+}\n+\n+/// Returns true if left numeric scalar is at most right numeric scalar\n+/// \\param[in] left a NumericScalar\n+/// \\param[in] right a NumericScalar\n+/// \\param[in] options comparison options\n+template <typename T>\n+bool ScalarIsAtMost(const NumericScalar<T>& left, const NumericScalar<T>& right,\n+                    const OrderOptions& options = OrderOptions::Defaults()) {\n+  return internal::NumericScalarCompare<NumericScalar<T>, internal::IsAtMostOp>(\n+      left, right, options);\n+}\n+\n+/// Returns true if left numeric scalar is more than right numeric scalar\n+/// \\param[in] left a NumericScalar\n+/// \\param[in] right a NumericScalar\n+/// \\param[in] options comparison options\n+template <typename T>\n+bool ScalarMoreThan(const NumericScalar<T>& left, const NumericScalar<T>& right,\n\nReview Comment:\n   Similarly, I usually see this called \"Greater\" or \"GreaterThan\", not \"MoreThan\".\n\n\n\n##########\ncpp/src/arrow/compare.cc:\n##########\n@@ -1336,4 +1336,52 @@ bool TypeEquals(const DataType& left, const DataType& right, bool check_metadata\n   }\n }\n \n+#define ARROW_CMP_TYPE_CASE(id, T, Op)                           \\\n+  case Type::id:                                                 \\\n+    return internal::NumericScalarCompare<NumericScalar<T>, Op>( \\\n+        static_cast<const NumericScalar<T>&>(left),              \\\n+        static_cast<const NumericScalar<T>&>(right), options);\n+\n+#define ARROW_CMP_FUNCTION_BODY(Op)                                    \\\n+  if (left.type != right.type) {                                       \\\n+    return Status::Invalid(\"comparing unequal types is unsupported\");  \\\n+  }                                                                    \\\n+  switch (left.type->id()) {                                           \\\n+    ARROW_CMP_TYPE_CASE(INT8, Int8Type, Op)                            \\\n+    ARROW_CMP_TYPE_CASE(INT16, Int16Type, Op)                          \\\n+    ARROW_CMP_TYPE_CASE(INT32, Int32Type, Op)                          \\\n+    ARROW_CMP_TYPE_CASE(INT64, Int64Type, Op)                          \\\n+    ARROW_CMP_TYPE_CASE(UINT8, UInt8Type, Op)                          \\\n+    ARROW_CMP_TYPE_CASE(UINT16, UInt16Type, Op)                        \\\n+    ARROW_CMP_TYPE_CASE(UINT32, UInt32Type, Op)                        \\\n+    ARROW_CMP_TYPE_CASE(UINT64, UInt64Type, Op)                        \\\n+    ARROW_CMP_TYPE_CASE(FLOAT, FloatType, Op)                          \\\n+    ARROW_CMP_TYPE_CASE(DOUBLE, DoubleType, Op)                        \\\n+    default:                                                           \\\n+      return Status::Invalid(left.type, \" comparison is unsupported\"); \\\n\nReview Comment:\n   Should probably also be `TypeError`.\n\n\n\n##########\ncpp/src/arrow/compare.cc:\n##########\n@@ -1336,4 +1336,52 @@ bool TypeEquals(const DataType& left, const DataType& right, bool check_metadata\n   }\n }\n \n+#define ARROW_CMP_TYPE_CASE(id, T, Op)                           \\\n+  case Type::id:                                                 \\\n+    return internal::NumericScalarCompare<NumericScalar<T>, Op>( \\\n+        static_cast<const NumericScalar<T>&>(left),              \\\n+        static_cast<const NumericScalar<T>&>(right), options);\n\nReview Comment:\n   Should use `checked_cast` so that debug builds actually check the type downcast runtime (`checked_cast` is turned into `dynamic_cast` in debug mode and `static_cast` in release mode).\n\n\n\n",
                    "created": "2022-08-08T13:11:21.225+0000",
                    "updated": "2022-08-08T13:11:21.225+0000",
                    "started": "2022-08-08T13:11:21.224+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798936",
                    "issueId": "13474760"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474760/worklog/798937",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13784:\nURL: https://github.com/apache/arrow/pull/13784#issuecomment-1208111651\n\n   @bkietz Also curious about your opinion on this.\n\n\n",
                    "created": "2022-08-08T13:12:25.747+0000",
                    "updated": "2022-08-08T13:12:25.747+0000",
                    "started": "2022-08-08T13:12:25.746+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798937",
                    "issueId": "13474760"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474760/worklog/798956",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on PR #13784:\nURL: https://github.com/apache/arrow/pull/13784#issuecomment-1208167910\n\n   @rtpsw Do we need this for the AsOfJoin improvement?\n\n\n",
                    "created": "2022-08-08T13:59:01.082+0000",
                    "updated": "2022-08-08T13:59:01.082+0000",
                    "started": "2022-08-08T13:59:01.081+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798956",
                    "issueId": "13474760"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474760/worklog/799501",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw commented on PR #13784:\nURL: https://github.com/apache/arrow/pull/13784#issuecomment-1209861142\n\n   I developed this PR's code while experimenting with designs for AsOfJoin; however, the design I chose to proceed with does not need this PR's code. So, I'm fine if this doesn't go through. I just figured I'd share the code to see what people think. I noticed that Arrow does not implement ordering for numeric Scalar types, but I wasn't aware of the considerations that @bkietz describes - perhaps this means the corresponding Jira, and not just this PR, is being questioned. The bit twiddling idea for ordering floats crossed my mind, but I opted to start with something simpler.\r\n   \r\n   > If this is intended for use in AsofJoin then we should definitely not be using Scalars at all since extracting them from a join key column, boxing them in the type-erased Scalar, then unboxing them again to do type check and comparison would be wasteful compared to doing the comparisons in-place against elements of each column.\r\n   \r\n   I experimented with adding support for updating a Scalar in-place, which potentially could have avoided the above costs in my code, but ran into implementation problems (changes needed in too many places across Arrow) and decided to give up on it.\r\n   \r\n   > Tangent: I don't know how applicable this will be, but at least for testing purposes it might be handy to use something like [Rust's float_ord](https://docs.rs/float-ord/latest/float_ord/) to cast floating point numbers into something less subtle to sort. For example: https://gist.github.com/bkietz/8e2ef182883b886e532ffde8e537f7a3\r\n   \r\n   These resources are interesting - thanks for sharing! I also found http://stereopsis.com/radix.html (linked from https://docs.rs/crate/float-ord/latest) interesting.\n\n\n",
                    "created": "2022-08-09T20:41:24.350+0000",
                    "updated": "2022-08-09T20:41:24.350+0000",
                    "started": "2022-08-09T20:41:24.349+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "799501",
                    "issueId": "13474760"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474760/worklog/799502",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw commented on code in PR #13784:\nURL: https://github.com/apache/arrow/pull/13784#discussion_r941784539\n\n\n##########\ncpp/src/arrow/scalar_test.cc:\n##########\n@@ -156,6 +157,90 @@ TYPED_TEST(TestNumericScalar, Basics) {\n   ASSERT_FALSE(two->ApproxEquals(ScalarType(3)));\n }\n \n+template <typename T>\n+void TestNumericScalarOrder(typename NumericScalar<T>::ValueType v1,\n+                            typename NumericScalar<T>::ValueType v2,\n+                            const OrderOptions& options, bool expectedLessThan,\n+                            bool expectedIsAtMost, bool expectedMoreThan,\n+                            bool expectedIsAtLeast) {\n+  NumericScalar<T> s1{v1}, s2{v2};\n+\n+#define ARROW_NUMERIC_ORDER_TEST(Op)                                                    \\\n+  ASSERT_EQ(expected##Op, Scalar##Op(s1, s2, options));                                 \\\n+  ASSERT_EQ(expected##Op, s1.Op(s2, options));                                          \\\n+  ASSERT_OK_AND_ASSIGN(auto actual##Op, Scalar##Op(static_cast<Scalar&>(s1),            \\\n+                                                   static_cast<Scalar&>(s2), options)); \\\n+  ASSERT_EQ(expected##Op, actual##Op);\n+\n+  ARROW_NUMERIC_ORDER_TEST(LessThan);\n+  ARROW_NUMERIC_ORDER_TEST(IsAtMost);\n+  ARROW_NUMERIC_ORDER_TEST(MoreThan);\n+  ARROW_NUMERIC_ORDER_TEST(IsAtLeast);\n+\n+#undef ARROW_NUMERIC_ORDER_TEST\n+}\n+\n+template <typename T>\n+void TestNumericScalarOrder(typename NumericScalar<T>::ValueType v1,\n+                            typename NumericScalar<T>::ValueType v2,\n+                            bool expectedLessThan, bool expectedIsAtMost,\n+                            bool expectedMoreThan, bool expectedIsAtLeast) {\n+  auto p1 = std::make_shared<NumericScalar<T>>(v1);\n+  auto p2 = std::make_shared<NumericScalar<T>>(v2);\n+  auto& s1 = *p1;\n+  auto& s2 = *p2;\n+  using Order = util::OrderComparable<NumericScalar<T>>;\n+  ASSERT_EQ(expectedLessThan, typename Order::PtrsLessThan()(p1, p2));\n+  ASSERT_EQ(expectedIsAtMost, typename Order::PtrsIsAtMost()(p1, p2));\n+  ASSERT_EQ(expectedMoreThan, typename Order::PtrsMoreThan()(p1, p2));\n+  ASSERT_EQ(expectedIsAtLeast, typename Order::PtrsIsAtLeast()(p1, p2));\n+  ASSERT_EQ(expectedLessThan, s1 < s2);\n+  ASSERT_EQ(expectedIsAtMost, s1 <= s2);\n+  ASSERT_EQ(expectedMoreThan, s1 > s2);\n+  ASSERT_EQ(expectedIsAtLeast, s1 >= s2);\n+  TestNumericScalarOrder<T>(v1, v2, OrderOptions::Defaults(), expectedLessThan,\n+                            expectedIsAtMost, expectedMoreThan, expectedIsAtLeast);\n+}\n+\n+#define TEST_FLOATING_POINT_SCALAR_ORDER(...)        \\\n+  {                                                  \\\n+    TestNumericScalarOrder<FloatType>(__VA_ARGS__);  \\\n\nReview Comment:\n   AFAICS, both [GCC](https://gcc.gnu.org/onlinedocs/cpp/Variadic-Macros.html) and [MSVC](https://docs.microsoft.com/en-us/cpp/preprocessor/variadic-macros?view=msvc-170) documentation say it is part of the C standard,\n\n\n\n",
                    "created": "2022-08-09T20:42:41.574+0000",
                    "updated": "2022-08-09T20:42:41.574+0000",
                    "started": "2022-08-09T20:42:41.573+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "799502",
                    "issueId": "13474760"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474760/worklog/799503",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw commented on PR #13784:\nURL: https://github.com/apache/arrow/pull/13784#issuecomment-1209864680\n\n   > @rtpsw Do we need this for the AsOfJoin improvement?\r\n   \r\n   No.\n\n\n",
                    "created": "2022-08-09T20:42:58.791+0000",
                    "updated": "2022-08-09T20:42:58.791+0000",
                    "started": "2022-08-09T20:42:58.790+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "799503",
                    "issueId": "13474760"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474760/worklog/799504",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw commented on PR #13784:\nURL: https://github.com/apache/arrow/pull/13784#issuecomment-1209869639\n\n   Just to clarify, I'm holding on looking into specific comments on this PR until and if we decide to move forward with it.\n\n\n",
                    "created": "2022-08-09T20:45:11.428+0000",
                    "updated": "2022-08-09T20:45:11.428+0000",
                    "started": "2022-08-09T20:45:11.428+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "799504",
                    "issueId": "13474760"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474760/worklog/799789",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on PR #13784:\nURL: https://github.com/apache/arrow/pull/13784#issuecomment-1211041269\n\n   If we don't currently or in the near future require support for comparison of `Scalar`s in the way this PR provides, then I'd say we should close this PR and mark the JIRA wontfix.\n\n\n",
                    "created": "2022-08-10T17:40:39.142+0000",
                    "updated": "2022-08-10T17:40:39.142+0000",
                    "started": "2022-08-10T17:40:39.141+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "799789",
                    "issueId": "13474760"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474760/worklog/800679",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw closed pull request #13784: ARROW-17290: [C++] Add order-comparisons for numeric scalars\nURL: https://github.com/apache/arrow/pull/13784\n\n\n",
                    "created": "2022-08-15T18:11:23.013+0000",
                    "updated": "2022-08-15T18:11:23.013+0000",
                    "started": "2022-08-15T18:11:23.013+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800679",
                    "issueId": "13474760"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3f46c79a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1e3b9198[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@50222de8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@12d7c125[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d70613b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2e28d669[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f24e329[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4356c901[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d5101e9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@552203b4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1dd78f92[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@683c53e8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7800,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Aug 27 14:41:56 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": [
            "C++"
        ],
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-08-15T18:12:47.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17290/watchers",
            "watchCount": 2,
            "isWatching": true
        },
        "created": "2022-08-02T20:11:07.000+0000",
        "updated": "2022-08-27T14:41:56.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently, only equal-comparison of scalars are supported, by `EqualComparable`. This issue will add order-comparisons, such as less-than, to numeric scalars.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add order-comparisons for numeric scalars",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474760/comment/17576709",
                    "id": "17576709",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "I'm curious, what is the use case?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-08-08T10:56:45.599+0000",
                    "updated": "2022-08-08T10:56:45.599+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474760/comment/17577629",
                    "id": "17577629",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "{quote}I'm curious, what is the use case?\r\n{quote}\r\nSee [this post|https://github.com/apache/arrow/pull/13784#issuecomment-1209861142].",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-08-09T21:15:49.003+0000",
                    "updated": "2022-08-09T21:16:38.631+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474760/comment/17579841",
                    "id": "17579841",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "See [this post|https://github.com/apache/arrow/pull/13784#issuecomment-1211041269] for rationale.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-08-15T18:12:47.938+0000",
                    "updated": "2022-08-15T18:12:47.938+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474760/comment/17585945",
                    "id": "17585945",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "body": "Transitioning issue from Resolved to Closed to based on resolution field value.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "created": "2022-08-27T14:41:56.950+0000",
                    "updated": "2022-08-27T14:41:56.950+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z17ens:",
        "customfield_12314139": null
    }
}