{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13320308",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320308",
    "key": "ARROW-9605",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=frank.du",
            "name": "frank.du",
            "key": "frank.du",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Frank Du",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=frank.du",
            "name": "frank.du",
            "key": "frank.du",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Frank Du",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=frank.du",
            "name": "frank.du",
            "key": "frank.du",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Frank Du",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9605/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 28,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320308/worklog/464908",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind opened a new pull request #7871:\nURL: https://github.com/apache/arrow/pull/7871\n\n\n   1. Use BitBlockCounter to speedup the performance for typical 0.01% null-able data.\r\n   2. Enable AVX compiler auto vectorize version for no-nulls on int types. Float/Double use fmin/fmax to handle NaN which can't be vectorize by compiler.\r\n   3. Also add test case to cover different null probability.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-31T07:12:09.097+0000",
                    "updated": "2020-07-31T07:12:09.097+0000",
                    "started": "2020-07-31T07:12:09.096+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "464908",
                    "issueId": "13320308"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320308/worklog/464912",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7871:\nURL: https://github.com/apache/arrow/pull/7871#issuecomment-666974009\n\n\n   https://issues.apache.org/jira/browse/ARROW-9605\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-31T07:19:43.447+0000",
                    "updated": "2020-07-31T07:19:43.447+0000",
                    "started": "2020-07-31T07:19:43.447+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "464912",
                    "issueId": "13320308"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320308/worklog/464917",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on pull request #7871:\nURL: https://github.com/apache/arrow/pull/7871#issuecomment-666978438\n\n\n   I can trigger a benchmark action once https://github.com/apache/arrow/pull/7870 get merged.\r\n   \r\n   Below is the BM data for int types on my setup:\r\n   ```\r\n   Before:\r\n   MinMaxKernelInt8/1048576/10000          847 us          845 us          828 bytes_per_second=1.15586G/s null_percent=0.01 size=1048.58k\r\n   MinMaxKernelInt8/1048576/0             43.9 us         43.8 us        15738 bytes_per_second=22.294G/s null_percent=0 size=1048.58k\r\n   MinMaxKernelInt16/1048576/10000         429 us          428 us         1637 bytes_per_second=2.28348G/s null_percent=0.01 size=1048.58k\r\n   MinMaxKernelInt16/1048576/0            42.4 us         42.4 us        15878 bytes_per_second=23.0572G/s null_percent=0 size=1048.58k\r\n   MinMaxKernelInt32/1048576/10000         295 us          294 us         2383 bytes_per_second=3.31751G/s null_percent=0.01 size=1048.58k\r\n   MinMaxKernelInt32/1048576/0            42.1 us         42.0 us        16620 bytes_per_second=23.2245G/s null_percent=0 size=1048.58k\r\n   MinMaxKernelInt64/1048576/10000         112 us          112 us         6309 bytes_per_second=8.70966G/s null_percent=0.01 size=1048.58k\r\n   MinMaxKernelInt64/1048576/0            82.2 us         82.1 us         8537 bytes_per_second=11.8992G/s null_percent=0 size=1048.58k\r\n   \r\n   After(AVX2):\r\n   MinMaxKernelInt8/1048576/10000         92.9 us         92.6 us         7568 bytes_per_second=10.5421G/s null_percent=0.01 size=1048.58k\r\n   MinMaxKernelInt8/1048576/0             31.3 us         31.2 us        21832 bytes_per_second=31.2619G/s null_percent=0 size=1048.58k\r\n   MinMaxKernelInt16/1048576/10000        60.7 us         60.5 us        11501 bytes_per_second=16.1388G/s null_percent=0.01 size=1048.58k\r\n   MinMaxKernelInt16/1048576/0            31.5 us         31.4 us        22316 bytes_per_second=31.1085G/s null_percent=0 size=1048.58k\r\n   MinMaxKernelInt32/1048576/10000        51.0 us         50.9 us        13841 bytes_per_second=19.1853G/s null_percent=0.01 size=1048.58k\r\n   MinMaxKernelInt32/1048576/0            31.8 us         31.7 us        22111 bytes_per_second=30.8189G/s null_percent=0 size=1048.58k\r\n   MinMaxKernelInt64/1048576/10000        61.1 us         61.0 us        11610 bytes_per_second=16.016G/s null_percent=0.01 size=1048.58k\r\n   MinMaxKernelInt64/1048576/0            54.2 us         54.1 us        12935 bytes_per_second=18.0651G/s null_percent=0 size=1048.58k\r\n   \r\n   AVX512:\r\n   MinMaxKernelInt32/1048576/10000       40.9 us         40.8 us        17151 bytes_per_second=23.9207G/s null_percent=0.01 size=1048.58k\r\n   MinMaxKernelInt32/1048576/0           25.6 us         25.6 us        26669 bytes_per_second=38.2196G/s null_percent=0 size=1048.58k\r\n   MinMaxKernelInt64/1048576/10000       34.5 us         34.4 us        20137 bytes_per_second=28.396G/s null_percent=0.01 size=1048.58k\r\n   MinMaxKernelInt64/1048576/0           23.7 us         23.7 us        25949 bytes_per_second=41.2537G/s null_percent=0 size=1048.58k\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-31T07:29:48.357+0000",
                    "updated": "2020-07-31T07:29:48.357+0000",
                    "started": "2020-07-31T07:29:48.357+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "464917",
                    "issueId": "13320308"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320308/worklog/466655",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on pull request #7871:\nURL: https://github.com/apache/arrow/pull/7871#issuecomment-669047527\n\n\n   Need a rebase after https://github.com/apache/arrow/pull/7903\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-05T08:05:55.998+0000",
                    "updated": "2020-08-05T08:05:55.998+0000",
                    "started": "2020-08-05T08:05:55.997+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "466655",
                    "issueId": "13320308"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320308/worklog/468358",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind removed a comment on pull request #7871:\nURL: https://github.com/apache/arrow/pull/7871#issuecomment-669047527\n\n\n   Need a rebase after https://github.com/apache/arrow/pull/7903\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-10T00:54:15.515+0000",
                    "updated": "2020-08-10T00:54:15.515+0000",
                    "started": "2020-08-10T00:54:15.514+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "468358",
                    "issueId": "13320308"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320308/worklog/469559",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on pull request #7871:\nURL: https://github.com/apache/arrow/pull/7871#issuecomment-672689445\n\n\n   Ping. @wesm @pitrou \r\n   \r\n   Could you help to review this? Similar approach to sum kernel, use compiler to vectorise the NoNulls part, use BitBlockCounter on the 0.01% data. https://github.com/apache/arrow/pull/7870 add the benchmark item for MinMax kernel.\r\n   \r\n   Thanks. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-12T07:32:26.378+0000",
                    "updated": "2020-08-12T07:32:26.378+0000",
                    "started": "2020-08-12T07:32:26.378+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "469559",
                    "issueId": "13320308"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320308/worklog/470031",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on pull request #7871:\nURL: https://github.com/apache/arrow/pull/7871#issuecomment-673185847\n\n\n   @ursabot\u00a0benchmark --suite-filter=arrow-compute-aggregate-benchmark --benchmark_filter=\"MinMax\"\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-13T00:58:26.369+0000",
                    "updated": "2020-08-13T00:58:26.369+0000",
                    "started": "2020-08-13T00:58:26.369+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "470031",
                    "issueId": "13320308"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320308/worklog/470032",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #7871:\nURL: https://github.com/apache/arrow/pull/7871#issuecomment-673185853\n\n\n   ```\n   no such option: --benchmark_filter\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-13T00:58:29.341+0000",
                    "updated": "2020-08-13T00:58:29.341+0000",
                    "started": "2020-08-13T00:58:29.341+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "470032",
                    "issueId": "13320308"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320308/worklog/470034",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on pull request #7871:\nURL: https://github.com/apache/arrow/pull/7871#issuecomment-673186171\n\n\n   @ursabot benchmark --suite-filter=arrow-compute-aggregate-benchmark --benchmark-filter=MinMax\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-13T00:59:45.317+0000",
                    "updated": "2020-08-13T00:59:45.317+0000",
                    "started": "2020-08-13T00:59:45.317+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "470034",
                    "issueId": "13320308"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320308/worklog/470036",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind removed a comment on pull request #7871:\nURL: https://github.com/apache/arrow/pull/7871#issuecomment-673185847\n\n\n   @ursabot\u00a0benchmark --suite-filter=arrow-compute-aggregate-benchmark --benchmark_filter=\"MinMax\"\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-13T01:00:00.637+0000",
                    "updated": "2020-08-13T01:00:00.637+0000",
                    "started": "2020-08-13T01:00:00.637+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "470036",
                    "issueId": "13320308"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320308/worklog/470044",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on pull request #7871:\nURL: https://github.com/apache/arrow/pull/7871#issuecomment-673192812\n\n\n   > @ursabot benchmark --suite-filter=arrow-compute-aggregate-benchmark --benchmark-filter=MinMax\r\n   \r\n   Below is the results for null_percent 0.01% and 0% on https://ci.ursalabs.org/#/builders/73/builds/101\r\n   ```\r\n                              benchmark         baseline         contender  change %                                           counters\r\n   3     MinMaxKernelInt8/1048576/10000  812.254 MiB/sec     7.952 GiB/sec   902.442  {'run_name': 'MinMaxKernelInt8/1048576/10000',...\r\n   31   MinMaxKernelInt16/1048576/10000    1.583 GiB/sec    12.895 GiB/sec   714.512  {'run_name': 'MinMaxKernelInt16/1048576/10000'...\r\n   16   MinMaxKernelInt32/1048576/10000    3.152 GiB/sec    16.605 GiB/sec   426.876  {'run_name': 'MinMaxKernelInt32/1048576/10000'...\r\n   2        MinMaxKernelInt64/1048576/0    5.289 GiB/sec    11.092 GiB/sec   109.708  {'run_name': 'MinMaxKernelInt64/1048576/0', 'r...\r\n   14   MinMaxKernelInt64/1048576/10000    6.222 GiB/sec    10.055 GiB/sec    61.610  {'run_name': 'MinMaxKernelInt64/1048576/10000'...\r\n   1        MinMaxKernelInt32/1048576/0   18.103 GiB/sec    26.301 GiB/sec    45.282  {'run_name': 'MinMaxKernelInt32/1048576/0', 'r...\r\n   15       MinMaxKernelInt16/1048576/0   18.086 GiB/sec    26.274 GiB/sec    45.269  {'run_name': 'MinMaxKernelInt16/1048576/0', 'r...\r\n   7         MinMaxKernelInt8/1048576/0   18.112 GiB/sec    26.210 GiB/sec    44.708  {'run_name': 'MinMaxKernelInt8/1048576/0', 'ru...\r\n   26  MinMaxKernelDouble/1048576/10000    1.063 GiB/sec     1.315 GiB/sec    23.759  {'run_name': 'MinMaxKernelDouble/1048576/10000...\r\n   23   MinMaxKernelFloat/1048576/10000  551.756 MiB/sec   674.455 MiB/sec    22.238  {'run_name': 'MinMaxKernelFloat/1048576/10000'...\r\n   0       MinMaxKernelDouble/1048576/0    1.205 GiB/sec     1.332 GiB/sec    10.600  {'run_name': 'MinMaxKernelDouble/1048576/0', '...\r\n   12       MinMaxKernelFloat/1048576/0  621.824 MiB/sec   607.146 MiB/sec    -2.361  {'run_name': 'MinMaxKernelFloat/1048576/0', 'r...\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-13T01:23:07.451+0000",
                    "updated": "2020-08-13T01:23:07.451+0000",
                    "started": "2020-08-13T01:23:07.451+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "470044",
                    "issueId": "13320308"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320308/worklog/474266",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #7871:\nURL: https://github.com/apache/arrow/pull/7871#issuecomment-679993093\n\n\n   @jianxind Sorry for the delay. Could you please rebase this PR? It looks like there are some conflicts now.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-25T12:26:03.193+0000",
                    "updated": "2020-08-25T12:26:03.193+0000",
                    "started": "2020-08-25T12:26:03.192+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474266",
                    "issueId": "13320308"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320308/worklog/474600",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on pull request #7871:\nURL: https://github.com/apache/arrow/pull/7871#issuecomment-680420724\n\n\n   > @jianxind Sorry for the delay. Could you please rebase this PR? It looks like there are some conflicts now.\r\n   \r\n   No problem at all. Rebased now. Thanks.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-26T02:21:51.266+0000",
                    "updated": "2020-08-26T02:21:51.266+0000",
                    "started": "2020-08-26T02:21:51.266+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474600",
                    "issueId": "13320308"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320308/worklog/474880",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7871:\nURL: https://github.com/apache/arrow/pull/7871#discussion_r477425988\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -594,6 +594,113 @@ TYPED_TEST(TestFloatingMinMaxKernel, DefaultOptions) {\n   AssertDatumsEqual(explicit_defaults, no_options_provided);\n }\n \n+template <typename ArrowType>\n+using MinMaxResult = std::pair<typename ArrowType::c_type, typename ArrowType::c_type>;\n+\n+template <typename ArrowType>\n+static enable_if_integer<ArrowType, MinMaxResult<ArrowType>> NaiveMinMax(\n+    const Array& array) {\n+  using T = typename ArrowType::c_type;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  const auto& array_numeric = reinterpret_cast<const ArrayType&>(array);\n+  const auto values = array_numeric.raw_values();\n+\n+  if (array.length() <= array.null_count()) {  // All null values\n+    return {static_cast<T>(0), static_cast<T>(0)};\n+  }\n+\n+  T min = std::numeric_limits<T>::max();\n+  T max = std::numeric_limits<T>::min();\n+  if (array.null_count() != 0) {  // Some values are null\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        min = std::min(min, values[i]);\n+        max = std::max(max, values[i]);\n+      }\n+      reader.Next();\n+    }\n+  } else {  // All true values\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      min = std::min(min, values[i]);\n+      max = std::max(max, values[i]);\n+    }\n+  }\n+\n+  return {min, max};\n+}\n+\n+template <typename ArrowType>\n+static enable_if_floating_point<ArrowType, MinMaxResult<ArrowType>> NaiveMinMax(\n+    const Array& array) {\n+  using T = typename ArrowType::c_type;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  const auto& array_numeric = reinterpret_cast<const ArrayType&>(array);\n+  const auto values = array_numeric.raw_values();\n+\n+  if (array.length() <= array.null_count()) {  // All null values\n+    return {static_cast<T>(0), static_cast<T>(0)};\n+  }\n+\n+  T min = std::numeric_limits<T>::infinity();\n+  T max = -std::numeric_limits<T>::infinity();\n+  if (array.null_count() != 0) {  // Some values are null\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        min = std::fmin(min, values[i]);\n+        max = std::fmax(max, values[i]);\n+      }\n+      reader.Next();\n+    }\n+  } else {  // All true values\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      min = std::fmin(min, values[i]);\n+      max = std::fmax(max, values[i]);\n+    }\n+  }\n+\n+  return {min, max};\n+}\n+\n+template <typename ArrowType>\n+void ValidateMinMax(const Array& array) {\n+  using Traits = TypeTraits<ArrowType>;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+  ASSERT_OK_AND_ASSIGN(Datum out, MinMax(array));\n+  const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+  auto expected = NaiveMinMax<ArrowType>(array);\n+  const auto& out_min = checked_cast<const ScalarType&>(*value.value[0]);\n+  ASSERT_EQ(expected.first, out_min.value);\n+\n+  const auto& out_max = checked_cast<const ScalarType&>(*value.value[1]);\n+  ASSERT_EQ(expected.second, out_max.value);\n+}\n+\n+template <typename ArrowType>\n+class TestRandomNumericMinMaxKernel : public ::testing::Test {};\n+\n+TYPED_TEST_SUITE(TestRandomNumericMinMaxKernel, NumericArrowTypes);\n+TYPED_TEST(TestRandomNumericMinMaxKernel, RandomArrayMinMax) {\n+  auto rand = random::RandomArrayGenerator(0x8afc055);\n+  // Test size up to 1<<13 (8192).\n\nReview comment:\n       Sounds a bit large. Why not stop at e.g. 1024?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -594,6 +594,113 @@ TYPED_TEST(TestFloatingMinMaxKernel, DefaultOptions) {\n   AssertDatumsEqual(explicit_defaults, no_options_provided);\n }\n \n+template <typename ArrowType>\n+using MinMaxResult = std::pair<typename ArrowType::c_type, typename ArrowType::c_type>;\n+\n+template <typename ArrowType>\n+static enable_if_integer<ArrowType, MinMaxResult<ArrowType>> NaiveMinMax(\n+    const Array& array) {\n+  using T = typename ArrowType::c_type;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  const auto& array_numeric = reinterpret_cast<const ArrayType&>(array);\n+  const auto values = array_numeric.raw_values();\n+\n+  if (array.length() <= array.null_count()) {  // All null values\n+    return {static_cast<T>(0), static_cast<T>(0)};\n+  }\n+\n+  T min = std::numeric_limits<T>::max();\n+  T max = std::numeric_limits<T>::min();\n+  if (array.null_count() != 0) {  // Some values are null\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        min = std::min(min, values[i]);\n+        max = std::max(max, values[i]);\n+      }\n+      reader.Next();\n+    }\n+  } else {  // All true values\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      min = std::min(min, values[i]);\n+      max = std::max(max, values[i]);\n+    }\n+  }\n+\n+  return {min, max};\n+}\n+\n+template <typename ArrowType>\n+static enable_if_floating_point<ArrowType, MinMaxResult<ArrowType>> NaiveMinMax(\n+    const Array& array) {\n+  using T = typename ArrowType::c_type;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  const auto& array_numeric = reinterpret_cast<const ArrayType&>(array);\n+  const auto values = array_numeric.raw_values();\n+\n+  if (array.length() <= array.null_count()) {  // All null values\n+    return {static_cast<T>(0), static_cast<T>(0)};\n+  }\n+\n+  T min = std::numeric_limits<T>::infinity();\n+  T max = -std::numeric_limits<T>::infinity();\n+  if (array.null_count() != 0) {  // Some values are null\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        min = std::fmin(min, values[i]);\n+        max = std::fmax(max, values[i]);\n+      }\n+      reader.Next();\n+    }\n+  } else {  // All true values\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      min = std::fmin(min, values[i]);\n+      max = std::fmax(max, values[i]);\n+    }\n+  }\n+\n+  return {min, max};\n+}\n+\n+template <typename ArrowType>\n+void ValidateMinMax(const Array& array) {\n+  using Traits = TypeTraits<ArrowType>;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+  ASSERT_OK_AND_ASSIGN(Datum out, MinMax(array));\n+  const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+  auto expected = NaiveMinMax<ArrowType>(array);\n+  const auto& out_min = checked_cast<const ScalarType&>(*value.value[0]);\n+  ASSERT_EQ(expected.first, out_min.value);\n\nReview comment:\n       How does this work when the array is all nulls (`null_probability` = 1.0 below)?\n\n##########\nFile path: cpp/src/arrow/compute/api_aggregate.h\n##########\n@@ -130,23 +130,6 @@ Result<Datum> MinMax(const Datum& value,\n                      const MinMaxOptions& options = MinMaxOptions::Defaults(),\n                      ExecContext* ctx = NULLPTR);\n \n-/// \\brief Calculate the min / max of a numeric array.\n-///\n-/// This function returns both the min and max as a collection. The resulting\n-/// datum thus consists of two scalar datums: {Datum(min), Datum(max)}\n-///\n-/// \\param[in] array input array\n-/// \\param[in] options see MinMaxOptions for more information\n-/// \\param[in] ctx the function execution context, optional\n-/// \\return resulting datum containing a {min, max} collection\n-///\n-/// \\since 1.0.0\n-/// \\note API not yet finalized\n-ARROW_EXPORT\n-Result<Datum> MinMax(const Array& array,\n\nReview comment:\n       Hmm... is this removal deliberate?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-26T16:20:29.542+0000",
                    "updated": "2020-08-26T16:20:29.542+0000",
                    "started": "2020-08-26T16:20:29.542+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474880",
                    "issueId": "13320308"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320308/worklog/475074",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on a change in pull request #7871:\nURL: https://github.com/apache/arrow/pull/7871#discussion_r477781881\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_aggregate.h\n##########\n@@ -130,23 +130,6 @@ Result<Datum> MinMax(const Datum& value,\n                      const MinMaxOptions& options = MinMaxOptions::Defaults(),\n                      ExecContext* ctx = NULLPTR);\n \n-/// \\brief Calculate the min / max of a numeric array.\n-///\n-/// This function returns both the min and max as a collection. The resulting\n-/// datum thus consists of two scalar datums: {Datum(min), Datum(max)}\n-///\n-/// \\param[in] array input array\n-/// \\param[in] options see MinMaxOptions for more information\n-/// \\param[in] ctx the function execution context, optional\n-/// \\return resulting datum containing a {min, max} collection\n-///\n-/// \\since 1.0.0\n-/// \\note API not yet finalized\n-ARROW_EXPORT\n-Result<Datum> MinMax(const Array& array,\n\nReview comment:\n       Yes. There's no implementation to Array input of MinMax, it will hit a link error if call MinMax with Array data.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-27T00:34:10.249+0000",
                    "updated": "2020-08-27T00:34:10.249+0000",
                    "started": "2020-08-27T00:34:10.248+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "475074",
                    "issueId": "13320308"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320308/worklog/475076",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on a change in pull request #7871:\nURL: https://github.com/apache/arrow/pull/7871#discussion_r477794871\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -594,6 +594,113 @@ TYPED_TEST(TestFloatingMinMaxKernel, DefaultOptions) {\n   AssertDatumsEqual(explicit_defaults, no_options_provided);\n }\n \n+template <typename ArrowType>\n+using MinMaxResult = std::pair<typename ArrowType::c_type, typename ArrowType::c_type>;\n+\n+template <typename ArrowType>\n+static enable_if_integer<ArrowType, MinMaxResult<ArrowType>> NaiveMinMax(\n+    const Array& array) {\n+  using T = typename ArrowType::c_type;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  const auto& array_numeric = reinterpret_cast<const ArrayType&>(array);\n+  const auto values = array_numeric.raw_values();\n+\n+  if (array.length() <= array.null_count()) {  // All null values\n+    return {static_cast<T>(0), static_cast<T>(0)};\n+  }\n+\n+  T min = std::numeric_limits<T>::max();\n+  T max = std::numeric_limits<T>::min();\n+  if (array.null_count() != 0) {  // Some values are null\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        min = std::min(min, values[i]);\n+        max = std::max(max, values[i]);\n+      }\n+      reader.Next();\n+    }\n+  } else {  // All true values\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      min = std::min(min, values[i]);\n+      max = std::max(max, values[i]);\n+    }\n+  }\n+\n+  return {min, max};\n+}\n+\n+template <typename ArrowType>\n+static enable_if_floating_point<ArrowType, MinMaxResult<ArrowType>> NaiveMinMax(\n+    const Array& array) {\n+  using T = typename ArrowType::c_type;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  const auto& array_numeric = reinterpret_cast<const ArrayType&>(array);\n+  const auto values = array_numeric.raw_values();\n+\n+  if (array.length() <= array.null_count()) {  // All null values\n+    return {static_cast<T>(0), static_cast<T>(0)};\n+  }\n+\n+  T min = std::numeric_limits<T>::infinity();\n+  T max = -std::numeric_limits<T>::infinity();\n+  if (array.null_count() != 0) {  // Some values are null\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        min = std::fmin(min, values[i]);\n+        max = std::fmax(max, values[i]);\n+      }\n+      reader.Next();\n+    }\n+  } else {  // All true values\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      min = std::fmin(min, values[i]);\n+      max = std::fmax(max, values[i]);\n+    }\n+  }\n+\n+  return {min, max};\n+}\n+\n+template <typename ArrowType>\n+void ValidateMinMax(const Array& array) {\n+  using Traits = TypeTraits<ArrowType>;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+  ASSERT_OK_AND_ASSIGN(Datum out, MinMax(array));\n+  const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+  auto expected = NaiveMinMax<ArrowType>(array);\n+  const auto& out_min = checked_cast<const ScalarType&>(*value.value[0]);\n+  ASSERT_EQ(expected.first, out_min.value);\n\nReview comment:\n       Return null for both the expected test and MinMax.\r\n   \r\n    if (array.length() <= array.null_count()) {  // All null values\r\n       return {static_cast<T>(0), static_cast<T>(0)};\r\n     }\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-27T00:41:00.052+0000",
                    "updated": "2020-08-27T00:41:00.052+0000",
                    "started": "2020-08-27T00:41:00.052+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "475076",
                    "issueId": "13320308"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320308/worklog/475080",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on a change in pull request #7871:\nURL: https://github.com/apache/arrow/pull/7871#discussion_r477809857\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -594,6 +594,113 @@ TYPED_TEST(TestFloatingMinMaxKernel, DefaultOptions) {\n   AssertDatumsEqual(explicit_defaults, no_options_provided);\n }\n \n+template <typename ArrowType>\n+using MinMaxResult = std::pair<typename ArrowType::c_type, typename ArrowType::c_type>;\n+\n+template <typename ArrowType>\n+static enable_if_integer<ArrowType, MinMaxResult<ArrowType>> NaiveMinMax(\n+    const Array& array) {\n+  using T = typename ArrowType::c_type;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  const auto& array_numeric = reinterpret_cast<const ArrayType&>(array);\n+  const auto values = array_numeric.raw_values();\n+\n+  if (array.length() <= array.null_count()) {  // All null values\n+    return {static_cast<T>(0), static_cast<T>(0)};\n+  }\n+\n+  T min = std::numeric_limits<T>::max();\n+  T max = std::numeric_limits<T>::min();\n+  if (array.null_count() != 0) {  // Some values are null\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        min = std::min(min, values[i]);\n+        max = std::max(max, values[i]);\n+      }\n+      reader.Next();\n+    }\n+  } else {  // All true values\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      min = std::min(min, values[i]);\n+      max = std::max(max, values[i]);\n+    }\n+  }\n+\n+  return {min, max};\n+}\n+\n+template <typename ArrowType>\n+static enable_if_floating_point<ArrowType, MinMaxResult<ArrowType>> NaiveMinMax(\n+    const Array& array) {\n+  using T = typename ArrowType::c_type;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  const auto& array_numeric = reinterpret_cast<const ArrayType&>(array);\n+  const auto values = array_numeric.raw_values();\n+\n+  if (array.length() <= array.null_count()) {  // All null values\n+    return {static_cast<T>(0), static_cast<T>(0)};\n+  }\n+\n+  T min = std::numeric_limits<T>::infinity();\n+  T max = -std::numeric_limits<T>::infinity();\n+  if (array.null_count() != 0) {  // Some values are null\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        min = std::fmin(min, values[i]);\n+        max = std::fmax(max, values[i]);\n+      }\n+      reader.Next();\n+    }\n+  } else {  // All true values\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      min = std::fmin(min, values[i]);\n+      max = std::fmax(max, values[i]);\n+    }\n+  }\n+\n+  return {min, max};\n+}\n+\n+template <typename ArrowType>\n+void ValidateMinMax(const Array& array) {\n+  using Traits = TypeTraits<ArrowType>;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+  ASSERT_OK_AND_ASSIGN(Datum out, MinMax(array));\n+  const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+  auto expected = NaiveMinMax<ArrowType>(array);\n+  const auto& out_min = checked_cast<const ScalarType&>(*value.value[0]);\n+  ASSERT_EQ(expected.first, out_min.value);\n+\n+  const auto& out_max = checked_cast<const ScalarType&>(*value.value[1]);\n+  ASSERT_EQ(expected.second, out_max.value);\n+}\n+\n+template <typename ArrowType>\n+class TestRandomNumericMinMaxKernel : public ::testing::Test {};\n+\n+TYPED_TEST_SUITE(TestRandomNumericMinMaxKernel, NumericArrowTypes);\n+TYPED_TEST(TestRandomNumericMinMaxKernel, RandomArrayMinMax) {\n+  auto rand = random::RandomArrayGenerator(0x8afc055);\n+  // Test size up to 1<<13 (8192).\n\nReview comment:\n       The new implementation is based on BitBlockCounter, I am afraid 1024 size with 0.001(only one valid value) null_probability doesn't cover enough.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-27T00:48:54.573+0000",
                    "updated": "2020-08-27T00:48:54.573+0000",
                    "started": "2020-08-27T00:48:54.573+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "475080",
                    "issueId": "13320308"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320308/worklog/476601",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7871:\nURL: https://github.com/apache/arrow/pull/7871#discussion_r480175509\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -594,6 +594,113 @@ TYPED_TEST(TestFloatingMinMaxKernel, DefaultOptions) {\n   AssertDatumsEqual(explicit_defaults, no_options_provided);\n }\n \n+template <typename ArrowType>\n+using MinMaxResult = std::pair<typename ArrowType::c_type, typename ArrowType::c_type>;\n+\n+template <typename ArrowType>\n+static enable_if_integer<ArrowType, MinMaxResult<ArrowType>> NaiveMinMax(\n+    const Array& array) {\n+  using T = typename ArrowType::c_type;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  const auto& array_numeric = reinterpret_cast<const ArrayType&>(array);\n+  const auto values = array_numeric.raw_values();\n+\n+  if (array.length() <= array.null_count()) {  // All null values\n+    return {static_cast<T>(0), static_cast<T>(0)};\n+  }\n+\n+  T min = std::numeric_limits<T>::max();\n+  T max = std::numeric_limits<T>::min();\n+  if (array.null_count() != 0) {  // Some values are null\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        min = std::min(min, values[i]);\n+        max = std::max(max, values[i]);\n+      }\n+      reader.Next();\n+    }\n+  } else {  // All true values\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      min = std::min(min, values[i]);\n+      max = std::max(max, values[i]);\n+    }\n+  }\n+\n+  return {min, max};\n+}\n+\n+template <typename ArrowType>\n+static enable_if_floating_point<ArrowType, MinMaxResult<ArrowType>> NaiveMinMax(\n+    const Array& array) {\n+  using T = typename ArrowType::c_type;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  const auto& array_numeric = reinterpret_cast<const ArrayType&>(array);\n+  const auto values = array_numeric.raw_values();\n+\n+  if (array.length() <= array.null_count()) {  // All null values\n+    return {static_cast<T>(0), static_cast<T>(0)};\n+  }\n+\n+  T min = std::numeric_limits<T>::infinity();\n+  T max = -std::numeric_limits<T>::infinity();\n+  if (array.null_count() != 0) {  // Some values are null\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        min = std::fmin(min, values[i]);\n+        max = std::fmax(max, values[i]);\n+      }\n+      reader.Next();\n+    }\n+  } else {  // All true values\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      min = std::fmin(min, values[i]);\n+      max = std::fmax(max, values[i]);\n+    }\n+  }\n+\n+  return {min, max};\n+}\n+\n+template <typename ArrowType>\n+void ValidateMinMax(const Array& array) {\n+  using Traits = TypeTraits<ArrowType>;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+  ASSERT_OK_AND_ASSIGN(Datum out, MinMax(array));\n+  const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+  auto expected = NaiveMinMax<ArrowType>(array);\n+  const auto& out_min = checked_cast<const ScalarType&>(*value.value[0]);\n+  ASSERT_EQ(expected.first, out_min.value);\n\nReview comment:\n       In this case, I would expect the test to look like this:\r\n   ```c++\r\n   ASSERT_FALSE(out_min.is_valid);\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-31T14:39:22.167+0000",
                    "updated": "2020-08-31T14:39:22.167+0000",
                    "started": "2020-08-31T14:39:22.166+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "476601",
                    "issueId": "13320308"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320308/worklog/476974",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on a change in pull request #7871:\nURL: https://github.com/apache/arrow/pull/7871#discussion_r480661786\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -594,6 +594,113 @@ TYPED_TEST(TestFloatingMinMaxKernel, DefaultOptions) {\n   AssertDatumsEqual(explicit_defaults, no_options_provided);\n }\n \n+template <typename ArrowType>\n+using MinMaxResult = std::pair<typename ArrowType::c_type, typename ArrowType::c_type>;\n+\n+template <typename ArrowType>\n+static enable_if_integer<ArrowType, MinMaxResult<ArrowType>> NaiveMinMax(\n+    const Array& array) {\n+  using T = typename ArrowType::c_type;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  const auto& array_numeric = reinterpret_cast<const ArrayType&>(array);\n+  const auto values = array_numeric.raw_values();\n+\n+  if (array.length() <= array.null_count()) {  // All null values\n+    return {static_cast<T>(0), static_cast<T>(0)};\n+  }\n+\n+  T min = std::numeric_limits<T>::max();\n+  T max = std::numeric_limits<T>::min();\n+  if (array.null_count() != 0) {  // Some values are null\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        min = std::min(min, values[i]);\n+        max = std::max(max, values[i]);\n+      }\n+      reader.Next();\n+    }\n+  } else {  // All true values\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      min = std::min(min, values[i]);\n+      max = std::max(max, values[i]);\n+    }\n+  }\n+\n+  return {min, max};\n+}\n+\n+template <typename ArrowType>\n+static enable_if_floating_point<ArrowType, MinMaxResult<ArrowType>> NaiveMinMax(\n+    const Array& array) {\n+  using T = typename ArrowType::c_type;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  const auto& array_numeric = reinterpret_cast<const ArrayType&>(array);\n+  const auto values = array_numeric.raw_values();\n+\n+  if (array.length() <= array.null_count()) {  // All null values\n+    return {static_cast<T>(0), static_cast<T>(0)};\n+  }\n+\n+  T min = std::numeric_limits<T>::infinity();\n+  T max = -std::numeric_limits<T>::infinity();\n+  if (array.null_count() != 0) {  // Some values are null\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        min = std::fmin(min, values[i]);\n+        max = std::fmax(max, values[i]);\n+      }\n+      reader.Next();\n+    }\n+  } else {  // All true values\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      min = std::fmin(min, values[i]);\n+      max = std::fmax(max, values[i]);\n+    }\n+  }\n+\n+  return {min, max};\n+}\n+\n+template <typename ArrowType>\n+void ValidateMinMax(const Array& array) {\n+  using Traits = TypeTraits<ArrowType>;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+  ASSERT_OK_AND_ASSIGN(Datum out, MinMax(array));\n+  const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+  auto expected = NaiveMinMax<ArrowType>(array);\n+  const auto& out_min = checked_cast<const ScalarType&>(*value.value[0]);\n+  ASSERT_EQ(expected.first, out_min.value);\n\nReview comment:\n       Added a RandomNullArrayMinMax to cover 1.0 null_probability, thanks\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-01T03:00:16.083+0000",
                    "updated": "2020-09-01T03:00:16.083+0000",
                    "started": "2020-09-01T03:00:16.083+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "476974",
                    "issueId": "13320308"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320308/worklog/477191",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7871:\nURL: https://github.com/apache/arrow/pull/7871#discussion_r481101916\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -594,6 +594,113 @@ TYPED_TEST(TestFloatingMinMaxKernel, DefaultOptions) {\n   AssertDatumsEqual(explicit_defaults, no_options_provided);\n }\n \n+template <typename ArrowType>\n+using MinMaxResult = std::pair<typename ArrowType::c_type, typename ArrowType::c_type>;\n+\n+template <typename ArrowType>\n+static enable_if_integer<ArrowType, MinMaxResult<ArrowType>> NaiveMinMax(\n+    const Array& array) {\n+  using T = typename ArrowType::c_type;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  const auto& array_numeric = reinterpret_cast<const ArrayType&>(array);\n+  const auto values = array_numeric.raw_values();\n+\n+  if (array.length() <= array.null_count()) {  // All null values\n+    return {static_cast<T>(0), static_cast<T>(0)};\n+  }\n+\n+  T min = std::numeric_limits<T>::max();\n+  T max = std::numeric_limits<T>::min();\n+  if (array.null_count() != 0) {  // Some values are null\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        min = std::min(min, values[i]);\n+        max = std::max(max, values[i]);\n+      }\n+      reader.Next();\n+    }\n+  } else {  // All true values\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      min = std::min(min, values[i]);\n+      max = std::max(max, values[i]);\n+    }\n+  }\n+\n+  return {min, max};\n+}\n+\n+template <typename ArrowType>\n+static enable_if_floating_point<ArrowType, MinMaxResult<ArrowType>> NaiveMinMax(\n+    const Array& array) {\n+  using T = typename ArrowType::c_type;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  const auto& array_numeric = reinterpret_cast<const ArrayType&>(array);\n+  const auto values = array_numeric.raw_values();\n+\n+  if (array.length() <= array.null_count()) {  // All null values\n+    return {static_cast<T>(0), static_cast<T>(0)};\n+  }\n+\n+  T min = std::numeric_limits<T>::infinity();\n+  T max = -std::numeric_limits<T>::infinity();\n+  if (array.null_count() != 0) {  // Some values are null\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        min = std::fmin(min, values[i]);\n+        max = std::fmax(max, values[i]);\n+      }\n+      reader.Next();\n+    }\n+  } else {  // All true values\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      min = std::fmin(min, values[i]);\n+      max = std::fmax(max, values[i]);\n+    }\n+  }\n+\n+  return {min, max};\n+}\n+\n+template <typename ArrowType>\n+void ValidateMinMax(const Array& array) {\n+  using Traits = TypeTraits<ArrowType>;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+  ASSERT_OK_AND_ASSIGN(Datum out, MinMax(array));\n+  const StructScalar& value = out.scalar_as<StructScalar>();\n+\n+  auto expected = NaiveMinMax<ArrowType>(array);\n+  const auto& out_min = checked_cast<const ScalarType&>(*value.value[0]);\n+  ASSERT_EQ(expected.first, out_min.value);\n\nReview comment:\n       I don't think that's sufficient. You should probably add a `bool is_valid` member to `MinMaxResult`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-01T12:33:02.925+0000",
                    "updated": "2020-09-01T12:33:02.925+0000",
                    "started": "2020-09-01T12:33:02.925+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "477191",
                    "issueId": "13320308"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 16800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@14f71403[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24ddfd9a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c713f49[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@770b3470[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a7cbaf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@405cbd52[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@75e25967[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5be45b1f[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@66a3197f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@43309ed4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24feceb4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5dbb5597[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Sep 02 13:35:44 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-09-02T13:35:43.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9605/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-07-31T03:06:27.000+0000",
        "updated": "2020-09-02T13:35:50.000+0000",
        "timeoriginalestimate": null,
        "description": "# Use\u00a0BitBlockCounter to speedup the performance for typical 0.01% null-able data.\r\n # Enable AVX compiler auto vectorize for no-nulls on int types. Float/Double use fmin/fmax to handle NaN which can't be\u00a0vectorize by\u00a0compiler.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Optimize performance for aggregate min/max compute kernels",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13320308/comment/17189240",
                    "id": "17189240",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 7871\n[https://github.com/apache/arrow/pull/7871]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-09-02T13:35:44.023+0000",
                    "updated": "2020-09-02T13:35:44.023+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0hd2o:",
        "customfield_12314139": null
    }
}