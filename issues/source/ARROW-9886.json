{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13325116",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325116",
    "key": "ARROW-9886",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/5",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/trivial.svg",
            "name": "Trivial",
            "id": "5"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9886/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 6,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325116/worklog/476056",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao opened a new pull request #8077:\nURL: https://github.com/apache/arrow/pull/8077\n\n\n   A small improvement to the code around testing physical casts.\r\n   \r\n   This creates a macro rule that can be used to test casting, and migrates our 3 tests to that macro.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-29T06:10:31.433+0000",
                    "updated": "2020-08-29T06:10:31.433+0000",
                    "started": "2020-08-29T06:10:31.433+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "476056",
                    "issueId": "13325116"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325116/worklog/476057",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8077:\nURL: https://github.com/apache/arrow/pull/8077#issuecomment-683243783\n\n\n   https://issues.apache.org/jira/browse/ARROW-9886\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-29T06:12:24.996+0000",
                    "updated": "2020-08-29T06:12:24.996+0000",
                    "started": "2020-08-29T06:12:24.995+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "476057",
                    "issueId": "13325116"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325116/worklog/476127",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8077:\nURL: https://github.com/apache/arrow/pull/8077#discussion_r479658360\n\n\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/expressions.rs\n##########\n@@ -1740,64 +1740,83 @@ mod tests {\n         Ok(())\n     }\n \n-    #[test]\n-    fn cast_i32_to_u32() -> Result<()> {\n-        let schema = Schema::new(vec![Field::new(\"a\", DataType::Int32, false)]);\n-        let a = Int32Array::from(vec![1, 2, 3, 4, 5]);\n-        let batch = RecordBatch::try_new(Arc::new(schema.clone()), vec![Arc::new(a)])?;\n+    // runs an end-to-end test of physical type cast\n+    // 1. construct a record batch with a column \"a\" of type A\n+    // 2. construct a physical expression of CAST(a AS B)\n+    // 3. evaluate the expression\n+    // 4. verify that the resulting expression is of type B\n+    // 5. verify that the resulting values are downcastable and correct\n+    macro_rules! generic_test_cast {\n+        ($A_ARRAY:ident, $A_TYPE:expr, $A_VEC:expr, $TYPEARRAY:ident, $TYPE:expr, $VEC:expr) => {{\n+            let schema = Schema::new(vec![Field::new(\"a\", $A_TYPE, false)]);\n+            let a = $A_ARRAY::from($A_VEC);\n+            let batch =\n+                RecordBatch::try_new(Arc::new(schema.clone()), vec![Arc::new(a)])?;\n \n-        let cast = cast(col(\"a\"), &schema, DataType::UInt32)?;\n-        assert_eq!(\"CAST(a AS UInt32)\", format!(\"{}\", cast));\n-        let result = cast.evaluate(&batch)?;\n-        assert_eq!(result.len(), 5);\n+            // verify that we can construct the expression\n+            let expression = cast(col(\"a\"), &schema, $TYPE)?;\n \n-        let result = result\n-            .as_any()\n-            .downcast_ref::<UInt32Array>()\n-            .expect(\"failed to downcast to UInt32Array\");\n-        assert_eq!(result.value(0), 1_u32);\n+            // verify that its display is correct\n+            assert_eq!(format!(\"CAST(a AS {:?})\", $TYPE), format!(\"{}\", expression));\n \n-        Ok(())\n-    }\n+            // verify that the expression's type is correct\n+            assert_eq!(expression.data_type(&schema)?, $TYPE);\n \n-    #[test]\n-    fn cast_i32_to_utf8() -> Result<()> {\n-        let schema = Schema::new(vec![Field::new(\"a\", DataType::Int32, false)]);\n-        let a = Int32Array::from(vec![1, 2, 3, 4, 5]);\n-        let batch = RecordBatch::try_new(Arc::new(schema.clone()), vec![Arc::new(a)])?;\n+            // compute\n+            let result = expression.evaluate(&batch)?;\n \n-        let cast = cast(col(\"a\"), &schema, DataType::Utf8)?;\n-        let result = cast.evaluate(&batch)?;\n-        assert_eq!(result.len(), 5);\n+            // verify that the array's data_type is correct\n+            assert_eq!(*result.data_type(), $TYPE);\n \n-        let result = result\n-            .as_any()\n-            .downcast_ref::<StringArray>()\n-            .expect(\"failed to downcast to StringArray\");\n-        assert_eq!(result.value(0), \"1\");\n+            // verify that the len is correct\n+            assert_eq!(result.len(), $A_VEC.len());\n \n-        Ok(())\n+            // verify that the data itself is downcastable\n+            let result = result\n+                .as_any()\n+                .downcast_ref::<$TYPEARRAY>()\n+                .expect(\"failed to downcast\");\n+\n+            // verify that the result itself is correct\n+            for (i, x) in $VEC.iter().enumerate() {\n+                assert_eq!(result.value(i), *x);\n+            }\n+        }};\n     }\n \n     #[test]\n\nReview comment:\n       I like the cleanup with the macro! I think this test contains multiple tests though that should be separated out into their own test functions? e.g. `test_cast_i32_i32` and `test_cast_i32_string` and so on, so that if one of these fails it is easier to track down?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-29T15:08:19.541+0000",
                    "updated": "2020-08-29T15:08:19.541+0000",
                    "started": "2020-08-29T15:08:19.541+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "476127",
                    "issueId": "13325116"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325116/worklog/476201",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8077:\nURL: https://github.com/apache/arrow/pull/8077#discussion_r479723796\n\n\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/expressions.rs\n##########\n@@ -1740,64 +1740,83 @@ mod tests {\n         Ok(())\n     }\n \n-    #[test]\n-    fn cast_i32_to_u32() -> Result<()> {\n-        let schema = Schema::new(vec![Field::new(\"a\", DataType::Int32, false)]);\n-        let a = Int32Array::from(vec![1, 2, 3, 4, 5]);\n-        let batch = RecordBatch::try_new(Arc::new(schema.clone()), vec![Arc::new(a)])?;\n+    // runs an end-to-end test of physical type cast\n+    // 1. construct a record batch with a column \"a\" of type A\n+    // 2. construct a physical expression of CAST(a AS B)\n+    // 3. evaluate the expression\n+    // 4. verify that the resulting expression is of type B\n+    // 5. verify that the resulting values are downcastable and correct\n+    macro_rules! generic_test_cast {\n+        ($A_ARRAY:ident, $A_TYPE:expr, $A_VEC:expr, $TYPEARRAY:ident, $TYPE:expr, $VEC:expr) => {{\n+            let schema = Schema::new(vec![Field::new(\"a\", $A_TYPE, false)]);\n+            let a = $A_ARRAY::from($A_VEC);\n+            let batch =\n+                RecordBatch::try_new(Arc::new(schema.clone()), vec![Arc::new(a)])?;\n \n-        let cast = cast(col(\"a\"), &schema, DataType::UInt32)?;\n-        assert_eq!(\"CAST(a AS UInt32)\", format!(\"{}\", cast));\n-        let result = cast.evaluate(&batch)?;\n-        assert_eq!(result.len(), 5);\n+            // verify that we can construct the expression\n+            let expression = cast(col(\"a\"), &schema, $TYPE)?;\n \n-        let result = result\n-            .as_any()\n-            .downcast_ref::<UInt32Array>()\n-            .expect(\"failed to downcast to UInt32Array\");\n-        assert_eq!(result.value(0), 1_u32);\n+            // verify that its display is correct\n+            assert_eq!(format!(\"CAST(a AS {:?})\", $TYPE), format!(\"{}\", expression));\n \n-        Ok(())\n-    }\n+            // verify that the expression's type is correct\n+            assert_eq!(expression.data_type(&schema)?, $TYPE);\n \n-    #[test]\n-    fn cast_i32_to_utf8() -> Result<()> {\n-        let schema = Schema::new(vec![Field::new(\"a\", DataType::Int32, false)]);\n-        let a = Int32Array::from(vec![1, 2, 3, 4, 5]);\n-        let batch = RecordBatch::try_new(Arc::new(schema.clone()), vec![Arc::new(a)])?;\n+            // compute\n+            let result = expression.evaluate(&batch)?;\n \n-        let cast = cast(col(\"a\"), &schema, DataType::Utf8)?;\n-        let result = cast.evaluate(&batch)?;\n-        assert_eq!(result.len(), 5);\n+            // verify that the array's data_type is correct\n+            assert_eq!(*result.data_type(), $TYPE);\n \n-        let result = result\n-            .as_any()\n-            .downcast_ref::<StringArray>()\n-            .expect(\"failed to downcast to StringArray\");\n-        assert_eq!(result.value(0), \"1\");\n+            // verify that the len is correct\n+            assert_eq!(result.len(), $A_VEC.len());\n \n-        Ok(())\n+            // verify that the data itself is downcastable\n+            let result = result\n+                .as_any()\n+                .downcast_ref::<$TYPEARRAY>()\n+                .expect(\"failed to downcast\");\n+\n+            // verify that the result itself is correct\n+            for (i, x) in $VEC.iter().enumerate() {\n+                assert_eq!(result.value(i), *x);\n+            }\n+        }};\n     }\n \n     #[test]\n\nReview comment:\n       Good point, I agree. Changed to one case per test.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-30T05:24:43.274+0000",
                    "updated": "2020-08-30T05:24:43.274+0000",
                    "started": "2020-08-30T05:24:43.274+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "476201",
                    "issueId": "13325116"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325116/worklog/476476",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8077:\nURL: https://github.com/apache/arrow/pull/8077#discussion_r480020240\n\n\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/expressions.rs\n##########\n@@ -1740,65 +1740,91 @@ mod tests {\n         Ok(())\n     }\n \n-    #[test]\n-    fn cast_i32_to_u32() -> Result<()> {\n-        let schema = Schema::new(vec![Field::new(\"a\", DataType::Int32, false)]);\n-        let a = Int32Array::from(vec![1, 2, 3, 4, 5]);\n-        let batch = RecordBatch::try_new(Arc::new(schema.clone()), vec![Arc::new(a)])?;\n+    // runs an end-to-end test of physical type cast\n+    // 1. construct a record batch with a column \"a\" of type A\n+    // 2. construct a physical expression of CAST(a AS B)\n+    // 3. evaluate the expression\n+    // 4. verify that the resulting expression is of type B\n+    // 5. verify that the resulting values are downcastable and correct\n+    macro_rules! generic_test_cast {\n+        ($A_ARRAY:ident, $A_TYPE:expr, $A_VEC:expr, $TYPEARRAY:ident, $TYPE:expr, $VEC:expr) => {{\n+            let schema = Schema::new(vec![Field::new(\"a\", $A_TYPE, false)]);\n+            let a = $A_ARRAY::from($A_VEC);\n+            let batch =\n+                RecordBatch::try_new(Arc::new(schema.clone()), vec![Arc::new(a)])?;\n \n-        let cast = cast(col(\"a\"), &schema, DataType::UInt32)?;\n-        assert_eq!(\"CAST(a AS UInt32)\", format!(\"{}\", cast));\n-        let result = cast.evaluate(&batch)?;\n-        assert_eq!(result.len(), 5);\n+            // verify that we can construct the expression\n+            let expression = cast(col(\"a\"), &schema, $TYPE)?;\n \n-        let result = result\n-            .as_any()\n-            .downcast_ref::<UInt32Array>()\n-            .expect(\"failed to downcast to UInt32Array\");\n-        assert_eq!(result.value(0), 1_u32);\n+            // verify that its display is correct\n+            assert_eq!(format!(\"CAST(a AS {:?})\", $TYPE), format!(\"{}\", expression));\n \n-        Ok(())\n-    }\n+            // verify that the expression's type is correct\n+            assert_eq!(expression.data_type(&schema)?, $TYPE);\n \n-    #[test]\n-    fn cast_i32_to_utf8() -> Result<()> {\n-        let schema = Schema::new(vec![Field::new(\"a\", DataType::Int32, false)]);\n-        let a = Int32Array::from(vec![1, 2, 3, 4, 5]);\n-        let batch = RecordBatch::try_new(Arc::new(schema.clone()), vec![Arc::new(a)])?;\n+            // compute\n+            let result = expression.evaluate(&batch)?;\n \n-        let cast = cast(col(\"a\"), &schema, DataType::Utf8)?;\n-        let result = cast.evaluate(&batch)?;\n-        assert_eq!(result.len(), 5);\n+            // verify that the array's data_type is correct\n+            assert_eq!(*result.data_type(), $TYPE);\n \n-        let result = result\n-            .as_any()\n-            .downcast_ref::<StringArray>()\n-            .expect(\"failed to downcast to StringArray\");\n-        assert_eq!(result.value(0), \"1\");\n+            // verify that the len is correct\n+            assert_eq!(result.len(), $A_VEC.len());\n \n+            // verify that the data itself is downcastable\n+            let result = result\n+                .as_any()\n+                .downcast_ref::<$TYPEARRAY>()\n+                .expect(\"failed to downcast\");\n+\n+            // verify that the result itself is correct\n+            for (i, x) in $VEC.iter().enumerate() {\n+                assert_eq!(result.value(i), *x);\n+            }\n+        }};\n+    }\n+\n+    #[test]\n+    fn test_cast_i32_u32() -> Result<()> {\n+        generic_test_cast!(\n+            Int32Array,\n+            DataType::Int32,\n+            vec![1, 2, 3, 4, 5],\n+            UInt32Array,\n+            DataType::UInt32,\n+            vec![1_u32, 2_u32, 3_u32, 4_u32, 5_u32]\n+        );\n         Ok(())\n     }\n \n     #[test]\n-    fn cast_i64_to_timestamp_nanoseconds() -> Result<()> {\n-        let schema = Schema::new(vec![Field::new(\"a\", DataType::Int64, false)]);\n-        let a = Int64Array::from(vec![1, 2, 3, 4, 5]);\n-        let batch = RecordBatch::try_new(Arc::new(schema.clone()), vec![Arc::new(a)])?;\n+    fn test_cast_i32_utf8() -> Result<()> {\n+        generic_test_cast!(\n+            Int32Array,\n+            DataType::Int32,\n+            vec![1, 2, 3, 4, 5],\n+            StringArray,\n+            DataType::Utf8,\n+            vec![\"1\", \"2\", \"3\", \"4\", \"5\"]\n+        );\n+        Ok(())\n+    }\n \n-        let cast = cast(\n-            col(\"a\"),\n-            &schema,\n+    #[test]\n+    fn test_cast_i65_t64() -> Result<()> {\n+        let original = vec![1, 2, 3, 4, 5];\n+        let expected: Vec<i64> = original\n+            .iter()\n+            .map(|i| Time64NanosecondArray::from(vec![i.clone()]).value(0))\n\nReview comment:\n       ```suggestion\r\n               .map(|i| Time64NanosecondArray::from(vec![*i]).value(0))\r\n   ```\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/expressions.rs\n##########\n@@ -1740,65 +1740,91 @@ mod tests {\n         Ok(())\n     }\n \n-    #[test]\n-    fn cast_i32_to_u32() -> Result<()> {\n-        let schema = Schema::new(vec![Field::new(\"a\", DataType::Int32, false)]);\n-        let a = Int32Array::from(vec![1, 2, 3, 4, 5]);\n-        let batch = RecordBatch::try_new(Arc::new(schema.clone()), vec![Arc::new(a)])?;\n+    // runs an end-to-end test of physical type cast\n+    // 1. construct a record batch with a column \"a\" of type A\n+    // 2. construct a physical expression of CAST(a AS B)\n+    // 3. evaluate the expression\n+    // 4. verify that the resulting expression is of type B\n+    // 5. verify that the resulting values are downcastable and correct\n+    macro_rules! generic_test_cast {\n+        ($A_ARRAY:ident, $A_TYPE:expr, $A_VEC:expr, $TYPEARRAY:ident, $TYPE:expr, $VEC:expr) => {{\n+            let schema = Schema::new(vec![Field::new(\"a\", $A_TYPE, false)]);\n+            let a = $A_ARRAY::from($A_VEC);\n+            let batch =\n+                RecordBatch::try_new(Arc::new(schema.clone()), vec![Arc::new(a)])?;\n \n-        let cast = cast(col(\"a\"), &schema, DataType::UInt32)?;\n-        assert_eq!(\"CAST(a AS UInt32)\", format!(\"{}\", cast));\n-        let result = cast.evaluate(&batch)?;\n-        assert_eq!(result.len(), 5);\n+            // verify that we can construct the expression\n+            let expression = cast(col(\"a\"), &schema, $TYPE)?;\n \n-        let result = result\n-            .as_any()\n-            .downcast_ref::<UInt32Array>()\n-            .expect(\"failed to downcast to UInt32Array\");\n-        assert_eq!(result.value(0), 1_u32);\n+            // verify that its display is correct\n+            assert_eq!(format!(\"CAST(a AS {:?})\", $TYPE), format!(\"{}\", expression));\n \n-        Ok(())\n-    }\n+            // verify that the expression's type is correct\n+            assert_eq!(expression.data_type(&schema)?, $TYPE);\n \n-    #[test]\n-    fn cast_i32_to_utf8() -> Result<()> {\n-        let schema = Schema::new(vec![Field::new(\"a\", DataType::Int32, false)]);\n-        let a = Int32Array::from(vec![1, 2, 3, 4, 5]);\n-        let batch = RecordBatch::try_new(Arc::new(schema.clone()), vec![Arc::new(a)])?;\n+            // compute\n+            let result = expression.evaluate(&batch)?;\n \n-        let cast = cast(col(\"a\"), &schema, DataType::Utf8)?;\n-        let result = cast.evaluate(&batch)?;\n-        assert_eq!(result.len(), 5);\n+            // verify that the array's data_type is correct\n+            assert_eq!(*result.data_type(), $TYPE);\n \n-        let result = result\n-            .as_any()\n-            .downcast_ref::<StringArray>()\n-            .expect(\"failed to downcast to StringArray\");\n-        assert_eq!(result.value(0), \"1\");\n+            // verify that the len is correct\n+            assert_eq!(result.len(), $A_VEC.len());\n \n+            // verify that the data itself is downcastable\n+            let result = result\n+                .as_any()\n+                .downcast_ref::<$TYPEARRAY>()\n+                .expect(\"failed to downcast\");\n+\n+            // verify that the result itself is correct\n+            for (i, x) in $VEC.iter().enumerate() {\n+                assert_eq!(result.value(i), *x);\n+            }\n+        }};\n+    }\n+\n+    #[test]\n+    fn test_cast_i32_u32() -> Result<()> {\n+        generic_test_cast!(\n+            Int32Array,\n+            DataType::Int32,\n+            vec![1, 2, 3, 4, 5],\n+            UInt32Array,\n+            DataType::UInt32,\n+            vec![1_u32, 2_u32, 3_u32, 4_u32, 5_u32]\n+        );\n         Ok(())\n     }\n \n     #[test]\n-    fn cast_i64_to_timestamp_nanoseconds() -> Result<()> {\n-        let schema = Schema::new(vec![Field::new(\"a\", DataType::Int64, false)]);\n-        let a = Int64Array::from(vec![1, 2, 3, 4, 5]);\n-        let batch = RecordBatch::try_new(Arc::new(schema.clone()), vec![Arc::new(a)])?;\n+    fn test_cast_i32_utf8() -> Result<()> {\n+        generic_test_cast!(\n+            Int32Array,\n+            DataType::Int32,\n+            vec![1, 2, 3, 4, 5],\n+            StringArray,\n+            DataType::Utf8,\n+            vec![\"1\", \"2\", \"3\", \"4\", \"5\"]\n+        );\n+        Ok(())\n+    }\n \n-        let cast = cast(\n-            col(\"a\"),\n-            &schema,\n+    #[test]\n+    fn test_cast_i65_t64() -> Result<()> {\n\nReview comment:\n       ```suggestion\r\n       fn test_cast_i64_t64() -> Result<()> {\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-31T09:54:25.064+0000",
                    "updated": "2020-08-31T09:54:25.064+0000",
                    "started": "2020-08-31T09:54:25.064+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "476476",
                    "issueId": "13325116"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325116/worklog/476961",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove closed pull request #8077:\nURL: https://github.com/apache/arrow/pull/8077\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-01T02:20:00.880+0000",
                    "updated": "2020-09-01T02:20:00.880+0000",
                    "started": "2020-09-01T02:20:00.880+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "476961",
                    "issueId": "13325116"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 3600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7440b096[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@533cbbdf[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1d2dd277[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2bf9604e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2d9869a2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@17724f8[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@723ae0cb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@12a105d2[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7c1aab5d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@447210c2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61eb9c3f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7b7e9a45[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 3600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Sep 01 02:19:53 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-09-01T02:19:53.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9886/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-08-29T06:04:55.000+0000",
        "updated": "2020-09-01T02:20:01.000+0000",
        "timeoriginalestimate": null,
        "description": "We have 3 tests with similar functionality, but that only vary on the types they test. Let's create a macro to apply to all of them, so that the tests are equivalent and DRY.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 3600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Simplify code to test cast",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13325116/comment/17188098",
                    "id": "17188098",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 8077\n[https://github.com/apache/arrow/pull/8077]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-09-01T02:19:53.804+0000",
                    "updated": "2020-09-01T02:19:53.804+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0i6m0:",
        "customfield_12314139": null
    }
}