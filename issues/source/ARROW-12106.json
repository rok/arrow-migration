{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13368004",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368004",
    "key": "ARROW-12106",
    "fields": {
        "parent": {
            "id": "13366168",
            "key": "ARROW-12020",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13366168",
            "fields": {
                "summary": "[Rust][DataFusion] Adding SHOW TABLES and SHOW COLUMNS + partial information_schema support to DataFusion",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 20400,
            "total": 20400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 20400,
            "total": 20400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12106/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 34,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368004/worklog/572881",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb opened a new pull request #9818:\nURL: https://github.com/apache/arrow/pull/9818\n\n\n   # Rationale\r\n   Provide configurable access to a table list so a user can see what tables exist).\r\n   \r\n   See the doc for background: https://docs.google.com/document/d/12cpZUSNPqVH9Z0BBx6O8REu7TFqL-NPPAYCUPpDls1k/edit#\r\n   \r\n   I plan to add support for `SHOW TABLES` (and `information_schema.columns` / `SHOW COLUMNS`) as follow on PRs\r\n   \r\n   # Example use:\r\n   \r\n   Setup:\r\n   ```\r\n   echo \"1\" > /tmp/table.csv\r\n   echo \"2\" >> /tmp/table.csv\r\n   cargo run --bin datafusion-cli\r\n   ```\r\n   \r\n   Then run :\r\n   \r\n   ```\r\n   >  CREATE EXTERNAL TABLE t(a int)\r\n   STORED AS CSV\r\n   LOCATION '/tmp/table.csv';\r\n   \r\n   0 rows in set. Query took 0 seconds.\r\n   > select * from information_schema.tables;\r\n   \r\n   +---------------+--------------------+------------+--------------+\r\n   | table_catalog | table_schema       | table_name | table_type   |\r\n   +---------------+--------------------+------------+--------------+\r\n   | datafusion    | public             | t          | BASE TABLE   |\r\n   | datafusion    | information_schema | TABLES     | SYSTEM TABLE |\r\n   +---------------+--------------------+------------+--------------+\r\n   2 row in set. Query took 0 seconds.\r\n   z>\r\n   ```\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-26T21:16:38.666+0000",
                    "updated": "2021-03-26T21:16:38.666+0000",
                    "started": "2021-03-26T21:16:38.666+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572881",
                    "issueId": "13368004"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368004/worklog/572882",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9818:\nURL: https://github.com/apache/arrow/pull/9818#issuecomment-808513138\n\n\n   https://issues.apache.org/jira/browse/ARROW-12106\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-26T21:17:03.322+0000",
                    "updated": "2021-03-26T21:17:03.322+0000",
                    "started": "2021-03-26T21:17:03.322+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572882",
                    "issueId": "13368004"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368004/worklog/572883",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9818:\nURL: https://github.com/apache/arrow/pull/9818#discussion_r602590429\n\n\n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -2048,6 +2076,130 @@ mod tests {\n         Ok(Arc::new(MemTable::try_new(schema, partitions)?))\n     }\n \n+    #[tokio::test]\n+    async fn information_schema_tables_not_exist_by_default() {\n\nReview comment:\n       These tests illustrate how this feature works concisely I believe\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-26T21:17:16.233+0000",
                    "updated": "2021-03-26T21:17:16.233+0000",
                    "started": "2021-03-26T21:17:16.232+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572883",
                    "issueId": "13368004"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368004/worklog/572884",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9818:\nURL: https://github.com/apache/arrow/pull/9818#issuecomment-808513407\n\n\n   FYI @seddonm1  @returnString @Dandandan \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-26T21:17:41.544+0000",
                    "updated": "2021-03-26T21:17:41.544+0000",
                    "started": "2021-03-26T21:17:41.544+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572884",
                    "issueId": "13368004"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368004/worklog/572897",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #9818:\nURL: https://github.com/apache/arrow/pull/9818#discussion_r602597882\n\n\n\n##########\nFile path: rust/datafusion/src/catalog/information_schema.rs\n##########\n@@ -0,0 +1,225 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Implements the SQL [Information Schema] for DataFusion.\n+//!\n+//! Information Schema](https://en.wikipedia.org/wiki/Information_schema)\n+\n+use std::{any, sync::Arc};\n+\n+use arrow::{\n+    array::StringBuilder,\n+    datatypes::{DataType, Field, Schema},\n+    record_batch::RecordBatch,\n+};\n+\n+use crate::datasource::{MemTable, TableProvider};\n+\n+use super::{\n+    catalog::{CatalogList, CatalogProvider},\n+    schema::SchemaProvider,\n+};\n+\n+const INFORMATION_SCHEMA: &str = \"information_schema\";\n+const TABLES: &str = \"tables\";\n+\n+/// Wraps a [`CatalogList`] so that it also provides an\n+/// `information_schema` schema view as well in each catalog.\n+pub(crate) struct CatalogListWithInformationSchema {\n+    inner: Arc<dyn CatalogList>,\n+}\n+\n+impl CatalogListWithInformationSchema {\n+    pub(crate) fn new(inner: Arc<dyn CatalogList>) -> Self {\n+        Self { inner }\n+    }\n+\n+    /// Returns a catalog provider that also contains the information schema table provider.\n+    pub(crate) fn catalog(&self, name: &str) -> Option<Arc<dyn CatalogProvider>> {\n+        self.inner.catalog(name).map(|catalog| {\n+            let catalog_list = self.inner.clone();\n+\n+            Arc::new(CatalogWithInformationSchema {\n+                catalog_list,\n+                inner: catalog,\n+            }) as Arc<dyn CatalogProvider>\n+        })\n+    }\n+}\n+\n+/// Wraps another [`CatalogProvider`] and adds a \"information_schema\"\n+/// schema that can introspect on tables in the catalog_list\n+struct CatalogWithInformationSchema {\n+    catalog_list: Arc<dyn CatalogList>,\n+    /// wrapped provider\n+    inner: Arc<dyn CatalogProvider>,\n+}\n+\n+impl CatalogProvider for CatalogWithInformationSchema {\n+    fn as_any(&self) -> &dyn any::Any {\n+        self\n+    }\n+\n+    fn schema_names(&self) -> Vec<String> {\n+        self.inner\n+            .schema_names()\n+            .into_iter()\n+            .chain(std::iter::once(INFORMATION_SCHEMA.to_string()))\n+            .collect::<Vec<String>>()\n+    }\n+\n+    fn schema(&self, name: &str) -> Option<Arc<dyn SchemaProvider>> {\n+        if name.eq_ignore_ascii_case(INFORMATION_SCHEMA) {\n+            Some(Arc::new(InformationSchemaProvider {\n+                catalog_list: self.catalog_list.clone(),\n+            }))\n+        } else {\n+            self.inner.schema(name)\n+        }\n+    }\n+}\n+\n+/// Implements the `information_schema` virtual schema and tables\n+///\n+/// The underlying tables in the `information_schema` are created on\n+/// demand. This means that if more tables are added to the underlying\n+/// providers, they will appear the next time the `information_schema`\n+/// table is queried.\n+struct InformationSchemaProvider {\n+    catalog_list: Arc<dyn CatalogList>,\n+}\n+\n+impl SchemaProvider for InformationSchemaProvider {\n+    fn as_any(&self) -> &(dyn any::Any + 'static) {\n+        self\n+    }\n+\n+    fn table_names(&self) -> Vec<String> {\n+        vec![TABLES.to_string()]\n+    }\n+\n+    fn table(&self, name: &str) -> Option<Arc<dyn TableProvider>> {\n+        if name.eq_ignore_ascii_case(\"tables\") {\n+            // create a mem table with the names of tables\n+            let mut builder = InformationSchemaTablesBuilder::new();\n+\n+            for catalog_name in self.catalog_list.catalog_names() {\n+                let catalog = self.catalog_list.catalog(&catalog_name).unwrap();\n+\n+                for schema_name in catalog.schema_names() {\n+                    let schema = catalog.schema(&schema_name).unwrap();\n+                    for table_name in schema.table_names() {\n+                        builder.add_base_table(&catalog_name, &schema_name, table_name)\n+                    }\n+                }\n+\n+                // Add a final list for the information schema tables themselves\n+                builder.add_system_table(&catalog_name, INFORMATION_SCHEMA, TABLES);\n+            }\n+\n+            let mem_table = builder.build();\n+\n+            Some(Arc::new(mem_table))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+/// Builds the `information_schema.TABLE` table row by row\n+\n+struct InformationSchemaTablesBuilder {\n+    catalog_names: StringBuilder,\n+    schema_names: StringBuilder,\n+    table_names: StringBuilder,\n+    table_types: StringBuilder,\n+}\n+\n+impl InformationSchemaTablesBuilder {\n+    fn new() -> Self {\n+        Self {\n+            catalog_names: StringBuilder::new(10),\n\nReview comment:\n       why 10?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-26T21:36:20.506+0000",
                    "updated": "2021-03-26T21:36:20.506+0000",
                    "started": "2021-03-26T21:36:20.506+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572897",
                    "issueId": "13368004"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368004/worklog/572901",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #9818:\nURL: https://github.com/apache/arrow/pull/9818#discussion_r602598700\n\n\n\n##########\nFile path: rust/datafusion/src/catalog/information_schema.rs\n##########\n@@ -0,0 +1,225 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Implements the SQL [Information Schema] for DataFusion.\n+//!\n+//! Information Schema](https://en.wikipedia.org/wiki/Information_schema)\n+\n+use std::{any, sync::Arc};\n+\n+use arrow::{\n+    array::StringBuilder,\n+    datatypes::{DataType, Field, Schema},\n+    record_batch::RecordBatch,\n+};\n+\n+use crate::datasource::{MemTable, TableProvider};\n+\n+use super::{\n+    catalog::{CatalogList, CatalogProvider},\n+    schema::SchemaProvider,\n+};\n+\n+const INFORMATION_SCHEMA: &str = \"information_schema\";\n+const TABLES: &str = \"tables\";\n+\n+/// Wraps a [`CatalogList`] so that it also provides an\n+/// `information_schema` schema view as well in each catalog.\n+pub(crate) struct CatalogListWithInformationSchema {\n+    inner: Arc<dyn CatalogList>,\n+}\n+\n+impl CatalogListWithInformationSchema {\n+    pub(crate) fn new(inner: Arc<dyn CatalogList>) -> Self {\n+        Self { inner }\n+    }\n+\n+    /// Returns a catalog provider that also contains the information schema table provider.\n+    pub(crate) fn catalog(&self, name: &str) -> Option<Arc<dyn CatalogProvider>> {\n+        self.inner.catalog(name).map(|catalog| {\n+            let catalog_list = self.inner.clone();\n+\n+            Arc::new(CatalogWithInformationSchema {\n+                catalog_list,\n+                inner: catalog,\n+            }) as Arc<dyn CatalogProvider>\n+        })\n+    }\n+}\n+\n+/// Wraps another [`CatalogProvider`] and adds a \"information_schema\"\n+/// schema that can introspect on tables in the catalog_list\n+struct CatalogWithInformationSchema {\n+    catalog_list: Arc<dyn CatalogList>,\n+    /// wrapped provider\n+    inner: Arc<dyn CatalogProvider>,\n+}\n+\n+impl CatalogProvider for CatalogWithInformationSchema {\n+    fn as_any(&self) -> &dyn any::Any {\n+        self\n+    }\n+\n+    fn schema_names(&self) -> Vec<String> {\n+        self.inner\n+            .schema_names()\n+            .into_iter()\n+            .chain(std::iter::once(INFORMATION_SCHEMA.to_string()))\n+            .collect::<Vec<String>>()\n+    }\n+\n+    fn schema(&self, name: &str) -> Option<Arc<dyn SchemaProvider>> {\n+        if name.eq_ignore_ascii_case(INFORMATION_SCHEMA) {\n+            Some(Arc::new(InformationSchemaProvider {\n+                catalog_list: self.catalog_list.clone(),\n+            }))\n+        } else {\n+            self.inner.schema(name)\n+        }\n+    }\n+}\n+\n+/// Implements the `information_schema` virtual schema and tables\n+///\n+/// The underlying tables in the `information_schema` are created on\n+/// demand. This means that if more tables are added to the underlying\n+/// providers, they will appear the next time the `information_schema`\n+/// table is queried.\n+struct InformationSchemaProvider {\n+    catalog_list: Arc<dyn CatalogList>,\n+}\n+\n+impl SchemaProvider for InformationSchemaProvider {\n+    fn as_any(&self) -> &(dyn any::Any + 'static) {\n+        self\n+    }\n+\n+    fn table_names(&self) -> Vec<String> {\n+        vec![TABLES.to_string()]\n+    }\n+\n+    fn table(&self, name: &str) -> Option<Arc<dyn TableProvider>> {\n+        if name.eq_ignore_ascii_case(\"tables\") {\n+            // create a mem table with the names of tables\n+            let mut builder = InformationSchemaTablesBuilder::new();\n+\n+            for catalog_name in self.catalog_list.catalog_names() {\n+                let catalog = self.catalog_list.catalog(&catalog_name).unwrap();\n+\n+                for schema_name in catalog.schema_names() {\n+                    let schema = catalog.schema(&schema_name).unwrap();\n+                    for table_name in schema.table_names() {\n+                        builder.add_base_table(&catalog_name, &schema_name, table_name)\n+                    }\n+                }\n+\n+                // Add a final list for the information schema tables themselves\n+                builder.add_system_table(&catalog_name, INFORMATION_SCHEMA, TABLES);\n+            }\n+\n+            let mem_table = builder.build();\n+\n+            Some(Arc::new(mem_table))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+/// Builds the `information_schema.TABLE` table row by row\n+\n+struct InformationSchemaTablesBuilder {\n+    catalog_names: StringBuilder,\n+    schema_names: StringBuilder,\n+    table_names: StringBuilder,\n+    table_types: StringBuilder,\n+}\n+\n+impl InformationSchemaTablesBuilder {\n+    fn new() -> Self {\n+        Self {\n+            catalog_names: StringBuilder::new(10),\n+            schema_names: StringBuilder::new(10),\n+            table_names: StringBuilder::new(10),\n+            table_types: StringBuilder::new(10),\n+        }\n+    }\n+\n+    fn add_base_table(\n+        &mut self,\n+        catalog_name: impl AsRef<str>,\n+        schema_name: impl AsRef<str>,\n+        table_name: impl AsRef<str>,\n+    ) {\n+        // Note: append_value is actually infallable.\n+        self.catalog_names\n+            .append_value(catalog_name.as_ref())\n+            .unwrap();\n+        self.schema_names\n+            .append_value(schema_name.as_ref())\n+            .unwrap();\n+        self.table_names.append_value(table_name.as_ref()).unwrap();\n+        self.table_types.append_value(\"BASE TABLE\").unwrap();\n\nReview comment:\n       I have not really spent much time with the information_schema. Are the own two types `BASE TABLE` and `SYSTEM TABLE`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-26T21:38:28.208+0000",
                    "updated": "2021-03-26T21:38:28.208+0000",
                    "started": "2021-03-26T21:38:28.208+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572901",
                    "issueId": "13368004"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368004/worklog/572902",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on pull request #9818:\nURL: https://github.com/apache/arrow/pull/9818#issuecomment-808522553\n\n\n   @alamb my read through looked good (as expected). I can have a play with it early next week.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-26T21:38:51.131+0000",
                    "updated": "2021-03-26T21:38:51.131+0000",
                    "started": "2021-03-26T21:38:51.130+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572902",
                    "issueId": "13368004"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368004/worklog/572906",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9818:\nURL: https://github.com/apache/arrow/pull/9818#discussion_r602600941\n\n\n\n##########\nFile path: rust/datafusion/src/catalog/information_schema.rs\n##########\n@@ -0,0 +1,225 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Implements the SQL [Information Schema] for DataFusion.\n+//!\n+//! Information Schema](https://en.wikipedia.org/wiki/Information_schema)\n+\n+use std::{any, sync::Arc};\n+\n+use arrow::{\n+    array::StringBuilder,\n+    datatypes::{DataType, Field, Schema},\n+    record_batch::RecordBatch,\n+};\n+\n+use crate::datasource::{MemTable, TableProvider};\n+\n+use super::{\n+    catalog::{CatalogList, CatalogProvider},\n+    schema::SchemaProvider,\n+};\n+\n+const INFORMATION_SCHEMA: &str = \"information_schema\";\n+const TABLES: &str = \"tables\";\n+\n+/// Wraps a [`CatalogList`] so that it also provides an\n+/// `information_schema` schema view as well in each catalog.\n+pub(crate) struct CatalogListWithInformationSchema {\n+    inner: Arc<dyn CatalogList>,\n+}\n+\n+impl CatalogListWithInformationSchema {\n+    pub(crate) fn new(inner: Arc<dyn CatalogList>) -> Self {\n+        Self { inner }\n+    }\n+\n+    /// Returns a catalog provider that also contains the information schema table provider.\n+    pub(crate) fn catalog(&self, name: &str) -> Option<Arc<dyn CatalogProvider>> {\n+        self.inner.catalog(name).map(|catalog| {\n+            let catalog_list = self.inner.clone();\n+\n+            Arc::new(CatalogWithInformationSchema {\n+                catalog_list,\n+                inner: catalog,\n+            }) as Arc<dyn CatalogProvider>\n+        })\n+    }\n+}\n+\n+/// Wraps another [`CatalogProvider`] and adds a \"information_schema\"\n+/// schema that can introspect on tables in the catalog_list\n+struct CatalogWithInformationSchema {\n+    catalog_list: Arc<dyn CatalogList>,\n+    /// wrapped provider\n+    inner: Arc<dyn CatalogProvider>,\n+}\n+\n+impl CatalogProvider for CatalogWithInformationSchema {\n+    fn as_any(&self) -> &dyn any::Any {\n+        self\n+    }\n+\n+    fn schema_names(&self) -> Vec<String> {\n+        self.inner\n+            .schema_names()\n+            .into_iter()\n+            .chain(std::iter::once(INFORMATION_SCHEMA.to_string()))\n+            .collect::<Vec<String>>()\n+    }\n+\n+    fn schema(&self, name: &str) -> Option<Arc<dyn SchemaProvider>> {\n+        if name.eq_ignore_ascii_case(INFORMATION_SCHEMA) {\n+            Some(Arc::new(InformationSchemaProvider {\n+                catalog_list: self.catalog_list.clone(),\n+            }))\n+        } else {\n+            self.inner.schema(name)\n+        }\n+    }\n+}\n+\n+/// Implements the `information_schema` virtual schema and tables\n+///\n+/// The underlying tables in the `information_schema` are created on\n+/// demand. This means that if more tables are added to the underlying\n+/// providers, they will appear the next time the `information_schema`\n+/// table is queried.\n+struct InformationSchemaProvider {\n+    catalog_list: Arc<dyn CatalogList>,\n+}\n+\n+impl SchemaProvider for InformationSchemaProvider {\n+    fn as_any(&self) -> &(dyn any::Any + 'static) {\n+        self\n+    }\n+\n+    fn table_names(&self) -> Vec<String> {\n+        vec![TABLES.to_string()]\n+    }\n+\n+    fn table(&self, name: &str) -> Option<Arc<dyn TableProvider>> {\n+        if name.eq_ignore_ascii_case(\"tables\") {\n+            // create a mem table with the names of tables\n+            let mut builder = InformationSchemaTablesBuilder::new();\n+\n+            for catalog_name in self.catalog_list.catalog_names() {\n+                let catalog = self.catalog_list.catalog(&catalog_name).unwrap();\n+\n+                for schema_name in catalog.schema_names() {\n+                    let schema = catalog.schema(&schema_name).unwrap();\n+                    for table_name in schema.table_names() {\n+                        builder.add_base_table(&catalog_name, &schema_name, table_name)\n+                    }\n+                }\n+\n+                // Add a final list for the information schema tables themselves\n+                builder.add_system_table(&catalog_name, INFORMATION_SCHEMA, TABLES);\n+            }\n+\n+            let mem_table = builder.build();\n+\n+            Some(Arc::new(mem_table))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+/// Builds the `information_schema.TABLE` table row by row\n+\n+struct InformationSchemaTablesBuilder {\n+    catalog_names: StringBuilder,\n+    schema_names: StringBuilder,\n+    table_names: StringBuilder,\n+    table_types: StringBuilder,\n+}\n+\n+impl InformationSchemaTablesBuilder {\n+    fn new() -> Self {\n+        Self {\n+            catalog_names: StringBuilder::new(10),\n+            schema_names: StringBuilder::new(10),\n+            table_names: StringBuilder::new(10),\n+            table_types: StringBuilder::new(10),\n+        }\n+    }\n+\n+    fn add_base_table(\n+        &mut self,\n+        catalog_name: impl AsRef<str>,\n+        schema_name: impl AsRef<str>,\n+        table_name: impl AsRef<str>,\n+    ) {\n+        // Note: append_value is actually infallable.\n+        self.catalog_names\n+            .append_value(catalog_name.as_ref())\n+            .unwrap();\n+        self.schema_names\n+            .append_value(schema_name.as_ref())\n+            .unwrap();\n+        self.table_names.append_value(table_name.as_ref()).unwrap();\n+        self.table_types.append_value(\"BASE TABLE\").unwrap();\n\nReview comment:\n       I am not sure to be honest. Postgres has `BASE TABLE` and `VIEW` that I saw.\r\n   \r\n   I will spend some time figuring out how what the values of these should be. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-26T21:44:46.588+0000",
                    "updated": "2021-03-26T21:44:46.588+0000",
                    "started": "2021-03-26T21:44:46.587+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572906",
                    "issueId": "13368004"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368004/worklog/572912",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #9818:\nURL: https://github.com/apache/arrow/pull/9818#discussion_r602604745\n\n\n\n##########\nFile path: rust/datafusion/src/catalog/information_schema.rs\n##########\n@@ -0,0 +1,225 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Implements the SQL [Information Schema] for DataFusion.\n+//!\n+//! Information Schema](https://en.wikipedia.org/wiki/Information_schema)\n+\n+use std::{any, sync::Arc};\n+\n+use arrow::{\n+    array::StringBuilder,\n+    datatypes::{DataType, Field, Schema},\n+    record_batch::RecordBatch,\n+};\n+\n+use crate::datasource::{MemTable, TableProvider};\n+\n+use super::{\n+    catalog::{CatalogList, CatalogProvider},\n+    schema::SchemaProvider,\n+};\n+\n+const INFORMATION_SCHEMA: &str = \"information_schema\";\n+const TABLES: &str = \"tables\";\n+\n+/// Wraps a [`CatalogList`] so that it also provides an\n+/// `information_schema` schema view as well in each catalog.\n+pub(crate) struct CatalogListWithInformationSchema {\n+    inner: Arc<dyn CatalogList>,\n+}\n+\n+impl CatalogListWithInformationSchema {\n+    pub(crate) fn new(inner: Arc<dyn CatalogList>) -> Self {\n+        Self { inner }\n+    }\n+\n+    /// Returns a catalog provider that also contains the information schema table provider.\n+    pub(crate) fn catalog(&self, name: &str) -> Option<Arc<dyn CatalogProvider>> {\n+        self.inner.catalog(name).map(|catalog| {\n+            let catalog_list = self.inner.clone();\n+\n+            Arc::new(CatalogWithInformationSchema {\n+                catalog_list,\n+                inner: catalog,\n+            }) as Arc<dyn CatalogProvider>\n+        })\n+    }\n+}\n+\n+/// Wraps another [`CatalogProvider`] and adds a \"information_schema\"\n+/// schema that can introspect on tables in the catalog_list\n+struct CatalogWithInformationSchema {\n+    catalog_list: Arc<dyn CatalogList>,\n+    /// wrapped provider\n+    inner: Arc<dyn CatalogProvider>,\n+}\n+\n+impl CatalogProvider for CatalogWithInformationSchema {\n+    fn as_any(&self) -> &dyn any::Any {\n+        self\n+    }\n+\n+    fn schema_names(&self) -> Vec<String> {\n+        self.inner\n+            .schema_names()\n+            .into_iter()\n+            .chain(std::iter::once(INFORMATION_SCHEMA.to_string()))\n+            .collect::<Vec<String>>()\n+    }\n+\n+    fn schema(&self, name: &str) -> Option<Arc<dyn SchemaProvider>> {\n+        if name.eq_ignore_ascii_case(INFORMATION_SCHEMA) {\n+            Some(Arc::new(InformationSchemaProvider {\n+                catalog_list: self.catalog_list.clone(),\n+            }))\n+        } else {\n+            self.inner.schema(name)\n+        }\n+    }\n+}\n+\n+/// Implements the `information_schema` virtual schema and tables\n+///\n+/// The underlying tables in the `information_schema` are created on\n+/// demand. This means that if more tables are added to the underlying\n+/// providers, they will appear the next time the `information_schema`\n+/// table is queried.\n+struct InformationSchemaProvider {\n+    catalog_list: Arc<dyn CatalogList>,\n+}\n+\n+impl SchemaProvider for InformationSchemaProvider {\n+    fn as_any(&self) -> &(dyn any::Any + 'static) {\n+        self\n+    }\n+\n+    fn table_names(&self) -> Vec<String> {\n+        vec![TABLES.to_string()]\n+    }\n+\n+    fn table(&self, name: &str) -> Option<Arc<dyn TableProvider>> {\n+        if name.eq_ignore_ascii_case(\"tables\") {\n+            // create a mem table with the names of tables\n+            let mut builder = InformationSchemaTablesBuilder::new();\n+\n+            for catalog_name in self.catalog_list.catalog_names() {\n+                let catalog = self.catalog_list.catalog(&catalog_name).unwrap();\n+\n+                for schema_name in catalog.schema_names() {\n+                    let schema = catalog.schema(&schema_name).unwrap();\n+                    for table_name in schema.table_names() {\n+                        builder.add_base_table(&catalog_name, &schema_name, table_name)\n+                    }\n+                }\n+\n+                // Add a final list for the information schema tables themselves\n+                builder.add_system_table(&catalog_name, INFORMATION_SCHEMA, TABLES);\n+            }\n+\n+            let mem_table = builder.build();\n+\n+            Some(Arc::new(mem_table))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+/// Builds the `information_schema.TABLE` table row by row\n+\n+struct InformationSchemaTablesBuilder {\n+    catalog_names: StringBuilder,\n+    schema_names: StringBuilder,\n+    table_names: StringBuilder,\n+    table_types: StringBuilder,\n+}\n+\n+impl InformationSchemaTablesBuilder {\n+    fn new() -> Self {\n+        Self {\n+            catalog_names: StringBuilder::new(10),\n+            schema_names: StringBuilder::new(10),\n+            table_names: StringBuilder::new(10),\n+            table_types: StringBuilder::new(10),\n+        }\n+    }\n+\n+    fn add_base_table(\n+        &mut self,\n+        catalog_name: impl AsRef<str>,\n+        schema_name: impl AsRef<str>,\n+        table_name: impl AsRef<str>,\n+    ) {\n+        // Note: append_value is actually infallable.\n+        self.catalog_names\n+            .append_value(catalog_name.as_ref())\n+            .unwrap();\n+        self.schema_names\n+            .append_value(schema_name.as_ref())\n+            .unwrap();\n+        self.table_names.append_value(table_name.as_ref()).unwrap();\n+        self.table_types.append_value(\"BASE TABLE\").unwrap();\n\nReview comment:\n       Ok. Maybe we can find the standards document somewhere as I assume there is a fixed list.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-26T21:55:44.823+0000",
                    "updated": "2021-03-26T21:55:44.823+0000",
                    "started": "2021-03-26T21:55:44.822+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572912",
                    "issueId": "13368004"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368004/worklog/572922",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "returnString commented on pull request #9818:\nURL: https://github.com/apache/arrow/pull/9818#issuecomment-808556642\n\n\n   This looks awesome (and so hot on the heels of the basic catalog impl!) - will take a look tomorrow :D\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-26T22:16:42.375+0000",
                    "updated": "2021-03-26T22:16:42.375+0000",
                    "started": "2021-03-26T22:16:42.375+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572922",
                    "issueId": "13368004"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368004/worklog/572923",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9818:\nURL: https://github.com/apache/arrow/pull/9818#discussion_r602612055\n\n\n\n##########\nFile path: rust/datafusion/src/catalog/catalog.rs\n##########\n@@ -23,6 +23,67 @@ use std::any::Any;\n use std::collections::HashMap;\n use std::sync::{Arc, RwLock};\n \n+/// Represent a list of named catalogs\n+pub trait CatalogList: Sync + Send {\n+    /// Returns the catalog list as [`Any`](std::any::Any)\n+    /// so that it can be downcast to a specific implementation.\n+    fn as_any(&self) -> &dyn Any;\n+\n+    /// Adds a new catalog to this catalog list\n+    /// If a catalog of the same name existed before, it is replaced in the list and returned.\n+    fn register_catalog(\n+        &self,\n+        name: String,\n+        catalog: Arc<dyn CatalogProvider>,\n+    ) -> Option<Arc<dyn CatalogProvider>>;\n+\n+    /// Retrieves the list of available catalog names\n+    fn catalog_names(&self) -> Vec<String>;\n\nReview comment:\n       Better as `&[&str]` to avoid clone?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-26T22:18:56.072+0000",
                    "updated": "2021-03-26T22:18:56.072+0000",
                    "started": "2021-03-26T22:18:56.071+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572923",
                    "issueId": "13368004"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368004/worklog/572925",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9818:\nURL: https://github.com/apache/arrow/pull/9818#discussion_r602612385\n\n\n\n##########\nFile path: rust/datafusion/src/catalog/catalog.rs\n##########\n@@ -23,6 +23,67 @@ use std::any::Any;\n use std::collections::HashMap;\n use std::sync::{Arc, RwLock};\n \n+/// Represent a list of named catalogs\n+pub trait CatalogList: Sync + Send {\n+    /// Returns the catalog list as [`Any`](std::any::Any)\n+    /// so that it can be downcast to a specific implementation.\n+    fn as_any(&self) -> &dyn Any;\n+\n+    /// Adds a new catalog to this catalog list\n+    /// If a catalog of the same name existed before, it is replaced in the list and returned.\n+    fn register_catalog(\n+        &self,\n+        name: String,\n+        catalog: Arc<dyn CatalogProvider>,\n+    ) -> Option<Arc<dyn CatalogProvider>>;\n+\n+    /// Retrieves the list of available catalog names\n+    fn catalog_names(&self) -> Vec<String>;\n\nReview comment:\n       ah I see in the implementation it is not really possible\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-26T22:20:08.447+0000",
                    "updated": "2021-03-26T22:20:08.447+0000",
                    "started": "2021-03-26T22:20:08.446+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572925",
                    "issueId": "13368004"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368004/worklog/572926",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #9818:\nURL: https://github.com/apache/arrow/pull/9818#discussion_r602613523\n\n\n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -651,13 +662,19 @@ impl ExecutionConfig {\n         self.create_default_catalog_and_schema = create;\n         self\n     }\n+\n+    /// Enables the `information_schema` virtual tables\n+    pub fn with_information_schema(mut self) -> Self {\n+        self.information_schema = true;\n\nReview comment:\n       Can it be disabled as well - or don't we expect that? \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-26T22:23:46.317+0000",
                    "updated": "2021-03-26T22:23:46.317+0000",
                    "started": "2021-03-26T22:23:46.316+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572926",
                    "issueId": "13368004"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368004/worklog/572933",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #9818:\nURL: https://github.com/apache/arrow/pull/9818#discussion_r602616110\n\n\n\n##########\nFile path: rust/datafusion/src/catalog/information_schema.rs\n##########\n@@ -0,0 +1,225 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Implements the SQL [Information Schema] for DataFusion.\n+//!\n+//! Information Schema](https://en.wikipedia.org/wiki/Information_schema)\n+\n+use std::{any, sync::Arc};\n+\n+use arrow::{\n+    array::StringBuilder,\n+    datatypes::{DataType, Field, Schema},\n+    record_batch::RecordBatch,\n+};\n+\n+use crate::datasource::{MemTable, TableProvider};\n+\n+use super::{\n+    catalog::{CatalogList, CatalogProvider},\n+    schema::SchemaProvider,\n+};\n+\n+const INFORMATION_SCHEMA: &str = \"information_schema\";\n+const TABLES: &str = \"tables\";\n+\n+/// Wraps a [`CatalogList`] so that it also provides an\n+/// `information_schema` schema view as well in each catalog.\n+pub(crate) struct CatalogListWithInformationSchema {\n+    inner: Arc<dyn CatalogList>,\n+}\n+\n+impl CatalogListWithInformationSchema {\n+    pub(crate) fn new(inner: Arc<dyn CatalogList>) -> Self {\n+        Self { inner }\n+    }\n+\n+    /// Returns a catalog provider that also contains the information schema table provider.\n+    pub(crate) fn catalog(&self, name: &str) -> Option<Arc<dyn CatalogProvider>> {\n+        self.inner.catalog(name).map(|catalog| {\n+            let catalog_list = self.inner.clone();\n+\n+            Arc::new(CatalogWithInformationSchema {\n+                catalog_list,\n+                inner: catalog,\n+            }) as Arc<dyn CatalogProvider>\n+        })\n+    }\n+}\n+\n+/// Wraps another [`CatalogProvider`] and adds a \"information_schema\"\n+/// schema that can introspect on tables in the catalog_list\n+struct CatalogWithInformationSchema {\n+    catalog_list: Arc<dyn CatalogList>,\n+    /// wrapped provider\n+    inner: Arc<dyn CatalogProvider>,\n+}\n+\n+impl CatalogProvider for CatalogWithInformationSchema {\n+    fn as_any(&self) -> &dyn any::Any {\n+        self\n+    }\n+\n+    fn schema_names(&self) -> Vec<String> {\n+        self.inner\n+            .schema_names()\n+            .into_iter()\n+            .chain(std::iter::once(INFORMATION_SCHEMA.to_string()))\n+            .collect::<Vec<String>>()\n+    }\n+\n+    fn schema(&self, name: &str) -> Option<Arc<dyn SchemaProvider>> {\n+        if name.eq_ignore_ascii_case(INFORMATION_SCHEMA) {\n+            Some(Arc::new(InformationSchemaProvider {\n+                catalog_list: self.catalog_list.clone(),\n+            }))\n+        } else {\n+            self.inner.schema(name)\n+        }\n+    }\n+}\n+\n+/// Implements the `information_schema` virtual schema and tables\n+///\n+/// The underlying tables in the `information_schema` are created on\n+/// demand. This means that if more tables are added to the underlying\n+/// providers, they will appear the next time the `information_schema`\n+/// table is queried.\n+struct InformationSchemaProvider {\n+    catalog_list: Arc<dyn CatalogList>,\n+}\n+\n+impl SchemaProvider for InformationSchemaProvider {\n+    fn as_any(&self) -> &(dyn any::Any + 'static) {\n+        self\n+    }\n+\n+    fn table_names(&self) -> Vec<String> {\n+        vec![TABLES.to_string()]\n+    }\n+\n+    fn table(&self, name: &str) -> Option<Arc<dyn TableProvider>> {\n+        if name.eq_ignore_ascii_case(\"tables\") {\n+            // create a mem table with the names of tables\n+            let mut builder = InformationSchemaTablesBuilder::new();\n+\n+            for catalog_name in self.catalog_list.catalog_names() {\n+                let catalog = self.catalog_list.catalog(&catalog_name).unwrap();\n+\n+                for schema_name in catalog.schema_names() {\n+                    let schema = catalog.schema(&schema_name).unwrap();\n+                    for table_name in schema.table_names() {\n+                        builder.add_base_table(&catalog_name, &schema_name, table_name)\n+                    }\n+                }\n+\n+                // Add a final list for the information schema tables themselves\n+                builder.add_system_table(&catalog_name, INFORMATION_SCHEMA, TABLES);\n+            }\n+\n+            let mem_table = builder.build();\n+\n+            Some(Arc::new(mem_table))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+/// Builds the `information_schema.TABLE` table row by row\n+\n+struct InformationSchemaTablesBuilder {\n+    catalog_names: StringBuilder,\n+    schema_names: StringBuilder,\n+    table_names: StringBuilder,\n+    table_types: StringBuilder,\n+}\n+\n+impl InformationSchemaTablesBuilder {\n+    fn new() -> Self {\n+        Self {\n+            catalog_names: StringBuilder::new(10),\n+            schema_names: StringBuilder::new(10),\n+            table_names: StringBuilder::new(10),\n+            table_types: StringBuilder::new(10),\n+        }\n+    }\n+\n+    fn add_base_table(\n+        &mut self,\n+        catalog_name: impl AsRef<str>,\n+        schema_name: impl AsRef<str>,\n+        table_name: impl AsRef<str>,\n+    ) {\n+        // Note: append_value is actually infallable.\n+        self.catalog_names\n+            .append_value(catalog_name.as_ref())\n+            .unwrap();\n+        self.schema_names\n+            .append_value(schema_name.as_ref())\n+            .unwrap();\n+        self.table_names.append_value(table_name.as_ref()).unwrap();\n+        self.table_types.append_value(\"BASE TABLE\").unwrap();\n\nReview comment:\n       @alamb Here is a link to the Postgres doc: https://www.postgresql.org/docs/current/infoschema-tables.html\r\n   \r\n   Type of the table:\u00a0\r\n   - `BASE TABLE`\u00a0for a persistent base table (the normal table type)\r\n   - `VIEW`\u00a0for a view\r\n   - `FOREIGN`\u00a0for a foreign table \r\n   - `LOCAL TEMPORARY`\u00a0for a temporary table\r\n   \r\n   Are all our 'tables' kind of `LOCAL TEMPORARY`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-26T22:32:35.350+0000",
                    "updated": "2021-03-26T22:32:35.350+0000",
                    "started": "2021-03-26T22:32:35.350+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572933",
                    "issueId": "13368004"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368004/worklog/573018",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "returnString commented on a change in pull request #9818:\nURL: https://github.com/apache/arrow/pull/9818#discussion_r602704095\n\n\n\n##########\nFile path: rust/datafusion/src/catalog/catalog.rs\n##########\n@@ -23,6 +23,67 @@ use std::any::Any;\n use std::collections::HashMap;\n use std::sync::{Arc, RwLock};\n \n+/// Represent a list of named catalogs\n+pub trait CatalogList: Sync + Send {\n+    /// Returns the catalog list as [`Any`](std::any::Any)\n+    /// so that it can be downcast to a specific implementation.\n+    fn as_any(&self) -> &dyn Any;\n+\n+    /// Adds a new catalog to this catalog list\n+    /// If a catalog of the same name existed before, it is replaced in the list and returned.\n+    fn register_catalog(\n+        &self,\n+        name: String,\n+        catalog: Arc<dyn CatalogProvider>,\n+    ) -> Option<Arc<dyn CatalogProvider>>;\n+\n+    /// Retrieves the list of available catalog names\n+    fn catalog_names(&self) -> Vec<String>;\n+\n+    /// Retrieves a specific catalog by name, provided it exists.\n+    fn catalog(&self, name: &str) -> Option<Arc<dyn CatalogProvider>>;\n+}\n+\n+/// Simple in-memory list of catalogs\n+pub struct MemoryCatalogList {\n+    /// Collection of catalogs containing schemas and ultimately TableProviders\n+    pub catalogs: RwLock<HashMap<String, Arc<dyn CatalogProvider>>>,\n+}\n+\n+impl MemoryCatalogList {\n+    /// Instantiates a new MemoryDatabase with an empty collection of catalogs\n\nReview comment:\n       Minor: MemoryCatalogList instead of MemoryDatabase here?\n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -678,20 +695,31 @@ impl ExecutionContextState {\n             .resolve(&self.config.default_catalog, &self.config.default_schema)\n     }\n \n+    fn catalog_for_ref<'a>(\n+        &'a self,\n+        resolved_ref: &ResolvedTableReference<'a>,\n+    ) -> Result<Arc<dyn CatalogProvider>> {\n+        if self.config.information_schema {\n+            CatalogListWithInformationSchema::new(self.catalog_list.clone())\n\nReview comment:\n       Not a massive issue as this isn't the critical path, but would it be worth doing this wrapping on catalog registration so we avoid query-side allocs here? I wonder if it's possible to remove the `CatalogListWithInformationSchema` entirely and just do this inside `register_catalog` instead. So if the info schema is enabled, wrap the catalog up in a `CatalogWithInformationSchema` before registering it with the list, or otherwise, register the plain catalog.\n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -651,13 +662,19 @@ impl ExecutionConfig {\n         self.create_default_catalog_and_schema = create;\n         self\n     }\n+\n+    /// Enables the `information_schema` virtual tables\n+    pub fn with_information_schema(mut self) -> Self {\n+        self.information_schema = true;\n\nReview comment:\n       Would it be worth enabling by default, even, and adding an option to _disable_ it here? I can't think of any downsides to enabling it, and for the subset of the info schema that we support, it's in line with the standard (as far as I'm aware without spending stupid money of a copy of the standard \ud83d\ude05)\n\n##########\nFile path: rust/datafusion/src/catalog/information_schema.rs\n##########\n@@ -0,0 +1,225 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Implements the SQL [Information Schema] for DataFusion.\n+//!\n+//! Information Schema](https://en.wikipedia.org/wiki/Information_schema)\n+\n+use std::{any, sync::Arc};\n+\n+use arrow::{\n+    array::StringBuilder,\n+    datatypes::{DataType, Field, Schema},\n+    record_batch::RecordBatch,\n+};\n+\n+use crate::datasource::{MemTable, TableProvider};\n+\n+use super::{\n+    catalog::{CatalogList, CatalogProvider},\n+    schema::SchemaProvider,\n+};\n+\n+const INFORMATION_SCHEMA: &str = \"information_schema\";\n+const TABLES: &str = \"tables\";\n+\n+/// Wraps a [`CatalogList`] so that it also provides an\n+/// `information_schema` schema view as well in each catalog.\n+pub(crate) struct CatalogListWithInformationSchema {\n+    inner: Arc<dyn CatalogList>,\n+}\n+\n+impl CatalogListWithInformationSchema {\n+    pub(crate) fn new(inner: Arc<dyn CatalogList>) -> Self {\n+        Self { inner }\n+    }\n+\n+    /// Returns a catalog provider that also contains the information schema table provider.\n+    pub(crate) fn catalog(&self, name: &str) -> Option<Arc<dyn CatalogProvider>> {\n+        self.inner.catalog(name).map(|catalog| {\n+            let catalog_list = self.inner.clone();\n+\n+            Arc::new(CatalogWithInformationSchema {\n+                catalog_list,\n+                inner: catalog,\n+            }) as Arc<dyn CatalogProvider>\n+        })\n+    }\n+}\n+\n+/// Wraps another [`CatalogProvider`] and adds a \"information_schema\"\n+/// schema that can introspect on tables in the catalog_list\n+struct CatalogWithInformationSchema {\n+    catalog_list: Arc<dyn CatalogList>,\n+    /// wrapped provider\n+    inner: Arc<dyn CatalogProvider>,\n+}\n+\n+impl CatalogProvider for CatalogWithInformationSchema {\n+    fn as_any(&self) -> &dyn any::Any {\n+        self\n+    }\n+\n+    fn schema_names(&self) -> Vec<String> {\n+        self.inner\n+            .schema_names()\n+            .into_iter()\n+            .chain(std::iter::once(INFORMATION_SCHEMA.to_string()))\n+            .collect::<Vec<String>>()\n+    }\n+\n+    fn schema(&self, name: &str) -> Option<Arc<dyn SchemaProvider>> {\n+        if name.eq_ignore_ascii_case(INFORMATION_SCHEMA) {\n+            Some(Arc::new(InformationSchemaProvider {\n+                catalog_list: self.catalog_list.clone(),\n+            }))\n+        } else {\n+            self.inner.schema(name)\n+        }\n+    }\n+}\n+\n+/// Implements the `information_schema` virtual schema and tables\n+///\n+/// The underlying tables in the `information_schema` are created on\n+/// demand. This means that if more tables are added to the underlying\n+/// providers, they will appear the next time the `information_schema`\n+/// table is queried.\n+struct InformationSchemaProvider {\n+    catalog_list: Arc<dyn CatalogList>,\n+}\n+\n+impl SchemaProvider for InformationSchemaProvider {\n+    fn as_any(&self) -> &(dyn any::Any + 'static) {\n+        self\n+    }\n+\n+    fn table_names(&self) -> Vec<String> {\n+        vec![TABLES.to_string()]\n+    }\n+\n+    fn table(&self, name: &str) -> Option<Arc<dyn TableProvider>> {\n+        if name.eq_ignore_ascii_case(\"tables\") {\n+            // create a mem table with the names of tables\n+            let mut builder = InformationSchemaTablesBuilder::new();\n+\n+            for catalog_name in self.catalog_list.catalog_names() {\n+                let catalog = self.catalog_list.catalog(&catalog_name).unwrap();\n+\n+                for schema_name in catalog.schema_names() {\n+                    let schema = catalog.schema(&schema_name).unwrap();\n+                    for table_name in schema.table_names() {\n+                        builder.add_base_table(&catalog_name, &schema_name, table_name)\n+                    }\n+                }\n+\n+                // Add a final list for the information schema tables themselves\n+                builder.add_system_table(&catalog_name, INFORMATION_SCHEMA, TABLES);\n+            }\n+\n+            let mem_table = builder.build();\n+\n+            Some(Arc::new(mem_table))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+/// Builds the `information_schema.TABLE` table row by row\n+\n+struct InformationSchemaTablesBuilder {\n+    catalog_names: StringBuilder,\n+    schema_names: StringBuilder,\n+    table_names: StringBuilder,\n+    table_types: StringBuilder,\n+}\n+\n+impl InformationSchemaTablesBuilder {\n+    fn new() -> Self {\n+        Self {\n+            catalog_names: StringBuilder::new(10),\n+            schema_names: StringBuilder::new(10),\n+            table_names: StringBuilder::new(10),\n+            table_types: StringBuilder::new(10),\n+        }\n+    }\n+\n+    fn add_base_table(\n+        &mut self,\n+        catalog_name: impl AsRef<str>,\n+        schema_name: impl AsRef<str>,\n+        table_name: impl AsRef<str>,\n+    ) {\n+        // Note: append_value is actually infallable.\n+        self.catalog_names\n+            .append_value(catalog_name.as_ref())\n+            .unwrap();\n+        self.schema_names\n+            .append_value(schema_name.as_ref())\n+            .unwrap();\n+        self.table_names.append_value(table_name.as_ref()).unwrap();\n+        self.table_types.append_value(\"BASE TABLE\").unwrap();\n\nReview comment:\n       I could definitely see an argument that the csv/parquet TableProviders are temporary, but arbitrary TableProviders might use totally different semantics (e.g. in my case, fetching data from a persistent store that could be classed as a base table). If we want to support different options here, perhaps we need a new TableProvider method to indicate that?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-27T11:13:54.207+0000",
                    "updated": "2021-03-27T11:13:54.207+0000",
                    "started": "2021-03-27T11:13:54.207+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "573018",
                    "issueId": "13368004"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368004/worklog/573230",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9818:\nURL: https://github.com/apache/arrow/pull/9818#discussion_r602903856\n\n\n\n##########\nFile path: rust/datafusion/src/catalog/information_schema.rs\n##########\n@@ -0,0 +1,225 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Implements the SQL [Information Schema] for DataFusion.\n+//!\n+//! Information Schema](https://en.wikipedia.org/wiki/Information_schema)\n+\n+use std::{any, sync::Arc};\n+\n+use arrow::{\n+    array::StringBuilder,\n+    datatypes::{DataType, Field, Schema},\n+    record_batch::RecordBatch,\n+};\n+\n+use crate::datasource::{MemTable, TableProvider};\n+\n+use super::{\n+    catalog::{CatalogList, CatalogProvider},\n+    schema::SchemaProvider,\n+};\n+\n+const INFORMATION_SCHEMA: &str = \"information_schema\";\n+const TABLES: &str = \"tables\";\n+\n+/// Wraps a [`CatalogList`] so that it also provides an\n+/// `information_schema` schema view as well in each catalog.\n+pub(crate) struct CatalogListWithInformationSchema {\n+    inner: Arc<dyn CatalogList>,\n+}\n+\n+impl CatalogListWithInformationSchema {\n+    pub(crate) fn new(inner: Arc<dyn CatalogList>) -> Self {\n+        Self { inner }\n+    }\n+\n+    /// Returns a catalog provider that also contains the information schema table provider.\n+    pub(crate) fn catalog(&self, name: &str) -> Option<Arc<dyn CatalogProvider>> {\n+        self.inner.catalog(name).map(|catalog| {\n+            let catalog_list = self.inner.clone();\n+\n+            Arc::new(CatalogWithInformationSchema {\n+                catalog_list,\n+                inner: catalog,\n+            }) as Arc<dyn CatalogProvider>\n+        })\n+    }\n+}\n+\n+/// Wraps another [`CatalogProvider`] and adds a \"information_schema\"\n+/// schema that can introspect on tables in the catalog_list\n+struct CatalogWithInformationSchema {\n+    catalog_list: Arc<dyn CatalogList>,\n+    /// wrapped provider\n+    inner: Arc<dyn CatalogProvider>,\n+}\n+\n+impl CatalogProvider for CatalogWithInformationSchema {\n+    fn as_any(&self) -> &dyn any::Any {\n+        self\n+    }\n+\n+    fn schema_names(&self) -> Vec<String> {\n+        self.inner\n+            .schema_names()\n+            .into_iter()\n+            .chain(std::iter::once(INFORMATION_SCHEMA.to_string()))\n+            .collect::<Vec<String>>()\n+    }\n+\n+    fn schema(&self, name: &str) -> Option<Arc<dyn SchemaProvider>> {\n+        if name.eq_ignore_ascii_case(INFORMATION_SCHEMA) {\n+            Some(Arc::new(InformationSchemaProvider {\n+                catalog_list: self.catalog_list.clone(),\n+            }))\n+        } else {\n+            self.inner.schema(name)\n+        }\n+    }\n+}\n+\n+/// Implements the `information_schema` virtual schema and tables\n+///\n+/// The underlying tables in the `information_schema` are created on\n+/// demand. This means that if more tables are added to the underlying\n+/// providers, they will appear the next time the `information_schema`\n+/// table is queried.\n+struct InformationSchemaProvider {\n+    catalog_list: Arc<dyn CatalogList>,\n+}\n+\n+impl SchemaProvider for InformationSchemaProvider {\n+    fn as_any(&self) -> &(dyn any::Any + 'static) {\n+        self\n+    }\n+\n+    fn table_names(&self) -> Vec<String> {\n+        vec![TABLES.to_string()]\n+    }\n+\n+    fn table(&self, name: &str) -> Option<Arc<dyn TableProvider>> {\n+        if name.eq_ignore_ascii_case(\"tables\") {\n+            // create a mem table with the names of tables\n+            let mut builder = InformationSchemaTablesBuilder::new();\n+\n+            for catalog_name in self.catalog_list.catalog_names() {\n+                let catalog = self.catalog_list.catalog(&catalog_name).unwrap();\n+\n+                for schema_name in catalog.schema_names() {\n+                    let schema = catalog.schema(&schema_name).unwrap();\n+                    for table_name in schema.table_names() {\n+                        builder.add_base_table(&catalog_name, &schema_name, table_name)\n+                    }\n+                }\n+\n+                // Add a final list for the information schema tables themselves\n+                builder.add_system_table(&catalog_name, INFORMATION_SCHEMA, TABLES);\n+            }\n+\n+            let mem_table = builder.build();\n+\n+            Some(Arc::new(mem_table))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+/// Builds the `information_schema.TABLE` table row by row\n+\n+struct InformationSchemaTablesBuilder {\n+    catalog_names: StringBuilder,\n+    schema_names: StringBuilder,\n+    table_names: StringBuilder,\n+    table_types: StringBuilder,\n+}\n+\n+impl InformationSchemaTablesBuilder {\n+    fn new() -> Self {\n+        Self {\n+            catalog_names: StringBuilder::new(10),\n+            schema_names: StringBuilder::new(10),\n+            table_names: StringBuilder::new(10),\n+            table_types: StringBuilder::new(10),\n+        }\n+    }\n+\n+    fn add_base_table(\n+        &mut self,\n+        catalog_name: impl AsRef<str>,\n+        schema_name: impl AsRef<str>,\n+        table_name: impl AsRef<str>,\n+    ) {\n+        // Note: append_value is actually infallable.\n+        self.catalog_names\n+            .append_value(catalog_name.as_ref())\n+            .unwrap();\n+        self.schema_names\n+            .append_value(schema_name.as_ref())\n+            .unwrap();\n+        self.table_names.append_value(table_name.as_ref()).unwrap();\n+        self.table_types.append_value(\"BASE TABLE\").unwrap();\n\nReview comment:\n       I think `LOCAL TEMPORARY` is referring to what happens when you do `CREATE TEMPORARY TABLE...` in postgres -- so I agree with @returnString  that LOCAL TEMPORARY is probably not what we would want.\r\n   \r\n   I will change the information table to say `VIEW` for the information_schema tables, consistent with Postgres (and SQL server)\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-28T17:02:53.339+0000",
                    "updated": "2021-03-28T17:02:53.339+0000",
                    "started": "2021-03-28T17:02:53.338+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "573230",
                    "issueId": "13368004"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368004/worklog/573232",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9818:\nURL: https://github.com/apache/arrow/pull/9818#discussion_r602904112\n\n\n\n##########\nFile path: rust/datafusion/src/catalog/catalog.rs\n##########\n@@ -23,6 +23,67 @@ use std::any::Any;\n use std::collections::HashMap;\n use std::sync::{Arc, RwLock};\n \n+/// Represent a list of named catalogs\n+pub trait CatalogList: Sync + Send {\n+    /// Returns the catalog list as [`Any`](std::any::Any)\n+    /// so that it can be downcast to a specific implementation.\n+    fn as_any(&self) -> &dyn Any;\n+\n+    /// Adds a new catalog to this catalog list\n+    /// If a catalog of the same name existed before, it is replaced in the list and returned.\n+    fn register_catalog(\n+        &self,\n+        name: String,\n+        catalog: Arc<dyn CatalogProvider>,\n+    ) -> Option<Arc<dyn CatalogProvider>>;\n+\n+    /// Retrieves the list of available catalog names\n+    fn catalog_names(&self) -> Vec<String>;\n\nReview comment:\n       The way I could think of to avoid the copy is don't make a `CatalogList` trait and instead pass around `MemoryCatalogList` directly. This would allow a function like `fn catalog_names(&self) -> impl IntoIterator<Item=&str>` \r\n   \r\n   However, given `catalog_names` are only called when creating the information_schema views, I am not sure this optimization is warranted at this time\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-28T17:05:42.530+0000",
                    "updated": "2021-03-28T17:05:42.530+0000",
                    "started": "2021-03-28T17:05:42.530+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "573232",
                    "issueId": "13368004"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368004/worklog/573233",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9818:\nURL: https://github.com/apache/arrow/pull/9818#discussion_r602904515\n\n\n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -651,13 +662,19 @@ impl ExecutionConfig {\n         self.create_default_catalog_and_schema = create;\n         self\n     }\n+\n+    /// Enables the `information_schema` virtual tables\n+    pub fn with_information_schema(mut self) -> Self {\n+        self.information_schema = true;\n\nReview comment:\n       > Can it be disabled as well - or don't we expect that?\r\n   \r\n   I didn't expect people to want to be able to change the setting at runtime on the same `Context` -- either they would want the information schema or not. However, for consistency with the other settings I think it would be good to allow the flag to be passed in and I will do so\r\n   \r\n   > Would it be worth enabling by default, even, and adding an option to disable it here? \r\n   \r\n   There might be some small runtime overhead for always enabling it. I don't have any strong preference on one way or the other. I am happy to change the default. Does anyone else have any thoughts?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-28T17:08:45.837+0000",
                    "updated": "2021-03-28T17:08:45.837+0000",
                    "started": "2021-03-28T17:08:45.836+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "573233",
                    "issueId": "13368004"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368004/worklog/573234",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9818:\nURL: https://github.com/apache/arrow/pull/9818#issuecomment-808926077\n\n\n   > I could definitely see an argument that the csv/parquet TableProviders are temporary, but arbitrary TableProviders might use totally different semantics (e.g. in my case, fetching data from a persistent store that could be classed as a base table). If we want to support different options here, perhaps we need a new TableProvider method to indicate that?\r\n   \r\n   Yes, I agree -- I see no reason to support different values for `TABLE_TYPE` in the initial PR -- and if someone wants that functionality they can perhaps propose a PR to add a methods to the `TableProvider`\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-28T17:09:58.814+0000",
                    "updated": "2021-03-28T17:09:58.814+0000",
                    "started": "2021-03-28T17:09:58.813+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "573234",
                    "issueId": "13368004"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368004/worklog/573235",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9818:\nURL: https://github.com/apache/arrow/pull/9818#discussion_r602904783\n\n\n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -678,20 +695,31 @@ impl ExecutionContextState {\n             .resolve(&self.config.default_catalog, &self.config.default_schema)\n     }\n \n+    fn catalog_for_ref<'a>(\n+        &'a self,\n+        resolved_ref: &ResolvedTableReference<'a>,\n+    ) -> Result<Arc<dyn CatalogProvider>> {\n+        if self.config.information_schema {\n+            CatalogListWithInformationSchema::new(self.catalog_list.clone())\n\nReview comment:\n       Since the `Config` can't be changed after the `ExecutionContext` is created I think this would be a good idea. I will give it a try.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-28T17:11:03.937+0000",
                    "updated": "2021-03-28T17:11:03.937+0000",
                    "started": "2021-03-28T17:11:03.937+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "573235",
                    "issueId": "13368004"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 20400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@14e0ef38[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@228db0e5[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@271822d4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@68ddb44a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@59662f2c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@79c63e4b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1f2ead25[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1a54356e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@72236647[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3adf3a2e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@50f2efd5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6bb64fe0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 20400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Mar 30 11:52:17 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-03-30T11:52:16.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12106/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-03-26T20:58:01.000+0000",
        "updated": "2021-03-30T11:52:20.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 20400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust][DataFusion] Support `SELECT * from information_schema.tables`",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368004/comment/17311455",
                    "id": "17311455",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 9818\n[https://github.com/apache/arrow/pull/9818]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-03-30T11:52:17.032+0000",
                    "updated": "2021-03-30T11:52:17.032+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0p9i0:",
        "customfield_12314139": null
    }
}