{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13304688",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304688",
    "key": "ARROW-8788",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12588185",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12588185",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13257422",
                    "key": "ARROW-6603",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257422",
                    "fields": {
                        "summary": "[C#] ArrayBuilder API to support writing nulls",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12591891",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12591891",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "outwardIssue": {
                    "id": "13224356",
                    "key": "ARROW-5035",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13224356",
                    "fields": {
                        "summary": "[C#] ArrowBuffer.Builder<bool> is broken",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334712",
                "id": "12334712",
                "name": "C#"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mr_smidge",
            "name": "mr_smidge",
            "key": "mr_smidge",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=mr_smidge&avatarId=42832",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mr_smidge&avatarId=42832",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mr_smidge&avatarId=42832",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mr_smidge&avatarId=42832"
            },
            "displayName": "Adam Szmigin",
            "active": true,
            "timeZone": "Europe/London"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mr_smidge",
            "name": "mr_smidge",
            "key": "mr_smidge",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=mr_smidge&avatarId=42832",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mr_smidge&avatarId=42832",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mr_smidge&avatarId=42832",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mr_smidge&avatarId=42832"
            },
            "displayName": "Adam Szmigin",
            "active": true,
            "timeZone": "Europe/London"
        },
        "aggregateprogress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8788/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 27,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304688/worklog/433990",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #7158:\nURL: https://github.com/apache/arrow/pull/7158#issuecomment-629577781\n\n\n   Thanks for getting this out @mr-smidge. Sorry I didn\u2019t get time to review it this week, but it is on my list for early next week to take a look.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-16T02:51:36.562+0000",
                    "updated": "2020-05-16T02:51:36.562+0000",
                    "started": "2020-05-16T02:51:36.561+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "433990",
                    "issueId": "13304688"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304688/worklog/434865",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on pull request #7158:\nURL: https://github.com/apache/arrow/pull/7158#issuecomment-630709800\n\n\n   @wesm, on a [previous thread](https://github.com/apache/arrow/pull/7032#issuecomment-623587071) you mentioned that you did not think a CCLA was required to contribute from a corporate perspective.  As this is my first PR for Arrow, please may I check:\r\n   \r\n   * Is an ICLA required by the Arrow project to be signed by me before my contributions can be accepted?\r\n   * Is a CCLA required by the Arrow project to be signed by my employer for contributions essentially done on company time?  My prior assumption was that FOSS projects might choose to require this for indemnification from possible corporate legal action etc. but if you don't need that then no problem.\r\n   \r\n   Thanks.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-19T09:41:10.816+0000",
                    "updated": "2020-05-19T09:41:10.816+0000",
                    "started": "2020-05-19T09:41:10.816+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "434865",
                    "issueId": "13304688"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304688/worklog/435571",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on a change in pull request #7158:\nURL: https://github.com/apache/arrow/pull/7158#discussion_r428142187\n\n\n\n##########\nFile path: csharp/test/Apache.Arrow.Tests/BooleanArrayTests.cs\n##########\n@@ -18,6 +18,8 @@\n \n namespace Apache.Arrow.Tests\n {\n+    using System.Linq;\n\nReview comment:\n       This should go at the top of the file with the rest of the usings.\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.Builder.cs\n##########\n@@ -22,51 +22,111 @@ namespace Apache.Arrow\n {\n     public partial struct ArrowBuffer\n     {\n+        /// <summary>\n+        /// The <see cref=\"Builder{T}\"/> class is able to append value-type items, with fluent-style methods, to build\n+        /// up an <see cref=\"ArrowBuffer\"/> of contiguous items.\n+        /// </summary>\n+        /// <remarks>\n+        /// Note that <see cref=\"bool\"/> is not supported as a generic type argument for this class.  Please use\n+        /// <see cref=\"BitPackedBuilder\"/> instead.\n+        /// </remarks>\n+        /// <typeparam name=\"T\">Value-type of item to build into a buffer.</typeparam>\n         public class Builder<T>\n             where T : struct\n         {\n             private const int DefaultCapacity = 8;\n \n             private readonly int _size;\n \n+            /// <summary>\n+            /// Gets the number of items of current capacity.\n+            /// </summary>\n             public int Capacity => Memory.Length / _size;\n+\n+            /// <summary>\n+            /// Gets the number of items currently appended.\n+            /// </summary>\n             public int Length { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the raw byte memory underpinning the builder.\n+            /// </summary>\n             public Memory<byte> Memory { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the span of memory underpinning the builder.\n+            /// </summary>\n             public Span<T> Span\n             {\n                 [MethodImpl(MethodImplOptions.AggressiveInlining)]\n                 get => Memory.Span.CastTo<T>();\n             }\n \n+            /// <summary>\n+            /// Creates an instance of the <see cref=\"Builder{T}\"/> class.\n+            /// </summary>\n+            /// <param name=\"capacity\">Number of items of initial capacity to reserve.</param>\n             public Builder(int capacity = DefaultCapacity)\n             {\n+                // Using `bool` as the template argument, if used in an unrestricted fashion, would result in a buffer\n+                // with inappropriate contents being produced.  Because C# does not support template specialisation,\n+                // and because generic type constraints do not support negation, we will throw a runtime error to\n+                // indicate that such a template type is not supported.\n+                if (typeof(T) == typeof(bool))\n+                {\n+                    throw new ArgumentException(\n+                        $\"An instance of {nameof(Builder<T>)} cannot be instantiated, as `bool` is not an \" +\n+                        $\"appropriate generic type to use with this class - please use {nameof(BitPackedBuilder)} \" +\n+                        $\"instead\");\n+                }\n\nReview comment:\n       I think this approach is fine. We do similar things in places in the runtime, for example:\r\n   \r\n   https://github.com/dotnet/runtime/blob/49f59a3cb935523c07187ce26bb03c7fa7fd66bd/src/libraries/System.Private.CoreLib/src/System/Numerics/Vector.cs#L349\r\n   \r\n   The only thing I would change here is to throw a `NotSupportedException` instead of an `ArgumentException`. `ArgumentException`s are for when an argument passed to the method is invalid. But here it is the generic type.\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.Builder.cs\n##########\n@@ -22,51 +22,111 @@ namespace Apache.Arrow\n {\n     public partial struct ArrowBuffer\n     {\n+        /// <summary>\n+        /// The <see cref=\"Builder{T}\"/> class is able to append value-type items, with fluent-style methods, to build\n+        /// up an <see cref=\"ArrowBuffer\"/> of contiguous items.\n+        /// </summary>\n+        /// <remarks>\n+        /// Note that <see cref=\"bool\"/> is not supported as a generic type argument for this class.  Please use\n+        /// <see cref=\"BitPackedBuilder\"/> instead.\n+        /// </remarks>\n+        /// <typeparam name=\"T\">Value-type of item to build into a buffer.</typeparam>\n         public class Builder<T>\n             where T : struct\n         {\n             private const int DefaultCapacity = 8;\n \n             private readonly int _size;\n \n+            /// <summary>\n+            /// Gets the number of items of current capacity.\n\nReview comment:\n       I think I'd borrow from StringBuilder's comments here:\r\n   \r\n   https://docs.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.capacity?view=netcore-3.1\r\n   \r\n   > Gets the maximum number of items that can be contained in the memory allocated by the current instance.\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.Builder.cs\n##########\n@@ -80,27 +140,59 @@ public Builder<T> AppendRange(IEnumerable<T> values)\n                 return this;\n             }\n \n-            public Builder<T> Reserve(int capacity)\n+            /// <summary>\n+            /// Reserve a given number of items' additional capacity.\n+            /// </summary>\n+            /// <param name=\"additionalCapacity\">Number of items of required additional capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public Builder<T> Reserve(int additionalCapacity)\n             {\n-                EnsureCapacity(capacity);\n+                if (additionalCapacity < 0)\n+                {\n+                    throw new ArgumentOutOfRangeException(nameof(additionalCapacity));\n+                }\n+\n+                EnsureAdditionalCapacity(additionalCapacity);\n                 return this;\n             }\n \n+            /// <summary>\n+            /// Resize the buffer to a given size.\n+            /// </summary>\n+            /// <remarks>\n+            /// Note that if the required capacity is smaller than the current length of the populated buffer so far,\n+            /// the buffer will be truncated and items at the end of the buffer will be lost.\n+            /// </remarks>\n+            /// <remarks>\n+            /// Note also that a negative capacity will result in the buffer being resized to zero.\n+            /// </remarks>\n+            /// <param name=\"capacity\">Number of items of required capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n             public Builder<T> Resize(int capacity)\n             {\n+                capacity = capacity < 0 ? 0 : capacity;\n                 EnsureCapacity(capacity);\n                 Length = Math.Max(0, capacity);\n \n                 return this;\n             }\n \n+            /// <summary>\n+            /// Clear all contents appended so far.\n+            /// </summary>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n             public Builder<T> Clear()\n             {\n                 Span.Fill(default);\n                 Length = 0;\n                 return this;\n             }\n \n+            /// <summary>\n+            /// Build an Arrow buffer from the appended contents so far.\n+            /// </summary>\n+            /// <param name=\"allocator\">Optional memory allocator.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n\nReview comment:\n       This `returns` is incorrect.\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.BitPackedBuilder.cs\n##########\n@@ -0,0 +1,268 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+namespace Apache.Arrow\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using Apache.Arrow.Memory;\n+\n+    public partial struct ArrowBuffer\n+    {\n+        /// <summary>\n+        /// The <see cref=\"ArrowBuffer.BitPackedBuilder\"/> class is a complement to <see cref=\"ArrowBuffer.Builder{T}\"/>\n+        /// and is designed for boolean fields, which are efficiently bit-packed into byte-aligned memory.\n+        /// </summary>\n+        public class BitPackedBuilder\n\nReview comment:\n       What do you think about naming this `BitmapBuilder` or `BitVectorBuilder`? I haven't seen `BitPacked` in a lot of documentation.\r\n   \r\n   The docs use `bitmap`:\r\n   \r\n   https://arrow.apache.org/docs/format/Columnar.html#validity-bitmaps\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.BitPackedBuilder.cs\n##########\n@@ -0,0 +1,268 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+namespace Apache.Arrow\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using Apache.Arrow.Memory;\n+\n+    public partial struct ArrowBuffer\n+    {\n+        /// <summary>\n+        /// The <see cref=\"ArrowBuffer.BitPackedBuilder\"/> class is a complement to <see cref=\"ArrowBuffer.Builder{T}\"/>\n+        /// and is designed for boolean fields, which are efficiently bit-packed into byte-aligned memory.\n+        /// </summary>\n+        public class BitPackedBuilder\n+        {\n+            private const int DefaultBitCapacity = 8;\n+\n+            /// <summary>\n+            /// Gets the number of bits of current capacity.\n+            /// </summary>\n+            public int BitCapacity { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the number of bits currently appended.\n+            /// </summary>\n+            public int BitCount { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the raw byte memory underpinning the builder.\n+            /// </summary>\n+            public Memory<byte> Memory { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the span of (bit-packed byte) memory underpinning the builder.\n+            /// </summary>\n+            public Span<byte> Span => Memory.Span;\n+\n+            /// <summary>\n+            /// Creates an instance of the <see cref=\"BitPackedBuilder\"/> class.\n+            /// </summary>\n+            /// <param name=\"bitCapacity\">Number of bits of initial capacity to reserve.</param>\n+            public BitPackedBuilder(int bitCapacity = DefaultBitCapacity)\n+            {\n+                Memory = new byte[BitUtility.ByteCount(bitCapacity)];\n+                BitCapacity = bitCapacity;\n+                BitCount = 0;\n+            }\n+\n+            /// <summary>\n+            /// Append a single bit.\n+            /// </summary>\n+            /// <param name=\"bit\">Bit to append.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Append(bool bit)\n+            {\n+                if (BitCount % 8 == 0)\n+                {\n+                    // Append a new byte to the buffer when needed.\n+                    EnsureAdditionalCapacity(1);\n+                    Span[BitCount / 8] = 0;\n+                }\n+\n+                BitUtility.SetBit(Span, BitCount, bit);\n+                BitCount++;\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Append multiple bits.\n+            /// </summary>\n+            /// <param name=\"bits\">Bits to append.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder AppendRange(IEnumerable<bool> bits)\n+            {\n+                if (bits != null)\n+                {\n+                    foreach (var v in bits)\n+                    {\n+                        Append(v);\n+                    }\n+                }\n+\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Count the number of set bits (i.e. set to 1).\n+            /// </summary>\n+            /// <returns>Returns the number of set bits.</returns>\n+            public int CountSetBits() => BitUtility.CountBits(this.Span);\n+\n+            /// <summary>\n+            /// Count the number of unset bits (i.e. set to 0).\n+            /// </summary>\n+            /// <returns>Returns the number of unset bits.</returns>\n+            public int CountUnsetBits() => this.BitCount - this.CountSetBits();\n+\n+            /// <summary>\n+            /// Toggle the bit at a particular index.\n+            /// </summary>\n+            /// <param name=\"index\">Index of bit to toggle.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Toggle(int index)\n+            {\n+                CheckIndex(index);\n+                BitUtility.ToggleBit(Span, index);\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Set the bit at a particular index to 1.\n+            /// </summary>\n+            /// <param name=\"index\">Index of bit to set.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Set(int index)\n+            {\n+                CheckIndex(index);\n+                BitUtility.SetBit(Span, index);\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Set the bit at a particular index to a given value.\n+            /// </summary>\n+            /// <param name=\"index\">Index of bit to set/unset.</param>\n+            /// <param name=\"value\">Value of bit.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Set(int index, bool value)\n+            {\n+                CheckIndex(index);\n+                BitUtility.SetBit(Span, index, value);\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Swap the bits at two given indices.\n+            /// </summary>\n+            /// <param name=\"i\">First index.</param>\n+            /// <param name=\"j\">Second index.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Swap(int i, int j)\n+            {\n+                CheckIndex(i);\n+                CheckIndex(j);\n+                var bi = BitUtility.GetBit(Span, i);\n+                var bj = BitUtility.GetBit(Span, j);\n+                BitUtility.SetBit(Span, i, bj);\n+                BitUtility.SetBit(Span, j, bi);\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Reserve a given number of bits' additional capacity.\n+            /// </summary>\n+            /// <param name=\"bitAdditionalCapacity\">Number of bits of required additional capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Reserve(int bitAdditionalCapacity)\n\nReview comment:\n       As above, I would rather use \"capacity\" in this class, and not \"BitCapacity\". But if we aren't going to change that, I think this should be `additionalBitCapacity`, it seems to read better IMO.\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.BitPackedBuilder.cs\n##########\n@@ -0,0 +1,268 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+namespace Apache.Arrow\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using Apache.Arrow.Memory;\n+\n+    public partial struct ArrowBuffer\n+    {\n+        /// <summary>\n+        /// The <see cref=\"ArrowBuffer.BitPackedBuilder\"/> class is a complement to <see cref=\"ArrowBuffer.Builder{T}\"/>\n+        /// and is designed for boolean fields, which are efficiently bit-packed into byte-aligned memory.\n+        /// </summary>\n+        public class BitPackedBuilder\n+        {\n+            private const int DefaultBitCapacity = 8;\n+\n+            /// <summary>\n+            /// Gets the number of bits of current capacity.\n+            /// </summary>\n+            public int BitCapacity { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the number of bits currently appended.\n+            /// </summary>\n+            public int BitCount { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the raw byte memory underpinning the builder.\n+            /// </summary>\n+            public Memory<byte> Memory { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the span of (bit-packed byte) memory underpinning the builder.\n+            /// </summary>\n+            public Span<byte> Span => Memory.Span;\n+\n+            /// <summary>\n+            /// Creates an instance of the <see cref=\"BitPackedBuilder\"/> class.\n+            /// </summary>\n+            /// <param name=\"bitCapacity\">Number of bits of initial capacity to reserve.</param>\n+            public BitPackedBuilder(int bitCapacity = DefaultBitCapacity)\n+            {\n+                Memory = new byte[BitUtility.ByteCount(bitCapacity)];\n+                BitCapacity = bitCapacity;\n+                BitCount = 0;\n+            }\n+\n+            /// <summary>\n+            /// Append a single bit.\n+            /// </summary>\n+            /// <param name=\"bit\">Bit to append.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Append(bool bit)\n+            {\n+                if (BitCount % 8 == 0)\n+                {\n+                    // Append a new byte to the buffer when needed.\n+                    EnsureAdditionalCapacity(1);\n+                    Span[BitCount / 8] = 0;\n\nReview comment:\n       Is `Span[BitCount / 8] = 0;` necessary? If `EnsureAdditionalCapacity` added more space, the new memory will be zero'd out by the runtime (since it is a new array and we only copy the existing memory to it).\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.Builder.cs\n##########\n@@ -80,27 +140,59 @@ public Builder<T> AppendRange(IEnumerable<T> values)\n                 return this;\n             }\n \n-            public Builder<T> Reserve(int capacity)\n+            /// <summary>\n+            /// Reserve a given number of items' additional capacity.\n+            /// </summary>\n+            /// <param name=\"additionalCapacity\">Number of items of required additional capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public Builder<T> Reserve(int additionalCapacity)\n             {\n-                EnsureCapacity(capacity);\n+                if (additionalCapacity < 0)\n+                {\n+                    throw new ArgumentOutOfRangeException(nameof(additionalCapacity));\n+                }\n+\n+                EnsureAdditionalCapacity(additionalCapacity);\n                 return this;\n             }\n \n+            /// <summary>\n+            /// Resize the buffer to a given size.\n+            /// </summary>\n+            /// <remarks>\n+            /// Note that if the required capacity is smaller than the current length of the populated buffer so far,\n+            /// the buffer will be truncated and items at the end of the buffer will be lost.\n+            /// </remarks>\n+            /// <remarks>\n+            /// Note also that a negative capacity will result in the buffer being resized to zero.\n+            /// </remarks>\n+            /// <param name=\"capacity\">Number of items of required capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n             public Builder<T> Resize(int capacity)\n             {\n+                capacity = capacity < 0 ? 0 : capacity;\n                 EnsureCapacity(capacity);\n                 Length = Math.Max(0, capacity);\n\nReview comment:\n       `capacity` can never be negative anymore after your change on line 173. So this can just be `Length = capacity;`\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.Builder.cs\n##########\n@@ -80,27 +140,59 @@ public Builder<T> AppendRange(IEnumerable<T> values)\n                 return this;\n             }\n \n-            public Builder<T> Reserve(int capacity)\n+            /// <summary>\n+            /// Reserve a given number of items' additional capacity.\n+            /// </summary>\n+            /// <param name=\"additionalCapacity\">Number of items of required additional capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public Builder<T> Reserve(int additionalCapacity)\n             {\n-                EnsureCapacity(capacity);\n+                if (additionalCapacity < 0)\n+                {\n+                    throw new ArgumentOutOfRangeException(nameof(additionalCapacity));\n+                }\n+\n+                EnsureAdditionalCapacity(additionalCapacity);\n                 return this;\n             }\n \n+            /// <summary>\n+            /// Resize the buffer to a given size.\n+            /// </summary>\n+            /// <remarks>\n+            /// Note that if the required capacity is smaller than the current length of the populated buffer so far,\n+            /// the buffer will be truncated and items at the end of the buffer will be lost.\n+            /// </remarks>\n+            /// <remarks>\n+            /// Note also that a negative capacity will result in the buffer being resized to zero.\n+            /// </remarks>\n+            /// <param name=\"capacity\">Number of items of required capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n             public Builder<T> Resize(int capacity)\n             {\n+                capacity = capacity < 0 ? 0 : capacity;\n                 EnsureCapacity(capacity);\n\nReview comment:\n       Nice catch and fix.\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.BitPackedBuilder.cs\n##########\n@@ -0,0 +1,268 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+namespace Apache.Arrow\n+{\n+    using System;\n\nReview comment:\n       The usings should go outside the namespace (repeated elsewhere).\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.Builder.cs\n##########\n@@ -80,27 +140,59 @@ public Builder<T> AppendRange(IEnumerable<T> values)\n                 return this;\n             }\n \n-            public Builder<T> Reserve(int capacity)\n+            /// <summary>\n+            /// Reserve a given number of items' additional capacity.\n+            /// </summary>\n+            /// <param name=\"additionalCapacity\">Number of items of required additional capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public Builder<T> Reserve(int additionalCapacity)\n             {\n-                EnsureCapacity(capacity);\n+                if (additionalCapacity < 0)\n+                {\n+                    throw new ArgumentOutOfRangeException(nameof(additionalCapacity));\n+                }\n+\n+                EnsureAdditionalCapacity(additionalCapacity);\n                 return this;\n             }\n \n+            /// <summary>\n+            /// Resize the buffer to a given size.\n+            /// </summary>\n+            /// <remarks>\n+            /// Note that if the required capacity is smaller than the current length of the populated buffer so far,\n+            /// the buffer will be truncated and items at the end of the buffer will be lost.\n+            /// </remarks>\n+            /// <remarks>\n+            /// Note also that a negative capacity will result in the buffer being resized to zero.\n+            /// </remarks>\n+            /// <param name=\"capacity\">Number of items of required capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n             public Builder<T> Resize(int capacity)\n             {\n+                capacity = capacity < 0 ? 0 : capacity;\n\nReview comment:\n       Yes, I would keep this behavior. Especially since someone took the time to write that unit test.\r\n   \r\n   > I don't know why that is the requirement\r\n   \r\n   What else would you do? throw an exception? I assume the thinking was \"why throw when we can provide an acceptable non-throwing behavior?\".\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.BitPackedBuilder.cs\n##########\n@@ -0,0 +1,268 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+namespace Apache.Arrow\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using Apache.Arrow.Memory;\n+\n+    public partial struct ArrowBuffer\n+    {\n+        /// <summary>\n+        /// The <see cref=\"ArrowBuffer.BitPackedBuilder\"/> class is a complement to <see cref=\"ArrowBuffer.Builder{T}\"/>\n+        /// and is designed for boolean fields, which are efficiently bit-packed into byte-aligned memory.\n+        /// </summary>\n+        public class BitPackedBuilder\n+        {\n+            private const int DefaultBitCapacity = 8;\n\nReview comment:\n       I think I would multiply this by `4` (or possibly `8`). Allocating a single byte array seems like it is too small. You aren't saving much memory-wise since .NET arrays are usually aligned in memory. Which means 1 byte or 4 bytes are going to allocate the same amount of memory underneath.\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.BitPackedBuilder.cs\n##########\n@@ -0,0 +1,268 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+namespace Apache.Arrow\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using Apache.Arrow.Memory;\n+\n+    public partial struct ArrowBuffer\n+    {\n+        /// <summary>\n+        /// The <see cref=\"ArrowBuffer.BitPackedBuilder\"/> class is a complement to <see cref=\"ArrowBuffer.Builder{T}\"/>\n+        /// and is designed for boolean fields, which are efficiently bit-packed into byte-aligned memory.\n+        /// </summary>\n+        public class BitPackedBuilder\n+        {\n+            private const int DefaultBitCapacity = 8;\n+\n+            /// <summary>\n+            /// Gets the number of bits of current capacity.\n+            /// </summary>\n+            public int BitCapacity { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the number of bits currently appended.\n+            /// </summary>\n+            public int BitCount { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the raw byte memory underpinning the builder.\n+            /// </summary>\n+            public Memory<byte> Memory { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the span of (bit-packed byte) memory underpinning the builder.\n+            /// </summary>\n+            public Span<byte> Span => Memory.Span;\n+\n+            /// <summary>\n+            /// Creates an instance of the <see cref=\"BitPackedBuilder\"/> class.\n+            /// </summary>\n+            /// <param name=\"bitCapacity\">Number of bits of initial capacity to reserve.</param>\n+            public BitPackedBuilder(int bitCapacity = DefaultBitCapacity)\n+            {\n+                Memory = new byte[BitUtility.ByteCount(bitCapacity)];\n+                BitCapacity = bitCapacity;\n+                BitCount = 0;\n+            }\n+\n+            /// <summary>\n+            /// Append a single bit.\n+            /// </summary>\n+            /// <param name=\"bit\">Bit to append.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Append(bool bit)\n\nReview comment:\n       ```suggestion\r\n               public BitPackedBuilder Append(bool value)\r\n   ```\r\n   \r\n   It is more typical to call an argument like this `value`.\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.BitPackedBuilder.cs\n##########\n@@ -0,0 +1,268 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+namespace Apache.Arrow\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using Apache.Arrow.Memory;\n+\n+    public partial struct ArrowBuffer\n+    {\n+        /// <summary>\n+        /// The <see cref=\"ArrowBuffer.BitPackedBuilder\"/> class is a complement to <see cref=\"ArrowBuffer.Builder{T}\"/>\n+        /// and is designed for boolean fields, which are efficiently bit-packed into byte-aligned memory.\n+        /// </summary>\n+        public class BitPackedBuilder\n+        {\n+            private const int DefaultBitCapacity = 8;\n+\n+            /// <summary>\n+            /// Gets the number of bits of current capacity.\n+            /// </summary>\n+            public int BitCapacity { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the number of bits currently appended.\n+            /// </summary>\n+            public int BitCount { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the raw byte memory underpinning the builder.\n+            /// </summary>\n+            public Memory<byte> Memory { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the span of (bit-packed byte) memory underpinning the builder.\n+            /// </summary>\n+            public Span<byte> Span => Memory.Span;\n+\n+            /// <summary>\n+            /// Creates an instance of the <see cref=\"BitPackedBuilder\"/> class.\n+            /// </summary>\n+            /// <param name=\"bitCapacity\">Number of bits of initial capacity to reserve.</param>\n+            public BitPackedBuilder(int bitCapacity = DefaultBitCapacity)\n+            {\n+                Memory = new byte[BitUtility.ByteCount(bitCapacity)];\n+                BitCapacity = bitCapacity;\n+                BitCount = 0;\n+            }\n+\n+            /// <summary>\n+            /// Append a single bit.\n+            /// </summary>\n+            /// <param name=\"bit\">Bit to append.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Append(bool bit)\n+            {\n+                if (BitCount % 8 == 0)\n+                {\n+                    // Append a new byte to the buffer when needed.\n+                    EnsureAdditionalCapacity(1);\n+                    Span[BitCount / 8] = 0;\n+                }\n+\n+                BitUtility.SetBit(Span, BitCount, bit);\n+                BitCount++;\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Append multiple bits.\n+            /// </summary>\n+            /// <param name=\"bits\">Bits to append.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder AppendRange(IEnumerable<bool> bits)\n+            {\n+                if (bits != null)\n+                {\n+                    foreach (var v in bits)\n+                    {\n+                        Append(v);\n+                    }\n+                }\n+\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Count the number of set bits (i.e. set to 1).\n+            /// </summary>\n+            /// <returns>Returns the number of set bits.</returns>\n+            public int CountSetBits() => BitUtility.CountBits(this.Span);\n+\n+            /// <summary>\n+            /// Count the number of unset bits (i.e. set to 0).\n+            /// </summary>\n+            /// <returns>Returns the number of unset bits.</returns>\n+            public int CountUnsetBits() => this.BitCount - this.CountSetBits();\n+\n+            /// <summary>\n+            /// Toggle the bit at a particular index.\n+            /// </summary>\n+            /// <param name=\"index\">Index of bit to toggle.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Toggle(int index)\n+            {\n+                CheckIndex(index);\n+                BitUtility.ToggleBit(Span, index);\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Set the bit at a particular index to 1.\n+            /// </summary>\n+            /// <param name=\"index\">Index of bit to set.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Set(int index)\n+            {\n+                CheckIndex(index);\n+                BitUtility.SetBit(Span, index);\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Set the bit at a particular index to a given value.\n+            /// </summary>\n+            /// <param name=\"index\">Index of bit to set/unset.</param>\n+            /// <param name=\"value\">Value of bit.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Set(int index, bool value)\n+            {\n+                CheckIndex(index);\n+                BitUtility.SetBit(Span, index, value);\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Swap the bits at two given indices.\n+            /// </summary>\n+            /// <param name=\"i\">First index.</param>\n+            /// <param name=\"j\">Second index.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Swap(int i, int j)\n+            {\n+                CheckIndex(i);\n+                CheckIndex(j);\n+                var bi = BitUtility.GetBit(Span, i);\n+                var bj = BitUtility.GetBit(Span, j);\n+                BitUtility.SetBit(Span, i, bj);\n+                BitUtility.SetBit(Span, j, bi);\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Reserve a given number of bits' additional capacity.\n+            /// </summary>\n+            /// <param name=\"bitAdditionalCapacity\">Number of bits of required additional capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Reserve(int bitAdditionalCapacity)\n+            {\n+                if (bitAdditionalCapacity < 0)\n+                {\n+                    throw new ArgumentOutOfRangeException(nameof(bitAdditionalCapacity));\n+                }\n+\n+                EnsureAdditionalCapacity(bitAdditionalCapacity);\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Resize the buffer to a given size.\n+            /// </summary>\n+            /// <remarks>\n+            /// Note that if the required capacity is smaller than the current length of the populated buffer so far,\n+            /// the buffer will be truncated and items at the end of the buffer will be lost.\n+            /// </remarks>\n+            /// <remarks>\n+            /// Note also that a negative capacity will result in the buffer being resized to zero.\n+            /// </remarks>\n+            /// <param name=\"bitCapacity\">Number of bits of required capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Resize(int bitCapacity)\n+            {\n+                bitCapacity = bitCapacity < 0 ? 0 : bitCapacity;\n+                EnsureCapacity(bitCapacity);\n+                BitCount = Math.Max(0, bitCapacity);\n+\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Clear all contents appended so far.\n+            /// </summary>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Clear()\n+            {\n+                Span.Fill(default);\n+                BitCount = 0;\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Build an Arrow buffer from the appended contents so far.\n+            /// </summary>\n+            /// <param name=\"allocator\">Optional memory allocator.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n\nReview comment:\n       The `returns` needs to be updated.\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/BinaryArray.cs\n##########\n@@ -56,16 +56,16 @@ public abstract class BuilderBase<TArray, TBuilder> : IArrowArrayBuilder<byte, T\n             protected TBuilder Instance => this as TBuilder;\n             protected ArrowBuffer.Builder<int> ValueOffsets { get; }\n             protected ArrowBuffer.Builder<byte> ValueBuffer { get; }\n-            protected BooleanArray.Builder ValidityBuffer { get; }\n+            protected ArrowBuffer.BitPackedBuilder ValidityBuffer { get; }\n             protected int Offset { get; set; }\n-            protected int NullCount { get; private set; }\n+            protected int NullCount => this.ValidityBuffer.CountUnsetBits();\n\nReview comment:\n       Since `NullCount` is a property, it should have a fast runtime access performance (similar to accessing a field). However, this change is calling a method which is going to grow in time as the buffer grows. I think we should keep this a property with a backing field, so callers don't get into a performance trap where they are calling `NullCount` too often thinking it has fast access (since it is a property).\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.BitPackedBuilder.cs\n##########\n@@ -0,0 +1,268 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+namespace Apache.Arrow\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using Apache.Arrow.Memory;\n+\n+    public partial struct ArrowBuffer\n+    {\n+        /// <summary>\n+        /// The <see cref=\"ArrowBuffer.BitPackedBuilder\"/> class is a complement to <see cref=\"ArrowBuffer.Builder{T}\"/>\n+        /// and is designed for boolean fields, which are efficiently bit-packed into byte-aligned memory.\n+        /// </summary>\n+        public class BitPackedBuilder\n+        {\n+            private const int DefaultBitCapacity = 8;\n+\n+            /// <summary>\n+            /// Gets the number of bits of current capacity.\n+            /// </summary>\n+            public int BitCapacity { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the number of bits currently appended.\n+            /// </summary>\n+            public int BitCount { get; private set; }\n\nReview comment:\n       My first reaction would be to keep these named `Capacity` and `Length` to align with the other builders. Even with the other builders, the `Length` of the builder isn't the same as the underlying Memory length, since you could be building a 4-byte integer buffer. In all cases \"Length\" is the number of elements added to the builder. Here \"elements\" just happens to be \"bits\".\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-20T18:01:52.086+0000",
                    "updated": "2020-05-20T18:01:52.086+0000",
                    "started": "2020-05-20T18:01:52.086+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "435571",
                    "issueId": "13304688"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304688/worklog/435680",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7158:\nURL: https://github.com/apache/arrow/pull/7158#issuecomment-631708574\n\n\n   It is not necessary to submit a CLA to contribute. CLAs are only required when you become an Arrow _committer_\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-20T20:29:27.213+0000",
                    "updated": "2020-05-20T20:29:27.213+0000",
                    "started": "2020-05-20T20:29:27.212+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "435680",
                    "issueId": "13304688"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304688/worklog/435902",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on a change in pull request #7158:\nURL: https://github.com/apache/arrow/pull/7158#discussion_r428554746\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.BitPackedBuilder.cs\n##########\n@@ -0,0 +1,268 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+namespace Apache.Arrow\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using Apache.Arrow.Memory;\n+\n+    public partial struct ArrowBuffer\n+    {\n+        /// <summary>\n+        /// The <see cref=\"ArrowBuffer.BitPackedBuilder\"/> class is a complement to <see cref=\"ArrowBuffer.Builder{T}\"/>\n+        /// and is designed for boolean fields, which are efficiently bit-packed into byte-aligned memory.\n+        /// </summary>\n+        public class BitPackedBuilder\n+        {\n+            private const int DefaultBitCapacity = 8;\n+\n+            /// <summary>\n+            /// Gets the number of bits of current capacity.\n+            /// </summary>\n+            public int BitCapacity { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the number of bits currently appended.\n+            /// </summary>\n+            public int BitCount { get; private set; }\n\nReview comment:\n       I've renamed these to `Capacity` and `Length`, with the docstring making it clear that they refer to bits.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-21T09:50:06.634+0000",
                    "updated": "2020-05-21T09:50:06.634+0000",
                    "started": "2020-05-21T09:50:06.634+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "435902",
                    "issueId": "13304688"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304688/worklog/435903",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on a change in pull request #7158:\nURL: https://github.com/apache/arrow/pull/7158#discussion_r428554942\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.Builder.cs\n##########\n@@ -22,51 +22,111 @@ namespace Apache.Arrow\n {\n     public partial struct ArrowBuffer\n     {\n+        /// <summary>\n+        /// The <see cref=\"Builder{T}\"/> class is able to append value-type items, with fluent-style methods, to build\n+        /// up an <see cref=\"ArrowBuffer\"/> of contiguous items.\n+        /// </summary>\n+        /// <remarks>\n+        /// Note that <see cref=\"bool\"/> is not supported as a generic type argument for this class.  Please use\n+        /// <see cref=\"BitPackedBuilder\"/> instead.\n+        /// </remarks>\n+        /// <typeparam name=\"T\">Value-type of item to build into a buffer.</typeparam>\n         public class Builder<T>\n             where T : struct\n         {\n             private const int DefaultCapacity = 8;\n \n             private readonly int _size;\n \n+            /// <summary>\n+            /// Gets the number of items of current capacity.\n+            /// </summary>\n             public int Capacity => Memory.Length / _size;\n+\n+            /// <summary>\n+            /// Gets the number of items currently appended.\n+            /// </summary>\n             public int Length { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the raw byte memory underpinning the builder.\n+            /// </summary>\n             public Memory<byte> Memory { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the span of memory underpinning the builder.\n+            /// </summary>\n             public Span<T> Span\n             {\n                 [MethodImpl(MethodImplOptions.AggressiveInlining)]\n                 get => Memory.Span.CastTo<T>();\n             }\n \n+            /// <summary>\n+            /// Creates an instance of the <see cref=\"Builder{T}\"/> class.\n+            /// </summary>\n+            /// <param name=\"capacity\">Number of items of initial capacity to reserve.</param>\n             public Builder(int capacity = DefaultCapacity)\n             {\n+                // Using `bool` as the template argument, if used in an unrestricted fashion, would result in a buffer\n+                // with inappropriate contents being produced.  Because C# does not support template specialisation,\n+                // and because generic type constraints do not support negation, we will throw a runtime error to\n+                // indicate that such a template type is not supported.\n+                if (typeof(T) == typeof(bool))\n+                {\n+                    throw new ArgumentException(\n+                        $\"An instance of {nameof(Builder<T>)} cannot be instantiated, as `bool` is not an \" +\n+                        $\"appropriate generic type to use with this class - please use {nameof(BitPackedBuilder)} \" +\n+                        $\"instead\");\n+                }\n\nReview comment:\n       `NotSupportedException` is a better choice - I've made the change.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-21T09:50:34.896+0000",
                    "updated": "2020-05-21T09:50:34.896+0000",
                    "started": "2020-05-21T09:50:34.896+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "435903",
                    "issueId": "13304688"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304688/worklog/435904",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on a change in pull request #7158:\nURL: https://github.com/apache/arrow/pull/7158#discussion_r428555530\n\n\n\n##########\nFile path: csharp/test/Apache.Arrow.Tests/BooleanArrayTests.cs\n##########\n@@ -18,6 +18,8 @@\n \n namespace Apache.Arrow.Tests\n {\n+    using System.Linq;\n\nReview comment:\n       Done (default behaviour by my IDE, whoops).\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.Builder.cs\n##########\n@@ -80,27 +140,59 @@ public Builder<T> AppendRange(IEnumerable<T> values)\n                 return this;\n             }\n \n-            public Builder<T> Reserve(int capacity)\n+            /// <summary>\n+            /// Reserve a given number of items' additional capacity.\n+            /// </summary>\n+            /// <param name=\"additionalCapacity\">Number of items of required additional capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public Builder<T> Reserve(int additionalCapacity)\n             {\n-                EnsureCapacity(capacity);\n+                if (additionalCapacity < 0)\n+                {\n+                    throw new ArgumentOutOfRangeException(nameof(additionalCapacity));\n+                }\n+\n+                EnsureAdditionalCapacity(additionalCapacity);\n                 return this;\n             }\n \n+            /// <summary>\n+            /// Resize the buffer to a given size.\n+            /// </summary>\n+            /// <remarks>\n+            /// Note that if the required capacity is smaller than the current length of the populated buffer so far,\n+            /// the buffer will be truncated and items at the end of the buffer will be lost.\n+            /// </remarks>\n+            /// <remarks>\n+            /// Note also that a negative capacity will result in the buffer being resized to zero.\n+            /// </remarks>\n+            /// <param name=\"capacity\">Number of items of required capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n             public Builder<T> Resize(int capacity)\n             {\n+                capacity = capacity < 0 ? 0 : capacity;\n                 EnsureCapacity(capacity);\n                 Length = Math.Max(0, capacity);\n \n                 return this;\n             }\n \n+            /// <summary>\n+            /// Clear all contents appended so far.\n+            /// </summary>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n             public Builder<T> Clear()\n             {\n                 Span.Fill(default);\n                 Length = 0;\n                 return this;\n             }\n \n+            /// <summary>\n+            /// Build an Arrow buffer from the appended contents so far.\n+            /// </summary>\n+            /// <param name=\"allocator\">Optional memory allocator.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n\nReview comment:\n       Fixed.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-21T09:52:04.201+0000",
                    "updated": "2020-05-21T09:52:04.201+0000",
                    "started": "2020-05-21T09:52:04.200+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "435904",
                    "issueId": "13304688"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304688/worklog/435905",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on a change in pull request #7158:\nURL: https://github.com/apache/arrow/pull/7158#discussion_r428555751\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.Builder.cs\n##########\n@@ -22,51 +22,111 @@ namespace Apache.Arrow\n {\n     public partial struct ArrowBuffer\n     {\n+        /// <summary>\n+        /// The <see cref=\"Builder{T}\"/> class is able to append value-type items, with fluent-style methods, to build\n+        /// up an <see cref=\"ArrowBuffer\"/> of contiguous items.\n+        /// </summary>\n+        /// <remarks>\n+        /// Note that <see cref=\"bool\"/> is not supported as a generic type argument for this class.  Please use\n+        /// <see cref=\"BitPackedBuilder\"/> instead.\n+        /// </remarks>\n+        /// <typeparam name=\"T\">Value-type of item to build into a buffer.</typeparam>\n         public class Builder<T>\n             where T : struct\n         {\n             private const int DefaultCapacity = 8;\n \n             private readonly int _size;\n \n+            /// <summary>\n+            /// Gets the number of items of current capacity.\n\nReview comment:\n       I've used the sentence form from `StringBuilder` - good suggestion.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-21T09:52:27.546+0000",
                    "updated": "2020-05-21T09:52:27.546+0000",
                    "started": "2020-05-21T09:52:27.546+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "435905",
                    "issueId": "13304688"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304688/worklog/435907",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on a change in pull request #7158:\nURL: https://github.com/apache/arrow/pull/7158#discussion_r428556018\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.Builder.cs\n##########\n@@ -80,27 +140,59 @@ public Builder<T> AppendRange(IEnumerable<T> values)\n                 return this;\n             }\n \n-            public Builder<T> Reserve(int capacity)\n+            /// <summary>\n+            /// Reserve a given number of items' additional capacity.\n+            /// </summary>\n+            /// <param name=\"additionalCapacity\">Number of items of required additional capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public Builder<T> Reserve(int additionalCapacity)\n             {\n-                EnsureCapacity(capacity);\n+                if (additionalCapacity < 0)\n+                {\n+                    throw new ArgumentOutOfRangeException(nameof(additionalCapacity));\n+                }\n+\n+                EnsureAdditionalCapacity(additionalCapacity);\n                 return this;\n             }\n \n+            /// <summary>\n+            /// Resize the buffer to a given size.\n+            /// </summary>\n+            /// <remarks>\n+            /// Note that if the required capacity is smaller than the current length of the populated buffer so far,\n+            /// the buffer will be truncated and items at the end of the buffer will be lost.\n+            /// </remarks>\n+            /// <remarks>\n+            /// Note also that a negative capacity will result in the buffer being resized to zero.\n+            /// </remarks>\n+            /// <param name=\"capacity\">Number of items of required capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n             public Builder<T> Resize(int capacity)\n             {\n+                capacity = capacity < 0 ? 0 : capacity;\n                 EnsureCapacity(capacity);\n                 Length = Math.Max(0, capacity);\n\nReview comment:\n       Done.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-21T09:52:54.358+0000",
                    "updated": "2020-05-21T09:52:54.358+0000",
                    "started": "2020-05-21T09:52:54.357+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "435907",
                    "issueId": "13304688"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304688/worklog/435908",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on a change in pull request #7158:\nURL: https://github.com/apache/arrow/pull/7158#discussion_r428556205\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.BitPackedBuilder.cs\n##########\n@@ -0,0 +1,268 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+namespace Apache.Arrow\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using Apache.Arrow.Memory;\n+\n+    public partial struct ArrowBuffer\n+    {\n+        /// <summary>\n+        /// The <see cref=\"ArrowBuffer.BitPackedBuilder\"/> class is a complement to <see cref=\"ArrowBuffer.Builder{T}\"/>\n+        /// and is designed for boolean fields, which are efficiently bit-packed into byte-aligned memory.\n+        /// </summary>\n+        public class BitPackedBuilder\n\nReview comment:\n       If the docs use \"bitmap\", I think this should too.  I've renamed to `BitmapBuilder`.\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.BitPackedBuilder.cs\n##########\n@@ -0,0 +1,268 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+namespace Apache.Arrow\n+{\n+    using System;\n\nReview comment:\n       Done.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-21T09:53:28.000+0000",
                    "updated": "2020-05-21T09:53:28.000+0000",
                    "started": "2020-05-21T09:53:28.000+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "435908",
                    "issueId": "13304688"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304688/worklog/435909",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on a change in pull request #7158:\nURL: https://github.com/apache/arrow/pull/7158#discussion_r428556333\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.BitPackedBuilder.cs\n##########\n@@ -0,0 +1,268 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+namespace Apache.Arrow\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using Apache.Arrow.Memory;\n+\n+    public partial struct ArrowBuffer\n+    {\n+        /// <summary>\n+        /// The <see cref=\"ArrowBuffer.BitPackedBuilder\"/> class is a complement to <see cref=\"ArrowBuffer.Builder{T}\"/>\n+        /// and is designed for boolean fields, which are efficiently bit-packed into byte-aligned memory.\n+        /// </summary>\n+        public class BitPackedBuilder\n+        {\n+            private const int DefaultBitCapacity = 8;\n+\n+            /// <summary>\n+            /// Gets the number of bits of current capacity.\n+            /// </summary>\n+            public int BitCapacity { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the number of bits currently appended.\n+            /// </summary>\n+            public int BitCount { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the raw byte memory underpinning the builder.\n+            /// </summary>\n+            public Memory<byte> Memory { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the span of (bit-packed byte) memory underpinning the builder.\n+            /// </summary>\n+            public Span<byte> Span => Memory.Span;\n+\n+            /// <summary>\n+            /// Creates an instance of the <see cref=\"BitPackedBuilder\"/> class.\n+            /// </summary>\n+            /// <param name=\"bitCapacity\">Number of bits of initial capacity to reserve.</param>\n+            public BitPackedBuilder(int bitCapacity = DefaultBitCapacity)\n+            {\n+                Memory = new byte[BitUtility.ByteCount(bitCapacity)];\n+                BitCapacity = bitCapacity;\n+                BitCount = 0;\n+            }\n+\n+            /// <summary>\n+            /// Append a single bit.\n+            /// </summary>\n+            /// <param name=\"bit\">Bit to append.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Append(bool bit)\n+            {\n+                if (BitCount % 8 == 0)\n+                {\n+                    // Append a new byte to the buffer when needed.\n+                    EnsureAdditionalCapacity(1);\n+                    Span[BitCount / 8] = 0;\n+                }\n+\n+                BitUtility.SetBit(Span, BitCount, bit);\n+                BitCount++;\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Append multiple bits.\n+            /// </summary>\n+            /// <param name=\"bits\">Bits to append.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder AppendRange(IEnumerable<bool> bits)\n+            {\n+                if (bits != null)\n+                {\n+                    foreach (var v in bits)\n+                    {\n+                        Append(v);\n+                    }\n+                }\n+\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Count the number of set bits (i.e. set to 1).\n+            /// </summary>\n+            /// <returns>Returns the number of set bits.</returns>\n+            public int CountSetBits() => BitUtility.CountBits(this.Span);\n+\n+            /// <summary>\n+            /// Count the number of unset bits (i.e. set to 0).\n+            /// </summary>\n+            /// <returns>Returns the number of unset bits.</returns>\n+            public int CountUnsetBits() => this.BitCount - this.CountSetBits();\n+\n+            /// <summary>\n+            /// Toggle the bit at a particular index.\n+            /// </summary>\n+            /// <param name=\"index\">Index of bit to toggle.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Toggle(int index)\n+            {\n+                CheckIndex(index);\n+                BitUtility.ToggleBit(Span, index);\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Set the bit at a particular index to 1.\n+            /// </summary>\n+            /// <param name=\"index\">Index of bit to set.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Set(int index)\n+            {\n+                CheckIndex(index);\n+                BitUtility.SetBit(Span, index);\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Set the bit at a particular index to a given value.\n+            /// </summary>\n+            /// <param name=\"index\">Index of bit to set/unset.</param>\n+            /// <param name=\"value\">Value of bit.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Set(int index, bool value)\n+            {\n+                CheckIndex(index);\n+                BitUtility.SetBit(Span, index, value);\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Swap the bits at two given indices.\n+            /// </summary>\n+            /// <param name=\"i\">First index.</param>\n+            /// <param name=\"j\">Second index.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Swap(int i, int j)\n+            {\n+                CheckIndex(i);\n+                CheckIndex(j);\n+                var bi = BitUtility.GetBit(Span, i);\n+                var bj = BitUtility.GetBit(Span, j);\n+                BitUtility.SetBit(Span, i, bj);\n+                BitUtility.SetBit(Span, j, bi);\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Reserve a given number of bits' additional capacity.\n+            /// </summary>\n+            /// <param name=\"bitAdditionalCapacity\">Number of bits of required additional capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Reserve(int bitAdditionalCapacity)\n+            {\n+                if (bitAdditionalCapacity < 0)\n+                {\n+                    throw new ArgumentOutOfRangeException(nameof(bitAdditionalCapacity));\n+                }\n+\n+                EnsureAdditionalCapacity(bitAdditionalCapacity);\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Resize the buffer to a given size.\n+            /// </summary>\n+            /// <remarks>\n+            /// Note that if the required capacity is smaller than the current length of the populated buffer so far,\n+            /// the buffer will be truncated and items at the end of the buffer will be lost.\n+            /// </remarks>\n+            /// <remarks>\n+            /// Note also that a negative capacity will result in the buffer being resized to zero.\n+            /// </remarks>\n+            /// <param name=\"bitCapacity\">Number of bits of required capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Resize(int bitCapacity)\n+            {\n+                bitCapacity = bitCapacity < 0 ? 0 : bitCapacity;\n+                EnsureCapacity(bitCapacity);\n+                BitCount = Math.Max(0, bitCapacity);\n+\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Clear all contents appended so far.\n+            /// </summary>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Clear()\n+            {\n+                Span.Fill(default);\n+                BitCount = 0;\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Build an Arrow buffer from the appended contents so far.\n+            /// </summary>\n+            /// <param name=\"allocator\">Optional memory allocator.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n\nReview comment:\n       Fixed.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-21T09:53:41.182+0000",
                    "updated": "2020-05-21T09:53:41.182+0000",
                    "started": "2020-05-21T09:53:41.182+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "435909",
                    "issueId": "13304688"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304688/worklog/435910",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on a change in pull request #7158:\nURL: https://github.com/apache/arrow/pull/7158#discussion_r428556511\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.BitPackedBuilder.cs\n##########\n@@ -0,0 +1,268 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+namespace Apache.Arrow\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using Apache.Arrow.Memory;\n+\n+    public partial struct ArrowBuffer\n+    {\n+        /// <summary>\n+        /// The <see cref=\"ArrowBuffer.BitPackedBuilder\"/> class is a complement to <see cref=\"ArrowBuffer.Builder{T}\"/>\n+        /// and is designed for boolean fields, which are efficiently bit-packed into byte-aligned memory.\n+        /// </summary>\n+        public class BitPackedBuilder\n+        {\n+            private const int DefaultBitCapacity = 8;\n\nReview comment:\n       Sensible - changed to a default capacity of 64 bits.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-21T09:54:04.883+0000",
                    "updated": "2020-05-21T09:54:04.883+0000",
                    "started": "2020-05-21T09:54:04.883+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "435910",
                    "issueId": "13304688"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304688/worklog/435911",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on a change in pull request #7158:\nURL: https://github.com/apache/arrow/pull/7158#discussion_r428556672\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.BitPackedBuilder.cs\n##########\n@@ -0,0 +1,268 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+namespace Apache.Arrow\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using Apache.Arrow.Memory;\n+\n+    public partial struct ArrowBuffer\n+    {\n+        /// <summary>\n+        /// The <see cref=\"ArrowBuffer.BitPackedBuilder\"/> class is a complement to <see cref=\"ArrowBuffer.Builder{T}\"/>\n+        /// and is designed for boolean fields, which are efficiently bit-packed into byte-aligned memory.\n+        /// </summary>\n+        public class BitPackedBuilder\n+        {\n+            private const int DefaultBitCapacity = 8;\n+\n+            /// <summary>\n+            /// Gets the number of bits of current capacity.\n+            /// </summary>\n+            public int BitCapacity { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the number of bits currently appended.\n+            /// </summary>\n+            public int BitCount { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the raw byte memory underpinning the builder.\n+            /// </summary>\n+            public Memory<byte> Memory { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the span of (bit-packed byte) memory underpinning the builder.\n+            /// </summary>\n+            public Span<byte> Span => Memory.Span;\n+\n+            /// <summary>\n+            /// Creates an instance of the <see cref=\"BitPackedBuilder\"/> class.\n+            /// </summary>\n+            /// <param name=\"bitCapacity\">Number of bits of initial capacity to reserve.</param>\n+            public BitPackedBuilder(int bitCapacity = DefaultBitCapacity)\n+            {\n+                Memory = new byte[BitUtility.ByteCount(bitCapacity)];\n+                BitCapacity = bitCapacity;\n+                BitCount = 0;\n+            }\n+\n+            /// <summary>\n+            /// Append a single bit.\n+            /// </summary>\n+            /// <param name=\"bit\">Bit to append.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Append(bool bit)\n+            {\n+                if (BitCount % 8 == 0)\n+                {\n+                    // Append a new byte to the buffer when needed.\n+                    EnsureAdditionalCapacity(1);\n+                    Span[BitCount / 8] = 0;\n\nReview comment:\n       I've removed the unnecessary zero'ing out.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-21T09:54:21.194+0000",
                    "updated": "2020-05-21T09:54:21.194+0000",
                    "started": "2020-05-21T09:54:21.194+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "435911",
                    "issueId": "13304688"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304688/worklog/435912",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on a change in pull request #7158:\nURL: https://github.com/apache/arrow/pull/7158#discussion_r428556741\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.BitPackedBuilder.cs\n##########\n@@ -0,0 +1,268 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+namespace Apache.Arrow\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using Apache.Arrow.Memory;\n+\n+    public partial struct ArrowBuffer\n+    {\n+        /// <summary>\n+        /// The <see cref=\"ArrowBuffer.BitPackedBuilder\"/> class is a complement to <see cref=\"ArrowBuffer.Builder{T}\"/>\n+        /// and is designed for boolean fields, which are efficiently bit-packed into byte-aligned memory.\n+        /// </summary>\n+        public class BitPackedBuilder\n+        {\n+            private const int DefaultBitCapacity = 8;\n+\n+            /// <summary>\n+            /// Gets the number of bits of current capacity.\n+            /// </summary>\n+            public int BitCapacity { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the number of bits currently appended.\n+            /// </summary>\n+            public int BitCount { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the raw byte memory underpinning the builder.\n+            /// </summary>\n+            public Memory<byte> Memory { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the span of (bit-packed byte) memory underpinning the builder.\n+            /// </summary>\n+            public Span<byte> Span => Memory.Span;\n+\n+            /// <summary>\n+            /// Creates an instance of the <see cref=\"BitPackedBuilder\"/> class.\n+            /// </summary>\n+            /// <param name=\"bitCapacity\">Number of bits of initial capacity to reserve.</param>\n+            public BitPackedBuilder(int bitCapacity = DefaultBitCapacity)\n+            {\n+                Memory = new byte[BitUtility.ByteCount(bitCapacity)];\n+                BitCapacity = bitCapacity;\n+                BitCount = 0;\n+            }\n+\n+            /// <summary>\n+            /// Append a single bit.\n+            /// </summary>\n+            /// <param name=\"bit\">Bit to append.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Append(bool bit)\n\nReview comment:\n       Renamed.\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.BitPackedBuilder.cs\n##########\n@@ -0,0 +1,268 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+namespace Apache.Arrow\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using Apache.Arrow.Memory;\n+\n+    public partial struct ArrowBuffer\n+    {\n+        /// <summary>\n+        /// The <see cref=\"ArrowBuffer.BitPackedBuilder\"/> class is a complement to <see cref=\"ArrowBuffer.Builder{T}\"/>\n+        /// and is designed for boolean fields, which are efficiently bit-packed into byte-aligned memory.\n+        /// </summary>\n+        public class BitPackedBuilder\n+        {\n+            private const int DefaultBitCapacity = 8;\n+\n+            /// <summary>\n+            /// Gets the number of bits of current capacity.\n+            /// </summary>\n+            public int BitCapacity { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the number of bits currently appended.\n+            /// </summary>\n+            public int BitCount { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the raw byte memory underpinning the builder.\n+            /// </summary>\n+            public Memory<byte> Memory { get; private set; }\n+\n+            /// <summary>\n+            /// Gets the span of (bit-packed byte) memory underpinning the builder.\n+            /// </summary>\n+            public Span<byte> Span => Memory.Span;\n+\n+            /// <summary>\n+            /// Creates an instance of the <see cref=\"BitPackedBuilder\"/> class.\n+            /// </summary>\n+            /// <param name=\"bitCapacity\">Number of bits of initial capacity to reserve.</param>\n+            public BitPackedBuilder(int bitCapacity = DefaultBitCapacity)\n+            {\n+                Memory = new byte[BitUtility.ByteCount(bitCapacity)];\n+                BitCapacity = bitCapacity;\n+                BitCount = 0;\n+            }\n+\n+            /// <summary>\n+            /// Append a single bit.\n+            /// </summary>\n+            /// <param name=\"bit\">Bit to append.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Append(bool bit)\n+            {\n+                if (BitCount % 8 == 0)\n+                {\n+                    // Append a new byte to the buffer when needed.\n+                    EnsureAdditionalCapacity(1);\n+                    Span[BitCount / 8] = 0;\n+                }\n+\n+                BitUtility.SetBit(Span, BitCount, bit);\n+                BitCount++;\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Append multiple bits.\n+            /// </summary>\n+            /// <param name=\"bits\">Bits to append.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder AppendRange(IEnumerable<bool> bits)\n+            {\n+                if (bits != null)\n+                {\n+                    foreach (var v in bits)\n+                    {\n+                        Append(v);\n+                    }\n+                }\n+\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Count the number of set bits (i.e. set to 1).\n+            /// </summary>\n+            /// <returns>Returns the number of set bits.</returns>\n+            public int CountSetBits() => BitUtility.CountBits(this.Span);\n+\n+            /// <summary>\n+            /// Count the number of unset bits (i.e. set to 0).\n+            /// </summary>\n+            /// <returns>Returns the number of unset bits.</returns>\n+            public int CountUnsetBits() => this.BitCount - this.CountSetBits();\n+\n+            /// <summary>\n+            /// Toggle the bit at a particular index.\n+            /// </summary>\n+            /// <param name=\"index\">Index of bit to toggle.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Toggle(int index)\n+            {\n+                CheckIndex(index);\n+                BitUtility.ToggleBit(Span, index);\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Set the bit at a particular index to 1.\n+            /// </summary>\n+            /// <param name=\"index\">Index of bit to set.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Set(int index)\n+            {\n+                CheckIndex(index);\n+                BitUtility.SetBit(Span, index);\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Set the bit at a particular index to a given value.\n+            /// </summary>\n+            /// <param name=\"index\">Index of bit to set/unset.</param>\n+            /// <param name=\"value\">Value of bit.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Set(int index, bool value)\n+            {\n+                CheckIndex(index);\n+                BitUtility.SetBit(Span, index, value);\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Swap the bits at two given indices.\n+            /// </summary>\n+            /// <param name=\"i\">First index.</param>\n+            /// <param name=\"j\">Second index.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Swap(int i, int j)\n+            {\n+                CheckIndex(i);\n+                CheckIndex(j);\n+                var bi = BitUtility.GetBit(Span, i);\n+                var bj = BitUtility.GetBit(Span, j);\n+                BitUtility.SetBit(Span, i, bj);\n+                BitUtility.SetBit(Span, j, bi);\n+                return this;\n+            }\n+\n+            /// <summary>\n+            /// Reserve a given number of bits' additional capacity.\n+            /// </summary>\n+            /// <param name=\"bitAdditionalCapacity\">Number of bits of required additional capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public BitPackedBuilder Reserve(int bitAdditionalCapacity)\n\nReview comment:\n       Renamed to simply `additionalCapacity`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-21T09:54:47.432+0000",
                    "updated": "2020-05-21T09:54:47.432+0000",
                    "started": "2020-05-21T09:54:47.432+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "435912",
                    "issueId": "13304688"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304688/worklog/435918",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on a change in pull request #7158:\nURL: https://github.com/apache/arrow/pull/7158#discussion_r428559607\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.Builder.cs\n##########\n@@ -80,27 +140,59 @@ public Builder<T> AppendRange(IEnumerable<T> values)\n                 return this;\n             }\n \n-            public Builder<T> Reserve(int capacity)\n+            /// <summary>\n+            /// Reserve a given number of items' additional capacity.\n+            /// </summary>\n+            /// <param name=\"additionalCapacity\">Number of items of required additional capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public Builder<T> Reserve(int additionalCapacity)\n             {\n-                EnsureCapacity(capacity);\n+                if (additionalCapacity < 0)\n+                {\n+                    throw new ArgumentOutOfRangeException(nameof(additionalCapacity));\n+                }\n+\n+                EnsureAdditionalCapacity(additionalCapacity);\n                 return this;\n             }\n \n+            /// <summary>\n+            /// Resize the buffer to a given size.\n+            /// </summary>\n+            /// <remarks>\n+            /// Note that if the required capacity is smaller than the current length of the populated buffer so far,\n+            /// the buffer will be truncated and items at the end of the buffer will be lost.\n+            /// </remarks>\n+            /// <remarks>\n+            /// Note also that a negative capacity will result in the buffer being resized to zero.\n+            /// </remarks>\n+            /// <param name=\"capacity\">Number of items of required capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n             public Builder<T> Resize(int capacity)\n             {\n+                capacity = capacity < 0 ? 0 : capacity;\n\nReview comment:\n       If it were me, I would throw `ArgumentOutOfRangeException` if I received a request to resize to a negative length, as arrays can't have negative length.  I can't imagine why someone would have written a unit test for the current behaviour.\r\n   \r\n   Incidentally, this is what existing Array-resizing methods already do: https://docs.microsoft.com/en-us/dotnet/api/system.array.resize?view=netcore-3.1\r\n   \r\n   And the C++ implementation also refuses to accept negative lengths:\r\n   https://github.com/apache/arrow/blob/master/cpp/src/arrow/array/builder_base.h#L194\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-21T10:00:52.505+0000",
                    "updated": "2020-05-21T10:00:52.505+0000",
                    "started": "2020-05-21T10:00:52.505+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "435918",
                    "issueId": "13304688"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304688/worklog/436107",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on a change in pull request #7158:\nURL: https://github.com/apache/arrow/pull/7158#discussion_r428797705\n\n\n\n##########\nFile path: csharp/test/Apache.Arrow.Tests/BooleanArrayTests.cs\n##########\n@@ -18,6 +18,8 @@\n \n namespace Apache.Arrow.Tests\n {\n+    using System.Linq;\n\nReview comment:\n       We should add an `.editorconfig` file in this repo, so VS will automatically follow the formatting conventions used.\r\n   I've opened https://issues.apache.org/jira/browse/ARROW-8882 for this.\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-21T17:21:16.727+0000",
                    "updated": "2020-05-21T17:21:16.727+0000",
                    "started": "2020-05-21T17:21:16.726+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "436107",
                    "issueId": "13304688"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304688/worklog/436111",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on a change in pull request #7158:\nURL: https://github.com/apache/arrow/pull/7158#discussion_r428800650\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.Builder.cs\n##########\n@@ -80,27 +140,59 @@ public Builder<T> AppendRange(IEnumerable<T> values)\n                 return this;\n             }\n \n-            public Builder<T> Reserve(int capacity)\n+            /// <summary>\n+            /// Reserve a given number of items' additional capacity.\n+            /// </summary>\n+            /// <param name=\"additionalCapacity\">Number of items of required additional capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public Builder<T> Reserve(int additionalCapacity)\n             {\n-                EnsureCapacity(capacity);\n+                if (additionalCapacity < 0)\n+                {\n+                    throw new ArgumentOutOfRangeException(nameof(additionalCapacity));\n+                }\n+\n+                EnsureAdditionalCapacity(additionalCapacity);\n                 return this;\n             }\n \n+            /// <summary>\n+            /// Resize the buffer to a given size.\n+            /// </summary>\n+            /// <remarks>\n+            /// Note that if the required capacity is smaller than the current length of the populated buffer so far,\n+            /// the buffer will be truncated and items at the end of the buffer will be lost.\n+            /// </remarks>\n+            /// <remarks>\n+            /// Note also that a negative capacity will result in the buffer being resized to zero.\n+            /// </remarks>\n+            /// <param name=\"capacity\">Number of items of required capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n             public Builder<T> Resize(int capacity)\n             {\n+                capacity = capacity < 0 ? 0 : capacity;\n\nReview comment:\n       Can you open a new JIRA issue for this?\r\n   \r\n   Also tagging @chutchinson, as the original author of the code. Any thoughts here @chutchinson?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-21T17:26:51.565+0000",
                    "updated": "2020-05-21T17:26:51.565+0000",
                    "started": "2020-05-21T17:26:51.565+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "436111",
                    "issueId": "13304688"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304688/worklog/436230",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7158:\nURL: https://github.com/apache/arrow/pull/7158#issuecomment-632368680\n\n\n   > Is a CCLA required by the Arrow project to be signed by my employer for contributions essentially done on company time? My prior assumption was that FOSS projects might choose to require this for indemnification from possible corporate legal action etc. but if you don't need that then no problem.\r\n   \r\n   Since I didn't address this question directly, we do not require a CCLA for contributions done on corporate time. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-21T22:01:24.206+0000",
                    "updated": "2020-05-21T22:01:24.206+0000",
                    "started": "2020-05-21T22:01:24.206+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "436230",
                    "issueId": "13304688"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304688/worklog/436233",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on a change in pull request #7158:\nURL: https://github.com/apache/arrow/pull/7158#discussion_r428940753\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/Arrays/BinaryArray.cs\n##########\n@@ -56,16 +56,16 @@ public abstract class BuilderBase<TArray, TBuilder> : IArrowArrayBuilder<byte, T\n             protected TBuilder Instance => this as TBuilder;\n             protected ArrowBuffer.Builder<int> ValueOffsets { get; }\n             protected ArrowBuffer.Builder<byte> ValueBuffer { get; }\n-            protected BooleanArray.Builder ValidityBuffer { get; }\n+            protected ArrowBuffer.BitPackedBuilder ValidityBuffer { get; }\n             protected int Offset { get; set; }\n-            protected int NullCount { get; private set; }\n+            protected int NullCount => this.ValidityBuffer.CountUnsetBits();\n\nReview comment:\n       This was slightly more involved to change, but now done: the `BitmapBuilder` class keeps track of the set/unset bit count during its operations.  This required adding a new method to `BitUtility`, along with appropriate unit tests.\r\n   \r\n   I also took the opportunity to add verification of the new `BitmapBuilder.Num[Set|Unset]Bits` properties in all the unit tests.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-21T22:03:14.731+0000",
                    "updated": "2020-05-21T22:03:14.731+0000",
                    "started": "2020-05-21T22:03:14.731+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "436233",
                    "issueId": "13304688"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304688/worklog/436237",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mr-smidge commented on a change in pull request #7158:\nURL: https://github.com/apache/arrow/pull/7158#discussion_r428942418\n\n\n\n##########\nFile path: csharp/src/Apache.Arrow/ArrowBuffer.Builder.cs\n##########\n@@ -80,27 +140,63 @@ public Builder<T> AppendRange(IEnumerable<T> values)\n                 return this;\n             }\n \n-            public Builder<T> Reserve(int capacity)\n+            /// <summary>\n+            /// Reserve a given number of items' additional capacity.\n+            /// </summary>\n+            /// <param name=\"additionalCapacity\">Number of items of required additional capacity.</param>\n+            /// <returns>Returns the builder (for fluent-style composition).</returns>\n+            public Builder<T> Reserve(int additionalCapacity)\n             {\n-                EnsureCapacity(capacity);\n+                if (additionalCapacity < 0)\n+                {\n+                    throw new ArgumentOutOfRangeException(nameof(additionalCapacity));\n+                }\n+\n+                EnsureAdditionalCapacity(additionalCapacity);\n                 return this;\n             }\n \n+            /// <summary>\n+            /// Resize the buffer to a given size.\n+            /// </summary>\n+            /// <remarks>\n+            /// Note that if the required capacity is larger than the current length of the populated buffer so far,\n+            /// the buffer's contents in the new, expanded region are undefined.\n\nReview comment:\n       I've explicitly added this statement to the docstring (and in `BitmapBuilder`), because it's not obvious.  If a buffer is resized down, and then resized up again, what are the contents in the expanded portion?  Are they cleared to default?  Are they the previous contents before it was resized downwards?  Slightly tricky question, so I've avoided the trouble by making this statement explicit.\r\n   \r\n   Feedback appreciated.  Perhaps we add a new JIRA if we want to implement well-defined contents after an enlarging resize.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-21T22:07:40.323+0000",
                    "updated": "2020-05-21T22:07:40.323+0000",
                    "started": "2020-05-21T22:07:40.323+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "436237",
                    "issueId": "13304688"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 16200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5ec6b133[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@68386575[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7c88aefa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@57307fd3[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3dc7dcef[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4ccad5a0[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@750c4dbd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@21967a28[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@22b5ea51[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@38484c72[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2fbe8f63[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3debe786[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16200,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jun 10 13:59:45 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-06-10T13:59:44.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8788/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-05-13T14:34:39.000+0000",
        "updated": "2020-06-22T16:33:03.000+0000",
        "timeoriginalestimate": null,
        "description": "The C# array builders were recently enhanced to have support for adding nullable values easily, under [PR #7032|https://github.com/apache/arrow/pull/7032].\r\n\r\nHowever, the builders internally referenced {{BooleanArray.Builder}}, which itself then had logic \"baked-in\" for efficient bit-packing of boolean values into a byte buffer.\r\n\r\nIt would be cleaner for there to be a general-purpose bit-packed buffer builder, and for all array builders to use that for their validity map.  The boolean array builder would use it twice: once for values, once for validity.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C#] Array builders to use bit-packed buffer builder rather than boolean array builder for validity map",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304688/comment/17130706",
                    "id": "17130706",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
                        "name": "eerhardt",
                        "key": "eerhardt",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
                        },
                        "displayName": "Eric Erhardt",
                        "active": true,
                        "timeZone": "America/North_Dakota/New_Salem"
                    },
                    "body": "Issue resolved by pull request 7158\n[https://github.com/apache/arrow/pull/7158]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
                        "name": "eerhardt",
                        "key": "eerhardt",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
                        },
                        "displayName": "Eric Erhardt",
                        "active": true,
                        "timeZone": "America/North_Dakota/New_Salem"
                    },
                    "created": "2020-06-10T13:59:45.009+0000",
                    "updated": "2020-06-10T13:59:45.009+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ep20:",
        "customfield_12314139": null
    }
}