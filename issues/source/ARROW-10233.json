{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13334404",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334404",
    "key": "ARROW-10233",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12600959",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12600959",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13310577",
                    "key": "ARROW-9088",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13310577",
                    "fields": {
                        "summary": "[Rust] Recent version of arrow crate does not compile into wasm target",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10233/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 10,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334404/worklog/497230",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb opened a new pull request #8397:\nURL: https://github.com/apache/arrow/pull/8397\n\n\n   \r\n   This PR makes `array_value_to_string` available to all arrow builds. Currently it is only available if the `feature = \"prettyprint\"` is enabled. The full `print_batches` and `pretty_format_batches` (and the libraries they depend on) are still only available of the feature flag is set.\r\n   \r\n   The rationale for making this change is that I want to be able to use `array_value_to_string` to write tests (such as on https://github.com/apache/arrow/pull/8346) but currently it is only available when `feature = \"prettyprint\"` is enabled.\r\n   \r\n   It appears that @nevi-mi made prettyprint compilation optional so that arrow could be compiled for wasm in https://github.com/apache/arrow/pull/7400. https://issues.apache.org/jira/browse/ARROW-9088 explains that this is due to some dependency of pretty-table;   `array_value_to_string` has no needed dependencies.\r\n   \r\n   Note I tried to compile ARROW again using the `wasm32-unknown-unknown` target on master and it fails (perhaps due to a new dependency that was added?): \r\n   \r\n   <details>\r\n     <summary>Click to expand!</summary>\r\n   \r\n   ```\r\n   alamb@ip-192-168-0-182 rust % git log | head -n 1\r\n   git log | head -n 1\r\n   commit d4cbc4b7aab5d37262b83e972af4bd7cb44c7a5c\r\n   alamb@ip-192-168-0-182 rust % git status\r\n   git status\r\n   On branch master\r\n   Your branch is up to date with 'upstream/master'.\r\n   \r\n   nothing to commit, working tree clean\r\n   alamb@ip-192-168-0-182 rust % \r\n   \r\n   alamb@ip-192-168-0-182 rust % cargo build --target=wasm32-unknown-unknown\r\n   cargo build --target=wasm32-unknown-unknown\r\n      Compiling cfg-if v0.1.10\r\n      Compiling lazy_static v1.4.0\r\n      Compiling futures-core v0.3.5\r\n      Compiling slab v0.4.2\r\n      Compiling futures-sink v0.3.5\r\n      Compiling once_cell v1.4.0\r\n      Compiling pin-utils v0.1.0\r\n      Compiling futures-io v0.3.5\r\n      Compiling itoa v0.4.5\r\n      Compiling bytes v0.5.4\r\n      Compiling fnv v1.0.7\r\n      Compiling iovec v0.1.4\r\n      Compiling unicode-width v0.1.7\r\n      Compiling pin-project-lite v0.1.7\r\n      Compiling ppv-lite86 v0.2.8\r\n      Compiling atty v0.2.14\r\n      Compiling dirs v1.0.5\r\n      Compiling smallvec v1.4.0\r\n      Compiling regex-syntax v0.6.18\r\n      Compiling encode_unicode v0.3.6\r\n      Compiling hex v0.4.2\r\n      Compiling tower-service v0.3.0\r\n   error[E0433]: failed to resolve: could not find `unix` in `os`\r\n     --> /Users/alamb/.cargo/registry/src/github.com-1ecc6299db9ec823/dirs-1.0.5/src/lin.rs:41:18\r\n      |\r\n   41 |     use std::os::unix::ffi::OsStringExt;\r\n      |                  ^^^^ could not find `unix` in `os`\r\n   \r\n   error[E0432]: unresolved import `unix`\r\n    --> /Users/alamb/.cargo/registry/src/github.com-1ecc6299db9ec823/dirs-1.0.5/src/lin.rs:6:5\r\n     |\r\n   6 | use unix;\r\n     |     ^^^^ no `unix` in the root\r\n   \r\n      Compiling alloc-no-stdlib v2.0.1\r\n      Compiling adler32 v1.0.4\r\n   error[E0599]: no function or associated item named `from_vec` found for struct `std::ffi::OsString` in the current scope\r\n     --> /Users/alamb/.cargo/registry/src/github.com-1ecc6299db9ec823/dirs-1.0.5/src/lin.rs:48:34\r\n      |\r\n   48 |     Some(PathBuf::from(OsString::from_vec(out)))\r\n      |                                  ^^^^^^^^ function or associated item not found in `std::ffi::OsString`\r\n      |\r\n      = help: items from traits can only be used if the trait is in scope\r\n      = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\r\n              `use std::sys_common::os_str_bytes::OsStringExt;`\r\n   \r\n   error: aborting due to 3 previous errors\r\n   \r\n   Some errors have detailed explanations: E0432, E0433, E0599.\r\n   For more information about an error, try `rustc --explain E0432`.\r\n   error: could not compile `dirs`.\r\n   \r\n   To learn more, run the command again with --verbose.\r\n   warning: build failed, waiting for other jobs to finish...\r\n   error: build failed\r\n   alamb@ip-192-168-0-182 rust % ```\r\n   \r\n   </details>\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-08T10:54:57.315+0000",
                    "updated": "2020-10-08T10:54:57.315+0000",
                    "started": "2020-10-08T10:54:57.315+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497230",
                    "issueId": "13334404"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334404/worklog/497239",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8397:\nURL: https://github.com/apache/arrow/pull/8397#issuecomment-705497672\n\n\n   https://issues.apache.org/jira/browse/ARROW-10233\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-08T11:06:49.401+0000",
                    "updated": "2020-10-08T11:06:49.401+0000",
                    "started": "2020-10-08T11:06:49.400+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497239",
                    "issueId": "13334404"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334404/worklog/497290",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8397:\nURL: https://github.com/apache/arrow/pull/8397#discussion_r501678317\n\n\n\n##########\nFile path: rust/arrow/src/util/display.rs\n##########\n@@ -0,0 +1,135 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Functions for printing array values, as strings, for debugging\n+//! purposes. See the `pretty` crate for additional functions for\n+//! record batch pretty printing.\n+\n+use crate::array;\n+use crate::array::{Array, PrimitiveArrayOps};\n+use crate::datatypes::{\n+    ArrowNativeType, ArrowPrimitiveType, DataType, Int16Type, Int32Type, Int64Type,\n+    Int8Type, TimeUnit, UInt16Type, UInt32Type, UInt64Type, UInt8Type,\n+};\n+\n+use array::DictionaryArray;\n+\n+use crate::error::{ArrowError, Result};\n+\n+macro_rules! make_string {\n+    ($array_type:ty, $column: ident, $row: ident) => {{\n+        let array = $column.as_any().downcast_ref::<$array_type>().unwrap();\n+\n+        let s = if array.is_null($row) {\n+            \"\".to_string()\n+        } else {\n+            array.value($row).to_string()\n+        };\n+\n+        Ok(s)\n+    }};\n+}\n+\n+/// Get the value at the given row in an array as a String.\n+///\n+/// Note this function is quite inefficient and is unlikely to be\n+/// suitable for converting large arrays or record batches.\n+pub fn array_value_to_string(column: &array::ArrayRef, row: usize) -> Result<String> {\n+    match column.data_type() {\n+        DataType::Utf8 => make_string!(array::StringArray, column, row),\n+        DataType::Boolean => make_string!(array::BooleanArray, column, row),\n+        DataType::Int8 => make_string!(array::Int8Array, column, row),\n+        DataType::Int16 => make_string!(array::Int16Array, column, row),\n+        DataType::Int32 => make_string!(array::Int32Array, column, row),\n+        DataType::Int64 => make_string!(array::Int64Array, column, row),\n+        DataType::UInt8 => make_string!(array::UInt8Array, column, row),\n+        DataType::UInt16 => make_string!(array::UInt16Array, column, row),\n+        DataType::UInt32 => make_string!(array::UInt32Array, column, row),\n+        DataType::UInt64 => make_string!(array::UInt64Array, column, row),\n+        DataType::Float16 => make_string!(array::Float32Array, column, row),\n+        DataType::Float32 => make_string!(array::Float32Array, column, row),\n+        DataType::Float64 => make_string!(array::Float64Array, column, row),\n+        DataType::Timestamp(unit, _) if *unit == TimeUnit::Second => {\n+            make_string!(array::TimestampSecondArray, column, row)\n+        }\n+        DataType::Timestamp(unit, _) if *unit == TimeUnit::Millisecond => {\n+            make_string!(array::TimestampMillisecondArray, column, row)\n+        }\n+        DataType::Timestamp(unit, _) if *unit == TimeUnit::Microsecond => {\n+            make_string!(array::TimestampMicrosecondArray, column, row)\n+        }\n+        DataType::Timestamp(unit, _) if *unit == TimeUnit::Nanosecond => {\n+            make_string!(array::TimestampNanosecondArray, column, row)\n+        }\n+        DataType::Date32(_) => make_string!(array::Date32Array, column, row),\n+        DataType::Date64(_) => make_string!(array::Date64Array, column, row),\n+        DataType::Time32(unit) if *unit == TimeUnit::Second => {\n+            make_string!(array::Time32SecondArray, column, row)\n+        }\n+        DataType::Time32(unit) if *unit == TimeUnit::Millisecond => {\n+            make_string!(array::Time32MillisecondArray, column, row)\n+        }\n+        DataType::Time32(unit) if *unit == TimeUnit::Microsecond => {\n+            make_string!(array::Time64MicrosecondArray, column, row)\n+        }\n+        DataType::Time64(unit) if *unit == TimeUnit::Nanosecond => {\n+            make_string!(array::Time64NanosecondArray, column, row)\n+        }\n+        DataType::Dictionary(index_type, _value_type) => match **index_type {\n+            DataType::Int8 => dict_array_value_to_string::<Int8Type>(column, row),\n+            DataType::Int16 => dict_array_value_to_string::<Int16Type>(column, row),\n+            DataType::Int32 => dict_array_value_to_string::<Int32Type>(column, row),\n+            DataType::Int64 => dict_array_value_to_string::<Int64Type>(column, row),\n+            DataType::UInt8 => dict_array_value_to_string::<UInt8Type>(column, row),\n+            DataType::UInt16 => dict_array_value_to_string::<UInt16Type>(column, row),\n+            DataType::UInt32 => dict_array_value_to_string::<UInt32Type>(column, row),\n+            DataType::UInt64 => dict_array_value_to_string::<UInt64Type>(column, row),\n+            _ => Err(ArrowError::InvalidArgumentError(format!(\n+                \"Pretty printing not supported for {:?} due to index type\",\n+                column.data_type()\n+            ))),\n+        },\n+        _ => Err(ArrowError::InvalidArgumentError(format!(\n+            \"Pretty printing not implemented for {:?} type\",\n+            column.data_type()\n+        ))),\n+    }\n+}\n+\n+/// Converts the value of the dictionary array at `row` to a String\n+fn dict_array_value_to_string<K: ArrowPrimitiveType>(\n+    colum: &array::ArrayRef,\n+    row: usize,\n+) -> Result<String> {\n+    let dict_array = colum.as_any().downcast_ref::<DictionaryArray<K>>().unwrap();\n+\n+    let keys_array = dict_array.keys_array();\n+\n+    if keys_array.is_null(row) {\n+        return Ok(String::from(\"\"));\n+    }\n+\n+    let dict_index = keys_array.value(row).to_usize().ok_or_else(|| {\n+        ArrowError::InvalidArgumentError(format!(\n+            \"Can not convert value {:?} at index {:?} to usize for repl.\",\n\nReview comment:\n       nit: remove `for repl`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-08T12:27:25.521+0000",
                    "updated": "2020-10-08T12:27:25.521+0000",
                    "started": "2020-10-08T12:27:25.521+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497290",
                    "issueId": "13334404"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334404/worklog/497327",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8397:\nURL: https://github.com/apache/arrow/pull/8397#discussion_r501717377\n\n\n\n##########\nFile path: rust/arrow/src/util/display.rs\n##########\n@@ -0,0 +1,135 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Functions for printing array values, as strings, for debugging\n+//! purposes. See the `pretty` crate for additional functions for\n+//! record batch pretty printing.\n+\n+use crate::array;\n+use crate::array::{Array, PrimitiveArrayOps};\n+use crate::datatypes::{\n+    ArrowNativeType, ArrowPrimitiveType, DataType, Int16Type, Int32Type, Int64Type,\n+    Int8Type, TimeUnit, UInt16Type, UInt32Type, UInt64Type, UInt8Type,\n+};\n+\n+use array::DictionaryArray;\n+\n+use crate::error::{ArrowError, Result};\n+\n+macro_rules! make_string {\n+    ($array_type:ty, $column: ident, $row: ident) => {{\n+        let array = $column.as_any().downcast_ref::<$array_type>().unwrap();\n+\n+        let s = if array.is_null($row) {\n+            \"\".to_string()\n+        } else {\n+            array.value($row).to_string()\n+        };\n+\n+        Ok(s)\n+    }};\n+}\n+\n+/// Get the value at the given row in an array as a String.\n+///\n+/// Note this function is quite inefficient and is unlikely to be\n+/// suitable for converting large arrays or record batches.\n+pub fn array_value_to_string(column: &array::ArrayRef, row: usize) -> Result<String> {\n+    match column.data_type() {\n+        DataType::Utf8 => make_string!(array::StringArray, column, row),\n+        DataType::Boolean => make_string!(array::BooleanArray, column, row),\n+        DataType::Int8 => make_string!(array::Int8Array, column, row),\n+        DataType::Int16 => make_string!(array::Int16Array, column, row),\n+        DataType::Int32 => make_string!(array::Int32Array, column, row),\n+        DataType::Int64 => make_string!(array::Int64Array, column, row),\n+        DataType::UInt8 => make_string!(array::UInt8Array, column, row),\n+        DataType::UInt16 => make_string!(array::UInt16Array, column, row),\n+        DataType::UInt32 => make_string!(array::UInt32Array, column, row),\n+        DataType::UInt64 => make_string!(array::UInt64Array, column, row),\n+        DataType::Float16 => make_string!(array::Float32Array, column, row),\n+        DataType::Float32 => make_string!(array::Float32Array, column, row),\n+        DataType::Float64 => make_string!(array::Float64Array, column, row),\n+        DataType::Timestamp(unit, _) if *unit == TimeUnit::Second => {\n+            make_string!(array::TimestampSecondArray, column, row)\n+        }\n+        DataType::Timestamp(unit, _) if *unit == TimeUnit::Millisecond => {\n+            make_string!(array::TimestampMillisecondArray, column, row)\n+        }\n+        DataType::Timestamp(unit, _) if *unit == TimeUnit::Microsecond => {\n+            make_string!(array::TimestampMicrosecondArray, column, row)\n+        }\n+        DataType::Timestamp(unit, _) if *unit == TimeUnit::Nanosecond => {\n+            make_string!(array::TimestampNanosecondArray, column, row)\n+        }\n+        DataType::Date32(_) => make_string!(array::Date32Array, column, row),\n+        DataType::Date64(_) => make_string!(array::Date64Array, column, row),\n+        DataType::Time32(unit) if *unit == TimeUnit::Second => {\n+            make_string!(array::Time32SecondArray, column, row)\n+        }\n+        DataType::Time32(unit) if *unit == TimeUnit::Millisecond => {\n+            make_string!(array::Time32MillisecondArray, column, row)\n+        }\n+        DataType::Time32(unit) if *unit == TimeUnit::Microsecond => {\n+            make_string!(array::Time64MicrosecondArray, column, row)\n+        }\n+        DataType::Time64(unit) if *unit == TimeUnit::Nanosecond => {\n+            make_string!(array::Time64NanosecondArray, column, row)\n+        }\n+        DataType::Dictionary(index_type, _value_type) => match **index_type {\n+            DataType::Int8 => dict_array_value_to_string::<Int8Type>(column, row),\n+            DataType::Int16 => dict_array_value_to_string::<Int16Type>(column, row),\n+            DataType::Int32 => dict_array_value_to_string::<Int32Type>(column, row),\n+            DataType::Int64 => dict_array_value_to_string::<Int64Type>(column, row),\n+            DataType::UInt8 => dict_array_value_to_string::<UInt8Type>(column, row),\n+            DataType::UInt16 => dict_array_value_to_string::<UInt16Type>(column, row),\n+            DataType::UInt32 => dict_array_value_to_string::<UInt32Type>(column, row),\n+            DataType::UInt64 => dict_array_value_to_string::<UInt64Type>(column, row),\n+            _ => Err(ArrowError::InvalidArgumentError(format!(\n+                \"Pretty printing not supported for {:?} due to index type\",\n+                column.data_type()\n+            ))),\n+        },\n+        _ => Err(ArrowError::InvalidArgumentError(format!(\n+            \"Pretty printing not implemented for {:?} type\",\n+            column.data_type()\n+        ))),\n+    }\n+}\n+\n+/// Converts the value of the dictionary array at `row` to a String\n+fn dict_array_value_to_string<K: ArrowPrimitiveType>(\n+    colum: &array::ArrayRef,\n+    row: usize,\n+) -> Result<String> {\n+    let dict_array = colum.as_any().downcast_ref::<DictionaryArray<K>>().unwrap();\n+\n+    let keys_array = dict_array.keys_array();\n+\n+    if keys_array.is_null(row) {\n+        return Ok(String::from(\"\"));\n+    }\n+\n+    let dict_index = keys_array.value(row).to_usize().ok_or_else(|| {\n+        ArrowError::InvalidArgumentError(format!(\n+            \"Can not convert value {:?} at index {:?} to usize for repl.\",\n\nReview comment:\n       ```suggestion\r\n               \"Can not convert value {:?} at index {:?} to usize for string conversion.\",\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-08T13:24:40.643+0000",
                    "updated": "2020-10-08T13:24:40.643+0000",
                    "started": "2020-10-08T13:24:40.642+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497327",
                    "issueId": "13334404"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334404/worklog/497392",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao closed pull request #8397:\nURL: https://github.com/apache/arrow/pull/8397\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-08T15:02:55.933+0000",
                    "updated": "2020-10-08T15:02:55.933+0000",
                    "started": "2020-10-08T15:02:55.933+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497392",
                    "issueId": "13334404"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334404/worklog/498039",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8397:\nURL: https://github.com/apache/arrow/pull/8397#issuecomment-705497672\n\n\n   https://issues.apache.org/jira/browse/ARROW-10233\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T13:30:01.115+0000",
                    "updated": "2020-10-09T13:30:01.115+0000",
                    "started": "2020-10-09T13:30:01.115+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498039",
                    "issueId": "13334404"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334404/worklog/498248",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8397:\nURL: https://github.com/apache/arrow/pull/8397#discussion_r501678317\n\n\n\n##########\nFile path: rust/arrow/src/util/display.rs\n##########\n@@ -0,0 +1,135 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Functions for printing array values, as strings, for debugging\n+//! purposes. See the `pretty` crate for additional functions for\n+//! record batch pretty printing.\n+\n+use crate::array;\n+use crate::array::{Array, PrimitiveArrayOps};\n+use crate::datatypes::{\n+    ArrowNativeType, ArrowPrimitiveType, DataType, Int16Type, Int32Type, Int64Type,\n+    Int8Type, TimeUnit, UInt16Type, UInt32Type, UInt64Type, UInt8Type,\n+};\n+\n+use array::DictionaryArray;\n+\n+use crate::error::{ArrowError, Result};\n+\n+macro_rules! make_string {\n+    ($array_type:ty, $column: ident, $row: ident) => {{\n+        let array = $column.as_any().downcast_ref::<$array_type>().unwrap();\n+\n+        let s = if array.is_null($row) {\n+            \"\".to_string()\n+        } else {\n+            array.value($row).to_string()\n+        };\n+\n+        Ok(s)\n+    }};\n+}\n+\n+/// Get the value at the given row in an array as a String.\n+///\n+/// Note this function is quite inefficient and is unlikely to be\n+/// suitable for converting large arrays or record batches.\n+pub fn array_value_to_string(column: &array::ArrayRef, row: usize) -> Result<String> {\n+    match column.data_type() {\n+        DataType::Utf8 => make_string!(array::StringArray, column, row),\n+        DataType::Boolean => make_string!(array::BooleanArray, column, row),\n+        DataType::Int8 => make_string!(array::Int8Array, column, row),\n+        DataType::Int16 => make_string!(array::Int16Array, column, row),\n+        DataType::Int32 => make_string!(array::Int32Array, column, row),\n+        DataType::Int64 => make_string!(array::Int64Array, column, row),\n+        DataType::UInt8 => make_string!(array::UInt8Array, column, row),\n+        DataType::UInt16 => make_string!(array::UInt16Array, column, row),\n+        DataType::UInt32 => make_string!(array::UInt32Array, column, row),\n+        DataType::UInt64 => make_string!(array::UInt64Array, column, row),\n+        DataType::Float16 => make_string!(array::Float32Array, column, row),\n+        DataType::Float32 => make_string!(array::Float32Array, column, row),\n+        DataType::Float64 => make_string!(array::Float64Array, column, row),\n+        DataType::Timestamp(unit, _) if *unit == TimeUnit::Second => {\n+            make_string!(array::TimestampSecondArray, column, row)\n+        }\n+        DataType::Timestamp(unit, _) if *unit == TimeUnit::Millisecond => {\n+            make_string!(array::TimestampMillisecondArray, column, row)\n+        }\n+        DataType::Timestamp(unit, _) if *unit == TimeUnit::Microsecond => {\n+            make_string!(array::TimestampMicrosecondArray, column, row)\n+        }\n+        DataType::Timestamp(unit, _) if *unit == TimeUnit::Nanosecond => {\n+            make_string!(array::TimestampNanosecondArray, column, row)\n+        }\n+        DataType::Date32(_) => make_string!(array::Date32Array, column, row),\n+        DataType::Date64(_) => make_string!(array::Date64Array, column, row),\n+        DataType::Time32(unit) if *unit == TimeUnit::Second => {\n+            make_string!(array::Time32SecondArray, column, row)\n+        }\n+        DataType::Time32(unit) if *unit == TimeUnit::Millisecond => {\n+            make_string!(array::Time32MillisecondArray, column, row)\n+        }\n+        DataType::Time32(unit) if *unit == TimeUnit::Microsecond => {\n+            make_string!(array::Time64MicrosecondArray, column, row)\n+        }\n+        DataType::Time64(unit) if *unit == TimeUnit::Nanosecond => {\n+            make_string!(array::Time64NanosecondArray, column, row)\n+        }\n+        DataType::Dictionary(index_type, _value_type) => match **index_type {\n+            DataType::Int8 => dict_array_value_to_string::<Int8Type>(column, row),\n+            DataType::Int16 => dict_array_value_to_string::<Int16Type>(column, row),\n+            DataType::Int32 => dict_array_value_to_string::<Int32Type>(column, row),\n+            DataType::Int64 => dict_array_value_to_string::<Int64Type>(column, row),\n+            DataType::UInt8 => dict_array_value_to_string::<UInt8Type>(column, row),\n+            DataType::UInt16 => dict_array_value_to_string::<UInt16Type>(column, row),\n+            DataType::UInt32 => dict_array_value_to_string::<UInt32Type>(column, row),\n+            DataType::UInt64 => dict_array_value_to_string::<UInt64Type>(column, row),\n+            _ => Err(ArrowError::InvalidArgumentError(format!(\n+                \"Pretty printing not supported for {:?} due to index type\",\n+                column.data_type()\n+            ))),\n+        },\n+        _ => Err(ArrowError::InvalidArgumentError(format!(\n+            \"Pretty printing not implemented for {:?} type\",\n+            column.data_type()\n+        ))),\n+    }\n+}\n+\n+/// Converts the value of the dictionary array at `row` to a String\n+fn dict_array_value_to_string<K: ArrowPrimitiveType>(\n+    colum: &array::ArrayRef,\n+    row: usize,\n+) -> Result<String> {\n+    let dict_array = colum.as_any().downcast_ref::<DictionaryArray<K>>().unwrap();\n+\n+    let keys_array = dict_array.keys_array();\n+\n+    if keys_array.is_null(row) {\n+        return Ok(String::from(\"\"));\n+    }\n+\n+    let dict_index = keys_array.value(row).to_usize().ok_or_else(|| {\n+        ArrowError::InvalidArgumentError(format!(\n+            \"Can not convert value {:?} at index {:?} to usize for repl.\",\n\nReview comment:\n       nit: remove `for repl`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T13:52:05.832+0000",
                    "updated": "2020-10-09T13:52:05.832+0000",
                    "started": "2020-10-09T13:52:05.832+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498248",
                    "issueId": "13334404"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334404/worklog/498250",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb opened a new pull request #8397:\nURL: https://github.com/apache/arrow/pull/8397\n\n\n   \r\n   This PR makes `array_value_to_string` available to all arrow builds. Currently it is only available if the `feature = \"prettyprint\"` is enabled. The full `print_batches` and `pretty_format_batches` (and the libraries they depend on) are still only available of the feature flag is set.\r\n   \r\n   The rationale for making this change is that I want to be able to use `array_value_to_string` to write tests (such as on https://github.com/apache/arrow/pull/8346) but currently it is only available when `feature = \"prettyprint\"` is enabled.\r\n   \r\n   It appears that @nevi-mi made prettyprint compilation optional so that arrow could be compiled for wasm in https://github.com/apache/arrow/pull/7400. https://issues.apache.org/jira/browse/ARROW-9088 explains that this is due to some dependency of pretty-table;   `array_value_to_string` has no needed dependencies.\r\n   \r\n   Note I tried to compile ARROW again using the `wasm32-unknown-unknown` target on master and it fails (perhaps due to a new dependency that was added?): \r\n   \r\n   <details>\r\n     <summary>Click to expand!</summary>\r\n   \r\n   ```\r\n   alamb@ip-192-168-0-182 rust % git log | head -n 1\r\n   git log | head -n 1\r\n   commit d4cbc4b7aab5d37262b83e972af4bd7cb44c7a5c\r\n   alamb@ip-192-168-0-182 rust % git status\r\n   git status\r\n   On branch master\r\n   Your branch is up to date with 'upstream/master'.\r\n   \r\n   nothing to commit, working tree clean\r\n   alamb@ip-192-168-0-182 rust % \r\n   \r\n   alamb@ip-192-168-0-182 rust % cargo build --target=wasm32-unknown-unknown\r\n   cargo build --target=wasm32-unknown-unknown\r\n      Compiling cfg-if v0.1.10\r\n      Compiling lazy_static v1.4.0\r\n      Compiling futures-core v0.3.5\r\n      Compiling slab v0.4.2\r\n      Compiling futures-sink v0.3.5\r\n      Compiling once_cell v1.4.0\r\n      Compiling pin-utils v0.1.0\r\n      Compiling futures-io v0.3.5\r\n      Compiling itoa v0.4.5\r\n      Compiling bytes v0.5.4\r\n      Compiling fnv v1.0.7\r\n      Compiling iovec v0.1.4\r\n      Compiling unicode-width v0.1.7\r\n      Compiling pin-project-lite v0.1.7\r\n      Compiling ppv-lite86 v0.2.8\r\n      Compiling atty v0.2.14\r\n      Compiling dirs v1.0.5\r\n      Compiling smallvec v1.4.0\r\n      Compiling regex-syntax v0.6.18\r\n      Compiling encode_unicode v0.3.6\r\n      Compiling hex v0.4.2\r\n      Compiling tower-service v0.3.0\r\n   error[E0433]: failed to resolve: could not find `unix` in `os`\r\n     --> /Users/alamb/.cargo/registry/src/github.com-1ecc6299db9ec823/dirs-1.0.5/src/lin.rs:41:18\r\n      |\r\n   41 |     use std::os::unix::ffi::OsStringExt;\r\n      |                  ^^^^ could not find `unix` in `os`\r\n   \r\n   error[E0432]: unresolved import `unix`\r\n    --> /Users/alamb/.cargo/registry/src/github.com-1ecc6299db9ec823/dirs-1.0.5/src/lin.rs:6:5\r\n     |\r\n   6 | use unix;\r\n     |     ^^^^ no `unix` in the root\r\n   \r\n      Compiling alloc-no-stdlib v2.0.1\r\n      Compiling adler32 v1.0.4\r\n   error[E0599]: no function or associated item named `from_vec` found for struct `std::ffi::OsString` in the current scope\r\n     --> /Users/alamb/.cargo/registry/src/github.com-1ecc6299db9ec823/dirs-1.0.5/src/lin.rs:48:34\r\n      |\r\n   48 |     Some(PathBuf::from(OsString::from_vec(out)))\r\n      |                                  ^^^^^^^^ function or associated item not found in `std::ffi::OsString`\r\n      |\r\n      = help: items from traits can only be used if the trait is in scope\r\n      = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\r\n              `use std::sys_common::os_str_bytes::OsStringExt;`\r\n   \r\n   error: aborting due to 3 previous errors\r\n   \r\n   Some errors have detailed explanations: E0432, E0433, E0599.\r\n   For more information about an error, try `rustc --explain E0432`.\r\n   error: could not compile `dirs`.\r\n   \r\n   To learn more, run the command again with --verbose.\r\n   warning: build failed, waiting for other jobs to finish...\r\n   error: build failed\r\n   alamb@ip-192-168-0-182 rust % ```\r\n   \r\n   </details>\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T13:52:10.097+0000",
                    "updated": "2020-10-09T13:52:10.097+0000",
                    "started": "2020-10-09T13:52:10.097+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498250",
                    "issueId": "13334404"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334404/worklog/498350",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8397:\nURL: https://github.com/apache/arrow/pull/8397#discussion_r501717377\n\n\n\n##########\nFile path: rust/arrow/src/util/display.rs\n##########\n@@ -0,0 +1,135 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Functions for printing array values, as strings, for debugging\n+//! purposes. See the `pretty` crate for additional functions for\n+//! record batch pretty printing.\n+\n+use crate::array;\n+use crate::array::{Array, PrimitiveArrayOps};\n+use crate::datatypes::{\n+    ArrowNativeType, ArrowPrimitiveType, DataType, Int16Type, Int32Type, Int64Type,\n+    Int8Type, TimeUnit, UInt16Type, UInt32Type, UInt64Type, UInt8Type,\n+};\n+\n+use array::DictionaryArray;\n+\n+use crate::error::{ArrowError, Result};\n+\n+macro_rules! make_string {\n+    ($array_type:ty, $column: ident, $row: ident) => {{\n+        let array = $column.as_any().downcast_ref::<$array_type>().unwrap();\n+\n+        let s = if array.is_null($row) {\n+            \"\".to_string()\n+        } else {\n+            array.value($row).to_string()\n+        };\n+\n+        Ok(s)\n+    }};\n+}\n+\n+/// Get the value at the given row in an array as a String.\n+///\n+/// Note this function is quite inefficient and is unlikely to be\n+/// suitable for converting large arrays or record batches.\n+pub fn array_value_to_string(column: &array::ArrayRef, row: usize) -> Result<String> {\n+    match column.data_type() {\n+        DataType::Utf8 => make_string!(array::StringArray, column, row),\n+        DataType::Boolean => make_string!(array::BooleanArray, column, row),\n+        DataType::Int8 => make_string!(array::Int8Array, column, row),\n+        DataType::Int16 => make_string!(array::Int16Array, column, row),\n+        DataType::Int32 => make_string!(array::Int32Array, column, row),\n+        DataType::Int64 => make_string!(array::Int64Array, column, row),\n+        DataType::UInt8 => make_string!(array::UInt8Array, column, row),\n+        DataType::UInt16 => make_string!(array::UInt16Array, column, row),\n+        DataType::UInt32 => make_string!(array::UInt32Array, column, row),\n+        DataType::UInt64 => make_string!(array::UInt64Array, column, row),\n+        DataType::Float16 => make_string!(array::Float32Array, column, row),\n+        DataType::Float32 => make_string!(array::Float32Array, column, row),\n+        DataType::Float64 => make_string!(array::Float64Array, column, row),\n+        DataType::Timestamp(unit, _) if *unit == TimeUnit::Second => {\n+            make_string!(array::TimestampSecondArray, column, row)\n+        }\n+        DataType::Timestamp(unit, _) if *unit == TimeUnit::Millisecond => {\n+            make_string!(array::TimestampMillisecondArray, column, row)\n+        }\n+        DataType::Timestamp(unit, _) if *unit == TimeUnit::Microsecond => {\n+            make_string!(array::TimestampMicrosecondArray, column, row)\n+        }\n+        DataType::Timestamp(unit, _) if *unit == TimeUnit::Nanosecond => {\n+            make_string!(array::TimestampNanosecondArray, column, row)\n+        }\n+        DataType::Date32(_) => make_string!(array::Date32Array, column, row),\n+        DataType::Date64(_) => make_string!(array::Date64Array, column, row),\n+        DataType::Time32(unit) if *unit == TimeUnit::Second => {\n+            make_string!(array::Time32SecondArray, column, row)\n+        }\n+        DataType::Time32(unit) if *unit == TimeUnit::Millisecond => {\n+            make_string!(array::Time32MillisecondArray, column, row)\n+        }\n+        DataType::Time32(unit) if *unit == TimeUnit::Microsecond => {\n+            make_string!(array::Time64MicrosecondArray, column, row)\n+        }\n+        DataType::Time64(unit) if *unit == TimeUnit::Nanosecond => {\n+            make_string!(array::Time64NanosecondArray, column, row)\n+        }\n+        DataType::Dictionary(index_type, _value_type) => match **index_type {\n+            DataType::Int8 => dict_array_value_to_string::<Int8Type>(column, row),\n+            DataType::Int16 => dict_array_value_to_string::<Int16Type>(column, row),\n+            DataType::Int32 => dict_array_value_to_string::<Int32Type>(column, row),\n+            DataType::Int64 => dict_array_value_to_string::<Int64Type>(column, row),\n+            DataType::UInt8 => dict_array_value_to_string::<UInt8Type>(column, row),\n+            DataType::UInt16 => dict_array_value_to_string::<UInt16Type>(column, row),\n+            DataType::UInt32 => dict_array_value_to_string::<UInt32Type>(column, row),\n+            DataType::UInt64 => dict_array_value_to_string::<UInt64Type>(column, row),\n+            _ => Err(ArrowError::InvalidArgumentError(format!(\n+                \"Pretty printing not supported for {:?} due to index type\",\n+                column.data_type()\n+            ))),\n+        },\n+        _ => Err(ArrowError::InvalidArgumentError(format!(\n+            \"Pretty printing not implemented for {:?} type\",\n+            column.data_type()\n+        ))),\n+    }\n+}\n+\n+/// Converts the value of the dictionary array at `row` to a String\n+fn dict_array_value_to_string<K: ArrowPrimitiveType>(\n+    colum: &array::ArrayRef,\n+    row: usize,\n+) -> Result<String> {\n+    let dict_array = colum.as_any().downcast_ref::<DictionaryArray<K>>().unwrap();\n+\n+    let keys_array = dict_array.keys_array();\n+\n+    if keys_array.is_null(row) {\n+        return Ok(String::from(\"\"));\n+    }\n+\n+    let dict_index = keys_array.value(row).to_usize().ok_or_else(|| {\n+        ArrowError::InvalidArgumentError(format!(\n+            \"Can not convert value {:?} at index {:?} to usize for repl.\",\n\nReview comment:\n       ```suggestion\r\n               \"Can not convert value {:?} at index {:?} to usize for string conversion.\",\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T14:00:08.027+0000",
                    "updated": "2020-10-09T14:00:08.027+0000",
                    "started": "2020-10-09T14:00:08.026+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498350",
                    "issueId": "13334404"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334404/worklog/498405",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao closed pull request #8397:\nURL: https://github.com/apache/arrow/pull/8397\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T14:04:37.711+0000",
                    "updated": "2020-10-09T14:04:37.711+0000",
                    "started": "2020-10-09T14:04:37.710+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498405",
                    "issueId": "13334404"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 6000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@12c30bf5[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6052cfa6[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@279689[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@76fe46d4[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@fb78f0b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@8c58b94[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@346ac7db[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@30a6ef64[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@35af1ac[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@27e74378[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@45d10c40[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@420b1651[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6000,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Oct 08 15:02:53 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-10-08T15:02:52.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10233/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-10-08T10:48:07.000+0000",
        "updated": "2020-10-09T14:04:38.000+0000",
        "timeoriginalestimate": null,
        "description": "Make array_value_to_string available in all Arrow builds\r\n\r\nCurrently the array_value_to_string function it is only available if the `feature = \"prettyprint\"` is enabled. \r\n\r\nThe rationale for making this change is that I want to be able to use `array_value_to_string` to write tests (such as on https://github.com/apache/arrow/pull/8346) but currently it is only available when `feature = \"prettyprint\"` is enabled.\r\n\r\nIt appears that [~nevi_me] made prettyprint compilation optional so that arrow could be compiled for wasm in https://github.com/apache/arrow/pull/7400. https://issues.apache.org/jira/browse/ARROW-9088 explains that this is due to some dependency of pretty-table;   `array_value_to_string` has no needed dependencies.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Make array_value_to_string available in all Arrow builds",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334404/comment/17210275",
                    "id": "17210275",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 8397\n[https://github.com/apache/arrow/pull/8397]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-10-08T15:02:53.013+0000",
                    "updated": "2020-10-08T15:02:53.013+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0jixk:",
        "customfield_12314139": null
    }
}