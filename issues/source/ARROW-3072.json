{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13179600",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179600",
    "key": "ARROW-3072",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 1800,
            "total": 1800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 1800,
            "total": 1800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3072/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 3,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179600/worklog/144639",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm opened a new pull request #2568: ARROW-3072: [C++] Add RETURN_NOT_OK linting rule, use ARROW_RETURN_NOT_OK in header files\nURL: https://github.com/apache/arrow/pull/2568\n \n \n   This also checks whether `RETURN_NOT_OK` is defined in case another codebase exposes such a define in its headers and is included first\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-15T21:13:56.025+0000",
                    "updated": "2018-09-15T21:13:56.025+0000",
                    "started": "2018-09-15T21:13:56.025+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144639",
                    "issueId": "13179600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179600/worklog/145474",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2568: ARROW-3072: [C++] Add RETURN_NOT_OK linting rule, use ARROW_RETURN_NOT_OK in header files\nURL: https://github.com/apache/arrow/pull/2568#issuecomment-422553129\n \n \n   Is this OK to merge?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-18T21:00:56.455+0000",
                    "updated": "2018-09-18T21:00:56.455+0000",
                    "started": "2018-09-18T21:00:56.454+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "145474",
                    "issueId": "13179600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179600/worklog/145604",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy closed pull request #2568: ARROW-3072: [C++] Add RETURN_NOT_OK linting rule, use ARROW_RETURN_NOT_OK in header files\nURL: https://github.com/apache/arrow/pull/2568\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/build-support/lint_cpp_cli.py b/cpp/build-support/lint_cpp_cli.py\nindex d330d8be50..0c6bad1af9 100644\n--- a/cpp/build-support/lint_cpp_cli.py\n+++ b/cpp/build-support/lint_cpp_cli.py\n@@ -31,6 +31,7 @@\n \n _STRIP_COMMENT_REGEX = re.compile('(.+)?(?=//)')\n _NULLPTR_REGEX = re.compile(r'.*\\bnullptr\\b.*')\n+_RETURN_NOT_OK_REGEX = re.compile(r'.*\\sRETURN_NOT_OK.*')\n \n \n def _strip_comments(line):\n@@ -43,14 +44,24 @@ def _strip_comments(line):\n \n def lint_file(path):\n     fail_rules = [\n-        (lambda x: '<mutex>' in x, 'Uses <mutex>'),\n-        (lambda x: re.match(_NULLPTR_REGEX, x), 'Uses nullptr')\n+        # rule, error message, rule-specific exclusions list\n+        (lambda x: '<mutex>' in x, 'Uses <mutex>', []),\n+        (lambda x: re.match(_NULLPTR_REGEX, x), 'Uses nullptr', []),\n+        (lambda x: re.match(_RETURN_NOT_OK_REGEX, x),\n+         'Use ARROW_RETURN_NOT_OK in header files',\n+         ['arrow/status.h',\n+          'test',\n+          'arrow/util/hash.h',\n+          'arrow/python/util'])\n     ]\n \n     with open(path) as f:\n         for i, line in enumerate(f):\n             stripped_line = _strip_comments(line)\n-            for rule, why in fail_rules:\n+            for rule, why, rule_exclusions in fail_rules:\n+                if any([True for excl in rule_exclusions if excl in path]):\n+                    continue\n+\n                 if rule(stripped_line):\n                     raise Exception('File {0} failed C++/CLI lint check: {1}\\n'\n                                     'Line {2}: {3}'\ndiff --git a/cpp/src/arrow/buffer.h b/cpp/src/arrow/buffer.h\nindex 99beb2343b..4f0295a190 100644\n--- a/cpp/src/arrow/buffer.h\n+++ b/cpp/src/arrow/buffer.h\n@@ -345,9 +345,9 @@ class ARROW_EXPORT BufferBuilder {\n     int64_t old_capacity = capacity_;\n \n     if (buffer_ == NULLPTR) {\n-      RETURN_NOT_OK(AllocateResizableBuffer(pool_, elements, &buffer_));\n+      ARROW_RETURN_NOT_OK(AllocateResizableBuffer(pool_, elements, &buffer_));\n     } else {\n-      RETURN_NOT_OK(buffer_->Resize(elements, shrink_to_fit));\n+      ARROW_RETURN_NOT_OK(buffer_->Resize(elements, shrink_to_fit));\n     }\n     capacity_ = buffer_->capacity();\n     data_ = buffer_->mutable_data();\n@@ -367,7 +367,7 @@ class ARROW_EXPORT BufferBuilder {\n   Status Append(const void* data, int64_t length) {\n     if (capacity_ < length + size_) {\n       int64_t new_capacity = BitUtil::NextPower2(length + size_);\n-      RETURN_NOT_OK(Resize(new_capacity));\n+      ARROW_RETURN_NOT_OK(Resize(new_capacity));\n     }\n     UnsafeAppend(data, length);\n     return Status::OK();\n@@ -378,7 +378,7 @@ class ARROW_EXPORT BufferBuilder {\n     constexpr auto nbytes = static_cast<int64_t>(NBYTES);\n     if (capacity_ < nbytes + size_) {\n       int64_t new_capacity = BitUtil::NextPower2(nbytes + size_);\n-      RETURN_NOT_OK(Resize(new_capacity));\n+      ARROW_RETURN_NOT_OK(Resize(new_capacity));\n     }\n \n     std::copy(data.cbegin(), data.cend(), data_ + size_);\n@@ -390,7 +390,7 @@ class ARROW_EXPORT BufferBuilder {\n   Status Advance(const int64_t length) {\n     if (capacity_ < length + size_) {\n       int64_t new_capacity = BitUtil::NextPower2(length + size_);\n-      RETURN_NOT_OK(Resize(new_capacity));\n+      ARROW_RETURN_NOT_OK(Resize(new_capacity));\n     }\n     memset(data_ + size_, 0, static_cast<size_t>(length));\n     size_ += length;\n@@ -404,7 +404,7 @@ class ARROW_EXPORT BufferBuilder {\n   }\n \n   Status Finish(std::shared_ptr<Buffer>* out, bool shrink_to_fit = true) {\n-    RETURN_NOT_OK(Resize(size_, shrink_to_fit));\n+    ARROW_RETURN_NOT_OK(Resize(size_, shrink_to_fit));\n     *out = buffer_;\n     Reset();\n     return Status::OK();\ndiff --git a/cpp/src/arrow/builder.h b/cpp/src/arrow/builder.h\nindex 432ea9f879..96741974f4 100644\n--- a/cpp/src/arrow/builder.h\n+++ b/cpp/src/arrow/builder.h\n@@ -235,7 +235,7 @@ class ARROW_EXPORT PrimitiveBuilder : public ArrayBuilder {\n   /// The memory at the corresponding data slot is set to 0 to prevent uninitialized\n   /// memory access\n   Status AppendNulls(const uint8_t* valid_bytes, int64_t length) {\n-    RETURN_NOT_OK(Reserve(length));\n+    ARROW_RETURN_NOT_OK(Reserve(length));\n     memset(raw_data_ + length_, 0,\n            static_cast<size_t>(TypeTraits<Type>::bytes_required(length)));\n     UnsafeAppendToBitmap(valid_bytes, length);\n@@ -243,7 +243,7 @@ class ARROW_EXPORT PrimitiveBuilder : public ArrayBuilder {\n   }\n \n   Status AppendNull() {\n-    RETURN_NOT_OK(Reserve(1));\n+    ARROW_RETURN_NOT_OK(Reserve(1));\n     memset(raw_data_ + length_, 0, sizeof(value_type));\n     UnsafeAppendToBitmap(false);\n     return Status::OK();\n@@ -292,7 +292,7 @@ class ARROW_EXPORT PrimitiveBuilder : public ArrayBuilder {\n   template <typename ValuesIter>\n   Status AppendValues(ValuesIter values_begin, ValuesIter values_end) {\n     int64_t length = static_cast<int64_t>(std::distance(values_begin, values_end));\n-    RETURN_NOT_OK(Reserve(length));\n+    ARROW_RETURN_NOT_OK(Reserve(length));\n \n     std::copy(values_begin, values_end, raw_data_ + length_);\n \n@@ -314,7 +314,7 @@ class ARROW_EXPORT PrimitiveBuilder : public ArrayBuilder {\n                   \"Don't pass a NULLPTR directly as valid_begin, use the 2-argument \"\n                   \"version instead\");\n     int64_t length = static_cast<int64_t>(std::distance(values_begin, values_end));\n-    RETURN_NOT_OK(Reserve(length));\n+    ARROW_RETURN_NOT_OK(Reserve(length));\n \n     std::copy(values_begin, values_end, raw_data_ + length_);\n \n@@ -333,7 +333,7 @@ class ARROW_EXPORT PrimitiveBuilder : public ArrayBuilder {\n   typename std::enable_if<std::is_pointer<ValidIter>::value, Status>::type AppendValues(\n       ValuesIter values_begin, ValuesIter values_end, ValidIter valid_begin) {\n     int64_t length = static_cast<int64_t>(std::distance(values_begin, values_end));\n-    RETURN_NOT_OK(Reserve(length));\n+    ARROW_RETURN_NOT_OK(Reserve(length));\n \n     std::copy(values_begin, values_end, raw_data_ + length_);\n \n@@ -376,7 +376,7 @@ class ARROW_EXPORT NumericBuilder : public PrimitiveBuilder<T> {\n \n   /// Append a single scalar and increase the size if necessary.\n   Status Append(const value_type val) {\n-    RETURN_NOT_OK(ArrayBuilder::Reserve(1));\n+    ARROW_RETURN_NOT_OK(ArrayBuilder::Reserve(1));\n     UnsafeAppend(val);\n     return Status::OK();\n   }\n@@ -426,14 +426,14 @@ class ARROW_EXPORT AdaptiveIntBuilderBase : public ArrayBuilder {\n \n   /// Write nulls as uint8_t* (0 value indicates null) into pre-allocated memory\n   Status AppendNulls(const uint8_t* valid_bytes, int64_t length) {\n-    RETURN_NOT_OK(Reserve(length));\n+    ARROW_RETURN_NOT_OK(Reserve(length));\n     memset(data_->mutable_data() + length_ * int_size_, 0, int_size_ * length);\n     UnsafeAppendToBitmap(valid_bytes, length);\n     return Status::OK();\n   }\n \n   Status AppendNull() {\n-    RETURN_NOT_OK(Reserve(1));\n+    ARROW_RETURN_NOT_OK(Reserve(1));\n     memset(data_->mutable_data() + length_ * int_size_, 0, int_size_);\n     UnsafeAppendToBitmap(false);\n     return Status::OK();\n@@ -501,12 +501,12 @@ class ARROW_EXPORT AdaptiveUIntBuilder : public internal::AdaptiveIntBuilderBase\n \n   /// Scalar append\n   Status Append(const uint64_t val) {\n-    RETURN_NOT_OK(Reserve(1));\n+    ARROW_RETURN_NOT_OK(Reserve(1));\n     BitUtil::SetBit(null_bitmap_data_, length_);\n \n     uint8_t new_int_size = internal::ExpandedUIntSize(val, int_size_);\n     if (new_int_size != int_size_) {\n-      RETURN_NOT_OK(ExpandIntSize(new_int_size));\n+      ARROW_RETURN_NOT_OK(ExpandIntSize(new_int_size));\n     }\n \n     switch (int_size_) {\n@@ -564,12 +564,12 @@ class ARROW_EXPORT AdaptiveIntBuilder : public internal::AdaptiveIntBuilderBase\n \n   /// Scalar append\n   Status Append(const int64_t val) {\n-    RETURN_NOT_OK(Reserve(1));\n+    ARROW_RETURN_NOT_OK(Reserve(1));\n     BitUtil::SetBit(null_bitmap_data_, length_);\n \n     uint8_t new_int_size = internal::ExpandedIntSize(val, int_size_);\n     if (new_int_size != int_size_) {\n-      RETURN_NOT_OK(ExpandIntSize(new_int_size));\n+      ARROW_RETURN_NOT_OK(ExpandIntSize(new_int_size));\n     }\n \n     switch (int_size_) {\n@@ -629,14 +629,14 @@ class ARROW_EXPORT BooleanBuilder : public ArrayBuilder {\n \n   /// Write nulls as uint8_t* (0 value indicates null) into pre-allocated memory\n   Status AppendNulls(const uint8_t* valid_bytes, int64_t length) {\n-    RETURN_NOT_OK(Reserve(length));\n+    ARROW_RETURN_NOT_OK(Reserve(length));\n     UnsafeAppendToBitmap(valid_bytes, length);\n \n     return Status::OK();\n   }\n \n   Status AppendNull() {\n-    RETURN_NOT_OK(Reserve(1));\n+    ARROW_RETURN_NOT_OK(Reserve(1));\n     UnsafeAppendToBitmap(false);\n \n     return Status::OK();\n@@ -644,7 +644,7 @@ class ARROW_EXPORT BooleanBuilder : public ArrayBuilder {\n \n   /// Scalar append\n   Status Append(const bool val) {\n-    RETURN_NOT_OK(Reserve(1));\n+    ARROW_RETURN_NOT_OK(Reserve(1));\n     BitUtil::SetBit(null_bitmap_data_, length_);\n     if (val) {\n       BitUtil::SetBit(raw_data_, length_);\n@@ -708,7 +708,7 @@ class ARROW_EXPORT BooleanBuilder : public ArrayBuilder {\n   template <typename ValuesIter>\n   Status AppendValues(ValuesIter values_begin, ValuesIter values_end) {\n     int64_t length = static_cast<int64_t>(std::distance(values_begin, values_end));\n-    RETURN_NOT_OK(Reserve(length));\n+    ARROW_RETURN_NOT_OK(Reserve(length));\n     auto iter = values_begin;\n     internal::GenerateBitsUnrolled(raw_data_, length_, length,\n                                    [&iter]() -> bool { return *(iter++); });\n@@ -731,7 +731,7 @@ class ARROW_EXPORT BooleanBuilder : public ArrayBuilder {\n                   \"Don't pass a NULLPTR directly as valid_begin, use the 2-argument \"\n                   \"version instead\");\n     int64_t length = static_cast<int64_t>(std::distance(values_begin, values_end));\n-    RETURN_NOT_OK(Reserve(length));\n+    ARROW_RETURN_NOT_OK(Reserve(length));\n \n     auto iter = values_begin;\n     internal::GenerateBitsUnrolled(raw_data_, length_, length,\n@@ -752,7 +752,7 @@ class ARROW_EXPORT BooleanBuilder : public ArrayBuilder {\n   typename std::enable_if<std::is_pointer<ValidIter>::value, Status>::type AppendValues(\n       ValuesIter values_begin, ValuesIter values_end, ValidIter valid_begin) {\n     int64_t length = static_cast<int64_t>(std::distance(values_begin, values_end));\n-    RETURN_NOT_OK(Reserve(length));\n+    ARROW_RETURN_NOT_OK(Reserve(length));\n \n     auto iter = values_begin;\n     internal::GenerateBitsUnrolled(raw_data_, length_, length,\n@@ -919,7 +919,7 @@ class ARROW_EXPORT FixedSizeBinaryBuilder : public ArrayBuilder {\n                          MemoryPool* pool ARROW_MEMORY_POOL_DEFAULT);\n \n   Status Append(const uint8_t* value) {\n-    RETURN_NOT_OK(Reserve(1));\n+    ARROW_RETURN_NOT_OK(Reserve(1));\n     UnsafeAppendToBitmap(true);\n     return byte_builder_.Append(value, byte_width_);\n   }\n@@ -929,7 +929,7 @@ class ARROW_EXPORT FixedSizeBinaryBuilder : public ArrayBuilder {\n \n   template <size_t NBYTES>\n   Status Append(const std::array<uint8_t, NBYTES>& value) {\n-    RETURN_NOT_OK(Reserve(1));\n+    ARROW_RETURN_NOT_OK(Reserve(1));\n     UnsafeAppendToBitmap(true);\n     return byte_builder_.Append(value);\n   }\n@@ -994,7 +994,7 @@ class ARROW_EXPORT StructBuilder : public ArrayBuilder {\n   /// end methods or advance methods of the child builders' independently to\n   /// insert data.\n   Status AppendValues(int64_t length, const uint8_t* valid_bytes) {\n-    RETURN_NOT_OK(Reserve(length));\n+    ARROW_RETURN_NOT_OK(Reserve(length));\n     UnsafeAppendToBitmap(valid_bytes, length);\n     return Status::OK();\n   }\n@@ -1002,7 +1002,7 @@ class ARROW_EXPORT StructBuilder : public ArrayBuilder {\n   /// Append an element to the Struct. All child-builders' Append method must\n   /// be called independently to maintain data-structure consistency.\n   Status Append(bool is_valid = true) {\n-    RETURN_NOT_OK(Reserve(1));\n+    ARROW_RETURN_NOT_OK(Reserve(1));\n     UnsafeAppendToBitmap(is_valid);\n     return Status::OK();\n   }\ndiff --git a/cpp/src/arrow/python/common.h b/cpp/src/arrow/python/common.h\nindex 41af3493ea..5779ef0976 100644\n--- a/cpp/src/arrow/python/common.h\n+++ b/cpp/src/arrow/python/common.h\n@@ -50,9 +50,9 @@ inline Status CheckPyError(StatusCode code = StatusCode::UnknownError) {\n ARROW_EXPORT Status PassPyError();\n \n // TODO(wesm): We can just let errors pass through. To be explored later\n-#define RETURN_IF_PYERROR() RETURN_NOT_OK(CheckPyError());\n+#define RETURN_IF_PYERROR() ARROW_RETURN_NOT_OK(CheckPyError());\n \n-#define PY_RETURN_IF_ERROR(CODE) RETURN_NOT_OK(CheckPyError(CODE));\n+#define PY_RETURN_IF_ERROR(CODE) ARROW_RETURN_NOT_OK(CheckPyError(CODE));\n \n class ARROW_EXPORT PyAcquireGIL {\n  public:\n@@ -186,7 +186,7 @@ struct PyBytesView {\n       *is_utf8 = true;\n       return FromUnicode(obj);\n     } else {\n-      RETURN_NOT_OK(FromBinary(obj, \"a string or bytes object\"));\n+      ARROW_RETURN_NOT_OK(FromBinary(obj, \"a string or bytes object\"));\n       if (check_utf8) {\n         // Check the bytes are utf8 utf-8\n         OwnedRef decoded(PyUnicode_FromStringAndSize(bytes, size));\ndiff --git a/cpp/src/arrow/status.h b/cpp/src/arrow/status.h\nindex 4df6cc5bbd..2a652c8fc3 100644\n--- a/cpp/src/arrow/status.h\n+++ b/cpp/src/arrow/status.h\n@@ -29,7 +29,7 @@\n \n #ifdef ARROW_EXTRA_ERROR_CONTEXT\n \n-#define RETURN_NOT_OK(s)                                                            \\\n+#define ARROW_RETURN_NOT_OK(s)                                                      \\\n   do {                                                                              \\\n     ::arrow::Status _s = (s);                                                       \\\n     if (ARROW_PREDICT_FALSE(!_s.ok())) {                                            \\\n@@ -41,7 +41,7 @@\n \n #else\n \n-#define RETURN_NOT_OK(s)                 \\\n+#define ARROW_RETURN_NOT_OK(s)           \\\n   do {                                   \\\n     ::arrow::Status _s = (s);            \\\n     if (ARROW_PREDICT_FALSE(!_s.ok())) { \\\n@@ -60,11 +60,10 @@\n     }                                \\\n   } while (false)\n \n-// This is used by other codebases. The macros above\n-// should probably have that prefix, but there is a\n-// lot of code that already uses that macro and changing\n-// it would be of no benefit.\n-#define ARROW_RETURN_NOT_OK(s) RETURN_NOT_OK(s)\n+// This is an internal-use macro and should not be used in public headers.\n+#ifndef RETURN_NOT_OK\n+#define RETURN_NOT_OK(s) ARROW_RETURN_NOT_OK(s)\n+#endif\n \n namespace arrow {\n \ndiff --git a/cpp/src/arrow/util/io-util.h b/cpp/src/arrow/util/io-util.h\nindex 62ae2a6f24..f4167dc31e 100644\n--- a/cpp/src/arrow/util/io-util.h\n+++ b/cpp/src/arrow/util/io-util.h\n@@ -105,10 +105,10 @@ class StdinStream : public InputStream {\n \n   Status Read(int64_t nbytes, std::shared_ptr<Buffer>* out) override {\n     std::shared_ptr<ResizableBuffer> buffer;\n-    RETURN_NOT_OK(AllocateResizableBuffer(nbytes, &buffer));\n+    ARROW_RETURN_NOT_OK(AllocateResizableBuffer(nbytes, &buffer));\n     int64_t bytes_read;\n-    RETURN_NOT_OK(Read(nbytes, &bytes_read, buffer->mutable_data()));\n-    RETURN_NOT_OK(buffer->Resize(bytes_read, false));\n+    ARROW_RETURN_NOT_OK(Read(nbytes, &bytes_read, buffer->mutable_data()));\n+    ARROW_RETURN_NOT_OK(buffer->Resize(bytes_read, false));\n     buffer->ZeroPadding();\n     *out = buffer;\n     return Status::OK();\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-19T09:24:55.694+0000",
                    "updated": "2018-09-19T09:24:55.694+0000",
                    "started": "2018-09-19T09:24:55.693+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "145604",
                    "issueId": "13179600"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 1800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@23f3b14b[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@26ac6954[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@66e96486[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@234a57c6[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@289433a7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7ec86e3[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a8c0fcc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5b89993c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@520980e1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3131cfdd[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b894458[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6c5e626c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 1800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Sep 19 09:24:46 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-09-19T09:24:46.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3072/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-08-17T14:40:51.000+0000",
        "updated": "2018-09-19T09:24:55.000+0000",
        "timeoriginalestimate": null,
        "description": "The {{RETURN_NOT_OK}} macro could conceivably collide with macros in other libraries. It would be better to use the scoped macro in public headers",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "0.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 1800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Use ARROW_RETURN_NOT_OK instead of RETURN_NOT_OK in header files",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179600/comment/16597903",
                    "id": "16597903",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "As a matter of code hygiene we should add a lint check for this in https://github.com/apache/arrow/blob/master/cpp/build-support/lint_cpp_cli.py\r\n\r\nAdditionally, to avoid collisions in third party software, we should make {{ARROW_RETURN_NOT_OK}} the default macro definition, and aliasing this to {{RETURN_NOT_OK}} _only_ if the latter is not already defined (so we do not clobber someone else's macro). This way we don't have to change any .cc files and our builds will continue to work.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-08-30T20:35:14.297+0000",
                    "updated": "2018-08-30T20:35:14.297+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179600/comment/16620359",
                    "id": "16620359",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 2568\n[https://github.com/apache/arrow/pull/2568]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-09-19T09:24:46.045+0000",
                    "updated": "2018-09-19T09:24:46.045+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|i3x5pr:",
        "customfield_12314139": null
    }
}