{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13122654",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654",
    "key": "ARROW-1886",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12529473",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12529473",
                "type": {
                    "id": "12310360",
                    "name": "Dependent",
                    "inward": "Dependent",
                    "outward": "Dependent",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310360"
                },
                "outwardIssue": {
                    "id": "13145385",
                    "key": "ARROW-2315",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13145385",
                    "fields": {
                        "summary": "[C++/Python] Add method to flatten a struct array",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12521471",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12521471",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13121802",
                    "key": "ARROW-1873",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13121802",
                    "fields": {
                        "summary": "[Python] Segmentation fault when loading total 2GB of parquet files",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 600,
            "total": 600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 600,
            "total": 600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1886/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 1,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/worklog/97883",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #1768: ARROW-1886: [C++/Python] Flatten struct columns in table \nURL: https://github.com/apache/arrow/pull/1768\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/table.cc b/cpp/src/arrow/table.cc\nindex 8af47ea220..313b518c56 100644\n--- a/cpp/src/arrow/table.cc\n+++ b/cpp/src/arrow/table.cc\n@@ -139,6 +139,38 @@ std::shared_ptr<ChunkedArray> ChunkedArray::Slice(int64_t offset) const {\n   return Slice(offset, length_);\n }\n \n+Status ChunkedArray::Flatten(MemoryPool* pool,\n+                             std::vector<std::shared_ptr<ChunkedArray>>* out) const {\n+  std::vector<std::shared_ptr<ChunkedArray>> flattened;\n+  if (type()->id() != Type::STRUCT) {\n+    // Emulate non-existent copy constructor\n+    flattened.emplace_back(std::make_shared<ChunkedArray>(chunks_, type_));\n+    *out = flattened;\n+    return Status::OK();\n+  }\n+  std::vector<ArrayVector> flattened_chunks;\n+  for (const auto& chunk : chunks_) {\n+    ArrayVector res;\n+    RETURN_NOT_OK(dynamic_cast<const StructArray&>(*chunk).Flatten(pool, &res));\n+    if (!flattened_chunks.size()) {\n+      // First chunk\n+      for (const auto& array : res) {\n+        flattened_chunks.push_back({array});\n+      }\n+    } else {\n+      DCHECK_EQ(flattened_chunks.size(), res.size());\n+      for (size_t i = 0; i < res.size(); ++i) {\n+        flattened_chunks[i].push_back(res[i]);\n+      }\n+    }\n+  }\n+  for (const auto& vec : flattened_chunks) {\n+    flattened.emplace_back(std::make_shared<ChunkedArray>(vec));\n+  }\n+  *out = flattened;\n+  return Status::OK();\n+}\n+\n Column::Column(const std::shared_ptr<Field>& field, const ArrayVector& chunks)\n     : field_(field) {\n   data_ = std::make_shared<ChunkedArray>(chunks, field->type());\n@@ -160,6 +192,20 @@ Column::Column(const std::shared_ptr<Field>& field,\n                const std::shared_ptr<ChunkedArray>& data)\n     : field_(field), data_(data) {}\n \n+Status Column::Flatten(MemoryPool* pool,\n+                       std::vector<std::shared_ptr<Column>>* out) const {\n+  std::vector<std::shared_ptr<Column>> flattened;\n+  std::vector<std::shared_ptr<Field>> flattened_fields = field_->Flatten();\n+  std::vector<std::shared_ptr<ChunkedArray>> flattened_data;\n+  RETURN_NOT_OK(data_->Flatten(pool, &flattened_data));\n+  DCHECK_EQ(flattened_fields.size(), flattened_data.size());\n+  for (size_t i = 0; i < flattened_fields.size(); ++i) {\n+    flattened.push_back(std::make_shared<Column>(flattened_fields[i], flattened_data[i]));\n+  }\n+  *out = flattened;\n+  return Status::OK();\n+}\n+\n bool Column::Equals(const Column& other) const {\n   if (!field_->Equals(other.field())) {\n     return false;\n@@ -268,12 +314,28 @@ class SimpleTable : public Table {\n     return Table::Make(new_schema, columns_);\n   }\n \n+  Status Flatten(MemoryPool* pool, std::shared_ptr<Table>* out) const override {\n+    std::vector<std::shared_ptr<Field>> flattened_fields;\n+    std::vector<std::shared_ptr<Column>> flattened_columns;\n+    for (const auto& column : columns_) {\n+      std::vector<std::shared_ptr<Column>> new_columns;\n+      RETURN_NOT_OK(column->Flatten(pool, &new_columns));\n+      for (const auto& new_col : new_columns) {\n+        flattened_fields.push_back(new_col->field());\n+        flattened_columns.push_back(new_col);\n+      }\n+    }\n+    auto flattened_schema =\n+        std::make_shared<Schema>(flattened_fields, schema_->metadata());\n+    *out = Table::Make(flattened_schema, flattened_columns);\n+    return Status::OK();\n+  }\n+\n   Status Validate() const override {\n+    // Make sure columns and schema are consistent\n     if (static_cast<int>(columns_.size()) != schema_->num_fields()) {\n       return Status::Invalid(\"Number of columns did not match schema\");\n     }\n-\n-    // Make sure columns are all the same length\n     for (int i = 0; i < num_columns(); ++i) {\n       const Column* col = columns_[i].get();\n       if (col == nullptr) {\n@@ -281,6 +343,17 @@ class SimpleTable : public Table {\n         ss << \"Column \" << i << \" was null\";\n         return Status::Invalid(ss.str());\n       }\n+      if (!col->field()->Equals(*schema_->field(i))) {\n+        std::stringstream ss;\n+        ss << \"Column field \" << i << \" named \" << col->name()\n+           << \" is inconsistent with schema\";\n+        return Status::Invalid(ss.str());\n+      }\n+    }\n+\n+    // Make sure columns are all the same length\n+    for (int i = 0; i < num_columns(); ++i) {\n+      const Column* col = columns_[i].get();\n       if (col->length() != num_rows_) {\n         std::stringstream ss;\n         ss << \"Column \" << i << \" named \" << col->name() << \" expected length \"\ndiff --git a/cpp/src/arrow/table.h b/cpp/src/arrow/table.h\nindex 32af224ff4..7fa207fee2 100644\n--- a/cpp/src/arrow/table.h\n+++ b/cpp/src/arrow/table.h\n@@ -69,6 +69,13 @@ class ARROW_EXPORT ChunkedArray {\n   /// \\brief Slice from offset until end of the chunked array\n   std::shared_ptr<ChunkedArray> Slice(int64_t offset) const;\n \n+  /// \\brief Flatten this chunked array as a vector of chunked arrays, one\n+  /// for each struct field\n+  ///\n+  /// \\param[in] pool The pool for buffer allocations, if any\n+  /// \\param[out] out The resulting vector of arrays\n+  Status Flatten(MemoryPool* pool, std::vector<std::shared_ptr<ChunkedArray>>* out) const;\n+\n   std::shared_ptr<DataType> type() const { return type_; }\n \n   bool Equals(const ChunkedArray& other) const;\n@@ -133,6 +140,12 @@ class ARROW_EXPORT Column {\n     return std::make_shared<Column>(field_, data_->Slice(offset));\n   }\n \n+  /// \\brief Flatten this column as a vector of columns\n+  ///\n+  /// \\param[in] pool The pool for buffer allocations, if any\n+  /// \\param[out] out The resulting vector of arrays\n+  Status Flatten(MemoryPool* pool, std::vector<std::shared_ptr<Column>>* out) const;\n+\n   bool Equals(const Column& other) const;\n   bool Equals(const std::shared_ptr<Column>& other) const;\n \n@@ -215,6 +228,13 @@ class ARROW_EXPORT Table {\n   virtual std::shared_ptr<Table> ReplaceSchemaMetadata(\n       const std::shared_ptr<const KeyValueMetadata>& metadata) const = 0;\n \n+  /// \\brief Flatten the table, producing a new Table.  Any column with a\n+  /// struct type will be flattened into multiple columns\n+  ///\n+  /// \\param[in] pool The pool for buffer allocations, if any\n+  /// \\param[out] out The returned table\n+  virtual Status Flatten(MemoryPool* pool, std::shared_ptr<Table>* out) const = 0;\n+\n   /// \\brief Perform any checks to validate the input arguments\n   virtual Status Validate() const = 0;\n \ndiff --git a/cpp/src/arrow/type-test.cc b/cpp/src/arrow/type-test.cc\nindex f62d14d049..e9245d5185 100644\n--- a/cpp/src/arrow/type-test.cc\n+++ b/cpp/src/arrow/type-test.cc\n@@ -86,6 +86,33 @@ TEST(TestField, TestRemoveMetadata) {\n   ASSERT_TRUE(f2->metadata() == nullptr);\n }\n \n+TEST(TestField, TestFlatten) {\n+  auto metadata = std::shared_ptr<KeyValueMetadata>(\n+      new KeyValueMetadata({\"foo\", \"bar\"}, {\"bizz\", \"buzz\"}));\n+  auto f0 = field(\"f0\", int32(), true /* nullable */, metadata);\n+  auto vec = f0->Flatten();\n+  ASSERT_EQ(vec.size(), 1);\n+  ASSERT_TRUE(vec[0]->Equals(*f0));\n+\n+  auto f1 = field(\"f1\", float64(), false /* nullable */);\n+  auto ff = field(\"nest\", struct_({f0, f1}));\n+  vec = ff->Flatten();\n+  ASSERT_EQ(vec.size(), 2);\n+  auto expected0 = field(\"nest.f0\", int32(), true /* nullable */, metadata);\n+  // nullable parent implies nullable flattened child\n+  auto expected1 = field(\"nest.f1\", float64(), true /* nullable */);\n+  ASSERT_TRUE(vec[0]->Equals(*expected0));\n+  ASSERT_TRUE(vec[1]->Equals(*expected1));\n+\n+  ff = field(\"nest\", struct_({f0, f1}), false /* nullable */);\n+  vec = ff->Flatten();\n+  ASSERT_EQ(vec.size(), 2);\n+  expected0 = field(\"nest.f0\", int32(), true /* nullable */, metadata);\n+  expected1 = field(\"nest.f1\", float64(), false /* nullable */);\n+  ASSERT_TRUE(vec[0]->Equals(*expected0));\n+  ASSERT_TRUE(vec[1]->Equals(*expected1));\n+}\n+\n class TestSchema : public ::testing::Test {\n  public:\n   void SetUp() {}\ndiff --git a/cpp/src/arrow/type.cc b/cpp/src/arrow/type.cc\nindex 16e7585257..2f6e718338 100644\n--- a/cpp/src/arrow/type.cc\n+++ b/cpp/src/arrow/type.cc\n@@ -42,6 +42,21 @@ std::shared_ptr<Field> Field::RemoveMetadata() const {\n   return std::make_shared<Field>(name_, type_, nullable_);\n }\n \n+std::vector<std::shared_ptr<Field>> Field::Flatten() const {\n+  std::vector<std::shared_ptr<Field>> flattened;\n+  if (type_->id() == Type::STRUCT) {\n+    for (const auto& child : type_->children()) {\n+      auto flattened_child = std::make_shared<Field>(*child);\n+      flattened.push_back(flattened_child);\n+      flattened_child->name_.insert(0, name() + \".\");\n+      flattened_child->nullable_ |= nullable_;\n+    }\n+  } else {\n+    flattened.push_back(std::make_shared<Field>(*this));\n+  }\n+  return flattened;\n+}\n+\n bool Field::Equals(const Field& other) const {\n   if (this == &other) {\n     return true;\ndiff --git a/cpp/src/arrow/type.h b/cpp/src/arrow/type.h\nindex 9cd1d8f86d..915c0c74e4 100644\n--- a/cpp/src/arrow/type.h\n+++ b/cpp/src/arrow/type.h\n@@ -236,6 +236,8 @@ class ARROW_EXPORT Field {\n       const std::shared_ptr<const KeyValueMetadata>& metadata) const;\n   std::shared_ptr<Field> RemoveMetadata() const;\n \n+  std::vector<std::shared_ptr<Field>> Flatten() const;\n+\n   bool Equals(const Field& other) const;\n   bool Equals(const std::shared_ptr<Field>& other) const;\n \ndiff --git a/cpp/src/arrow/util/bit-util-test.cc b/cpp/src/arrow/util/bit-util-test.cc\nindex ba4d8a32e0..c52724412f 100644\n--- a/cpp/src/arrow/util/bit-util-test.cc\n+++ b/cpp/src/arrow/util/bit-util-test.cc\n@@ -22,6 +22,7 @@\n #include <initializer_list>\n #include <limits>\n #include <memory>\n+#include <valarray>\n #include <vector>\n \n #include <gtest/gtest.h>\n@@ -92,7 +93,7 @@ void ASSERT_READER_VALUES(internal::BitmapReader& reader, std::vector<int> value\n // Assert equal contents of a memory area and a vector of bytes\n void ASSERT_BYTES_EQ(const uint8_t* left, const std::vector<uint8_t>& right) {\n   auto left_array = std::vector<uint8_t>(left, left + right.size());\n-  ASSERT_EQ(std::vector<uint8_t>(std::begin(left_array), std::end(left_array)), right);\n+  ASSERT_EQ(left_array, right);\n }\n \n TEST(BitUtilTests, TestIsMultipleOf64) {\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex 1dcff8af73..12bbefb042 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -258,6 +258,7 @@ cdef extern from \"arrow/api.h\" namespace \"arrow\" nogil:\n         shared_ptr[CField] AddMetadata(\n             const shared_ptr[CKeyValueMetadata]& metadata)\n         shared_ptr[CField] RemoveMetadata()\n+        vector[shared_ptr[CField]] Flatten()\n \n     cdef cppclass CStructType\" arrow::StructType\"(CDataType):\n         CStructType(const vector[shared_ptr[CField]]& fields)\n@@ -437,6 +438,8 @@ cdef extern from \"arrow/api.h\" namespace \"arrow\" nogil:\n \n         c_bool Equals(const CColumn& other)\n \n+        CStatus Flatten(CMemoryPool* pool, vector[shared_ptr[CColumn]]* out)\n+\n         shared_ptr[CField] field()\n \n         int64_t length()\n@@ -495,6 +498,10 @@ cdef extern from \"arrow/api.h\" namespace \"arrow\" nogil:\n                           shared_ptr[CTable]* out)\n         CStatus RemoveColumn(int i, shared_ptr[CTable]* out)\n \n+        CStatus Flatten(CMemoryPool* pool, shared_ptr[CTable]* out)\n+\n+        CStatus Validate()\n+\n         shared_ptr[CTable] ReplaceSchemaMetadata(\n             const shared_ptr[CKeyValueMetadata]& metadata)\n \ndiff --git a/python/pyarrow/table.pxi b/python/pyarrow/table.pxi\nindex a97fde21b5..c867657b9e 100644\n--- a/python/pyarrow/table.pxi\n+++ b/python/pyarrow/table.pxi\n@@ -271,13 +271,22 @@ cdef class Column:\n     def __repr__(self):\n         from pyarrow.compat import StringIO\n         result = StringIO()\n-        result.write(object.__repr__(self))\n+        result.write('<Column name={0!r} type={1!r}>'\n+                     .format(self.name, self.type))\n         data = self.data\n         for i, chunk in enumerate(data.chunks):\n             result.write('\\nchunk {0}: {1}'.format(i, repr(chunk)))\n \n         return result.getvalue()\n \n+    def __richcmp__(Column self, Column other, int op):\n+        if op == cp.Py_EQ:\n+            return self.equals(other)\n+        elif op == cp.Py_NE:\n+            return not self.equals(other)\n+        else:\n+            raise TypeError('Invalid comparison')\n+\n     @staticmethod\n     def from_array(*args):\n         return column(*args)\n@@ -315,6 +324,29 @@ cdef class Column:\n         casted_data = pyarrow_wrap_chunked_array(out.chunked_array())\n         return column(self.name, casted_data)\n \n+    def flatten(self, MemoryPool memory_pool=None):\n+        \"\"\"\n+        Flatten this Column.  If it has a struct type, the column is\n+        flattened into one column per struct field.\n+\n+        Parameters\n+        ----------\n+        memory_pool : MemoryPool, default None\n+            For memory allocations, if required, otherwise use default pool\n+\n+        Returns\n+        -------\n+        result : List[Column]\n+        \"\"\"\n+        cdef:\n+            vector[shared_ptr[CColumn]] flattened\n+            CMemoryPool* pool = maybe_unbox_memory_pool(memory_pool)\n+\n+        with nogil:\n+            check_status(self.column.Flatten(pool, &flattened))\n+\n+        return [pyarrow_wrap_column(col) for col in flattened]\n+\n     def to_pandas(self,\n                   c_bool strings_to_categorical=False,\n                   c_bool zero_copy_only=False,\n@@ -843,6 +875,14 @@ cdef class Table:\n             )\n         return 0\n \n+    def _validate(self):\n+        \"\"\"\n+        Validate table consistency.\n+        \"\"\"\n+        self._check_nullptr()\n+        with nogil:\n+            check_status(self.table.Validate())\n+\n     def replace_schema_metadata(self, dict metadata=None):\n         \"\"\"\n         EXPERIMENTAL: Create shallow copy of table by replacing schema\n@@ -867,6 +907,29 @@ cdef class Table:\n \n         return pyarrow_wrap_table(new_table)\n \n+    def flatten(self, MemoryPool memory_pool=None):\n+        \"\"\"\n+        Flatten this Table.  Each column with a struct type is flattened\n+        into one column per struct field.  Other columns are left unchanged.\n+\n+        Parameters\n+        ----------\n+        memory_pool : MemoryPool, default None\n+            For memory allocations, if required, otherwise use default pool\n+\n+        Returns\n+        -------\n+        result : Table\n+        \"\"\"\n+        cdef:\n+            shared_ptr[CTable] flattened\n+            CMemoryPool* pool = maybe_unbox_memory_pool(memory_pool)\n+\n+        with nogil:\n+            check_status(self.table.Flatten(pool, &flattened))\n+\n+        return pyarrow_wrap_table(flattened)\n+\n     def equals(self, Table other):\n         \"\"\"\n         Check if contents of two tables are equal\ndiff --git a/python/pyarrow/tests/test_schema.py b/python/pyarrow/tests/test_schema.py\nindex 6f99c124e2..9570506004 100644\n--- a/python/pyarrow/tests/test_schema.py\n+++ b/python/pyarrow/tests/test_schema.py\n@@ -254,6 +254,26 @@ def test_field_add_remove_metadata():\n     assert f5.equals(f6)\n \n \n+def test_field_flatten():\n+    f0 = pa.field('foo', pa.int32()).add_metadata({b'foo': b'bar'})\n+    assert f0.flatten() == [f0]\n+\n+    f1 = pa.field('bar', pa.float64(), nullable=False)\n+    ff = pa.field('ff', pa.struct([f0, f1]), nullable=False)\n+    assert ff.flatten() == [\n+        pa.field('ff.foo', pa.int32()).add_metadata({b'foo': b'bar'}),\n+        pa.field('ff.bar', pa.float64(), nullable=False)]  # XXX\n+\n+    # Nullable parent makes flattened child nullable\n+    ff = pa.field('ff', pa.struct([f0, f1]))\n+    assert ff.flatten() == [\n+        pa.field('ff.foo', pa.int32()).add_metadata({b'foo': b'bar'}),\n+        pa.field('ff.bar', pa.float64())]\n+\n+    fff = pa.field('fff', pa.struct([ff]))\n+    assert fff.flatten() == [pa.field('fff.ff', pa.struct([f0, f1]))]\n+\n+\n def test_schema_add_remove_metadata():\n     fields = [\n         pa.field('foo', pa.int32()),\ndiff --git a/python/pyarrow/tests/test_table.py b/python/pyarrow/tests/test_table.py\nindex 100f2b0653..9a0a482583 100644\n--- a/python/pyarrow/tests/test_table.py\n+++ b/python/pyarrow/tests/test_table.py\n@@ -97,6 +97,23 @@ def test_column_to_pandas():\n     assert series.iloc[0] == -10\n \n \n+def test_column_flatten():\n+    ty = pa.struct([pa.field('x', pa.int16()),\n+                    pa.field('y', pa.float32())])\n+    a = pa.array([(1, 2.5), (3, 4.5), (5, 6.5)], type=ty)\n+    col = pa.Column.from_array('foo', a)\n+    x, y = col.flatten()\n+    assert x == pa.column('foo.x', pa.array([1, 3, 5], type=pa.int16()))\n+    assert y == pa.column('foo.y', pa.array([2.5, 4.5, 6.5],\n+                                            type=pa.float32()))\n+    # Empty column\n+    a = pa.array([], type=ty)\n+    col = pa.Column.from_array('foo', a)\n+    x, y = col.flatten()\n+    assert x == pa.column('foo.x', pa.array([], type=pa.int16()))\n+    assert y == pa.column('foo.y', pa.array([], type=pa.float32()))\n+\n+\n def test_recordbatch_basics():\n     data = [\n         pa.array(range(5)),\n@@ -269,6 +286,7 @@ def test_table_basics():\n         pa.array([-10, -5, 0, 5, 10])\n     ]\n     table = pa.Table.from_arrays(data, names=('a', 'b'))\n+    table._validate()\n     assert len(table) == 5\n     assert table.num_rows == 5\n     assert table.num_columns == 2\n@@ -367,6 +385,7 @@ def test_table_remove_column():\n     table = pa.Table.from_arrays(data, names=('a', 'b', 'c'))\n \n     t2 = table.remove_column(0)\n+    t2._validate()\n     expected = pa.Table.from_arrays(data[1:], names=('b', 'c'))\n     assert t2.equals(expected)\n \n@@ -379,12 +398,34 @@ def test_table_remove_column_empty():\n     table = pa.Table.from_arrays(data, names=['a'])\n \n     t2 = table.remove_column(0)\n+    t2._validate()\n     assert len(t2) == len(table)\n \n     t3 = t2.add_column(0, table[0])\n+    t3._validate()\n     assert t3.equals(table)\n \n \n+def test_table_flatten():\n+    ty1 = pa.struct([pa.field('x', pa.int16()),\n+                     pa.field('y', pa.float32())])\n+    ty2 = pa.struct([pa.field('nest', ty1)])\n+    a = pa.array([(1, 2.5), (3, 4.5)], type=ty1)\n+    b = pa.array([((11, 12.5),), ((13, 14.5),)], type=ty2)\n+    c = pa.array([False, True], type=pa.bool_())\n+\n+    table = pa.Table.from_arrays([a, b, c], names=['a', 'b', 'c'])\n+    t2 = table.flatten()\n+    t2._validate()\n+    expected = pa.Table.from_arrays([\n+        pa.array([1, 3], type=pa.int16()),\n+        pa.array([2.5, 4.5], type=pa.float32()),\n+        pa.array([(11, 12.5), (13, 14.5)], type=ty1),\n+        c],\n+        names=['a.x', 'a.y', 'b.nest', 'c'])\n+    assert t2.equals(expected)\n+\n+\n def test_concat_tables():\n     data = [\n         list(range(5)),\n@@ -401,6 +442,7 @@ def test_concat_tables():\n                               names=('a', 'b'))\n \n     result = pa.concat_tables([t1, t2])\n+    result._validate()\n     assert len(result) == 10\n \n     expected = pa.Table.from_arrays([pa.array(x + y)\ndiff --git a/python/pyarrow/types.pxi b/python/pyarrow/types.pxi\nindex 9cd9bede6e..2922dc257e 100644\n--- a/python/pyarrow/types.pxi\n+++ b/python/pyarrow/types.pxi\n@@ -487,6 +487,20 @@ cdef class Field:\n             new_field = self.field.RemoveMetadata()\n         return pyarrow_wrap_field(new_field)\n \n+    def flatten(self):\n+        \"\"\"\n+        Flatten this field.  If a struct field, individual child fields\n+        will be returned with their names prefixed by the parent's name.\n+\n+        Returns\n+        -------\n+        fields : List[pyarrow.Field]\n+        \"\"\"\n+        cdef vector[shared_ptr[CField]] flattened\n+        with nogil:\n+            flattened = self.field.Flatten()\n+        return [pyarrow_wrap_field(f) for f in flattened]\n+\n \n cdef class Schema:\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-03T13:12:55.308+0000",
                    "updated": "2018-05-03T13:12:55.308+0000",
                    "started": "2018-05-03T13:12:55.308+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "97883",
                    "issueId": "13122654"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6ed81735[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1eacb0b7[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55e3635e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2e31585d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1d6f0798[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3c887be[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4dffed0a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@69a8b758[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@c9e2e32[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4b2cad68[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@79898eba[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@55b7e4a4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 600,
        "customfield_12312520": null,
        "customfield_12312521": "Thu May 03 13:12:57 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-05-03T13:12:57.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1886/watchers",
            "watchCount": 5,
            "isWatching": false
        },
        "created": "2017-12-04T19:22:30.000+0000",
        "updated": "2018-05-03T13:12:57.000+0000",
        "timeoriginalestimate": null,
        "description": "See discussion in https://issues.apache.org/jira/browse/ARROW-1873\r\n\r\nWhen a user has a struct column, it may be more efficient to flatten the struct into multiple columns of the form {{struct_name.field_name}} for each field in the struct. Then when you call {{to_pandas}}, Python dictionaries do not have to be created, and the conversion will be much more efficient",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Add function to \"flatten\" structs within tables",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/comment/16277322",
                    "id": "16277322",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
                        "name": "icexelloss",
                        "key": "icexelloss",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Li Jin",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Does it make sense to have a mode for table.to_pandas to turn arrow struct into multi index in pandas?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
                        "name": "icexelloss",
                        "key": "icexelloss",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Li Jin",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-04T19:26:23.326+0000",
                    "updated": "2017-12-04T19:26:23.326+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/comment/16277435",
                    "id": "16277435",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Probably not -- we only create a MultiIndex when we have the appropriate metadata for this. We could use the same flattening tool to convert a struct into a MultiIndex though",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-12-04T20:25:37.596+0000",
                    "updated": "2017-12-04T20:25:37.596+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/comment/16398563",
                    "id": "16398563",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Should this happen on the C++ side as well?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-03-14T13:16:54.401+0000",
                    "updated": "2018-03-14T13:16:54.401+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/comment/16398620",
                    "id": "16398620",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I believe so, yes",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-03-14T13:48:31.349+0000",
                    "updated": "2018-03-14T13:48:31.349+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/comment/16406417",
                    "id": "16406417",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou opened a new pull request #1768: ARROW-1886: [C++/Python] Flatten struct columns in table \nURL: https://github.com/apache/arrow/pull/1768\n \n \n   Add C++ and Python APIs to flatten struct fields and struct columns.\r\n   \r\n   Based on PR #1755.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-20T14:37:01.564+0000",
                    "updated": "2018-03-20T14:37:01.564+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/comment/16407171",
                    "id": "16407171",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1768: ARROW-1886: [C++/Python] Flatten struct columns in table \nURL: https://github.com/apache/arrow/pull/1768#discussion_r175941115\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -365,6 +365,50 @@ std::shared_ptr<Array> StructArray::field(int i) const {\n   return boxed_fields_[i];\n }\n \n+Status StructArray::Flatten(MemoryPool* pool, ArrayVector* out) const {\n \n Review comment:\n   This could use a few comments, particularly the `BitmapAnd` call isn't necessarily obvious.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-20T22:39:38.503+0000",
                    "updated": "2018-03-20T22:39:38.503+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/comment/16407172",
                    "id": "16407172",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1768: ARROW-1886: [C++/Python] Flatten struct columns in table \nURL: https://github.com/apache/arrow/pull/1768#discussion_r175944323\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit-util.cc\n ##########\n @@ -172,4 +172,58 @@ bool BitmapEquals(const uint8_t* left, int64_t left_offset, const uint8_t* right\n   return true;\n }\n \n+namespace {\n+\n+void AlignedBitmapAnd(const uint8_t* left, int64_t left_offset, const uint8_t* right,\n+                      int64_t right_offset, uint8_t* out, int64_t out_offset,\n+                      int64_t length) {\n+  DCHECK_EQ(left_offset % 8, right_offset % 8);\n+  DCHECK_EQ(left_offset % 8, out_offset % 8);\n+\n+  const int64_t nbytes = BitUtil::BytesForBits(length + left_offset);\n+  left += left_offset / 8;\n+  right += right_offset / 8;\n+  out += out_offset / 8;\n+  for (int64_t i = 0; i < nbytes; ++i) {\n+    out[i] = left[i] & right[i];\n+  }\n+}\n+\n+void UnalignedBitmapAnd(const uint8_t* left, int64_t left_offset, const uint8_t* right,\n+                        int64_t right_offset, uint8_t* out, int64_t out_offset,\n+                        int64_t length) {\n+  auto left_reader = internal::BitmapReader(left, left_offset, length);\n+  auto right_reader = internal::BitmapReader(right, right_offset, length);\n+  auto writer = internal::BitmapWriter(out, out_offset, length);\n+  for (int64_t i = 0; i < length; ++i) {\n+    if (left_reader.IsSet() && right_reader.IsSet()) {\n+      writer.Set();\n+    }\n+    left_reader.Next();\n+    right_reader.Next();\n+    writer.Next();\n+  }\n+  writer.Finish();\n+}\n+\n+}  // namespace\n+\n+Status BitmapAnd(MemoryPool* pool, const uint8_t* left, int64_t left_offset,\n+                 const uint8_t* right, int64_t right_offset, int64_t length,\n+                 int64_t out_offset, std::shared_ptr<Buffer>* out_buffer) {\n \n Review comment:\n   These functions are tightly coupled to the details of the Arrow format. Can we rename them to something more indicative of that?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-20T22:39:38.521+0000",
                    "updated": "2018-03-20T22:39:38.521+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/comment/16407173",
                    "id": "16407173",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1768: ARROW-1886: [C++/Python] Flatten struct columns in table \nURL: https://github.com/apache/arrow/pull/1768#discussion_r175943333\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit-util-test.cc\n ##########\n @@ -41,6 +44,59 @@ static void EnsureCpuInfoInitialized() {\n   }\n }\n \n+void WriteVectorToWriter(internal::BitmapWriter& writer, const std::vector<int> values) {\n+  for (const auto& value : values) {\n+    if (value) {\n+      writer.Set();\n+    } else {\n+      writer.Clear();\n+    }\n+    writer.Next();\n+  }\n+  writer.Finish();\n+}\n+\n+void BitmapFromVector(const std::vector<int>& values, int64_t bit_offset,\n+                      std::shared_ptr<Buffer>* out_buffer, int64_t* out_length) {\n+  const int64_t length = values.size();\n+  *out_length = length;\n+  ASSERT_OK(GetEmptyBitmap(default_memory_pool(), length + bit_offset, out_buffer));\n+  auto writer = internal::BitmapWriter((*out_buffer)->mutable_data(), bit_offset, length);\n+  WriteVectorToWriter(writer, values);\n+}\n+\n+#define ASSERT_READER_SET(reader)    \\\n+  do {                               \\\n+    ASSERT_TRUE(reader.IsSet());     \\\n+    ASSERT_FALSE(reader.IsNotSet()); \\\n+    reader.Next();                   \\\n+  } while (0)\n \n Review comment:\n   We use `false` for these kinds of macros, should be the same here for consistency.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-20T22:39:38.619+0000",
                    "updated": "2018-03-20T22:39:38.619+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/comment/16407174",
                    "id": "16407174",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1768: ARROW-1886: [C++/Python] Flatten struct columns in table \nURL: https://github.com/apache/arrow/pull/1768#discussion_r175944515\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit-util.cc\n ##########\n @@ -172,4 +172,58 @@ bool BitmapEquals(const uint8_t* left, int64_t left_offset, const uint8_t* right\n   return true;\n }\n \n+namespace {\n+\n+void AlignedBitmapAnd(const uint8_t* left, int64_t left_offset, const uint8_t* right,\n+                      int64_t right_offset, uint8_t* out, int64_t out_offset,\n+                      int64_t length) {\n+  DCHECK_EQ(left_offset % 8, right_offset % 8);\n+  DCHECK_EQ(left_offset % 8, out_offset % 8);\n+\n+  const int64_t nbytes = BitUtil::BytesForBits(length + left_offset);\n+  left += left_offset / 8;\n+  right += right_offset / 8;\n+  out += out_offset / 8;\n+  for (int64_t i = 0; i < nbytes; ++i) {\n+    out[i] = left[i] & right[i];\n+  }\n+}\n+\n+void UnalignedBitmapAnd(const uint8_t* left, int64_t left_offset, const uint8_t* right,\n+                        int64_t right_offset, uint8_t* out, int64_t out_offset,\n+                        int64_t length) {\n+  auto left_reader = internal::BitmapReader(left, left_offset, length);\n+  auto right_reader = internal::BitmapReader(right, right_offset, length);\n+  auto writer = internal::BitmapWriter(out, out_offset, length);\n+  for (int64_t i = 0; i < length; ++i) {\n+    if (left_reader.IsSet() && right_reader.IsSet()) {\n+      writer.Set();\n+    }\n+    left_reader.Next();\n+    right_reader.Next();\n+    writer.Next();\n+  }\n+  writer.Finish();\n+}\n+\n+}  // namespace\n+\n+Status BitmapAnd(MemoryPool* pool, const uint8_t* left, int64_t left_offset,\n+                 const uint8_t* right, int64_t right_offset, int64_t length,\n+                 int64_t out_offset, std::shared_ptr<Buffer>* out_buffer) {\n \n Review comment:\n   I guess there's some precedent here for that, but calling this `BitmapAnd` and having it take `MemoryPool` as its first argument is confusing.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-20T22:39:38.678+0000",
                    "updated": "2018-03-20T22:39:38.678+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/comment/16407175",
                    "id": "16407175",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1768: ARROW-1886: [C++/Python] Flatten struct columns in table \nURL: https://github.com/apache/arrow/pull/1768#discussion_r175943904\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit-util-test.cc\n ##########\n @@ -41,6 +44,59 @@ static void EnsureCpuInfoInitialized() {\n   }\n }\n \n+void WriteVectorToWriter(internal::BitmapWriter& writer, const std::vector<int> values) {\n+  for (const auto& value : values) {\n+    if (value) {\n+      writer.Set();\n+    } else {\n+      writer.Clear();\n+    }\n+    writer.Next();\n+  }\n+  writer.Finish();\n+}\n+\n+void BitmapFromVector(const std::vector<int>& values, int64_t bit_offset,\n+                      std::shared_ptr<Buffer>* out_buffer, int64_t* out_length) {\n+  const int64_t length = values.size();\n+  *out_length = length;\n+  ASSERT_OK(GetEmptyBitmap(default_memory_pool(), length + bit_offset, out_buffer));\n+  auto writer = internal::BitmapWriter((*out_buffer)->mutable_data(), bit_offset, length);\n+  WriteVectorToWriter(writer, values);\n+}\n+\n+#define ASSERT_READER_SET(reader)    \\\n+  do {                               \\\n+    ASSERT_TRUE(reader.IsSet());     \\\n+    ASSERT_FALSE(reader.IsNotSet()); \\\n+    reader.Next();                   \\\n+  } while (0)\n+\n+#define ASSERT_READER_NOT_SET(reader) \\\n+  do {                                \\\n+    ASSERT_FALSE(reader.IsSet());     \\\n+    ASSERT_TRUE(reader.IsNotSet());   \\\n+    reader.Next();                    \\\n+  } while (0)\n+\n+// Assert that a BitmapReader yields the given bit values\n+void ASSERT_READER_VALUES(internal::BitmapReader& reader, std::vector<int> values) {\n+  for (const auto& value : values) {\n+    if (value) {\n+      ASSERT_READER_SET(reader);\n+    } else {\n+      ASSERT_READER_NOT_SET(reader);\n+    }\n+  }\n+}\n+\n+// Assert equal contents of a memory area and a vector of bytes\n+void ASSERT_BYTES_EQ(const uint8_t* left, const std::vector<uint8_t>& right) {\n+  // No direct conversion from (T*, size) to vector<T>\n \n Review comment:\n   Can't you construct it like this?\r\n   \r\n   ```c++\r\n   std::vector<T> left_array(left, left + right.size());\r\n   ```\r\n   Or am I missing something\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-20T22:39:38.691+0000",
                    "updated": "2018-03-20T22:39:38.691+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/comment/16407176",
                    "id": "16407176",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1768: ARROW-1886: [C++/Python] Flatten struct columns in table \nURL: https://github.com/apache/arrow/pull/1768#discussion_r175943054\n \n \n\n ##########\n File path: cpp/src/arrow/type.cc\n ##########\n @@ -42,6 +42,21 @@ std::shared_ptr<Field> Field::RemoveMetadata() const {\n   return std::make_shared<Field>(name_, type_, nullable_);\n }\n \n+std::vector<std::shared_ptr<Field>> Field::Flatten() const {\n+  std::vector<std::shared_ptr<Field>> flattened;\n+  if (type_->id() == Type::STRUCT) {\n+    for (const auto& child : type_->children()) {\n+      auto flattened_child = std::make_shared<Field>(*child);\n+      flattened.push_back(flattened_child);\n+      flattened_child->name_.insert(0, name() + \".\");\n \n Review comment:\n   This is going to appear strange IMO if the name has a period or space or something other than variable name. This is kind of a can of worms without [`std::quoted`](http://en.cppreference.com/w/cpp/io/manip/quoted) (available in >=C++14)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-20T22:39:38.693+0000",
                    "updated": "2018-03-20T22:39:38.693+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/comment/16407177",
                    "id": "16407177",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1768: ARROW-1886: [C++/Python] Flatten struct columns in table \nURL: https://github.com/apache/arrow/pull/1768#discussion_r175944797\n \n \n\n ##########\n File path: python/pyarrow/tests/test_table.py\n ##########\n @@ -335,12 +348,34 @@ def test_table_remove_column_empty():\n     table = pa.Table.from_arrays(data, names=['a'])\n \n     t2 = table.remove_column(0)\n+    t2._validate()\n     assert len(t2) == len(table)\n \n     t3 = t2.add_column(0, table[0])\n+    t3._validate()\n     assert t3.equals(table)\n \n \n+def test_table_flatten():\n+    ty1 = pa.struct([pa.field('x', pa.int16()),\n+                     pa.field('y', pa.float32())])\n+    ty2 = pa.struct([pa.field('nest', ty1)])\n+    a = pa.array([(1, 2.5), (3, 4.5)], type=ty1)\n+    b = pa.array([((11, 12.5),), ((13, 14.5),)], type=ty2)\n+    c = pa.array([False, True], type=pa.bool_())\n+\n+    table = pa.Table.from_arrays([a, b, c], names=['a', 'b', 'c'])\n+    t2 = table.flatten()\n+    t2._validate()\n+    expected = pa.Table.from_arrays([\n+        pa.array([1, 3], type=pa.int16()),\n+        pa.array([2.5, 4.5], type=pa.float32()),\n+        pa.array([(11, 12.5), (13, 14.5)], type=ty1),\n+        c],\n+        names=['a.x', 'a.y', 'b.nest', 'c'])\n \n Review comment:\n   We should have some tests to acknowledge that we have to deal with non-variable-name-like-charactesrs at some point.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-20T22:39:38.697+0000",
                    "updated": "2018-03-20T22:39:38.697+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/comment/16407178",
                    "id": "16407178",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1768: ARROW-1886: [C++/Python] Flatten struct columns in table \nURL: https://github.com/apache/arrow/pull/1768#discussion_r175940858\n \n \n\n ##########\n File path: cpp/src/arrow/table.cc\n ##########\n @@ -127,6 +127,38 @@ std::shared_ptr<ChunkedArray> ChunkedArray::Slice(int64_t offset) const {\n   return Slice(offset, length_);\n }\n \n+Status ChunkedArray::Flatten(MemoryPool* pool,\n+                             std::vector<std::shared_ptr<ChunkedArray>>* out) const {\n+  std::vector<std::shared_ptr<ChunkedArray>> flattened;\n+  if (type()->id() != Type::STRUCT) {\n+    // Emulate non-existent copy constructor\n+    flattened.emplace_back(std::make_shared<ChunkedArray>(chunks_));\n+    *out = flattened;\n+    return Status::OK();\n+  }\n+  std::vector<ArrayVector> flattened_chunks;\n+  for (const auto& chunk : chunks_) {\n+    ArrayVector res;\n+    RETURN_NOT_OK(dynamic_cast<const StructArray&>(*chunk).Flatten(pool, &res));\n \n Review comment:\n   This can be turned into a `static_cast`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-20T22:39:38.883+0000",
                    "updated": "2018-03-20T22:39:38.883+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/comment/16407654",
                    "id": "16407654",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1768: ARROW-1886: [C++/Python] Flatten struct columns in table \nURL: https://github.com/apache/arrow/pull/1768#discussion_r176018578\n \n \n\n ##########\n File path: cpp/src/arrow/table.cc\n ##########\n @@ -127,6 +127,38 @@ std::shared_ptr<ChunkedArray> ChunkedArray::Slice(int64_t offset) const {\n   return Slice(offset, length_);\n }\n \n+Status ChunkedArray::Flatten(MemoryPool* pool,\n+                             std::vector<std::shared_ptr<ChunkedArray>>* out) const {\n+  std::vector<std::shared_ptr<ChunkedArray>> flattened;\n+  if (type()->id() != Type::STRUCT) {\n+    // Emulate non-existent copy constructor\n+    flattened.emplace_back(std::make_shared<ChunkedArray>(chunks_));\n+    *out = flattened;\n+    return Status::OK();\n+  }\n+  std::vector<ArrayVector> flattened_chunks;\n+  for (const auto& chunk : chunks_) {\n+    ArrayVector res;\n+    RETURN_NOT_OK(dynamic_cast<const StructArray&>(*chunk).Flatten(pool, &res));\n \n Review comment:\n   I thought the `dynamic_cast` would help protect against bugs (though I'm not sure how costly it is).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-21T09:22:29.608+0000",
                    "updated": "2018-03-21T09:22:29.608+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/comment/16407655",
                    "id": "16407655",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1768: ARROW-1886: [C++/Python] Flatten struct columns in table \nURL: https://github.com/apache/arrow/pull/1768#discussion_r176018684\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -365,6 +365,50 @@ std::shared_ptr<Array> StructArray::field(int i) const {\n   return boxed_fields_[i];\n }\n \n+Status StructArray::Flatten(MemoryPool* pool, ArrayVector* out) const {\n \n Review comment:\n   Will do (note this is commenting on a piece of PR #1755).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-21T09:22:32.925+0000",
                    "updated": "2018-03-21T09:22:32.925+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/comment/16407656",
                    "id": "16407656",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1768: ARROW-1886: [C++/Python] Flatten struct columns in table \nURL: https://github.com/apache/arrow/pull/1768#discussion_r176018790\n \n \n\n ##########\n File path: cpp/src/arrow/type.cc\n ##########\n @@ -42,6 +42,21 @@ std::shared_ptr<Field> Field::RemoveMetadata() const {\n   return std::make_shared<Field>(name_, type_, nullable_);\n }\n \n+std::vector<std::shared_ptr<Field>> Field::Flatten() const {\n+  std::vector<std::shared_ptr<Field>> flattened;\n+  if (type_->id() == Type::STRUCT) {\n+    for (const auto& child : type_->children()) {\n+      auto flattened_child = std::make_shared<Field>(*child);\n+      flattened.push_back(flattened_child);\n+      flattened_child->name_.insert(0, name() + \".\");\n \n Review comment:\n   I'm not sure we should do anything about it. Names are indicative in any case, there can even be duplicate names ;-)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-21T09:22:36.486+0000",
                    "updated": "2018-03-21T09:22:36.486+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/comment/16407657",
                    "id": "16407657",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1768: ARROW-1886: [C++/Python] Flatten struct columns in table \nURL: https://github.com/apache/arrow/pull/1768#discussion_r176018821\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit-util-test.cc\n ##########\n @@ -41,6 +44,59 @@ static void EnsureCpuInfoInitialized() {\n   }\n }\n \n+void WriteVectorToWriter(internal::BitmapWriter& writer, const std::vector<int> values) {\n+  for (const auto& value : values) {\n+    if (value) {\n+      writer.Set();\n+    } else {\n+      writer.Clear();\n+    }\n+    writer.Next();\n+  }\n+  writer.Finish();\n+}\n+\n+void BitmapFromVector(const std::vector<int>& values, int64_t bit_offset,\n+                      std::shared_ptr<Buffer>* out_buffer, int64_t* out_length) {\n+  const int64_t length = values.size();\n+  *out_length = length;\n+  ASSERT_OK(GetEmptyBitmap(default_memory_pool(), length + bit_offset, out_buffer));\n+  auto writer = internal::BitmapWriter((*out_buffer)->mutable_data(), bit_offset, length);\n+  WriteVectorToWriter(writer, values);\n+}\n+\n+#define ASSERT_READER_SET(reader)    \\\n+  do {                               \\\n+    ASSERT_TRUE(reader.IsSet());     \\\n+    ASSERT_FALSE(reader.IsNotSet()); \\\n+    reader.Next();                   \\\n+  } while (0)\n \n Review comment:\n   Ok, will do.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-21T09:22:36.604+0000",
                    "updated": "2018-03-21T09:22:36.604+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/comment/16407658",
                    "id": "16407658",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1768: ARROW-1886: [C++/Python] Flatten struct columns in table \nURL: https://github.com/apache/arrow/pull/1768#discussion_r176018968\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit-util-test.cc\n ##########\n @@ -41,6 +44,59 @@ static void EnsureCpuInfoInitialized() {\n   }\n }\n \n+void WriteVectorToWriter(internal::BitmapWriter& writer, const std::vector<int> values) {\n+  for (const auto& value : values) {\n+    if (value) {\n+      writer.Set();\n+    } else {\n+      writer.Clear();\n+    }\n+    writer.Next();\n+  }\n+  writer.Finish();\n+}\n+\n+void BitmapFromVector(const std::vector<int>& values, int64_t bit_offset,\n+                      std::shared_ptr<Buffer>* out_buffer, int64_t* out_length) {\n+  const int64_t length = values.size();\n+  *out_length = length;\n+  ASSERT_OK(GetEmptyBitmap(default_memory_pool(), length + bit_offset, out_buffer));\n+  auto writer = internal::BitmapWriter((*out_buffer)->mutable_data(), bit_offset, length);\n+  WriteVectorToWriter(writer, values);\n+}\n+\n+#define ASSERT_READER_SET(reader)    \\\n+  do {                               \\\n+    ASSERT_TRUE(reader.IsSet());     \\\n+    ASSERT_FALSE(reader.IsNotSet()); \\\n+    reader.Next();                   \\\n+  } while (0)\n+\n+#define ASSERT_READER_NOT_SET(reader) \\\n+  do {                                \\\n+    ASSERT_FALSE(reader.IsSet());     \\\n+    ASSERT_TRUE(reader.IsNotSet());   \\\n+    reader.Next();                    \\\n+  } while (0)\n+\n+// Assert that a BitmapReader yields the given bit values\n+void ASSERT_READER_VALUES(internal::BitmapReader& reader, std::vector<int> values) {\n+  for (const auto& value : values) {\n+    if (value) {\n+      ASSERT_READER_SET(reader);\n+    } else {\n+      ASSERT_READER_NOT_SET(reader);\n+    }\n+  }\n+}\n+\n+// Assert equal contents of a memory area and a vector of bytes\n+void ASSERT_BYTES_EQ(const uint8_t* left, const std::vector<uint8_t>& right) {\n+  // No direct conversion from (T*, size) to vector<T>\n \n Review comment:\n   Hmm... you may be right, I'll give it a try.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-21T09:22:43.223+0000",
                    "updated": "2018-03-21T09:22:43.223+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/comment/16407660",
                    "id": "16407660",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1768: ARROW-1886: [C++/Python] Flatten struct columns in table \nURL: https://github.com/apache/arrow/pull/1768#discussion_r176019222\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit-util.cc\n ##########\n @@ -172,4 +172,58 @@ bool BitmapEquals(const uint8_t* left, int64_t left_offset, const uint8_t* right\n   return true;\n }\n \n+namespace {\n+\n+void AlignedBitmapAnd(const uint8_t* left, int64_t left_offset, const uint8_t* right,\n+                      int64_t right_offset, uint8_t* out, int64_t out_offset,\n+                      int64_t length) {\n+  DCHECK_EQ(left_offset % 8, right_offset % 8);\n+  DCHECK_EQ(left_offset % 8, out_offset % 8);\n+\n+  const int64_t nbytes = BitUtil::BytesForBits(length + left_offset);\n+  left += left_offset / 8;\n+  right += right_offset / 8;\n+  out += out_offset / 8;\n+  for (int64_t i = 0; i < nbytes; ++i) {\n+    out[i] = left[i] & right[i];\n+  }\n+}\n+\n+void UnalignedBitmapAnd(const uint8_t* left, int64_t left_offset, const uint8_t* right,\n+                        int64_t right_offset, uint8_t* out, int64_t out_offset,\n+                        int64_t length) {\n+  auto left_reader = internal::BitmapReader(left, left_offset, length);\n+  auto right_reader = internal::BitmapReader(right, right_offset, length);\n+  auto writer = internal::BitmapWriter(out, out_offset, length);\n+  for (int64_t i = 0; i < length; ++i) {\n+    if (left_reader.IsSet() && right_reader.IsSet()) {\n+      writer.Set();\n+    }\n+    left_reader.Next();\n+    right_reader.Next();\n+    writer.Next();\n+  }\n+  writer.Finish();\n+}\n+\n+}  // namespace\n+\n+Status BitmapAnd(MemoryPool* pool, const uint8_t* left, int64_t left_offset,\n+                 const uint8_t* right, int64_t right_offset, int64_t length,\n+                 int64_t out_offset, std::shared_ptr<Buffer>* out_buffer) {\n \n Review comment:\n   Not sure what you mean with \"tightly coupled\". It seems to me that packed bitmaps are a rather generic notion. The only thing peculiar here is passing a bit offset.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-21T09:23:23.024+0000",
                    "updated": "2018-03-21T09:23:23.024+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/comment/16407666",
                    "id": "16407666",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1768: ARROW-1886: [C++/Python] Flatten struct columns in table \nURL: https://github.com/apache/arrow/pull/1768#discussion_r176019996\n \n \n\n ##########\n File path: python/pyarrow/tests/test_table.py\n ##########\n @@ -335,12 +348,34 @@ def test_table_remove_column_empty():\n     table = pa.Table.from_arrays(data, names=['a'])\n \n     t2 = table.remove_column(0)\n+    t2._validate()\n     assert len(t2) == len(table)\n \n     t3 = t2.add_column(0, table[0])\n+    t3._validate()\n     assert t3.equals(table)\n \n \n+def test_table_flatten():\n+    ty1 = pa.struct([pa.field('x', pa.int16()),\n+                     pa.field('y', pa.float32())])\n+    ty2 = pa.struct([pa.field('nest', ty1)])\n+    a = pa.array([(1, 2.5), (3, 4.5)], type=ty1)\n+    b = pa.array([((11, 12.5),), ((13, 14.5),)], type=ty2)\n+    c = pa.array([False, True], type=pa.bool_())\n+\n+    table = pa.Table.from_arrays([a, b, c], names=['a', 'b', 'c'])\n+    t2 = table.flatten()\n+    t2._validate()\n+    expected = pa.Table.from_arrays([\n+        pa.array([1, 3], type=pa.int16()),\n+        pa.array([2.5, 4.5], type=pa.float32()),\n+        pa.array([(11, 12.5), (13, 14.5)], type=ty1),\n+        c],\n+        names=['a.x', 'a.y', 'b.nest', 'c'])\n \n Review comment:\n   I'm not sure we should deal with them ourselves? I *think* users can reimplement the table-flattening functionality themselves using `array.flatten` (if they want another naming scheme), though I'm not sure how easy that is with the currently exposed APIs.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-21T09:26:21.061+0000",
                    "updated": "2018-03-21T09:26:21.061+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/comment/16441028",
                    "id": "16441028",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1768: ARROW-1886: [C++/Python] Flatten struct columns in table \nURL: https://github.com/apache/arrow/pull/1768#issuecomment-382036560\n \n \n   I've rebased this PR. @cpcloud could you answer on the comments when you have time?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-17T15:32:33.494+0000",
                    "updated": "2018-04-17T15:32:33.494+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13122654/comment/16462420",
                    "id": "16462420",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 1768\n[https://github.com/apache/arrow/pull/1768]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-05-03T13:12:57.398+0000",
                    "updated": "2018-05-03T13:12:57.398+0000"
                }
            ],
            "maxResults": 22,
            "total": 22,
            "startAt": 0
        },
        "customfield_12311820": "0|i3nign:",
        "customfield_12314139": null
    }
}