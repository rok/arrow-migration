{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13475820",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820",
    "key": "ARROW-17349",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "good-first-issue",
            "kernel",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
            "name": "willjones127",
            "key": "willjones127",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Will Jones",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
            "name": "willjones127",
            "key": "willjones127",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Will Jones",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
            "name": "willjones127",
            "key": "willjones127",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Will Jones",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17349/votes",
            "votes": 1,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 18,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820/worklog/810529",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14184:\nURL: https://github.com/apache/arrow/pull/14184#issuecomment-1252936336\n\n   https://issues.apache.org/jira/browse/ARROW-17349\n\n\n",
                    "created": "2022-09-20T21:31:24.496+0000",
                    "updated": "2022-09-20T21:31:24.496+0000",
                    "started": "2022-09-20T21:31:24.496+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "810529",
                    "issueId": "13475820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820/worklog/810530",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14184:\nURL: https://github.com/apache/arrow/pull/14184#issuecomment-1252936359\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-09-20T21:31:25.992+0000",
                    "updated": "2022-09-20T21:31:25.992+0000",
                    "started": "2022-09-20T21:31:25.991+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "810530",
                    "issueId": "13475820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820/worklog/810947",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14198:\nURL: https://github.com/apache/arrow/pull/14198#issuecomment-1254210784\n\n   https://issues.apache.org/jira/browse/ARROW-17349\n\n\n",
                    "created": "2022-09-21T20:46:42.206+0000",
                    "updated": "2022-09-21T20:46:42.206+0000",
                    "started": "2022-09-21T20:46:42.206+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "810947",
                    "issueId": "13475820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820/worklog/810968",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on PR #14198:\nURL: https://github.com/apache/arrow/pull/14198#issuecomment-1254350080\n\n   ## Mapping MapType field names\r\n   ```python\r\n   import pyarrow as pa\r\n   \r\n   # MapType\r\n   ty_named = pa.map_(pa.field(\"x\", pa.int32(), nullable=False), pa.int32())\r\n   ty = pa.map_(pa.int32(), pa.int32())\r\n   arr_named = pa.array([[(1, 2), (2, 4)]], type=ty_named)\r\n   arr_named.type, arr_named.cast(ty).type\r\n   ```\r\n   **Before (wrong)**\r\n   \r\n   ```python\r\n   (MapType(map<int32 ('x'), int32>), MapType(map<int32 ('x'), int32>))\r\n   ```\r\n   \r\n   **After (correct)**\r\n   ```python\r\n   (MapType(map<int32 ('x'), int32>), MapType(map<int32, int32>))\r\n   ```\r\n   \r\n   ## Mapping Map<T, List<T>> names\r\n   ```python\r\n   ty_named = pa.map_(pa.string(), pa.field(\"x\", pa.list_(pa.field(\"x\", pa.int32(), nullable=True)), nullable=False))\r\n   ty = pa.map_(pa.string(), pa.list_(pa.int32()))\r\n   arr_named = pa.array([[(\"string\", [1, 2, 3])]], type=ty_named)\r\n   arr_named.type, arr_named.cast(ty).type\r\n   ```\r\n   \r\n   \r\n   **Before**\r\n   ```python\r\n   pyarrow.lib.ArrowNotImplementedError: Unsupported cast from map<string, list<x: int32> ('x')> to map<string, list<item: int32>> (no available cast function for target type)\r\n   ```\r\n   **After**\r\n   ```python\r\n   (MapType(map<string, list<x: int32> ('x')>), MapType(map<string, list<item: int32>>))\r\n   ```\n\n\n",
                    "created": "2022-09-22T00:03:18.361+0000",
                    "updated": "2022-09-22T00:03:18.361+0000",
                    "started": "2022-09-22T00:03:18.361+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "810968",
                    "issueId": "13475820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820/worklog/811275",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on PR #14198:\nURL: https://github.com/apache/arrow/pull/14198#issuecomment-1255171722\n\n   Failures seem to be related to Gandiva, not changes in this PR.\n\n\n",
                    "created": "2022-09-22T15:12:51.292+0000",
                    "updated": "2022-09-22T15:12:51.292+0000",
                    "started": "2022-09-22T15:12:51.291+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811275",
                    "issueId": "13475820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820/worklog/812190",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on PR #14198:\nURL: https://github.com/apache/arrow/pull/14198#issuecomment-1258421763\n\n   cc @pitrou @jorisvandenbossche \r\n   \r\n   FYI one of the motivations for this is making sure it's easy to cast field names so the transition for Parquet to use compliant nested types is easier ([ARROW-14196](https://issues.apache.org/jira/browse/ARROW-14196)). \n\n\n",
                    "created": "2022-09-26T18:09:36.617+0000",
                    "updated": "2022-09-26T18:09:36.617+0000",
                    "started": "2022-09-26T18:09:36.616+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "812190",
                    "issueId": "13475820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820/worklog/812387",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #14198:\nURL: https://github.com/apache/arrow/pull/14198#discussion_r980924631\n\n\n##########\ncpp/src/arrow/compute/cast.cc:\n##########\n@@ -96,8 +96,11 @@ class CastMetaFunction : public MetaFunction {\n     ARROW_ASSIGN_OR_RAISE(auto cast_options, ValidateOptions(options));\n     // args[0].type() could be a nullptr so check for that before\n     // we do anything with it.\n+    // TODO: if types are equal except for field names of list types, we can\n\nReview Comment:\n   Do you want to open a JIRA for this TODO?\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_nested.cc:\n##########\n@@ -40,25 +40,22 @@ namespace {\n \n // (Large)List<T> -> (Large)List<U>\n \n-template <typename SrcType, typename DestType>\n-typename std::enable_if<SrcType::type_id == DestType::type_id, Status>::type\n-CastListOffsets(KernelContext* ctx, const ArraySpan& in_array, ArrayData* out_array) {\n-  return Status::OK();\n-}\n-\n // TODO(wesm): memory could be preallocated here and it would make\n // things simpler\n template <typename SrcType, typename DestType>\n-typename std::enable_if<SrcType::type_id != DestType::type_id, Status>::type\n-CastListOffsets(KernelContext* ctx, const ArraySpan& in_array, ArrayData* out_array) {\n+Status CastListOffsets(KernelContext* ctx, const ArraySpan& in_array,\n+                       ArrayData* out_array) {\n   using src_offset_type = typename SrcType::offset_type;\n   using dest_offset_type = typename DestType::offset_type;\n \n-  ARROW_ASSIGN_OR_RAISE(out_array->buffers[1],\n-                        ctx->Allocate(sizeof(dest_offset_type) * (in_array.length + 1)));\n-  ::arrow::internal::CastInts(in_array.GetValues<src_offset_type>(1),\n-                              out_array->GetMutableValues<dest_offset_type>(1),\n-                              in_array.length + 1);\n+  if constexpr (!std::is_same<src_offset_type, dest_offset_type>::value) {\n\nReview Comment:\n   Woohoo!\n\n\n\n##########\ncpp/src/arrow/datum.cc:\n##########\n@@ -177,6 +177,30 @@ bool Datum::Equals(const Datum& other) const {\n   }\n }\n \n+Result<Datum> Datum::View(const std::shared_ptr<DataType>& out_type) const {\n+  if (this->is_scalar()) {\n+    std::shared_ptr<Array> tmp_array;\n+    ARROW_ASSIGN_OR_RAISE(\n+        tmp_array, MakeArrayFromScalar(*this->scalar().get(), 1, default_memory_pool()));\n+    ARROW_ASSIGN_OR_RAISE(std::shared_ptr<ArrayData> array,\n+                          ::arrow::internal::GetArrayView(tmp_array->data(), out_type));\n+    ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> out, MakeArray(array)->GetScalar(0));\n+    return Datum(out);\n+  } else if (this->is_array()) {\n+    ARROW_ASSIGN_OR_RAISE(std::shared_ptr<ArrayData> array,\n+                          ::arrow::internal::GetArrayView(this->array(), out_type));\n+    return Datum(array);\n+  } else if (this->is_chunked_array()) {\n+    ARROW_ASSIGN_OR_RAISE(std::shared_ptr<ChunkedArray> array,\n+                          this->chunked_array()->View(out_type));\n+    return Datum(array);\n+  } else if (this->kind() == Datum::NONE) {\n+    return Datum();\n+  } else {\n+    return Status::Invalid(\"Cannot cast tabular structure to a single data type.\");\n\nReview Comment:\n   `TypeError` instead?\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_nested.cc:\n##########\n@@ -206,6 +211,75 @@ void AddStructToStructCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(StructType::type_id, std::move(kernel)));\n }\n \n+template <typename DestType>\n+struct CastMap {\n+  using CastListImpl = CastList<MapType, DestType>;\n+\n+  static Status Exec(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+\n+    std::shared_ptr<DataType> entry_type =\n+        checked_cast<const DestType&>(*out->type()).value_type();\n+    // Assert is struct with two fields\n+    if (!(entry_type->id() == Type::STRUCT && entry_type->num_fields() == 2)) {\n+      return Status::TypeError(\n+          \"Map type must be cast to a list<struct> with exactly two fields.\");\n+    }\n+    std::shared_ptr<DataType> key_type = entry_type->field(0)->type();\n+    std::shared_ptr<DataType> value_type = entry_type->field(1)->type();\n+\n+    const ArraySpan& in_array = batch[0].array;\n+\n+    ArrayData* out_array = out->array_data().get();\n+    out_array->buffers[0] = in_array.GetBuffer(0);\n+    out_array->buffers[1] = in_array.GetBuffer(1);\n+\n+    std::shared_ptr<ArrayData> entries = in_array.child_data[0].ToArrayData();\n+\n+    RETURN_NOT_OK(CastListImpl::HandleOffsets(ctx, in_array, out_array, &entries));\n+\n+    // Handle keys\n+    const std::shared_ptr<ArrayData>& keys =\n+        entries->child_data[0]->Slice(entries->offset, entries->length);\n+    ARROW_ASSIGN_OR_RAISE(Datum cast_keys,\n+                          Cast(keys, key_type, options, ctx->exec_context()));\n+    DCHECK(cast_keys.is_array());\n+\n+    // Handle values\n+    const std::shared_ptr<ArrayData>& values =\n+        entries->child_data[1]->Slice(entries->offset, entries->length);\n+    ARROW_ASSIGN_OR_RAISE(Datum cast_values,\n+                          Cast(values, value_type, options, ctx->exec_context()));\n+    DCHECK(cast_values.is_array());\n+\n+    // Copy null bitmap\n+    std::shared_ptr<Buffer> null_bitmap;\n+    if (in_array.buffers[0].data != nullptr) {\n\nReview Comment:\n   Or perhaps you mean to use `entries.buffers[0].data` instead?\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_nested.cc:\n##########\n@@ -206,6 +211,75 @@ void AddStructToStructCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(StructType::type_id, std::move(kernel)));\n }\n \n+template <typename DestType>\n+struct CastMap {\n+  using CastListImpl = CastList<MapType, DestType>;\n+\n+  static Status Exec(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+\n+    std::shared_ptr<DataType> entry_type =\n+        checked_cast<const DestType&>(*out->type()).value_type();\n+    // Assert is struct with two fields\n+    if (!(entry_type->id() == Type::STRUCT && entry_type->num_fields() == 2)) {\n+      return Status::TypeError(\n+          \"Map type must be cast to a list<struct> with exactly two fields.\");\n+    }\n+    std::shared_ptr<DataType> key_type = entry_type->field(0)->type();\n+    std::shared_ptr<DataType> value_type = entry_type->field(1)->type();\n+\n+    const ArraySpan& in_array = batch[0].array;\n+\n+    ArrayData* out_array = out->array_data().get();\n+    out_array->buffers[0] = in_array.GetBuffer(0);\n+    out_array->buffers[1] = in_array.GetBuffer(1);\n+\n+    std::shared_ptr<ArrayData> entries = in_array.child_data[0].ToArrayData();\n+\n+    RETURN_NOT_OK(CastListImpl::HandleOffsets(ctx, in_array, out_array, &entries));\n+\n+    // Handle keys\n+    const std::shared_ptr<ArrayData>& keys =\n+        entries->child_data[0]->Slice(entries->offset, entries->length);\n+    ARROW_ASSIGN_OR_RAISE(Datum cast_keys,\n+                          Cast(keys, key_type, options, ctx->exec_context()));\n+    DCHECK(cast_keys.is_array());\n+\n+    // Handle values\n+    const std::shared_ptr<ArrayData>& values =\n+        entries->child_data[1]->Slice(entries->offset, entries->length);\n+    ARROW_ASSIGN_OR_RAISE(Datum cast_values,\n+                          Cast(values, value_type, options, ctx->exec_context()));\n+    DCHECK(cast_values.is_array());\n+\n+    // Copy null bitmap\n+    std::shared_ptr<Buffer> null_bitmap;\n+    if (in_array.buffers[0].data != nullptr) {\n+      ARROW_ASSIGN_OR_RAISE(null_bitmap,\n+                            CopyBitmap(ctx->memory_pool(), in_array.buffers[0].data,\n+                                       in_array.offset, in_array.length));\n\nReview Comment:\n   Is copying necessary if the offset is 0?\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_nested.cc:\n##########\n@@ -206,6 +211,75 @@ void AddStructToStructCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(StructType::type_id, std::move(kernel)));\n }\n \n+template <typename DestType>\n+struct CastMap {\n+  using CastListImpl = CastList<MapType, DestType>;\n+\n+  static Status Exec(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+\n+    std::shared_ptr<DataType> entry_type =\n+        checked_cast<const DestType&>(*out->type()).value_type();\n+    // Assert is struct with two fields\n+    if (!(entry_type->id() == Type::STRUCT && entry_type->num_fields() == 2)) {\n+      return Status::TypeError(\n+          \"Map type must be cast to a list<struct> with exactly two fields.\");\n+    }\n+    std::shared_ptr<DataType> key_type = entry_type->field(0)->type();\n+    std::shared_ptr<DataType> value_type = entry_type->field(1)->type();\n+\n+    const ArraySpan& in_array = batch[0].array;\n+\n+    ArrayData* out_array = out->array_data().get();\n+    out_array->buffers[0] = in_array.GetBuffer(0);\n+    out_array->buffers[1] = in_array.GetBuffer(1);\n+\n+    std::shared_ptr<ArrayData> entries = in_array.child_data[0].ToArrayData();\n+\n+    RETURN_NOT_OK(CastListImpl::HandleOffsets(ctx, in_array, out_array, &entries));\n+\n+    // Handle keys\n+    const std::shared_ptr<ArrayData>& keys =\n+        entries->child_data[0]->Slice(entries->offset, entries->length);\n+    ARROW_ASSIGN_OR_RAISE(Datum cast_keys,\n+                          Cast(keys, key_type, options, ctx->exec_context()));\n+    DCHECK(cast_keys.is_array());\n+\n+    // Handle values\n+    const std::shared_ptr<ArrayData>& values =\n+        entries->child_data[1]->Slice(entries->offset, entries->length);\n+    ARROW_ASSIGN_OR_RAISE(Datum cast_values,\n+                          Cast(values, value_type, options, ctx->exec_context()));\n+    DCHECK(cast_values.is_array());\n+\n+    // Copy null bitmap\n+    std::shared_ptr<Buffer> null_bitmap;\n+    if (in_array.buffers[0].data != nullptr) {\n\nReview Comment:\n   I'm curious: why do this after you assigned to `out_array->buffers` above?\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_test.cc:\n##########\n@@ -2209,6 +2209,41 @@ TEST(Cast, ListToListOptionsPassthru) {\n   }\n }\n \n+TEST(Cast, MapToMapFieldNames) {\n+  std::shared_ptr<DataType> src_type = map(utf8(), field(\"x\", list(field(\"a\", int64()))));\n+  std::shared_ptr<DataType> dst_type = map(utf8(), field(\"y\", list(field(\"b\", int64()))));\n+\n+  std::shared_ptr<Array> src =\n+      ArrayFromJSON(src_type, \"[[[\\\"1\\\", [1,2,3]]], [[\\\"2\\\", [4,5,6]]]]\");\n+  std::shared_ptr<Array> dst =\n+      ArrayFromJSON(dst_type, \"[[[\\\"1\\\", [1,2,3]]], [[\\\"2\\\", [4,5,6]]]]\");\n+\n+  CheckCast(src, dst);\n+\n+  src_type = map(utf8(), field(\"x\", int64()));\n+  dst_type = map(utf8(), field(\"y\", int64()));\n+\n+  src = ArrayFromJSON(src_type, \"[[[\\\"1\\\", 1]], [[\\\"2\\\", 6]], [[\\\"3\\\", 36]]]\");\n+  dst = ArrayFromJSON(dst_type, \"[[[\\\"1\\\", 1]], [[\\\"2\\\", 6]], [[\\\"3\\\", 36]]]\");\n+\n+  CheckCast(src, dst);\n+\n+  src_type = map(int32(), int32());\n+  dst_type = list(struct_({field(\"a\", int32()), field(\"b\", int64())}));\n+\n+  src = ArrayFromJSON(src_type, \"[[[1, 1]], [[1, 6]], [[1, 36]]]\");\n+  dst = ArrayFromJSON(dst_type, \"[[[1, 1]], [[1, 6]], [[1, 36]]]\");\n+\n+  CheckCast(src, dst);\n+\n+  dst_type = list(\n+      struct_({field(\"key\", int32()), field(\"value\", int64()), field(\"extra\", int64())}));\n+  EXPECT_RAISES_WITH_MESSAGE_THAT(\n+      TypeError,\n+      ::testing::HasSubstr(\"must be cast to a list<struct> with exactly two fields\"),\n+      Cast(src, dst_type));\n+}\n\nReview Comment:\n   Could you add tests:\r\n   * with large_list\r\n   * with nulls\r\n   * with non-zero list offset\r\n   ?\n\n\n\n##########\ncpp/src/arrow/datum.cc:\n##########\n@@ -177,6 +177,30 @@ bool Datum::Equals(const Datum& other) const {\n   }\n }\n \n+Result<Datum> Datum::View(const std::shared_ptr<DataType>& out_type) const {\n+  if (this->is_scalar()) {\n+    std::shared_ptr<Array> tmp_array;\n+    ARROW_ASSIGN_OR_RAISE(\n+        tmp_array, MakeArrayFromScalar(*this->scalar().get(), 1, default_memory_pool()));\n+    ARROW_ASSIGN_OR_RAISE(std::shared_ptr<ArrayData> array,\n+                          ::arrow::internal::GetArrayView(tmp_array->data(), out_type));\n+    ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> out, MakeArray(array)->GetScalar(0));\n\nReview Comment:\n   Can we instead not support this? This implementation is very heavy and isn't really \"zero-copy\" either.\n\n\n\n",
                    "created": "2022-09-27T08:37:47.698+0000",
                    "updated": "2022-09-27T08:37:47.698+0000",
                    "started": "2022-09-27T08:37:47.696+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "812387",
                    "issueId": "13475820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820/worklog/813101",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on code in PR #14198:\nURL: https://github.com/apache/arrow/pull/14198#discussion_r982802111\n\n\n##########\ncpp/src/arrow/compute/cast.cc:\n##########\n@@ -96,8 +96,11 @@ class CastMetaFunction : public MetaFunction {\n     ARROW_ASSIGN_OR_RAISE(auto cast_options, ValidateOptions(options));\n     // args[0].type() could be a nullptr so check for that before\n     // we do anything with it.\n+    // TODO: if types are equal except for field names of list types, we can\n\nReview Comment:\n   I'll be doing this in https://github.com/apache/arrow/pull/13851\n\n\n\n",
                    "created": "2022-09-28T19:49:18.363+0000",
                    "updated": "2022-09-28T19:49:18.363+0000",
                    "started": "2022-09-28T19:49:18.363+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813101",
                    "issueId": "13475820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820/worklog/813107",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on code in PR #14198:\nURL: https://github.com/apache/arrow/pull/14198#discussion_r982812957\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_nested.cc:\n##########\n@@ -206,6 +211,75 @@ void AddStructToStructCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(StructType::type_id, std::move(kernel)));\n }\n \n+template <typename DestType>\n+struct CastMap {\n+  using CastListImpl = CastList<MapType, DestType>;\n+\n+  static Status Exec(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+\n+    std::shared_ptr<DataType> entry_type =\n+        checked_cast<const DestType&>(*out->type()).value_type();\n+    // Assert is struct with two fields\n+    if (!(entry_type->id() == Type::STRUCT && entry_type->num_fields() == 2)) {\n+      return Status::TypeError(\n+          \"Map type must be cast to a list<struct> with exactly two fields.\");\n+    }\n+    std::shared_ptr<DataType> key_type = entry_type->field(0)->type();\n+    std::shared_ptr<DataType> value_type = entry_type->field(1)->type();\n+\n+    const ArraySpan& in_array = batch[0].array;\n+\n+    ArrayData* out_array = out->array_data().get();\n+    out_array->buffers[0] = in_array.GetBuffer(0);\n+    out_array->buffers[1] = in_array.GetBuffer(1);\n+\n+    std::shared_ptr<ArrayData> entries = in_array.child_data[0].ToArrayData();\n+\n+    RETURN_NOT_OK(CastListImpl::HandleOffsets(ctx, in_array, out_array, &entries));\n+\n+    // Handle keys\n+    const std::shared_ptr<ArrayData>& keys =\n+        entries->child_data[0]->Slice(entries->offset, entries->length);\n+    ARROW_ASSIGN_OR_RAISE(Datum cast_keys,\n+                          Cast(keys, key_type, options, ctx->exec_context()));\n+    DCHECK(cast_keys.is_array());\n+\n+    // Handle values\n+    const std::shared_ptr<ArrayData>& values =\n+        entries->child_data[1]->Slice(entries->offset, entries->length);\n+    ARROW_ASSIGN_OR_RAISE(Datum cast_values,\n+                          Cast(values, value_type, options, ctx->exec_context()));\n+    DCHECK(cast_values.is_array());\n+\n+    // Copy null bitmap\n+    std::shared_ptr<Buffer> null_bitmap;\n+    if (in_array.buffers[0].data != nullptr) {\n\nReview Comment:\n   Whoops this part is dead code. I had the validity bitmap handling in `HandleOffsets()`, but that's a little confusing, so I'll put it out of there.\n\n\n\n",
                    "created": "2022-09-28T20:02:59.400+0000",
                    "updated": "2022-09-28T20:02:59.400+0000",
                    "started": "2022-09-28T20:02:59.399+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813107",
                    "issueId": "13475820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820/worklog/813108",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on code in PR #14198:\nURL: https://github.com/apache/arrow/pull/14198#discussion_r982814384\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_nested.cc:\n##########\n@@ -206,6 +211,75 @@ void AddStructToStructCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(StructType::type_id, std::move(kernel)));\n }\n \n+template <typename DestType>\n+struct CastMap {\n+  using CastListImpl = CastList<MapType, DestType>;\n+\n+  static Status Exec(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+\n+    std::shared_ptr<DataType> entry_type =\n+        checked_cast<const DestType&>(*out->type()).value_type();\n+    // Assert is struct with two fields\n+    if (!(entry_type->id() == Type::STRUCT && entry_type->num_fields() == 2)) {\n+      return Status::TypeError(\n+          \"Map type must be cast to a list<struct> with exactly two fields.\");\n+    }\n+    std::shared_ptr<DataType> key_type = entry_type->field(0)->type();\n+    std::shared_ptr<DataType> value_type = entry_type->field(1)->type();\n+\n+    const ArraySpan& in_array = batch[0].array;\n+\n+    ArrayData* out_array = out->array_data().get();\n+    out_array->buffers[0] = in_array.GetBuffer(0);\n+    out_array->buffers[1] = in_array.GetBuffer(1);\n+\n+    std::shared_ptr<ArrayData> entries = in_array.child_data[0].ToArrayData();\n+\n+    RETURN_NOT_OK(CastListImpl::HandleOffsets(ctx, in_array, out_array, &entries));\n+\n+    // Handle keys\n+    const std::shared_ptr<ArrayData>& keys =\n+        entries->child_data[0]->Slice(entries->offset, entries->length);\n+    ARROW_ASSIGN_OR_RAISE(Datum cast_keys,\n+                          Cast(keys, key_type, options, ctx->exec_context()));\n+    DCHECK(cast_keys.is_array());\n+\n+    // Handle values\n+    const std::shared_ptr<ArrayData>& values =\n+        entries->child_data[1]->Slice(entries->offset, entries->length);\n+    ARROW_ASSIGN_OR_RAISE(Datum cast_values,\n+                          Cast(values, value_type, options, ctx->exec_context()));\n+    DCHECK(cast_values.is_array());\n+\n+    // Copy null bitmap\n+    std::shared_ptr<Buffer> null_bitmap;\n+    if (in_array.buffers[0].data != nullptr) {\n\nReview Comment:\n   Or actually this is the struct validity bitmap. I'm not even sure this is allowed to have a bitmap...\n\n\n\n",
                    "created": "2022-09-28T20:04:59.641+0000",
                    "updated": "2022-09-28T20:04:59.641+0000",
                    "started": "2022-09-28T20:04:59.641+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813108",
                    "issueId": "13475820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820/worklog/813109",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on code in PR #14198:\nURL: https://github.com/apache/arrow/pull/14198#discussion_r982816095\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_nested.cc:\n##########\n@@ -206,6 +211,75 @@ void AddStructToStructCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(StructType::type_id, std::move(kernel)));\n }\n \n+template <typename DestType>\n+struct CastMap {\n+  using CastListImpl = CastList<MapType, DestType>;\n+\n+  static Status Exec(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+\n+    std::shared_ptr<DataType> entry_type =\n+        checked_cast<const DestType&>(*out->type()).value_type();\n+    // Assert is struct with two fields\n+    if (!(entry_type->id() == Type::STRUCT && entry_type->num_fields() == 2)) {\n+      return Status::TypeError(\n+          \"Map type must be cast to a list<struct> with exactly two fields.\");\n+    }\n+    std::shared_ptr<DataType> key_type = entry_type->field(0)->type();\n+    std::shared_ptr<DataType> value_type = entry_type->field(1)->type();\n+\n+    const ArraySpan& in_array = batch[0].array;\n+\n+    ArrayData* out_array = out->array_data().get();\n+    out_array->buffers[0] = in_array.GetBuffer(0);\n+    out_array->buffers[1] = in_array.GetBuffer(1);\n+\n+    std::shared_ptr<ArrayData> entries = in_array.child_data[0].ToArrayData();\n+\n+    RETURN_NOT_OK(CastListImpl::HandleOffsets(ctx, in_array, out_array, &entries));\n+\n+    // Handle keys\n+    const std::shared_ptr<ArrayData>& keys =\n+        entries->child_data[0]->Slice(entries->offset, entries->length);\n+    ARROW_ASSIGN_OR_RAISE(Datum cast_keys,\n+                          Cast(keys, key_type, options, ctx->exec_context()));\n+    DCHECK(cast_keys.is_array());\n+\n+    // Handle values\n+    const std::shared_ptr<ArrayData>& values =\n+        entries->child_data[1]->Slice(entries->offset, entries->length);\n+    ARROW_ASSIGN_OR_RAISE(Datum cast_values,\n+                          Cast(values, value_type, options, ctx->exec_context()));\n+    DCHECK(cast_values.is_array());\n+\n+    // Copy null bitmap\n+    std::shared_ptr<Buffer> null_bitmap;\n+    if (in_array.buffers[0].data != nullptr) {\n\nReview Comment:\n   It should not https://github.com/wjones127/arrow/blob/ARROW-17349-cast-field-names/cpp/src/arrow/array/array_nested.cc#L405\n\n\n\n",
                    "created": "2022-09-28T20:07:19.937+0000",
                    "updated": "2022-09-28T20:07:19.937+0000",
                    "started": "2022-09-28T20:07:19.937+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813109",
                    "issueId": "13475820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820/worklog/813119",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on code in PR #14198:\nURL: https://github.com/apache/arrow/pull/14198#discussion_r982843996\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_test.cc:\n##########\n@@ -2209,6 +2209,41 @@ TEST(Cast, ListToListOptionsPassthru) {\n   }\n }\n \n+TEST(Cast, MapToMapFieldNames) {\n+  std::shared_ptr<DataType> src_type = map(utf8(), field(\"x\", list(field(\"a\", int64()))));\n+  std::shared_ptr<DataType> dst_type = map(utf8(), field(\"y\", list(field(\"b\", int64()))));\n+\n+  std::shared_ptr<Array> src =\n+      ArrayFromJSON(src_type, \"[[[\\\"1\\\", [1,2,3]]], [[\\\"2\\\", [4,5,6]]]]\");\n+  std::shared_ptr<Array> dst =\n+      ArrayFromJSON(dst_type, \"[[[\\\"1\\\", [1,2,3]]], [[\\\"2\\\", [4,5,6]]]]\");\n+\n+  CheckCast(src, dst);\n+\n+  src_type = map(utf8(), field(\"x\", int64()));\n+  dst_type = map(utf8(), field(\"y\", int64()));\n+\n+  src = ArrayFromJSON(src_type, \"[[[\\\"1\\\", 1]], [[\\\"2\\\", 6]], [[\\\"3\\\", 36]]]\");\n+  dst = ArrayFromJSON(dst_type, \"[[[\\\"1\\\", 1]], [[\\\"2\\\", 6]], [[\\\"3\\\", 36]]]\");\n+\n+  CheckCast(src, dst);\n+\n+  src_type = map(int32(), int32());\n+  dst_type = list(struct_({field(\"a\", int32()), field(\"b\", int64())}));\n+\n+  src = ArrayFromJSON(src_type, \"[[[1, 1]], [[1, 6]], [[1, 36]]]\");\n+  dst = ArrayFromJSON(dst_type, \"[[[1, 1]], [[1, 6]], [[1, 36]]]\");\n+\n+  CheckCast(src, dst);\n+\n+  dst_type = list(\n+      struct_({field(\"key\", int32()), field(\"value\", int64()), field(\"extra\", int64())}));\n+  EXPECT_RAISES_WITH_MESSAGE_THAT(\n+      TypeError,\n+      ::testing::HasSubstr(\"must be cast to a list<struct> with exactly two fields\"),\n+      Cast(src, dst_type));\n+}\n\nReview Comment:\n   Thanks, those are all good ideas.\n\n\n\n",
                    "created": "2022-09-28T20:42:33.300+0000",
                    "updated": "2022-09-28T20:42:33.300+0000",
                    "started": "2022-09-28T20:42:33.299+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813119",
                    "issueId": "13475820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820/worklog/813120",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on code in PR #14198:\nURL: https://github.com/apache/arrow/pull/14198#discussion_r982844179\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_nested.cc:\n##########\n@@ -206,6 +211,75 @@ void AddStructToStructCast(CastFunction* func) {\n   DCHECK_OK(func->AddKernel(StructType::type_id, std::move(kernel)));\n }\n \n+template <typename DestType>\n+struct CastMap {\n+  using CastListImpl = CastList<MapType, DestType>;\n+\n+  static Status Exec(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+    const CastOptions& options = CastState::Get(ctx);\n+\n+    std::shared_ptr<DataType> entry_type =\n+        checked_cast<const DestType&>(*out->type()).value_type();\n+    // Assert is struct with two fields\n+    if (!(entry_type->id() == Type::STRUCT && entry_type->num_fields() == 2)) {\n+      return Status::TypeError(\n+          \"Map type must be cast to a list<struct> with exactly two fields.\");\n+    }\n+    std::shared_ptr<DataType> key_type = entry_type->field(0)->type();\n+    std::shared_ptr<DataType> value_type = entry_type->field(1)->type();\n+\n+    const ArraySpan& in_array = batch[0].array;\n+\n+    ArrayData* out_array = out->array_data().get();\n+    out_array->buffers[0] = in_array.GetBuffer(0);\n+    out_array->buffers[1] = in_array.GetBuffer(1);\n+\n+    std::shared_ptr<ArrayData> entries = in_array.child_data[0].ToArrayData();\n+\n+    RETURN_NOT_OK(CastListImpl::HandleOffsets(ctx, in_array, out_array, &entries));\n+\n+    // Handle keys\n+    const std::shared_ptr<ArrayData>& keys =\n+        entries->child_data[0]->Slice(entries->offset, entries->length);\n+    ARROW_ASSIGN_OR_RAISE(Datum cast_keys,\n+                          Cast(keys, key_type, options, ctx->exec_context()));\n+    DCHECK(cast_keys.is_array());\n+\n+    // Handle values\n+    const std::shared_ptr<ArrayData>& values =\n+        entries->child_data[1]->Slice(entries->offset, entries->length);\n+    ARROW_ASSIGN_OR_RAISE(Datum cast_values,\n+                          Cast(values, value_type, options, ctx->exec_context()));\n+    DCHECK(cast_values.is_array());\n+\n+    // Copy null bitmap\n+    std::shared_ptr<Buffer> null_bitmap;\n+    if (in_array.buffers[0].data != nullptr) {\n+      ARROW_ASSIGN_OR_RAISE(null_bitmap,\n+                            CopyBitmap(ctx->memory_pool(), in_array.buffers[0].data,\n+                                       in_array.offset, in_array.length));\n\nReview Comment:\n   Dropped this as it is unnecessary.\n\n\n\n",
                    "created": "2022-09-28T20:42:48.247+0000",
                    "updated": "2022-09-28T20:42:48.247+0000",
                    "started": "2022-09-28T20:42:48.247+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813120",
                    "issueId": "13475820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820/worklog/813126",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on code in PR #14198:\nURL: https://github.com/apache/arrow/pull/14198#discussion_r982854211\n\n\n##########\ncpp/src/arrow/datum.cc:\n##########\n@@ -177,6 +177,30 @@ bool Datum::Equals(const Datum& other) const {\n   }\n }\n \n+Result<Datum> Datum::View(const std::shared_ptr<DataType>& out_type) const {\n+  if (this->is_scalar()) {\n+    std::shared_ptr<Array> tmp_array;\n+    ARROW_ASSIGN_OR_RAISE(\n+        tmp_array, MakeArrayFromScalar(*this->scalar().get(), 1, default_memory_pool()));\n+    ARROW_ASSIGN_OR_RAISE(std::shared_ptr<ArrayData> array,\n+                          ::arrow::internal::GetArrayView(tmp_array->data(), out_type));\n+    ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> out, MakeArray(array)->GetScalar(0));\n\nReview Comment:\n   This was mostly to support the test which checks the invariant:\r\n   \r\n   ```cast_map(array[i]) == cast_map(array)[i]```\r\n   \r\n   https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/test_util.cc#L127\r\n   \r\n   It's not the cleanest implementation, I agree. Do you have better ideas on how it could be implemented?\n\n\n\n",
                    "created": "2022-09-28T20:55:49.490+0000",
                    "updated": "2022-09-28T20:55:49.490+0000",
                    "started": "2022-09-28T20:55:49.490+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813126",
                    "issueId": "13475820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820/worklog/814161",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on PR #14198:\nURL: https://github.com/apache/arrow/pull/14198#issuecomment-1268968842\n\n   > Here, you also allow renaming the fields when casting to a struct. I think I am fine with that, but just wanted to mention it explicitly, since it's a grey area between both cases mentioned above (for structs the names are important, but for a map type they also don't matter much, so the first cast to struct can ignore them?)\r\n   \r\n   Yes, I was careful to make sure this only happens in the `map -> list<struct>` path and doesn't affect casts *from* structs. Lists and maps will support renaming fields through casting, structs will not (perhaps we want a different function for it?).\n\n\n",
                    "created": "2022-10-05T20:59:01.342+0000",
                    "updated": "2022-10-05T20:59:01.342+0000",
                    "started": "2022-10-05T20:59:01.341+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "814161",
                    "issueId": "13475820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820/worklog/815749",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on PR #14198:\nURL: https://github.com/apache/arrow/pull/14198#issuecomment-1274997311\n\n   @pitrou could you take another look?\n\n\n",
                    "created": "2022-10-11T16:54:57.025+0000",
                    "updated": "2022-10-11T16:54:57.025+0000",
                    "started": "2022-10-11T16:54:57.025+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "815749",
                    "issueId": "13475820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820/worklog/816103",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou merged PR #14198:\nURL: https://github.com/apache/arrow/pull/14198\n\n\n",
                    "created": "2022-10-12T11:35:38.120+0000",
                    "updated": "2022-10-12T11:35:38.120+0000",
                    "started": "2022-10-12T11:35:38.119+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816103",
                    "issueId": "13475820"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820/worklog/816375",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on PR #14198:\nURL: https://github.com/apache/arrow/pull/14198#issuecomment-1276819760\n\n   Benchmark runs are scheduled for baseline = f25d88ed4619886a3832942597e61490b12db332 and contender = 69aad53eaaf00d791dc206e72b25190e6703b97c. 69aad53eaaf00d791dc206e72b25190e6703b97c is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/fc92e1d88b654380972f330e71595c27...c17e67445ff64459842b831313be7c1a/)\n   [Failed :arrow_down:0.56% :arrow_up:0.0%] [test-mac-arm](https://conbench.ursa.dev/compare/runs/9f31eb59daf94d9db0260acbbc4b33c8...ee2abc9a39de4eaabaffefef725b7e7c/)\n   [Failed :arrow_down:0.27% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/586600e85a444e0bbbe7b4ccc208ba47...8ecff0f183fa4c04b8c39922d4230731/)\n   [Finished :arrow_down:0.39% :arrow_up:0.0%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/6defdba87c3e4851a01eff71dec3a480...64e0779c0a1d45e4a77182785b6b1207/)\n   Buildkite builds:\n   [Finished] [`69aad53e` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1671)\n   [Failed] [`69aad53e` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1690)\n   [Failed] [`69aad53e` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1673)\n   [Finished] [`69aad53e` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1684)\n   [Finished] [`f25d88ed` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1670)\n   [Failed] [`f25d88ed` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1689)\n   [Failed] [`f25d88ed` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1672)\n   [Finished] [`f25d88ed` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1683)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python, R. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n",
                    "created": "2022-10-12T23:04:57.869+0000",
                    "updated": "2022-10-12T23:04:57.869+0000",
                    "started": "2022-10-12T23:04:57.869+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816375",
                    "issueId": "13475820"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 10800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4eb7477f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@44383ac2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@60d01268[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@653bca9a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@57d6232a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2325326[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6211425a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@59453b98[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3f6c8ce9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2f575341[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@47bcc763[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3755bdf7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Oct 12 11:35:38 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-10-12T11:35:38.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17349/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2022-08-09T00:01:59.000+0000",
        "updated": "2022-10-12T23:04:58.000+0000",
        "timeoriginalestimate": null,
        "description": "Different parquet implementations use different field names for internal fields of ListType and MapType, which can sometimes cause silly conflicts. For example, we use {{item}} as the field name for list, but Spark uses {{element}}. Fortunately, we can automatically cast between List and Map Types with different field names. Unfortunately, it only works at the top level. We should get it to work at arbitrary levels of nesting.\r\n\r\nThis was discovered in delta-rs: https://github.com/delta-io/delta-rs/pull/684#discussion_r935099285\r\n\r\nHere's a reproduction in Python:\r\n\r\n{code:Python}\r\nimport pyarrow as pa\r\nimport pyarrow.parquet as pq\r\nimport pyarrow.dataset as ds\r\n\r\ndef roundtrip_scanner(in_arr, out_type):\r\n    table = pa.table({\"arr\": in_arr})\r\n    pq.write_table(table, \"test.parquet\")\r\n    schema = pa.schema({\"arr\": out_type})\r\n    ds.dataset(\"test.parquet\", schema=schema).to_table()\r\n\r\n# MapType\r\nty_named = pa.map_(pa.field(\"x\", pa.int32(), nullable=False), pa.int32())\r\nty = pa.map_(pa.int32(), pa.int32())\r\narr_named = pa.array([[(1, 2), (2, 4)]], type=ty_named)\r\nroundtrip_scanner(arr_named, ty)\r\n\r\n# ListType\r\nty_named = pa.list_(pa.field(\"x\", pa.int32(), nullable=False))\r\nty = pa.list_(pa.int32())\r\narr_named = pa.array([[1, 2, 4]], type=ty_named)\r\nroundtrip_scanner(arr_named, ty)\r\n\r\n# Combination MapType and ListType\r\nty_named = pa.map_(pa.string(), pa.field(\"x\", pa.list_(pa.field(\"x\", pa.int32(), nullable=True)), nullable=False))\r\nty = pa.map_(pa.string(), pa.list_(pa.int32()))\r\narr_named = pa.array([[(\"string\", [1, 2, 3])]], type=ty_named)\r\nroundtrip_scanner(arr_named, ty)\r\n# Traceback (most recent call last):\r\n#   File \"<stdin>\", line 1, in <module>\r\n#   File \"<stdin>\", line 5, in roundtrip_scanner\r\n#   File \"pyarrow/_dataset.pyx\", line 331, in pyarrow._dataset.Dataset.to_table\r\n#   File \"pyarrow/_dataset.pyx\", line 2577, in pyarrow._dataset.Scanner.to_table\r\n#   File \"pyarrow/error.pxi\", line 144, in pyarrow.lib.pyarrow_internal_check_status\r\n#   File \"pyarrow/error.pxi\", line 121, in pyarrow.lib.check_status\r\n# pyarrow.lib.ArrowNotImplementedError: Unsupported cast to map<string, list<item: int32>> from map<string, list<x: int32> ('arr')>\r\n{code}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add casting support for map type",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820/comment/17607422",
                    "id": "17607422",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
                        "name": "willjones127",
                        "key": "willjones127",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Will Jones",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "What's actually going on is we don't have any cast kernel for Map. Casting from a map to map works, because we early return if types are equal, and our equals method doesn't care about map field names. But it does care about list field names, so if the map contains a list then it will look for a cast function.\r\n\r\nI'll create a separate ticket for implementing Cast for Map, but for this particular issue, I think it would be nice to have a fast path for renaming fields in cast.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
                        "name": "willjones127",
                        "key": "willjones127",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Will Jones",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-09-20T22:44:44.380+0000",
                    "updated": "2022-09-20T22:44:44.380+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820/comment/17612926",
                    "id": "17612926",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "[~willjones127] this JIRA is now only about Map type? (casting nested lists already seems to work with different names, and https://github.com/apache/arrow/pull/14198 is only addressing Map?) ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2022-10-05T09:36:52.663+0000",
                    "updated": "2022-10-05T09:36:52.663+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820/comment/17613030",
                    "id": "17613030",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
                        "name": "willjones127",
                        "key": "willjones127",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Will Jones",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Yes, I've updated the title. Casting lists only was broken if it was inside a map. The only reason casting maps looked as if it was working was because of the early return if types are \"equal\" (and maps are \"equal\" even if they have different field names).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willjones127",
                        "name": "willjones127",
                        "key": "willjones127",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Will Jones",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-10-05T14:53:59.786+0000",
                    "updated": "2022-10-05T14:53:59.786+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475820/comment/17616370",
                    "id": "17616370",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 14198\n[https://github.com/apache/arrow/pull/14198]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-10-12T11:35:38.395+0000",
                    "updated": "2022-10-12T11:35:38.395+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z17l5k:",
        "customfield_12314139": null
    }
}