{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13258935",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935",
    "key": "ARROW-6700",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=liurenjie1024",
            "name": "liurenjie1024",
            "key": "liurenjie1024",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Renjie Liu",
            "active": true,
            "timeZone": "Asia/Chongqing"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 21000,
            "total": 21000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 21000,
            "total": 21000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6700/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 36,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935/worklog/327561",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5641: ARROW-6700: [Rust] [DataFusion] Use new Arrow reader [WIP]\nURL: https://github.com/apache/arrow/pull/5641\n \n \n   Start roughing out new Parquet execution plan, which will use new Arrow reader.\r\n   \r\n   @liurenjie1024 I'd like to collaborate on this with you, if you have the time.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-13T20:05:46.449+0000",
                    "updated": "2019-10-13T20:05:46.449+0000",
                    "started": "2019-10-13T20:05:46.447+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327561",
                    "issueId": "13258935"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935/worklog/327564",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #5641: ARROW-6700: [Rust] [DataFusion] Use new Arrow reader [WIP]\nURL: https://github.com/apache/arrow/pull/5641#issuecomment-541454869\n \n \n   https://issues.apache.org/jira/browse/ARROW-6700\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-13T20:16:14.704+0000",
                    "updated": "2019-10-13T20:16:14.704+0000",
                    "started": "2019-10-13T20:16:14.704+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327564",
                    "issueId": "13258935"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935/worklog/327637",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on pull request #5641: ARROW-6700: [Rust] [DataFusion] Use new Arrow reader [WIP]\nURL: https://github.com/apache/arrow/pull/5641#discussion_r334347259\n \n \n\n ##########\n File path: rust/datafusion/src/execution/physical_plan/parquet.rs\n ##########\n @@ -0,0 +1,258 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Execution plan for reading Parquet files\n+\n+use std::fs::File;\n+use std::rc::Rc;\n+use std::sync::{Arc, Mutex};\n+use std::thread;\n+\n+use crate::error::{ExecutionError, Result};\n+use crate::execution::physical_plan::common;\n+use crate::execution::physical_plan::{BatchIterator, ExecutionPlan, Partition};\n+use arrow::array::{ArrayRef, StructArray};\n+use arrow::datatypes::Schema;\n+use arrow::record_batch::RecordBatch;\n+use parquet::arrow::array_reader::*;\n+use parquet::file::reader::{FileReader, SerializedFileReader};\n+\n+use crossbeam::channel::{unbounded, Receiver, Sender};\n+use parquet::arrow::parquet_to_arrow_schema;\n+\n+/// Execution plan for scanning a Parquet file\n+pub struct ParquetExec {\n+    /// Path to directory containing partitioned Parquet files with the same schema\n+    filenames: Vec<String>,\n+    /// Schema after projection is applied\n+    schema: Arc<Schema>,\n+    /// Projection for which columns to load\n+    projection: Vec<usize>,\n+    /// Batch size\n+    batch_size: usize,\n+}\n+\n+impl ParquetExec {\n+    /// Create a new Parquet reader execution plan\n+    pub fn try_new(\n+        path: &str,\n+        projection: Option<Vec<usize>>,\n+        batch_size: usize,\n+    ) -> Result<Self> {\n+        let mut filenames: Vec<String> = vec![];\n+        common::build_file_list(path, &mut filenames, \".parquet\")?;\n+        if filenames.is_empty() {\n+            Err(ExecutionError::General(\"No files found\".to_string()))\n+        } else {\n+            let file = File::open(&filenames[0])?;\n+            let reader = SerializedFileReader::new(file)?;\n+            let metadata = reader.metadata();\n+            let schema =\n+                parquet_to_arrow_schema(metadata.file_metadata().schema_descr_ptr())?;\n+\n+            let projection = match projection {\n+                Some(p) => p,\n+                None => vec![], //TODO select all\n+            };\n+\n+            let projected_schema = Schema::new(\n+                projection\n+                    .iter()\n+                    .map(|i| schema.field(*i).clone())\n+                    .collect(),\n+            );\n+\n+            println!(\"projection: {:?}\", projection);\n+            println!(\"projected schema: {:?}\", projected_schema);\n+\n+            Ok(Self {\n+                filenames,\n+                schema: Arc::new(projected_schema),\n+                projection,\n+                batch_size,\n+            })\n+        }\n+    }\n+}\n+\n+impl ExecutionPlan for ParquetExec {\n+    fn schema(&self) -> Arc<Schema> {\n+        self.schema.clone()\n+    }\n+\n+    fn partitions(&self) -> Result<Vec<Arc<dyn Partition>>> {\n+        let partitions = self\n+            .filenames\n+            .iter()\n+            .map(|filename| {\n+                Arc::new(ParquetPartition::new(\n+                    &filename,\n+                    self.projection.clone(),\n+                    self.schema.clone(),\n+                    self.batch_size,\n+                )) as Arc<dyn Partition>\n+            })\n+            .collect();\n+        Ok(partitions)\n+    }\n+}\n+\n+struct ParquetPartition {\n+    iterator: Arc<Mutex<dyn BatchIterator>>,\n+}\n+\n+impl ParquetPartition {\n+    /// Create a new Parquet partition\n+    pub fn new(\n+        filename: &str,\n+        projection: Vec<usize>,\n+        schema: Arc<Schema>,\n+        batch_size: usize,\n+    ) -> Self {\n+        // because the parquet implementation is not thread-safe, it is necessary to execute\n+        // on a thread and communicate with channels\n+        let (request_tx, request_rx): (Sender<()>, Receiver<()>) = unbounded();\n+        let (response_tx, response_rx): (\n+            Sender<Result<Option<RecordBatch>>>,\n+            Receiver<Result<Option<RecordBatch>>>,\n+        ) = unbounded();\n+        let filename = filename.to_string();\n+\n+        let projected_schema = schema.clone();\n+        thread::spawn(move || {\n+            //TODO error handling, remove unwraps\n+\n+            // open file\n+            let file = File::open(&filename).unwrap();\n+            let file_reader = Rc::new(SerializedFileReader::new(file).unwrap());\n+            let parquet_schema =\n \n Review comment:\n   Schema should also consider projection.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T07:12:32.209+0000",
                    "updated": "2019-10-14T07:12:32.209+0000",
                    "started": "2019-10-14T07:12:32.208+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327637",
                    "issueId": "13258935"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935/worklog/327638",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on pull request #5641: ARROW-6700: [Rust] [DataFusion] Use new Arrow reader [WIP]\nURL: https://github.com/apache/arrow/pull/5641#discussion_r334343711\n \n \n\n ##########\n File path: rust/parquet/src/arrow/mod.rs\n ##########\n @@ -20,7 +20,7 @@\n //!\n //! This mod provides API for converting between arrow and parquet.\n \n-pub(in crate::arrow) mod array_reader;\n+pub mod array_reader;\n \n Review comment:\n   array_reader is not designed for public use.  This PR https://github.com/apache/arrow/pull/5523 contains public api and doc example. Essentially, you should use `ArrowReader`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T07:12:32.239+0000",
                    "updated": "2019-10-14T07:12:32.239+0000",
                    "started": "2019-10-14T07:12:32.238+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327638",
                    "issueId": "13258935"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935/worklog/327639",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on pull request #5641: ARROW-6700: [Rust] [DataFusion] Use new Arrow reader [WIP]\nURL: https://github.com/apache/arrow/pull/5641#discussion_r334346666\n \n \n\n ##########\n File path: rust/datafusion/src/execution/physical_plan/parquet.rs\n ##########\n @@ -0,0 +1,258 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Execution plan for reading Parquet files\n+\n+use std::fs::File;\n+use std::rc::Rc;\n+use std::sync::{Arc, Mutex};\n+use std::thread;\n+\n+use crate::error::{ExecutionError, Result};\n+use crate::execution::physical_plan::common;\n+use crate::execution::physical_plan::{BatchIterator, ExecutionPlan, Partition};\n+use arrow::array::{ArrayRef, StructArray};\n+use arrow::datatypes::Schema;\n+use arrow::record_batch::RecordBatch;\n+use parquet::arrow::array_reader::*;\n+use parquet::file::reader::{FileReader, SerializedFileReader};\n+\n+use crossbeam::channel::{unbounded, Receiver, Sender};\n+use parquet::arrow::parquet_to_arrow_schema;\n+\n+/// Execution plan for scanning a Parquet file\n+pub struct ParquetExec {\n+    /// Path to directory containing partitioned Parquet files with the same schema\n+    filenames: Vec<String>,\n+    /// Schema after projection is applied\n+    schema: Arc<Schema>,\n+    /// Projection for which columns to load\n+    projection: Vec<usize>,\n+    /// Batch size\n+    batch_size: usize,\n+}\n+\n+impl ParquetExec {\n+    /// Create a new Parquet reader execution plan\n+    pub fn try_new(\n+        path: &str,\n+        projection: Option<Vec<usize>>,\n+        batch_size: usize,\n+    ) -> Result<Self> {\n+        let mut filenames: Vec<String> = vec![];\n+        common::build_file_list(path, &mut filenames, \".parquet\")?;\n+        if filenames.is_empty() {\n+            Err(ExecutionError::General(\"No files found\".to_string()))\n+        } else {\n+            let file = File::open(&filenames[0])?;\n+            let reader = SerializedFileReader::new(file)?;\n+            let metadata = reader.metadata();\n+            let schema =\n+                parquet_to_arrow_schema(metadata.file_metadata().schema_descr_ptr())?;\n+\n+            let projection = match projection {\n+                Some(p) => p,\n+                None => vec![], //TODO select all\n+            };\n+\n+            let projected_schema = Schema::new(\n+                projection\n+                    .iter()\n+                    .map(|i| schema.field(*i).clone())\n+                    .collect(),\n+            );\n+\n+            println!(\"projection: {:?}\", projection);\n+            println!(\"projected schema: {:?}\", projected_schema);\n+\n+            Ok(Self {\n+                filenames,\n+                schema: Arc::new(projected_schema),\n+                projection,\n+                batch_size,\n+            })\n+        }\n+    }\n+}\n+\n+impl ExecutionPlan for ParquetExec {\n+    fn schema(&self) -> Arc<Schema> {\n+        self.schema.clone()\n+    }\n+\n+    fn partitions(&self) -> Result<Vec<Arc<dyn Partition>>> {\n+        let partitions = self\n+            .filenames\n+            .iter()\n+            .map(|filename| {\n+                Arc::new(ParquetPartition::new(\n+                    &filename,\n+                    self.projection.clone(),\n+                    self.schema.clone(),\n+                    self.batch_size,\n+                )) as Arc<dyn Partition>\n+            })\n+            .collect();\n+        Ok(partitions)\n+    }\n+}\n+\n+struct ParquetPartition {\n+    iterator: Arc<Mutex<dyn BatchIterator>>,\n+}\n+\n+impl ParquetPartition {\n+    /// Create a new Parquet partition\n+    pub fn new(\n+        filename: &str,\n+        projection: Vec<usize>,\n+        schema: Arc<Schema>,\n+        batch_size: usize,\n+    ) -> Self {\n+        // because the parquet implementation is not thread-safe, it is necessary to execute\n+        // on a thread and communicate with channels\n+        let (request_tx, request_rx): (Sender<()>, Receiver<()>) = unbounded();\n+        let (response_tx, response_rx): (\n+            Sender<Result<Option<RecordBatch>>>,\n+            Receiver<Result<Option<RecordBatch>>>,\n+        ) = unbounded();\n+        let filename = filename.to_string();\n+\n+        let projected_schema = schema.clone();\n+        thread::spawn(move || {\n+            //TODO error handling, remove unwraps\n+\n+            // open file\n+            let file = File::open(&filename).unwrap();\n+            let file_reader = Rc::new(SerializedFileReader::new(file).unwrap());\n+            let parquet_schema =\n+                file_reader.metadata().file_metadata().schema_descr_ptr();\n+\n+            // create array readers\n+            let mut array_readers = Vec::with_capacity(projection.len());\n \n Review comment:\n   Please use new `ArrowReader` here.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T07:12:32.246+0000",
                    "updated": "2019-10-14T07:12:32.246+0000",
                    "started": "2019-10-14T07:12:32.245+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327639",
                    "issueId": "13258935"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935/worklog/328233",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #5641: ARROW-6700: [Rust] [DataFusion] Use new Arrow reader [WIP]\nURL: https://github.com/apache/arrow/pull/5641#issuecomment-541978419\n \n \n   @liurenjie1024 I updated to use ArrowReader. When I run `cargo test` I actually get a SIGSEGV:\r\n   \r\n   ```\r\n   error: process didn't exit successfully: `/home/andy/git/andygrove/arrow/rust/target/debug/deps/datafusion-39547aa10aa86781` (signal: 11, SIGSEGV: invalid memory reference)\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T23:57:04.820+0000",
                    "updated": "2019-10-14T23:57:04.820+0000",
                    "started": "2019-10-14T23:57:04.820+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "328233",
                    "issueId": "13258935"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935/worklog/328373",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on issue #5641: ARROW-6700: [Rust] [DataFusion] Use new Arrow reader [WIP]\nURL: https://github.com/apache/arrow/pull/5641#issuecomment-542075217\n \n \n   @andygrove I pull your request and run the tests. The root cause is that currently arrow reader doesn't support some data types(e.g., UTF8) and it caused program to crash. \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-15T07:19:31.689+0000",
                    "updated": "2019-10-15T07:19:31.689+0000",
                    "started": "2019-10-15T07:19:31.688+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "328373",
                    "issueId": "13258935"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935/worklog/328375",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on pull request #5641: ARROW-6700: [Rust] [DataFusion] Use new Arrow reader [WIP]\nURL: https://github.com/apache/arrow/pull/5641#discussion_r334786719\n \n \n\n ##########\n File path: rust/datafusion/src/execution/physical_plan/parquet.rs\n ##########\n @@ -0,0 +1,231 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Execution plan for reading Parquet files\n+\n+use std::fs::File;\n+use std::rc::Rc;\n+use std::sync::{Arc, Mutex};\n+use std::thread;\n+\n+use crate::error::{ExecutionError, Result};\n+use crate::execution::physical_plan::common;\n+use crate::execution::physical_plan::{BatchIterator, ExecutionPlan, Partition};\n+use arrow::datatypes::Schema;\n+use arrow::record_batch::RecordBatch;\n+use parquet::file::reader::SerializedFileReader;\n+\n+use crossbeam::channel::{unbounded, Receiver, Sender};\n+use parquet::arrow::{ParquetFileArrowReader, ArrowReader};\n+\n+/// Execution plan for scanning a Parquet file\n+pub struct ParquetExec {\n+    /// Path to directory containing partitioned Parquet files with the same schema\n+    filenames: Vec<String>,\n+    /// Schema after projection is applied\n+    schema: Arc<Schema>,\n+    /// Projection for which columns to load\n+    projection: Vec<usize>,\n+    /// Batch size\n+    batch_size: usize,\n+}\n+\n+impl ParquetExec {\n+    /// Create a new Parquet reader execution plan\n+    pub fn try_new(\n+        path: &str,\n+        projection: Option<Vec<usize>>,\n+        batch_size: usize,\n+    ) -> Result<Self> {\n+        let mut filenames: Vec<String> = vec![];\n+        common::build_file_list(path, &mut filenames, \".parquet\")?;\n+        if filenames.is_empty() {\n+            Err(ExecutionError::General(\"No files found\".to_string()))\n+        } else {\n+            let file = File::open(&filenames[0])?;\n+            let file_reader = Rc::new(SerializedFileReader::new(file)?);\n+            let mut arrow_reader = ParquetFileArrowReader::new(file_reader);\n+            let schema = arrow_reader.get_schema()?;\n+\n+            let projection = match projection {\n+                Some(p) => p,\n+                None => (0..schema.fields().len()).collect()\n+            };\n+\n+            let projected_schema = Schema::new(\n+                projection\n+                    .iter()\n+                    .map(|i| schema.field(*i).clone())\n+                    .collect(),\n+            );\n+\n+            println!(\"projection: {:?}\", projection);\n+            println!(\"projected schema: {:?}\", projected_schema);\n+\n+            Ok(Self {\n+                filenames,\n+                schema: Arc::new(projected_schema),\n+                projection,\n+                batch_size,\n+            })\n+        }\n+    }\n+}\n+\n+impl ExecutionPlan for ParquetExec {\n+    fn schema(&self) -> Arc<Schema> {\n+        self.schema.clone()\n+    }\n+\n+    fn partitions(&self) -> Result<Vec<Arc<dyn Partition>>> {\n+        let partitions = self\n+            .filenames\n+            .iter()\n+            .map(|filename| {\n+                Arc::new(ParquetPartition::new(\n+                    &filename,\n+                    self.projection.clone(),\n+                    self.schema.clone(),\n+                    self.batch_size,\n+                )) as Arc<dyn Partition>\n+            })\n+            .collect();\n+        Ok(partitions)\n+    }\n+}\n+\n+struct ParquetPartition {\n+    iterator: Arc<Mutex<dyn BatchIterator>>,\n+}\n+\n+impl ParquetPartition {\n+    /// Create a new Parquet partition\n+    pub fn new(\n+        filename: &str,\n+        projection: Vec<usize>,\n+        schema: Arc<Schema>,\n+        batch_size: usize,\n+    ) -> Self {\n+        // because the parquet implementation is not thread-safe, it is necessary to execute\n+        // on a thread and communicate with channels\n+        let (request_tx, request_rx): (Sender<()>, Receiver<()>) = unbounded();\n+        let (response_tx, response_rx): (\n+            Sender<Result<Option<RecordBatch>>>,\n+            Receiver<Result<Option<RecordBatch>>>,\n+        ) = unbounded();\n+\n+        let filename = filename.to_string();\n+\n+        thread::spawn(move || {\n+\n+            //TODO error handling, remove unwraps\n+\n+            // open file\n+            let file = File::open(&filename).unwrap();\n+            let file_reader = Rc::new(SerializedFileReader::new(file).unwrap());\n+            let mut arrow_reader = ParquetFileArrowReader::new(file_reader);\n+            let mut batch_reader = arrow_reader.get_record_reader_by_columns(projection, batch_size).unwrap();\n+\n+            while let Ok(_) = request_rx.recv() {\n+                match batch_reader.next_batch() {\n+                    Ok(Some(batch)) => {\n+                        response_tx.send(Ok(Some(batch))).unwrap();\n+                    },\n+                    Ok(None) => {\n+                        response_tx.send(Ok(None)).unwrap();\n+                        break;\n+                    },\n+                    Err(e) => {\n+                        response_tx.send(Err(ExecutionError::General(format!(\"{:?}\", e)))).unwrap();\n+                        break;\n+                    }\n+                }\n+            }\n+        });\n+\n+        let iterator = Arc::new(Mutex::new(ParquetIterator {\n+            schema,\n+            request_tx,\n+            response_rx,\n+        }));\n+\n+        Self { iterator }\n+    }\n+}\n+\n+impl Partition for ParquetPartition {\n+    fn execute(&self) -> Result<Arc<Mutex<dyn BatchIterator>>> {\n+        Ok(self.iterator.clone())\n+    }\n+}\n+\n+struct ParquetIterator {\n+    schema: Arc<Schema>,\n+    request_tx: Sender<()>,\n+    response_rx: Receiver<Result<Option<RecordBatch>>>,\n+}\n+\n+impl BatchIterator for ParquetIterator {\n+    fn schema(&self) -> Arc<Schema> {\n+        self.schema.clone()\n+    }\n+\n+    fn next(&mut self) -> Result<Option<RecordBatch>> {\n+        match self.request_tx.send(()) {\n+            Ok(_) => match self.response_rx.recv() {\n \n Review comment:\n   Why we need another thread here? This send request, wait response model is also blocked here waiting for IO.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-15T07:21:06.207+0000",
                    "updated": "2019-10-15T07:21:06.207+0000",
                    "started": "2019-10-15T07:21:06.207+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "328375",
                    "issueId": "13258935"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935/worklog/328559",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5641: ARROW-6700: [Rust] [DataFusion] Use new Arrow reader [WIP]\nURL: https://github.com/apache/arrow/pull/5641#discussion_r334952745\n \n \n\n ##########\n File path: rust/datafusion/src/execution/physical_plan/parquet.rs\n ##########\n @@ -0,0 +1,231 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Execution plan for reading Parquet files\n+\n+use std::fs::File;\n+use std::rc::Rc;\n+use std::sync::{Arc, Mutex};\n+use std::thread;\n+\n+use crate::error::{ExecutionError, Result};\n+use crate::execution::physical_plan::common;\n+use crate::execution::physical_plan::{BatchIterator, ExecutionPlan, Partition};\n+use arrow::datatypes::Schema;\n+use arrow::record_batch::RecordBatch;\n+use parquet::file::reader::SerializedFileReader;\n+\n+use crossbeam::channel::{unbounded, Receiver, Sender};\n+use parquet::arrow::{ParquetFileArrowReader, ArrowReader};\n+\n+/// Execution plan for scanning a Parquet file\n+pub struct ParquetExec {\n+    /// Path to directory containing partitioned Parquet files with the same schema\n+    filenames: Vec<String>,\n+    /// Schema after projection is applied\n+    schema: Arc<Schema>,\n+    /// Projection for which columns to load\n+    projection: Vec<usize>,\n+    /// Batch size\n+    batch_size: usize,\n+}\n+\n+impl ParquetExec {\n+    /// Create a new Parquet reader execution plan\n+    pub fn try_new(\n+        path: &str,\n+        projection: Option<Vec<usize>>,\n+        batch_size: usize,\n+    ) -> Result<Self> {\n+        let mut filenames: Vec<String> = vec![];\n+        common::build_file_list(path, &mut filenames, \".parquet\")?;\n+        if filenames.is_empty() {\n+            Err(ExecutionError::General(\"No files found\".to_string()))\n+        } else {\n+            let file = File::open(&filenames[0])?;\n+            let file_reader = Rc::new(SerializedFileReader::new(file)?);\n+            let mut arrow_reader = ParquetFileArrowReader::new(file_reader);\n+            let schema = arrow_reader.get_schema()?;\n+\n+            let projection = match projection {\n+                Some(p) => p,\n+                None => (0..schema.fields().len()).collect()\n+            };\n+\n+            let projected_schema = Schema::new(\n+                projection\n+                    .iter()\n+                    .map(|i| schema.field(*i).clone())\n+                    .collect(),\n+            );\n+\n+            println!(\"projection: {:?}\", projection);\n+            println!(\"projected schema: {:?}\", projected_schema);\n+\n+            Ok(Self {\n+                filenames,\n+                schema: Arc::new(projected_schema),\n+                projection,\n+                batch_size,\n+            })\n+        }\n+    }\n+}\n+\n+impl ExecutionPlan for ParquetExec {\n+    fn schema(&self) -> Arc<Schema> {\n+        self.schema.clone()\n+    }\n+\n+    fn partitions(&self) -> Result<Vec<Arc<dyn Partition>>> {\n+        let partitions = self\n+            .filenames\n+            .iter()\n+            .map(|filename| {\n+                Arc::new(ParquetPartition::new(\n+                    &filename,\n+                    self.projection.clone(),\n+                    self.schema.clone(),\n+                    self.batch_size,\n+                )) as Arc<dyn Partition>\n+            })\n+            .collect();\n+        Ok(partitions)\n+    }\n+}\n+\n+struct ParquetPartition {\n+    iterator: Arc<Mutex<dyn BatchIterator>>,\n+}\n+\n+impl ParquetPartition {\n+    /// Create a new Parquet partition\n+    pub fn new(\n+        filename: &str,\n+        projection: Vec<usize>,\n+        schema: Arc<Schema>,\n+        batch_size: usize,\n+    ) -> Self {\n+        // because the parquet implementation is not thread-safe, it is necessary to execute\n+        // on a thread and communicate with channels\n+        let (request_tx, request_rx): (Sender<()>, Receiver<()>) = unbounded();\n+        let (response_tx, response_rx): (\n+            Sender<Result<Option<RecordBatch>>>,\n+            Receiver<Result<Option<RecordBatch>>>,\n+        ) = unbounded();\n+\n+        let filename = filename.to_string();\n+\n+        thread::spawn(move || {\n+\n+            //TODO error handling, remove unwraps\n+\n+            // open file\n+            let file = File::open(&filename).unwrap();\n+            let file_reader = Rc::new(SerializedFileReader::new(file).unwrap());\n+            let mut arrow_reader = ParquetFileArrowReader::new(file_reader);\n+            let mut batch_reader = arrow_reader.get_record_reader_by_columns(projection, batch_size).unwrap();\n+\n+            while let Ok(_) = request_rx.recv() {\n+                match batch_reader.next_batch() {\n+                    Ok(Some(batch)) => {\n+                        response_tx.send(Ok(Some(batch))).unwrap();\n+                    },\n+                    Ok(None) => {\n+                        response_tx.send(Ok(None)).unwrap();\n+                        break;\n+                    },\n+                    Err(e) => {\n+                        response_tx.send(Err(ExecutionError::General(format!(\"{:?}\", e)))).unwrap();\n+                        break;\n+                    }\n+                }\n+            }\n+        });\n+\n+        let iterator = Arc::new(Mutex::new(ParquetIterator {\n+            schema,\n+            request_tx,\n+            response_rx,\n+        }));\n+\n+        Self { iterator }\n+    }\n+}\n+\n+impl Partition for ParquetPartition {\n+    fn execute(&self) -> Result<Arc<Mutex<dyn BatchIterator>>> {\n+        Ok(self.iterator.clone())\n+    }\n+}\n+\n+struct ParquetIterator {\n+    schema: Arc<Schema>,\n+    request_tx: Sender<()>,\n+    response_rx: Receiver<Result<Option<RecordBatch>>>,\n+}\n+\n+impl BatchIterator for ParquetIterator {\n+    fn schema(&self) -> Arc<Schema> {\n+        self.schema.clone()\n+    }\n+\n+    fn next(&mut self) -> Result<Option<RecordBatch>> {\n+        match self.request_tx.send(()) {\n+            Ok(_) => match self.response_rx.recv() {\n \n Review comment:\n   We need the threading because the Parquet structs/traits do not implement Sync + Send and cannot be sent between threads.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-15T13:32:39.267+0000",
                    "updated": "2019-10-15T13:32:39.267+0000",
                    "started": "2019-10-15T13:32:39.267+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "328559",
                    "issueId": "13258935"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935/worklog/328561",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5641: ARROW-6700: [Rust] [DataFusion] Use new Arrow reader [WIP]\nURL: https://github.com/apache/arrow/pull/5641#discussion_r334953048\n \n \n\n ##########\n File path: rust/datafusion/src/execution/physical_plan/parquet.rs\n ##########\n @@ -0,0 +1,231 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Execution plan for reading Parquet files\n+\n+use std::fs::File;\n+use std::rc::Rc;\n+use std::sync::{Arc, Mutex};\n+use std::thread;\n+\n+use crate::error::{ExecutionError, Result};\n+use crate::execution::physical_plan::common;\n+use crate::execution::physical_plan::{BatchIterator, ExecutionPlan, Partition};\n+use arrow::datatypes::Schema;\n+use arrow::record_batch::RecordBatch;\n+use parquet::file::reader::SerializedFileReader;\n+\n+use crossbeam::channel::{unbounded, Receiver, Sender};\n+use parquet::arrow::{ParquetFileArrowReader, ArrowReader};\n+\n+/// Execution plan for scanning a Parquet file\n+pub struct ParquetExec {\n+    /// Path to directory containing partitioned Parquet files with the same schema\n+    filenames: Vec<String>,\n+    /// Schema after projection is applied\n+    schema: Arc<Schema>,\n+    /// Projection for which columns to load\n+    projection: Vec<usize>,\n+    /// Batch size\n+    batch_size: usize,\n+}\n+\n+impl ParquetExec {\n+    /// Create a new Parquet reader execution plan\n+    pub fn try_new(\n+        path: &str,\n+        projection: Option<Vec<usize>>,\n+        batch_size: usize,\n+    ) -> Result<Self> {\n+        let mut filenames: Vec<String> = vec![];\n+        common::build_file_list(path, &mut filenames, \".parquet\")?;\n+        if filenames.is_empty() {\n+            Err(ExecutionError::General(\"No files found\".to_string()))\n+        } else {\n+            let file = File::open(&filenames[0])?;\n+            let file_reader = Rc::new(SerializedFileReader::new(file)?);\n+            let mut arrow_reader = ParquetFileArrowReader::new(file_reader);\n+            let schema = arrow_reader.get_schema()?;\n+\n+            let projection = match projection {\n+                Some(p) => p,\n+                None => (0..schema.fields().len()).collect()\n+            };\n+\n+            let projected_schema = Schema::new(\n+                projection\n+                    .iter()\n+                    .map(|i| schema.field(*i).clone())\n+                    .collect(),\n+            );\n+\n+            println!(\"projection: {:?}\", projection);\n+            println!(\"projected schema: {:?}\", projected_schema);\n+\n+            Ok(Self {\n+                filenames,\n+                schema: Arc::new(projected_schema),\n+                projection,\n+                batch_size,\n+            })\n+        }\n+    }\n+}\n+\n+impl ExecutionPlan for ParquetExec {\n+    fn schema(&self) -> Arc<Schema> {\n+        self.schema.clone()\n+    }\n+\n+    fn partitions(&self) -> Result<Vec<Arc<dyn Partition>>> {\n+        let partitions = self\n+            .filenames\n+            .iter()\n+            .map(|filename| {\n+                Arc::new(ParquetPartition::new(\n+                    &filename,\n+                    self.projection.clone(),\n+                    self.schema.clone(),\n+                    self.batch_size,\n+                )) as Arc<dyn Partition>\n+            })\n+            .collect();\n+        Ok(partitions)\n+    }\n+}\n+\n+struct ParquetPartition {\n+    iterator: Arc<Mutex<dyn BatchIterator>>,\n+}\n+\n+impl ParquetPartition {\n+    /// Create a new Parquet partition\n+    pub fn new(\n+        filename: &str,\n+        projection: Vec<usize>,\n+        schema: Arc<Schema>,\n+        batch_size: usize,\n+    ) -> Self {\n+        // because the parquet implementation is not thread-safe, it is necessary to execute\n+        // on a thread and communicate with channels\n+        let (request_tx, request_rx): (Sender<()>, Receiver<()>) = unbounded();\n+        let (response_tx, response_rx): (\n+            Sender<Result<Option<RecordBatch>>>,\n+            Receiver<Result<Option<RecordBatch>>>,\n+        ) = unbounded();\n+\n+        let filename = filename.to_string();\n+\n+        thread::spawn(move || {\n+\n+            //TODO error handling, remove unwraps\n+\n+            // open file\n+            let file = File::open(&filename).unwrap();\n+            let file_reader = Rc::new(SerializedFileReader::new(file).unwrap());\n+            let mut arrow_reader = ParquetFileArrowReader::new(file_reader);\n+            let mut batch_reader = arrow_reader.get_record_reader_by_columns(projection, batch_size).unwrap();\n+\n+            while let Ok(_) = request_rx.recv() {\n+                match batch_reader.next_batch() {\n+                    Ok(Some(batch)) => {\n+                        response_tx.send(Ok(Some(batch))).unwrap();\n+                    },\n+                    Ok(None) => {\n+                        response_tx.send(Ok(None)).unwrap();\n+                        break;\n+                    },\n+                    Err(e) => {\n+                        response_tx.send(Err(ExecutionError::General(format!(\"{:?}\", e)))).unwrap();\n+                        break;\n+                    }\n+                }\n+            }\n+        });\n+\n+        let iterator = Arc::new(Mutex::new(ParquetIterator {\n+            schema,\n+            request_tx,\n+            response_rx,\n+        }));\n+\n+        Self { iterator }\n+    }\n+}\n+\n+impl Partition for ParquetPartition {\n+    fn execute(&self) -> Result<Arc<Mutex<dyn BatchIterator>>> {\n+        Ok(self.iterator.clone())\n+    }\n+}\n+\n+struct ParquetIterator {\n+    schema: Arc<Schema>,\n+    request_tx: Sender<()>,\n+    response_rx: Receiver<Result<Option<RecordBatch>>>,\n+}\n+\n+impl BatchIterator for ParquetIterator {\n+    fn schema(&self) -> Arc<Schema> {\n+        self.schema.clone()\n+    }\n+\n+    fn next(&mut self) -> Result<Option<RecordBatch>> {\n+        match self.request_tx.send(()) {\n+            Ok(_) => match self.response_rx.recv() {\n \n Review comment:\n   I would much prefer it if we could make Parquet safe to use in multi threaded environments.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-15T13:33:11.084+0000",
                    "updated": "2019-10-15T13:33:11.084+0000",
                    "started": "2019-10-15T13:33:11.084+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "328561",
                    "issueId": "13258935"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935/worklog/328562",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #5641: ARROW-6700: [Rust] [DataFusion] Use new Arrow reader [WIP]\nURL: https://github.com/apache/arrow/pull/5641#issuecomment-542213802\n \n \n   > @andygrove I pull your request and run the tests. The root cause is that currently arrow reader doesn't support some data types(e.g., UTF8) and it caused program to crash.\r\n   \r\n   We should make the code fail gracefully by returning an `Err` for unsupported types.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-15T13:33:39.283+0000",
                    "updated": "2019-10-15T13:33:39.283+0000",
                    "started": "2019-10-15T13:33:39.283+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "328562",
                    "issueId": "13258935"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935/worklog/330371",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on issue #5641: ARROW-6700: [Rust] [DataFusion] Use new Arrow reader [WIP]\nURL: https://github.com/apache/arrow/pull/5641#issuecomment-543596934\n \n \n   @andygrove After debugging, I found that this is not caused by unwrap call, but by error in supporting UTF8. I'll add support for utf8 and this will be fixed. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-18T08:28:54.319+0000",
                    "updated": "2019-10-18T08:28:54.319+0000",
                    "started": "2019-10-18T08:28:54.319+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "330371",
                    "issueId": "13258935"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935/worklog/348745",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #5641: ARROW-6700: [Rust] [DataFusion] Use new Arrow Parquet reader [WIP]\nURL: https://github.com/apache/arrow/pull/5641#issuecomment-557901370\n \n \n   Hi @liurenjie1024 is there any update on adding support for UTF8?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-24T15:53:25.009+0000",
                    "updated": "2019-11-24T15:53:25.009+0000",
                    "started": "2019-11-24T15:53:25.008+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "348745",
                    "issueId": "13258935"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935/worklog/348906",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on issue #5641: ARROW-6700: [Rust] [DataFusion] Use new Arrow Parquet reader [WIP]\nURL: https://github.com/apache/arrow/pull/5641#issuecomment-557963178\n \n \n   @andygrove  Sorry, almost forgot about this. I'll address it this week.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-25T02:31:59.488+0000",
                    "updated": "2019-11-25T02:31:59.488+0000",
                    "started": "2019-11-25T02:31:59.488+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "348906",
                    "issueId": "13258935"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935/worklog/356524",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #5641: ARROW-6700: [Rust] [DataFusion] Use new Arrow Parquet reader [WIP]\nURL: https://github.com/apache/arrow/pull/5641#issuecomment-563411117\n \n \n   Hi @liurenjie1024 the next issue is that I have a regression due to `Reading Timestamp(Nanosecond) type from parquet is not supported yet`. Do you think this is an easy one to add? It requires a new `Int96Type` and `Int96Converter`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-09T20:02:59.666+0000",
                    "updated": "2019-12-09T20:02:59.666+0000",
                    "started": "2019-12-09T20:02:59.666+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "356524",
                    "issueId": "13258935"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935/worklog/356529",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #5641: ARROW-6700: [Rust] [DataFusion] Use new Arrow Parquet reader [WIP]\nURL: https://github.com/apache/arrow/pull/5641#issuecomment-563419991\n \n \n   @liurenjie1024 I attempted to add support to the array reader for TimestampNanoseconds. It runs but returns the wrong results currently. Could you take a look?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-09T20:22:15.167+0000",
                    "updated": "2019-12-09T20:22:15.167+0000",
                    "started": "2019-12-09T20:22:15.166+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "356529",
                    "issueId": "13258935"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935/worklog/356530",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on issue #5641: ARROW-6700: [Rust] [DataFusion] Use new Arrow Parquet reader [WIP]\nURL: https://github.com/apache/arrow/pull/5641#issuecomment-563423061\n \n \n   @andygrove isn't it the same issue that timestamps are stored in 96bit values? How are you converting from the 96bit values?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-09T20:28:34.865+0000",
                    "updated": "2019-12-09T20:28:34.865+0000",
                    "started": "2019-12-09T20:28:34.865+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "356530",
                    "issueId": "13258935"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935/worklog/356533",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #5641: ARROW-6700: [Rust] [DataFusion] Use new Arrow Parquet reader [WIP]\nURL: https://github.com/apache/arrow/pull/5641#issuecomment-563428470\n \n \n   @nevi-me Yes, I guess I need to write a custom converter here rather than try and use the `CastConverter`. I'll have a go at that.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-09T20:41:06.264+0000",
                    "updated": "2019-12-09T20:41:06.264+0000",
                    "started": "2019-12-09T20:41:06.264+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "356533",
                    "issueId": "13258935"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935/worklog/356746",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on issue #5641: ARROW-6700: [Rust] [DataFusion] Use new Arrow Parquet reader [WIP]\nURL: https://github.com/apache/arrow/pull/5641#issuecomment-563537875\n \n \n   @andygrove I'll take a look this week.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-10T01:35:12.394+0000",
                    "updated": "2019-12-10T01:35:12.394+0000",
                    "started": "2019-12-10T01:35:12.394+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "356746",
                    "issueId": "13258935"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935/worklog/356837",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on issue #5641: ARROW-6700: [Rust] [DataFusion] Use new Arrow Parquet reader [WIP]\nURL: https://github.com/apache/arrow/pull/5641#issuecomment-563828945\n \n \n   I've created a complex converter for int96, and I've fixed the binary reads. The problem with the binary reads was that when I introduced `StringType`, I missed a part in the parquet code where we were supposed to convert a binary physical type with no logical type, to `BinaryType`.\r\n   \r\n   All tests are passing locally for me.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-12-10T05:16:23.147+0000",
                    "updated": "2019-12-10T05:16:23.147+0000",
                    "started": "2019-12-10T05:16:23.147+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "356837",
                    "issueId": "13258935"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 21000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6cfb5c40[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@39b66138[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@11bc09e8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1b090546[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7e2a0f3b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@43442b90[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32c68959[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@61368972[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4fcb01b8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2d31ab7a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b3b63c4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7e9312c8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 21000,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Dec 14 17:05:14 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-12-14T17:05:14.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6700/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-09-26T01:19:50.000+0000",
        "updated": "2019-12-14T17:05:14.000+0000",
        "timeoriginalestimate": null,
        "description": "Once [https://github.com/apache/arrow/pull/5378] is merged, DataFusion should be updated to use this new array reader support instead of the current parquet reader code in the DataFusion crate.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 21000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Use new parquet arrow reader",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935/comment/16938198",
                    "id": "16938198",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=liurenjie1024",
                        "name": "liurenjie1024",
                        "key": "liurenjie1024",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Renjie Liu",
                        "active": true,
                        "timeZone": "Asia/Chongqing"
                    },
                    "body": "[~andygrove] Could you assign this ticket to me?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=liurenjie1024",
                        "name": "liurenjie1024",
                        "key": "liurenjie1024",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Renjie Liu",
                        "active": true,
                        "timeZone": "Asia/Chongqing"
                    },
                    "created": "2019-09-26T02:49:13.745+0000",
                    "updated": "2019-09-26T02:49:13.745+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258935/comment/16996470",
                    "id": "16996470",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 5641\n[https://github.com/apache/arrow/pull/5641]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2019-12-14T17:05:14.143+0000",
                    "updated": "2019-12-14T17:05:14.143+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0711k:",
        "customfield_12314139": null
    }
}