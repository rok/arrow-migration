{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13360745",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360745",
    "key": "ARROW-11772",
    "fields": {
        "parent": {
            "id": "13360743",
            "key": "ARROW-11770",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13360743",
            "fields": {
                "summary": "[C++] Add asynchronous read to readers",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                    "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                    "name": "Closed",
                    "id": "6",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12615204",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12615204",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13377241",
                    "key": "ARROW-12683",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377241",
                    "fields": {
                        "summary": "[C++] Enable fine-grained I/O (coalescing) in IPC reader",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 54000,
            "total": 54000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 54000,
            "total": 54000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11772/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 90,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360745/worklog/562540",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9656:\nURL: https://github.com/apache/arrow/pull/9656#issuecomment-793001123\n\n\n   https://issues.apache.org/jira/browse/ARROW-11772\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-08T19:09:58.344+0000",
                    "updated": "2021-03-08T19:09:58.344+0000",
                    "started": "2021-03-08T19:09:58.344+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "562540",
                    "issueId": "13360745"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360745/worklog/563137",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #9656:\nURL: https://github.com/apache/arrow/pull/9656#issuecomment-794051419\n\n\n   cc @westonpace \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-09T15:32:05.981+0000",
                    "updated": "2021-03-09T15:32:05.981+0000",
                    "started": "2021-03-09T15:32:05.981+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "563137",
                    "issueId": "13360745"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360745/worklog/563138",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9656:\nURL: https://github.com/apache/arrow/pull/9656#discussion_r590476061\n\n\n\n##########\nFile path: cpp/src/arrow/ipc/reader.h\n##########\n@@ -169,6 +170,17 @@ class ARROW_EXPORT RecordBatchFileReader {\n \n   /// \\brief Return current read statistics\n   virtual ReadStats stats() const = 0;\n+\n+  /// \\brief Get a reentrant generator of record batches.\n+  ///\n+  /// This RecordBatchFileReader must outlive the generator.\n\nReview comment:\n       Given that we're talking about an asynchronous primitive, forcing the caller to deal with lifetime issues is a bit unfriendly IMHO. It may be simpler to make `RecordBatchFileReader` inherit from `enable_shared_from_this` and capture a strong reference inside the generator.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-09T15:34:23.916+0000",
                    "updated": "2021-03-09T15:34:23.916+0000",
                    "started": "2021-03-09T15:34:23.916+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "563138",
                    "issueId": "13360745"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360745/worklog/563139",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9656:\nURL: https://github.com/apache/arrow/pull/9656#discussion_r590476604\n\n\n\n##########\nFile path: cpp/src/arrow/util/future.h\n##########\n@@ -628,6 +628,10 @@ Future<std::vector<Result<T>>> All(std::vector<Future<T>> futures) {\n     std::atomic<size_t> n_remaining;\n   };\n \n+  if (futures.empty()) {\n+    return Future<std::vector<Result<T>>>::MakeFinished(std::vector<Result<T>>());\n+  }\n\nReview comment:\n       Add a trivial test for this?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-09T15:34:56.895+0000",
                    "updated": "2021-03-09T15:34:56.895+0000",
                    "started": "2021-03-09T15:34:56.895+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "563139",
                    "issueId": "13360745"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360745/worklog/563148",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9656:\nURL: https://github.com/apache/arrow/pull/9656#discussion_r590484973\n\n\n\n##########\nFile path: cpp/src/arrow/ipc/reader.h\n##########\n@@ -169,6 +170,17 @@ class ARROW_EXPORT RecordBatchFileReader {\n \n   /// \\brief Return current read statistics\n   virtual ReadStats stats() const = 0;\n+\n+  /// \\brief Get a reentrant generator of record batches.\n+  ///\n+  /// This RecordBatchFileReader must outlive the generator.\n\nReview comment:\n       Thanks - this was actually left over from an earlier approach. I've removed the note and adjusted the test to ensure the reader gets dropped before the generator.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-09T15:44:28.562+0000",
                    "updated": "2021-03-09T15:44:28.562+0000",
                    "started": "2021-03-09T15:44:28.562+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "563148",
                    "issueId": "13360745"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360745/worklog/563162",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9656:\nURL: https://github.com/apache/arrow/pull/9656#discussion_r590494650\n\n\n\n##########\nFile path: cpp/src/arrow/ipc/reader.cc\n##########\n@@ -958,10 +959,196 @@ Result<std::shared_ptr<RecordBatchStreamReader>> RecordBatchStreamReader::Open(\n // ----------------------------------------------------------------------\n // Reader implementation\n \n+// Common functions used in both the random-access file reader and the\n+// asynchronous generator\n static inline FileBlock FileBlockFromFlatbuffer(const flatbuf::Block* block) {\n   return FileBlock{block->offset(), block->metaDataLength(), block->bodyLength()};\n }\n \n+Result<std::unique_ptr<Message>> ReadMessageFromBlock(const FileBlock& block,\n+                                                      io::RandomAccessFile* file) {\n+  if (!BitUtil::IsMultipleOf8(block.offset) ||\n+      !BitUtil::IsMultipleOf8(block.metadata_length) ||\n+      !BitUtil::IsMultipleOf8(block.body_length)) {\n+    return Status::Invalid(\"Unaligned block in IPC file\");\n+  }\n+\n+  // TODO(wesm): this breaks integration tests, see ARROW-3256\n+  // DCHECK_EQ((*out)->body_length(), block.body_length);\n+\n+  ARROW_ASSIGN_OR_RAISE(auto message,\n+                        ReadMessage(block.offset, block.metadata_length, file));\n+  return std::move(message);\n+}\n+\n+Status ReadOneDictionary(Message* message, const IpcReadContext& context) {\n+  CHECK_HAS_BODY(*message);\n+  ARROW_ASSIGN_OR_RAISE(auto reader, Buffer::GetReader(message->body()));\n+  DictionaryKind kind;\n+  RETURN_NOT_OK(ReadDictionary(*message->metadata(), context, &kind, reader.get()));\n+  if (kind != DictionaryKind::New) {\n+    return Status::Invalid(\n+        \"Unsupported dictionary replacement or \"\n+        \"dictionary delta in IPC file\");\n+  }\n+  return Status::OK();\n+}\n+\n+/// Common state used by the IPC message generator and record batch generator.\n+struct ARROW_EXPORT IpcFileRecordBatchGeneratorState {\n\nReview comment:\n       This looks a bit tedious. You're essentially copying most of those fields from `RandomAccessFile`?\n\n##########\nFile path: cpp/src/arrow/ipc/reader.cc\n##########\n@@ -958,10 +959,196 @@ Result<std::shared_ptr<RecordBatchStreamReader>> RecordBatchStreamReader::Open(\n // ----------------------------------------------------------------------\n // Reader implementation\n \n+// Common functions used in both the random-access file reader and the\n+// asynchronous generator\n static inline FileBlock FileBlockFromFlatbuffer(const flatbuf::Block* block) {\n   return FileBlock{block->offset(), block->metaDataLength(), block->bodyLength()};\n }\n \n+Result<std::unique_ptr<Message>> ReadMessageFromBlock(const FileBlock& block,\n\nReview comment:\n       Can you make those functions static or put them in the anonymous namespace?\n\n##########\nFile path: cpp/src/arrow/ipc/reader.cc\n##########\n@@ -1022,6 +1209,31 @@ class RecordBatchFileReaderImpl : public RecordBatchFileReader {\n \n   ReadStats stats() const override { return stats_; }\n \n+  Result<AsyncGenerator<std::shared_ptr<RecordBatch>>> GetRecordBatchGenerator(\n+      int readahead_messages, const io::IOContext& io_context) override {\n+    auto state = std::make_shared<IpcFileRecordBatchGeneratorState>();\n+    state->num_dictionaries_ = num_dictionaries();\n+    state->num_record_batches_ = num_record_batches();\n+    state->file_ = file_;\n+    state->options_ = options_;\n+    state->owned_file_ = owned_file_;\n+    state->footer_buffer_ = footer_buffer_;\n+    state->footer_ = footer_;\n+    // Must regenerate uncopyable DictionaryMemo\n\nReview comment:\n       Would be nice to avoid this.\n\n##########\nFile path: cpp/src/arrow/ipc/reader.cc\n##########\n@@ -1022,6 +1209,31 @@ class RecordBatchFileReaderImpl : public RecordBatchFileReader {\n \n   ReadStats stats() const override { return stats_; }\n \n+  Result<AsyncGenerator<std::shared_ptr<RecordBatch>>> GetRecordBatchGenerator(\n+      int readahead_messages, const io::IOContext& io_context) override {\n+    auto state = std::make_shared<IpcFileRecordBatchGeneratorState>();\n+    state->num_dictionaries_ = num_dictionaries();\n+    state->num_record_batches_ = num_record_batches();\n+    state->file_ = file_;\n+    state->options_ = options_;\n+    state->owned_file_ = owned_file_;\n+    state->footer_buffer_ = footer_buffer_;\n+    state->footer_ = footer_;\n+    // Must regenerate uncopyable DictionaryMemo\n+    RETURN_NOT_OK(UnpackSchemaMessage(state->footer_->schema(), state->options_,\n+                                      &state->dictionary_memo_, &state->schema_,\n+                                      &state->out_schema_, &state->field_inclusion_mask_,\n+                                      &state->swap_endian_));\n+    AsyncGenerator<std::shared_ptr<Message>> message_generator =\n+        IpcMessageGenerator(state, io_context);\n+    if (readahead_messages > 0) {\n+      message_generator =\n+          MakeReadaheadGenerator(std::move(message_generator), readahead_messages);\n+    }\n+    return IpcFileRecordBatchGenerator(state, message_generator,\n+                                       arrow::internal::GetCpuThreadPool());\n\nReview comment:\n       I don't think it's desirable to force all processing to go to the global thread pool unconditionally.\r\n   (also, are you sure the processing is heavy enough that it benefits from it?)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-09T16:02:52.846+0000",
                    "updated": "2021-03-09T16:02:52.846+0000",
                    "started": "2021-03-09T16:02:52.846+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "563162",
                    "issueId": "13360745"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360745/worklog/563169",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9656:\nURL: https://github.com/apache/arrow/pull/9656#discussion_r590508192\n\n\n\n##########\nFile path: cpp/src/arrow/ipc/reader.cc\n##########\n@@ -1022,6 +1209,31 @@ class RecordBatchFileReaderImpl : public RecordBatchFileReader {\n \n   ReadStats stats() const override { return stats_; }\n \n+  Result<AsyncGenerator<std::shared_ptr<RecordBatch>>> GetRecordBatchGenerator(\n+      int readahead_messages, const io::IOContext& io_context) override {\n+    auto state = std::make_shared<IpcFileRecordBatchGeneratorState>();\n+    state->num_dictionaries_ = num_dictionaries();\n+    state->num_record_batches_ = num_record_batches();\n+    state->file_ = file_;\n+    state->options_ = options_;\n+    state->owned_file_ = owned_file_;\n+    state->footer_buffer_ = footer_buffer_;\n+    state->footer_ = footer_;\n+    // Must regenerate uncopyable DictionaryMemo\n+    RETURN_NOT_OK(UnpackSchemaMessage(state->footer_->schema(), state->options_,\n+                                      &state->dictionary_memo_, &state->schema_,\n+                                      &state->out_schema_, &state->field_inclusion_mask_,\n+                                      &state->swap_endian_));\n+    AsyncGenerator<std::shared_ptr<Message>> message_generator =\n+        IpcMessageGenerator(state, io_context);\n+    if (readahead_messages > 0) {\n+      message_generator =\n+          MakeReadaheadGenerator(std::move(message_generator), readahead_messages);\n+    }\n+    return IpcFileRecordBatchGenerator(state, message_generator,\n+                                       arrow::internal::GetCpuThreadPool());\n\nReview comment:\n       Usually not, but it would be in the case of compressed buffers. I could also change it to not offload onto a secondary pool by default (and hence do the work on the same thread used to read data) and/or benchmark if there's any overhead to this.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-09T16:10:51.670+0000",
                    "updated": "2021-03-09T16:10:51.670+0000",
                    "started": "2021-03-09T16:10:51.670+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "563169",
                    "issueId": "13360745"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360745/worklog/563171",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9656:\nURL: https://github.com/apache/arrow/pull/9656#discussion_r590508986\n\n\n\n##########\nFile path: cpp/src/arrow/ipc/reader.cc\n##########\n@@ -958,10 +959,196 @@ Result<std::shared_ptr<RecordBatchStreamReader>> RecordBatchStreamReader::Open(\n // ----------------------------------------------------------------------\n // Reader implementation\n \n+// Common functions used in both the random-access file reader and the\n+// asynchronous generator\n static inline FileBlock FileBlockFromFlatbuffer(const flatbuf::Block* block) {\n   return FileBlock{block->offset(), block->metaDataLength(), block->bodyLength()};\n }\n \n+Result<std::unique_ptr<Message>> ReadMessageFromBlock(const FileBlock& block,\n+                                                      io::RandomAccessFile* file) {\n+  if (!BitUtil::IsMultipleOf8(block.offset) ||\n+      !BitUtil::IsMultipleOf8(block.metadata_length) ||\n+      !BitUtil::IsMultipleOf8(block.body_length)) {\n+    return Status::Invalid(\"Unaligned block in IPC file\");\n+  }\n+\n+  // TODO(wesm): this breaks integration tests, see ARROW-3256\n+  // DCHECK_EQ((*out)->body_length(), block.body_length);\n+\n+  ARROW_ASSIGN_OR_RAISE(auto message,\n+                        ReadMessage(block.offset, block.metadata_length, file));\n+  return std::move(message);\n+}\n+\n+Status ReadOneDictionary(Message* message, const IpcReadContext& context) {\n+  CHECK_HAS_BODY(*message);\n+  ARROW_ASSIGN_OR_RAISE(auto reader, Buffer::GetReader(message->body()));\n+  DictionaryKind kind;\n+  RETURN_NOT_OK(ReadDictionary(*message->metadata(), context, &kind, reader.get()));\n+  if (kind != DictionaryKind::New) {\n+    return Status::Invalid(\n+        \"Unsupported dictionary replacement or \"\n+        \"dictionary delta in IPC file\");\n+  }\n+  return Status::OK();\n+}\n+\n+/// Common state used by the IPC message generator and record batch generator.\n+struct ARROW_EXPORT IpcFileRecordBatchGeneratorState {\n\nReview comment:\n       Yes. I'll change it so that it just stores a RecordBatchFileReaderImpl and add a `enable_shared_from_this` instead to avoid duplicating fields.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-09T16:11:47.760+0000",
                    "updated": "2021-03-09T16:11:47.760+0000",
                    "started": "2021-03-09T16:11:47.760+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "563171",
                    "issueId": "13360745"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360745/worklog/563178",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9656:\nURL: https://github.com/apache/arrow/pull/9656#discussion_r590513132\n\n\n\n##########\nFile path: cpp/src/arrow/ipc/reader.cc\n##########\n@@ -958,10 +959,196 @@ Result<std::shared_ptr<RecordBatchStreamReader>> RecordBatchStreamReader::Open(\n // ----------------------------------------------------------------------\n // Reader implementation\n \n+// Common functions used in both the random-access file reader and the\n+// asynchronous generator\n static inline FileBlock FileBlockFromFlatbuffer(const flatbuf::Block* block) {\n   return FileBlock{block->offset(), block->metaDataLength(), block->bodyLength()};\n }\n \n+Result<std::unique_ptr<Message>> ReadMessageFromBlock(const FileBlock& block,\n+                                                      io::RandomAccessFile* file) {\n+  if (!BitUtil::IsMultipleOf8(block.offset) ||\n+      !BitUtil::IsMultipleOf8(block.metadata_length) ||\n+      !BitUtil::IsMultipleOf8(block.body_length)) {\n+    return Status::Invalid(\"Unaligned block in IPC file\");\n+  }\n+\n+  // TODO(wesm): this breaks integration tests, see ARROW-3256\n+  // DCHECK_EQ((*out)->body_length(), block.body_length);\n+\n+  ARROW_ASSIGN_OR_RAISE(auto message,\n+                        ReadMessage(block.offset, block.metadata_length, file));\n+  return std::move(message);\n+}\n+\n+Status ReadOneDictionary(Message* message, const IpcReadContext& context) {\n+  CHECK_HAS_BODY(*message);\n+  ARROW_ASSIGN_OR_RAISE(auto reader, Buffer::GetReader(message->body()));\n+  DictionaryKind kind;\n+  RETURN_NOT_OK(ReadDictionary(*message->metadata(), context, &kind, reader.get()));\n+  if (kind != DictionaryKind::New) {\n+    return Status::Invalid(\n+        \"Unsupported dictionary replacement or \"\n+        \"dictionary delta in IPC file\");\n+  }\n+  return Status::OK();\n+}\n+\n+/// Common state used by the IPC message generator and record batch generator.\n+struct ARROW_EXPORT IpcFileRecordBatchGeneratorState {\n\nReview comment:\n       You could also avoid the \"state\" struct and put the desired fields directly in the generator classes (I'm not sure why you need two of them, by the way, unless you plan to do something else later with the IPC message generator).\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-09T16:16:36.779+0000",
                    "updated": "2021-03-09T16:16:36.779+0000",
                    "started": "2021-03-09T16:16:36.778+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "563178",
                    "issueId": "13360745"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360745/worklog/563180",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9656:\nURL: https://github.com/apache/arrow/pull/9656#discussion_r590516059\n\n\n\n##########\nFile path: cpp/src/arrow/ipc/reader.cc\n##########\n@@ -1022,6 +1209,31 @@ class RecordBatchFileReaderImpl : public RecordBatchFileReader {\n \n   ReadStats stats() const override { return stats_; }\n \n+  Result<AsyncGenerator<std::shared_ptr<RecordBatch>>> GetRecordBatchGenerator(\n+      int readahead_messages, const io::IOContext& io_context) override {\n+    auto state = std::make_shared<IpcFileRecordBatchGeneratorState>();\n+    state->num_dictionaries_ = num_dictionaries();\n+    state->num_record_batches_ = num_record_batches();\n+    state->file_ = file_;\n+    state->options_ = options_;\n+    state->owned_file_ = owned_file_;\n+    state->footer_buffer_ = footer_buffer_;\n+    state->footer_ = footer_;\n+    // Must regenerate uncopyable DictionaryMemo\n+    RETURN_NOT_OK(UnpackSchemaMessage(state->footer_->schema(), state->options_,\n+                                      &state->dictionary_memo_, &state->schema_,\n+                                      &state->out_schema_, &state->field_inclusion_mask_,\n+                                      &state->swap_endian_));\n+    AsyncGenerator<std::shared_ptr<Message>> message_generator =\n+        IpcMessageGenerator(state, io_context);\n+    if (readahead_messages > 0) {\n+      message_generator =\n+          MakeReadaheadGenerator(std::move(message_generator), readahead_messages);\n+    }\n+    return IpcFileRecordBatchGenerator(state, message_generator,\n+                                       arrow::internal::GetCpuThreadPool());\n\nReview comment:\n       The overhead of dispatching tasks to a thread pool is difficult to evaluate rigorously, but you can get an idea by running `arrow-thread-pool-benchmark`. IMHO the bottom line is that we should aim for tasks in the millisecond range (rather than microsecond or less).\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-09T16:19:47.163+0000",
                    "updated": "2021-03-09T16:19:47.163+0000",
                    "started": "2021-03-09T16:19:47.163+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "563180",
                    "issueId": "13360745"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360745/worklog/563181",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9656:\nURL: https://github.com/apache/arrow/pull/9656#discussion_r590516173\n\n\n\n##########\nFile path: cpp/src/arrow/ipc/reader.cc\n##########\n@@ -958,10 +959,196 @@ Result<std::shared_ptr<RecordBatchStreamReader>> RecordBatchStreamReader::Open(\n // ----------------------------------------------------------------------\n // Reader implementation\n \n+// Common functions used in both the random-access file reader and the\n+// asynchronous generator\n static inline FileBlock FileBlockFromFlatbuffer(const flatbuf::Block* block) {\n   return FileBlock{block->offset(), block->metaDataLength(), block->bodyLength()};\n }\n \n+Result<std::unique_ptr<Message>> ReadMessageFromBlock(const FileBlock& block,\n+                                                      io::RandomAccessFile* file) {\n+  if (!BitUtil::IsMultipleOf8(block.offset) ||\n+      !BitUtil::IsMultipleOf8(block.metadata_length) ||\n+      !BitUtil::IsMultipleOf8(block.body_length)) {\n+    return Status::Invalid(\"Unaligned block in IPC file\");\n+  }\n+\n+  // TODO(wesm): this breaks integration tests, see ARROW-3256\n+  // DCHECK_EQ((*out)->body_length(), block.body_length);\n+\n+  ARROW_ASSIGN_OR_RAISE(auto message,\n+                        ReadMessage(block.offset, block.metadata_length, file));\n+  return std::move(message);\n+}\n+\n+Status ReadOneDictionary(Message* message, const IpcReadContext& context) {\n+  CHECK_HAS_BODY(*message);\n+  ARROW_ASSIGN_OR_RAISE(auto reader, Buffer::GetReader(message->body()));\n+  DictionaryKind kind;\n+  RETURN_NOT_OK(ReadDictionary(*message->metadata(), context, &kind, reader.get()));\n+  if (kind != DictionaryKind::New) {\n+    return Status::Invalid(\n+        \"Unsupported dictionary replacement or \"\n+        \"dictionary delta in IPC file\");\n+  }\n+  return Status::OK();\n+}\n+\n+/// Common state used by the IPC message generator and record batch generator.\n+struct ARROW_EXPORT IpcFileRecordBatchGeneratorState {\n\nReview comment:\n       The generators are distinct - one reads from the filesystem and one decompresses/decodes the batch. By separating them, we can also apply readahead independently to each stage.\r\n   \r\n   The state struct was because AsyncGenerators need to be copyable, and since DictionaryMemo is move-only, we had to put it behind an indirection.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-09T16:20:02.356+0000",
                    "updated": "2021-03-09T16:20:02.356+0000",
                    "started": "2021-03-09T16:20:02.355+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "563181",
                    "issueId": "13360745"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360745/worklog/563202",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9656:\nURL: https://github.com/apache/arrow/pull/9656#discussion_r590544791\n\n\n\n##########\nFile path: cpp/src/arrow/ipc/reader.cc\n##########\n@@ -1022,6 +1209,31 @@ class RecordBatchFileReaderImpl : public RecordBatchFileReader {\n \n   ReadStats stats() const override { return stats_; }\n \n+  Result<AsyncGenerator<std::shared_ptr<RecordBatch>>> GetRecordBatchGenerator(\n+      int readahead_messages, const io::IOContext& io_context) override {\n+    auto state = std::make_shared<IpcFileRecordBatchGeneratorState>();\n+    state->num_dictionaries_ = num_dictionaries();\n+    state->num_record_batches_ = num_record_batches();\n+    state->file_ = file_;\n+    state->options_ = options_;\n+    state->owned_file_ = owned_file_;\n+    state->footer_buffer_ = footer_buffer_;\n+    state->footer_ = footer_;\n+    // Must regenerate uncopyable DictionaryMemo\n+    RETURN_NOT_OK(UnpackSchemaMessage(state->footer_->schema(), state->options_,\n+                                      &state->dictionary_memo_, &state->schema_,\n+                                      &state->out_schema_, &state->field_inclusion_mask_,\n+                                      &state->swap_endian_));\n+    AsyncGenerator<std::shared_ptr<Message>> message_generator =\n+        IpcMessageGenerator(state, io_context);\n+    if (readahead_messages > 0) {\n+      message_generator =\n+          MakeReadaheadGenerator(std::move(message_generator), readahead_messages);\n+    }\n+    return IpcFileRecordBatchGenerator(state, message_generator,\n+                                       arrow::internal::GetCpuThreadPool());\n\nReview comment:\n       Looking at the ReadFile benchmark it seems reading a 1 MiB batch takes about 1ms once there are >=1024 columns. \r\n   \r\n   ```\r\n   ------------------------------------------------------------------------------------------\r\n   Benchmark                                Time             CPU   Iterations UserCounters...\r\n   ------------------------------------------------------------------------------------------\r\n   ReadFile/1/real_time                  8130 ns         8130 ns        86111 bytes_per_second=120.115G/s\r\n   ReadFile/4/real_time                 10734 ns        10734 ns        65153 bytes_per_second=90.9826G/s\r\n   ReadFile/16/real_time                21779 ns        21779 ns        32081 bytes_per_second=44.8389G/s\r\n   ReadFile/64/real_time                67087 ns        67086 ns        10189 bytes_per_second=14.5567G/s\r\n   ReadFile/256/real_time              274905 ns       274901 ns         2543 bytes_per_second=3.55236G/s\r\n   ReadFile/1024/real_time            1074018 ns      1074004 ns          650 bytes_per_second=931.083M/s\r\n   ReadFile/4096/real_time            4307403 ns      4307316 ns          164 bytes_per_second=232.158M/s\r\n   ReadFile/8192/real_time            8266500 ns      8266343 ns           84 bytes_per_second=120.97M/s\r\n   ```\r\n   \r\n   So I'll change this to not use a separate thread pool by default. (I'd also like to evaluate this benchmark when compression is involved, though.)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-09T16:53:06.860+0000",
                    "updated": "2021-03-09T16:53:06.860+0000",
                    "started": "2021-03-09T16:53:06.860+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "563202",
                    "issueId": "13360745"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360745/worklog/563288",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #9656:\nURL: https://github.com/apache/arrow/pull/9656#issuecomment-794352385\n\n\n   FWIW, here's a benchmark of reading a compressed file, with and without readahead:\r\n   \r\n   ```\r\n   -------------------------------------------------------------------------------------------------\r\n   Benchmark                                       Time             CPU   Iterations UserCounters...\r\n   -------------------------------------------------------------------------------------------------\r\n   ReadCompressedFile/1/real_time          254476620 ns     11010761 ns            3 bytes_per_second=502.993M/s\r\n   ReadCompressedFile/4/real_time           73552088 ns      4851059 ns            8 bytes_per_second=1.69948G/s\r\n   ReadCompressedFile/16/real_time          46830653 ns     14603649 ns           15 bytes_per_second=2.66919G/s\r\n   ReadCompressedFile/64/real_time          69125517 ns     52987906 ns           10 bytes_per_second=1.8083G/s\r\n   ReadCompressedFile/256/real_time        180001740 ns    171520913 ns            4 bytes_per_second=711.104M/s\r\n   ReadCompressedFile/1024/real_time       670619546 ns    646285305 ns            1 bytes_per_second=190.868M/s\r\n   ReadaheadCompressedFile/1/real_time      66585787 ns      4212685 ns           10 bytes_per_second=1.87728G/s\r\n   ReadaheadCompressedFile/4/real_time      28566113 ns      3307862 ns           25 bytes_per_second=4.37581G/s\r\n   ReadaheadCompressedFile/16/real_time     31308089 ns      6213048 ns           22 bytes_per_second=3.99258G/s\r\n   ReadaheadCompressedFile/64/real_time     43825981 ns     23104706 ns           16 bytes_per_second=2.85219G/s\r\n   ReadaheadCompressedFile/256/real_time   125055297 ns     92982211 ns            6 bytes_per_second=1023.55M/s\r\n   ReadaheadCompressedFile/1024/real_time  510944855 ns    375741074 ns            1 bytes_per_second=250.516M/s\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-09T19:35:45.602+0000",
                    "updated": "2021-03-09T19:35:45.602+0000",
                    "started": "2021-03-09T19:35:45.602+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "563288",
                    "issueId": "13360745"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360745/worklog/563921",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9656:\nURL: https://github.com/apache/arrow/pull/9656#discussion_r591718615\n\n\n\n##########\nFile path: cpp/src/arrow/ipc/reader.cc\n##########\n@@ -1175,6 +1273,86 @@ Result<std::shared_ptr<RecordBatchFileReader>> RecordBatchFileReader::Open(\n   return result;\n }\n \n+Future<IpcMessageGenerator::Item> IpcMessageGenerator::operator()() {\n+  if (dictionary_index_ < state_->num_dictionaries()) {\n+    auto block = FileBlockFromFlatbuffer(\n+        state_->footer_->dictionaries()->Get(dictionary_index_++));\n+    ARROW_ASSIGN_OR_RAISE(auto fut,\n+                          executor_->Submit(&ReadMessageFromBlock, block, state_->file_));\n+    return fut;\n+  } else if (record_batch_index_ < state_->num_record_batches()) {\n+    auto block = FileBlockFromFlatbuffer(\n+        state_->footer_->recordBatches()->Get(record_batch_index_++));\n+    ARROW_ASSIGN_OR_RAISE(auto fut,\n+                          executor_->Submit(&ReadMessageFromBlock, block, state_->file_));\n+    return fut;\n+  }\n+  return Future<Item>::MakeFinished(IterationTraits<Item>::End());\n+}\n+\n+Future<IpcFileRecordBatchGenerator::Item> IpcFileRecordBatchGenerator::operator()() {\n+  if (!read_dictionaries_.is_valid()) {\n+    std::vector<Future<std::shared_ptr<Message>>> dictionary_messages(\n+        state_->num_dictionaries());\n+    for (int i = 0; i < state_->num_dictionaries(); i++) {\n+      dictionary_messages[i] = message_generator_();\n+    }\n+    auto dictionaries_read = arrow::All(std::move(dictionary_messages));\n\nReview comment:\n       Why `arrow:All` instead of your new fail-fast version?  Seems that would work here.\n\n##########\nFile path: cpp/src/arrow/ipc/read_write_benchmark.cc\n##########\n@@ -188,10 +188,91 @@ static void DecodeStream(benchmark::State& state) {  // NOLINT non-const referen\n   state.SetBytesProcessed(int64_t(state.iterations()) * kTotalSize);\n }\n \n+static void ReadCompressedFile(benchmark::State& state) {  // NOLINT non-const reference\n+  // 1MB\n+  constexpr int64_t kTotalSize = 1 << 20;\n+  constexpr int64_t kBatches = 128;\n+  auto options = ipc::IpcWriteOptions::Defaults();\n+  ASSIGN_OR_ABORT(options.codec,\n+                  arrow::util::Codec::Create(arrow::Compression::type::ZSTD));\n+\n+  std::shared_ptr<ResizableBuffer> buffer = *AllocateResizableBuffer(1024);\n+  {\n+    // Make Arrow IPC file\n+    auto record_batch = MakeRecordBatch(kTotalSize, state.range(0));\n+\n+    io::BufferOutputStream stream(buffer);\n+\n+    auto writer = *ipc::MakeFileWriter(&stream, record_batch->schema(), options);\n+    for (int i = 0; i < kBatches; i++) {\n+      ABORT_NOT_OK(writer->WriteRecordBatch(*record_batch));\n+    }\n+    ABORT_NOT_OK(writer->Close());\n+    ABORT_NOT_OK(stream.Close());\n+  }\n+\n+  ipc::DictionaryMemo empty_memo;\n+  for (auto _ : state) {\n+    io::BufferReader input(buffer);\n+    auto reader =\n+        *ipc::RecordBatchFileReader::Open(&input, ipc::IpcReadOptions::Defaults());\n+    const int num_batches = reader->num_record_batches();\n+    for (int i = 0; i < num_batches; ++i) {\n+      auto batch = *reader->ReadRecordBatch(i);\n+    }\n+  }\n+  state.SetBytesProcessed(int64_t(state.iterations()) * kTotalSize * kBatches);\n+}\n+\n+static void ReadaheadCompressedFile(\n+    benchmark::State& state) {  // NOLINT non-const reference\n+  // 1MB\n+  constexpr int64_t kTotalSize = 1 << 20;\n+  constexpr int64_t kBatches = 128;\n+  auto options = ipc::IpcWriteOptions::Defaults();\n+  ASSIGN_OR_ABORT(options.codec,\n+                  arrow::util::Codec::Create(arrow::Compression::type::ZSTD));\n+\n+  std::shared_ptr<ResizableBuffer> buffer = *AllocateResizableBuffer(1024);\n+  {\n+    // Make Arrow IPC file\n+    auto record_batch = MakeRecordBatch(kTotalSize, state.range(0));\n+\n+    io::BufferOutputStream stream(buffer);\n+\n+    auto writer = *ipc::MakeFileWriter(&stream, record_batch->schema(), options);\n+    for (int i = 0; i < kBatches; i++) {\n+      ABORT_NOT_OK(writer->WriteRecordBatch(*record_batch));\n+    }\n+    ABORT_NOT_OK(writer->Close());\n+    ABORT_NOT_OK(stream.Close());\n+  }\n+\n+  ipc::DictionaryMemo empty_memo;\n\nReview comment:\n       Nit: Unused?\n\n##########\nFile path: cpp/src/arrow/ipc/read_write_benchmark.cc\n##########\n@@ -188,10 +188,91 @@ static void DecodeStream(benchmark::State& state) {  // NOLINT non-const referen\n   state.SetBytesProcessed(int64_t(state.iterations()) * kTotalSize);\n }\n \n+static void ReadCompressedFile(benchmark::State& state) {  // NOLINT non-const reference\n+  // 1MB\n+  constexpr int64_t kTotalSize = 1 << 20;\n+  constexpr int64_t kBatches = 128;\n+  auto options = ipc::IpcWriteOptions::Defaults();\n+  ASSIGN_OR_ABORT(options.codec,\n+                  arrow::util::Codec::Create(arrow::Compression::type::ZSTD));\n+\n+  std::shared_ptr<ResizableBuffer> buffer = *AllocateResizableBuffer(1024);\n+  {\n+    // Make Arrow IPC file\n+    auto record_batch = MakeRecordBatch(kTotalSize, state.range(0));\n+\n+    io::BufferOutputStream stream(buffer);\n+\n+    auto writer = *ipc::MakeFileWriter(&stream, record_batch->schema(), options);\n+    for (int i = 0; i < kBatches; i++) {\n+      ABORT_NOT_OK(writer->WriteRecordBatch(*record_batch));\n+    }\n+    ABORT_NOT_OK(writer->Close());\n+    ABORT_NOT_OK(stream.Close());\n+  }\n+\n+  ipc::DictionaryMemo empty_memo;\n\nReview comment:\n       Nit: Unused?\n\n##########\nFile path: cpp/src/arrow/ipc/read_write_test.cc\n##########\n@@ -1009,6 +1009,46 @@ struct FileWriterHelper {\n   int64_t footer_offset_;\n };\n \n+struct FileGeneratorWriterHelper : public FileWriterHelper {\n+  Status ReadBatches(const IpcReadOptions& options, RecordBatchVector* out_batches,\n+                     ReadStats* out_stats = nullptr) override {\n+    auto buf_reader = std::make_shared<io::BufferReader>(buffer_);\n+    AsyncGenerator<std::shared_ptr<RecordBatch>> generator;\n+\n+    {\n+      ARROW_ASSIGN_OR_RAISE(auto reader, RecordBatchFileReader::Open(\n+                                             buf_reader.get(), footer_offset_, options));\n+      EXPECT_EQ(num_batches_written_, reader->num_record_batches());\n+      // Generator's lifetime is independent of the reader's\n+      ARROW_ASSIGN_OR_RAISE(generator, reader->GetRecordBatchGenerator());\n+    }\n+\n+    std::vector<Future<std::shared_ptr<RecordBatch>>> futures;\n+    for (int i = 0; i < num_batches_written_; ++i) {\n+      futures.push_back(generator());\n+    }\n+    auto fut = generator();\n+    ARROW_ASSIGN_OR_RAISE(auto extra_read, fut.result());\n+    EXPECT_EQ(nullptr, extra_read);\n+\n+    for (auto& future : futures) {\n+      ARROW_ASSIGN_OR_RAISE(auto batch, future.result());\n\nReview comment:\n       I don't think this is safe the way the macro works.  Use `ASSERT_FINISHES_OK_AND_ASSIGN`.  It also adds a 10 second timeout in case something gunks up for whatever reason.\n\n##########\nFile path: cpp/src/arrow/ipc/read_write_benchmark.cc\n##########\n@@ -188,10 +188,91 @@ static void DecodeStream(benchmark::State& state) {  // NOLINT non-const referen\n   state.SetBytesProcessed(int64_t(state.iterations()) * kTotalSize);\n }\n \n+static void ReadCompressedFile(benchmark::State& state) {  // NOLINT non-const reference\n+  // 1MB\n+  constexpr int64_t kTotalSize = 1 << 20;\n+  constexpr int64_t kBatches = 128;\n+  auto options = ipc::IpcWriteOptions::Defaults();\n+  ASSIGN_OR_ABORT(options.codec,\n+                  arrow::util::Codec::Create(arrow::Compression::type::ZSTD));\n+\n+  std::shared_ptr<ResizableBuffer> buffer = *AllocateResizableBuffer(1024);\n+  {\n+    // Make Arrow IPC file\n+    auto record_batch = MakeRecordBatch(kTotalSize, state.range(0));\n+\n+    io::BufferOutputStream stream(buffer);\n+\n+    auto writer = *ipc::MakeFileWriter(&stream, record_batch->schema(), options);\n+    for (int i = 0; i < kBatches; i++) {\n+      ABORT_NOT_OK(writer->WriteRecordBatch(*record_batch));\n+    }\n+    ABORT_NOT_OK(writer->Close());\n+    ABORT_NOT_OK(stream.Close());\n+  }\n+\n+  ipc::DictionaryMemo empty_memo;\n+  for (auto _ : state) {\n+    io::BufferReader input(buffer);\n+    auto reader =\n+        *ipc::RecordBatchFileReader::Open(&input, ipc::IpcReadOptions::Defaults());\n+    const int num_batches = reader->num_record_batches();\n+    for (int i = 0; i < num_batches; ++i) {\n+      auto batch = *reader->ReadRecordBatch(i);\n+    }\n+  }\n+  state.SetBytesProcessed(int64_t(state.iterations()) * kTotalSize * kBatches);\n+}\n+\n+static void ReadaheadCompressedFile(\n+    benchmark::State& state) {  // NOLINT non-const reference\n+  // 1MB\n+  constexpr int64_t kTotalSize = 1 << 20;\n+  constexpr int64_t kBatches = 128;\n+  auto options = ipc::IpcWriteOptions::Defaults();\n+  ASSIGN_OR_ABORT(options.codec,\n+                  arrow::util::Codec::Create(arrow::Compression::type::ZSTD));\n+\n+  std::shared_ptr<ResizableBuffer> buffer = *AllocateResizableBuffer(1024);\n+  {\n+    // Make Arrow IPC file\n+    auto record_batch = MakeRecordBatch(kTotalSize, state.range(0));\n+\n+    io::BufferOutputStream stream(buffer);\n+\n+    auto writer = *ipc::MakeFileWriter(&stream, record_batch->schema(), options);\n+    for (int i = 0; i < kBatches; i++) {\n+      ABORT_NOT_OK(writer->WriteRecordBatch(*record_batch));\n+    }\n+    ABORT_NOT_OK(writer->Close());\n+    ABORT_NOT_OK(stream.Close());\n+  }\n+\n+  ipc::DictionaryMemo empty_memo;\n+  for (auto _ : state) {\n+    io::BufferReader input(buffer);\n+    auto reader =\n+        *ipc::RecordBatchFileReader::Open(&input, ipc::IpcReadOptions::Defaults());\n+    ASSIGN_OR_ABORT(auto generator,\n+                    reader->GetRecordBatchGenerator(/*readahead_messages=*/4,\n+                                                    io::default_io_context(),\n+                                                    arrow::internal::GetCpuThreadPool()));\n+    generator = MakeReadaheadGenerator(std::move(generator), /*readahead=*/4);\n\nReview comment:\n       Nit: Does this readahead actually help given you have one at the message level?  Also, you're consuming them pretty rapidly.  My guess is you could probably do away with it.\n\n##########\nFile path: cpp/src/arrow/ipc/read_write_test.cc\n##########\n@@ -1009,6 +1009,46 @@ struct FileWriterHelper {\n   int64_t footer_offset_;\n };\n \n+struct FileGeneratorWriterHelper : public FileWriterHelper {\n+  Status ReadBatches(const IpcReadOptions& options, RecordBatchVector* out_batches,\n+                     ReadStats* out_stats = nullptr) override {\n+    auto buf_reader = std::make_shared<io::BufferReader>(buffer_);\n+    AsyncGenerator<std::shared_ptr<RecordBatch>> generator;\n+\n+    {\n+      ARROW_ASSIGN_OR_RAISE(auto reader, RecordBatchFileReader::Open(\n+                                             buf_reader.get(), footer_offset_, options));\n+      EXPECT_EQ(num_batches_written_, reader->num_record_batches());\n+      // Generator's lifetime is independent of the reader's\n+      ARROW_ASSIGN_OR_RAISE(generator, reader->GetRecordBatchGenerator());\n+    }\n+\n+    std::vector<Future<std::shared_ptr<RecordBatch>>> futures;\n+    for (int i = 0; i < num_batches_written_; ++i) {\n+      futures.push_back(generator());\n+    }\n+    auto fut = generator();\n+    ARROW_ASSIGN_OR_RAISE(auto extra_read, fut.result());\n\nReview comment:\n       Same as below, `ASSERT_FINISHES_OK_AND_ASSIGN`\n\n##########\nFile path: cpp/src/arrow/ipc/reader.cc\n##########\n@@ -958,10 +959,108 @@ Result<std::shared_ptr<RecordBatchStreamReader>> RecordBatchStreamReader::Open(\n // ----------------------------------------------------------------------\n // Reader implementation\n \n+// Common functions used in both the random-access file reader and the\n+// asynchronous generator\n static inline FileBlock FileBlockFromFlatbuffer(const flatbuf::Block* block) {\n   return FileBlock{block->offset(), block->metaDataLength(), block->bodyLength()};\n }\n \n+static Result<std::unique_ptr<Message>> ReadMessageFromBlock(const FileBlock& block,\n+                                                             io::RandomAccessFile* file) {\n+  if (!BitUtil::IsMultipleOf8(block.offset) ||\n+      !BitUtil::IsMultipleOf8(block.metadata_length) ||\n+      !BitUtil::IsMultipleOf8(block.body_length)) {\n+    return Status::Invalid(\"Unaligned block in IPC file\");\n+  }\n+\n+  // TODO(wesm): this breaks integration tests, see ARROW-3256\n+  // DCHECK_EQ((*out)->body_length(), block.body_length);\n+\n+  ARROW_ASSIGN_OR_RAISE(auto message,\n+                        ReadMessage(block.offset, block.metadata_length, file));\n+  return std::move(message);\n+}\n+\n+static Status ReadOneDictionary(Message* message, const IpcReadContext& context) {\n+  CHECK_HAS_BODY(*message);\n+  ARROW_ASSIGN_OR_RAISE(auto reader, Buffer::GetReader(message->body()));\n+  DictionaryKind kind;\n+  RETURN_NOT_OK(ReadDictionary(*message->metadata(), context, &kind, reader.get()));\n+  if (kind != DictionaryKind::New) {\n+    return Status::Invalid(\n+        \"Unsupported dictionary replacement or \"\n+        \"dictionary delta in IPC file\");\n+  }\n+  return Status::OK();\n+}\n+\n+class RecordBatchFileReaderImpl;\n+\n+/// A generator of IPC messages (performs I/O for a record batch generator).\n+///\n+/// First all dictionary messages are yielded in order, then all record batch messages\n+/// are yielded in order.\n+class ARROW_EXPORT IpcMessageGenerator {\n+ public:\n+  // Yield a copyable type to make operations with Futures easier\n+  using Item = std::shared_ptr<Message>;\n+  explicit IpcMessageGenerator(std::shared_ptr<RecordBatchFileReaderImpl> state,\n+                               const io::IOContext& io_context)\n+      : state_(std::move(state)),\n+        executor_(io_context.executor()),\n+        dictionary_index_(0),\n+        record_batch_index_(0) {}\n+\n+  Future<Item> operator()();\n+\n+  static Result<std::shared_ptr<Message>> ReadMessageFromBlock(\n+      const FileBlock& block, io::RandomAccessFile* file) {\n+    ARROW_ASSIGN_OR_RAISE(auto message, arrow::ipc::ReadMessageFromBlock(block, file));\n+    std::shared_ptr<Message> shared_message = std::move(message);\n+    return shared_message;\n+  }\n+\n+ private:\n+  std::shared_ptr<RecordBatchFileReaderImpl> state_;\n+  arrow::internal::Executor* executor_;\n+  int dictionary_index_;\n+  int record_batch_index_;\n+};\n+\n+/// A generator of record batches.\n+///\n+/// All batches are yielded in order.\n+class ARROW_EXPORT IpcFileRecordBatchGenerator {\n\nReview comment:\n       An unavoidable naming nit I think.  This is the sync counterpart to `RecordBatchFileReader` and the two names aren't very parallel.  Ideally the other could be named `IpcFileRecordBatchReader`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-10T17:53:58.466+0000",
                    "updated": "2021-03-10T17:53:58.466+0000",
                    "started": "2021-03-10T17:53:58.466+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "563921",
                    "issueId": "13360745"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360745/worklog/563955",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9656:\nURL: https://github.com/apache/arrow/pull/9656#discussion_r591760461\n\n\n\n##########\nFile path: cpp/src/arrow/ipc/reader.cc\n##########\n@@ -1022,6 +1209,31 @@ class RecordBatchFileReaderImpl : public RecordBatchFileReader {\n \n   ReadStats stats() const override { return stats_; }\n \n+  Result<AsyncGenerator<std::shared_ptr<RecordBatch>>> GetRecordBatchGenerator(\n+      int readahead_messages, const io::IOContext& io_context) override {\n+    auto state = std::make_shared<IpcFileRecordBatchGeneratorState>();\n+    state->num_dictionaries_ = num_dictionaries();\n+    state->num_record_batches_ = num_record_batches();\n+    state->file_ = file_;\n+    state->options_ = options_;\n+    state->owned_file_ = owned_file_;\n+    state->footer_buffer_ = footer_buffer_;\n+    state->footer_ = footer_;\n+    // Must regenerate uncopyable DictionaryMemo\n+    RETURN_NOT_OK(UnpackSchemaMessage(state->footer_->schema(), state->options_,\n+                                      &state->dictionary_memo_, &state->schema_,\n+                                      &state->out_schema_, &state->field_inclusion_mask_,\n+                                      &state->swap_endian_));\n+    AsyncGenerator<std::shared_ptr<Message>> message_generator =\n+        IpcMessageGenerator(state, io_context);\n+    if (readahead_messages > 0) {\n+      message_generator =\n+          MakeReadaheadGenerator(std::move(message_generator), readahead_messages);\n+    }\n+    return IpcFileRecordBatchGenerator(state, message_generator,\n+                                       arrow::internal::GetCpuThreadPool());\n\nReview comment:\n       My learning yesterday (maybe, take this all with a grain of salt, it's always possible I was misreading/misinterpreting) was that even if the processing is light it pays to get off the thread pool quickly.  If the I/O is slow you want to trigger the next read as quickly as possible.  However, even when the I/O is fast (buffered), the read only ensures the pages accessed are in memory, it does not load it into the CPU caches, that happens when you access the memory.\r\n   \r\n   So if you do some very fast decompression on the I/O thread you will be forcing the actual load into the CPU cache of the I/O thread's CPU.  Then later, you will have transferred to the CPU thread for parsing or decoding or filtering or projecting.  If you're unlucky the CPU thread you are given is on a different core and you end up having to pay the memory load cost all over again.\r\n   \r\n   I will setup some micro-benchmarks later this week to try and suss out how accurate this statement is.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-10T18:18:52.504+0000",
                    "updated": "2021-03-10T18:18:52.504+0000",
                    "started": "2021-03-10T18:18:52.504+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "563955",
                    "issueId": "13360745"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360745/worklog/563982",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9656:\nURL: https://github.com/apache/arrow/pull/9656#discussion_r591776743\n\n\n\n##########\nFile path: cpp/src/arrow/ipc/reader.cc\n##########\n@@ -1175,6 +1273,86 @@ Result<std::shared_ptr<RecordBatchFileReader>> RecordBatchFileReader::Open(\n   return result;\n }\n \n+Future<IpcMessageGenerator::Item> IpcMessageGenerator::operator()() {\n+  if (dictionary_index_ < state_->num_dictionaries()) {\n+    auto block = FileBlockFromFlatbuffer(\n+        state_->footer_->dictionaries()->Get(dictionary_index_++));\n+    ARROW_ASSIGN_OR_RAISE(auto fut,\n+                          executor_->Submit(&ReadMessageFromBlock, block, state_->file_));\n+    return fut;\n+  } else if (record_batch_index_ < state_->num_record_batches()) {\n+    auto block = FileBlockFromFlatbuffer(\n+        state_->footer_->recordBatches()->Get(record_batch_index_++));\n+    ARROW_ASSIGN_OR_RAISE(auto fut,\n+                          executor_->Submit(&ReadMessageFromBlock, block, state_->file_));\n+    return fut;\n+  }\n+  return Future<Item>::MakeFinished(IterationTraits<Item>::End());\n+}\n+\n+Future<IpcFileRecordBatchGenerator::Item> IpcFileRecordBatchGenerator::operator()() {\n+  if (!read_dictionaries_.is_valid()) {\n+    std::vector<Future<std::shared_ptr<Message>>> dictionary_messages(\n+        state_->num_dictionaries());\n+    for (int i = 0; i < state_->num_dictionaries(); i++) {\n+      dictionary_messages[i] = message_generator_();\n+    }\n+    auto dictionaries_read = arrow::All(std::move(dictionary_messages));\n\nReview comment:\n       Here, I actually want the results, not just the status. I've renamed this - this future is to just read the dictionary messages, not to actually parse them.\n\n##########\nFile path: cpp/src/arrow/ipc/read_write_benchmark.cc\n##########\n@@ -188,10 +188,91 @@ static void DecodeStream(benchmark::State& state) {  // NOLINT non-const referen\n   state.SetBytesProcessed(int64_t(state.iterations()) * kTotalSize);\n }\n \n+static void ReadCompressedFile(benchmark::State& state) {  // NOLINT non-const reference\n+  // 1MB\n+  constexpr int64_t kTotalSize = 1 << 20;\n+  constexpr int64_t kBatches = 128;\n+  auto options = ipc::IpcWriteOptions::Defaults();\n+  ASSIGN_OR_ABORT(options.codec,\n+                  arrow::util::Codec::Create(arrow::Compression::type::ZSTD));\n+\n+  std::shared_ptr<ResizableBuffer> buffer = *AllocateResizableBuffer(1024);\n+  {\n+    // Make Arrow IPC file\n+    auto record_batch = MakeRecordBatch(kTotalSize, state.range(0));\n+\n+    io::BufferOutputStream stream(buffer);\n+\n+    auto writer = *ipc::MakeFileWriter(&stream, record_batch->schema(), options);\n+    for (int i = 0; i < kBatches; i++) {\n+      ABORT_NOT_OK(writer->WriteRecordBatch(*record_batch));\n+    }\n+    ABORT_NOT_OK(writer->Close());\n+    ABORT_NOT_OK(stream.Close());\n+  }\n+\n+  ipc::DictionaryMemo empty_memo;\n+  for (auto _ : state) {\n+    io::BufferReader input(buffer);\n+    auto reader =\n+        *ipc::RecordBatchFileReader::Open(&input, ipc::IpcReadOptions::Defaults());\n+    const int num_batches = reader->num_record_batches();\n+    for (int i = 0; i < num_batches; ++i) {\n+      auto batch = *reader->ReadRecordBatch(i);\n+    }\n+  }\n+  state.SetBytesProcessed(int64_t(state.iterations()) * kTotalSize * kBatches);\n+}\n+\n+static void ReadaheadCompressedFile(\n+    benchmark::State& state) {  // NOLINT non-const reference\n+  // 1MB\n+  constexpr int64_t kTotalSize = 1 << 20;\n+  constexpr int64_t kBatches = 128;\n+  auto options = ipc::IpcWriteOptions::Defaults();\n+  ASSIGN_OR_ABORT(options.codec,\n+                  arrow::util::Codec::Create(arrow::Compression::type::ZSTD));\n+\n+  std::shared_ptr<ResizableBuffer> buffer = *AllocateResizableBuffer(1024);\n+  {\n+    // Make Arrow IPC file\n+    auto record_batch = MakeRecordBatch(kTotalSize, state.range(0));\n+\n+    io::BufferOutputStream stream(buffer);\n+\n+    auto writer = *ipc::MakeFileWriter(&stream, record_batch->schema(), options);\n+    for (int i = 0; i < kBatches; i++) {\n+      ABORT_NOT_OK(writer->WriteRecordBatch(*record_batch));\n+    }\n+    ABORT_NOT_OK(writer->Close());\n+    ABORT_NOT_OK(stream.Close());\n+  }\n+\n+  ipc::DictionaryMemo empty_memo;\n+  for (auto _ : state) {\n+    io::BufferReader input(buffer);\n+    auto reader =\n+        *ipc::RecordBatchFileReader::Open(&input, ipc::IpcReadOptions::Defaults());\n+    ASSIGN_OR_ABORT(auto generator,\n+                    reader->GetRecordBatchGenerator(/*readahead_messages=*/4,\n+                                                    io::default_io_context(),\n+                                                    arrow::internal::GetCpuThreadPool()));\n+    generator = MakeReadaheadGenerator(std::move(generator), /*readahead=*/4);\n\nReview comment:\n       I think actually the one at the message level is the redundant one here, since that's trivial (the file's in memory), but the decoding work is nontrivial (compression). Note that the compression isn't done in the IpcMessageGenerator, but is done as part of decoding the record batch. \r\n   \r\n   With both sets of readahead:\r\n   ```\r\n   ReadaheadCompressedFile/1/real_time      65481827 ns      4493732 ns            8 bytes_per_second=1.90893G/s\r\n   ReadaheadCompressedFile/4/real_time      29108664 ns      3322772 ns           24 bytes_per_second=4.29425G/s\r\n   ReadaheadCompressedFile/16/real_time     31461325 ns      6222532 ns           22 bytes_per_second=3.97313G/s\r\n   ReadaheadCompressedFile/64/real_time     44750635 ns     24064817 ns           16 bytes_per_second=2.79326G/s\r\n   ReadaheadCompressedFile/256/real_time   122477440 ns     91270202 ns            6 bytes_per_second=1045.09M/s\r\n   ReadaheadCompressedFile/1024/real_time  515403669 ns    381340640 ns            1 bytes_per_second=248.349M/s\r\n   ```\r\n   \r\n   With only I/O-level readahead:\r\n   ```\r\n   ReadaheadCompressedFile/1/real_time     533258427 ns     11385747 ns            1 bytes_per_second=240.034M/s\r\n   ReadaheadCompressedFile/4/real_time      71233474 ns      2145576 ns            9 bytes_per_second=1.75479G/s\r\n   ReadaheadCompressedFile/16/real_time     45455989 ns      3591831 ns           15 bytes_per_second=2.74991G/s\r\n   ReadaheadCompressedFile/64/real_time     64612808 ns      8730379 ns           11 bytes_per_second=1.9346G/s\r\n   ReadaheadCompressedFile/256/real_time   188120059 ns     18770867 ns            4 bytes_per_second=680.417M/s\r\n   ReadaheadCompressedFile/1024/real_time  699025221 ns     58355812 ns            1 bytes_per_second=183.112M/s\r\n   ```\r\n   \r\n   With only batch-level readahead:\r\n   ```\r\n   ReadaheadCompressedFile/1/real_time      59513029 ns      3280963 ns           11 bytes_per_second=2.10038G/s\r\n   ReadaheadCompressedFile/4/real_time      27160986 ns      2378473 ns           25 bytes_per_second=4.60219G/s\r\n   ReadaheadCompressedFile/16/real_time     30018574 ns      3746521 ns           23 bytes_per_second=4.16409G/s\r\n   ReadaheadCompressedFile/64/real_time     41358054 ns     11515016 ns           17 bytes_per_second=3.02239G/s\r\n   ReadaheadCompressedFile/256/real_time    80396235 ns     26029905 ns            9 bytes_per_second=1.5548G/s\r\n   ReadaheadCompressedFile/1024/real_time  473883489 ns     96278350 ns            2 bytes_per_second=270.109M/s\r\n   ```\r\n   \r\n   With no readahead:\r\n   ```\r\n   ReadaheadCompressedFile/1/real_time     544947010 ns      8763782 ns            2 bytes_per_second=234.885M/s\r\n   ReadaheadCompressedFile/4/real_time      73232625 ns      1522407 ns            8 bytes_per_second=1.70689G/s\r\n   ReadaheadCompressedFile/16/real_time     47781962 ns      2977593 ns           15 bytes_per_second=2.61605G/s\r\n   ReadaheadCompressedFile/64/real_time     64026555 ns      7882798 ns           11 bytes_per_second=1.95231G/s\r\n   ReadaheadCompressedFile/256/real_time   187098473 ns     18156513 ns            4 bytes_per_second=684.132M/s\r\n   ReadaheadCompressedFile/1024/real_time  696976648 ns     57355852 ns            1 bytes_per_second=183.65M/s\r\n   ```\r\n   \r\n   So I'll change this to only test batch-level readahead. I/O level readahead would help more on something like S3, which we could set up a benchmark for as well.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-10T18:41:48.886+0000",
                    "updated": "2021-03-10T18:41:48.886+0000",
                    "started": "2021-03-10T18:41:48.885+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "563982",
                    "issueId": "13360745"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360745/worklog/564007",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9656:\nURL: https://github.com/apache/arrow/pull/9656#discussion_r591799089\n\n\n\n##########\nFile path: cpp/src/arrow/ipc/read_write_test.cc\n##########\n@@ -1009,6 +1009,46 @@ struct FileWriterHelper {\n   int64_t footer_offset_;\n };\n \n+struct FileGeneratorWriterHelper : public FileWriterHelper {\n+  Status ReadBatches(const IpcReadOptions& options, RecordBatchVector* out_batches,\n+                     ReadStats* out_stats = nullptr) override {\n+    auto buf_reader = std::make_shared<io::BufferReader>(buffer_);\n+    AsyncGenerator<std::shared_ptr<RecordBatch>> generator;\n+\n+    {\n+      ARROW_ASSIGN_OR_RAISE(auto reader, RecordBatchFileReader::Open(\n+                                             buf_reader.get(), footer_offset_, options));\n+      EXPECT_EQ(num_batches_written_, reader->num_record_batches());\n+      // Generator's lifetime is independent of the reader's\n+      ARROW_ASSIGN_OR_RAISE(generator, reader->GetRecordBatchGenerator());\n+    }\n+\n+    std::vector<Future<std::shared_ptr<RecordBatch>>> futures;\n+    for (int i = 0; i < num_batches_written_; ++i) {\n+      futures.push_back(generator());\n+    }\n+    auto fut = generator();\n+    ARROW_ASSIGN_OR_RAISE(auto extra_read, fut.result());\n+    EXPECT_EQ(nullptr, extra_read);\n+\n+    for (auto& future : futures) {\n+      ARROW_ASSIGN_OR_RAISE(auto batch, future.result());\n\nReview comment:\n       I had to define an `EXPECT_FINISHES_OK_AND_ASSIGN` to get it to work here.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-10T19:14:42.936+0000",
                    "updated": "2021-03-10T19:14:42.936+0000",
                    "started": "2021-03-10T19:14:42.936+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564007",
                    "issueId": "13360745"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360745/worklog/572407",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #9656:\nURL: https://github.com/apache/arrow/pull/9656#issuecomment-807849210\n\n\n   Can you rebase this?  I'm using it as part of ARROW-12014\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-26T01:00:22.148+0000",
                    "updated": "2021-03-26T01:00:22.148+0000",
                    "started": "2021-03-26T01:00:22.148+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572407",
                    "issueId": "13360745"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360745/worklog/572412",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #9656:\nURL: https://github.com/apache/arrow/pull/9656#issuecomment-807855885\n\n\n   @westonpace done.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-26T01:14:36.864+0000",
                    "updated": "2021-03-26T01:14:36.864+0000",
                    "started": "2021-03-26T01:14:36.864+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572412",
                    "issueId": "13360745"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360745/worklog/575111",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #9656:\nURL: https://github.com/apache/arrow/pull/9656#issuecomment-811445456\n\n\n   I've rebased this to use the background generator, however, it doesn't help much, and it makes us non-reentrant, so we also lose any advantage with compressed data as we can't parallelize the decompression anymore.\r\n   \r\n   The async reader gets anywhere from 30-90% of the throughput of the synchronous one.\r\n   \r\n   Cases here are numbered by the number of columns in the file. The cases with very few columns are a worst case for async, since decoding is basically 0-cost and async is purely overhead. Conversely the cases with many columns are a best case, since decoding is expensive. However async doesn't help because I/O is relatively cheap in all cases benchmarked here and there is no pipelining to be had.\r\n   \r\n   Frankly, the fastest approach I tested was to just wrap the synchronous reader in a Future and block the caller, which isn't encouraging. A flamegraph shows that using the thread pool for decoding work is still rather expensive, and so it might be better if we used something like the background generator for that as well. In that case it would be convenient if we could somehow pull directly from the background generator's queue instead of having to get and block on futures; also this still means we can't get any benefit from parallelizing decompression if needed. For datasets with files >= cores that's probably not a big deal if you only care about throughput (we'll still decode in parallel) but if you need results in order and/or you have few files relative to cores then it won't be optimal.\r\n   \r\n   ```\r\n   -------------------------------------------------------------------------------------------------\r\n   Benchmark                                       Time             CPU   Iterations UserCounters...\r\n   -------------------------------------------------------------------------------------------------\r\n   ReadFile/1/real_time                         7858 ns         7858 ns        85629 bytes_per_second=124.269G/s\r\n   ReadFile/4/real_time                        10698 ns        10698 ns        64406 bytes_per_second=91.2852G/s\r\n   ReadFile/16/real_time                       21661 ns        21661 ns        32684 bytes_per_second=45.0839G/s\r\n   ReadFile/64/real_time                       67470 ns        67470 ns        10406 bytes_per_second=14.4741G/s\r\n   ReadFile/256/real_time                     275292 ns       275282 ns         2553 bytes_per_second=3.54738G/s\r\n   ReadFile/1024/real_time                   1071125 ns      1071065 ns          652 bytes_per_second=933.598M/s\r\n   ReadFile/4096/real_time                   4245107 ns      4245052 ns          165 bytes_per_second=235.565M/s\r\n   ReadFile/8192/real_time                   8157924 ns      8157957 ns           85 bytes_per_second=122.58M/s\r\n   ReadFileAsync/1/real_time                   23883 ns         7835 ns        29390 bytes_per_second=40.8887G/s\r\n   ReadFileAsync/4/real_time                   27242 ns         9040 ns        25836 bytes_per_second=35.8478G/s\r\n   ReadFileAsync/16/real_time                  40988 ns        14562 ns        17154 bytes_per_second=23.8253G/s\r\n   ReadFileAsync/64/real_time                  93104 ns        33633 ns         7334 bytes_per_second=10.489G/s\r\n   ReadFileAsync/256/real_time                303852 ns       116901 ns         2313 bytes_per_second=3.21394G/s\r\n   ReadFileAsync/1024/real_time              1430233 ns       531043 ns          546 bytes_per_second=699.187M/s\r\n   ReadFileAsync/4096/real_time              4589980 ns      1895584 ns          153 bytes_per_second=217.866M/s\r\n   ReadFileAsync/8192/real_time              8793373 ns      3865574 ns           82 bytes_per_second=113.722M/s\r\n   ReadTempFile/1/real_time                    70972 ns        70936 ns         9712 bytes_per_second=220.157G/s\r\n   ReadTempFile/4/real_time                    74053 ns        74022 ns         9243 bytes_per_second=210.997G/s\r\n   ReadTempFile/16/real_time                   85777 ns        85749 ns         8100 bytes_per_second=182.158G/s\r\n   ReadTempFile/64/real_time                  132803 ns       132783 ns         5331 bytes_per_second=117.656G/s\r\n   ReadTempFile/256/real_time                 333974 ns       333967 ns         2093 bytes_per_second=46.785G/s\r\n   ReadTempFile/1024/real_time               1131198 ns      1131179 ns          607 bytes_per_second=13.8128G/s\r\n   ReadTempFile/4096/real_time               4330575 ns      4330568 ns          161 bytes_per_second=3.60807G/s\r\n   ReadTempFile/8192/real_time               8270275 ns      8270100 ns           85 bytes_per_second=1.8893G/s\r\n   ReadTempFileAsync/1/real_time               88569 ns        12731 ns         7814 bytes_per_second=176.417G/s\r\n   ReadTempFileAsync/4/real_time               94127 ns        14422 ns         7477 bytes_per_second=165.998G/s\r\n   ReadTempFileAsync/16/real_time             104455 ns        20203 ns         6652 bytes_per_second=149.586G/s\r\n   ReadTempFileAsync/64/real_time             158604 ns        38862 ns         4443 bytes_per_second=98.516G/s\r\n   ReadTempFileAsync/256/real_time            372728 ns       122446 ns         1831 bytes_per_second=41.9207G/s\r\n   ReadTempFileAsync/1024/real_time          1347728 ns       485078 ns          520 bytes_per_second=11.5936G/s\r\n   ReadTempFileAsync/4096/real_time          4649311 ns      1930484 ns          151 bytes_per_second=3.36071G/s\r\n   ReadTempFileAsync/8192/real_time          8773800 ns      3815852 ns           80 bytes_per_second=1.78087G/s\r\n   ReadCompressedFile/1/real_time           30636840 ns      1421583 ns           23 bytes_per_second=522.247M/s\r\n   ReadCompressedFile/4/real_time            9529811 ns       628655 ns           65 bytes_per_second=1.63959G/s\r\n   ReadCompressedFile/16/real_time           5673642 ns      1863531 ns          122 bytes_per_second=2.75396G/s\r\n   ReadCompressedFile/64/real_time           8372634 ns      6633169 ns           84 bytes_per_second=1.8662G/s\r\n   ReadCompressedFile/256/real_time         22590210 ns     21607133 ns           28 bytes_per_second=708.271M/s\r\n   ReadCompressedFile/1024/real_time        84274350 ns     81412117 ns            9 bytes_per_second=189.856M/s\r\n   ReadCompressedFile/4096/real_time       330157333 ns    317542733 ns            2 bytes_per_second=48.4617M/s\r\n   ReadCompressedFile/8192/real_time       648075491 ns    627804731 ns            1 bytes_per_second=24.6885M/s\r\n   ReadCompressedFileAsync/1/real_time      57512529 ns      1849864 ns            9 bytes_per_second=278.2M/s\r\n   ReadCompressedFileAsync/4/real_time       9702801 ns       553906 ns           71 bytes_per_second=1.61036G/s\r\n   ReadCompressedFileAsync/16/real_time      6001873 ns      1765858 ns          114 bytes_per_second=2.60335G/s\r\n   ReadCompressedFileAsync/64/real_time      8414578 ns      6398791 ns           81 bytes_per_second=1.8569G/s\r\n   ReadCompressedFileAsync/256/real_time    22844448 ns     20703843 ns           30 bytes_per_second=700.389M/s\r\n   ReadCompressedFileAsync/1024/real_time   83260767 ns     75605439 ns            8 bytes_per_second=192.167M/s\r\n   ReadCompressedFileAsync/4096/real_time  329809506 ns    298760917 ns            2 bytes_per_second=48.5129M/s\r\n   ReadCompressedFileAsync/8192/real_time  643886356 ns    584995701 ns            1 bytes_per_second=24.8491M/s\r\n   ```\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T20:32:07.958+0000",
                    "updated": "2021-03-31T20:32:07.958+0000",
                    "started": "2021-03-31T20:32:07.958+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575111",
                    "issueId": "13360745"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 54000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1ea99848[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@460635ff[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61e159fd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@16bf31f3[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42c4db21[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@36883733[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5dcdbeae[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@32923c4d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@56ebe4ed[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@212d60ac[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@11a592e9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@32f6a4c4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 54000,
        "customfield_12312520": null,
        "customfield_12312521": "Fri May 14 19:47:30 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-05-14T19:47:30.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11772/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-02-24T20:57:45.000+0000",
        "updated": "2021-05-14T19:47:40.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "15h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 54000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add asynchronous read to ipc::RecordBatchFileReader",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360745/comment/17344845",
                    "id": "17344845",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 9656\n[https://github.com/apache/arrow/pull/9656]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-05-14T19:47:30.071+0000",
                    "updated": "2021-05-14T19:47:30.071+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0o1co:",
        "customfield_12314139": null
    }
}