{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13109442",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442",
    "key": "ARROW-1674",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "good-second-issue",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1674/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@395615b8[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@27165b0c[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@101bc4a2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5403396[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@dd19078[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5b215e49[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@15d1af5b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1189f2f4[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@10dae2ed[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@41d835a9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@59ebe1be[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@72bb625[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Aug 04 18:41:49 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1674/watchers",
            "watchCount": 10,
            "isWatching": false
        },
        "created": "2017-10-14T15:55:29.000+0000",
        "updated": "2021-11-03T19:48:42.000+0000",
        "timeoriginalestimate": null,
        "description": "Some libraries (e.g. NumPy) represent boolean values using an array of int8 or uint8 values of 1's and 0's. This can present a challenge at times to receive such memory without copying. \r\n\r\nNow that we have ExtensionType capabilities, we could define an extension type distinguish UInt8/Int8-annotated-as-boolean to be able to flow through such data in applications.\r\n\r\nA discussion about introducing a new logical type didn't go anywhere, so having a custom container that can be used for these specialized applications is one way to unblock the use case. If we develop some endogenous use of such data in C++, we would need to be mindful to sanitize it to bitpacked boolean before sending to another Arrow application",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add ExtensionType implementation for 8-bit boolean values",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442/comment/16204763",
                    "id": "16204763",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "This is only a hint that the data was initially 8bit but we won't support 8bit booleans? (My preferred answer would be \"yes\"  here to keep the implementation of the Arrow spec as simple as possible)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2017-10-14T17:57:25.818+0000",
                    "updated": "2017-10-14T17:57:25.818+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442/comment/16204798",
                    "id": "16204798",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "The goal is to have enough metadata to support zero copy transport of memory to or from other runtimes. As a primary representation for computation, we would use the 1-bit variety. Right now there is no way to describe an 8-bit boolean in the metadata, and some applications that are only transporting memory (e.g. to/from Plasma) will not want to convert to bit-packed form",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-10-14T19:51:44.196+0000",
                    "updated": "2017-10-14T19:51:44.196+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442/comment/16204834",
                    "id": "16204834",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
                        "name": "pcmoritz",
                        "key": "pcmoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Philipp Moritz",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I'm giving this a shot now; one question here is if we want a separate type on the C++ side or one type with a boolean flag. I'm leaning towards a separate type BOOL8 right now.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
                        "name": "pcmoritz",
                        "key": "pcmoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Philipp Moritz",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-14T21:50:59.491+0000",
                    "updated": "2017-10-14T21:50:59.491+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442/comment/16204847",
                    "id": "16204847",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "GitHub user pcmoritz opened a pull request:\n\n    https://github.com/apache/arrow/pull/1201\n\n    ARROW-1674: Format, C++] Add support for byte length booleans in Tensors\n\n    This adds support for byte length booleans in Tensors on the C++ side and also a new logical field in the Boolean flatbuffers message that lets us distinguish between booleans represented by bits and booleans represented by bytes. The use of byte sized booleans is restricted to Tensors.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/pcmoritz/arrow byte-booleans\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/arrow/pull/1201.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #1201\n    \n----\ncommit caddfce3dfdcf50629e5abffc6952e002920a5da\nAuthor: Philipp Moritz <pcmoritz@gmail.com>\nDate:   2017-10-14T22:47:18Z\n\n    add support for byte length booleans\n\n----\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-14T22:50:18.089+0000",
                    "updated": "2017-10-14T22:50:18.089+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442/comment/16204990",
                    "id": "16204990",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user pcmoritz commented on the issue:\n\n    https://github.com/apache/arrow/pull/1201\n  \n    This is now ready to review/merge\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-15T02:30:46.262+0000",
                    "updated": "2017-10-15T02:30:46.262+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442/comment/16205177",
                    "id": "16205177",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user wesm commented on the issue:\n\n    https://github.com/apache/arrow/pull/1201\n  \n    @jacques-n @julienledem @kou could you give your thoughts on this particular issue?\r\n    \r\n    What we are running into on the C++ / Python side at least is that Arrow is becoming effectively a \"platform for in-memory data management\". So we have some overlapping pieces of tech:\r\n    \r\n    * The Arrow columnar format -- i.e. the memory that can be described by a RecordBatch, and that we document in the Markdown documents in https://github.com/apache/arrow/tree/master/format\r\n    * The C++ libraries, which handle shared memory transport, zero copy reads, and metadata conversions to other runtimes\r\n    \r\n    Zero copy transport and full-fidelity metadata when dealing with other runtimes is important. So if a system hands us a 1GB buffer intended to transport it to and from shared memory with some metadata to describe the contents, it would be good to maximize what we can reasonably describe with the Arrow metadata to minimize the need for copying and conversions. I believe that we need to be able to expand our ability to represent diverse scalar type metadata without necessarily expanding what the \"Arrow columnar format\" means.\r\n    \r\n    In this particular case, other frameworks which may give memory to the Arrow libraries represent boolean data as a uint8/int8 array of 1's and 0's. So somehow we have to be able to distinguish uint-8-as-boolean vs. uint8-as-uint8 (and you can do a zero-copy cast from boolean-uint8 to plain uint8, of course). As this is a metadata-only concern I do not believe it constitutes expanding the definition of what constitutes boolean data according to the Arrow columnar format.\r\n    \r\n    This particular implementation does require that Arrow implementations check whether the bit width of received boolean data is 1 -- if not, if they have no special handling for 8-bit boolean, they could simply treat the data as uint8/int8, possibly with some loss of metadata. As a result of this, I would not expect to have integration test this type, as it would not necessarily be reasonable to expect other Arrow libraries to support extra metadata falling outside the primary Arrow specification\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-15T16:13:46.081+0000",
                    "updated": "2017-10-15T16:13:46.081+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442/comment/16205233",
                    "id": "16205233",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user jacques-n commented on the issue:\n\n    https://github.com/apache/arrow/pull/1201\n  \n    If I understand what you're saying, I think we should be handling this the opposite of the way you're proposing. This is really a byte vector, not a bit vector. If a particular system wants to add metadata so it can know that this is a bit vector, it could do that with the existing custom metadata stuff [1]. It doesn't seem like something that Arrow should need to worry about.\r\n    \r\n    https://github.com/apache/arrow/blob/master/format/Schema.fbs#L285\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-15T18:01:46.717+0000",
                    "updated": "2017-10-15T18:01:46.717+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442/comment/16205249",
                    "id": "16205249",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user wesm commented on the issue:\n\n    https://github.com/apache/arrow/pull/1201\n  \n    @jacques-n in general I would agree where \u201codd logical types\u201d do not fit in any obvious place in our type metadata, the custom_metadata field can be employed. The data here is not a bit vector, it semantically boolean. In this particular case I would argue that over time enough systems will feature native support for a byte-size boolean that having unambiguous metadata would be valuable. If we use custom_metadata, then two systems must be aware of their respective conventions for annotating boolean data, which may cause implementers a headache\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-15T18:51:53.295+0000",
                    "updated": "2017-10-15T18:51:53.295+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442/comment/16205250",
                    "id": "16205250",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user wesm commented on the issue:\n\n    https://github.com/apache/arrow/pull/1201\n  \n    I also want to emphasize that the serialized Flatbuffers metadata and the in-memory C++ object model are not a 1-1 mapping. So we don\u2019t need format changes to solve this problem\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-15T18:55:42.842+0000",
                    "updated": "2017-10-15T18:55:42.842+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442/comment/16205261",
                    "id": "16205261",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user jacques-n commented on the issue:\n\n    https://github.com/apache/arrow/pull/1201\n  \n    I'm fine with it being more formal than a KeyValue but feel like it is a property of int metadata, not bool. Systems that don't understand the property can still deal with it that way. \n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-15T19:19:54.380+0000",
                    "updated": "2017-10-15T19:19:54.380+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442/comment/16205262",
                    "id": "16205262",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user wesm commented on the issue:\n\n    https://github.com/apache/arrow/pull/1201\n  \n    @jacques-n I see. Our data types in Schema.fbs are all logical anyway, and it's only through interpretation of the metadata that we determine the physical memory representation.\r\n    \r\n    I can implement a solution using `custom_metadata` to unblock the immediate need for 0.8.0 and perhaps we can take a \"wait and see\" approach on the Arrow schema having built-in knowledge of 8-bit booleans. This will be useful anyway for the next time we need to add a C++ logical type that isn't part of Schema.fbs. @pcmoritz do you mind me pushing to this branch?\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-15T19:22:22.503+0000",
                    "updated": "2017-10-15T19:22:22.503+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442/comment/16205264",
                    "id": "16205264",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user pcmoritz commented on the issue:\n\n    https://github.com/apache/arrow/pull/1201\n  \n    Please go ahead! Actually @jacques-n solution of introducing a field to the int types sounds pretty nice from the practical perspective (of other systems being able to read the byte bool as \"uint8\" even if they don't deal with this case); it feels a little backwards from the specification perspective however. But feel free to implement this using custom_metadata if you prefer.\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-15T19:26:13.570+0000",
                    "updated": "2017-10-15T19:26:13.570+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442/comment/16205266",
                    "id": "16205266",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user pcmoritz commented on the issue:\n\n    https://github.com/apache/arrow/pull/1201\n  \n    Also then we don't need to introduce a new type on the C++ side which is nice. BOOL8 feels a little strange.\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-15T19:33:22.020+0000",
                    "updated": "2017-10-15T19:33:22.020+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442/comment/16205269",
                    "id": "16205269",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user wesm commented on the issue:\n\n    https://github.com/apache/arrow/pull/1201\n  \n    I'm actually not so sure about that, I think the cleanest way is to have a new data type so that we have the option to perform dynamic dispatch on byte-boolean data\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-15T19:38:48.384+0000",
                    "updated": "2017-10-15T19:38:48.384+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442/comment/16208320",
                    "id": "16208320",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user pcmoritz commented on the issue:\n\n    https://github.com/apache/arrow/pull/1201\n  \n    @wesm How do you feel about leaving this unresolved for now and I can implement a custom serializer for pyarrow.serialize that will take care of it? This won't fix Tensor.from_numpy and also doesn't help with Feather but it will resolve https://github.com/ray-project/ray/issues/1121\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-17T20:57:02.924+0000",
                    "updated": "2017-10-17T20:57:02.924+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442/comment/16208335",
                    "id": "16208335",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user wesm commented on the issue:\n\n    https://github.com/apache/arrow/pull/1201\n  \n    If you'd like to implement a workaround, that's totally fine. I haven't had much time to code over the last week but hoping to get this done this week. I can open a new PR (probably will need a new JIRA for the custom_metadata plumbing) if you leave your branch around for me to use as a starting point\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-17T21:08:38.432+0000",
                    "updated": "2017-10-17T21:08:38.432+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442/comment/16208597",
                    "id": "16208597",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user pcmoritz commented on the issue:\n\n    https://github.com/apache/arrow/pull/1201\n  \n    Thanks, sounds good! The workaround is very trivial, so I implemented it in https://github.com/apache/arrow/pull/1199 now. I'll keep this PR around.\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-17T23:31:00.769+0000",
                    "updated": "2017-10-17T23:31:00.769+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442/comment/16395697",
                    "id": "16395697",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1201: ARROW-1674: [Format, C++] Add support for byte length booleans in Tensors\nURL: https://github.com/apache/arrow/pull/1201#issuecomment-372421411\n \n \n   I'm closing this PR until we have a chance to address the underlying issue (distinguishing byte-size boolean vs uint8) in more detail\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-12T18:46:47.078+0000",
                    "updated": "2018-03-12T18:46:47.078+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442/comment/16395698",
                    "id": "16395698",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1201: ARROW-1674: [Format, C++] Add support for byte length booleans in Tensors\nURL: https://github.com/apache/arrow/pull/1201\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/compare.cc b/cpp/src/arrow/compare.cc\nindex 2ec86c369..552e1d7ca 100644\n--- a/cpp/src/arrow/compare.cc\n+++ b/cpp/src/arrow/compare.cc\n@@ -740,19 +740,27 @@ bool TensorEquals(const Tensor& left, const Tensor& right) {\n         are_equal = false;\n       } else {\n         const auto& type = static_cast<const FixedWidthType&>(*left.type());\n+        // Type::BOOL strided tensors are currently not supported\n+        DCHECK_GT(type.bit_width() / CHAR_BIT, 0);\n         are_equal =\n-            StridedTensorContentEquals(0, 0, 0, type.bit_width() / 8, left, right);\n+            StridedTensorContentEquals(0, 0, 0, type.bit_width() / CHAR_BIT, left, right);\n       }\n     } else {\n       const auto& size_meta = dynamic_cast<const FixedWidthType&>(*left.type());\n-      const int byte_width = size_meta.bit_width() / CHAR_BIT;\n-      DCHECK_GT(byte_width, 0);\n \n       const uint8_t* left_data = left.data()->data();\n       const uint8_t* right_data = right.data()->data();\n \n-      are_equal = memcmp(left_data, right_data,\n-                         static_cast<size_t>(byte_width * left.size())) == 0;\n+      if (size_meta.bit_width() == 1) {\n+        int64_t bytes = (left.size() + CHAR_BIT - 1) / CHAR_BIT;\n+        are_equal = memcmp(left_data, right_data,\n+                           static_cast<size_t>(bytes)) == 0;\n+      } else {\n+        const int byte_width = size_meta.bit_width() / CHAR_BIT;\n+        DCHECK_GT(byte_width, 0);\n+        are_equal = memcmp(left_data, right_data,\n+                           static_cast<size_t>(byte_width * left.size())) == 0;\n+      }\n     }\n   }\n   return are_equal;\ndiff --git a/cpp/src/arrow/ipc/ipc-read-write-test.cc b/cpp/src/arrow/ipc/ipc-read-write-test.cc\nindex adf34a9eb..fbbcf3dd4 100644\n--- a/cpp/src/arrow/ipc/ipc-read-write-test.cc\n+++ b/cpp/src/arrow/ipc/ipc-read-write-test.cc\n@@ -728,14 +728,25 @@ TEST_F(TestTensorRoundTrip, BasicRoundtrip) {\n \n   std::vector<int64_t> values;\n   test::randint<int64_t>(size, 0, 100, &values);\n+  std::vector<bool> bool_values;\n+  test::randbool(size, &bool_values);\n+  std::vector<uint8_t> bool8_values;\n+  test::randint<uint8_t>(size, 0, 1, &bool8_values);\n \n   auto data = test::GetBufferFromVector(values);\n+  std::shared_ptr<Buffer> bool_data;\n+  ASSERT_OK(test::GetBitmapFromVector(bool_values, &bool_data));\n+  auto bool8_data = test::GetBufferFromVector(bool8_values);\n \n   Tensor t0(int64(), data, shape, strides, dim_names);\n   Tensor tzero(int64(), data, {}, {}, {});\n+  Tensor tbool(boolean(), bool_data, {}, {}, {});\n+  Tensor tbool8(boolean8(), bool8_data, {}, {}, {});\n \n   CheckTensorRoundTrip(t0);\n   CheckTensorRoundTrip(tzero);\n+  CheckTensorRoundTrip(tbool);\n+  CheckTensorRoundTrip(tbool8);\n \n   int64_t serialized_size;\n   ASSERT_OK(GetTensorSize(t0, &serialized_size));\ndiff --git a/cpp/src/arrow/ipc/metadata-internal.cc b/cpp/src/arrow/ipc/metadata-internal.cc\nindex 162afb94b..48e23061c 100644\n--- a/cpp/src/arrow/ipc/metadata-internal.cc\n+++ b/cpp/src/arrow/ipc/metadata-internal.cc\n@@ -249,9 +249,15 @@ static Status TypeFromFlatbuffer(flatbuf::Type type, const void* type_data,\n     case flatbuf::Type_Utf8:\n       *out = utf8();\n       return Status::OK();\n-    case flatbuf::Type_Bool:\n-      *out = boolean();\n+    case flatbuf::Type_Bool: {\n+      auto bool_type = static_cast<const flatbuf::Bool*>(type_data);\n+      if (bool_type->is_byte()) {\n+        *out = boolean8();\n+      } else {\n+        *out = boolean();\n+      }\n       return Status::OK();\n+    }\n     case flatbuf::Type_Decimal: {\n       auto dec_type = static_cast<const flatbuf::Decimal*>(type_data);\n       *out = decimal(dec_type->precision(), dec_type->scale());\n@@ -458,6 +464,14 @@ static Status TypeToFlatbuffer(FBB& fbb, const DataType& type,\n static Status TensorTypeToFlatbuffer(FBB& fbb, const DataType& type,\n                                      flatbuf::Type* out_type, Offset* offset) {\n   switch (type.id()) {\n+    case Type::BOOL:\n+      *out_type = flatbuf::Type_Bool;\n+      *offset = flatbuf::CreateBool(fbb).Union();\n+      break;\n+    case Type::BOOL8:\n+      *out_type = flatbuf::Type_Bool;\n+      *offset = flatbuf::CreateBool(fbb, true).Union();\n+      break;\n     case Type::UINT8:\n       INT_TO_FB_CASE(8, false);\n     case Type::INT8:\ndiff --git a/cpp/src/arrow/tensor.h b/cpp/src/arrow/tensor.h\nindex 4e4c6b8d5..cc622948f 100644\n--- a/cpp/src/arrow/tensor.h\n+++ b/cpp/src/arrow/tensor.h\n@@ -32,6 +32,8 @@ namespace arrow {\n \n static inline bool is_tensor_supported(Type::type type_id) {\n   switch (type_id) {\n+    case Type::BOOL:\n+    case Type::BOOL8:\n     case Type::UINT8:\n     case Type::INT8:\n     case Type::UINT16:\ndiff --git a/cpp/src/arrow/test-util.h b/cpp/src/arrow/test-util.h\nindex 80e4feb6c..553a319d0 100644\n--- a/cpp/src/arrow/test-util.h\n+++ b/cpp/src/arrow/test-util.h\n@@ -78,6 +78,15 @@ using ArrayVector = std::vector<std::shared_ptr<Array>>;\n \n namespace test {\n \n+void randbool(int64_t N, std::vector<bool>* out) {\n+  Random rng(random_seed());\n+  bool val;\n+  for (int64_t i = 0; i < N; ++i) {\n+    val = rng.OneIn(2);\n+    out->push_back(val);\n+  }\n+}\n+\n template <typename T>\n void randint(int64_t N, T lower, T upper, std::vector<T>* out) {\n   Random rng(random_seed());\ndiff --git a/cpp/src/arrow/type.cc b/cpp/src/arrow/type.cc\nindex a9bf59191..70b806584 100644\n--- a/cpp/src/arrow/type.cc\n+++ b/cpp/src/arrow/type.cc\n@@ -93,6 +93,8 @@ bool DataType::Equals(const std::shared_ptr<DataType>& other) const {\n \n std::string BooleanType::ToString() const { return name(); }\n \n+std::string Boolean8Type::ToString() const { return name(); }\n+\n FloatingPoint::Precision HalfFloatType::precision() const { return FloatingPoint::HALF; }\n \n FloatingPoint::Precision FloatType::precision() const { return FloatingPoint::SINGLE; }\n@@ -368,6 +370,7 @@ std::shared_ptr<Schema> schema(std::vector<std::shared_ptr<Field>>&& fields,\n \n ACCEPT_VISITOR(NullType);\n ACCEPT_VISITOR(BooleanType);\n+ACCEPT_VISITOR(Boolean8Type);\n ACCEPT_VISITOR(BinaryType);\n ACCEPT_VISITOR(FixedSizeBinaryType);\n ACCEPT_VISITOR(StringType);\n@@ -391,6 +394,7 @@ ACCEPT_VISITOR(DictionaryType);\n \n TYPE_FACTORY(null, NullType);\n TYPE_FACTORY(boolean, BooleanType);\n+TYPE_FACTORY(boolean8, Boolean8Type);\n TYPE_FACTORY(int8, Int8Type);\n TYPE_FACTORY(uint8, UInt8Type);\n TYPE_FACTORY(int16, Int16Type);\n@@ -464,6 +468,7 @@ static const BufferDescr kValidityBuffer(BufferType::VALIDITY, 1);\n static const BufferDescr kOffsetBuffer(BufferType::OFFSET, 32);\n static const BufferDescr kTypeBuffer(BufferType::TYPE, 32);\n static const BufferDescr kBooleanBuffer(BufferType::DATA, 1);\n+static const BufferDescr kBoolean8Buffer(BufferType::DATA, 8);\n static const BufferDescr kValues64(BufferType::DATA, 64);\n static const BufferDescr kValues32(BufferType::DATA, 32);\n static const BufferDescr kValues16(BufferType::DATA, 16);\ndiff --git a/cpp/src/arrow/type.h b/cpp/src/arrow/type.h\nindex 443828423..d2e9ecc7d 100644\n--- a/cpp/src/arrow/type.h\n+++ b/cpp/src/arrow/type.h\n@@ -49,6 +49,9 @@ struct Type {\n     /// Boolean as 1 bit, LSB bit-packed ordering\n     BOOL,\n \n+    /// Boolean as 1 byte (may only be used in Tensors)\n+    BOOL8,\n+\n     /// Unsigned 8-bit little-endian integer\n     UINT8,\n \n@@ -332,6 +335,19 @@ class ARROW_EXPORT BooleanType : public FixedWidthType, public NoExtraMeta {\n   std::string name() const override { return \"bool\"; }\n };\n \n+class ARROW_EXPORT Boolean8Type : public FixedWidthType, public NoExtraMeta {\n+ public:\n+  static constexpr Type::type type_id = Type::BOOL8;\n+\n+  Boolean8Type() : FixedWidthType(Type::BOOL8) {}\n+\n+  Status Accept(TypeVisitor* visitor) const override;\n+  std::string ToString() const override;\n+\n+  int bit_width() const override { return 8; }\n+  std::string name() const override { return \"bool8\"; }\n+};\n+\n class ARROW_EXPORT UInt8Type\n     : public detail::IntegerTypeImpl<UInt8Type, Type::UINT8, uint8_t> {\n  public:\ndiff --git a/cpp/src/arrow/type_fwd.h b/cpp/src/arrow/type_fwd.h\nindex 0d06b6f6c..8b5648a50 100644\n--- a/cpp/src/arrow/type_fwd.h\n+++ b/cpp/src/arrow/type_fwd.h\n@@ -45,6 +45,7 @@ class NullArray;\n class NullBuilder;\n \n class BooleanType;\n+class Boolean8Type;\n class BooleanArray;\n class BooleanBuilder;\n \n@@ -132,6 +133,7 @@ using IntervalArray = NumericArray<IntervalType>;\n \n std::shared_ptr<DataType> ARROW_EXPORT null();\n std::shared_ptr<DataType> ARROW_EXPORT boolean();\n+std::shared_ptr<DataType> ARROW_EXPORT boolean8();\n std::shared_ptr<DataType> ARROW_EXPORT int8();\n std::shared_ptr<DataType> ARROW_EXPORT int16();\n std::shared_ptr<DataType> ARROW_EXPORT int32();\ndiff --git a/cpp/src/arrow/visitor.cc b/cpp/src/arrow/visitor.cc\nindex a7b01b0f6..4c262231e 100644\n--- a/cpp/src/arrow/visitor.cc\n+++ b/cpp/src/arrow/visitor.cc\n@@ -70,6 +70,7 @@ ARRAY_VISITOR_DEFAULT(DecimalArray);\n \n TYPE_VISITOR_DEFAULT(NullType);\n TYPE_VISITOR_DEFAULT(BooleanType);\n+TYPE_VISITOR_DEFAULT(Boolean8Type);\n TYPE_VISITOR_DEFAULT(Int8Type);\n TYPE_VISITOR_DEFAULT(Int16Type);\n TYPE_VISITOR_DEFAULT(Int32Type);\ndiff --git a/cpp/src/arrow/visitor.h b/cpp/src/arrow/visitor.h\nindex 6c36e465e..510d5f012 100644\n--- a/cpp/src/arrow/visitor.h\n+++ b/cpp/src/arrow/visitor.h\n@@ -63,6 +63,7 @@ class ARROW_EXPORT TypeVisitor {\n \n   virtual Status Visit(const NullType& type);\n   virtual Status Visit(const BooleanType& type);\n+  virtual Status Visit(const Boolean8Type& type);\n   virtual Status Visit(const Int8Type& type);\n   virtual Status Visit(const Int16Type& type);\n   virtual Status Visit(const Int32Type& type);\ndiff --git a/format/Metadata.md b/format/Metadata.md\nindex 80ca08ae1..bd1574061 100644\n--- a/format/Metadata.md\n+++ b/format/Metadata.md\n@@ -352,6 +352,9 @@ table FloatingPoint {\n \n The Boolean logical type is represented as a 1-bit wide primitive physical\n type. The bits are numbered using least-significant bit (LSB) ordering.\n+Inside of tensors, boolean data may also be represented as\n+a 1-byte wide primitive physical type; in this case the\n+flag `is_byte` is set.\n \n Like other fixed bit-width primitive types, boolean data appears as 2 buffers\n in the data header (one bitmap for the validity vector and one for the values).\ndiff --git a/format/Schema.fbs b/format/Schema.fbs\nindex 186f8e362..b9baed961 100644\n--- a/format/Schema.fbs\n+++ b/format/Schema.fbs\n@@ -108,6 +108,9 @@ table FixedSizeBinary {\n }\n \n table Bool {\n+  /// If this flag is set, the bool is represented as a byte,\n+  /// by default it is represented as a bit.\n+  is_byte: bool;\n }\n \n table Decimal {\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-12T18:46:47.588+0000",
                    "updated": "2018-03-12T18:46:47.588+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442/comment/16682615",
                    "id": "16682615",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I think we should probably define a metadata annotation for uint8/int8 to indicate that the data is semantically boolean. This will enable numpy.bool_ to be roundtrippped more gracefully. Doesn't necessarily need to be a formal part of the Arrow format",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-10T21:46:54.785+0000",
                    "updated": "2018-11-10T21:47:10.058+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442/comment/17392872",
                    "id": "17392872",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Is there still an actual need for this?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-08-04T08:46:15.832+0000",
                    "updated": "2021-08-04T08:46:15.832+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13109442/comment/17393393",
                    "id": "17393393",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Yes, it is still needed for zero-copy compatibility with numpy which can be useful in a few situations.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-08-04T18:41:49.777+0000",
                    "updated": "2021-08-04T18:41:49.777+0000"
                }
            ],
            "maxResults": 22,
            "total": 22,
            "startAt": 0
        },
        "customfield_12311820": "0|i3l9wf:",
        "customfield_12314139": null
    }
}