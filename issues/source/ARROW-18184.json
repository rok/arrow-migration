{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13492615",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13492615",
    "key": "ARROW-18184",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12352360",
                "id": "12352360",
                "description": "",
                "name": "11.0.0",
                "archived": false,
                "released": false
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=benpharkins",
            "name": "benpharkins",
            "key": "JIRAUSER295145",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Ben Harkins",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=benpharkins",
            "name": "benpharkins",
            "key": "JIRAUSER295145",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Ben Harkins",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=benpharkins",
            "name": "benpharkins",
            "key": "JIRAUSER295145",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Ben Harkins",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-18184/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 9,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13492615/worklog/821987",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "benibus opened a new pull request, #14552:\nURL: https://github.com/apache/arrow/pull/14552\n\n   See: [ARROW-18184](https://issues.apache.org/jira/browse/ARROW-18184).\r\n   \r\n   For context, this is based on [pull/14100](https://github.com/apache/arrow/pull/14100).\r\n   \r\n   This enhances the capabilities of the existing random JSON generators and adds benchmark coverage for ordered/unordered fields, missing fields, and inferred schemas over a range of field counts.\n\n\n",
                    "created": "2022-10-31T15:40:27.464+0000",
                    "updated": "2022-10-31T15:40:27.464+0000",
                    "started": "2022-10-31T15:40:27.464+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "821987",
                    "issueId": "13492615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13492615/worklog/822005",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "benibus commented on PR #14552:\nURL: https://github.com/apache/arrow/pull/14552#issuecomment-1297341786\n\n   So, I ended up changing my approach from the original PR. In this version, field ordering/omission is [optionally] handled by the generators in `test_common.h`, as this allows it to be recursively applied to nested objects. It also makes the interaction between null value probability and missing field probability more robust.\r\n   \r\n   As for the benchmarks, I added combinations for input with/without a schema primarily because it's an easy way to tell if ordered field optimizations are working properly for inferred schemas (plus, there does seem to be a performance difference as is). FWIW, I'm not entirely convinced that testing both possibilities for sparse fields is necessary.\n\n\n",
                    "created": "2022-10-31T16:20:35.106+0000",
                    "updated": "2022-10-31T16:20:35.106+0000",
                    "started": "2022-10-31T16:20:35.105+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822005",
                    "issueId": "13492615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13492615/worklog/822013",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14552:\nURL: https://github.com/apache/arrow/pull/14552#issuecomment-1297361585\n\n   https://issues.apache.org/jira/browse/ARROW-18184\n\n\n",
                    "created": "2022-10-31T16:35:41.817+0000",
                    "updated": "2022-10-31T16:35:41.817+0000",
                    "started": "2022-10-31T16:35:41.816+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822013",
                    "issueId": "13492615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13492615/worklog/822690",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #14552:\nURL: https://github.com/apache/arrow/pull/14552#discussion_r1011771162\n\n\n##########\ncpp/src/arrow/json/test_common.h:\n##########\n@@ -133,31 +150,72 @@ struct GenerateImpl {\n     return Status::NotImplemented(\"random generation of arrays of type \", t);\n   }\n \n+  static bool GetBool(Engine& e, double probability) {\n+    return std::uniform_real_distribution<>{0, 1}(e) < probability;\n+  }\n+\n+  static bool MaybeWriteNull(Engine& e, Writer* writer, double probability) {\n+    bool outcome = GetBool(e, probability);\n+    if (outcome) writer->Null();\n+    return outcome;\n+  }\n+\n+  static Status WriteValue(const DataType& type, Engine& e, Writer* writer,\n+                           const GenerateOptions& options) {\n+    GenerateImpl visitor = {e, *writer, options};\n+    return VisitTypeInline(type, &visitor);\n+  }\n+\n   Engine& e;\n   rj::Writer<rj::StringBuffer>& writer;\n+  const GenerateOptions& options;\n };\n \n template <typename Engine>\n inline static Status Generate(const std::shared_ptr<DataType>& type, Engine& e,\n-                              Writer* writer) {\n-  if (std::uniform_real_distribution<>{0, 1}(e) < .2) {\n-    // one out of 5 chance of null, anywhere\n-    writer->Null();\n+                              Writer* writer, const GenerateOptions& options) {\n+  using Impl = GenerateImpl<Engine>;\n+  if (Impl::MaybeWriteNull(e, writer, options.null_probability)) {\n     return Status::OK();\n   }\n-  GenerateImpl<Engine> visitor = {e, *writer};\n-  return VisitTypeInline(*type, &visitor);\n+  return Impl::WriteValue(*type, e, writer, options);\n }\n \n template <typename Engine>\n inline static Status Generate(const std::vector<std::shared_ptr<Field>>& fields,\n-                              Engine& e, Writer* writer) {\n+                              Engine& e, Writer* writer, const GenerateOptions& options) {\n+  using Impl = GenerateImpl<Engine>;\n+\n   RETURN_NOT_OK(OK(writer->StartObject()));\n-  for (const auto& f : fields) {\n-    writer->Key(f->name().c_str());\n-    RETURN_NOT_OK(Generate(f->type(), e, writer));\n+  if (fields.empty()) {\n+    return OK(writer->EndObject(0));\n+  }\n+\n+  // Indices of the fields we plan to actually write, in order\n+  std::vector<size_t> indices;\n+  indices.reserve(static_cast<size_t>(fields.size() * options.field_probability));\n+\n+  for (size_t i = 0; i < fields.size(); ++i) {\n+    if (Impl::GetBool(e, options.field_probability)) {\n+      indices.push_back(i);\n+    }\n+  }\n+  if (options.randomize_field_order) {\n+    std::shuffle(indices.begin(), indices.end(), e);\n   }\n-  return OK(writer->EndObject(static_cast<int>(fields.size())));\n+\n+  // Scale the likelyhood of null values to account for any fields we've dropped\n+  double null_probability = options.null_probability;\n+  null_probability *= static_cast<double>(indices.size()) / fields.size();\n\nReview Comment:\n   This calculation is a bit weird. For example, if you have `options.null_probability = 0.2` and `option.field_probability = 0.1`, then you'll end using `null_probability = 0.02`, but in the end the proportion of non-null fields will be around 0.08 (far from 0.2).\r\n   \r\n   That said, it may not matter much that the calculation is incorrect, since the important parameter for this benchmark is bound to be the presence/absence fields rather than their null-ness.\n\n\n\n##########\ncpp/src/arrow/json/test_common.h:\n##########\n@@ -133,31 +150,72 @@ struct GenerateImpl {\n     return Status::NotImplemented(\"random generation of arrays of type \", t);\n   }\n \n+  static bool GetBool(Engine& e, double probability) {\n+    return std::uniform_real_distribution<>{0, 1}(e) < probability;\n+  }\n+\n+  static bool MaybeWriteNull(Engine& e, Writer* writer, double probability) {\n+    bool outcome = GetBool(e, probability);\n+    if (outcome) writer->Null();\n+    return outcome;\n+  }\n+\n+  static Status WriteValue(const DataType& type, Engine& e, Writer* writer,\n+                           const GenerateOptions& options) {\n+    GenerateImpl visitor = {e, *writer, options};\n+    return VisitTypeInline(type, &visitor);\n+  }\n+\n   Engine& e;\n   rj::Writer<rj::StringBuffer>& writer;\n+  const GenerateOptions& options;\n };\n \n template <typename Engine>\n inline static Status Generate(const std::shared_ptr<DataType>& type, Engine& e,\n-                              Writer* writer) {\n-  if (std::uniform_real_distribution<>{0, 1}(e) < .2) {\n-    // one out of 5 chance of null, anywhere\n-    writer->Null();\n+                              Writer* writer, const GenerateOptions& options) {\n+  using Impl = GenerateImpl<Engine>;\n+  if (Impl::MaybeWriteNull(e, writer, options.null_probability)) {\n     return Status::OK();\n   }\n-  GenerateImpl<Engine> visitor = {e, *writer};\n-  return VisitTypeInline(*type, &visitor);\n+  return Impl::WriteValue(*type, e, writer, options);\n }\n \n template <typename Engine>\n inline static Status Generate(const std::vector<std::shared_ptr<Field>>& fields,\n-                              Engine& e, Writer* writer) {\n+                              Engine& e, Writer* writer, const GenerateOptions& options) {\n+  using Impl = GenerateImpl<Engine>;\n+\n   RETURN_NOT_OK(OK(writer->StartObject()));\n-  for (const auto& f : fields) {\n-    writer->Key(f->name().c_str());\n-    RETURN_NOT_OK(Generate(f->type(), e, writer));\n+  if (fields.empty()) {\n+    return OK(writer->EndObject(0));\n+  }\n+\n+  // Indices of the fields we plan to actually write, in order\n+  std::vector<size_t> indices;\n+  indices.reserve(static_cast<size_t>(fields.size() * options.field_probability));\n+\n+  for (size_t i = 0; i < fields.size(); ++i) {\n+    if (Impl::GetBool(e, options.field_probability)) {\n\nReview Comment:\n   This is paying the price of instantiating the distribution for each field, how about folding it here?\r\n   (`GetBool` is trivial enough to perhaps not warrant a dedicated helper)\r\n   \r\n   Also, the idiomatic distribution would probably be `std::bernoulli_distribution`.\n\n\n\n##########\ncpp/src/arrow/json/parser_benchmark.cc:\n##########\n@@ -153,12 +187,44 @@ static void ReadJSONBlockWithSchemaMultiThread(\n   BenchmarkReadJSONBlockWithSchema(state, true);\n }\n \n+static void ParseFields(benchmark::State& state) {  // NOLINT non-const reference\n+  const bool ordered = !!state.range(0);\n+  const bool with_schema = !!state.range(1);\n+  const double sparsity = state.range(2) / 10.0;\n+  const auto num_fields = static_cast<int>(state.range(3));\n+\n+  const int32_t num_rows = 1000;\n+\n+  auto fields = GenerateTestFields(num_fields, 10);\n+\n+  auto parse_options = ParseOptions::Defaults();\n+  if (with_schema) {\n+    parse_options.explicit_schema = schema(fields);\n+    parse_options.unexpected_field_behavior = UnexpectedFieldBehavior::Error;\n+  }\n+\n+  auto gen_options = GenerateOptions::Defaults();\n+  gen_options.field_probability = 1.0 - sparsity;\n+  gen_options.randomize_field_order = !ordered;\n+\n+  auto json = GenerateTestData(fields, num_rows, gen_options);\n+  BenchmarkJSONParsing(state, std::make_shared<Buffer>(json), parse_options);\n+}\n+\n BENCHMARK(ChunkJSONPrettyPrinted);\n BENCHMARK(ChunkJSONLineDelimited);\n BENCHMARK(ParseJSONBlockWithSchema);\n \n BENCHMARK(ReadJSONBlockWithSchemaSingleThread);\n BENCHMARK(ReadJSONBlockWithSchemaMultiThread)->UseRealTime();\n \n+BENCHMARK(ParseFields)\n\nReview Comment:\n   Let's keep using a consistent nomenclature\r\n   ```suggestion\r\n   BENCHMARK(ParseJSONFields)\r\n   ```\n\n\n\n##########\ncpp/src/arrow/json/parser_benchmark.cc:\n##########\n@@ -69,9 +102,9 @@ static void ChunkJSONPrettyPrinted(\n \n   auto options = ParseOptions::Defaults();\n   options.newlines_in_values = true;\n-  options.explicit_schema = TestSchema();\n+  options.explicit_schema = schema(TestFields());\n \n-  auto json = TestJsonData(num_rows, /* pretty */ true);\n+  auto json = GenerateTestData(options.explicit_schema, num_rows, true);\n\nReview Comment:\n   ```suggestion\r\n     auto json = GenerateTestData(options.explicit_schema, num_rows, /*pretty=*/ true);\r\n   ```\n\n\n\n##########\ncpp/src/arrow/json/parser_benchmark.cc:\n##########\n@@ -153,12 +187,44 @@ static void ReadJSONBlockWithSchemaMultiThread(\n   BenchmarkReadJSONBlockWithSchema(state, true);\n }\n \n+static void ParseFields(benchmark::State& state) {  // NOLINT non-const reference\n+  const bool ordered = !!state.range(0);\n+  const bool with_schema = !!state.range(1);\n+  const double sparsity = state.range(2) / 10.0;\n+  const auto num_fields = static_cast<int>(state.range(3));\n+\n+  const int32_t num_rows = 1000;\n+\n+  auto fields = GenerateTestFields(num_fields, 10);\n+\n+  auto parse_options = ParseOptions::Defaults();\n+  if (with_schema) {\n+    parse_options.explicit_schema = schema(fields);\n+    parse_options.unexpected_field_behavior = UnexpectedFieldBehavior::Error;\n+  }\n+\n+  auto gen_options = GenerateOptions::Defaults();\n+  gen_options.field_probability = 1.0 - sparsity;\n+  gen_options.randomize_field_order = !ordered;\n+\n+  auto json = GenerateTestData(fields, num_rows, gen_options);\n+  BenchmarkJSONParsing(state, std::make_shared<Buffer>(json), parse_options);\n+}\n+\n BENCHMARK(ChunkJSONPrettyPrinted);\n BENCHMARK(ChunkJSONLineDelimited);\n BENCHMARK(ParseJSONBlockWithSchema);\n \n BENCHMARK(ReadJSONBlockWithSchemaSingleThread);\n BENCHMARK(ReadJSONBlockWithSchemaMultiThread)->UseRealTime();\n \n+BENCHMARK(ParseFields)\n+    // NOTE: \"sparsity\" is the proportion of missing fields from 0-10\n+    ->ArgNames({\"ordered\", \"schema\", \"sparsity\", \"n\"})\n\nReview Comment:\n   Perhaps a little more explicit:\r\n   ```suggestion\r\n       ->ArgNames({\"ordered\", \"schema\", \"sparsity\", \"num_fields\"})\r\n   ```\n\n\n\n##########\ncpp/src/arrow/json/parser_benchmark.cc:\n##########\n@@ -153,12 +187,44 @@ static void ReadJSONBlockWithSchemaMultiThread(\n   BenchmarkReadJSONBlockWithSchema(state, true);\n }\n \n+static void ParseFields(benchmark::State& state) {  // NOLINT non-const reference\n+  const bool ordered = !!state.range(0);\n+  const bool with_schema = !!state.range(1);\n+  const double sparsity = state.range(2) / 10.0;\n+  const auto num_fields = static_cast<int>(state.range(3));\n+\n+  const int32_t num_rows = 1000;\n+\n+  auto fields = GenerateTestFields(num_fields, 10);\n+\n+  auto parse_options = ParseOptions::Defaults();\n+  if (with_schema) {\n+    parse_options.explicit_schema = schema(fields);\n+    parse_options.unexpected_field_behavior = UnexpectedFieldBehavior::Error;\n+  }\n+\n+  auto gen_options = GenerateOptions::Defaults();\n+  gen_options.field_probability = 1.0 - sparsity;\n+  gen_options.randomize_field_order = !ordered;\n+\n+  auto json = GenerateTestData(fields, num_rows, gen_options);\n+  BenchmarkJSONParsing(state, std::make_shared<Buffer>(json), parse_options);\n+}\n+\n BENCHMARK(ChunkJSONPrettyPrinted);\n BENCHMARK(ChunkJSONLineDelimited);\n BENCHMARK(ParseJSONBlockWithSchema);\n \n BENCHMARK(ReadJSONBlockWithSchemaSingleThread);\n BENCHMARK(ReadJSONBlockWithSchemaMultiThread)->UseRealTime();\n \n+BENCHMARK(ParseFields)\n+    // NOTE: \"sparsity\" is the proportion of missing fields from 0-10\n+    ->ArgNames({\"ordered\", \"schema\", \"sparsity\", \"n\"})\n+    // Ordered/unordered fields with/without an explicit schema\n+    ->ArgsProduct({{1, 0}, {1, 0}, {0}, {10, 100, 1000}})\n+    // Non-contiguous ordered fields with/without an explicit schema\n+    ->ArgsProduct({{1}, {1, 0}, {1, 9}, {10, 100, 1000}});\n\nReview Comment:\n   Why not also test unordered field data here?\n\n\n\n",
                    "created": "2022-11-02T13:32:01.182+0000",
                    "updated": "2022-11-02T13:32:01.182+0000",
                    "started": "2022-11-02T13:32:01.182+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822690",
                    "issueId": "13492615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13492615/worklog/822796",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "benibus commented on code in PR #14552:\nURL: https://github.com/apache/arrow/pull/14552#discussion_r1012095512\n\n\n##########\ncpp/src/arrow/json/test_common.h:\n##########\n@@ -133,31 +150,72 @@ struct GenerateImpl {\n     return Status::NotImplemented(\"random generation of arrays of type \", t);\n   }\n \n+  static bool GetBool(Engine& e, double probability) {\n+    return std::uniform_real_distribution<>{0, 1}(e) < probability;\n+  }\n+\n+  static bool MaybeWriteNull(Engine& e, Writer* writer, double probability) {\n+    bool outcome = GetBool(e, probability);\n+    if (outcome) writer->Null();\n+    return outcome;\n+  }\n+\n+  static Status WriteValue(const DataType& type, Engine& e, Writer* writer,\n+                           const GenerateOptions& options) {\n+    GenerateImpl visitor = {e, *writer, options};\n+    return VisitTypeInline(type, &visitor);\n+  }\n+\n   Engine& e;\n   rj::Writer<rj::StringBuffer>& writer;\n+  const GenerateOptions& options;\n };\n \n template <typename Engine>\n inline static Status Generate(const std::shared_ptr<DataType>& type, Engine& e,\n-                              Writer* writer) {\n-  if (std::uniform_real_distribution<>{0, 1}(e) < .2) {\n-    // one out of 5 chance of null, anywhere\n-    writer->Null();\n+                              Writer* writer, const GenerateOptions& options) {\n+  using Impl = GenerateImpl<Engine>;\n+  if (Impl::MaybeWriteNull(e, writer, options.null_probability)) {\n     return Status::OK();\n   }\n-  GenerateImpl<Engine> visitor = {e, *writer};\n-  return VisitTypeInline(*type, &visitor);\n+  return Impl::WriteValue(*type, e, writer, options);\n }\n \n template <typename Engine>\n inline static Status Generate(const std::vector<std::shared_ptr<Field>>& fields,\n-                              Engine& e, Writer* writer) {\n+                              Engine& e, Writer* writer, const GenerateOptions& options) {\n+  using Impl = GenerateImpl<Engine>;\n+\n   RETURN_NOT_OK(OK(writer->StartObject()));\n-  for (const auto& f : fields) {\n-    writer->Key(f->name().c_str());\n-    RETURN_NOT_OK(Generate(f->type(), e, writer));\n+  if (fields.empty()) {\n+    return OK(writer->EndObject(0));\n+  }\n+\n+  // Indices of the fields we plan to actually write, in order\n+  std::vector<size_t> indices;\n+  indices.reserve(static_cast<size_t>(fields.size() * options.field_probability));\n+\n+  for (size_t i = 0; i < fields.size(); ++i) {\n+    if (Impl::GetBool(e, options.field_probability)) {\n+      indices.push_back(i);\n+    }\n+  }\n+  if (options.randomize_field_order) {\n+    std::shuffle(indices.begin(), indices.end(), e);\n   }\n-  return OK(writer->EndObject(static_cast<int>(fields.size())));\n+\n+  // Scale the likelyhood of null values to account for any fields we've dropped\n+  double null_probability = options.null_probability;\n+  null_probability *= static_cast<double>(indices.size()) / fields.size();\n\nReview Comment:\n   Yeah... that calculation is egregiously wrong, actually. `null_probability` doesn't need to be adjusted at all. Fortunately, that simplifies everything else.\n\n\n\n",
                    "created": "2022-11-02T17:31:53.670+0000",
                    "updated": "2022-11-02T17:31:53.670+0000",
                    "started": "2022-11-02T17:31:53.670+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822796",
                    "issueId": "13492615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13492615/worklog/822912",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "benibus commented on PR #14552:\nURL: https://github.com/apache/arrow/pull/14552#issuecomment-1301570205\n\n   Since the `null_probability` \"fix\" is now gone, I got rid of the related helper functions and moved the vector allocation + extra loop out of the non-shuffling path.\n\n\n",
                    "created": "2022-11-03T02:18:32.065+0000",
                    "updated": "2022-11-03T02:18:32.065+0000",
                    "started": "2022-11-03T02:18:32.065+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822912",
                    "issueId": "13492615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13492615/worklog/823164",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #14552:\nURL: https://github.com/apache/arrow/pull/14552#issuecomment-1302495820\n\n   CI passed on submitter's fork, will merge.\n\n\n",
                    "created": "2022-11-03T18:13:00.077+0000",
                    "updated": "2022-11-03T18:13:00.077+0000",
                    "started": "2022-11-03T18:13:00.077+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "823164",
                    "issueId": "13492615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13492615/worklog/823165",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou merged PR #14552:\nURL: https://github.com/apache/arrow/pull/14552\n\n\n",
                    "created": "2022-11-03T18:13:13.017+0000",
                    "updated": "2022-11-03T18:13:13.017+0000",
                    "started": "2022-11-03T18:13:13.017+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "823165",
                    "issueId": "13492615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13492615/worklog/823219",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on PR #14552:\nURL: https://github.com/apache/arrow/pull/14552#issuecomment-1302807751\n\n   Benchmark runs are scheduled for baseline = b2fd88117b0838441e7fa4fe15c39b1cf259ed22 and contender = e1883ae5230a7f130dce4258035dbd571bdf2a79. e1883ae5230a7f130dce4258035dbd571bdf2a79 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/673554ec9f9c49d59a19fa5d9dbadd6f...c3849a7394364762a2fd11f6fb7bac09/)\n   [Finished :arrow_down:1.59% :arrow_up:0.78%] [test-mac-arm](https://conbench.ursa.dev/compare/runs/729d2c24cedf49aebcffc13fc751b969...a4989b7f8231482dad92a23d4777a943/)\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/48eff7fe491b42c98921c37d13d1e48f...f9d2a46352cb4826bcda0972a5ba8db9/)\n   [Finished :arrow_down:0.56% :arrow_up:0.0%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/7772faa00e3744aebf7beb047278eba2...feb104023b994ecaa022813699809213/)\n   Buildkite builds:\n   [Finished] [`e1883ae5` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1818)\n   [Finished] [`e1883ae5` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1840)\n   [Finished] [`e1883ae5` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1806)\n   [Finished] [`e1883ae5` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1832)\n   [Finished] [`b2fd8811` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1817)\n   [Finished] [`b2fd8811` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1839)\n   [Finished] [`b2fd8811` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1805)\n   [Finished] [`b2fd8811` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1831)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python, R. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n",
                    "created": "2022-11-04T00:04:22.549+0000",
                    "updated": "2022-11-04T00:04:22.549+0000",
                    "started": "2022-11-04T00:04:22.548+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "823219",
                    "issueId": "13492615"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 5400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5cb3a849[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7740aa83[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@692b81bb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1b4d3aaf[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@9255bcb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7de26463[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4871143d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3a1bd7de[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@19c32855[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@776c9672[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37fcb45e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@53bd3058[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 5400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Nov 03 18:13:13 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-11-03T18:13:13.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-18184/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-10-28T01:27:25.000+0000",
        "updated": "2022-11-04T00:04:22.000+0000",
        "timeoriginalestimate": null,
        "description": "The current JSON parser benchmark suite is fairly limited, as it only really tests objects with a couple non-varying fields. To properly measure optimizations based on input predictability (i.e. [ARROW-4709|https://issues.apache.org/jira/browse/ARROW-4709]) it would be beneficial to provide a parameterized way to create schemas with an arbitrary number of fields and add benchmarks for input with randomly ordered/omitted fields.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 5400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Improve JSON parser benchmarks",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13492615/comment/17628458",
                    "id": "17628458",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 14552\n[https://github.com/apache/arrow/pull/14552]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-11-03T18:13:13.795+0000",
                    "updated": "2022-11-03T18:13:13.795+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z1ag54:",
        "customfield_12314139": null
    }
}