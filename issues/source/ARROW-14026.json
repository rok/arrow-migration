{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13401857",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857",
    "key": "ARROW-14026",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "query-engine"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "1.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14026/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 24,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/worklog/653007",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request #11189:\nURL: https://github.com/apache/arrow/pull/11189\n\n\n   This creates a new concatenating generator which converts AsyncGenerator<optional<vector<T>>> to AsyncGenerator<T> and supports async-reentrancy. When combined with a readahead generator, this enables us to get parallelism in scanning Parquet files.\r\n   \r\n   This also properly chunks each row group into smaller batches as mentioned in ARROW-14024, though we can add more specific tests in that JIRA (and fix the issue for IPC as well).\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-20T14:40:16.283+0000",
                    "updated": "2021-09-20T14:40:16.283+0000",
                    "started": "2021-09-20T14:40:16.283+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "653007",
                    "issueId": "13401857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/worklog/653008",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11189:\nURL: https://github.com/apache/arrow/pull/11189#issuecomment-922990928\n\n\n   https://issues.apache.org/jira/browse/ARROW-14026\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-20T14:40:40.197+0000",
                    "updated": "2021-09-20T14:40:40.197+0000",
                    "started": "2021-09-20T14:40:40.197+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "653008",
                    "issueId": "13401857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/worklog/653009",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11189:\nURL: https://github.com/apache/arrow/pull/11189#issuecomment-922991831\n\n\n   @ursabot please benchmark lang=R\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-20T14:41:45.890+0000",
                    "updated": "2021-09-20T14:41:45.890+0000",
                    "started": "2021-09-20T14:41:45.889+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "653009",
                    "issueId": "13401857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/worklog/653011",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #11189:\nURL: https://github.com/apache/arrow/pull/11189#issuecomment-922992268\n\n\n   Benchmark runs are scheduled for baseline = 7128b5eb4302a768e48e0a4718b445495fc3e107 and contender = dc36f09c16a2933614b41f8912968cf1cfb364d8. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Skipped :warning: Provided benchmark filters do not have any benchmark groups to be executed on ec2-t3-xlarge-us-east-2] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/14909b12ff3b44afb6c2be83853db45b...deb4ec4f85ba4cab97cdc36a4c2d5d9b/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/f7dbbd8836ac43f69a52b17caa64dd26...f0e710cddcef40e89344f39f2dd0e6ba/)\n   [Skipped :warning: Only ['C++', 'Java'] langs are supported on ursa-thinkcentre-m75q] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/2cb2668a5e37451f9d68770ce2a12a09...16fc2e6d8ec346679826ead5c66f42b7/)\n   Supported benchmarks:\n   ursa-i9-9960x: langs = Python, R, JavaScript\n   ursa-thinkcentre-m75q: langs = C++, Java\n   ec2-t3-xlarge-us-east-2: cloud = True\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-20T14:42:18.379+0000",
                    "updated": "2021-09-20T14:42:18.379+0000",
                    "started": "2021-09-20T14:42:18.379+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "653011",
                    "issueId": "13401857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/worklog/653083",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #11189:\nURL: https://github.com/apache/arrow/pull/11189#issuecomment-922992268\n\n\n   Benchmark runs are scheduled for baseline = 7128b5eb4302a768e48e0a4718b445495fc3e107 and contender = dc36f09c16a2933614b41f8912968cf1cfb364d8. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Skipped :warning: Provided benchmark filters do not have any benchmark groups to be executed on ec2-t3-xlarge-us-east-2] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/14909b12ff3b44afb6c2be83853db45b...deb4ec4f85ba4cab97cdc36a4c2d5d9b/)\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/f7dbbd8836ac43f69a52b17caa64dd26...f0e710cddcef40e89344f39f2dd0e6ba/)\n   [Skipped :warning: Only ['C++', 'Java'] langs are supported on ursa-thinkcentre-m75q] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/2cb2668a5e37451f9d68770ce2a12a09...16fc2e6d8ec346679826ead5c66f42b7/)\n   Supported benchmarks:\n   ursa-i9-9960x: langs = Python, R, JavaScript\n   ursa-thinkcentre-m75q: langs = C++, Java\n   ec2-t3-xlarge-us-east-2: cloud = True\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-20T16:49:21.198+0000",
                    "updated": "2021-09-20T16:49:21.198+0000",
                    "started": "2021-09-20T16:49:21.198+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "653083",
                    "issueId": "13401857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/worklog/653099",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11189:\nURL: https://github.com/apache/arrow/pull/11189#issuecomment-923135823\n\n\n   It appears this helps a bit in some benchmarks but hurts the taxi-parquet benchmark.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-20T17:36:20.276+0000",
                    "updated": "2021-09-20T17:36:20.276+0000",
                    "started": "2021-09-20T17:36:20.276+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "653099",
                    "issueId": "13401857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/worklog/653153",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11189:\nURL: https://github.com/apache/arrow/pull/11189#issuecomment-923201576\n\n\n   Though for what it's worth, arrowbench gives rather similar results locally using `as.data.frame(run_benchmark(dataset_taxi_parquet, n_iter=5, cpu_count=c(4)))`.\r\n   \r\n   Before:\r\n   ```\r\n   Total run time: 9.956319 secs\r\n      iteration      process        real start_mem_bytes end_mem_bytes\r\n   1          1  2.979338342 0.785497665      2493300736    3698921472\r\n   2          2  2.886093707 0.766516447      3699429376    3714109440\r\n   3          3  2.920944454 0.776514053      3714109440    3714109440\r\n   4          4  2.877046089 0.766922712      3714109440    3714109440\r\n   5          5  2.896827784 0.770490646      3714109440    3714109440\r\n   6          1 18.316171634 4.632888794      2493300736    3777204224\r\n   7          2 17.657202597 4.614435434      3731472384    3815968768\r\n   8          3 17.561911295 4.556154490      3744194560    3779891200\r\n   9          4 17.775040099 4.648452759      3744194560    3815968768\r\n   10         5 17.586604237 4.563611269      3744194560    3779891200\r\n   11         1  0.964031791 0.582021236      2493296640    3450097664\r\n   12         2  0.771914299 0.414866209      3342176256    3463372800\r\n   13         3  0.770634774 0.410928965      3347357696    3527225344\r\n   14         4  0.798272907 0.439264059      3352600576    3523477504\r\n   15         5  0.795549228 0.436603546      3357843456    3523641344\r\n   16         1  0.488568257 0.068626642      2493296640    3346874368\r\n   17         2  0.001445519 0.001448631      3346874368    3346874368\r\n   18         3  0.001467639 0.001470804      3346874368    3346874368\r\n   19         4  0.001425503 0.001428366      3346874368    3346874368\r\n   20         5  0.001460951 0.001464367      3346874368    3346874368\r\n      max_mem_bytes gc_level0 gc_level1 gc_level2          query cpu_count\r\n   1     3720196096         1         0         0       vignette         4\r\n   2     3720196096         0         0         0       vignette         4\r\n   3     3720196096         0         0         0       vignette         4\r\n   4     3720196096         0         0         0       vignette         4\r\n   5     3720196096         0         0         0       vignette         4\r\n   6     3796340736         2         0         1 payment_type_3         4\r\n   7     3815968768         1         0         1 payment_type_3         4\r\n   8     3815968768         1         0         0 payment_type_3         4\r\n   9     3815968768         0         0         1 payment_type_3         4\r\n   10    3815968768         1         0         0 payment_type_3         4\r\n   11    3481989120         2         1         3 small_no_files         4\r\n   12    3513794560         2         0         1 small_no_files         4\r\n   13    3527225344         1         0         1 small_no_files         4\r\n   14    3527225344         2         0         1 small_no_files         4\r\n   15    3527225344         0         1         1 small_no_files         4\r\n   16    3346874368         0         0         0     count_rows         4\r\n   17    3346874368         0         0         0     count_rows         4\r\n   18    3346874368         0         0         0     count_rows         4\r\n   19    3346874368         0         0         0     count_rows         4\r\n   20    3346874368         0         0         0     count_rows         4\r\n   ```\r\n   \r\n   After:\r\n   ```\r\n   Total run time: 9.995613 secs\r\n      iteration      process        real start_mem_bytes end_mem_bytes\r\n   1          1  3.097148086 0.810223818      2493313024    3759751168\r\n   2          2  2.987976486 0.778924227      3760332800    3779207168\r\n   3          3  2.969162397 0.776125669      3779207168    3779207168\r\n   4          4  2.969802084 0.777535439      3779207168    3779207168\r\n   5          5  2.967313487 0.775563955      3779207168    3779207168\r\n   6          1 18.042212503 4.552006245      2493313024    3805003776\r\n   7          2 17.391559404 4.544502735      3759271936    3832758272\r\n   8          3 17.281636477 4.486674547      3760984064    3796680704\r\n   9          4 17.363466488 4.545516968      3760984064    3832758272\r\n   10         5 17.310964707 4.487994194      3760984064    3796680704\r\n   11         1  1.036147931 0.602855206      2493313024    3547631616\r\n   12         2  0.797990419 0.419062376      3439710208    3601801216\r\n   13         3  0.793205374 0.414812803      3485786112    3683479552\r\n   14         4  0.801588050 0.428945065      3508854784    3674488832\r\n   15         5  0.834174869 0.443217278      3508854784    3674656768\r\n   16         1  0.500276311 0.069972277      2493321216    3346898944\r\n   17         2  0.001478722 0.001481056      3346898944    3346898944\r\n   18         3  0.001478401 0.001481295      3346898944    3346898944\r\n   19         4  0.001472831 0.001475811      3346898944    3346898944\r\n   20         5  0.001461316 0.001464128      3346898944    3346898944\r\n      max_mem_bytes gc_level0 gc_level1 gc_level2          query cpu_count\r\n   1     3759751168         1         0         0       vignette         4\r\n   2     3779207168         0         0         0       vignette         4\r\n   3     3779207168         0         0         0       vignette         4\r\n   4     3779207168         0         0         0       vignette         4\r\n   5     3779207168         0         0         0       vignette         4\r\n   6     3824140288         2         0         1 payment_type_3         4\r\n   7     3832758272         1         0         1 payment_type_3         4\r\n   8     3832758272         1         0         0 payment_type_3         4\r\n   9     3832758272         0         0         1 payment_type_3         4\r\n   10    3832758272         1         0         0 payment_type_3         4\r\n   11    3579523072         2         1         3 small_no_files         4\r\n   12    3652222976         2         0         1 small_no_files         4\r\n   13    3683479552         1         0         1 small_no_files         4\r\n   14    3683479552         2         0         1 small_no_files         4\r\n   15    3683479552         0         1         1 small_no_files         4\r\n   16    3414007808         0         0         0     count_rows         4\r\n   17    3414007808         0         0         0     count_rows         4\r\n   18    3414007808         0         0         0     count_rows         4\r\n   19    3414007808         0         0         0     count_rows         4\r\n   20    3414007808         0         0         0     count_rows         4\r\n   ```\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-20T19:08:42.606+0000",
                    "updated": "2021-09-20T19:08:42.606+0000",
                    "started": "2021-09-20T19:08:42.606+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "653153",
                    "issueId": "13401857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/worklog/653372",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11189:\nURL: https://github.com/apache/arrow/pull/11189#discussion_r712604377\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1116,6 +1116,151 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+/// \\brief See MakeConcatenatedVectorGenerator\n+template <typename T>\n+class ConcatenatedVectorGenerator {\n+ public:\n+  explicit ConcatenatedVectorGenerator(\n+      AsyncGenerator<util::optional<std::vector<T>>> inner)\n+      : state_(std::make_shared<State>(std::move(inner))) {}\n+\n+  Future<T> operator()() { return state_->Pull(); }\n+\n+ private:\n+  struct State : public std::enable_shared_from_this<State> {\n+    explicit State(AsyncGenerator<util::optional<std::vector<T>>> inner)\n+        : inner(std::move(inner)) {}\n+\n+    Future<T> Pull() {\n+      auto guard = mutex.Lock();\n+      if (finished) {\n+        if (!error.ok()) {\n+          return std::move(error);\n+        }\n+        return IterationTraits<T>::End();\n+      }\n+      if (available.empty()) {\n+        auto waiting_future = Future<T>::Make();\n+        waiting.push_back(waiting_future);\n+\n+        if (!waiting_for_results) {\n+          waiting_for_results = true;\n+          auto fut = inner();\n+          // If fut is already complete, this may end up running the callback immediately,\n+          // so unlock first\n+          guard.Unlock();\n+          auto self = this->shared_from_this();\n+          fut.AddCallback(\n+              [self, fut](const Result<util::optional<std::vector<T>>>&) mutable {\n+                auto result = fut.MoveResult();\n+                self->ProcessResult(std::move(result));\n\nReview comment:\n       ```suggestion\r\n                   self->ProcessResult(fut.MoveResult());\r\n   ```\r\n   Can you combine these two lines?  Also, is the `fut` capture just to avoid the result copy?\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -489,9 +489,13 @@ Result<RecordBatchGenerator> ParquetFileFormat::ScanBatchesAsync(\n         auto parquet_scan_options,\n         GetFragmentScanOptions<ParquetFragmentScanOptions>(\n             kParquetTypeName, options.get(), default_fragment_scan_options));\n-    ARROW_ASSIGN_OR_RAISE(auto generator, reader->GetRecordBatchGenerator(\n-                                              reader, row_groups, column_projection,\n-                                              ::arrow::internal::GetCpuThreadPool()));\n+    // Assume 1 row group corresponds to 1 batch (this factor could be\n+    // improved by looking at metadata)\n+    int row_group_readahead = options->batch_readahead;\n+    ARROW_ASSIGN_OR_RAISE(\n+        auto generator, reader->GetRecordBatchGenerator(\n+                            reader, row_groups, column_projection,\n+                            ::arrow::internal::GetCpuThreadPool(), row_group_readahead));\n     return MakeReadaheadGenerator(std::move(generator), options->batch_readahead);\n\nReview comment:\n       Is this redundant at this point since you apply the row group readahead in the file?\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1116,6 +1116,151 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+/// \\brief See MakeConcatenatedVectorGenerator\n+template <typename T>\n+class ConcatenatedVectorGenerator {\n+ public:\n+  explicit ConcatenatedVectorGenerator(\n+      AsyncGenerator<util::optional<std::vector<T>>> inner)\n+      : state_(std::make_shared<State>(std::move(inner))) {}\n+\n+  Future<T> operator()() { return state_->Pull(); }\n+\n+ private:\n+  struct State : public std::enable_shared_from_this<State> {\n+    explicit State(AsyncGenerator<util::optional<std::vector<T>>> inner)\n+        : inner(std::move(inner)) {}\n+\n+    Future<T> Pull() {\n+      auto guard = mutex.Lock();\n+      if (finished) {\n+        if (!error.ok()) {\n+          return std::move(error);\n+        }\n+        return IterationTraits<T>::End();\n+      }\n+      if (available.empty()) {\n+        auto waiting_future = Future<T>::Make();\n+        waiting.push_back(waiting_future);\n+\n+        if (!waiting_for_results) {\n+          waiting_for_results = true;\n+          auto fut = inner();\n+          // If fut is already complete, this may end up running the callback immediately,\n+          // so unlock first\n+          guard.Unlock();\n+          auto self = this->shared_from_this();\n+          fut.AddCallback(\n+              [self, fut](const Result<util::optional<std::vector<T>>>&) mutable {\n+                auto result = fut.MoveResult();\n+                self->ProcessResult(std::move(result));\n+              });\n+        }\n+        return waiting_future;\n+      }\n+      assert(waiting.size() == 0);\n+      auto result = Future<T>::MakeFinished(available.front());\n+      available.pop_front();\n+      return result;\n+    }\n+\n+    void Purge() {\n+      while (!waiting.empty()) {\n+        waiting.front().MarkFinished(IterationTraits<T>::End());\n+        waiting.pop_front();\n+      }\n+    }\n+\n+    void ProcessResult(Result<util::optional<std::vector<T>>> maybe_result) {\n+      auto lock = mutex.Lock();\n+      waiting_for_results = false;\n+      // We should never call MarkFinished while holding the lock as a\n+      // callback may call back into this generator\n+      if (!maybe_result.ok()) {\n+        finished = true;\n+        if (waiting.empty()) {\n+          error = maybe_result.status();\n+          lock.Unlock();\n+        } else {\n+          lock.Unlock();\n+          waiting.front().MarkFinished(maybe_result.status());\n+          waiting.pop_front();\n+        }\n+        Purge();\n+        return;\n+      }\n+\n+      util::optional<std::vector<T>> result = maybe_result.MoveValueUnsafe();\n+      if (!result.has_value()) {\n+        finished = true;\n+        lock.Unlock();\n+        Purge();\n+        return;\n+      }\n+\n+      // MarkFinished might run a callback that tries to pull from us,\n+      // so just record what needs finishing, and complete the futures\n+      // later\n+      std::vector<T> delivered = std::move(*result);\n+      std::vector<Future<T>> deliver_to;\n+      auto it = delivered.begin();\n+      while (it != delivered.end() && !waiting.empty()) {\n+        deliver_to.push_back(waiting.front());\n+        waiting.pop_front();\n+        it++;\n+      }\n+      available.insert(available.end(), std::make_move_iterator(it),\n+                       std::make_move_iterator(delivered.end()));\n+\n+      // If there's still more waiting futures, poll the source again\n+      Future<util::optional<std::vector<T>>> fut;\n+      waiting_for_results = !waiting.empty();\n+      if (waiting_for_results) {\n+        fut = inner();\n+      }\n+\n+      lock.Unlock();\n+      // Now actually MarkFinished\n+      auto next = delivered.begin();\n+      for (auto& fut : deliver_to) {\n+        fut.MarkFinished(std::move(*next));\n+        next++;\n+      }\n+\n+      if (!fut.is_valid()) return;\n+      // Must do this outside the lock since if fut is already complete, this callback\n+      // will run right away\n+      auto self = this->shared_from_this();\n+      fut.AddCallback([self, fut](const Result<util::optional<std::vector<T>>>&) mutable {\n+        auto result = fut.MoveResult();\n+        self->ProcessResult(std::move(result));\n+      });\n+    }\n+\n+    AsyncGenerator<util::optional<std::vector<T>>> inner;\n+    util::Mutex mutex;\n+    std::deque<Future<T>> waiting;\n+    std::deque<T> available;\n+    Status error;\n+    // Are we finished polling the source?\n+    bool finished = false;\n+    // Do we have a request in flight for the source?\n+    bool waiting_for_results = false;\n+  };\n+\n+  std::shared_ptr<State> state_;\n+};\n+\n+/// \\brief Creates a generator that converts a stream of vector<T> to a stream of T.\n+///\n+/// This generator is async-reentrant but will never pull from source reentrantly.\n+/// Instead, combine with MakeReadaheadGenerator.\n\nReview comment:\n       Is this much different than `MakeConcatenatedGenerator(MakeMappedGenerator(generator_of_vectors, MakeVectorGenerator))?`\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1116,6 +1116,151 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+/// \\brief See MakeConcatenatedVectorGenerator\n+template <typename T>\n+class ConcatenatedVectorGenerator {\n+ public:\n+  explicit ConcatenatedVectorGenerator(\n+      AsyncGenerator<util::optional<std::vector<T>>> inner)\n+      : state_(std::make_shared<State>(std::move(inner))) {}\n+\n+  Future<T> operator()() { return state_->Pull(); }\n+\n+ private:\n+  struct State : public std::enable_shared_from_this<State> {\n+    explicit State(AsyncGenerator<util::optional<std::vector<T>>> inner)\n+        : inner(std::move(inner)) {}\n+\n+    Future<T> Pull() {\n+      auto guard = mutex.Lock();\n+      if (finished) {\n+        if (!error.ok()) {\n+          return std::move(error);\n+        }\n+        return IterationTraits<T>::End();\n+      }\n+      if (available.empty()) {\n+        auto waiting_future = Future<T>::Make();\n+        waiting.push_back(waiting_future);\n+\n+        if (!waiting_for_results) {\n+          waiting_for_results = true;\n+          auto fut = inner();\n+          // If fut is already complete, this may end up running the callback immediately,\n+          // so unlock first\n+          guard.Unlock();\n+          auto self = this->shared_from_this();\n+          fut.AddCallback(\n+              [self, fut](const Result<util::optional<std::vector<T>>>&) mutable {\n+                auto result = fut.MoveResult();\n+                self->ProcessResult(std::move(result));\n+              });\n+        }\n+        return waiting_future;\n+      }\n+      assert(waiting.size() == 0);\n+      auto result = Future<T>::MakeFinished(available.front());\n+      available.pop_front();\n+      return result;\n+    }\n+\n+    void Purge() {\n+      while (!waiting.empty()) {\n+        waiting.front().MarkFinished(IterationTraits<T>::End());\n+        waiting.pop_front();\n+      }\n+    }\n+\n+    void ProcessResult(Result<util::optional<std::vector<T>>> maybe_result) {\n+      auto lock = mutex.Lock();\n+      waiting_for_results = false;\n+      // We should never call MarkFinished while holding the lock as a\n+      // callback may call back into this generator\n+      if (!maybe_result.ok()) {\n+        finished = true;\n+        if (waiting.empty()) {\n\nReview comment:\n       No harm in having this case but I'm not sure if `waiting` can be empty here.\n\n##########\nFile path: cpp/src/arrow/util/async_generator_test.cc\n##########\n@@ -461,6 +461,68 @@ TEST(TestAsyncUtil, Concatenated) {\n   AssertAsyncGeneratorMatch(expected, concat);\n }\n \n+TEST(TestAsyncUtil, ConcatenatedVector) {\n\nReview comment:\n       Given the locks you have it would be good to have at least one parallel test using a readahead generator.\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1116,6 +1116,151 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+/// \\brief See MakeConcatenatedVectorGenerator\n+template <typename T>\n+class ConcatenatedVectorGenerator {\n+ public:\n+  explicit ConcatenatedVectorGenerator(\n+      AsyncGenerator<util::optional<std::vector<T>>> inner)\n+      : state_(std::make_shared<State>(std::move(inner))) {}\n+\n+  Future<T> operator()() { return state_->Pull(); }\n+\n+ private:\n+  struct State : public std::enable_shared_from_this<State> {\n+    explicit State(AsyncGenerator<util::optional<std::vector<T>>> inner)\n+        : inner(std::move(inner)) {}\n+\n+    Future<T> Pull() {\n+      auto guard = mutex.Lock();\n+      if (finished) {\n+        if (!error.ok()) {\n+          return std::move(error);\n+        }\n+        return IterationTraits<T>::End();\n+      }\n+      if (available.empty()) {\n+        auto waiting_future = Future<T>::Make();\n+        waiting.push_back(waiting_future);\n+\n+        if (!waiting_for_results) {\n+          waiting_for_results = true;\n+          auto fut = inner();\n+          // If fut is already complete, this may end up running the callback immediately,\n+          // so unlock first\n+          guard.Unlock();\n+          auto self = this->shared_from_this();\n+          fut.AddCallback(\n+              [self, fut](const Result<util::optional<std::vector<T>>>&) mutable {\n+                auto result = fut.MoveResult();\n+                self->ProcessResult(std::move(result));\n+              });\n+        }\n+        return waiting_future;\n+      }\n+      assert(waiting.size() == 0);\n+      auto result = Future<T>::MakeFinished(available.front());\n+      available.pop_front();\n+      return result;\n+    }\n+\n+    void Purge() {\n+      while (!waiting.empty()) {\n+        waiting.front().MarkFinished(IterationTraits<T>::End());\n+        waiting.pop_front();\n+      }\n+    }\n+\n+    void ProcessResult(Result<util::optional<std::vector<T>>> maybe_result) {\n+      auto lock = mutex.Lock();\n+      waiting_for_results = false;\n+      // We should never call MarkFinished while holding the lock as a\n+      // callback may call back into this generator\n+      if (!maybe_result.ok()) {\n+        finished = true;\n+        if (waiting.empty()) {\n+          error = maybe_result.status();\n+          lock.Unlock();\n+        } else {\n+          lock.Unlock();\n+          waiting.front().MarkFinished(maybe_result.status());\n+          waiting.pop_front();\n+        }\n+        Purge();\n+        return;\n+      }\n+\n+      util::optional<std::vector<T>> result = maybe_result.MoveValueUnsafe();\n+      if (!result.has_value()) {\n+        finished = true;\n+        lock.Unlock();\n+        Purge();\n+        return;\n+      }\n+\n+      // MarkFinished might run a callback that tries to pull from us,\n+      // so just record what needs finishing, and complete the futures\n+      // later\n+      std::vector<T> delivered = std::move(*result);\n+      std::vector<Future<T>> deliver_to;\n+      auto it = delivered.begin();\n+      while (it != delivered.end() && !waiting.empty()) {\n+        deliver_to.push_back(waiting.front());\n+        waiting.pop_front();\n+        it++;\n+      }\n+      available.insert(available.end(), std::make_move_iterator(it),\n+                       std::make_move_iterator(delivered.end()));\n+\n+      // If there's still more waiting futures, poll the source again\n+      Future<util::optional<std::vector<T>>> fut;\n+      waiting_for_results = !waiting.empty();\n+      if (waiting_for_results) {\n+        fut = inner();\n+      }\n+\n+      lock.Unlock();\n+      // Now actually MarkFinished\n+      auto next = delivered.begin();\n+      for (auto& fut : deliver_to) {\n+        fut.MarkFinished(std::move(*next));\n+        next++;\n+      }\n+\n+      if (!fut.is_valid()) return;\n+      // Must do this outside the lock since if fut is already complete, this callback\n+      // will run right away\n+      auto self = this->shared_from_this();\n+      fut.AddCallback([self, fut](const Result<util::optional<std::vector<T>>>&) mutable {\n+        auto result = fut.MoveResult();\n+        self->ProcessResult(std::move(result));\n+      });\n+    }\n+\n+    AsyncGenerator<util::optional<std::vector<T>>> inner;\n+    util::Mutex mutex;\n+    std::deque<Future<T>> waiting;\n+    std::deque<T> available;\n+    Status error;\n+    // Are we finished polling the source?\n+    bool finished = false;\n+    // Do we have a request in flight for the source?\n+    bool waiting_for_results = false;\n+  };\n+\n+  std::shared_ptr<State> state_;\n+};\n+\n+/// \\brief Creates a generator that converts a stream of vector<T> to a stream of T.\n+///\n+/// This generator is async-reentrant but will never pull from source reentrantly.\n+/// Instead, combine with MakeReadaheadGenerator.\n+template <typename T>\n+AsyncGenerator<T> MakeConcatenatedVectorGenerator(\n\nReview comment:\n       Maybe `MakeFlattenGenerator` to match `MakeFlattenIterator`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-21T04:40:19.850+0000",
                    "updated": "2021-09-21T04:40:19.850+0000",
                    "started": "2021-09-21T04:40:19.850+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "653372",
                    "issueId": "13401857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/worklog/653504",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11189:\nURL: https://github.com/apache/arrow/pull/11189#discussion_r712967234\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1116,6 +1116,151 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+/// \\brief See MakeConcatenatedVectorGenerator\n+template <typename T>\n+class ConcatenatedVectorGenerator {\n+ public:\n+  explicit ConcatenatedVectorGenerator(\n+      AsyncGenerator<util::optional<std::vector<T>>> inner)\n+      : state_(std::make_shared<State>(std::move(inner))) {}\n+\n+  Future<T> operator()() { return state_->Pull(); }\n+\n+ private:\n+  struct State : public std::enable_shared_from_this<State> {\n+    explicit State(AsyncGenerator<util::optional<std::vector<T>>> inner)\n+        : inner(std::move(inner)) {}\n+\n+    Future<T> Pull() {\n+      auto guard = mutex.Lock();\n+      if (finished) {\n+        if (!error.ok()) {\n+          return std::move(error);\n+        }\n+        return IterationTraits<T>::End();\n+      }\n+      if (available.empty()) {\n+        auto waiting_future = Future<T>::Make();\n+        waiting.push_back(waiting_future);\n+\n+        if (!waiting_for_results) {\n+          waiting_for_results = true;\n+          auto fut = inner();\n+          // If fut is already complete, this may end up running the callback immediately,\n+          // so unlock first\n+          guard.Unlock();\n+          auto self = this->shared_from_this();\n+          fut.AddCallback(\n+              [self, fut](const Result<util::optional<std::vector<T>>>&) mutable {\n+                auto result = fut.MoveResult();\n+                self->ProcessResult(std::move(result));\n+              });\n+        }\n+        return waiting_future;\n+      }\n+      assert(waiting.size() == 0);\n+      auto result = Future<T>::MakeFinished(available.front());\n+      available.pop_front();\n+      return result;\n+    }\n+\n+    void Purge() {\n+      while (!waiting.empty()) {\n+        waiting.front().MarkFinished(IterationTraits<T>::End());\n+        waiting.pop_front();\n+      }\n+    }\n+\n+    void ProcessResult(Result<util::optional<std::vector<T>>> maybe_result) {\n+      auto lock = mutex.Lock();\n+      waiting_for_results = false;\n+      // We should never call MarkFinished while holding the lock as a\n+      // callback may call back into this generator\n+      if (!maybe_result.ok()) {\n+        finished = true;\n+        if (waiting.empty()) {\n+          error = maybe_result.status();\n+          lock.Unlock();\n+        } else {\n+          lock.Unlock();\n+          waiting.front().MarkFinished(maybe_result.status());\n+          waiting.pop_front();\n+        }\n+        Purge();\n+        return;\n+      }\n+\n+      util::optional<std::vector<T>> result = maybe_result.MoveValueUnsafe();\n+      if (!result.has_value()) {\n+        finished = true;\n+        lock.Unlock();\n+        Purge();\n+        return;\n+      }\n+\n+      // MarkFinished might run a callback that tries to pull from us,\n+      // so just record what needs finishing, and complete the futures\n+      // later\n+      std::vector<T> delivered = std::move(*result);\n+      std::vector<Future<T>> deliver_to;\n+      auto it = delivered.begin();\n+      while (it != delivered.end() && !waiting.empty()) {\n+        deliver_to.push_back(waiting.front());\n+        waiting.pop_front();\n+        it++;\n+      }\n+      available.insert(available.end(), std::make_move_iterator(it),\n+                       std::make_move_iterator(delivered.end()));\n+\n+      // If there's still more waiting futures, poll the source again\n+      Future<util::optional<std::vector<T>>> fut;\n+      waiting_for_results = !waiting.empty();\n+      if (waiting_for_results) {\n+        fut = inner();\n+      }\n+\n+      lock.Unlock();\n+      // Now actually MarkFinished\n+      auto next = delivered.begin();\n+      for (auto& fut : deliver_to) {\n+        fut.MarkFinished(std::move(*next));\n+        next++;\n+      }\n+\n+      if (!fut.is_valid()) return;\n+      // Must do this outside the lock since if fut is already complete, this callback\n+      // will run right away\n+      auto self = this->shared_from_this();\n+      fut.AddCallback([self, fut](const Result<util::optional<std::vector<T>>>&) mutable {\n+        auto result = fut.MoveResult();\n+        self->ProcessResult(std::move(result));\n+      });\n+    }\n+\n+    AsyncGenerator<util::optional<std::vector<T>>> inner;\n+    util::Mutex mutex;\n+    std::deque<Future<T>> waiting;\n+    std::deque<T> available;\n+    Status error;\n+    // Are we finished polling the source?\n+    bool finished = false;\n+    // Do we have a request in flight for the source?\n+    bool waiting_for_results = false;\n+  };\n+\n+  std::shared_ptr<State> state_;\n+};\n+\n+/// \\brief Creates a generator that converts a stream of vector<T> to a stream of T.\n+///\n+/// This generator is async-reentrant but will never pull from source reentrantly.\n+/// Instead, combine with MakeReadaheadGenerator.\n\nReview comment:\n       Actually, now that you point that out\u2026I suppose there's one layer of indirection that this gets rid of (once the next vector arrives, any pending futures will get fulfilled right away, instead of going through the callbacks. But I'll check if this actually affects performance/make sure we get parallelism, if not, we should just use the existing ones.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-21T11:59:04.641+0000",
                    "updated": "2021-09-21T11:59:04.641+0000",
                    "started": "2021-09-21T11:59:04.641+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "653504",
                    "issueId": "13401857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/worklog/653757",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11189:\nURL: https://github.com/apache/arrow/pull/11189#discussion_r713334535\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1116,6 +1116,151 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+/// \\brief See MakeConcatenatedVectorGenerator\n+template <typename T>\n+class ConcatenatedVectorGenerator {\n+ public:\n+  explicit ConcatenatedVectorGenerator(\n+      AsyncGenerator<util::optional<std::vector<T>>> inner)\n+      : state_(std::make_shared<State>(std::move(inner))) {}\n+\n+  Future<T> operator()() { return state_->Pull(); }\n+\n+ private:\n+  struct State : public std::enable_shared_from_this<State> {\n+    explicit State(AsyncGenerator<util::optional<std::vector<T>>> inner)\n+        : inner(std::move(inner)) {}\n+\n+    Future<T> Pull() {\n+      auto guard = mutex.Lock();\n+      if (finished) {\n+        if (!error.ok()) {\n+          return std::move(error);\n+        }\n+        return IterationTraits<T>::End();\n+      }\n+      if (available.empty()) {\n+        auto waiting_future = Future<T>::Make();\n+        waiting.push_back(waiting_future);\n+\n+        if (!waiting_for_results) {\n+          waiting_for_results = true;\n+          auto fut = inner();\n+          // If fut is already complete, this may end up running the callback immediately,\n+          // so unlock first\n+          guard.Unlock();\n+          auto self = this->shared_from_this();\n+          fut.AddCallback(\n+              [self, fut](const Result<util::optional<std::vector<T>>>&) mutable {\n+                auto result = fut.MoveResult();\n+                self->ProcessResult(std::move(result));\n+              });\n+        }\n+        return waiting_future;\n+      }\n+      assert(waiting.size() == 0);\n+      auto result = Future<T>::MakeFinished(available.front());\n+      available.pop_front();\n+      return result;\n+    }\n+\n+    void Purge() {\n+      while (!waiting.empty()) {\n+        waiting.front().MarkFinished(IterationTraits<T>::End());\n+        waiting.pop_front();\n+      }\n+    }\n+\n+    void ProcessResult(Result<util::optional<std::vector<T>>> maybe_result) {\n+      auto lock = mutex.Lock();\n+      waiting_for_results = false;\n+      // We should never call MarkFinished while holding the lock as a\n+      // callback may call back into this generator\n+      if (!maybe_result.ok()) {\n+        finished = true;\n+        if (waiting.empty()) {\n+          error = maybe_result.status();\n+          lock.Unlock();\n+        } else {\n+          lock.Unlock();\n+          waiting.front().MarkFinished(maybe_result.status());\n+          waiting.pop_front();\n+        }\n+        Purge();\n+        return;\n+      }\n+\n+      util::optional<std::vector<T>> result = maybe_result.MoveValueUnsafe();\n+      if (!result.has_value()) {\n+        finished = true;\n+        lock.Unlock();\n+        Purge();\n+        return;\n+      }\n+\n+      // MarkFinished might run a callback that tries to pull from us,\n+      // so just record what needs finishing, and complete the futures\n+      // later\n+      std::vector<T> delivered = std::move(*result);\n+      std::vector<Future<T>> deliver_to;\n+      auto it = delivered.begin();\n+      while (it != delivered.end() && !waiting.empty()) {\n+        deliver_to.push_back(waiting.front());\n+        waiting.pop_front();\n+        it++;\n+      }\n+      available.insert(available.end(), std::make_move_iterator(it),\n+                       std::make_move_iterator(delivered.end()));\n+\n+      // If there's still more waiting futures, poll the source again\n+      Future<util::optional<std::vector<T>>> fut;\n+      waiting_for_results = !waiting.empty();\n+      if (waiting_for_results) {\n+        fut = inner();\n+      }\n+\n+      lock.Unlock();\n+      // Now actually MarkFinished\n+      auto next = delivered.begin();\n+      for (auto& fut : deliver_to) {\n+        fut.MarkFinished(std::move(*next));\n+        next++;\n+      }\n+\n+      if (!fut.is_valid()) return;\n+      // Must do this outside the lock since if fut is already complete, this callback\n+      // will run right away\n+      auto self = this->shared_from_this();\n+      fut.AddCallback([self, fut](const Result<util::optional<std::vector<T>>>&) mutable {\n+        auto result = fut.MoveResult();\n+        self->ProcessResult(std::move(result));\n+      });\n+    }\n+\n+    AsyncGenerator<util::optional<std::vector<T>>> inner;\n+    util::Mutex mutex;\n+    std::deque<Future<T>> waiting;\n+    std::deque<T> available;\n+    Status error;\n+    // Are we finished polling the source?\n+    bool finished = false;\n+    // Do we have a request in flight for the source?\n+    bool waiting_for_results = false;\n+  };\n+\n+  std::shared_ptr<State> state_;\n+};\n+\n+/// \\brief Creates a generator that converts a stream of vector<T> to a stream of T.\n+///\n+/// This generator is async-reentrant but will never pull from source reentrantly.\n+/// Instead, combine with MakeReadaheadGenerator.\n\nReview comment:\n       Alright, it seems to be about the same, so I went with that solution - saves us both work! (This is effectively what you commented in JIRA: we just implement batch readahead as row group readahead.)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-21T18:57:51.564+0000",
                    "updated": "2021-09-21T18:57:51.564+0000",
                    "started": "2021-09-21T18:57:51.563+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "653757",
                    "issueId": "13401857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/worklog/653761",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11189:\nURL: https://github.com/apache/arrow/pull/11189#issuecomment-924300191\n\n\n   @ursabot please benchmark lang=R\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-21T19:04:32.774+0000",
                    "updated": "2021-09-21T19:04:32.774+0000",
                    "started": "2021-09-21T19:04:32.774+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "653761",
                    "issueId": "13401857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/worklog/653762",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #11189:\nURL: https://github.com/apache/arrow/pull/11189#issuecomment-924300963\n\n\n   Benchmark runs are scheduled for baseline = 18756c2aa60344f9eb5b896ff2cee4e734b92516 and contender = 301e86505a0b2b27a2d6fa7d446e2aa1a136c9ce. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Skipped :warning: Provided benchmark filters do not have any benchmark groups to be executed on ec2-t3-xlarge-us-east-2] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/0ec8ed37a55c4440bc0f7d3ffdb491f8...4610757ce5e64be5a0237b0f2a037b9b/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/f9a453ffd2e14e10a74f3e7c71ddfb77...61f200d18df143259815b85175a790ab/)\n   [Skipped :warning: Only ['C++', 'Java'] langs are supported on ursa-thinkcentre-m75q] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/a9ad001bb40e41808430a974c869499e...7a618af070b149e1bfaec737bf21eb69/)\n   Supported benchmarks:\n   ursa-i9-9960x: langs = Python, R, JavaScript\n   ursa-thinkcentre-m75q: langs = C++, Java\n   ec2-t3-xlarge-us-east-2: cloud = True\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-21T19:05:36.512+0000",
                    "updated": "2021-09-21T19:05:36.512+0000",
                    "started": "2021-09-21T19:05:36.512+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "653762",
                    "issueId": "13401857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/worklog/653869",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #11189:\nURL: https://github.com/apache/arrow/pull/11189#issuecomment-924300963\n\n\n   Benchmark runs are scheduled for baseline = 18756c2aa60344f9eb5b896ff2cee4e734b92516 and contender = 301e86505a0b2b27a2d6fa7d446e2aa1a136c9ce. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Skipped :warning: Provided benchmark filters do not have any benchmark groups to be executed on ec2-t3-xlarge-us-east-2] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/0ec8ed37a55c4440bc0f7d3ffdb491f8...4610757ce5e64be5a0237b0f2a037b9b/)\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/f9a453ffd2e14e10a74f3e7c71ddfb77...61f200d18df143259815b85175a790ab/)\n   [Skipped :warning: Only ['C++', 'Java'] langs are supported on ursa-thinkcentre-m75q] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/a9ad001bb40e41808430a974c869499e...7a618af070b149e1bfaec737bf21eb69/)\n   Supported benchmarks:\n   ursa-i9-9960x: langs = Python, R, JavaScript\n   ursa-thinkcentre-m75q: langs = C++, Java\n   ec2-t3-xlarge-us-east-2: cloud = True\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-22T00:03:30.746+0000",
                    "updated": "2021-09-22T00:03:30.746+0000",
                    "started": "2021-09-22T00:03:30.746+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "653869",
                    "issueId": "13401857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/worklog/654054",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11189:\nURL: https://github.com/apache/arrow/pull/11189#issuecomment-924887696\n\n\n   This helps quite a bit on all the [partitioned-dataset-filter](https://conbench.ursa.dev/compare/batches/3d25d19e1b2a46468bd5ddf5e82946e2...e0751834febe4a5c93fecd597faa1986/) benchmarks.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-22T12:34:41.401+0000",
                    "updated": "2021-09-22T12:34:41.401+0000",
                    "started": "2021-09-22T12:34:41.401+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "654054",
                    "issueId": "13401857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/worklog/654075",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11189:\nURL: https://github.com/apache/arrow/pull/11189#issuecomment-924954728\n\n\n   I think the segfault is the same one as in https://github.com/apache/arrow/pull/11207/commits/b3e61169d621205394d28f2b6e4b515896337e5e which I've (hopefully) fixed in #11207\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-22T13:54:50.180+0000",
                    "updated": "2021-09-22T13:54:50.180+0000",
                    "started": "2021-09-22T13:54:50.180+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "654075",
                    "issueId": "13401857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/worklog/654655",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11189:\nURL: https://github.com/apache/arrow/pull/11189#issuecomment-926041334\n\n\n   Moving to draft for now since this needs the same fixes as #11207.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-23T18:10:19.267+0000",
                    "updated": "2021-09-23T18:10:19.267+0000",
                    "started": "2021-09-23T18:10:19.267+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "654655",
                    "issueId": "13401857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/worklog/655554",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11189:\nURL: https://github.com/apache/arrow/pull/11189#issuecomment-927985770\n\n\n   @westonpace any other comments here?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-27T15:28:58.138+0000",
                    "updated": "2021-09-27T15:28:58.138+0000",
                    "started": "2021-09-27T15:28:58.138+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "655554",
                    "issueId": "13401857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/worklog/655656",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm closed pull request #11189:\nURL: https://github.com/apache/arrow/pull/11189\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-27T17:47:07.662+0000",
                    "updated": "2021-09-27T17:47:07.662+0000",
                    "started": "2021-09-27T17:47:07.661+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "655656",
                    "issueId": "13401857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/worklog/656423",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm closed pull request #11189:\nURL: https://github.com/apache/arrow/pull/11189\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T19:47:53.259+0000",
                    "updated": "2021-09-28T19:47:53.259+0000",
                    "started": "2021-09-28T19:47:53.258+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656423",
                    "issueId": "13401857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/worklog/659515",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #11189:\nURL: https://github.com/apache/arrow/pull/11189#issuecomment-933407083\n\n\n   @ursabot please benchmark name=file-read lang=Python\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-04T11:51:08.453+0000",
                    "updated": "2021-10-04T11:51:08.453+0000",
                    "started": "2021-10-04T11:51:08.453+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "659515",
                    "issueId": "13401857"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 14400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@205225dc[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6ee1f6f[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7c6dc013[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@a8ead96[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@85e0d43[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@46b529f6[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@544a146b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2bd7f169[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@539bc545[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3c8ebc59[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@38e31eef[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2cabec23[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 14400,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Sep 27 17:46:59 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-09-27T17:46:59.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14026/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-09-17T11:59:26.000+0000",
        "updated": "2021-10-04T14:04:30.000+0000",
        "timeoriginalestimate": null,
        "description": "The parquet scanner implements batch readahead by applying a readahead generator to the generator returned by parquet::arrow::FileReader::GetRecordBatchGenerator.  However, that generator is constructed with MakeConcatenatedGenerator which, regrettably, has this comment:\r\n\r\n> This generator is async-reentrant but will never pull from source reentrantly and will never pull from any subscription reentrantly.\r\n\r\nThis effectively prevents any batch readahead from happening and the file is always read one batch at a time.  Part of the problem seems to be that ReadOneRowGroup in reader.cc returns a RecordBatchGenerator when it seems it should be able to return a RecordBatch.  For the testing I am doing I changed this to return a single record batch which allowed me to get rid of the concatenated generator and batch readahead appeared to work properly but I didn't fully confirm the correctness of this.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 14400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/attachment/13033983",
                "id": "13033983",
                "filename": "image-2021-09-21-08-59-50-418.png",
                "author": {
                    "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                    "name": "lidavidm",
                    "key": "lidavidm",
                    "avatarUrls": {
                        "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                        "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                        "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                        "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                    },
                    "displayName": "David Li",
                    "active": true,
                    "timeZone": "America/New_York"
                },
                "created": "2021-09-21T12:59:51.581+0000",
                "size": 235929,
                "mimeType": "image/png",
                "content": "https://issues.apache.org/jira/secure/attachment/13033983/image-2021-09-21-08-59-50-418.png"
            }
        ],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Batch readahead not working correctly in Parquet scanner",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/comment/17416652",
                    "id": "17416652",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "IIRC, the reason why ReadOneRowGroup gives a generator is because a Table isn't necessarily convertible into a single batch (the ChunkedArrays in a table need not have the same chunk layout).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-09-17T12:38:01.364+0000",
                    "updated": "2021-09-17T12:38:01.364+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/comment/17416653",
                    "id": "17416653",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Though maybe with the way the Parquet reader works, the ChunkedArrays will always have a single chunk? We'd have to dig more into the Parquet reader.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-09-17T12:38:31.495+0000",
                    "updated": "2021-09-17T12:38:31.495+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/comment/17416788",
                    "id": "17416788",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "After digging around the Parquet implementation it seems unclear; there look to be cases where multiple chunks can be delivered, though in many cases only one chunk is hardcoded. So it might be better to replace MakeConcatenatedGenerator. One thing is that we don't actually have AsyncGenerator<AsyncGenerator<RecordBatch>> but rather AsyncGenerator<vector<RecordBatch>> (because ultimately we're reading a Table) so we could perhaps do the following:\r\n * Queue up async-reentrant pulls,\r\n * Queue up a number of row groups,\r\n * Whenever the next row group is delivered, re-chunk the table into batches of the desired size, then fulfill any outstanding pulls (and queue up the remainder).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-09-17T16:25:51.155+0000",
                    "updated": "2021-09-17T16:25:51.155+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/comment/17416789",
                    "id": "17416789",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "This would also solve ARROW-14024 for the Parquet case.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-09-17T16:26:16.598+0000",
                    "updated": "2021-09-17T16:26:16.598+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/comment/17416838",
                    "id": "17416838",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I started pursuing this though I don't think I'll have it ready today (I always run into deadlocks with async code\u2026)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-09-17T18:09:22.099+0000",
                    "updated": "2021-09-17T18:09:22.099+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/comment/17416877",
                    "id": "17416877",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "What you propose sounds good to me.  My other thoughts (that I haven't really investigated at all) were:\r\n\r\nOne option is if we interpret batch_readahead as row group readahead and just read ahead X vectors of record batches and put the flattening / concatenating on the other side.  It's potentially keeping a little more in memory than strictly necessary but it keeps things simple.\r\n\r\nAnother option is to create a different kind of concatenating generator.  Right now the concatenating generator is a merge generator with a max readahead of 1.  We could create a merge generator with higher max readahead (e.g. batch_readahead) and then keep a buffer of items ordering information that gets resequenced.  I think this is a generic version of what you described.  The downside would be that it wouldn't really be clear how big that resequencing buffer could get (it would be max_streams * max_size_of_one_stream - 1 I think).  Plus, adding the resequencing logic is always a pain.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-09-17T18:59:22.182+0000",
                    "updated": "2021-09-17T18:59:22.182+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/comment/17418107",
                    "id": "17418107",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~westonpace] how did we determine that there was no readahead? What I see is that there are actually concurrent pulls to the row group generator (the generator of generators):\r\n\r\n(Ignore this; I was mistakenly testing with multiple files which would cover up issues.)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-09-21T13:02:48.903+0000",
                    "updated": "2021-09-21T18:51:37.103+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13401857/comment/17420936",
                    "id": "17420936",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 11189\n[https://github.com/apache/arrow/pull/11189]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-09-27T17:46:59.664+0000",
                    "updated": "2021-09-27T17:46:59.664+0000"
                }
            ],
            "maxResults": 8,
            "total": 8,
            "startAt": 0
        },
        "customfield_12311820": "0|z0v1g8:",
        "customfield_12314139": null
    }
}