{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13411231",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411231",
    "key": "ARROW-14671",
    "fields": {
        "parent": {
            "id": "13406607",
            "key": "ARROW-14322",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13406607",
            "fields": {
                "summary": "[Doc] Add Python doc on how to connect Python to other languages",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "aggregateprogress": {
            "progress": 20400,
            "total": 20400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 20400,
            "total": 20400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14671/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 34,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411231/worklog/680305",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11679:\nURL: https://github.com/apache/arrow/pull/11679#issuecomment-966361837\n\n\n   https://issues.apache.org/jira/browse/ARROW-14671\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-11T14:47:55.848+0000",
                    "updated": "2021-11-11T14:47:55.848+0000",
                    "started": "2021-11-11T14:47:55.847+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "680305",
                    "issueId": "13411231"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411231/worklog/680319",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #11679:\nURL: https://github.com/apache/arrow/pull/11679#issuecomment-966398928\n\n\n   Is there anything in ARROW-11120 that is useful here?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-11T15:33:39.235+0000",
                    "updated": "2021-11-11T15:33:39.235+0000",
                    "started": "2021-11-11T15:33:39.235+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "680319",
                    "issueId": "13411231"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411231/worklog/680329",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on pull request #11679:\nURL: https://github.com/apache/arrow/pull/11679#issuecomment-966421454\n\n\n   > Is there anything in [ARROW-11120](https://issues.apache.org/jira/browse/ARROW-11120) that is useful here?\r\n   \r\n   I think that in the python2r case it would be useful to extend `pyarrow` to have a `pyarrow.rpy2` module like we have the `pyarrow.jvm` one. So that we can provide an higher level API on top of the C Data interface. That's in practice what it's done by https://github.com/rpy2/rpy2-arrow\r\n   \r\n   My goal was mostly to show now to do the work using what Arrow provides natively at the moment and make clear how you can use the C Data interface. We should definitely grow an additional section in that doc page once there is a higher level API available. From what I can see providing conversion tools for `rpy2.robjects.conversion` wouldn't be too hard.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-11T16:02:21.350+0000",
                    "updated": "2021-11-11T16:02:21.350+0000",
                    "started": "2021-11-11T16:02:21.350+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "680329",
                    "issueId": "13411231"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411231/worklog/681536",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #11679:\nURL: https://github.com/apache/arrow/pull/11679#discussion_r749383061\n\n\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,237 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and R functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``R`` environment with\n+    ``arrow`` library correctly installed.\n+\n+Invoking R functions from Python\n+--------------------------------\n+\n+Suppose we have a simple R function receiving an Arrow Array to\n+add ``3`` to all its elements:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We could save such function in a ``addthree.R`` file so that we can\n+make it available for reuse.\n+\n+Once the ``addthree.R`` is created we can invoke any of its functions\n+from Python using the \n+`rpy2 <https://rpy2.github.io/doc/latest/html/index.html>`_ library which\n+enables a R runtime within the Python interpreter.\n+\n+``rpy2``\u00a0can be installed using ``pip`` like most python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2\n+\n+The most basic thing we can do with our ``addthree``\u00a0function is to\n+invoke it from Python with a number and see how it will return the result.\n+\n+To do so we can create an ``addthree.py`` file which uses ``rpy2`` to\n+import the ``addthree`` function from ``addthree.R``\u00a0file and invoke it:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+\n+    # Load the addthree.R file\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    # Get a reference to the addthree function\n+    addthree = robjects.r[\"addthree\"]\n+\n+    # Invoke the function\n+    r = addthree(3)\n+\n+    # Access the returned value\n+    value = r[0]\n+    print(value)\n+\n+Running the ``addthree.py``\u00a0file will show how our Python code is able\n+to access the ``R`` function and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py \n+    6.0\n+\n+If instead of passing around basic data types we want to pass around\n+Arrow Arrays, that can be done exporting the array from Python to the C Data\n+interface and importing them back from R.\n+\n+To enable importing the Arrow Array from the C Data interface we have to\n+wrap our ``addthree`` function in a function that does the extra work\n+necessary to import an Arrow Array in R from the C Data interface.\n+\n+That work will be done by the ``addthree_cdata``\u00a0function which invokes the\n+``addthree`` function once the Array is imported.\n+\n+Our ``addthree.R``\u00a0will thus have both the ``addthree_cdata`` and the \n+``addthree`` functions:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree_cdata <- function(array_ptr_s, schema_ptr_s) {\n+        array_ptr <- as.numeric(array_ptr_s)\n+        schema_ptr <- as.numeric(schema_ptr_s)\n+\n+        a <- Array$import_from_c(array_ptr, schema_ptr)\n+\n+        return(addthree(a))\n+    }\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We can now provide to R the array and its schema from Python through the\n+``array_ptr_s`` and ``schema_ptr_s``\u00a0arguments so that R can build back\n+an ``Array`` from them and then invoke ``addthree`` with the array.\n+\n+Invoking ``addthree_cdata`` from Python involves building the Array we\n+want to pass to ``R``, exporting it to the C Data interface and then\n+passing the exported references to the ``R`` function.\n+\n+Our ``addthree.py`` will thus become:\n+\n+.. code-block:: python\n+\n+    # Get a reference to the addthree_cdata R function\n+    import rpy2.robjects as robjects\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+    addthree = robjects.r[\"addthree_cdata\"]\n+\n+    # Create the pyarrow array we want to pass to R\n+    import pyarrow\n+    array = pyarrow.array((1, 2, 3))\n+\n+    # Import the pyarrow module that provides access to the C Data interface\n+    from pyarrow.cffi import ffi as arrow_c\n+\n+    # Allocate structures where we will export the Array data \n+    # and the Array schema. They will be released when we exit the with block.\n+    with arrow_c.new(\"struct ArrowArray*\") as c_array, \\\n+         arrow_c.new(\"struct ArrowSchema*\") as c_schema:\n+        # Get the references to the C Data structures.\n+        c_array_ptr = int(arrow_c.cast(\"uintptr_t\", c_array))\n+        c_schema_ptr = int(arrow_c.cast(\"uintptr_t\", c_schema))\n+\n+        # Export the Array and its schema to the C Data structures.\n+        array._export_to_c(c_array_ptr)\n+        array.type._export_to_c(c_schema_ptr)\n+\n+        # Invoke the R addthree_cdata function passing the references\n+        # to the array and schema C Data structures. \n+        # Those references are passed as strings as R doesn't have\n+        # native support for 64bit integers, so the integers are\n+        # converted to their string representation for R to convert it back.\n+        r_result_array = addthree(str(c_array_ptr), str(c_schema_ptr))\n\nReview comment:\n       ```suggestion\r\n           r_result_array = addthree_cdata(str(c_array_ptr), str(c_schema_ptr))\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-15T14:37:28.956+0000",
                    "updated": "2021-11-15T14:37:28.956+0000",
                    "started": "2021-11-15T14:37:28.956+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "681536",
                    "issueId": "13411231"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411231/worklog/681540",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #11679:\nURL: https://github.com/apache/arrow/pull/11679#issuecomment-968977000\n\n\n   > That's in practice what it's done by https://github.com/rpy2/rpy2-arrow\r\n   \r\n   We could then also show the example by using this rpy2-arrow package, similar to how reticulate is used for the integration the other way around? (instead of showing the low-level code how to use the C Data interface manually)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-15T14:41:20.927+0000",
                    "updated": "2021-11-15T14:41:20.927+0000",
                    "started": "2021-11-15T14:41:20.926+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "681540",
                    "issueId": "13411231"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411231/worklog/683349",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on pull request #11679:\nURL: https://github.com/apache/arrow/pull/11679#issuecomment-972924749\n\n\n   > > That's in practice what it's done by https://github.com/rpy2/rpy2-arrow\r\n   > \r\n   > We could then also show the example by using this rpy2-arrow package, similar to how reticulate is used for the integration the other way around? (instead of showing the low-level code how to use the C Data interface manually)\r\n   \r\n   @jorisvandenbossche done! I extended the documentation to show both ``rpy2-arrow`` and plain C Data\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-18T14:38:13.990+0000",
                    "updated": "2021-11-18T14:38:13.990+0000",
                    "started": "2021-11-18T14:38:13.990+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "683349",
                    "issueId": "13411231"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411231/worklog/684709",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11679:\nURL: https://github.com/apache/arrow/pull/11679#discussion_r754289538\n\n\n\n##########\nFile path: docs/source/python/integration.rst\n##########\n@@ -0,0 +1,39 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _integration:\n+\n+********************\n+PyArrow Integrations\n+********************\n+\n+Arrow is designed to be both a framework and an interchange format.\n+\n+Developers can use Arrow to exchange data between various\n+technologies and languages without incurring in any extra cost of\n+marshalling/unmarshalling the data. The arrow bindings and Arrow\n+native libraries on the various platforms will all understand Arrow data\n+natively wihout the need to decode it.\n+\n+This allows to easily integrate PyArrow with other languages and technologies.\n+\n+.. toctree::\n+    :maxdepth: 2\n+\n+    integration/python_r\n+    integration/extending\n+    integration/cuda\n\nReview comment:\n       The standard indentation for reST is 3 spaces, you should probably configure your editor for that.\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,312 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and R functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``R`` environment with\n+    ``arrow`` library correctly installed.\n+\n+Invoking R functions from Python\n+--------------------------------\n+\n+Suppose we have a simple R function receiving an Arrow Array to\n+add ``3`` to all its elements:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We could save such function in a ``addthree.R`` file so that we can\n+make it available for reuse.\n+\n+Once the ``addthree.R`` is created we can invoke any of its functions\n+from Python using the \n+`rpy2 <https://rpy2.github.io/doc/latest/html/index.html>`_ library which\n+enables a R runtime within the Python interpreter.\n+\n+``rpy2``\u00a0can be installed using ``pip`` like most python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2\n+\n+The most basic thing we can do with our ``addthree``\u00a0function is to\n+invoke it from Python with a number and see how it will return the result.\n+\n+To do so we can create an ``addthree.py`` file which uses ``rpy2`` to\n+import the ``addthree`` function from ``addthree.R``\u00a0file and invoke it:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+\n+    # Load the addthree.R file\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    # Get a reference to the addthree function\n+    addthree = robjects.r[\"addthree\"]\n+\n+    # Invoke the function\n+    r = addthree(3)\n+\n+    # Access the returned value\n+    value = r[0]\n+    print(value)\n+\n+Running the ``addthree.py``\u00a0file will show how our Python code is able\n+to access the ``R`` function and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py \n+    6.0\n+\n+If instead of passing around basic data types we want to pass around\n+Arrow Arrays, we can do so relying on the ``rpy2-arrow`` module which\n+implements rpy2 support for Arrow types.\n+\n+``rpy2``\u00a0can be installed through ``pip``:\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2-arrow\n+\n+``rpy2-arrow`` implements converters from pyarrow objects to r arrow objects,\n\nReview comment:\n       Capitalization: \"PyArrow\", \"R\", \"Arrow\". `arrow` and `pyarrow` should only be used when referring to the actual C++ (resp. Python) namespace.\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,312 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and R functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``R`` environment with\n+    ``arrow`` library correctly installed.\n+\n+Invoking R functions from Python\n+--------------------------------\n+\n+Suppose we have a simple R function receiving an Arrow Array to\n+add ``3`` to all its elements:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We could save such function in a ``addthree.R`` file so that we can\n+make it available for reuse.\n+\n+Once the ``addthree.R`` is created we can invoke any of its functions\n+from Python using the \n+`rpy2 <https://rpy2.github.io/doc/latest/html/index.html>`_ library which\n+enables a R runtime within the Python interpreter.\n+\n+``rpy2``\u00a0can be installed using ``pip`` like most python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2\n+\n+The most basic thing we can do with our ``addthree``\u00a0function is to\n+invoke it from Python with a number and see how it will return the result.\n+\n+To do so we can create an ``addthree.py`` file which uses ``rpy2`` to\n+import the ``addthree`` function from ``addthree.R``\u00a0file and invoke it:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+\n+    # Load the addthree.R file\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    # Get a reference to the addthree function\n+    addthree = robjects.r[\"addthree\"]\n+\n+    # Invoke the function\n+    r = addthree(3)\n+\n+    # Access the returned value\n+    value = r[0]\n+    print(value)\n+\n+Running the ``addthree.py``\u00a0file will show how our Python code is able\n+to access the ``R`` function and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py \n+    6.0\n+\n+If instead of passing around basic data types we want to pass around\n+Arrow Arrays, we can do so relying on the ``rpy2-arrow`` module which\n+implements rpy2 support for Arrow types.\n+\n+``rpy2``\u00a0can be installed through ``pip``:\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2-arrow\n+\n+``rpy2-arrow`` implements converters from pyarrow objects to r arrow objects,\n+this is done without occurring into any data copy cost as it relies on the\n+C Data interface.\n+\n+To pass to ``addthree`` a pyarrow array our ``addthree.py``\u00a0needs to be modified\n+to enable ``rpy2-arrow`` converters and then pass the pyarrow array:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+    from rpy2_arrow.pyarrow_rarrow import (rarrow_to_py_array,\n+                                           converter as arrowconverter)\n+    from rpy2.robjects.conversion import localconverter\n+\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    addthree = robjects.r[\"addthree\"]\n+\n+    import pyarrow\n+\n+    array = pyarrow.array((1, 2, 3))\n+\n+    #\u00a0Enable rpy2-arrow converter so that R can receive the array.\n+    with localconverter(arrowconverter):\n+        r_result = addthree(array)\n+\n+    #\u00a0The result of the R function will be an R Environment\n+    # we can convert back the Environment to a pyarrow Array\n+    # using the rarrow_to_py_array function\n+    py_result = rarrow_to_py_array(r_result)\n+    print(\"RESULT\", type(py_result), py_result)\n+\n+Running the newly modified ``addthree.py``\u00a0should now properly execute\n+the R function and print the resulting pyarrow Array:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py\n+    RESULT <class 'pyarrow.lib.DoubleArray'> [\n+      4,\n+      5,\n+      6\n+    ]\n+\n+.. note::\n+\n+    Even though we sent an ``Int64Array`` to R, we end up with a\n+    result as a ``DoubleArray``. That's due to the lack of native\n+    support for 64 bits numbers in R and thus its use of doubles\n+    to represent those.\n+\n+For additional information you can refer to\n+`rpy2 Documentation <https://rpy2.github.io/doc/latest/html/index.html>`_\n+and `rpy2-arrow Documentation <https://rpy2.github.io/rpy2-arrow/version/main/html/index.html>`_\n+\n+Invoking Python functions from R\n+--------------------------------\n+\n+Exposing Python functions to R can be done through the ``reticulate``\n+library. For example if we want to invoke :func:`pyarrow.compute.add` from\n+R on an Array created in R we can do so importing ``pyarrow`` in R\n+through ``reticulate``.\n+\n+A basic ``addthree.R`` script that invokes ``add`` to add ``3`` to\n+an R array would look like:\n+\n+.. code-block:: R\n+\n+    # Load arrow and reticulate libraries\n+    library(arrow)\n+    library(reticulate)\n+\n+    # Create a new array in R\n+    a <- Array$create(c(1, 2, 3))\n+\n+    # Make pyarrow.compute available to R\n+    pc <- import(\"pyarrow.compute\")\n+\n+    # Invoke pyarrow.compute.add with the array and 3\n+    # This will add 3 to all elements of the array and return a new Array\n+    result <- pc$add(a, 3)\n+\n+    # Print the result to confirm it's what we expect\n+    print(result)\n+\n+Invoking the ``addthree.R`` script will print the outcome of adding\n+``3`` to all the elements of the original ``Array$create(c(1, 2, 3))`` array:\n+\n+.. code-block:: bash\n+\n+    $ R --slave -f addthree.R \n+    Array\n+    <double>\n+    [\n+      4,\n+      5,\n+      6\n+    ]\n+\n+For additional information you can refer to\n+`Reticulate Documentation <https://rstudio.github.io/reticulate/>`_\n+\n+R to Python communication using C Data Interface\n+------------------------------------------------\n+\n+Both the solutions described in previous chapters use the Arrow C Data\n+interface under the hood.\n+\n+In case we want to extend the previous ``addthree`` example to switch\n+from using ``rpy2-arrow`` to using the plain C Data interface we can\n+do so by introducing some modifications to our codebase.\n+\n+To enable importing the Arrow Array from the C Data interface we have to\n+wrap our ``addthree`` function in a function that does the extra work\n+necessary to import an Arrow Array in R from the C Data interface.\n+\n+That work will be done by the ``addthree_cdata``\u00a0function which invokes the\n+``addthree`` function once the Array is imported.\n+\n+Our ``addthree.R``\u00a0will thus have both the ``addthree_cdata`` and the \n+``addthree`` functions:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree_cdata <- function(array_ptr_s, schema_ptr_s) {\n+        array_ptr <- as.numeric(array_ptr_s)\n+        schema_ptr <- as.numeric(schema_ptr_s)\n+\n+        a <- Array$import_from_c(array_ptr, schema_ptr)\n+\n+        return(addthree(a))\n+    }\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We can now provide to R the array and its schema from Python through the\n+``array_ptr_s`` and ``schema_ptr_s``\u00a0arguments so that R can build back\n+an ``Array`` from them and then invoke ``addthree`` with the array.\n+\n+Invoking ``addthree_cdata`` from Python involves building the Array we\n+want to pass to ``R``, exporting it to the C Data interface and then\n+passing the exported references to the ``R`` function.\n+\n+Our ``addthree.py`` will thus become:\n+\n+.. code-block:: python\n+\n+    # Get a reference to the addthree_cdata R function\n+    import rpy2.robjects as robjects\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+    addthree_cdata = robjects.r[\"addthree_cdata\"]\n+\n+    # Create the pyarrow array we want to pass to R\n+    import pyarrow\n+    array = pyarrow.array((1, 2, 3))\n+\n+    # Import the pyarrow module that provides access to the C Data interface\n+    from pyarrow.cffi import ffi as arrow_c\n+\n+    # Allocate structures where we will export the Array data \n+    # and the Array schema. They will be released when we exit the with block.\n+    with arrow_c.new(\"struct ArrowArray*\") as c_array, \\\n+         arrow_c.new(\"struct ArrowSchema*\") as c_schema:\n+        # Get the references to the C Data structures.\n+        c_array_ptr = int(arrow_c.cast(\"uintptr_t\", c_array))\n+        c_schema_ptr = int(arrow_c.cast(\"uintptr_t\", c_schema))\n+\n+        # Export the Array and its schema to the C Data structures.\n+        array._export_to_c(c_array_ptr)\n+        array.type._export_to_c(c_schema_ptr)\n+\n+        # Invoke the R addthree_cdata function passing the references\n+        # to the array and schema C Data structures. \n+        # Those references are passed as strings as R doesn't have\n+        # native support for 64bit integers, so the integers are\n+        # converted to their string representation for R to convert it back.\n+        r_result_array = addthree_cdata(str(c_array_ptr), str(c_schema_ptr))\n+\n+        # r_result will be an Environment variable that contains the\n+        # arrow Array built from R as the return value of addthree.\n+        # To make it available as a Python pyarrow array we need to export\n+        # it as a C Data structure invoking the Array$export_to_c R method\n+        r_result_array[\"export_to_c\"](float(c_array_ptr), float(c_schema_ptr))\n\nReview comment:\n       Ouch, why does this cast to `float`? Floats cannot represent all 64-bit numbers faithfully.\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,312 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and R functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``R`` environment with\n+    ``arrow`` library correctly installed.\n+\n+Invoking R functions from Python\n+--------------------------------\n+\n+Suppose we have a simple R function receiving an Arrow Array to\n+add ``3`` to all its elements:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We could save such function in a ``addthree.R`` file so that we can\n+make it available for reuse.\n+\n+Once the ``addthree.R`` is created we can invoke any of its functions\n+from Python using the \n+`rpy2 <https://rpy2.github.io/doc/latest/html/index.html>`_ library which\n+enables a R runtime within the Python interpreter.\n+\n+``rpy2``\u00a0can be installed using ``pip`` like most python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2\n+\n+The most basic thing we can do with our ``addthree``\u00a0function is to\n+invoke it from Python with a number and see how it will return the result.\n+\n+To do so we can create an ``addthree.py`` file which uses ``rpy2`` to\n+import the ``addthree`` function from ``addthree.R``\u00a0file and invoke it:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+\n+    # Load the addthree.R file\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    # Get a reference to the addthree function\n+    addthree = robjects.r[\"addthree\"]\n+\n+    # Invoke the function\n+    r = addthree(3)\n+\n+    # Access the returned value\n+    value = r[0]\n+    print(value)\n+\n+Running the ``addthree.py``\u00a0file will show how our Python code is able\n+to access the ``R`` function and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py \n+    6.0\n+\n+If instead of passing around basic data types we want to pass around\n+Arrow Arrays, we can do so relying on the ``rpy2-arrow`` module which\n+implements rpy2 support for Arrow types.\n+\n+``rpy2``\u00a0can be installed through ``pip``:\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2-arrow\n+\n+``rpy2-arrow`` implements converters from pyarrow objects to r arrow objects,\n+this is done without occurring into any data copy cost as it relies on the\n+C Data interface.\n+\n+To pass to ``addthree`` a pyarrow array our ``addthree.py``\u00a0needs to be modified\n+to enable ``rpy2-arrow`` converters and then pass the pyarrow array:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+    from rpy2_arrow.pyarrow_rarrow import (rarrow_to_py_array,\n+                                           converter as arrowconverter)\n+    from rpy2.robjects.conversion import localconverter\n+\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    addthree = robjects.r[\"addthree\"]\n+\n+    import pyarrow\n+\n+    array = pyarrow.array((1, 2, 3))\n+\n+    #\u00a0Enable rpy2-arrow converter so that R can receive the array.\n+    with localconverter(arrowconverter):\n+        r_result = addthree(array)\n+\n+    #\u00a0The result of the R function will be an R Environment\n+    # we can convert back the Environment to a pyarrow Array\n+    # using the rarrow_to_py_array function\n+    py_result = rarrow_to_py_array(r_result)\n+    print(\"RESULT\", type(py_result), py_result)\n+\n+Running the newly modified ``addthree.py``\u00a0should now properly execute\n+the R function and print the resulting pyarrow Array:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py\n+    RESULT <class 'pyarrow.lib.DoubleArray'> [\n+      4,\n+      5,\n+      6\n+    ]\n+\n+.. note::\n+\n+    Even though we sent an ``Int64Array`` to R, we end up with a\n+    result as a ``DoubleArray``. That's due to the lack of native\n+    support for 64 bits numbers in R and thus its use of doubles\n+    to represent those.\n+\n+For additional information you can refer to\n+`rpy2 Documentation <https://rpy2.github.io/doc/latest/html/index.html>`_\n+and `rpy2-arrow Documentation <https://rpy2.github.io/rpy2-arrow/version/main/html/index.html>`_\n+\n+Invoking Python functions from R\n+--------------------------------\n+\n+Exposing Python functions to R can be done through the ``reticulate``\n+library. For example if we want to invoke :func:`pyarrow.compute.add` from\n+R on an Array created in R we can do so importing ``pyarrow`` in R\n+through ``reticulate``.\n+\n+A basic ``addthree.R`` script that invokes ``add`` to add ``3`` to\n\nReview comment:\n       Do we want to expand on this here or should we just point to the existing docs [on the R side](https://arrow.apache.org/docs/r/articles/python.html#using)?\r\n   \r\n   cc @thisisnic  and @jonkeane \n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,312 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and R functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``R`` environment with\n+    ``arrow`` library correctly installed.\n+\n+Invoking R functions from Python\n+--------------------------------\n+\n+Suppose we have a simple R function receiving an Arrow Array to\n+add ``3`` to all its elements:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We could save such function in a ``addthree.R`` file so that we can\n+make it available for reuse.\n+\n+Once the ``addthree.R`` is created we can invoke any of its functions\n+from Python using the \n+`rpy2 <https://rpy2.github.io/doc/latest/html/index.html>`_ library which\n+enables a R runtime within the Python interpreter.\n+\n+``rpy2``\u00a0can be installed using ``pip`` like most python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2\n+\n+The most basic thing we can do with our ``addthree``\u00a0function is to\n+invoke it from Python with a number and see how it will return the result.\n+\n+To do so we can create an ``addthree.py`` file which uses ``rpy2`` to\n+import the ``addthree`` function from ``addthree.R``\u00a0file and invoke it:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+\n+    # Load the addthree.R file\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    # Get a reference to the addthree function\n+    addthree = robjects.r[\"addthree\"]\n+\n+    # Invoke the function\n+    r = addthree(3)\n+\n+    # Access the returned value\n+    value = r[0]\n+    print(value)\n+\n+Running the ``addthree.py``\u00a0file will show how our Python code is able\n+to access the ``R`` function and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py \n+    6.0\n+\n+If instead of passing around basic data types we want to pass around\n+Arrow Arrays, we can do so relying on the ``rpy2-arrow`` module which\n\nReview comment:\n       Give a link to the `rpy2-arrow` homepage?\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,312 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and R functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``R`` environment with\n+    ``arrow`` library correctly installed.\n+\n+Invoking R functions from Python\n+--------------------------------\n+\n+Suppose we have a simple R function receiving an Arrow Array to\n+add ``3`` to all its elements:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We could save such function in a ``addthree.R`` file so that we can\n+make it available for reuse.\n+\n+Once the ``addthree.R`` is created we can invoke any of its functions\n+from Python using the \n+`rpy2 <https://rpy2.github.io/doc/latest/html/index.html>`_ library which\n+enables a R runtime within the Python interpreter.\n+\n+``rpy2``\u00a0can be installed using ``pip`` like most python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2\n+\n+The most basic thing we can do with our ``addthree``\u00a0function is to\n+invoke it from Python with a number and see how it will return the result.\n+\n+To do so we can create an ``addthree.py`` file which uses ``rpy2`` to\n+import the ``addthree`` function from ``addthree.R``\u00a0file and invoke it:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+\n+    # Load the addthree.R file\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    # Get a reference to the addthree function\n+    addthree = robjects.r[\"addthree\"]\n+\n+    # Invoke the function\n+    r = addthree(3)\n+\n+    # Access the returned value\n+    value = r[0]\n+    print(value)\n+\n+Running the ``addthree.py``\u00a0file will show how our Python code is able\n+to access the ``R`` function and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py \n+    6.0\n+\n+If instead of passing around basic data types we want to pass around\n+Arrow Arrays, we can do so relying on the ``rpy2-arrow`` module which\n+implements rpy2 support for Arrow types.\n+\n+``rpy2``\u00a0can be installed through ``pip``:\n\nReview comment:\n       You probably mean \"rpy2-arrow\".\n\n##########\nFile path: docs/source/python/integration.rst\n##########\n@@ -0,0 +1,39 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _integration:\n+\n+********************\n+PyArrow Integrations\n+********************\n+\n+Arrow is designed to be both a framework and an interchange format.\n+\n+Developers can use Arrow to exchange data between various\n+technologies and languages without incurring in any extra cost of\n+marshalling/unmarshalling the data. The arrow bindings and Arrow\n\nReview comment:\n       Nit: \"Arrow\" capitalized.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-22T13:48:35.433+0000",
                    "updated": "2021-11-22T13:48:35.433+0000",
                    "started": "2021-11-22T13:48:35.433+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "684709",
                    "issueId": "13411231"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411231/worklog/685247",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #11679:\nURL: https://github.com/apache/arrow/pull/11679#discussion_r755105984\n\n\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,312 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and R functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``R`` environment with\n+    ``arrow`` library correctly installed.\n+\n+Invoking R functions from Python\n+--------------------------------\n+\n+Suppose we have a simple R function receiving an Arrow Array to\n+add ``3`` to all its elements:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We could save such function in a ``addthree.R`` file so that we can\n+make it available for reuse.\n+\n+Once the ``addthree.R`` is created we can invoke any of its functions\n+from Python using the \n+`rpy2 <https://rpy2.github.io/doc/latest/html/index.html>`_ library which\n+enables a R runtime within the Python interpreter.\n+\n+``rpy2``\u00a0can be installed using ``pip`` like most python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2\n+\n+The most basic thing we can do with our ``addthree``\u00a0function is to\n+invoke it from Python with a number and see how it will return the result.\n+\n+To do so we can create an ``addthree.py`` file which uses ``rpy2`` to\n+import the ``addthree`` function from ``addthree.R``\u00a0file and invoke it:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+\n+    # Load the addthree.R file\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    # Get a reference to the addthree function\n+    addthree = robjects.r[\"addthree\"]\n+\n+    # Invoke the function\n+    r = addthree(3)\n+\n+    # Access the returned value\n+    value = r[0]\n+    print(value)\n+\n+Running the ``addthree.py``\u00a0file will show how our Python code is able\n+to access the ``R`` function and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py \n+    6.0\n+\n+If instead of passing around basic data types we want to pass around\n+Arrow Arrays, we can do so relying on the ``rpy2-arrow`` module which\n+implements rpy2 support for Arrow types.\n+\n+``rpy2``\u00a0can be installed through ``pip``:\n\nReview comment:\n       :+1: fixed\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,312 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and R functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``R`` environment with\n+    ``arrow`` library correctly installed.\n+\n+Invoking R functions from Python\n+--------------------------------\n+\n+Suppose we have a simple R function receiving an Arrow Array to\n+add ``3`` to all its elements:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We could save such function in a ``addthree.R`` file so that we can\n+make it available for reuse.\n+\n+Once the ``addthree.R`` is created we can invoke any of its functions\n+from Python using the \n+`rpy2 <https://rpy2.github.io/doc/latest/html/index.html>`_ library which\n+enables a R runtime within the Python interpreter.\n+\n+``rpy2``\u00a0can be installed using ``pip`` like most python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2\n+\n+The most basic thing we can do with our ``addthree``\u00a0function is to\n+invoke it from Python with a number and see how it will return the result.\n+\n+To do so we can create an ``addthree.py`` file which uses ``rpy2`` to\n+import the ``addthree`` function from ``addthree.R``\u00a0file and invoke it:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+\n+    # Load the addthree.R file\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    # Get a reference to the addthree function\n+    addthree = robjects.r[\"addthree\"]\n+\n+    # Invoke the function\n+    r = addthree(3)\n+\n+    # Access the returned value\n+    value = r[0]\n+    print(value)\n+\n+Running the ``addthree.py``\u00a0file will show how our Python code is able\n+to access the ``R`` function and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py \n+    6.0\n+\n+If instead of passing around basic data types we want to pass around\n+Arrow Arrays, we can do so relying on the ``rpy2-arrow`` module which\n\nReview comment:\n       :+1:\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-23T13:08:57.108+0000",
                    "updated": "2021-11-23T13:08:57.108+0000",
                    "started": "2021-11-23T13:08:57.107+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685247",
                    "issueId": "13411231"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411231/worklog/685250",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #11679:\nURL: https://github.com/apache/arrow/pull/11679#discussion_r755112696\n\n\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,312 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and R functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``R`` environment with\n+    ``arrow`` library correctly installed.\n+\n+Invoking R functions from Python\n+--------------------------------\n+\n+Suppose we have a simple R function receiving an Arrow Array to\n+add ``3`` to all its elements:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We could save such function in a ``addthree.R`` file so that we can\n+make it available for reuse.\n+\n+Once the ``addthree.R`` is created we can invoke any of its functions\n+from Python using the \n+`rpy2 <https://rpy2.github.io/doc/latest/html/index.html>`_ library which\n+enables a R runtime within the Python interpreter.\n+\n+``rpy2``\u00a0can be installed using ``pip`` like most python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2\n+\n+The most basic thing we can do with our ``addthree``\u00a0function is to\n+invoke it from Python with a number and see how it will return the result.\n+\n+To do so we can create an ``addthree.py`` file which uses ``rpy2`` to\n+import the ``addthree`` function from ``addthree.R``\u00a0file and invoke it:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+\n+    # Load the addthree.R file\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    # Get a reference to the addthree function\n+    addthree = robjects.r[\"addthree\"]\n+\n+    # Invoke the function\n+    r = addthree(3)\n+\n+    # Access the returned value\n+    value = r[0]\n+    print(value)\n+\n+Running the ``addthree.py``\u00a0file will show how our Python code is able\n+to access the ``R`` function and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py \n+    6.0\n+\n+If instead of passing around basic data types we want to pass around\n+Arrow Arrays, we can do so relying on the ``rpy2-arrow`` module which\n+implements rpy2 support for Arrow types.\n+\n+``rpy2``\u00a0can be installed through ``pip``:\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2-arrow\n+\n+``rpy2-arrow`` implements converters from pyarrow objects to r arrow objects,\n+this is done without occurring into any data copy cost as it relies on the\n+C Data interface.\n+\n+To pass to ``addthree`` a pyarrow array our ``addthree.py``\u00a0needs to be modified\n+to enable ``rpy2-arrow`` converters and then pass the pyarrow array:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+    from rpy2_arrow.pyarrow_rarrow import (rarrow_to_py_array,\n+                                           converter as arrowconverter)\n+    from rpy2.robjects.conversion import localconverter\n+\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    addthree = robjects.r[\"addthree\"]\n+\n+    import pyarrow\n+\n+    array = pyarrow.array((1, 2, 3))\n+\n+    #\u00a0Enable rpy2-arrow converter so that R can receive the array.\n+    with localconverter(arrowconverter):\n+        r_result = addthree(array)\n+\n+    #\u00a0The result of the R function will be an R Environment\n+    # we can convert back the Environment to a pyarrow Array\n+    # using the rarrow_to_py_array function\n+    py_result = rarrow_to_py_array(r_result)\n+    print(\"RESULT\", type(py_result), py_result)\n+\n+Running the newly modified ``addthree.py``\u00a0should now properly execute\n+the R function and print the resulting pyarrow Array:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py\n+    RESULT <class 'pyarrow.lib.DoubleArray'> [\n+      4,\n+      5,\n+      6\n+    ]\n+\n+.. note::\n+\n+    Even though we sent an ``Int64Array`` to R, we end up with a\n+    result as a ``DoubleArray``. That's due to the lack of native\n+    support for 64 bits numbers in R and thus its use of doubles\n+    to represent those.\n+\n+For additional information you can refer to\n+`rpy2 Documentation <https://rpy2.github.io/doc/latest/html/index.html>`_\n+and `rpy2-arrow Documentation <https://rpy2.github.io/rpy2-arrow/version/main/html/index.html>`_\n+\n+Invoking Python functions from R\n+--------------------------------\n+\n+Exposing Python functions to R can be done through the ``reticulate``\n+library. For example if we want to invoke :func:`pyarrow.compute.add` from\n+R on an Array created in R we can do so importing ``pyarrow`` in R\n+through ``reticulate``.\n+\n+A basic ``addthree.R`` script that invokes ``add`` to add ``3`` to\n+an R array would look like:\n+\n+.. code-block:: R\n+\n+    # Load arrow and reticulate libraries\n+    library(arrow)\n+    library(reticulate)\n+\n+    # Create a new array in R\n+    a <- Array$create(c(1, 2, 3))\n+\n+    # Make pyarrow.compute available to R\n+    pc <- import(\"pyarrow.compute\")\n+\n+    # Invoke pyarrow.compute.add with the array and 3\n+    # This will add 3 to all elements of the array and return a new Array\n+    result <- pc$add(a, 3)\n+\n+    # Print the result to confirm it's what we expect\n+    print(result)\n+\n+Invoking the ``addthree.R`` script will print the outcome of adding\n+``3`` to all the elements of the original ``Array$create(c(1, 2, 3))`` array:\n+\n+.. code-block:: bash\n+\n+    $ R --slave -f addthree.R \n+    Array\n+    <double>\n+    [\n+      4,\n+      5,\n+      6\n+    ]\n+\n+For additional information you can refer to\n+`Reticulate Documentation <https://rstudio.github.io/reticulate/>`_\n+\n+R to Python communication using C Data Interface\n+------------------------------------------------\n+\n+Both the solutions described in previous chapters use the Arrow C Data\n+interface under the hood.\n+\n+In case we want to extend the previous ``addthree`` example to switch\n+from using ``rpy2-arrow`` to using the plain C Data interface we can\n+do so by introducing some modifications to our codebase.\n+\n+To enable importing the Arrow Array from the C Data interface we have to\n+wrap our ``addthree`` function in a function that does the extra work\n+necessary to import an Arrow Array in R from the C Data interface.\n+\n+That work will be done by the ``addthree_cdata``\u00a0function which invokes the\n+``addthree`` function once the Array is imported.\n+\n+Our ``addthree.R``\u00a0will thus have both the ``addthree_cdata`` and the \n+``addthree`` functions:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree_cdata <- function(array_ptr_s, schema_ptr_s) {\n+        array_ptr <- as.numeric(array_ptr_s)\n+        schema_ptr <- as.numeric(schema_ptr_s)\n+\n+        a <- Array$import_from_c(array_ptr, schema_ptr)\n+\n+        return(addthree(a))\n+    }\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We can now provide to R the array and its schema from Python through the\n+``array_ptr_s`` and ``schema_ptr_s``\u00a0arguments so that R can build back\n+an ``Array`` from them and then invoke ``addthree`` with the array.\n+\n+Invoking ``addthree_cdata`` from Python involves building the Array we\n+want to pass to ``R``, exporting it to the C Data interface and then\n+passing the exported references to the ``R`` function.\n+\n+Our ``addthree.py`` will thus become:\n+\n+.. code-block:: python\n+\n+    # Get a reference to the addthree_cdata R function\n+    import rpy2.robjects as robjects\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+    addthree_cdata = robjects.r[\"addthree_cdata\"]\n+\n+    # Create the pyarrow array we want to pass to R\n+    import pyarrow\n+    array = pyarrow.array((1, 2, 3))\n+\n+    # Import the pyarrow module that provides access to the C Data interface\n+    from pyarrow.cffi import ffi as arrow_c\n+\n+    # Allocate structures where we will export the Array data \n+    # and the Array schema. They will be released when we exit the with block.\n+    with arrow_c.new(\"struct ArrowArray*\") as c_array, \\\n+         arrow_c.new(\"struct ArrowSchema*\") as c_schema:\n+        # Get the references to the C Data structures.\n+        c_array_ptr = int(arrow_c.cast(\"uintptr_t\", c_array))\n+        c_schema_ptr = int(arrow_c.cast(\"uintptr_t\", c_schema))\n+\n+        # Export the Array and its schema to the C Data structures.\n+        array._export_to_c(c_array_ptr)\n+        array.type._export_to_c(c_schema_ptr)\n+\n+        # Invoke the R addthree_cdata function passing the references\n+        # to the array and schema C Data structures. \n+        # Those references are passed as strings as R doesn't have\n+        # native support for 64bit integers, so the integers are\n+        # converted to their string representation for R to convert it back.\n+        r_result_array = addthree_cdata(str(c_array_ptr), str(c_schema_ptr))\n+\n+        # r_result will be an Environment variable that contains the\n+        # arrow Array built from R as the return value of addthree.\n+        # To make it available as a Python pyarrow array we need to export\n+        # it as a C Data structure invoking the Array$export_to_c R method\n+        r_result_array[\"export_to_c\"](float(c_array_ptr), float(c_schema_ptr))\n\nReview comment:\n       That's sadly a side effect of interfacing to R. Integers in R are 32-bits and thus if you try to pass around the pointers as integers they will overflow. You get a `integer 140411646274592 does not fit '32-bit int'` kind of error.\r\n   \r\n   For the `addthree_cdata` function (as it was implemented by myself) I passed the pointers as strings, so they would represent the exact value, but for `Array$export_to_c` as it's a R function expecting a number I couldn't provide a string, I had to pass a `REAL` as expected by the function. Thus I had to go for a `float` to have `rpy2` convert it to a `REAL`.\r\n   \r\n   I guess an alternative might be to get a reference to the `as.numeric` R function and invoke `as.numeric(str(c_array_ptr))` that would force the conversion to an R numeric from the string in R itself so we would avoid going through a Python float.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-23T13:17:14.913+0000",
                    "updated": "2021-11-23T13:17:14.913+0000",
                    "started": "2021-11-23T13:17:14.913+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685250",
                    "issueId": "13411231"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411231/worklog/685254",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #11679:\nURL: https://github.com/apache/arrow/pull/11679#discussion_r755115491\n\n\n\n##########\nFile path: docs/source/python/integration.rst\n##########\n@@ -0,0 +1,39 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _integration:\n+\n+********************\n+PyArrow Integrations\n+********************\n+\n+Arrow is designed to be both a framework and an interchange format.\n+\n+Developers can use Arrow to exchange data between various\n+technologies and languages without incurring in any extra cost of\n+marshalling/unmarshalling the data. The arrow bindings and Arrow\n\nReview comment:\n       :+1:\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-23T13:20:43.428+0000",
                    "updated": "2021-11-23T13:20:43.428+0000",
                    "started": "2021-11-23T13:20:43.428+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685254",
                    "issueId": "13411231"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411231/worklog/685256",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #11679:\nURL: https://github.com/apache/arrow/pull/11679#discussion_r755116770\n\n\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,312 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and R functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``R`` environment with\n+    ``arrow`` library correctly installed.\n+\n+Invoking R functions from Python\n+--------------------------------\n+\n+Suppose we have a simple R function receiving an Arrow Array to\n+add ``3`` to all its elements:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We could save such function in a ``addthree.R`` file so that we can\n+make it available for reuse.\n+\n+Once the ``addthree.R`` is created we can invoke any of its functions\n+from Python using the \n+`rpy2 <https://rpy2.github.io/doc/latest/html/index.html>`_ library which\n+enables a R runtime within the Python interpreter.\n+\n+``rpy2``\u00a0can be installed using ``pip`` like most python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2\n+\n+The most basic thing we can do with our ``addthree``\u00a0function is to\n+invoke it from Python with a number and see how it will return the result.\n+\n+To do so we can create an ``addthree.py`` file which uses ``rpy2`` to\n+import the ``addthree`` function from ``addthree.R``\u00a0file and invoke it:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+\n+    # Load the addthree.R file\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    # Get a reference to the addthree function\n+    addthree = robjects.r[\"addthree\"]\n+\n+    # Invoke the function\n+    r = addthree(3)\n+\n+    # Access the returned value\n+    value = r[0]\n+    print(value)\n+\n+Running the ``addthree.py``\u00a0file will show how our Python code is able\n+to access the ``R`` function and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py \n+    6.0\n+\n+If instead of passing around basic data types we want to pass around\n+Arrow Arrays, we can do so relying on the ``rpy2-arrow`` module which\n+implements rpy2 support for Arrow types.\n+\n+``rpy2``\u00a0can be installed through ``pip``:\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2-arrow\n+\n+``rpy2-arrow`` implements converters from pyarrow objects to r arrow objects,\n\nReview comment:\n       :+1:\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-23T13:22:19.261+0000",
                    "updated": "2021-11-23T13:22:19.261+0000",
                    "started": "2021-11-23T13:22:19.261+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685256",
                    "issueId": "13411231"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411231/worklog/685260",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #11679:\nURL: https://github.com/apache/arrow/pull/11679#discussion_r755122360\n\n\n\n##########\nFile path: docs/source/python/integration.rst\n##########\n@@ -0,0 +1,39 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _integration:\n+\n+********************\n+PyArrow Integrations\n+********************\n+\n+Arrow is designed to be both a framework and an interchange format.\n+\n+Developers can use Arrow to exchange data between various\n+technologies and languages without incurring in any extra cost of\n+marshalling/unmarshalling the data. The arrow bindings and Arrow\n+native libraries on the various platforms will all understand Arrow data\n+natively wihout the need to decode it.\n+\n+This allows to easily integrate PyArrow with other languages and technologies.\n+\n+.. toctree::\n+    :maxdepth: 2\n+\n+    integration/python_r\n+    integration/extending\n+    integration/cuda\n\nReview comment:\n       reindented\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-23T13:29:03.249+0000",
                    "updated": "2021-11-23T13:29:03.249+0000",
                    "started": "2021-11-23T13:29:03.248+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685260",
                    "issueId": "13411231"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411231/worklog/685261",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11679:\nURL: https://github.com/apache/arrow/pull/11679#discussion_r755122630\n\n\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,312 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and R functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``R`` environment with\n+    ``arrow`` library correctly installed.\n+\n+Invoking R functions from Python\n+--------------------------------\n+\n+Suppose we have a simple R function receiving an Arrow Array to\n+add ``3`` to all its elements:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We could save such function in a ``addthree.R`` file so that we can\n+make it available for reuse.\n+\n+Once the ``addthree.R`` is created we can invoke any of its functions\n+from Python using the \n+`rpy2 <https://rpy2.github.io/doc/latest/html/index.html>`_ library which\n+enables a R runtime within the Python interpreter.\n+\n+``rpy2``\u00a0can be installed using ``pip`` like most python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2\n+\n+The most basic thing we can do with our ``addthree``\u00a0function is to\n+invoke it from Python with a number and see how it will return the result.\n+\n+To do so we can create an ``addthree.py`` file which uses ``rpy2`` to\n+import the ``addthree`` function from ``addthree.R``\u00a0file and invoke it:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+\n+    # Load the addthree.R file\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    # Get a reference to the addthree function\n+    addthree = robjects.r[\"addthree\"]\n+\n+    # Invoke the function\n+    r = addthree(3)\n+\n+    # Access the returned value\n+    value = r[0]\n+    print(value)\n+\n+Running the ``addthree.py``\u00a0file will show how our Python code is able\n+to access the ``R`` function and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py \n+    6.0\n+\n+If instead of passing around basic data types we want to pass around\n+Arrow Arrays, we can do so relying on the ``rpy2-arrow`` module which\n+implements rpy2 support for Arrow types.\n+\n+``rpy2``\u00a0can be installed through ``pip``:\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2-arrow\n+\n+``rpy2-arrow`` implements converters from pyarrow objects to r arrow objects,\n+this is done without occurring into any data copy cost as it relies on the\n+C Data interface.\n+\n+To pass to ``addthree`` a pyarrow array our ``addthree.py``\u00a0needs to be modified\n+to enable ``rpy2-arrow`` converters and then pass the pyarrow array:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+    from rpy2_arrow.pyarrow_rarrow import (rarrow_to_py_array,\n+                                           converter as arrowconverter)\n+    from rpy2.robjects.conversion import localconverter\n+\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    addthree = robjects.r[\"addthree\"]\n+\n+    import pyarrow\n+\n+    array = pyarrow.array((1, 2, 3))\n+\n+    #\u00a0Enable rpy2-arrow converter so that R can receive the array.\n+    with localconverter(arrowconverter):\n+        r_result = addthree(array)\n+\n+    #\u00a0The result of the R function will be an R Environment\n+    # we can convert back the Environment to a pyarrow Array\n+    # using the rarrow_to_py_array function\n+    py_result = rarrow_to_py_array(r_result)\n+    print(\"RESULT\", type(py_result), py_result)\n+\n+Running the newly modified ``addthree.py``\u00a0should now properly execute\n+the R function and print the resulting pyarrow Array:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py\n+    RESULT <class 'pyarrow.lib.DoubleArray'> [\n+      4,\n+      5,\n+      6\n+    ]\n+\n+.. note::\n+\n+    Even though we sent an ``Int64Array`` to R, we end up with a\n+    result as a ``DoubleArray``. That's due to the lack of native\n+    support for 64 bits numbers in R and thus its use of doubles\n+    to represent those.\n+\n+For additional information you can refer to\n+`rpy2 Documentation <https://rpy2.github.io/doc/latest/html/index.html>`_\n+and `rpy2-arrow Documentation <https://rpy2.github.io/rpy2-arrow/version/main/html/index.html>`_\n+\n+Invoking Python functions from R\n+--------------------------------\n+\n+Exposing Python functions to R can be done through the ``reticulate``\n+library. For example if we want to invoke :func:`pyarrow.compute.add` from\n+R on an Array created in R we can do so importing ``pyarrow`` in R\n+through ``reticulate``.\n+\n+A basic ``addthree.R`` script that invokes ``add`` to add ``3`` to\n+an R array would look like:\n+\n+.. code-block:: R\n+\n+    # Load arrow and reticulate libraries\n+    library(arrow)\n+    library(reticulate)\n+\n+    # Create a new array in R\n+    a <- Array$create(c(1, 2, 3))\n+\n+    # Make pyarrow.compute available to R\n+    pc <- import(\"pyarrow.compute\")\n+\n+    # Invoke pyarrow.compute.add with the array and 3\n+    # This will add 3 to all elements of the array and return a new Array\n+    result <- pc$add(a, 3)\n+\n+    # Print the result to confirm it's what we expect\n+    print(result)\n+\n+Invoking the ``addthree.R`` script will print the outcome of adding\n+``3`` to all the elements of the original ``Array$create(c(1, 2, 3))`` array:\n+\n+.. code-block:: bash\n+\n+    $ R --slave -f addthree.R \n+    Array\n+    <double>\n+    [\n+      4,\n+      5,\n+      6\n+    ]\n+\n+For additional information you can refer to\n+`Reticulate Documentation <https://rstudio.github.io/reticulate/>`_\n+\n+R to Python communication using C Data Interface\n+------------------------------------------------\n+\n+Both the solutions described in previous chapters use the Arrow C Data\n+interface under the hood.\n+\n+In case we want to extend the previous ``addthree`` example to switch\n+from using ``rpy2-arrow`` to using the plain C Data interface we can\n+do so by introducing some modifications to our codebase.\n+\n+To enable importing the Arrow Array from the C Data interface we have to\n+wrap our ``addthree`` function in a function that does the extra work\n+necessary to import an Arrow Array in R from the C Data interface.\n+\n+That work will be done by the ``addthree_cdata``\u00a0function which invokes the\n+``addthree`` function once the Array is imported.\n+\n+Our ``addthree.R``\u00a0will thus have both the ``addthree_cdata`` and the \n+``addthree`` functions:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree_cdata <- function(array_ptr_s, schema_ptr_s) {\n+        array_ptr <- as.numeric(array_ptr_s)\n+        schema_ptr <- as.numeric(schema_ptr_s)\n+\n+        a <- Array$import_from_c(array_ptr, schema_ptr)\n+\n+        return(addthree(a))\n+    }\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We can now provide to R the array and its schema from Python through the\n+``array_ptr_s`` and ``schema_ptr_s``\u00a0arguments so that R can build back\n+an ``Array`` from them and then invoke ``addthree`` with the array.\n+\n+Invoking ``addthree_cdata`` from Python involves building the Array we\n+want to pass to ``R``, exporting it to the C Data interface and then\n+passing the exported references to the ``R`` function.\n+\n+Our ``addthree.py`` will thus become:\n+\n+.. code-block:: python\n+\n+    # Get a reference to the addthree_cdata R function\n+    import rpy2.robjects as robjects\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+    addthree_cdata = robjects.r[\"addthree_cdata\"]\n+\n+    # Create the pyarrow array we want to pass to R\n+    import pyarrow\n+    array = pyarrow.array((1, 2, 3))\n+\n+    # Import the pyarrow module that provides access to the C Data interface\n+    from pyarrow.cffi import ffi as arrow_c\n+\n+    # Allocate structures where we will export the Array data \n+    # and the Array schema. They will be released when we exit the with block.\n+    with arrow_c.new(\"struct ArrowArray*\") as c_array, \\\n+         arrow_c.new(\"struct ArrowSchema*\") as c_schema:\n+        # Get the references to the C Data structures.\n+        c_array_ptr = int(arrow_c.cast(\"uintptr_t\", c_array))\n+        c_schema_ptr = int(arrow_c.cast(\"uintptr_t\", c_schema))\n+\n+        # Export the Array and its schema to the C Data structures.\n+        array._export_to_c(c_array_ptr)\n+        array.type._export_to_c(c_schema_ptr)\n+\n+        # Invoke the R addthree_cdata function passing the references\n+        # to the array and schema C Data structures. \n+        # Those references are passed as strings as R doesn't have\n+        # native support for 64bit integers, so the integers are\n+        # converted to their string representation for R to convert it back.\n+        r_result_array = addthree_cdata(str(c_array_ptr), str(c_schema_ptr))\n+\n+        # r_result will be an Environment variable that contains the\n+        # arrow Array built from R as the return value of addthree.\n+        # To make it available as a Python pyarrow array we need to export\n+        # it as a C Data structure invoking the Array$export_to_c R method\n+        r_result_array[\"export_to_c\"](float(c_array_ptr), float(c_schema_ptr))\n\nReview comment:\n       What does it change to call `as.numeric`? You would still get a floating-point number with not enough precision, right?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-23T13:29:17.033+0000",
                    "updated": "2021-11-23T13:29:17.033+0000",
                    "started": "2021-11-23T13:29:17.032+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685261",
                    "issueId": "13411231"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411231/worklog/685262",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #11679:\nURL: https://github.com/apache/arrow/pull/11679#discussion_r755122720\n\n\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,312 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and R functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``R`` environment with\n+    ``arrow`` library correctly installed.\n+\n+Invoking R functions from Python\n+--------------------------------\n+\n+Suppose we have a simple R function receiving an Arrow Array to\n+add ``3`` to all its elements:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We could save such function in a ``addthree.R`` file so that we can\n+make it available for reuse.\n+\n+Once the ``addthree.R`` is created we can invoke any of its functions\n+from Python using the \n+`rpy2 <https://rpy2.github.io/doc/latest/html/index.html>`_ library which\n+enables a R runtime within the Python interpreter.\n+\n+``rpy2``\u00a0can be installed using ``pip`` like most python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2\n+\n+The most basic thing we can do with our ``addthree``\u00a0function is to\n+invoke it from Python with a number and see how it will return the result.\n+\n+To do so we can create an ``addthree.py`` file which uses ``rpy2`` to\n+import the ``addthree`` function from ``addthree.R``\u00a0file and invoke it:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+\n+    # Load the addthree.R file\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    # Get a reference to the addthree function\n+    addthree = robjects.r[\"addthree\"]\n+\n+    # Invoke the function\n+    r = addthree(3)\n+\n+    # Access the returned value\n+    value = r[0]\n+    print(value)\n+\n+Running the ``addthree.py``\u00a0file will show how our Python code is able\n+to access the ``R`` function and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py \n+    6.0\n+\n+If instead of passing around basic data types we want to pass around\n+Arrow Arrays, we can do so relying on the ``rpy2-arrow`` module which\n+implements rpy2 support for Arrow types.\n+\n+``rpy2``\u00a0can be installed through ``pip``:\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2-arrow\n+\n+``rpy2-arrow`` implements converters from pyarrow objects to r arrow objects,\n+this is done without occurring into any data copy cost as it relies on the\n+C Data interface.\n+\n+To pass to ``addthree`` a pyarrow array our ``addthree.py``\u00a0needs to be modified\n+to enable ``rpy2-arrow`` converters and then pass the pyarrow array:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+    from rpy2_arrow.pyarrow_rarrow import (rarrow_to_py_array,\n+                                           converter as arrowconverter)\n+    from rpy2.robjects.conversion import localconverter\n+\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    addthree = robjects.r[\"addthree\"]\n+\n+    import pyarrow\n+\n+    array = pyarrow.array((1, 2, 3))\n+\n+    #\u00a0Enable rpy2-arrow converter so that R can receive the array.\n+    with localconverter(arrowconverter):\n+        r_result = addthree(array)\n+\n+    #\u00a0The result of the R function will be an R Environment\n+    # we can convert back the Environment to a pyarrow Array\n+    # using the rarrow_to_py_array function\n+    py_result = rarrow_to_py_array(r_result)\n+    print(\"RESULT\", type(py_result), py_result)\n+\n+Running the newly modified ``addthree.py``\u00a0should now properly execute\n+the R function and print the resulting pyarrow Array:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py\n+    RESULT <class 'pyarrow.lib.DoubleArray'> [\n+      4,\n+      5,\n+      6\n+    ]\n+\n+.. note::\n+\n+    Even though we sent an ``Int64Array`` to R, we end up with a\n+    result as a ``DoubleArray``. That's due to the lack of native\n+    support for 64 bits numbers in R and thus its use of doubles\n+    to represent those.\n+\n+For additional information you can refer to\n+`rpy2 Documentation <https://rpy2.github.io/doc/latest/html/index.html>`_\n+and `rpy2-arrow Documentation <https://rpy2.github.io/rpy2-arrow/version/main/html/index.html>`_\n+\n+Invoking Python functions from R\n+--------------------------------\n+\n+Exposing Python functions to R can be done through the ``reticulate``\n+library. For example if we want to invoke :func:`pyarrow.compute.add` from\n+R on an Array created in R we can do so importing ``pyarrow`` in R\n+through ``reticulate``.\n+\n+A basic ``addthree.R`` script that invokes ``add`` to add ``3`` to\n+an R array would look like:\n+\n+.. code-block:: R\n+\n+    # Load arrow and reticulate libraries\n+    library(arrow)\n+    library(reticulate)\n+\n+    # Create a new array in R\n+    a <- Array$create(c(1, 2, 3))\n+\n+    # Make pyarrow.compute available to R\n+    pc <- import(\"pyarrow.compute\")\n+\n+    # Invoke pyarrow.compute.add with the array and 3\n+    # This will add 3 to all elements of the array and return a new Array\n+    result <- pc$add(a, 3)\n+\n+    # Print the result to confirm it's what we expect\n+    print(result)\n+\n+Invoking the ``addthree.R`` script will print the outcome of adding\n+``3`` to all the elements of the original ``Array$create(c(1, 2, 3))`` array:\n+\n+.. code-block:: bash\n+\n+    $ R --slave -f addthree.R \n+    Array\n+    <double>\n+    [\n+      4,\n+      5,\n+      6\n+    ]\n+\n+For additional information you can refer to\n+`Reticulate Documentation <https://rstudio.github.io/reticulate/>`_\n+\n+R to Python communication using C Data Interface\n+------------------------------------------------\n+\n+Both the solutions described in previous chapters use the Arrow C Data\n+interface under the hood.\n+\n+In case we want to extend the previous ``addthree`` example to switch\n+from using ``rpy2-arrow`` to using the plain C Data interface we can\n+do so by introducing some modifications to our codebase.\n+\n+To enable importing the Arrow Array from the C Data interface we have to\n+wrap our ``addthree`` function in a function that does the extra work\n+necessary to import an Arrow Array in R from the C Data interface.\n+\n+That work will be done by the ``addthree_cdata``\u00a0function which invokes the\n+``addthree`` function once the Array is imported.\n+\n+Our ``addthree.R``\u00a0will thus have both the ``addthree_cdata`` and the \n+``addthree`` functions:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree_cdata <- function(array_ptr_s, schema_ptr_s) {\n+        array_ptr <- as.numeric(array_ptr_s)\n+        schema_ptr <- as.numeric(schema_ptr_s)\n+\n+        a <- Array$import_from_c(array_ptr, schema_ptr)\n+\n+        return(addthree(a))\n+    }\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We can now provide to R the array and its schema from Python through the\n+``array_ptr_s`` and ``schema_ptr_s``\u00a0arguments so that R can build back\n+an ``Array`` from them and then invoke ``addthree`` with the array.\n+\n+Invoking ``addthree_cdata`` from Python involves building the Array we\n+want to pass to ``R``, exporting it to the C Data interface and then\n+passing the exported references to the ``R`` function.\n+\n+Our ``addthree.py`` will thus become:\n+\n+.. code-block:: python\n+\n+    # Get a reference to the addthree_cdata R function\n+    import rpy2.robjects as robjects\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+    addthree_cdata = robjects.r[\"addthree_cdata\"]\n+\n+    # Create the pyarrow array we want to pass to R\n+    import pyarrow\n+    array = pyarrow.array((1, 2, 3))\n+\n+    # Import the pyarrow module that provides access to the C Data interface\n+    from pyarrow.cffi import ffi as arrow_c\n+\n+    # Allocate structures where we will export the Array data \n+    # and the Array schema. They will be released when we exit the with block.\n+    with arrow_c.new(\"struct ArrowArray*\") as c_array, \\\n+         arrow_c.new(\"struct ArrowSchema*\") as c_schema:\n+        # Get the references to the C Data structures.\n+        c_array_ptr = int(arrow_c.cast(\"uintptr_t\", c_array))\n+        c_schema_ptr = int(arrow_c.cast(\"uintptr_t\", c_schema))\n+\n+        # Export the Array and its schema to the C Data structures.\n+        array._export_to_c(c_array_ptr)\n+        array.type._export_to_c(c_schema_ptr)\n+\n+        # Invoke the R addthree_cdata function passing the references\n+        # to the array and schema C Data structures. \n+        # Those references are passed as strings as R doesn't have\n+        # native support for 64bit integers, so the integers are\n+        # converted to their string representation for R to convert it back.\n+        r_result_array = addthree_cdata(str(c_array_ptr), str(c_schema_ptr))\n+\n+        # r_result will be an Environment variable that contains the\n+        # arrow Array built from R as the return value of addthree.\n+        # To make it available as a Python pyarrow array we need to export\n+        # it as a C Data structure invoking the Array$export_to_c R method\n+        r_result_array[\"export_to_c\"](float(c_array_ptr), float(c_schema_ptr))\n\nReview comment:\n       Changed the example to use `as.numeric` instead of `float`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-23T13:29:30.034+0000",
                    "updated": "2021-11-23T13:29:30.034+0000",
                    "started": "2021-11-23T13:29:30.033+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685262",
                    "issueId": "13411231"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411231/worklog/685299",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #11679:\nURL: https://github.com/apache/arrow/pull/11679#discussion_r755178800\n\n\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,312 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and R functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``R`` environment with\n+    ``arrow`` library correctly installed.\n+\n+Invoking R functions from Python\n+--------------------------------\n+\n+Suppose we have a simple R function receiving an Arrow Array to\n+add ``3`` to all its elements:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We could save such function in a ``addthree.R`` file so that we can\n+make it available for reuse.\n+\n+Once the ``addthree.R`` is created we can invoke any of its functions\n+from Python using the \n+`rpy2 <https://rpy2.github.io/doc/latest/html/index.html>`_ library which\n+enables a R runtime within the Python interpreter.\n+\n+``rpy2``\u00a0can be installed using ``pip`` like most python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2\n+\n+The most basic thing we can do with our ``addthree``\u00a0function is to\n+invoke it from Python with a number and see how it will return the result.\n+\n+To do so we can create an ``addthree.py`` file which uses ``rpy2`` to\n+import the ``addthree`` function from ``addthree.R``\u00a0file and invoke it:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+\n+    # Load the addthree.R file\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    # Get a reference to the addthree function\n+    addthree = robjects.r[\"addthree\"]\n+\n+    # Invoke the function\n+    r = addthree(3)\n+\n+    # Access the returned value\n+    value = r[0]\n+    print(value)\n+\n+Running the ``addthree.py``\u00a0file will show how our Python code is able\n+to access the ``R`` function and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py \n+    6.0\n+\n+If instead of passing around basic data types we want to pass around\n+Arrow Arrays, we can do so relying on the ``rpy2-arrow`` module which\n+implements rpy2 support for Arrow types.\n+\n+``rpy2``\u00a0can be installed through ``pip``:\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2-arrow\n+\n+``rpy2-arrow`` implements converters from pyarrow objects to r arrow objects,\n+this is done without occurring into any data copy cost as it relies on the\n+C Data interface.\n+\n+To pass to ``addthree`` a pyarrow array our ``addthree.py``\u00a0needs to be modified\n+to enable ``rpy2-arrow`` converters and then pass the pyarrow array:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+    from rpy2_arrow.pyarrow_rarrow import (rarrow_to_py_array,\n+                                           converter as arrowconverter)\n+    from rpy2.robjects.conversion import localconverter\n+\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    addthree = robjects.r[\"addthree\"]\n+\n+    import pyarrow\n+\n+    array = pyarrow.array((1, 2, 3))\n+\n+    #\u00a0Enable rpy2-arrow converter so that R can receive the array.\n+    with localconverter(arrowconverter):\n+        r_result = addthree(array)\n+\n+    #\u00a0The result of the R function will be an R Environment\n+    # we can convert back the Environment to a pyarrow Array\n+    # using the rarrow_to_py_array function\n+    py_result = rarrow_to_py_array(r_result)\n+    print(\"RESULT\", type(py_result), py_result)\n+\n+Running the newly modified ``addthree.py``\u00a0should now properly execute\n+the R function and print the resulting pyarrow Array:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py\n+    RESULT <class 'pyarrow.lib.DoubleArray'> [\n+      4,\n+      5,\n+      6\n+    ]\n+\n+.. note::\n+\n+    Even though we sent an ``Int64Array`` to R, we end up with a\n+    result as a ``DoubleArray``. That's due to the lack of native\n+    support for 64 bits numbers in R and thus its use of doubles\n+    to represent those.\n+\n+For additional information you can refer to\n+`rpy2 Documentation <https://rpy2.github.io/doc/latest/html/index.html>`_\n+and `rpy2-arrow Documentation <https://rpy2.github.io/rpy2-arrow/version/main/html/index.html>`_\n+\n+Invoking Python functions from R\n+--------------------------------\n+\n+Exposing Python functions to R can be done through the ``reticulate``\n+library. For example if we want to invoke :func:`pyarrow.compute.add` from\n+R on an Array created in R we can do so importing ``pyarrow`` in R\n+through ``reticulate``.\n+\n+A basic ``addthree.R`` script that invokes ``add`` to add ``3`` to\n+an R array would look like:\n+\n+.. code-block:: R\n+\n+    # Load arrow and reticulate libraries\n+    library(arrow)\n+    library(reticulate)\n+\n+    # Create a new array in R\n+    a <- Array$create(c(1, 2, 3))\n+\n+    # Make pyarrow.compute available to R\n+    pc <- import(\"pyarrow.compute\")\n+\n+    # Invoke pyarrow.compute.add with the array and 3\n+    # This will add 3 to all elements of the array and return a new Array\n+    result <- pc$add(a, 3)\n+\n+    # Print the result to confirm it's what we expect\n+    print(result)\n+\n+Invoking the ``addthree.R`` script will print the outcome of adding\n+``3`` to all the elements of the original ``Array$create(c(1, 2, 3))`` array:\n+\n+.. code-block:: bash\n+\n+    $ R --slave -f addthree.R \n+    Array\n+    <double>\n+    [\n+      4,\n+      5,\n+      6\n+    ]\n+\n+For additional information you can refer to\n+`Reticulate Documentation <https://rstudio.github.io/reticulate/>`_\n+\n+R to Python communication using C Data Interface\n+------------------------------------------------\n+\n+Both the solutions described in previous chapters use the Arrow C Data\n+interface under the hood.\n+\n+In case we want to extend the previous ``addthree`` example to switch\n+from using ``rpy2-arrow`` to using the plain C Data interface we can\n+do so by introducing some modifications to our codebase.\n+\n+To enable importing the Arrow Array from the C Data interface we have to\n+wrap our ``addthree`` function in a function that does the extra work\n+necessary to import an Arrow Array in R from the C Data interface.\n+\n+That work will be done by the ``addthree_cdata``\u00a0function which invokes the\n+``addthree`` function once the Array is imported.\n+\n+Our ``addthree.R``\u00a0will thus have both the ``addthree_cdata`` and the \n+``addthree`` functions:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree_cdata <- function(array_ptr_s, schema_ptr_s) {\n+        array_ptr <- as.numeric(array_ptr_s)\n+        schema_ptr <- as.numeric(schema_ptr_s)\n+\n+        a <- Array$import_from_c(array_ptr, schema_ptr)\n+\n+        return(addthree(a))\n+    }\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We can now provide to R the array and its schema from Python through the\n+``array_ptr_s`` and ``schema_ptr_s``\u00a0arguments so that R can build back\n+an ``Array`` from them and then invoke ``addthree`` with the array.\n+\n+Invoking ``addthree_cdata`` from Python involves building the Array we\n+want to pass to ``R``, exporting it to the C Data interface and then\n+passing the exported references to the ``R`` function.\n+\n+Our ``addthree.py`` will thus become:\n+\n+.. code-block:: python\n+\n+    # Get a reference to the addthree_cdata R function\n+    import rpy2.robjects as robjects\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+    addthree_cdata = robjects.r[\"addthree_cdata\"]\n+\n+    # Create the pyarrow array we want to pass to R\n+    import pyarrow\n+    array = pyarrow.array((1, 2, 3))\n+\n+    # Import the pyarrow module that provides access to the C Data interface\n+    from pyarrow.cffi import ffi as arrow_c\n+\n+    # Allocate structures where we will export the Array data \n+    # and the Array schema. They will be released when we exit the with block.\n+    with arrow_c.new(\"struct ArrowArray*\") as c_array, \\\n+         arrow_c.new(\"struct ArrowSchema*\") as c_schema:\n+        # Get the references to the C Data structures.\n+        c_array_ptr = int(arrow_c.cast(\"uintptr_t\", c_array))\n+        c_schema_ptr = int(arrow_c.cast(\"uintptr_t\", c_schema))\n+\n+        # Export the Array and its schema to the C Data structures.\n+        array._export_to_c(c_array_ptr)\n+        array.type._export_to_c(c_schema_ptr)\n+\n+        # Invoke the R addthree_cdata function passing the references\n+        # to the array and schema C Data structures. \n+        # Those references are passed as strings as R doesn't have\n+        # native support for 64bit integers, so the integers are\n+        # converted to their string representation for R to convert it back.\n+        r_result_array = addthree_cdata(str(c_array_ptr), str(c_schema_ptr))\n+\n+        # r_result will be an Environment variable that contains the\n+        # arrow Array built from R as the return value of addthree.\n+        # To make it available as a Python pyarrow array we need to export\n+        # it as a C Data structure invoking the Array$export_to_c R method\n+        r_result_array[\"export_to_c\"](float(c_array_ptr), float(c_schema_ptr))\n\nReview comment:\n       @pitrou Well, I tried with `bit64` `integer64` type, but it didn't work, it seems to only accept a REAL, if I pass a `integer64` to `export_to_c` or `import_from_c` I get a segfault. Someone with more R knowledge might want to chime in. @jonkeane @thisisnic \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-23T14:29:34.230+0000",
                    "updated": "2021-11-23T14:29:34.230+0000",
                    "started": "2021-11-23T14:29:34.230+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685299",
                    "issueId": "13411231"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411231/worklog/685303",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on a change in pull request #11679:\nURL: https://github.com/apache/arrow/pull/11679#discussion_r755183903\n\n\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,312 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and R functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``R`` environment with\n+    ``arrow`` library correctly installed.\n+\n+Invoking R functions from Python\n+--------------------------------\n+\n+Suppose we have a simple R function receiving an Arrow Array to\n+add ``3`` to all its elements:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We could save such function in a ``addthree.R`` file so that we can\n+make it available for reuse.\n+\n+Once the ``addthree.R`` is created we can invoke any of its functions\n+from Python using the \n+`rpy2 <https://rpy2.github.io/doc/latest/html/index.html>`_ library which\n+enables a R runtime within the Python interpreter.\n+\n+``rpy2``\u00a0can be installed using ``pip`` like most python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2\n+\n+The most basic thing we can do with our ``addthree``\u00a0function is to\n+invoke it from Python with a number and see how it will return the result.\n+\n+To do so we can create an ``addthree.py`` file which uses ``rpy2`` to\n+import the ``addthree`` function from ``addthree.R``\u00a0file and invoke it:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+\n+    # Load the addthree.R file\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    # Get a reference to the addthree function\n+    addthree = robjects.r[\"addthree\"]\n+\n+    # Invoke the function\n+    r = addthree(3)\n+\n+    # Access the returned value\n+    value = r[0]\n+    print(value)\n+\n+Running the ``addthree.py``\u00a0file will show how our Python code is able\n+to access the ``R`` function and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py \n+    6.0\n+\n+If instead of passing around basic data types we want to pass around\n+Arrow Arrays, we can do so relying on the ``rpy2-arrow`` module which\n+implements rpy2 support for Arrow types.\n+\n+``rpy2``\u00a0can be installed through ``pip``:\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2-arrow\n+\n+``rpy2-arrow`` implements converters from pyarrow objects to r arrow objects,\n+this is done without occurring into any data copy cost as it relies on the\n+C Data interface.\n+\n+To pass to ``addthree`` a pyarrow array our ``addthree.py``\u00a0needs to be modified\n+to enable ``rpy2-arrow`` converters and then pass the pyarrow array:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+    from rpy2_arrow.pyarrow_rarrow import (rarrow_to_py_array,\n+                                           converter as arrowconverter)\n+    from rpy2.robjects.conversion import localconverter\n+\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    addthree = robjects.r[\"addthree\"]\n+\n+    import pyarrow\n+\n+    array = pyarrow.array((1, 2, 3))\n+\n+    #\u00a0Enable rpy2-arrow converter so that R can receive the array.\n+    with localconverter(arrowconverter):\n+        r_result = addthree(array)\n+\n+    #\u00a0The result of the R function will be an R Environment\n+    # we can convert back the Environment to a pyarrow Array\n+    # using the rarrow_to_py_array function\n+    py_result = rarrow_to_py_array(r_result)\n+    print(\"RESULT\", type(py_result), py_result)\n+\n+Running the newly modified ``addthree.py``\u00a0should now properly execute\n+the R function and print the resulting pyarrow Array:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py\n+    RESULT <class 'pyarrow.lib.DoubleArray'> [\n+      4,\n+      5,\n+      6\n+    ]\n+\n+.. note::\n+\n+    Even though we sent an ``Int64Array`` to R, we end up with a\n+    result as a ``DoubleArray``. That's due to the lack of native\n+    support for 64 bits numbers in R and thus its use of doubles\n+    to represent those.\n+\n+For additional information you can refer to\n+`rpy2 Documentation <https://rpy2.github.io/doc/latest/html/index.html>`_\n+and `rpy2-arrow Documentation <https://rpy2.github.io/rpy2-arrow/version/main/html/index.html>`_\n+\n+Invoking Python functions from R\n+--------------------------------\n+\n+Exposing Python functions to R can be done through the ``reticulate``\n+library. For example if we want to invoke :func:`pyarrow.compute.add` from\n+R on an Array created in R we can do so importing ``pyarrow`` in R\n+through ``reticulate``.\n+\n+A basic ``addthree.R`` script that invokes ``add`` to add ``3`` to\n+an R array would look like:\n+\n+.. code-block:: R\n+\n+    # Load arrow and reticulate libraries\n+    library(arrow)\n+    library(reticulate)\n+\n+    # Create a new array in R\n+    a <- Array$create(c(1, 2, 3))\n+\n+    # Make pyarrow.compute available to R\n+    pc <- import(\"pyarrow.compute\")\n+\n+    # Invoke pyarrow.compute.add with the array and 3\n+    # This will add 3 to all elements of the array and return a new Array\n+    result <- pc$add(a, 3)\n+\n+    # Print the result to confirm it's what we expect\n+    print(result)\n+\n+Invoking the ``addthree.R`` script will print the outcome of adding\n+``3`` to all the elements of the original ``Array$create(c(1, 2, 3))`` array:\n+\n+.. code-block:: bash\n+\n+    $ R --slave -f addthree.R \n+    Array\n+    <double>\n+    [\n+      4,\n+      5,\n+      6\n+    ]\n+\n+For additional information you can refer to\n+`Reticulate Documentation <https://rstudio.github.io/reticulate/>`_\n+\n+R to Python communication using C Data Interface\n+------------------------------------------------\n+\n+Both the solutions described in previous chapters use the Arrow C Data\n+interface under the hood.\n+\n+In case we want to extend the previous ``addthree`` example to switch\n+from using ``rpy2-arrow`` to using the plain C Data interface we can\n+do so by introducing some modifications to our codebase.\n+\n+To enable importing the Arrow Array from the C Data interface we have to\n+wrap our ``addthree`` function in a function that does the extra work\n+necessary to import an Arrow Array in R from the C Data interface.\n+\n+That work will be done by the ``addthree_cdata``\u00a0function which invokes the\n+``addthree`` function once the Array is imported.\n+\n+Our ``addthree.R``\u00a0will thus have both the ``addthree_cdata`` and the \n+``addthree`` functions:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree_cdata <- function(array_ptr_s, schema_ptr_s) {\n+        array_ptr <- as.numeric(array_ptr_s)\n+        schema_ptr <- as.numeric(schema_ptr_s)\n+\n+        a <- Array$import_from_c(array_ptr, schema_ptr)\n+\n+        return(addthree(a))\n+    }\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We can now provide to R the array and its schema from Python through the\n+``array_ptr_s`` and ``schema_ptr_s``\u00a0arguments so that R can build back\n+an ``Array`` from them and then invoke ``addthree`` with the array.\n+\n+Invoking ``addthree_cdata`` from Python involves building the Array we\n+want to pass to ``R``, exporting it to the C Data interface and then\n+passing the exported references to the ``R`` function.\n+\n+Our ``addthree.py`` will thus become:\n+\n+.. code-block:: python\n+\n+    # Get a reference to the addthree_cdata R function\n+    import rpy2.robjects as robjects\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+    addthree_cdata = robjects.r[\"addthree_cdata\"]\n+\n+    # Create the pyarrow array we want to pass to R\n+    import pyarrow\n+    array = pyarrow.array((1, 2, 3))\n+\n+    # Import the pyarrow module that provides access to the C Data interface\n+    from pyarrow.cffi import ffi as arrow_c\n+\n+    # Allocate structures where we will export the Array data \n+    # and the Array schema. They will be released when we exit the with block.\n+    with arrow_c.new(\"struct ArrowArray*\") as c_array, \\\n+         arrow_c.new(\"struct ArrowSchema*\") as c_schema:\n+        # Get the references to the C Data structures.\n+        c_array_ptr = int(arrow_c.cast(\"uintptr_t\", c_array))\n+        c_schema_ptr = int(arrow_c.cast(\"uintptr_t\", c_schema))\n+\n+        # Export the Array and its schema to the C Data structures.\n+        array._export_to_c(c_array_ptr)\n+        array.type._export_to_c(c_schema_ptr)\n+\n+        # Invoke the R addthree_cdata function passing the references\n+        # to the array and schema C Data structures. \n+        # Those references are passed as strings as R doesn't have\n+        # native support for 64bit integers, so the integers are\n+        # converted to their string representation for R to convert it back.\n+        r_result_array = addthree_cdata(str(c_array_ptr), str(c_schema_ptr))\n+\n+        # r_result will be an Environment variable that contains the\n+        # arrow Array built from R as the return value of addthree.\n+        # To make it available as a Python pyarrow array we need to export\n+        # it as a C Data structure invoking the Array$export_to_c R method\n+        r_result_array[\"export_to_c\"](float(c_array_ptr), float(c_schema_ptr))\n\nReview comment:\n       It's sanitized here:\r\n   \r\n   https://github.com/apache/arrow/blob/eb2fa2df6dedf2743047df9dd19d7ed4f4482c22/r/src/arrow_cpp11.h#L49-L54\r\n   \r\n   ...so the current route is pointer -> `uintptr_t` -> `double`. R has an external pointer wrapper class (`R_MakeExternalPtr()`) and cpp11 has a wrapper `cpp11::external_pointer<>()` that are probably better suited to this (I did a lot of head scratching trying to figure this out).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-23T14:34:28.089+0000",
                    "updated": "2021-11-23T14:34:28.089+0000",
                    "started": "2021-11-23T14:34:28.089+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685303",
                    "issueId": "13411231"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411231/worklog/685473",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #11679:\nURL: https://github.com/apache/arrow/pull/11679#discussion_r755439008\n\n\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,315 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and R functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``R`` environment with\n+    ``arrow`` library correctly installed.\n\nReview comment:\n       Could we? Should we? link to https://arrow.apache.org/docs/python/install.html and https://arrow.apache.org/docs/r/#installation here?\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,315 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and R functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``R`` environment with\n+    ``arrow`` library correctly installed.\n+\n+Invoking R functions from Python\n+--------------------------------\n+\n+Suppose we have a simple R function receiving an Arrow Array to\n+add ``3`` to all its elements:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We could save such function in a ``addthree.R`` file so that we can\n+make it available for reuse.\n+\n+Once the ``addthree.R`` is created we can invoke any of its functions\n+from Python using the \n+`rpy2 <https://rpy2.github.io/doc/latest/html/index.html>`_ library which\n+enables a R runtime within the Python interpreter.\n+\n+``rpy2``\u00a0can be installed using ``pip`` like most python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2\n+\n+The most basic thing we can do with our ``addthree``\u00a0function is to\n+invoke it from Python with a number and see how it will return the result.\n+\n+To do so we can create an ``addthree.py`` file which uses ``rpy2`` to\n+import the ``addthree`` function from ``addthree.R``\u00a0file and invoke it:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+\n+    # Load the addthree.R file\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    # Get a reference to the addthree function\n+    addthree = robjects.r[\"addthree\"]\n+\n+    # Invoke the function\n+    r = addthree(3)\n+\n+    # Access the returned value\n+    value = r[0]\n+    print(value)\n+\n+Running the ``addthree.py``\u00a0file will show how our Python code is able\n+to access the ``R`` function and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py \n+    6.0\n+\n+If instead of passing around basic data types we want to pass around\n+Arrow Arrays, we can do so relying on the\n+`rpy2-arrow <https://rpy2.github.io/rpy2-arrow/version/main/html/index.html>`_ \n+module which implements ``rpy2`` support for Arrow types.\n+\n+``rpy2-arrow``\u00a0can be installed through ``pip``:\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2-arrow\n+\n+``rpy2-arrow`` implements converters from PyArrow objects to R Arrow objects,\n+this is done without occurring into any data copy cost as it relies on the\n+C Data interface.\n+\n+To pass to ``addthree`` a PyArrow array our ``addthree.py``\u00a0needs to be modified\n+to enable ``rpy2-arrow`` converters and then pass the PyArrow array:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+    from rpy2_arrow.pyarrow_rarrow import (rarrow_to_py_array,\n+                                           converter as arrowconverter)\n+    from rpy2.robjects.conversion import localconverter\n+\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    addthree = robjects.r[\"addthree\"]\n+\n+    import pyarrow\n+\n+    array = pyarrow.array((1, 2, 3))\n+\n+    #\u00a0Enable rpy2-arrow converter so that R can receive the array.\n+    with localconverter(arrowconverter):\n+        r_result = addthree(array)\n+\n+    #\u00a0The result of the R function will be an R Environment\n+    # we can convert back the Environment to a pyarrow Array\n\nReview comment:\n       ```suggestion\r\n       # we can convert the Environment back to a pyarrow Array\r\n   ```\r\n   \r\n   I think this makes it a little bit clearer\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,312 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and R functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``R`` environment with\n+    ``arrow`` library correctly installed.\n+\n+Invoking R functions from Python\n+--------------------------------\n+\n+Suppose we have a simple R function receiving an Arrow Array to\n+add ``3`` to all its elements:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We could save such function in a ``addthree.R`` file so that we can\n+make it available for reuse.\n+\n+Once the ``addthree.R`` is created we can invoke any of its functions\n+from Python using the \n+`rpy2 <https://rpy2.github.io/doc/latest/html/index.html>`_ library which\n+enables a R runtime within the Python interpreter.\n+\n+``rpy2``\u00a0can be installed using ``pip`` like most python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2\n+\n+The most basic thing we can do with our ``addthree``\u00a0function is to\n+invoke it from Python with a number and see how it will return the result.\n+\n+To do so we can create an ``addthree.py`` file which uses ``rpy2`` to\n+import the ``addthree`` function from ``addthree.R``\u00a0file and invoke it:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+\n+    # Load the addthree.R file\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    # Get a reference to the addthree function\n+    addthree = robjects.r[\"addthree\"]\n+\n+    # Invoke the function\n+    r = addthree(3)\n+\n+    # Access the returned value\n+    value = r[0]\n+    print(value)\n+\n+Running the ``addthree.py``\u00a0file will show how our Python code is able\n+to access the ``R`` function and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py \n+    6.0\n+\n+If instead of passing around basic data types we want to pass around\n+Arrow Arrays, we can do so relying on the ``rpy2-arrow`` module which\n+implements rpy2 support for Arrow types.\n+\n+``rpy2``\u00a0can be installed through ``pip``:\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2-arrow\n+\n+``rpy2-arrow`` implements converters from pyarrow objects to r arrow objects,\n+this is done without occurring into any data copy cost as it relies on the\n+C Data interface.\n+\n+To pass to ``addthree`` a pyarrow array our ``addthree.py``\u00a0needs to be modified\n+to enable ``rpy2-arrow`` converters and then pass the pyarrow array:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+    from rpy2_arrow.pyarrow_rarrow import (rarrow_to_py_array,\n+                                           converter as arrowconverter)\n+    from rpy2.robjects.conversion import localconverter\n+\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    addthree = robjects.r[\"addthree\"]\n+\n+    import pyarrow\n+\n+    array = pyarrow.array((1, 2, 3))\n+\n+    #\u00a0Enable rpy2-arrow converter so that R can receive the array.\n+    with localconverter(arrowconverter):\n+        r_result = addthree(array)\n+\n+    #\u00a0The result of the R function will be an R Environment\n+    # we can convert back the Environment to a pyarrow Array\n+    # using the rarrow_to_py_array function\n+    py_result = rarrow_to_py_array(r_result)\n+    print(\"RESULT\", type(py_result), py_result)\n+\n+Running the newly modified ``addthree.py``\u00a0should now properly execute\n+the R function and print the resulting pyarrow Array:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py\n+    RESULT <class 'pyarrow.lib.DoubleArray'> [\n+      4,\n+      5,\n+      6\n+    ]\n+\n+.. note::\n+\n+    Even though we sent an ``Int64Array`` to R, we end up with a\n+    result as a ``DoubleArray``. That's due to the lack of native\n+    support for 64 bits numbers in R and thus its use of doubles\n+    to represent those.\n+\n+For additional information you can refer to\n+`rpy2 Documentation <https://rpy2.github.io/doc/latest/html/index.html>`_\n+and `rpy2-arrow Documentation <https://rpy2.github.io/rpy2-arrow/version/main/html/index.html>`_\n+\n+Invoking Python functions from R\n+--------------------------------\n+\n+Exposing Python functions to R can be done through the ``reticulate``\n+library. For example if we want to invoke :func:`pyarrow.compute.add` from\n+R on an Array created in R we can do so importing ``pyarrow`` in R\n+through ``reticulate``.\n+\n+A basic ``addthree.R`` script that invokes ``add`` to add ``3`` to\n\nReview comment:\n       I'm fine duplicating a bit in both places, but we should link as well\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,315 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and R functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``R`` environment with\n+    ``arrow`` library correctly installed.\n+\n+Invoking R functions from Python\n+--------------------------------\n+\n+Suppose we have a simple R function receiving an Arrow Array to\n+add ``3`` to all its elements:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We could save such function in a ``addthree.R`` file so that we can\n+make it available for reuse.\n+\n+Once the ``addthree.R`` is created we can invoke any of its functions\n+from Python using the \n+`rpy2 <https://rpy2.github.io/doc/latest/html/index.html>`_ library which\n+enables a R runtime within the Python interpreter.\n+\n+``rpy2``\u00a0can be installed using ``pip`` like most python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2\n+\n+The most basic thing we can do with our ``addthree``\u00a0function is to\n+invoke it from Python with a number and see how it will return the result.\n+\n+To do so we can create an ``addthree.py`` file which uses ``rpy2`` to\n+import the ``addthree`` function from ``addthree.R``\u00a0file and invoke it:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+\n+    # Load the addthree.R file\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    # Get a reference to the addthree function\n+    addthree = robjects.r[\"addthree\"]\n+\n+    # Invoke the function\n+    r = addthree(3)\n+\n+    # Access the returned value\n+    value = r[0]\n+    print(value)\n+\n+Running the ``addthree.py``\u00a0file will show how our Python code is able\n+to access the ``R`` function and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py \n+    6.0\n+\n+If instead of passing around basic data types we want to pass around\n+Arrow Arrays, we can do so relying on the\n+`rpy2-arrow <https://rpy2.github.io/rpy2-arrow/version/main/html/index.html>`_ \n+module which implements ``rpy2`` support for Arrow types.\n+\n+``rpy2-arrow``\u00a0can be installed through ``pip``:\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2-arrow\n+\n+``rpy2-arrow`` implements converters from PyArrow objects to R Arrow objects,\n+this is done without occurring into any data copy cost as it relies on the\n+C Data interface.\n+\n+To pass to ``addthree`` a PyArrow array our ``addthree.py``\u00a0needs to be modified\n+to enable ``rpy2-arrow`` converters and then pass the PyArrow array:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+    from rpy2_arrow.pyarrow_rarrow import (rarrow_to_py_array,\n+                                           converter as arrowconverter)\n+    from rpy2.robjects.conversion import localconverter\n+\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    addthree = robjects.r[\"addthree\"]\n+\n+    import pyarrow\n+\n+    array = pyarrow.array((1, 2, 3))\n+\n+    #\u00a0Enable rpy2-arrow converter so that R can receive the array.\n+    with localconverter(arrowconverter):\n+        r_result = addthree(array)\n+\n+    #\u00a0The result of the R function will be an R Environment\n+    # we can convert back the Environment to a pyarrow Array\n+    # using the rarrow_to_py_array function\n+    py_result = rarrow_to_py_array(r_result)\n+    print(\"RESULT\", type(py_result), py_result)\n+\n+Running the newly modified ``addthree.py``\u00a0should now properly execute\n+the R function and print the resulting PyArrow Array:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py\n+    RESULT <class 'pyarrow.lib.DoubleArray'> [\n+      4,\n+      5,\n+      6\n+    ]\n+\n+.. note::\n+\n+    Even though we sent an ``Int64Array`` to R, we end up with a\n+    result as a ``DoubleArray``. That's due to the lack of native\n+    support for 64 bits numbers in R and thus its use of doubles\n+    to represent those.\n+\n+For additional information you can refer to\n+`rpy2 Documentation <https://rpy2.github.io/doc/latest/html/index.html>`_\n+and `rpy2-arrow Documentation <https://rpy2.github.io/rpy2-arrow/version/main/html/index.html>`_\n+\n+Invoking Python functions from R\n+--------------------------------\n+\n+Exposing Python functions to R can be done through the ``reticulate``\n+library. For example if we want to invoke :func:`pyarrow.compute.add` from\n+R on an Array created in R we can do so importing ``pyarrow`` in R\n+through ``reticulate``.\n+\n+A basic ``addthree.R`` script that invokes ``add`` to add ``3`` to\n+an R array would look like:\n+\n+.. code-block:: R\n+\n+    # Load arrow and reticulate libraries\n+    library(arrow)\n+    library(reticulate)\n+\n+    # Create a new array in R\n+    a <- Array$create(c(1, 2, 3))\n+\n+    # Make pyarrow.compute available to R\n+    pc <- import(\"pyarrow.compute\")\n+\n+    # Invoke pyarrow.compute.add with the array and 3\n+    # This will add 3 to all elements of the array and return a new Array\n+    result <- pc$add(a, 3)\n+\n+    # Print the result to confirm it's what we expect\n+    print(result)\n+\n+Invoking the ``addthree.R`` script will print the outcome of adding\n+``3`` to all the elements of the original ``Array$create(c(1, 2, 3))`` array:\n+\n+.. code-block:: bash\n+\n+    $ R --slave -f addthree.R \n\nReview comment:\n       ```suggestion\r\n       $ R --silent -f addthree.R \r\n   ```\r\n   \r\n   Does the same thing, with less of a negative connotation to it\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,315 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and R functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``R`` environment with\n+    ``arrow`` library correctly installed.\n+\n+Invoking R functions from Python\n+--------------------------------\n+\n+Suppose we have a simple R function receiving an Arrow Array to\n+add ``3`` to all its elements:\n+\n+.. code-block:: R\n+\n+    library(arrow)\n+\n+    addthree <- function(arr) {\n+        return(arr + 3)\n+    }\n+\n+We could save such function in a ``addthree.R`` file so that we can\n+make it available for reuse.\n+\n+Once the ``addthree.R`` is created we can invoke any of its functions\n+from Python using the \n+`rpy2 <https://rpy2.github.io/doc/latest/html/index.html>`_ library which\n+enables a R runtime within the Python interpreter.\n+\n+``rpy2``\u00a0can be installed using ``pip`` like most python libraries\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2\n+\n+The most basic thing we can do with our ``addthree``\u00a0function is to\n+invoke it from Python with a number and see how it will return the result.\n+\n+To do so we can create an ``addthree.py`` file which uses ``rpy2`` to\n+import the ``addthree`` function from ``addthree.R``\u00a0file and invoke it:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+\n+    # Load the addthree.R file\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    # Get a reference to the addthree function\n+    addthree = robjects.r[\"addthree\"]\n+\n+    # Invoke the function\n+    r = addthree(3)\n+\n+    # Access the returned value\n+    value = r[0]\n+    print(value)\n+\n+Running the ``addthree.py``\u00a0file will show how our Python code is able\n+to access the ``R`` function and print the expected result:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py \n+    6.0\n+\n+If instead of passing around basic data types we want to pass around\n+Arrow Arrays, we can do so relying on the\n+`rpy2-arrow <https://rpy2.github.io/rpy2-arrow/version/main/html/index.html>`_ \n+module which implements ``rpy2`` support for Arrow types.\n+\n+``rpy2-arrow``\u00a0can be installed through ``pip``:\n+\n+.. code-block:: bash\n+\n+    $ pip install rpy2-arrow\n+\n+``rpy2-arrow`` implements converters from PyArrow objects to R Arrow objects,\n+this is done without occurring into any data copy cost as it relies on the\n+C Data interface.\n+\n+To pass to ``addthree`` a PyArrow array our ``addthree.py``\u00a0needs to be modified\n+to enable ``rpy2-arrow`` converters and then pass the PyArrow array:\n+\n+.. code-block:: python\n+\n+    import rpy2.robjects as robjects\n+    from rpy2_arrow.pyarrow_rarrow import (rarrow_to_py_array,\n+                                           converter as arrowconverter)\n+    from rpy2.robjects.conversion import localconverter\n+\n+    r_source = robjects.r[\"source\"]\n+    r_source(\"addthree.R\")\n+\n+    addthree = robjects.r[\"addthree\"]\n+\n+    import pyarrow\n+\n+    array = pyarrow.array((1, 2, 3))\n+\n+    #\u00a0Enable rpy2-arrow converter so that R can receive the array.\n+    with localconverter(arrowconverter):\n+        r_result = addthree(array)\n+\n+    #\u00a0The result of the R function will be an R Environment\n+    # we can convert back the Environment to a pyarrow Array\n+    # using the rarrow_to_py_array function\n+    py_result = rarrow_to_py_array(r_result)\n+    print(\"RESULT\", type(py_result), py_result)\n+\n+Running the newly modified ``addthree.py``\u00a0should now properly execute\n+the R function and print the resulting PyArrow Array:\n+\n+.. code-block:: bash\n+\n+    $ python addthree.py\n+    RESULT <class 'pyarrow.lib.DoubleArray'> [\n+      4,\n+      5,\n+      6\n+    ]\n+\n+.. note::\n+\n+    Even though we sent an ``Int64Array`` to R, we end up with a\n+    result as a ``DoubleArray``. That's due to the lack of native\n+    support for 64 bits numbers in R and thus its use of doubles\n+    to represent those.\n\nReview comment:\n       If the script were instead (note `3L` versus `3`) I _think_ we would get an integer back.\r\n   \r\n   ```\r\n       library(arrow)\r\n   \r\n       addthree <- function(arr) {\r\n           return(arr + 3L)\r\n       }\r\n   ```\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,315 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n\nReview comment:\n       Would it be worth spelling out here that this also works for subprocesses? That might be assumed / known for some with the phrase \"within the same process\" but I also think others would think / assume that subprocess don't count as the same process for this purpose.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-23T19:36:07.235+0000",
                    "updated": "2021-11-23T19:36:07.235+0000",
                    "started": "2021-11-23T19:36:07.234+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685473",
                    "issueId": "13411231"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411231/worklog/685889",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #11679:\nURL: https://github.com/apache/arrow/pull/11679#discussion_r756144826\n\n\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,315 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n\nReview comment:\n       Uhm, that's an interesting point. I _think_ that suggesting it here might open a can of worms as what you have access to will depend a lot on _when_ the subprocesses are forked and people might complain that it doesn't work. I would act safe and only explicitly state about same process leaving to the reader knowledge to imagine it can also work for subprocesses under some circumstances.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-24T14:44:50.721+0000",
                    "updated": "2021-11-24T14:44:50.721+0000",
                    "started": "2021-11-24T14:44:50.721+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685889",
                    "issueId": "13411231"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411231/worklog/685891",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11679:\nURL: https://github.com/apache/arrow/pull/11679#discussion_r756146813\n\n\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,315 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n\nReview comment:\n       Agreed with @amol- . Users who know and understand what forking are able to make out the consequences by themselves; users who don't don't deserve to be confused :-)\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,315 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n\nReview comment:\n       Agreed with @amol- . Users who know and understand what forking is are able to make out the consequences by themselves; users who don't don't deserve to be confused :-)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-24T14:47:09.270+0000",
                    "updated": "2021-11-24T14:47:09.270+0000",
                    "started": "2021-11-24T14:47:09.269+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685891",
                    "issueId": "13411231"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411231/worklog/685892",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #11679:\nURL: https://github.com/apache/arrow/pull/11679#discussion_r756148239\n\n\n\n##########\nFile path: docs/source/python/integration/python_r.rst\n##########\n@@ -0,0 +1,315 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+Integrating PyArrow with R\n+==========================\n+\n+Arrow supports exchanging data within the same process through the\n+:ref:`c-data-interface`.\n+\n+This can be used to exchange data between Python and R functions and\n+methods so that the two languages can interact without any cost of\n+marshaling and unmarshaling data.\n+\n+.. note::\n+\n+    The article takes for granted that you have a ``Python`` environment\n+    with ``pyarrow`` correctly installed and an ``R`` environment with\n+    ``arrow`` library correctly installed.\n\nReview comment:\n       Added link, I guess we could also remove this note. I felt it was useful mostly because if you approach it from a Python developer point of view it might not be immediately obvious that you need a working R environment too. But in the end we don't state on every doc page that to follow the doc you need a working Arrow setup.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-24T14:48:22.081+0000",
                    "updated": "2021-11-24T14:48:22.081+0000",
                    "started": "2021-11-24T14:48:22.080+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685892",
                    "issueId": "13411231"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 20400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5b295763[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@796ce743[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1386ccbc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@d4e7770[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1432f5f7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3e937d20[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1bd5a562[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@655ea49f[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6640788e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@431f631b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@755730af[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@65bd18c6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 20400,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jan 19 09:47:40 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-01-19T09:47:40.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14671/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-11-11T09:44:54.000+0000",
        "updated": "2022-01-20T11:31:34.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 20400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python][Doc] Connecting Python to R through CData interface",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411231/comment/17478497",
                    "id": "17478497",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "body": "Issue resolved by pull request 11679\n[https://github.com/apache/arrow/pull/11679]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "created": "2022-01-19T09:47:40.383+0000",
                    "updated": "2022-01-19T09:47:40.383+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0wn48:",
        "customfield_12314139": null
    }
}