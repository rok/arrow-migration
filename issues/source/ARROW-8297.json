{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13295310",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295310",
    "key": "ARROW-8297",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12586542",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12586542",
                "type": {
                    "id": "10020",
                    "name": "Cloners",
                    "inward": "is cloned by",
                    "outward": "is a clone of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10020"
                },
                "inwardIssue": {
                    "id": "13300286",
                    "key": "ARROW-8555",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300286",
                    "fields": {
                        "summary": "[FlightRPC][Java] Implement Flight DoExchange for Java",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334621",
                "id": "12334621",
                "name": "FlightRPC"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 11400,
            "total": 11400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 11400,
            "total": 11400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8297/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 19,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295310/worklog/413348",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6656: ARROW-8297: [FlightRPC][C++] Implement Flight DoExchange for C++\nURL: https://github.com/apache/arrow/pull/6656#discussion_r401067770\n \n \n\n ##########\n File path: cpp/src/arrow/flight/serialization_internal.cc\n ##########\n @@ -66,7 +67,9 @@ bool ReadBytesZeroCopy(const std::shared_ptr<Buffer>& source_data,\n   if (!input->ReadVarint32(&length)) {\n     return false;\n   }\n-  *out = SliceBuffer(source_data, input->CurrentPosition(), static_cast<int64_t>(length));\n+  auto buf =\n+      SliceBuffer(source_data, input->CurrentPosition(), static_cast<int64_t>(length));\n+  *out = buf;\n \n Review comment:\n   Leftover from debugging - reverted.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-31T16:55:46.965+0000",
                    "updated": "2020-03-31T16:55:46.965+0000",
                    "started": "2020-03-31T16:55:46.964+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "413348",
                    "issueId": "13295310"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295310/worklog/413349",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6656: ARROW-8297: [FlightRPC][C++] Implement Flight DoExchange for C++\nURL: https://github.com/apache/arrow/pull/6656#discussion_r401067919\n \n \n\n ##########\n File path: cpp/src/arrow/flight/test_util.cc\n ##########\n @@ -203,6 +203,37 @@ class FlightTestServer : public FlightServerBase {\n     return Status::OK();\n   }\n \n+  Status DoExchange(const ServerCallContext& context,\n+                    std::unique_ptr<FlightMessageReader> reader,\n+                    std::unique_ptr<FlightMessageWriter> writer) override {\n+    std::vector<std::shared_ptr<RecordBatch>> batches;\n+    FlightStreamChunk chunk{};\n+    int chunks = 0;\n+    while (true) {\n+      RETURN_NOT_OK(reader->Next(&chunk));\n+\n+      if (chunk.data) {\n+        batches.push_back(chunk.data);\n+      }\n+\n+      if (!chunk.data && !chunk.app_metadata) {\n+        break;\n+      }\n+      chunks++;\n+    }\n+\n+    std::shared_ptr<Buffer> buf;\n+    RETURN_NOT_OK(Buffer::FromString(std::to_string(chunks), &buf));\n+    RETURN_NOT_OK(writer->WriteMetadata(buf));\n \n Review comment:\n   I've clarified what each of the test cases look for (and added more test cases).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-31T16:56:01.077+0000",
                    "updated": "2020-03-31T16:56:01.077+0000",
                    "started": "2020-03-31T16:56:01.077+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "413349",
                    "issueId": "13295310"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295310/worklog/413350",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6656: ARROW-8297: [FlightRPC][C++] Implement Flight DoExchange for C++\nURL: https://github.com/apache/arrow/pull/6656#discussion_r401068110\n \n \n\n ##########\n File path: cpp/src/arrow/flight/flight_test.cc\n ##########\n @@ -945,6 +945,34 @@ TEST_F(TestFlightClient, DoGetDicts) {\n   CheckDoGet(descr, expected_batches, check_endpoints);\n }\n \n+TEST_F(TestFlightClient, DoExchange) {\n+  auto descr = FlightDescriptor::Path({\"ints\"});\n+  BatchVector batches;\n+  auto a1 = ArrayFromJSON(int32(), \"[4, 5, 6, null]\");\n+  auto schema = arrow::schema({field(\"f1\", a1->type())});\n+  batches.push_back(RecordBatch::Make(schema, a1->length(), {a1}));\n+  std::unique_ptr<FlightStreamReader> reader;\n+  std::unique_ptr<FlightStreamWriter> writer;\n+  ASSERT_OK(client_->DoExchange(descr, &reader, &writer));\n+  ASSERT_OK(writer->Begin(schema));\n+  // TODO: Begin() should write the descriptor - this should work even\n+  // if we never write any data\n+  for (const auto& batch : batches) {\n+    ASSERT_OK(writer->WriteRecordBatch(*batch));\n+  }\n+  ASSERT_OK(writer->DoneWriting());\n+  FlightStreamChunk chunk;\n+  ASSERT_OK(reader->Next(&chunk));\n+  ASSERT_EQ(\"1\", chunk.app_metadata->ToString());\n+  ASSERT_OK(reader->Open());\n+  AssertSchemaEqual(schema, reader->schema());\n \n Review comment:\n   Yes, that would be equivalent to DoGet essentially - I've added a test case for this.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-31T16:56:21.765+0000",
                    "updated": "2020-03-31T16:56:21.765+0000",
                    "started": "2020-03-31T16:56:21.765+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "413350",
                    "issueId": "13295310"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295310/worklog/413353",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6656: ARROW-8297: [FlightRPC][C++] Implement Flight DoExchange for C++\nURL: https://github.com/apache/arrow/pull/6656#discussion_r401068874\n \n \n\n ##########\n File path: cpp/src/arrow/flight/client.cc\n ##########\n @@ -242,140 +244,239 @@ class GrpcClientAuthReader : public ClientAuthReader {\n       stream_;\n };\n \n-// The next two classes are intertwined. To get the application\n-// metadata while avoiding reimplementing RecordBatchStreamReader, we\n-// create an ipc::MessageReader that is tied to the\n-// MetadataRecordBatchReader. Every time an IPC message is read, it updates\n-// the application metadata field of the MetadataRecordBatchReader. The\n-// MetadataRecordBatchReader wraps RecordBatchStreamReader, offering an\n-// additional method to get both the record batch and application\n-// metadata.\n-\n-class GrpcIpcMessageReader;\n-class GrpcStreamReader : public FlightStreamReader {\n+// We want to reuse RecordBatchStreamReader's implementation while\n+// (1) Adapting it to the Flight message format\n+// (2) Allowing pure-metadata messages before data is sent\n+// (3) Reusing the reader implementation between DoGet and DoExchange.\n+// To do this, we wrap the gRPC reader in a peekable iterator.\n+// The Flight reader can then peek at the message to determine whether\n+// it has application metadata or not, and pass the message to\n+// RecordBatchStreamReader as appropriate.\n+\n+// TODO: this deserves some tests of its own with a mock Reader\n+template <typename Reader>\n+class PeekableFlightDataReader {\n  public:\n-  GrpcStreamReader();\n+  explicit PeekableFlightDataReader(std::shared_ptr<Reader> stream)\n+      : stream_(stream), peek_(), finished_(false), valid_(false) {}\n \n-  static Status Open(std::unique_ptr<ClientRpc> rpc,\n-                     std::unique_ptr<grpc::ClientReader<pb::FlightData>> stream,\n-                     std::unique_ptr<GrpcStreamReader>* out);\n-  std::shared_ptr<Schema> schema() const override;\n-  Status Next(FlightStreamChunk* out) override;\n-  void Cancel() override;\n+  void Peek(internal::FlightData** out) {\n+    *out = nullptr;\n+    if (finished_) {\n+      return;\n+    }\n+    if (EnsurePeek()) {\n+      *out = &peek_;\n+    }\n+  }\n+\n+  void Next(internal::FlightData** out) {\n+    *out = nullptr;\n+    if (finished_) {\n+      return;\n+    }\n+    if (EnsurePeek()) {\n+      *out = &peek_;\n+    }\n+    valid_ = false;\n+  }\n \n  private:\n-  friend class GrpcIpcMessageReader;\n-  std::unique_ptr<ipc::RecordBatchReader> batch_reader_;\n-  std::shared_ptr<Buffer> last_app_metadata_;\n-  std::shared_ptr<ClientRpc> rpc_;\n+  bool EnsurePeek() {\n+    if (finished_ || valid_) {\n+      return valid_;\n+    }\n+\n+    if (!internal::ReadPayload(&*stream_, &peek_)) {\n+      finished_ = true;\n+      valid_ = false;\n+    } else {\n+      valid_ = true;\n+    }\n+    return valid_;\n+  }\n+\n+  std::shared_ptr<Reader> stream_;\n+  internal::FlightData peek_;\n+  bool finished_;\n+  bool valid_;\n };\n \n+// An ipc::MessageReader that adapts any readable gRPC stream\n+// returning FlightData.\n+template <typename Reader>\n class GrpcIpcMessageReader : public ipc::MessageReader {\n  public:\n-  GrpcIpcMessageReader(GrpcStreamReader* reader, std::shared_ptr<ClientRpc> rpc,\n-                       std::unique_ptr<grpc::ClientReader<pb::FlightData>> stream)\n-      : flight_reader_(reader),\n-        rpc_(rpc),\n+  GrpcIpcMessageReader(std::shared_ptr<ClientRpc> rpc, std::shared_ptr<Reader> stream,\n+                       std::shared_ptr<PeekableFlightDataReader<Reader>> peekable_reader)\n+      : rpc_(rpc),\n         stream_(std::move(stream)),\n+        peekable_reader_(peekable_reader),\n         stream_finished_(false) {}\n \n   Status ReadNextMessage(std::unique_ptr<ipc::Message>* out) override {\n+    *out = nullptr;\n     if (stream_finished_) {\n-      *out = nullptr;\n-      flight_reader_->last_app_metadata_ = nullptr;\n       return Status::OK();\n     }\n-    internal::FlightData data;\n-    if (!internal::ReadPayload(stream_.get(), &data)) {\n-      // Stream is completed\n+    internal::FlightData* data;\n+    peekable_reader_->Next(&data);\n \n Review comment:\n   No, it can only signify that there was/wasn't a message read because gRPC only gives you a boolean status flag - you have to call `Finish()` on the stream to get the server error (if any). I've refactored all the existing logic around that (and the read mutex) into a helper class to manage those details.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-31T16:57:32.354+0000",
                    "updated": "2020-03-31T16:57:32.354+0000",
                    "started": "2020-03-31T16:57:32.354+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "413353",
                    "issueId": "13295310"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295310/worklog/413354",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6656: ARROW-8297: [FlightRPC][C++] Implement Flight DoExchange for C++\nURL: https://github.com/apache/arrow/pull/6656#discussion_r401069125\n \n \n\n ##########\n File path: cpp/src/arrow/flight/client.cc\n ##########\n @@ -242,140 +244,239 @@ class GrpcClientAuthReader : public ClientAuthReader {\n       stream_;\n };\n \n-// The next two classes are intertwined. To get the application\n-// metadata while avoiding reimplementing RecordBatchStreamReader, we\n-// create an ipc::MessageReader that is tied to the\n-// MetadataRecordBatchReader. Every time an IPC message is read, it updates\n-// the application metadata field of the MetadataRecordBatchReader. The\n-// MetadataRecordBatchReader wraps RecordBatchStreamReader, offering an\n-// additional method to get both the record batch and application\n-// metadata.\n-\n-class GrpcIpcMessageReader;\n-class GrpcStreamReader : public FlightStreamReader {\n+// We want to reuse RecordBatchStreamReader's implementation while\n+// (1) Adapting it to the Flight message format\n+// (2) Allowing pure-metadata messages before data is sent\n+// (3) Reusing the reader implementation between DoGet and DoExchange.\n+// To do this, we wrap the gRPC reader in a peekable iterator.\n+// The Flight reader can then peek at the message to determine whether\n+// it has application metadata or not, and pass the message to\n+// RecordBatchStreamReader as appropriate.\n+\n+// TODO: this deserves some tests of its own with a mock Reader\n+template <typename Reader>\n+class PeekableFlightDataReader {\n  public:\n-  GrpcStreamReader();\n+  explicit PeekableFlightDataReader(std::shared_ptr<Reader> stream)\n+      : stream_(stream), peek_(), finished_(false), valid_(false) {}\n \n-  static Status Open(std::unique_ptr<ClientRpc> rpc,\n-                     std::unique_ptr<grpc::ClientReader<pb::FlightData>> stream,\n-                     std::unique_ptr<GrpcStreamReader>* out);\n-  std::shared_ptr<Schema> schema() const override;\n-  Status Next(FlightStreamChunk* out) override;\n-  void Cancel() override;\n+  void Peek(internal::FlightData** out) {\n+    *out = nullptr;\n+    if (finished_) {\n+      return;\n+    }\n+    if (EnsurePeek()) {\n+      *out = &peek_;\n+    }\n+  }\n+\n+  void Next(internal::FlightData** out) {\n+    *out = nullptr;\n+    if (finished_) {\n+      return;\n+    }\n+    if (EnsurePeek()) {\n+      *out = &peek_;\n+    }\n+    valid_ = false;\n+  }\n \n  private:\n-  friend class GrpcIpcMessageReader;\n-  std::unique_ptr<ipc::RecordBatchReader> batch_reader_;\n-  std::shared_ptr<Buffer> last_app_metadata_;\n-  std::shared_ptr<ClientRpc> rpc_;\n+  bool EnsurePeek() {\n+    if (finished_ || valid_) {\n+      return valid_;\n+    }\n+\n+    if (!internal::ReadPayload(&*stream_, &peek_)) {\n+      finished_ = true;\n+      valid_ = false;\n+    } else {\n+      valid_ = true;\n+    }\n+    return valid_;\n+  }\n+\n+  std::shared_ptr<Reader> stream_;\n+  internal::FlightData peek_;\n+  bool finished_;\n+  bool valid_;\n };\n \n+// An ipc::MessageReader that adapts any readable gRPC stream\n+// returning FlightData.\n+template <typename Reader>\n class GrpcIpcMessageReader : public ipc::MessageReader {\n  public:\n-  GrpcIpcMessageReader(GrpcStreamReader* reader, std::shared_ptr<ClientRpc> rpc,\n-                       std::unique_ptr<grpc::ClientReader<pb::FlightData>> stream)\n-      : flight_reader_(reader),\n-        rpc_(rpc),\n+  GrpcIpcMessageReader(std::shared_ptr<ClientRpc> rpc, std::shared_ptr<Reader> stream,\n+                       std::shared_ptr<PeekableFlightDataReader<Reader>> peekable_reader)\n+      : rpc_(rpc),\n         stream_(std::move(stream)),\n+        peekable_reader_(peekable_reader),\n         stream_finished_(false) {}\n \n   Status ReadNextMessage(std::unique_ptr<ipc::Message>* out) override {\n+    *out = nullptr;\n     if (stream_finished_) {\n-      *out = nullptr;\n-      flight_reader_->last_app_metadata_ = nullptr;\n       return Status::OK();\n     }\n-    internal::FlightData data;\n-    if (!internal::ReadPayload(stream_.get(), &data)) {\n-      // Stream is completed\n+    internal::FlightData* data;\n+    peekable_reader_->Next(&data);\n+    if (!data) {\n       stream_finished_ = true;\n-      *out = nullptr;\n-      flight_reader_->last_app_metadata_ = nullptr;\n       return OverrideWithServerError(Status::OK());\n     }\n     // Validate IPC message\n-    auto st = data.OpenMessage(out);\n+    auto st = data->OpenMessage(out);\n     if (!st.ok()) {\n-      flight_reader_->last_app_metadata_ = nullptr;\n       return OverrideWithServerError(std::move(st));\n     }\n-    flight_reader_->last_app_metadata_ = data.app_metadata;\n     return Status::OK();\n   }\n \n  protected:\n+  /// Get the gRPC status if not OK, to propagate any server error message\n   Status OverrideWithServerError(Status&& st) {\n-    // Get the gRPC status if not OK, to propagate any server error message\n+    // TODO: this is a double-close when paired with GrpcStreamReader\n     RETURN_NOT_OK(internal::FromGrpcStatus(stream_->Finish(), &rpc_->context));\n     return std::move(st);\n   }\n \n  private:\n-  GrpcStreamReader* flight_reader_;\n   // The RPC context lifetime must be coupled to the ClientReader\n   std::shared_ptr<ClientRpc> rpc_;\n-  std::unique_ptr<grpc::ClientReader<pb::FlightData>> stream_;\n+  std::shared_ptr<Reader> stream_;\n+  std::shared_ptr<PeekableFlightDataReader<Reader>> peekable_reader_;\n   bool stream_finished_;\n };\n \n-GrpcStreamReader::GrpcStreamReader() {}\n-\n-Status GrpcStreamReader::Open(std::unique_ptr<ClientRpc> rpc,\n-                              std::unique_ptr<grpc::ClientReader<pb::FlightData>> stream,\n-                              std::unique_ptr<GrpcStreamReader>* out) {\n-  *out = std::unique_ptr<GrpcStreamReader>(new GrpcStreamReader);\n-  out->get()->rpc_ = std::move(rpc);\n-  std::unique_ptr<GrpcIpcMessageReader> message_reader(\n-      new GrpcIpcMessageReader(out->get(), out->get()->rpc_, std::move(stream)));\n-  return ipc::RecordBatchStreamReader::Open(std::move(message_reader),\n-                                            &(*out)->batch_reader_);\n-}\n+/// The implementation of the public-facing API for reading from a\n+/// FlightData stream\n+template <typename Reader>\n+class GrpcStreamReader : public FlightStreamReader {\n+ public:\n+  GrpcStreamReader(std::shared_ptr<ClientRpc> rpc, std::shared_ptr<Reader> stream)\n+      : rpc_(rpc),\n+        stream_(stream),\n+        peekable_reader_(new PeekableFlightDataReader<Reader>(stream)) {}\n+\n+  Status Open() override {\n+    // TODO: this should internally be automatically called once we\n+    // start seeing data in the stream\n+    std::unique_ptr<GrpcIpcMessageReader<Reader>> message_reader(\n+        new GrpcIpcMessageReader<Reader>(rpc_, stream_, peekable_reader_));\n+    return ipc::RecordBatchStreamReader::Open(std::move(message_reader),\n+                                              &this->batch_reader_);\n+  }\n \n-std::shared_ptr<Schema> GrpcStreamReader::schema() const {\n-  return batch_reader_->schema();\n-}\n+  Status CheckStarted() const {\n+    if (!batch_reader_) {\n+      return Status::Invalid(\"Reader not initialized. Call Open().\");\n+    }\n+    return Status::OK();\n+  }\n \n-Status GrpcStreamReader::Next(FlightStreamChunk* out) {\n-  out->app_metadata = nullptr;\n-  RETURN_NOT_OK(batch_reader_->ReadNext(&out->data));\n-  out->app_metadata = std::move(last_app_metadata_);\n-  return Status::OK();\n-}\n+  std::shared_ptr<Schema> schema() const override {\n+    // TODO: this is no longer a simple getter\n+    return batch_reader_->schema();\n+  }\n+  Status Next(FlightStreamChunk* out) override {\n+    internal::FlightData* data;\n+    peekable_reader_->Peek(&data);\n \n Review comment:\n   See above - gRPC doesn't differentiate between a stream finishing and failing, unfortunately, on the client side.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-31T16:57:53.055+0000",
                    "updated": "2020-03-31T16:57:53.055+0000",
                    "started": "2020-03-31T16:57:53.055+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "413354",
                    "issueId": "13295310"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295310/worklog/413372",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on issue #6656: ARROW-8297: [FlightRPC][C++] Implement Flight DoExchange for C++\nURL: https://github.com/apache/arrow/pull/6656#issuecomment-606752447\n \n \n   I've updated the PR. There's still a TODO about trying to share some logic with RecordBatchStreamImpl, but that is pull-based while this is push-based, so that may not be simple. Otherwise, this should be a complete implementation for C++; I'll follow up with Python and Java in separate PRs.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-31T17:02:04.495+0000",
                    "updated": "2020-03-31T17:02:04.495+0000",
                    "started": "2020-03-31T17:02:04.495+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "413372",
                    "issueId": "13295310"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295310/worklog/414694",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on issue #6656: ARROW-8297: [FlightRPC][C++] Implement Flight DoExchange for C++\nURL: https://github.com/apache/arrow/pull/6656#issuecomment-606752447\n \n \n   I've updated the PR. There's still a TODO about trying to share some logic with RecordBatchStreamImpl, but that is pull-based while this is push-based, so that may not be simple. Otherwise, this should be a complete implementation for C++; I'll follow up with Python and Java in separate PRs.\r\n   \r\n   EDIT: There are still some issues I'm working through (I discovered failures under some conditions while writing Python bindings).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T13:59:43.174+0000",
                    "updated": "2020-04-02T13:59:43.174+0000",
                    "started": "2020-04-02T13:59:43.174+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414694",
                    "issueId": "13295310"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295310/worklog/414952",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on issue #6656: ARROW-8297: [FlightRPC][C++] Implement Flight DoExchange for C++\nURL: https://github.com/apache/arrow/pull/6656#issuecomment-606752447\n \n \n   I've updated the PR. There's still a TODO about trying to share some logic with RecordBatchStreamImpl, but that is pull-based while this is push-based, so that may not be simple. Otherwise, this should be a complete implementation for C++; I'll follow up with Python and Java in separate PRs.\r\n   \r\n   ~EDIT: There are still some issues I'm working through (I discovered failures under some conditions while writing Python bindings).~ Now fixed.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T18:25:04.678+0000",
                    "updated": "2020-04-02T18:25:04.678+0000",
                    "started": "2020-04-02T18:25:04.677+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414952",
                    "issueId": "13295310"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295310/worklog/415468",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6656: ARROW-8297: [FlightRPC][C++] Implement Flight DoExchange for C++\nURL: https://github.com/apache/arrow/pull/6656#issuecomment-608407352\n \n \n   https://issues.apache.org/jira/browse/ARROW-8297\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-03T12:31:43.739+0000",
                    "updated": "2020-04-03T12:31:43.739+0000",
                    "started": "2020-04-03T12:31:43.739+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "415468",
                    "issueId": "13295310"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295310/worklog/432537",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6656:\nURL: https://github.com/apache/arrow/pull/6656#issuecomment-626328588\n\n\n   I've rebased and fixed the integration test. I also managed to fix the compilation failure on GCC 4.8.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-10T13:31:52.755+0000",
                    "updated": "2020-05-10T13:31:52.755+0000",
                    "started": "2020-05-10T13:31:52.754+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "432537",
                    "issueId": "13295310"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295310/worklog/436242",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6656:\nURL: https://github.com/apache/arrow/pull/6656#issuecomment-632376895\n\n\n   Sorry for the delay on this (I have been heads down on the kernels project). I can take a look at this again in the next few days\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-21T22:23:59.757+0000",
                    "updated": "2020-05-21T22:23:59.757+0000",
                    "started": "2020-05-21T22:23:59.757+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "436242",
                    "issueId": "13295310"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295310/worklog/436267",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6656:\nURL: https://github.com/apache/arrow/pull/6656#issuecomment-632392834\n\n\n   No worries, that's what I figured :)\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-21T23:16:56.758+0000",
                    "updated": "2020-05-21T23:16:56.758+0000",
                    "started": "2020-05-21T23:16:56.757+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "436267",
                    "issueId": "13295310"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295310/worklog/437282",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #6656:\nURL: https://github.com/apache/arrow/pull/6656#discussion_r430370738\n\n\n\n##########\nFile path: cpp/src/arrow/flight/server.cc\n##########\n@@ -240,6 +273,90 @@ class GrpcServerAuthSender : public ServerAuthSender {\n   grpc::ServerReaderWriter<pb::HandshakeResponse, pb::HandshakeRequest>* stream_;\n };\n \n+class GrpcMessageWriter : public FlightMessageWriter {\n\nReview comment:\n       I renamed this `DoExchangeMessageWriter` since that's the only place it's used.\n\n##########\nFile path: cpp/src/arrow/flight/client.cc\n##########\n@@ -91,6 +85,134 @@ struct ClientRpc {\n   }\n };\n \n+/// Helper that manages Finish() of a gRPC stream.\n+///\n+/// When we encounter an error (e.g. could not decode an IPC message),\n+/// we want to provide both the client-side error context and any\n+/// available server-side context. This helper helps wrap up that\n+/// logic.\n+///\n+/// This class protects the stream with a flag (so that Finish is\n+/// idempotent), and drains the read side (so that Finish won't hang).\n+template <typename Stream, typename ReadT>\n\nReview comment:\n       Through `FinishableWritableStream` it gets templated with both `internal::FlightData` and `pb::PutResult`, so we do need the template parameter unfortunately.\n\n##########\nFile path: cpp/src/arrow/flight/server.cc\n##########\n@@ -240,6 +273,90 @@ class GrpcServerAuthSender : public ServerAuthSender {\n   grpc::ServerReaderWriter<pb::HandshakeResponse, pb::HandshakeRequest>* stream_;\n };\n \n+class GrpcMessageWriter : public FlightMessageWriter {\n+ public:\n+  explicit GrpcMessageWriter(\n+      grpc::ServerReaderWriter<pb::FlightData, pb::FlightData>* stream)\n+      : stream_(stream), ipc_options_(ipc::IpcOptions::Defaults()) {}\n+\n+  Status Begin(const std::shared_ptr<Schema>& schema) override {\n+    if (started_) {\n+      return Status::Invalid(\"This writer has already been started.\");\n+    }\n+    started_ = true;\n+\n+    FlightPayload schema_payload;\n+    RETURN_NOT_OK(ipc::internal::GetSchemaPayload(\n+        *schema, ipc_options_, &dictionary_memo_, &schema_payload.ipc_message));\n+    return WritePayload(schema_payload);\n+  }\n+\n+  Status WriteRecordBatch(const RecordBatch& batch) override {\n+    return WriteWithMetadata(batch, nullptr);\n+  }\n+\n+  Status WriteMetadata(std::shared_ptr<Buffer> app_metadata) override {\n+    FlightPayload payload{};\n+    payload.app_metadata = app_metadata;\n+    return WritePayload(payload);\n+  }\n+\n+  Status WriteWithMetadata(const RecordBatch& batch,\n+                           std::shared_ptr<Buffer> app_metadata) override {\n+    RETURN_NOT_OK(CheckStarted());\n+    RETURN_NOT_OK(EnsureDictionariesWritten(batch));\n+    FlightPayload payload{};\n+    if (app_metadata) {\n+      payload.app_metadata = app_metadata;\n+    }\n+    RETURN_NOT_OK(\n+        ipc::internal::GetRecordBatchPayload(batch, ipc_options_, &payload.ipc_message));\n+    return WritePayload(payload);\n+  }\n+\n+  Status Close() override {\n+    // It's fine to Close() without writing data\n+    return Status::OK();\n+  }\n+\n+ private:\n+  Status WritePayload(const FlightPayload& payload) {\n+    if (!internal::WritePayload(payload, stream_)) {\n+      // gRPC doesn't give us any way to find what the error was (if any).\n+      return Status::IOError(\"Could not write payload to stream\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status CheckStarted() {\n+    if (!started_) {\n+      return Status::Invalid(\"This writer is not started. Call Begin() with a schema\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status EnsureDictionariesWritten(const RecordBatch& batch) {\n+    if (dictionaries_written_) {\n+      return Status::OK();\n+    }\n+    dictionaries_written_ = true;\n+    RETURN_NOT_OK(ipc::CollectDictionaries(batch, &dictionary_memo_));\n+    for (auto& pair : dictionary_memo_.id_to_dictionary()) {\n\nReview comment:\n       Fixed.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-27T03:28:07.323+0000",
                    "updated": "2020-05-27T03:28:07.323+0000",
                    "started": "2020-05-27T03:28:07.322+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "437282",
                    "issueId": "13295310"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295310/worklog/437327",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #6656:\nURL: https://github.com/apache/arrow/pull/6656\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-27T03:35:29.200+0000",
                    "updated": "2020-05-27T03:35:29.200+0000",
                    "started": "2020-05-27T03:35:29.200+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "437327",
                    "issueId": "13295310"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295310/worklog/437341",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #6656:\nURL: https://github.com/apache/arrow/pull/6656#discussion_r430104604\n\n\n\n##########\nFile path: cpp/src/arrow/flight/server.cc\n##########\n@@ -240,6 +273,90 @@ class GrpcServerAuthSender : public ServerAuthSender {\n   grpc::ServerReaderWriter<pb::HandshakeResponse, pb::HandshakeRequest>* stream_;\n };\n \n+class GrpcMessageWriter : public FlightMessageWriter {\n+ public:\n+  explicit GrpcMessageWriter(\n+      grpc::ServerReaderWriter<pb::FlightData, pb::FlightData>* stream)\n+      : stream_(stream), ipc_options_(ipc::IpcOptions::Defaults()) {}\n+\n+  Status Begin(const std::shared_ptr<Schema>& schema) override {\n+    if (started_) {\n+      return Status::Invalid(\"This writer has already been started.\");\n+    }\n+    started_ = true;\n+\n+    FlightPayload schema_payload;\n+    RETURN_NOT_OK(ipc::internal::GetSchemaPayload(\n+        *schema, ipc_options_, &dictionary_memo_, &schema_payload.ipc_message));\n+    return WritePayload(schema_payload);\n+  }\n+\n+  Status WriteRecordBatch(const RecordBatch& batch) override {\n+    return WriteWithMetadata(batch, nullptr);\n+  }\n+\n+  Status WriteMetadata(std::shared_ptr<Buffer> app_metadata) override {\n+    FlightPayload payload{};\n+    payload.app_metadata = app_metadata;\n+    return WritePayload(payload);\n+  }\n+\n+  Status WriteWithMetadata(const RecordBatch& batch,\n+                           std::shared_ptr<Buffer> app_metadata) override {\n+    RETURN_NOT_OK(CheckStarted());\n+    RETURN_NOT_OK(EnsureDictionariesWritten(batch));\n+    FlightPayload payload{};\n+    if (app_metadata) {\n+      payload.app_metadata = app_metadata;\n+    }\n+    RETURN_NOT_OK(\n+        ipc::internal::GetRecordBatchPayload(batch, ipc_options_, &payload.ipc_message));\n+    return WritePayload(payload);\n+  }\n+\n+  Status Close() override {\n+    // It's fine to Close() without writing data\n+    return Status::OK();\n+  }\n+\n+ private:\n+  Status WritePayload(const FlightPayload& payload) {\n+    if (!internal::WritePayload(payload, stream_)) {\n+      // gRPC doesn't give us any way to find what the error was (if any).\n+      return Status::IOError(\"Could not write payload to stream\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status CheckStarted() {\n+    if (!started_) {\n+      return Status::Invalid(\"This writer is not started. Call Begin() with a schema\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status EnsureDictionariesWritten(const RecordBatch& batch) {\n+    if (dictionaries_written_) {\n+      return Status::OK();\n+    }\n+    dictionaries_written_ = true;\n+    RETURN_NOT_OK(ipc::CollectDictionaries(batch, &dictionary_memo_));\n+    for (auto& pair : dictionary_memo_.id_to_dictionary()) {\n\nReview comment:\n       I believe this needs to be rebased\n\n##########\nFile path: cpp/src/arrow/flight/client.cc\n##########\n@@ -91,6 +85,134 @@ struct ClientRpc {\n   }\n };\n \n+/// Helper that manages Finish() of a gRPC stream.\n+///\n+/// When we encounter an error (e.g. could not decode an IPC message),\n+/// we want to provide both the client-side error context and any\n+/// available server-side context. This helper helps wrap up that\n+/// logic.\n+///\n+/// This class protects the stream with a flag (so that Finish is\n+/// idempotent), and drains the read side (so that Finish won't hang).\n+template <typename Stream, typename ReadT>\n\nReview comment:\n       `ReadT` is always FlightData, right?\n\n##########\nFile path: cpp/src/arrow/flight/server.cc\n##########\n@@ -240,6 +273,90 @@ class GrpcServerAuthSender : public ServerAuthSender {\n   grpc::ServerReaderWriter<pb::HandshakeResponse, pb::HandshakeRequest>* stream_;\n };\n \n+class GrpcMessageWriter : public FlightMessageWriter {\n\nReview comment:\n       Is there possibly a clearer name for this class?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-27T03:37:47.444+0000",
                    "updated": "2020-05-27T03:37:47.444+0000",
                    "started": "2020-05-27T03:37:47.443+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "437341",
                    "issueId": "13295310"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295310/worklog/437361",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6656:\nURL: https://github.com/apache/arrow/pull/6656#issuecomment-633991622\n\n\n   > Overall this looks OK to me, some of the fine details I'm unable to scrutinize super closely but I trust you and the test coverage certainly will help should refactoring be necessary. This will have to be rebased because of changes in arrow/ipc/dictionary.h but otherwise I'm fine with this being merged\r\n   \r\n   Thanks for the review! I'm happy to answer any questions about the details/add comments where necessary if you are curious.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-27T03:40:18.100+0000",
                    "updated": "2020-05-27T03:40:18.100+0000",
                    "started": "2020-05-27T03:40:18.100+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "437361",
                    "issueId": "13295310"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295310/worklog/437452",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6656:\nURL: https://github.com/apache/arrow/pull/6656#issuecomment-633757258\n\n\n   Also congrats on getting this working, not easy\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-27T03:51:37.293+0000",
                    "updated": "2020-05-27T03:51:37.293+0000",
                    "started": "2020-05-27T03:51:37.293+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "437452",
                    "issueId": "13295310"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295310/worklog/437633",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kiszk commented on pull request #6656:\nURL: https://github.com/apache/arrow/pull/6656#issuecomment-634421222\n\n\n   This change causes the build failure of arrow-flight on s390x at https://travis-ci.org/github/apache/arrow/jobs/691282162#L942\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-27T04:30:24.604+0000",
                    "updated": "2020-05-27T04:30:24.604+0000",
                    "started": "2020-05-27T04:30:24.604+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "437633",
                    "issueId": "13295310"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295310/worklog/437778",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6656:\nURL: https://github.com/apache/arrow/pull/6656#issuecomment-634650667\n\n\n   Sorry about that, for posterity this is being worked on in https://github.com/apache/arrow/pull/7277.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-27T13:13:20.423+0000",
                    "updated": "2020-05-27T13:13:20.423+0000",
                    "started": "2020-05-27T13:13:20.423+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "437778",
                    "issueId": "13295310"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 11400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@26c2b895[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@40f9acd5[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4cb55003[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@41a7c244[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32bffeb8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4f09ca60[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29dabeca[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5690fc57[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1b178203[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1a4c01cb[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@661cd0a6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@37bffa76[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 11400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue May 26 15:33:08 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-05-26T15:33:08.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8297/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-03-31T16:53:22.000+0000",
        "updated": "2020-05-27T13:13:21.000+0000",
        "timeoriginalestimate": null,
        "description": "As described in the mailing list vote.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 11400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[FlightRPC][C++] Implement Flight DoExchange for C++",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13295310/comment/17116828",
                    "id": "17116828",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 6656\n[https://github.com/apache/arrow/pull/6656]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-05-26T15:33:08.928+0000",
                    "updated": "2020-05-26T15:33:08.928+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0d4mw:",
        "customfield_12314139": null
    }
}