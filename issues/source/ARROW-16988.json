{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13470345",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470345",
    "key": "ARROW-16988",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "substrait"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12643503",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12643503",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13426718",
                    "key": "ARROW-15581",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426718",
                    "fields": {
                        "summary": "[C++] Add proper support for Substrait intervals",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12643505",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12643505",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13470519",
                    "key": "ARROW-17000",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470519",
                    "fields": {
                        "summary": "[C++] Relax/implement constraints on field metadata when converting Acero to Substrait",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12643501",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12643501",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13426316",
                    "key": "ARROW-15540",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426316",
                    "fields": {
                        "summary": "[C++] Allow the substrait consumer to accept plans with hints and nullable literals",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
            "name": "jvanstraten",
            "key": "JIRAUSER282962",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
            },
            "displayName": "Jeroen van Straten",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
            "name": "jvanstraten",
            "key": "JIRAUSER282962",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
            },
            "displayName": "Jeroen van Straten",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
            "name": "jvanstraten",
            "key": "JIRAUSER282962",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
            },
            "displayName": "Jeroen van Straten",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "aggregateprogress": {
            "progress": 15600,
            "total": 15600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15600,
            "total": 15600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16988/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 26,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470345/worklog/788555",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten opened a new pull request, #13537:\nURL: https://github.com/apache/arrow/pull/13537\n\n   This introduces the conversion options structure described in the associated JIRA. In the interest of keeping this small, no behavior has been modified to make use of the options yet; the newly added options can only be used to relax the conversion semantics, so the current implementation already satisfies all of them. I'll submit followup issues for features that can make use of the relaxed semantics.\n\n\n",
                    "created": "2022-07-07T09:56:01.683+0000",
                    "updated": "2022-07-07T09:56:01.683+0000",
                    "started": "2022-07-07T09:56:01.683+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "788555",
                    "issueId": "13470345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470345/worklog/788556",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13537:\nURL: https://github.com/apache/arrow/pull/13537#issuecomment-1177342978\n\n   https://issues.apache.org/jira/browse/ARROW-16988\n\n\n",
                    "created": "2022-07-07T10:00:34.685+0000",
                    "updated": "2022-07-07T10:00:34.685+0000",
                    "started": "2022-07-07T10:00:34.684+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "788556",
                    "issueId": "13470345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470345/worklog/790042",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13537:\nURL: https://github.com/apache/arrow/pull/13537#issuecomment-1181770186\n\n   There is a merge conflict, can you rebase and resolve it?\n\n\n",
                    "created": "2022-07-12T13:36:25.635+0000",
                    "updated": "2022-07-12T13:36:25.635+0000",
                    "started": "2022-07-12T13:36:25.635+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790042",
                    "issueId": "13470345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470345/worklog/790489",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13537:\nURL: https://github.com/apache/arrow/pull/13537#discussion_r920246357\n\n\n##########\ncpp/src/arrow/engine/substrait/options.h:\n##########\n@@ -0,0 +1,55 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This API is EXPERIMENTAL.\n+\n+#pragma once\n+\n+namespace arrow {\n+namespace engine {\n+\n+/// How strictly to adhere to the input structure when converting between Substrait and\n+/// Acero representations of a plan. This allows the user to trade conversion accuracy\n+/// for performance and lenience.\n+enum class ConversionStrictness {\n+  /// Prevent information loss by rejecting incoming plans that use features or contain\n+  /// metadata that cannot be exactly represented in the output format in a way that\n+  /// will round-trip. Relations/nodes must map one-to-one.\n+  PEDANTIC,\n\nReview Comment:\n   \"Pedantic\" conveys an idea of spurious or arbitrary constraints. Is this the case here? Otherwise \"strict\" would sound better IMHO.\n\n\n\n##########\ncpp/src/arrow/engine/substrait/options.h:\n##########\n@@ -0,0 +1,55 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This API is EXPERIMENTAL.\n+\n+#pragma once\n+\n+namespace arrow {\n+namespace engine {\n+\n+/// How strictly to adhere to the input structure when converting between Substrait and\n+/// Acero representations of a plan. This allows the user to trade conversion accuracy\n+/// for performance and lenience.\n+enum class ConversionStrictness {\n+  /// Prevent information loss by rejecting incoming plans that use features or contain\n+  /// metadata that cannot be exactly represented in the output format in a way that\n+  /// will round-trip. Relations/nodes must map one-to-one.\n+  PEDANTIC,\n+\n+  /// When an incoming plan uses a feature that cannot be exactly represented in the\n+  /// output format, attempt to emulate that feature as opposed to immediately\n+  /// rejecting the plan. For example, a Substrait SortRel with a complex sort key\n+  /// expression may be emulated using a project-order-project triple. Relations/nodes\n+  /// will thus map one-to-many.\n\nReview Comment:\n   ```suggestion\r\n     /// may thus map one-to-many.\r\n   ```\n\n\n\n##########\ncpp/src/arrow/engine/substrait/options.h:\n##########\n@@ -0,0 +1,55 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This API is EXPERIMENTAL.\n+\n+#pragma once\n+\n+namespace arrow {\n+namespace engine {\n+\n+/// How strictly to adhere to the input structure when converting between Substrait and\n+/// Acero representations of a plan. This allows the user to trade conversion accuracy\n+/// for performance and lenience.\n+enum class ConversionStrictness {\n+  /// Prevent information loss by rejecting incoming plans that use features or contain\n+  /// metadata that cannot be exactly represented in the output format in a way that\n+  /// will round-trip. Relations/nodes must map one-to-one.\n+  PEDANTIC,\n+\n+  /// When an incoming plan uses a feature that cannot be exactly represented in the\n+  /// output format, attempt to emulate that feature as opposed to immediately\n+  /// rejecting the plan. For example, a Substrait SortRel with a complex sort key\n+  /// expression may be emulated using a project-order-project triple. Relations/nodes\n+  /// will thus map one-to-many.\n+  PRESERVE_STRUCTURE,\n+\n+  /// Attempt to prevent performance-related regressions caused by differences in how\n+  /// operations are represented in the input and output format, by allowing for\n+  /// optimizations that cross structural boundaries. For example, the converter may\n+  /// collapse chains of project nodes into one.\n\nReview Comment:\n   A more general question is: is BEST_EFFORT always more lenient than PRESERVE_STRUCTURE?\r\n   In PRESERVE_STRUCTURE I see \"Relations/nodes will thus map one-to-many\", does BEST_EFFORT also allow the converse (relations/nodes mapping many-to-one)?\n\n\n\n##########\ncpp/src/arrow/engine/substrait/options.h:\n##########\n@@ -0,0 +1,55 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This API is EXPERIMENTAL.\n+\n+#pragma once\n+\n+namespace arrow {\n+namespace engine {\n+\n+/// How strictly to adhere to the input structure when converting between Substrait and\n+/// Acero representations of a plan. This allows the user to trade conversion accuracy\n+/// for performance and lenience.\n+enum class ConversionStrictness {\n+  /// Prevent information loss by rejecting incoming plans that use features or contain\n+  /// metadata that cannot be exactly represented in the output format in a way that\n+  /// will round-trip. Relations/nodes must map one-to-one.\n+  PEDANTIC,\n+\n+  /// When an incoming plan uses a feature that cannot be exactly represented in the\n+  /// output format, attempt to emulate that feature as opposed to immediately\n+  /// rejecting the plan. For example, a Substrait SortRel with a complex sort key\n+  /// expression may be emulated using a project-order-project triple. Relations/nodes\n+  /// will thus map one-to-many.\n+  PRESERVE_STRUCTURE,\n+\n+  /// Attempt to prevent performance-related regressions caused by differences in how\n+  /// operations are represented in the input and output format, by allowing for\n+  /// optimizations that cross structural boundaries. For example, the converter may\n+  /// collapse chains of project nodes into one.\n\nReview Comment:\n   Isn't collapsing of a chain of project nodes more of an optimization than conversion concern? The collapsed node should be strictly equivalent to the original chain AFAIU.\n\n\n\n",
                    "created": "2022-07-13T15:57:51.726+0000",
                    "updated": "2022-07-13T15:57:51.726+0000",
                    "started": "2022-07-13T15:57:51.726+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790489",
                    "issueId": "13470345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470345/worklog/790498",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13537:\nURL: https://github.com/apache/arrow/pull/13537#issuecomment-1183440299\n\n   Travis-CI issues on s390x look unrelated.\n\n\n",
                    "created": "2022-07-13T16:34:56.446+0000",
                    "updated": "2022-07-13T16:34:56.446+0000",
                    "started": "2022-07-13T16:34:56.446+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790498",
                    "issueId": "13470345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470345/worklog/790510",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13537:\nURL: https://github.com/apache/arrow/pull/13537#discussion_r920302519\n\n\n##########\ncpp/src/arrow/engine/substrait/options.h:\n##########\n@@ -0,0 +1,55 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This API is EXPERIMENTAL.\n+\n+#pragma once\n+\n+namespace arrow {\n+namespace engine {\n+\n+/// How strictly to adhere to the input structure when converting between Substrait and\n+/// Acero representations of a plan. This allows the user to trade conversion accuracy\n+/// for performance and lenience.\n+enum class ConversionStrictness {\n+  /// Prevent information loss by rejecting incoming plans that use features or contain\n+  /// metadata that cannot be exactly represented in the output format in a way that\n+  /// will round-trip. Relations/nodes must map one-to-one.\n\nReview Comment:\n   ```suggestion\r\n     /// will round-trip. Relations/nodes must map one-to-one.\r\n     ///\r\n     /// For example, any \"hint\" that Acero does not recognize will cause\r\n     /// conversion to fail.\r\n   ```\n\n\n\n##########\ncpp/src/arrow/engine/substrait/options.h:\n##########\n@@ -0,0 +1,55 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This API is EXPERIMENTAL.\n+\n+#pragma once\n+\n+namespace arrow {\n+namespace engine {\n+\n+/// How strictly to adhere to the input structure when converting between Substrait and\n+/// Acero representations of a plan. This allows the user to trade conversion accuracy\n+/// for performance and lenience.\n+enum class ConversionStrictness {\n+  /// Prevent information loss by rejecting incoming plans that use features or contain\n+  /// metadata that cannot be exactly represented in the output format in a way that\n+  /// will round-trip. Relations/nodes must map one-to-one.\n+  PEDANTIC,\n+\n+  /// When an incoming plan uses a feature that cannot be exactly represented in the\n+  /// output format, attempt to emulate that feature as opposed to immediately\n+  /// rejecting the plan. For example, a Substrait SortRel with a complex sort key\n+  /// expression may be emulated using a project-order-project triple. Relations/nodes\n+  /// will thus map one-to-many.\n\nReview Comment:\n   ```suggestion\r\n     /// expression may be emulated using a project-order-project triple.\r\n   ```\r\n   \r\n   I'm not sure this last sentence is needed.  I could imagine a scenario might exist where this would result in a many-to-one as well (or one to zero) if a node is deemed supplementary.\n\n\n\n",
                    "created": "2022-07-13T17:04:00.147+0000",
                    "updated": "2022-07-13T17:04:00.147+0000",
                    "started": "2022-07-13T17:04:00.146+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790510",
                    "issueId": "13470345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470345/worklog/790559",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten commented on code in PR #13537:\nURL: https://github.com/apache/arrow/pull/13537#discussion_r920406800\n\n\n##########\ncpp/src/arrow/engine/substrait/options.h:\n##########\n@@ -0,0 +1,55 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This API is EXPERIMENTAL.\n+\n+#pragma once\n+\n+namespace arrow {\n+namespace engine {\n+\n+/// How strictly to adhere to the input structure when converting between Substrait and\n+/// Acero representations of a plan. This allows the user to trade conversion accuracy\n+/// for performance and lenience.\n+enum class ConversionStrictness {\n+  /// Prevent information loss by rejecting incoming plans that use features or contain\n+  /// metadata that cannot be exactly represented in the output format in a way that\n+  /// will round-trip. Relations/nodes must map one-to-one.\n+  PEDANTIC,\n\nReview Comment:\n   > \"Pedantic\" conveys an idea of spurious or arbitrary constraints. Is this the case here?\r\n   \r\n   I'd say so, actually. \"Pedantic\" includes constraints such as rejecting an Acero plan for conversion to Substrait if the internal column names are not exactly what you'd get after round-tripping through Substrait (which cannot represent inner column names), even though the plan can be conveyed in Substrait perfectly well.\r\n   \r\n   > Otherwise \"strict\" would sound better IMHO.\r\n   \r\n   Strict implies to me to strictly conform to all the rules of the output format, i.e. don't make anything that's out of spec. But none of the options do that, so it feels kind of meaningless.\n\n\n\n",
                    "created": "2022-07-13T18:57:45.251+0000",
                    "updated": "2022-07-13T18:57:45.251+0000",
                    "started": "2022-07-13T18:57:45.251+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790559",
                    "issueId": "13470345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470345/worklog/790568",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten commented on code in PR #13537:\nURL: https://github.com/apache/arrow/pull/13537#discussion_r920425103\n\n\n##########\ncpp/src/arrow/engine/substrait/options.h:\n##########\n@@ -0,0 +1,55 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This API is EXPERIMENTAL.\n+\n+#pragma once\n+\n+namespace arrow {\n+namespace engine {\n+\n+/// How strictly to adhere to the input structure when converting between Substrait and\n+/// Acero representations of a plan. This allows the user to trade conversion accuracy\n+/// for performance and lenience.\n+enum class ConversionStrictness {\n+  /// Prevent information loss by rejecting incoming plans that use features or contain\n+  /// metadata that cannot be exactly represented in the output format in a way that\n+  /// will round-trip. Relations/nodes must map one-to-one.\n+  PEDANTIC,\n+\n+  /// When an incoming plan uses a feature that cannot be exactly represented in the\n+  /// output format, attempt to emulate that feature as opposed to immediately\n+  /// rejecting the plan. For example, a Substrait SortRel with a complex sort key\n+  /// expression may be emulated using a project-order-project triple. Relations/nodes\n+  /// will thus map one-to-many.\n+  PRESERVE_STRUCTURE,\n+\n+  /// Attempt to prevent performance-related regressions caused by differences in how\n+  /// operations are represented in the input and output format, by allowing for\n+  /// optimizations that cross structural boundaries. For example, the converter may\n+  /// collapse chains of project nodes into one.\n\nReview Comment:\n   > Isn't collapsing of a chain of project nodes more of an optimization than conversion concern? The collapsed node should be strictly equivalent to the original chain AFAIU.\r\n   \r\n   My reasoning for doing this is stated much more clearly in the JIRA issue, but tl;dr, the problem is that Substrait and Acero differ to such an extent that you can't map one-to-one without loss of information in basically any practical use case. So, whenever a feature is used at the input that doesn't have an exact match at the output the option comes into play:\r\n   \r\n    - PEDANTIC: reject the conversion; assert that there is no (known) information loss in the conversion. Plans should either round-trip back and forth exactly or not at all. Useful for testing and maybe debugging, but not really in practice. Note that this is the current behavior.\r\n    - PRESERVE_STRUCTURE: for every individual primitive in the incoming plan (node, expression, whatever) that can't be represented exactly in the output format, map to some collection of primitives instead to model the behavior, and only fail if this is also not possible. Even if the incoming plan is completely optimal, the returned plan probably won't be because of this expansion. Roundtrips back and forth will likely make the plan increasingly suboptimal. However, you could hypothetically add debug information to the plan a la gcc -O0 -g to trace every primitive back to exactly one primitive in the original plan.\r\n    - BEST_EFFORT: like PRESERVE_STRUCTURE, but prefer performance over structural accuracy; attempt to not regress in terms of plan performance. If the incoming plan was already aggressively optimized, the goal is for the output plan to not be substantially less performant.\r\n   \r\n   My reasoning for making the latter part of the conversion is roughly:\r\n   \r\n    - Some of these \"optimizations\" are very easy and performant to do while converting. Conversely, doing this afterwards requires building up an intermediate tree during conversion and then going over that tree again later. In fact, in some cases I've found it easier and less prone to dealing with special cases than exactly preserving structure.\r\n    - I foresee (hope for) a generic Substrait optimization engine. It'd be a shame if we can't leverage that, because the moment we convert from Substrait to Acero we immediately lose out on performance for trivial reasons.\r\n   \r\n   That being said, if Acero gets its own optimizer at some point this option won't be as useful anymore. I also don't intend for BEST_EFFORT to do any fancy optimizations; in particular, anything that involves more than the tree traversal we already have to do for the conversion doesn't belong there. That is, indeed, the job of an optimization engine. As such, I've formulated the docs for the option such that it's perfectly permissible for BEST_EFFORT to have the same behavior as PRESERVE_STRUCTURE, in case we want to factor the logic into a smarter optimizer at some point.\r\n   \r\n   > is BEST_EFFORT always more lenient than PRESERVE_STRUCTURE?\r\n   \r\n   If by \"lenient\" you mean \"how often it rejects a plan,\" with what I have in mind they'd be equal. However, I guess BEST_EFFORT could be more lenient, too. It certainly shouldn't be *less* lenient though.\r\n   \r\n   > does BEST_EFFORT also allow the converse (relations/nodes mapping many-to-one)?\r\n   \r\n   I'd say \"many to one\" is a subset of \"many to many,\" so yes. The behavior I have in mind for it indeed also does that.\n\n\n\n",
                    "created": "2022-07-13T19:22:23.430+0000",
                    "updated": "2022-07-13T19:22:23.430+0000",
                    "started": "2022-07-13T19:22:23.430+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790568",
                    "issueId": "13470345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470345/worklog/790571",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13537:\nURL: https://github.com/apache/arrow/pull/13537#discussion_r920427455\n\n\n##########\ncpp/src/arrow/engine/substrait/options.h:\n##########\n@@ -0,0 +1,55 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This API is EXPERIMENTAL.\n+\n+#pragma once\n+\n+namespace arrow {\n+namespace engine {\n+\n+/// How strictly to adhere to the input structure when converting between Substrait and\n+/// Acero representations of a plan. This allows the user to trade conversion accuracy\n+/// for performance and lenience.\n+enum class ConversionStrictness {\n+  /// Prevent information loss by rejecting incoming plans that use features or contain\n+  /// metadata that cannot be exactly represented in the output format in a way that\n+  /// will round-trip. Relations/nodes must map one-to-one.\n+  PEDANTIC,\n\nReview Comment:\n   Hmm... perhaps \"exact_roundtrip\" or \"perfect_roundtrip\" based on what I'm reading below?\n\n\n\n",
                    "created": "2022-07-13T19:25:38.968+0000",
                    "updated": "2022-07-13T19:25:38.968+0000",
                    "started": "2022-07-13T19:25:38.968+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790571",
                    "issueId": "13470345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470345/worklog/790573",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten commented on code in PR #13537:\nURL: https://github.com/apache/arrow/pull/13537#discussion_r920428039\n\n\n##########\ncpp/src/arrow/engine/substrait/options.h:\n##########\n@@ -0,0 +1,55 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This API is EXPERIMENTAL.\n+\n+#pragma once\n+\n+namespace arrow {\n+namespace engine {\n+\n+/// How strictly to adhere to the input structure when converting between Substrait and\n+/// Acero representations of a plan. This allows the user to trade conversion accuracy\n+/// for performance and lenience.\n+enum class ConversionStrictness {\n+  /// Prevent information loss by rejecting incoming plans that use features or contain\n+  /// metadata that cannot be exactly represented in the output format in a way that\n+  /// will round-trip. Relations/nodes must map one-to-one.\n+  PEDANTIC,\n+\n+  /// When an incoming plan uses a feature that cannot be exactly represented in the\n+  /// output format, attempt to emulate that feature as opposed to immediately\n+  /// rejecting the plan. For example, a Substrait SortRel with a complex sort key\n+  /// expression may be emulated using a project-order-project triple. Relations/nodes\n+  /// will thus map one-to-many.\n\nReview Comment:\n   I'm not sure what you mean by \"supplementary node.\" Can you give an example?\r\n   \r\n   If you mean for example a no-op project node, my intention for PRESERVE_STRUCTURE is to keep that no-op project node in there. Removing it would be an optimization-esque thing and thus belongs in BEST_EFFORT.\n\n\n\n",
                    "created": "2022-07-13T19:26:28.773+0000",
                    "updated": "2022-07-13T19:26:28.773+0000",
                    "started": "2022-07-13T19:26:28.773+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790573",
                    "issueId": "13470345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470345/worklog/790575",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13537:\nURL: https://github.com/apache/arrow/pull/13537#discussion_r920428105\n\n\n##########\ncpp/src/arrow/engine/substrait/options.h:\n##########\n@@ -0,0 +1,55 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This API is EXPERIMENTAL.\n+\n+#pragma once\n+\n+namespace arrow {\n+namespace engine {\n+\n+/// How strictly to adhere to the input structure when converting between Substrait and\n+/// Acero representations of a plan. This allows the user to trade conversion accuracy\n+/// for performance and lenience.\n+enum class ConversionStrictness {\n+  /// Prevent information loss by rejecting incoming plans that use features or contain\n+  /// metadata that cannot be exactly represented in the output format in a way that\n+  /// will round-trip. Relations/nodes must map one-to-one.\n+  PEDANTIC,\n+\n+  /// When an incoming plan uses a feature that cannot be exactly represented in the\n+  /// output format, attempt to emulate that feature as opposed to immediately\n+  /// rejecting the plan. For example, a Substrait SortRel with a complex sort key\n+  /// expression may be emulated using a project-order-project triple. Relations/nodes\n+  /// will thus map one-to-many.\n+  PRESERVE_STRUCTURE,\n+\n+  /// Attempt to prevent performance-related regressions caused by differences in how\n+  /// operations are represented in the input and output format, by allowing for\n+  /// optimizations that cross structural boundaries. For example, the converter may\n+  /// collapse chains of project nodes into one.\n\nReview Comment:\n   Ok, I think the BEST_EFFORT description you gave just above is clearer than in the PR :-)\n\n\n\n",
                    "created": "2022-07-13T19:26:38.795+0000",
                    "updated": "2022-07-13T19:26:38.795+0000",
                    "started": "2022-07-13T19:26:38.795+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790575",
                    "issueId": "13470345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470345/worklog/790580",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten commented on PR #13537:\nURL: https://github.com/apache/arrow/pull/13537#issuecomment-1183610872\n\n   > First, Is there a need/ask for PRESERVE_STRUCTURE?\r\n   \r\n   I have to admit I'm having a hard time coming up with a use case for it right now. It just feels right to keep it in there. By analogy with compiler flags:\r\n   \r\n    - PEDANTIC is like `gcc -Werror -Wall -pedantic-errors`: \"if there is even the slightest hint of something maybe being wrong, please scream bloody murder.\"\r\n    - PRESERVE_STRUCTURE is like `gcc -g -O0`: \"if I write something stupid, please keep it exactly equally stupid, because I'm trying to figure out why my stuff isn't working.\" This doesn't really apply here (yet) because Substrait and (presumably) Acero both lack a means to annotate nodes with debug information, but I could still see it be useful when a user is debugging a query that somehow passes through Arrow.\r\n    - BEST_EFFORT is like `gcc -O3` (or perhaps more accurately just `gcc` because we're not involving a proper optimization engine): \"I just want my code/plan to work, and preferably work fast. Don't even tell me if I did something stupid, because I'm not interested in that right now.\"\r\n   \r\n   > Second, should the ExtensionSet be made an argument of conversion options?\r\n   \r\n   Maybe. It's part of the reason why I stuffed the enum in a struct. However, it's worth noting that ExtensionSet is mutated by the conversion, so it's not strictly speaking just an option.\r\n   \r\n   > Alternatively, we could bite the bullet and make the Substrait conversion object oriented.\r\n   \r\n   @vibhatha and I discussed this offline for a bit and agree that this would be better. See ARROW-16987. That would be a longer-term thing though, so I submitted this to not have the logic for these things be blocked by a possible refactoring later.\r\n   \r\n   ---\r\n   \r\n   I'll address the suggested changes to comments and the likes when we reach consensus about the options themselves.\n\n\n",
                    "created": "2022-07-13T19:46:05.952+0000",
                    "updated": "2022-07-13T19:46:05.952+0000",
                    "started": "2022-07-13T19:46:05.952+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790580",
                    "issueId": "13470345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470345/worklog/790581",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten commented on code in PR #13537:\nURL: https://github.com/apache/arrow/pull/13537#discussion_r920445140\n\n\n##########\ncpp/src/arrow/engine/substrait/options.h:\n##########\n@@ -0,0 +1,55 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This API is EXPERIMENTAL.\n+\n+#pragma once\n+\n+namespace arrow {\n+namespace engine {\n+\n+/// How strictly to adhere to the input structure when converting between Substrait and\n+/// Acero representations of a plan. This allows the user to trade conversion accuracy\n+/// for performance and lenience.\n+enum class ConversionStrictness {\n+  /// Prevent information loss by rejecting incoming plans that use features or contain\n+  /// metadata that cannot be exactly represented in the output format in a way that\n+  /// will round-trip. Relations/nodes must map one-to-one.\n+  PEDANTIC,\n\nReview Comment:\n   Sure, that probably captures it better.\n\n\n\n",
                    "created": "2022-07-13T19:48:51.120+0000",
                    "updated": "2022-07-13T19:48:51.120+0000",
                    "started": "2022-07-13T19:48:51.119+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790581",
                    "issueId": "13470345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470345/worklog/790582",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten commented on code in PR #13537:\nURL: https://github.com/apache/arrow/pull/13537#discussion_r920445549\n\n\n##########\ncpp/src/arrow/engine/substrait/options.h:\n##########\n@@ -0,0 +1,55 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This API is EXPERIMENTAL.\n+\n+#pragma once\n+\n+namespace arrow {\n+namespace engine {\n+\n+/// How strictly to adhere to the input structure when converting between Substrait and\n+/// Acero representations of a plan. This allows the user to trade conversion accuracy\n+/// for performance and lenience.\n+enum class ConversionStrictness {\n+  /// Prevent information loss by rejecting incoming plans that use features or contain\n+  /// metadata that cannot be exactly represented in the output format in a way that\n+  /// will round-trip. Relations/nodes must map one-to-one.\n+  PEDANTIC,\n+\n+  /// When an incoming plan uses a feature that cannot be exactly represented in the\n+  /// output format, attempt to emulate that feature as opposed to immediately\n+  /// rejecting the plan. For example, a Substrait SortRel with a complex sort key\n+  /// expression may be emulated using a project-order-project triple. Relations/nodes\n+  /// will thus map one-to-many.\n+  PRESERVE_STRUCTURE,\n+\n+  /// Attempt to prevent performance-related regressions caused by differences in how\n+  /// operations are represented in the input and output format, by allowing for\n+  /// optimizations that cross structural boundaries. For example, the converter may\n+  /// collapse chains of project nodes into one.\n\nReview Comment:\n   Got it, I'll reformulate. :)\n\n\n\n",
                    "created": "2022-07-13T19:49:21.181+0000",
                    "updated": "2022-07-13T19:49:21.181+0000",
                    "started": "2022-07-13T19:49:21.180+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790582",
                    "issueId": "13470345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470345/worklog/790583",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten commented on code in PR #13537:\nURL: https://github.com/apache/arrow/pull/13537#discussion_r920445549\n\n\n##########\ncpp/src/arrow/engine/substrait/options.h:\n##########\n@@ -0,0 +1,55 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This API is EXPERIMENTAL.\n+\n+#pragma once\n+\n+namespace arrow {\n+namespace engine {\n+\n+/// How strictly to adhere to the input structure when converting between Substrait and\n+/// Acero representations of a plan. This allows the user to trade conversion accuracy\n+/// for performance and lenience.\n+enum class ConversionStrictness {\n+  /// Prevent information loss by rejecting incoming plans that use features or contain\n+  /// metadata that cannot be exactly represented in the output format in a way that\n+  /// will round-trip. Relations/nodes must map one-to-one.\n+  PEDANTIC,\n+\n+  /// When an incoming plan uses a feature that cannot be exactly represented in the\n+  /// output format, attempt to emulate that feature as opposed to immediately\n+  /// rejecting the plan. For example, a Substrait SortRel with a complex sort key\n+  /// expression may be emulated using a project-order-project triple. Relations/nodes\n+  /// will thus map one-to-many.\n+  PRESERVE_STRUCTURE,\n+\n+  /// Attempt to prevent performance-related regressions caused by differences in how\n+  /// operations are represented in the input and output format, by allowing for\n+  /// optimizations that cross structural boundaries. For example, the converter may\n+  /// collapse chains of project nodes into one.\n\nReview Comment:\n   Got it, I'll reformulate. :) (probably tomorrow though)\n\n\n\n",
                    "created": "2022-07-13T19:49:47.376+0000",
                    "updated": "2022-07-13T19:49:47.376+0000",
                    "started": "2022-07-13T19:49:47.376+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790583",
                    "issueId": "13470345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470345/worklog/790599",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13537:\nURL: https://github.com/apache/arrow/pull/13537#discussion_r920510226\n\n\n##########\ncpp/src/arrow/engine/substrait/options.h:\n##########\n@@ -0,0 +1,55 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This API is EXPERIMENTAL.\n+\n+#pragma once\n+\n+namespace arrow {\n+namespace engine {\n+\n+/// How strictly to adhere to the input structure when converting between Substrait and\n+/// Acero representations of a plan. This allows the user to trade conversion accuracy\n+/// for performance and lenience.\n+enum class ConversionStrictness {\n+  /// Prevent information loss by rejecting incoming plans that use features or contain\n+  /// metadata that cannot be exactly represented in the output format in a way that\n+  /// will round-trip. Relations/nodes must map one-to-one.\n+  PEDANTIC,\n+\n+  /// When an incoming plan uses a feature that cannot be exactly represented in the\n+  /// output format, attempt to emulate that feature as opposed to immediately\n+  /// rejecting the plan. For example, a Substrait SortRel with a complex sort key\n+  /// expression may be emulated using a project-order-project triple. Relations/nodes\n+  /// will thus map one-to-many.\n\nReview Comment:\n   Looking through the current nodes I can't come up with a good concrete example.  Perhaps something like a sort node.  We don't support mid-plan sort in Acero today (because we can't maintain the ordering after the node) but we do support sorting sinks (because there is no \"after the node\").  So it's possible we could have a RunSubstraitSorted function that allows plans that end in a sort node even though the sort node itself wouldn't be in the actual plan that gets run (just the sink would be sorted).\r\n   \r\n   It's a bit of a stretch though.  Either way, I think this is more of an implementation detail and not something to concern users.  \n\n\n\n",
                    "created": "2022-07-13T21:01:11.299+0000",
                    "updated": "2022-07-13T21:01:11.299+0000",
                    "started": "2022-07-13T21:01:11.299+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790599",
                    "issueId": "13470345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470345/worklog/790601",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #13537:\nURL: https://github.com/apache/arrow/pull/13537#issuecomment-1183680809\n\n   > PRESERVE_STRUCTURE is like gcc -g -O0: \"if I write something stupid, please keep it exactly equally stupid, because I'm trying to figure out why my stuff isn't working.\" This doesn't really apply here (yet) because Substrait and (presumably) Acero both lack a means to annotate nodes with debug information, but I could still see it be useful when a user is debugging a query that somehow passes through Arrow.\r\n   \r\n   This is probably a workable explanation.  My primary concern is that I want a user to easily know which option to pick.  Can we update the description with something like \"This may be useful if you are debugging plan execution and want to avoid optimizations that may restructure the plan.\"\r\n   \r\n   > Maybe. It's part of the reason why I stuffed the enum in a struct. However, it's worth noting that ExtensionSet is mutated by the conversion, so it's not strictly speaking just an option.\r\n   \r\n   We have some precedence for this and signal it by passing the argument via pointer.  For example, `SinkNodeOptions::generator`.  However, in those cases we are usually pointing to \"infrastructure\".  I understand your reasoning.  I am not terribly fond of \"options\" objects that become \"context\" objects.\r\n   \r\n   > @vibhatha and I discussed this offline for a bit and agree that this would be better. See [ARROW-16987](https://issues.apache.org/jira/browse/ARROW-16987). That would be a longer-term thing though, so I submitted this to not have the logic for these things be blocked by a possible refactoring later.\r\n   \r\n   If it's going to be refactored later then I'm fine with this for now.\n\n\n",
                    "created": "2022-07-13T21:09:31.102+0000",
                    "updated": "2022-07-13T21:09:31.102+0000",
                    "started": "2022-07-13T21:09:31.101+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790601",
                    "issueId": "13470345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470345/worklog/791157",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten commented on PR #13537:\nURL: https://github.com/apache/arrow/pull/13537#issuecomment-1184915536\n\n   Rebased, s/PEDANTIC/EXACT_ROUNDTRIP/g, and reworded the comments.\n\n\n",
                    "created": "2022-07-14T21:33:16.736+0000",
                    "updated": "2022-07-14T21:33:16.736+0000",
                    "started": "2022-07-14T21:33:16.735+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "791157",
                    "issueId": "13470345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470345/worklog/792310",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13537:\nURL: https://github.com/apache/arrow/pull/13537#discussion_r923710217\n\n\n##########\ncpp/src/arrow/engine/substrait/options.h:\n##########\n@@ -0,0 +1,64 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This API is EXPERIMENTAL.\n+\n+#pragma once\n+\n+namespace arrow {\n+namespace engine {\n+\n+/// How strictly to adhere to the input structure when converting between Substrait and\n+/// Acero representations of a plan. This allows the user to trade conversion accuracy\n+/// for performance and lenience.\n+enum class ConversionStrictness {\n+  /// When a primitive is used at the input that doesn't have an exact match at the\n+  /// output, reject the conversion. This effectively asserts that there is no (known)\n+  /// information loss in the conversion, and that plans should either round-trip back and\n+  /// forth exactly or not at all. This option is primarily intended for testing and\n+  /// debugging.\n+  EXACT_ROUNDTRIP,\n+\n+  /// When a primitive is used at the input that doesn't have an exact match at the\n+  /// output, attempt to model it with some collection of primitives at the output. This\n+  /// means that even if the incoming plan is completely optimal by some metric, the\n+  /// returned plan is fairly likely to not be optimal anymore, and round-trips back and\n+  /// forth may make the plan increasingly suboptimal. However, every primitive at the\n+  /// output can be (manually) traced back to exactly one primitive at the input, which\n+  /// may be useful when debugging.\n+  PRESERVE_STRUCTURE,\n+\n+  /// Behaves like PRESERVE_STRUCTURE, but prefers performance over structural accuracy.\n+  /// Basic optimizations *may* be applied, in order to attempt to not regress in terms of\n+  /// plan performance: if the incoming plan was already aggressively optimized, the goal\n+  /// is for the output plan to not be less performant. In practical use cases, this is\n+  /// probably the option you want.\n+  ///\n+  /// Note that no guarantees are made on top of PRESERVE_STRUCTURE. Past and future\n+  /// versions of Arrow may even ignore this option entirely and treat it exactly like\n+  /// PRESERVE_STRUCTURE.\n+  BEST_EFFORT,\n+};\n+\n+/// Controls how to convert between Substrait and Acero representations of a plan.\n\nReview Comment:\n   ```suggestion\r\n   /// Options that control the conversion between Substrait and Acero representations of a plan.\r\n   ```\n\n\n\n##########\ncpp/src/arrow/engine/substrait/options.h:\n##########\n@@ -0,0 +1,64 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This API is EXPERIMENTAL.\n+\n+#pragma once\n+\n+namespace arrow {\n+namespace engine {\n+\n+/// How strictly to adhere to the input structure when converting between Substrait and\n+/// Acero representations of a plan. This allows the user to trade conversion accuracy\n+/// for performance and lenience.\n+enum class ConversionStrictness {\n+  /// When a primitive is used at the input that doesn't have an exact match at the\n+  /// output, reject the conversion. This effectively asserts that there is no (known)\n+  /// information loss in the conversion, and that plans should either round-trip back and\n+  /// forth exactly or not at all. This option is primarily intended for testing and\n+  /// debugging.\n+  EXACT_ROUNDTRIP,\n+\n+  /// When a primitive is used at the input that doesn't have an exact match at the\n+  /// output, attempt to model it with some collection of primitives at the output. This\n+  /// means that even if the incoming plan is completely optimal by some metric, the\n+  /// returned plan is fairly likely to not be optimal anymore, and round-trips back and\n+  /// forth may make the plan increasingly suboptimal. However, every primitive at the\n+  /// output can be (manually) traced back to exactly one primitive at the input, which\n+  /// may be useful when debugging.\n+  PRESERVE_STRUCTURE,\n+\n+  /// Behaves like PRESERVE_STRUCTURE, but prefers performance over structural accuracy.\n+  /// Basic optimizations *may* be applied, in order to attempt to not regress in terms of\n+  /// plan performance: if the incoming plan was already aggressively optimized, the goal\n+  /// is for the output plan to not be less performant. In practical use cases, this is\n+  /// probably the option you want.\n+  ///\n+  /// Note that no guarantees are made on top of PRESERVE_STRUCTURE. Past and future\n+  /// versions of Arrow may even ignore this option entirely and treat it exactly like\n+  /// PRESERVE_STRUCTURE.\n+  BEST_EFFORT,\n+};\n+\n+/// Controls how to convert between Substrait and Acero representations of a plan.\n+struct ConversionOptions {\n+  /// Controls how strictly the converter is to adhere to the structure of the input.\n\nReview Comment:\n   ```suggestion\r\n     /// \\brief How strictly the converter should adhere to the structure of the input.\r\n   ```\n\n\n\n##########\ncpp/src/arrow/engine/substrait/options.h:\n##########\n@@ -0,0 +1,64 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This API is EXPERIMENTAL.\n+\n+#pragma once\n+\n+namespace arrow {\n+namespace engine {\n+\n+/// How strictly to adhere to the input structure when converting between Substrait and\n+/// Acero representations of a plan. This allows the user to trade conversion accuracy\n+/// for performance and lenience.\n+enum class ConversionStrictness {\n+  /// When a primitive is used at the input that doesn't have an exact match at the\n+  /// output, reject the conversion. This effectively asserts that there is no (known)\n+  /// information loss in the conversion, and that plans should either round-trip back and\n+  /// forth exactly or not at all. This option is primarily intended for testing and\n+  /// debugging.\n+  EXACT_ROUNDTRIP,\n+\n+  /// When a primitive is used at the input that doesn't have an exact match at the\n+  /// output, attempt to model it with some collection of primitives at the output. This\n+  /// means that even if the incoming plan is completely optimal by some metric, the\n+  /// returned plan is fairly likely to not be optimal anymore, and round-trips back and\n+  /// forth may make the plan increasingly suboptimal. However, every primitive at the\n+  /// output can be (manually) traced back to exactly one primitive at the input, which\n+  /// may be useful when debugging.\n+  PRESERVE_STRUCTURE,\n+\n+  /// Behaves like PRESERVE_STRUCTURE, but prefers performance over structural accuracy.\n+  /// Basic optimizations *may* be applied, in order to attempt to not regress in terms of\n+  /// plan performance: if the incoming plan was already aggressively optimized, the goal\n+  /// is for the output plan to not be less performant. In practical use cases, this is\n+  /// probably the option you want.\n+  ///\n+  /// Note that no guarantees are made on top of PRESERVE_STRUCTURE. Past and future\n+  /// versions of Arrow may even ignore this option entirely and treat it exactly like\n+  /// PRESERVE_STRUCTURE.\n+  BEST_EFFORT,\n+};\n+\n+/// Controls how to convert between Substrait and Acero representations of a plan.\n+struct ConversionOptions {\n+  /// Controls how strictly the converter is to adhere to the structure of the input.\n+  ConversionStrictness strictness = ConversionStrictness::EXACT_ROUNDTRIP;\n\nReview Comment:\n   In the comments for `BEST_EFFORT` we say \"In practical use cases, this is probably the option you want.\" so why isn't that the default?\n\n\n\n",
                    "created": "2022-07-18T18:54:02.730+0000",
                    "updated": "2022-07-18T18:54:02.730+0000",
                    "started": "2022-07-18T18:54:02.729+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792310",
                    "issueId": "13470345"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470345/worklog/792316",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jvanstraten commented on code in PR #13537:\nURL: https://github.com/apache/arrow/pull/13537#discussion_r923739152\n\n\n##########\ncpp/src/arrow/engine/substrait/options.h:\n##########\n@@ -0,0 +1,64 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This API is EXPERIMENTAL.\n+\n+#pragma once\n+\n+namespace arrow {\n+namespace engine {\n+\n+/// How strictly to adhere to the input structure when converting between Substrait and\n+/// Acero representations of a plan. This allows the user to trade conversion accuracy\n+/// for performance and lenience.\n+enum class ConversionStrictness {\n+  /// When a primitive is used at the input that doesn't have an exact match at the\n+  /// output, reject the conversion. This effectively asserts that there is no (known)\n+  /// information loss in the conversion, and that plans should either round-trip back and\n+  /// forth exactly or not at all. This option is primarily intended for testing and\n+  /// debugging.\n+  EXACT_ROUNDTRIP,\n+\n+  /// When a primitive is used at the input that doesn't have an exact match at the\n+  /// output, attempt to model it with some collection of primitives at the output. This\n+  /// means that even if the incoming plan is completely optimal by some metric, the\n+  /// returned plan is fairly likely to not be optimal anymore, and round-trips back and\n+  /// forth may make the plan increasingly suboptimal. However, every primitive at the\n+  /// output can be (manually) traced back to exactly one primitive at the input, which\n+  /// may be useful when debugging.\n+  PRESERVE_STRUCTURE,\n+\n+  /// Behaves like PRESERVE_STRUCTURE, but prefers performance over structural accuracy.\n+  /// Basic optimizations *may* be applied, in order to attempt to not regress in terms of\n+  /// plan performance: if the incoming plan was already aggressively optimized, the goal\n+  /// is for the output plan to not be less performant. In practical use cases, this is\n+  /// probably the option you want.\n+  ///\n+  /// Note that no guarantees are made on top of PRESERVE_STRUCTURE. Past and future\n+  /// versions of Arrow may even ignore this option entirely and treat it exactly like\n+  /// PRESERVE_STRUCTURE.\n+  BEST_EFFORT,\n+};\n+\n+/// Controls how to convert between Substrait and Acero representations of a plan.\n+struct ConversionOptions {\n+  /// Controls how strictly the converter is to adhere to the structure of the input.\n+  ConversionStrictness strictness = ConversionStrictness::EXACT_ROUNDTRIP;\n\nReview Comment:\n   Heh, that's a good point. I set it that way because that's how the logic has behaved up to this point, so in some sense it feels like a breaking change to set the default to anything else. I suppose the Substrait interface is marked as experimental, though. Do you think I should change it?\n\n\n\n",
                    "created": "2022-07-18T19:22:45.428+0000",
                    "updated": "2022-07-18T19:22:45.428+0000",
                    "started": "2022-07-18T19:22:45.428+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792316",
                    "issueId": "13470345"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 15600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@cd51ea0[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@632bf2ab[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@72b43732[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4eb63d65[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@91711a8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5f6be913[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@c35586b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7397019d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@423cc416[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@429f9e33[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@644f700b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2f1f1ef6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15600,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jul 28 21:41:05 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-07-28T21:41:05.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16988/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-07-06T12:48:09.000+0000",
        "updated": "2022-07-29T04:52:41.000+0000",
        "timeoriginalestimate": null,
        "description": "The goal of ARROW-16860 and in general one of the goals of the Substrait consumer effort thus far, is to enable round-tripping between Substrait and Acero plans. However, this begs the question what constitutes round-tripping: are we talking about a perfect reproduction of a Substrait plan after converting it to and from Acero (and/or vice-versa?), or we just talking about functionally-equivalent plans, or is it something in between?\r\n\r\nThis is kind of a rhethorical question because I think it depends on the use case. We've been doing the former thus far to help prove correctness, but this has various problems. For example:\r\n\r\n* Substrait plans contain meaningless information that cannot be represented in Acero, such as the order in which extensions are defined or the anchors used to refer to them. Plans are functionally and structurally indistinguishable even if this information is lost.\r\n* Protobuf itself also contains meaningless information, because the order in which fields are defined on the wire is undefined, and not even consistent between serializations (hence the existence of [CheckMessagesEquivalent|https://github.com/apache/arrow/blob/2a2d01d70e4e93cad07562f7df9c5d5ccf8e9840/cpp/src/arrow/engine/substrait/serde.h#L196-L208]).\r\n* (I'm guessing) Acero plans also contain functionally meaningless information (like intermediate column names) that Substrait cannot represent, at least not without advanced extensions.\r\n* The Substrait and Arrow type systems are quite different; tracking the conversion between them in a way that loses no (meta-)information is difficult. For example, Acero always encodes field names in schemas, while Substrait only does this at the input and output.\r\n* Substrait and Acero deal with projections and expressions in fundamentally different ways (see ARROW-16986).\r\n\r\nThe approach thus far has been to just reject an incoming plan if it contains something that can't be round-tripped exactly (at least according to CheckMessagesEquivalent), but this behavior is far too pedantic to be useful in practice, since it rejects perfectly valid and executable plans. For example, optimizations (hints) specified in advanced extensions [can be freely ignored|https://github.com/substrait-io/substrait/blob/a79eb07a15cfa157e795f028a83f746967c98805/proto/substrait/extensions/extensions.proto#L75-L77] but are currently rejected.\r\n\r\nRather than trying to answer this question, I'd suggest adding a method to specify conversion options. Initially I suggest a single enum with the following variants:\r\n\r\n* pedantic conversion: reject plans that are known to not round-trip even if they are valid.\r\n* structure-preserving conversion: accept plans even if they won't round-trip, but preserve the relation structure of the incoming plan completely.\r\n* best-effort conversion: accept plans even if they won't round-trip, and avoid regressions in terms of optimality of the plan caused by the conversion, potentially changing the relation structure, thus allowing for \"optimizations\" like ARROW-16986.\r\n\r\nThe enum should be in an options struct though, so more options can be added later without having to add more arguments to the conversion functions (see also ARROW-16987).\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Introduce Substrait ToProto/FromProto conversion options",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470345/comment/17572667",
                    "id": "17572667",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 13537\n[https://github.com/apache/arrow/pull/13537]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-07-28T21:41:05.955+0000",
                    "updated": "2022-07-28T21:41:05.955+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z16ngo:",
        "customfield_12314139": null
    }
}