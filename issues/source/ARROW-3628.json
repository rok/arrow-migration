{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13194471",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471",
    "key": "ARROW-3628",
    "fields": {
        "fixVersions": [],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/7",
            "id": "7",
            "description": "Later",
            "name": "Later"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 22200,
            "total": 22200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 22200,
            "total": 22200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3628/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 38,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471/worklog/159263",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2845: ARROW-3628: [R] Expose Decimal128Array using vctrs\nURL: https://github.com/apache/arrow/pull/2845#issuecomment-433485791\n \n \n   I created a JIRA for this and updated the issue title\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-26T17:34:33.408+0000",
                    "updated": "2018-10-26T17:34:33.408+0000",
                    "started": "2018-10-26T17:34:33.408+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159263",
                    "issueId": "13194471"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471/worklog/164560",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2845: ARROW-3628: [R] Expose Decimal128Array using vctrs\nURL: https://github.com/apache/arrow/pull/2845#discussion_r232423118\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -456,6 +454,23 @@ std::shared_ptr<arrow::Array> Time32Array_From_difftime(SEXP x) {\n   return std::make_shared<Time32Array>(data);\n }\n \n+std::shared_ptr<arrow::Array> Make_Decimal128Array(Decimal128Record record) {\n+  auto x = record.data();\n+  auto n = x.size();\n+  int64_t null_count = 0;\n+\n+  // TODO: deal with NA values\n+  std::vector<std::shared_ptr<Buffer>> buffers{nullptr,\n+                                               std::make_shared<RBuffer<CPLXSXP>>(x)};\n+\n+  auto data = ArrayData::Make(\n+      std::make_shared<Decimal128Type>(record.precision(), record.scale()), n,\n+      std::move(buffers), null_count, 0 /*offset*/\n+  );\n+\n+  return std::make_shared<typename TypeTraits<Decimal128Type>::ArrayType>(data);\n \n Review comment:\n   Could pass `Decimal128Array` here too\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-09T23:44:10.524+0000",
                    "updated": "2018-11-09T23:44:10.524+0000",
                    "started": "2018-11-09T23:44:10.523+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164560",
                    "issueId": "13194471"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471/worklog/164561",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2845: ARROW-3628: [R] Expose Decimal128Array using vctrs\nURL: https://github.com/apache/arrow/pull/2845#discussion_r232424889\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -828,36 +849,21 @@ SEXP TimeArray_to_Vector(const std::shared_ptr<Array>& array, int32_t multiplier\n \n SEXP DecimalArray(const std::shared_ptr<Array>& array) {\n   auto n = array->length();\n-  NumericVector vec(no_init(n));\n-\n-  if (n == 0) return vec;\n-\n-  auto null_count = array->null_count();\n-  if (null_count == n) {\n-    std::fill(vec.begin(), vec.end(), NA_REAL);\n-    return vec;\n-  }\n+  ComplexVector vec(no_init(n));\n \n-  auto p_vec = reinterpret_cast<double*>(vec.begin());\n-  const auto& decimals_arr =\n-      internal::checked_cast<const arrow::Decimal128Array&>(*array);\n-\n-  if (array->null_count()) {\n-    internal::BitmapReader bitmap_reader(array->null_bitmap()->data(), array->offset(),\n-                                         n);\n+  auto p_vec = reinterpret_cast<arrow::Decimal128*>(vec.begin());\n+  auto p_values = GetValuesSafely<arrow::Decimal128>(array->data(), 1, array->offset());\n \n-    for (size_t i = 0; i < n; i++, bitmap_reader.Next()) {\n-      p_vec[i] = bitmap_reader.IsNotSet()\n-                     ? NA_REAL\n-                     : std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  } else {\n-    for (size_t i = 0; i < n; i++) {\n-      p_vec[i] = std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  }\n+  // TODO: deal with NA\n+  std::copy_n(p_values, n, p_vec);\n \n Review comment:\n   This looks fishy. See\r\n   \r\n   ```\r\n   void Decimal128::ToBytes(uint8_t* out) const {\r\n     DCHECK_NE(out, nullptr);\r\n     reinterpret_cast<uint64_t*>(out)[0] = BitUtil::ToLittleEndian(low_bits_);\r\n     reinterpret_cast<int64_t*>(out)[1] = BitUtil::ToLittleEndian(high_bits_);\r\n   }\r\n   ```\r\n   \r\n   but in `Decimal128` we have\r\n   \r\n   ```\r\n    private:\r\n     int64_t high_bits_;\r\n     uint64_t low_bits_;\r\n   ```\r\n   \r\n   In principle I don't see why these could not be flipped. @cpcloud?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-09T23:44:10.525+0000",
                    "updated": "2018-11-09T23:44:10.525+0000",
                    "started": "2018-11-09T23:44:10.524+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164561",
                    "issueId": "13194471"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471/worklog/164571",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cpcloud commented on a change in pull request #2845: ARROW-3628: [R] Expose Decimal128Array using vctrs\nURL: https://github.com/apache/arrow/pull/2845#discussion_r232429020\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -828,36 +849,21 @@ SEXP TimeArray_to_Vector(const std::shared_ptr<Array>& array, int32_t multiplier\n \n SEXP DecimalArray(const std::shared_ptr<Array>& array) {\n   auto n = array->length();\n-  NumericVector vec(no_init(n));\n-\n-  if (n == 0) return vec;\n-\n-  auto null_count = array->null_count();\n-  if (null_count == n) {\n-    std::fill(vec.begin(), vec.end(), NA_REAL);\n-    return vec;\n-  }\n+  ComplexVector vec(no_init(n));\n \n-  auto p_vec = reinterpret_cast<double*>(vec.begin());\n-  const auto& decimals_arr =\n-      internal::checked_cast<const arrow::Decimal128Array&>(*array);\n-\n-  if (array->null_count()) {\n-    internal::BitmapReader bitmap_reader(array->null_bitmap()->data(), array->offset(),\n-                                         n);\n+  auto p_vec = reinterpret_cast<arrow::Decimal128*>(vec.begin());\n+  auto p_values = GetValuesSafely<arrow::Decimal128>(array->data(), 1, array->offset());\n \n-    for (size_t i = 0; i < n; i++, bitmap_reader.Next()) {\n-      p_vec[i] = bitmap_reader.IsNotSet()\n-                     ? NA_REAL\n-                     : std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  } else {\n-    for (size_t i = 0; i < n; i++) {\n-      p_vec[i] = std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  }\n+  // TODO: deal with NA\n+  std::copy_n(p_values, n, p_vec);\n \n Review comment:\n   There are number of things that I don't think will work here.\r\n   \r\n   1. `ComplexVector` I'm assuming is a sequence of pairs of `double`s which while in principle you could use as a surrogate for any old 128 bit thing, is very confusing to read IMO and loses precision as soon as you start assuming the `int64_t`/`uint64_t` pair fit inside of a `double`.\r\n   1. I'm not exactly sure how C++ classes are laid out in memory, but I don't think you can guarantee where the compiler will place data members. In this case, you have the reverse problem where you are trying to view a pair of doubles as a class. I don't know what to expect here, but I'd be pretty surprised if there were any guarantees about what you'd be able to with the `Decimal128`s you're `reinterpret_cast`ing to. For example, can you call a method on these objects?\r\n   1. Finally, If you're just using the `ComplexVector` for storage then I'm wondering if there was a better way. Maybe two int64 arrays? I'm not familiar with how such a thing would work in R or if that's somehow more difficult than the current approach.\r\n   \r\n   I think it will be easiest to use a simple loop to assign the `Decimal128Array` values to whatever the output array ends up being, and access the high and low bits of each `Decimal128` value through the provided APIs. This would, for example, insulate your code against any private details of the `Decimal128` implementation that may change in the future. Not sure what those changes would be necessarily, but you don't want to be exposed to them if you don't need to be.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-10T00:18:09.280+0000",
                    "updated": "2018-11-10T00:18:09.280+0000",
                    "started": "2018-11-10T00:18:09.280+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164571",
                    "issueId": "13194471"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471/worklog/164577",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cpcloud commented on a change in pull request #2845: ARROW-3628: [R] Expose Decimal128Array using vctrs\nURL: https://github.com/apache/arrow/pull/2845#discussion_r232429962\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -828,36 +849,21 @@ SEXP TimeArray_to_Vector(const std::shared_ptr<Array>& array, int32_t multiplier\n \n SEXP DecimalArray(const std::shared_ptr<Array>& array) {\n   auto n = array->length();\n-  NumericVector vec(no_init(n));\n-\n-  if (n == 0) return vec;\n-\n-  auto null_count = array->null_count();\n-  if (null_count == n) {\n-    std::fill(vec.begin(), vec.end(), NA_REAL);\n-    return vec;\n-  }\n+  ComplexVector vec(no_init(n));\n \n-  auto p_vec = reinterpret_cast<double*>(vec.begin());\n-  const auto& decimals_arr =\n-      internal::checked_cast<const arrow::Decimal128Array&>(*array);\n-\n-  if (array->null_count()) {\n-    internal::BitmapReader bitmap_reader(array->null_bitmap()->data(), array->offset(),\n-                                         n);\n+  auto p_vec = reinterpret_cast<arrow::Decimal128*>(vec.begin());\n+  auto p_values = GetValuesSafely<arrow::Decimal128>(array->data(), 1, array->offset());\n \n-    for (size_t i = 0; i < n; i++, bitmap_reader.Next()) {\n-      p_vec[i] = bitmap_reader.IsNotSet()\n-                     ? NA_REAL\n-                     : std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  } else {\n-    for (size_t i = 0; i < n; i++) {\n-      p_vec[i] = std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  }\n+  // TODO: deal with NA\n+  std::copy_n(p_values, n, p_vec);\n \n Review comment:\n   Also, to address @wesm's point: yes, I think swapping `high_bits_` and `low_bits_` is possible but per my above point about instance layout I don't think we should be depending on the order of fields for anything.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-10T00:25:41.385+0000",
                    "updated": "2018-11-10T00:25:41.385+0000",
                    "started": "2018-11-10T00:25:41.384+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164577",
                    "issueId": "13194471"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471/worklog/164578",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cpcloud commented on a change in pull request #2845: ARROW-3628: [R] Expose Decimal128Array using vctrs\nURL: https://github.com/apache/arrow/pull/2845#discussion_r232430470\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -828,36 +849,21 @@ SEXP TimeArray_to_Vector(const std::shared_ptr<Array>& array, int32_t multiplier\n \n SEXP DecimalArray(const std::shared_ptr<Array>& array) {\n   auto n = array->length();\n-  NumericVector vec(no_init(n));\n-\n-  if (n == 0) return vec;\n-\n-  auto null_count = array->null_count();\n-  if (null_count == n) {\n-    std::fill(vec.begin(), vec.end(), NA_REAL);\n-    return vec;\n-  }\n+  ComplexVector vec(no_init(n));\n \n-  auto p_vec = reinterpret_cast<double*>(vec.begin());\n-  const auto& decimals_arr =\n-      internal::checked_cast<const arrow::Decimal128Array&>(*array);\n-\n-  if (array->null_count()) {\n-    internal::BitmapReader bitmap_reader(array->null_bitmap()->data(), array->offset(),\n-                                         n);\n+  auto p_vec = reinterpret_cast<arrow::Decimal128*>(vec.begin());\n+  auto p_values = GetValuesSafely<arrow::Decimal128>(array->data(), 1, array->offset());\n \n-    for (size_t i = 0; i < n; i++, bitmap_reader.Next()) {\n-      p_vec[i] = bitmap_reader.IsNotSet()\n-                     ? NA_REAL\n-                     : std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  } else {\n-    for (size_t i = 0; i < n; i++) {\n-      p_vec[i] = std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  }\n+  // TODO: deal with NA\n+  std::copy_n(p_values, n, p_vec);\n \n-  return vec;\n+  List res = List::create(_[\"data\"] = vec);\n+  res.attr(\"class\") =\n+      CharacterVector::create(\"arrow_decimal128\", \"vctrs_rcrd\", \"vctrs_vctr\");\n+  res.attr(\"scale\") = static_cast<arrow::Decimal128Type*>(array->type().get())->scale();\n+  res.attr(\"precision\") =\n+      static_cast<arrow::Decimal128Type*>(array->type().get())->precision();\n \n Review comment:\n   Should use `checked_cast` and a const reference here to get a better error message if this fails, in debug mode. `checked_cast` compiles into a `static_cast` in release mode builds.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-10T00:30:20.159+0000",
                    "updated": "2018-11-10T00:30:20.159+0000",
                    "started": "2018-11-10T00:30:20.158+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164578",
                    "issueId": "13194471"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471/worklog/164579",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2845: ARROW-3628: [R] Expose Decimal128Array using vctrs\nURL: https://github.com/apache/arrow/pull/2845#discussion_r232430637\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -828,36 +849,21 @@ SEXP TimeArray_to_Vector(const std::shared_ptr<Array>& array, int32_t multiplier\n \n SEXP DecimalArray(const std::shared_ptr<Array>& array) {\n   auto n = array->length();\n-  NumericVector vec(no_init(n));\n-\n-  if (n == 0) return vec;\n-\n-  auto null_count = array->null_count();\n-  if (null_count == n) {\n-    std::fill(vec.begin(), vec.end(), NA_REAL);\n-    return vec;\n-  }\n+  ComplexVector vec(no_init(n));\n \n-  auto p_vec = reinterpret_cast<double*>(vec.begin());\n-  const auto& decimals_arr =\n-      internal::checked_cast<const arrow::Decimal128Array&>(*array);\n-\n-  if (array->null_count()) {\n-    internal::BitmapReader bitmap_reader(array->null_bitmap()->data(), array->offset(),\n-                                         n);\n+  auto p_vec = reinterpret_cast<arrow::Decimal128*>(vec.begin());\n+  auto p_values = GetValuesSafely<arrow::Decimal128>(array->data(), 1, array->offset());\n \n-    for (size_t i = 0; i < n; i++, bitmap_reader.Next()) {\n-      p_vec[i] = bitmap_reader.IsNotSet()\n-                     ? NA_REAL\n-                     : std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  } else {\n-    for (size_t i = 0; i < n; i++) {\n-      p_vec[i] = std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  }\n+  // TODO: deal with NA\n+  std::copy_n(p_values, n, p_vec);\n \n Review comment:\n   On \r\n   \r\n   1. AFAICT ComplexVector is being used here as a convenience since it's 16 bytes wide and already available in Rcpp\r\n   \r\n   2. I think you can assume the same memory order as a C struct. \r\n   \r\n   3. see point 1 :) \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-10T00:32:19.379+0000",
                    "updated": "2018-11-10T00:32:19.379+0000",
                    "started": "2018-11-10T00:32:19.379+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164579",
                    "issueId": "13194471"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471/worklog/164580",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cpcloud commented on a change in pull request #2845: ARROW-3628: [R] Expose Decimal128Array using vctrs\nURL: https://github.com/apache/arrow/pull/2845#discussion_r232430696\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -828,36 +849,21 @@ SEXP TimeArray_to_Vector(const std::shared_ptr<Array>& array, int32_t multiplier\n \n SEXP DecimalArray(const std::shared_ptr<Array>& array) {\n   auto n = array->length();\n-  NumericVector vec(no_init(n));\n-\n-  if (n == 0) return vec;\n-\n-  auto null_count = array->null_count();\n-  if (null_count == n) {\n-    std::fill(vec.begin(), vec.end(), NA_REAL);\n-    return vec;\n-  }\n+  ComplexVector vec(no_init(n));\n \n-  auto p_vec = reinterpret_cast<double*>(vec.begin());\n-  const auto& decimals_arr =\n-      internal::checked_cast<const arrow::Decimal128Array&>(*array);\n-\n-  if (array->null_count()) {\n-    internal::BitmapReader bitmap_reader(array->null_bitmap()->data(), array->offset(),\n-                                         n);\n+  auto p_vec = reinterpret_cast<arrow::Decimal128*>(vec.begin());\n+  auto p_values = GetValuesSafely<arrow::Decimal128>(array->data(), 1, array->offset());\n \n-    for (size_t i = 0; i < n; i++, bitmap_reader.Next()) {\n-      p_vec[i] = bitmap_reader.IsNotSet()\n-                     ? NA_REAL\n-                     : std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  } else {\n-    for (size_t i = 0; i < n; i++) {\n-      p_vec[i] = std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  }\n+  // TODO: deal with NA\n+  std::copy_n(p_values, n, p_vec);\n \n-  return vec;\n+  List res = List::create(_[\"data\"] = vec);\n+  res.attr(\"class\") =\n+      CharacterVector::create(\"arrow_decimal128\", \"vctrs_rcrd\", \"vctrs_vctr\");\n+  res.attr(\"scale\") = static_cast<arrow::Decimal128Type*>(array->type().get())->scale();\n+  res.attr(\"precision\") =\n+      static_cast<arrow::Decimal128Type*>(array->type().get())->precision();\n \n Review comment:\n   Something like\r\n   \r\n   ```c++\r\n   checked_cast<const arrow::Decimal128Type&>(*array->type())->precision()\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-10T00:32:50.417+0000",
                    "updated": "2018-11-10T00:32:50.417+0000",
                    "started": "2018-11-10T00:32:50.416+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164580",
                    "issueId": "13194471"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471/worklog/164581",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cpcloud commented on a change in pull request #2845: ARROW-3628: [R] Expose Decimal128Array using vctrs\nURL: https://github.com/apache/arrow/pull/2845#discussion_r232430696\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -828,36 +849,21 @@ SEXP TimeArray_to_Vector(const std::shared_ptr<Array>& array, int32_t multiplier\n \n SEXP DecimalArray(const std::shared_ptr<Array>& array) {\n   auto n = array->length();\n-  NumericVector vec(no_init(n));\n-\n-  if (n == 0) return vec;\n-\n-  auto null_count = array->null_count();\n-  if (null_count == n) {\n-    std::fill(vec.begin(), vec.end(), NA_REAL);\n-    return vec;\n-  }\n+  ComplexVector vec(no_init(n));\n \n-  auto p_vec = reinterpret_cast<double*>(vec.begin());\n-  const auto& decimals_arr =\n-      internal::checked_cast<const arrow::Decimal128Array&>(*array);\n-\n-  if (array->null_count()) {\n-    internal::BitmapReader bitmap_reader(array->null_bitmap()->data(), array->offset(),\n-                                         n);\n+  auto p_vec = reinterpret_cast<arrow::Decimal128*>(vec.begin());\n+  auto p_values = GetValuesSafely<arrow::Decimal128>(array->data(), 1, array->offset());\n \n-    for (size_t i = 0; i < n; i++, bitmap_reader.Next()) {\n-      p_vec[i] = bitmap_reader.IsNotSet()\n-                     ? NA_REAL\n-                     : std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  } else {\n-    for (size_t i = 0; i < n; i++) {\n-      p_vec[i] = std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  }\n+  // TODO: deal with NA\n+  std::copy_n(p_values, n, p_vec);\n \n-  return vec;\n+  List res = List::create(_[\"data\"] = vec);\n+  res.attr(\"class\") =\n+      CharacterVector::create(\"arrow_decimal128\", \"vctrs_rcrd\", \"vctrs_vctr\");\n+  res.attr(\"scale\") = static_cast<arrow::Decimal128Type*>(array->type().get())->scale();\n+  res.attr(\"precision\") =\n+      static_cast<arrow::Decimal128Type*>(array->type().get())->precision();\n \n Review comment:\n   Something like\r\n   \r\n   ```c++\r\n   checked_cast<const arrow::Decimal128Type&>(*array->type()).precision()\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-10T00:33:04.626+0000",
                    "updated": "2018-11-10T00:33:04.626+0000",
                    "started": "2018-11-10T00:33:04.625+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164581",
                    "issueId": "13194471"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471/worklog/164582",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cpcloud commented on a change in pull request #2845: ARROW-3628: [R] Expose Decimal128Array using vctrs\nURL: https://github.com/apache/arrow/pull/2845#discussion_r232429020\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -828,36 +849,21 @@ SEXP TimeArray_to_Vector(const std::shared_ptr<Array>& array, int32_t multiplier\n \n SEXP DecimalArray(const std::shared_ptr<Array>& array) {\n   auto n = array->length();\n-  NumericVector vec(no_init(n));\n-\n-  if (n == 0) return vec;\n-\n-  auto null_count = array->null_count();\n-  if (null_count == n) {\n-    std::fill(vec.begin(), vec.end(), NA_REAL);\n-    return vec;\n-  }\n+  ComplexVector vec(no_init(n));\n \n-  auto p_vec = reinterpret_cast<double*>(vec.begin());\n-  const auto& decimals_arr =\n-      internal::checked_cast<const arrow::Decimal128Array&>(*array);\n-\n-  if (array->null_count()) {\n-    internal::BitmapReader bitmap_reader(array->null_bitmap()->data(), array->offset(),\n-                                         n);\n+  auto p_vec = reinterpret_cast<arrow::Decimal128*>(vec.begin());\n+  auto p_values = GetValuesSafely<arrow::Decimal128>(array->data(), 1, array->offset());\n \n-    for (size_t i = 0; i < n; i++, bitmap_reader.Next()) {\n-      p_vec[i] = bitmap_reader.IsNotSet()\n-                     ? NA_REAL\n-                     : std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  } else {\n-    for (size_t i = 0; i < n; i++) {\n-      p_vec[i] = std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  }\n+  // TODO: deal with NA\n+  std::copy_n(p_values, n, p_vec);\n \n Review comment:\n   There are number of things that I don't think will work here.\r\n   \r\n   1. `ComplexVector` I'm assuming is a sequence of pairs of `double`s which while in principle you could use as a surrogate for any old 128 bit thing, is very confusing to read IMO and loses precision as soon as you start assuming the range of values that `int64_t`/`uint64_t` represent can be preserved by using a `double`.\r\n   1. I'm not exactly sure how C++ classes are laid out in memory, but I don't think you can guarantee where the compiler will place data members. In this case, you have the reverse problem where you are trying to view a pair of doubles as a class. I don't know what to expect here, but I'd be pretty surprised if there were any guarantees about what you'd be able to with the `Decimal128`s you're `reinterpret_cast`ing to. For example, can you call a method on these objects?\r\n   1. Finally, If you're just using the `ComplexVector` for storage then I'm wondering if there was a better way. Maybe two int64 arrays? I'm not familiar with how such a thing would work in R or if that's somehow more difficult than the current approach.\r\n   \r\n   I think it will be easiest to use a simple loop to assign the `Decimal128Array` values to whatever the output array ends up being, and access the high and low bits of each `Decimal128` value through the provided APIs. This would, for example, insulate your code against any private details of the `Decimal128` implementation that may change in the future. Not sure what those changes would be necessarily, but you don't want to be exposed to them if you don't need to be.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-10T00:37:57.650+0000",
                    "updated": "2018-11-10T00:37:57.650+0000",
                    "started": "2018-11-10T00:37:57.649+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164582",
                    "issueId": "13194471"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471/worklog/164583",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cpcloud commented on a change in pull request #2845: ARROW-3628: [R] Expose Decimal128Array using vctrs\nURL: https://github.com/apache/arrow/pull/2845#discussion_r232432285\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -828,36 +849,21 @@ SEXP TimeArray_to_Vector(const std::shared_ptr<Array>& array, int32_t multiplier\n \n SEXP DecimalArray(const std::shared_ptr<Array>& array) {\n   auto n = array->length();\n-  NumericVector vec(no_init(n));\n-\n-  if (n == 0) return vec;\n-\n-  auto null_count = array->null_count();\n-  if (null_count == n) {\n-    std::fill(vec.begin(), vec.end(), NA_REAL);\n-    return vec;\n-  }\n+  ComplexVector vec(no_init(n));\n \n-  auto p_vec = reinterpret_cast<double*>(vec.begin());\n-  const auto& decimals_arr =\n-      internal::checked_cast<const arrow::Decimal128Array&>(*array);\n-\n-  if (array->null_count()) {\n-    internal::BitmapReader bitmap_reader(array->null_bitmap()->data(), array->offset(),\n-                                         n);\n+  auto p_vec = reinterpret_cast<arrow::Decimal128*>(vec.begin());\n+  auto p_values = GetValuesSafely<arrow::Decimal128>(array->data(), 1, array->offset());\n \n-    for (size_t i = 0; i < n; i++, bitmap_reader.Next()) {\n-      p_vec[i] = bitmap_reader.IsNotSet()\n-                     ? NA_REAL\n-                     : std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  } else {\n-    for (size_t i = 0; i < n; i++) {\n-      p_vec[i] = std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  }\n+  // TODO: deal with NA\n+  std::copy_n(p_values, n, p_vec);\n \n Review comment:\n   > I think you can assume the same memory order as a C struct.\r\n   \r\n   What about for classes with virtual methods?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-10T00:50:41.535+0000",
                    "updated": "2018-11-10T00:50:41.535+0000",
                    "started": "2018-11-10T00:50:41.534+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164583",
                    "issueId": "13194471"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471/worklog/164589",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2845: ARROW-3628: [R] Expose Decimal128Array using vctrs\nURL: https://github.com/apache/arrow/pull/2845#discussion_r232432711\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -828,36 +849,21 @@ SEXP TimeArray_to_Vector(const std::shared_ptr<Array>& array, int32_t multiplier\n \n SEXP DecimalArray(const std::shared_ptr<Array>& array) {\n   auto n = array->length();\n-  NumericVector vec(no_init(n));\n-\n-  if (n == 0) return vec;\n-\n-  auto null_count = array->null_count();\n-  if (null_count == n) {\n-    std::fill(vec.begin(), vec.end(), NA_REAL);\n-    return vec;\n-  }\n+  ComplexVector vec(no_init(n));\n \n-  auto p_vec = reinterpret_cast<double*>(vec.begin());\n-  const auto& decimals_arr =\n-      internal::checked_cast<const arrow::Decimal128Array&>(*array);\n-\n-  if (array->null_count()) {\n-    internal::BitmapReader bitmap_reader(array->null_bitmap()->data(), array->offset(),\n-                                         n);\n+  auto p_vec = reinterpret_cast<arrow::Decimal128*>(vec.begin());\n+  auto p_values = GetValuesSafely<arrow::Decimal128>(array->data(), 1, array->offset());\n \n-    for (size_t i = 0; i < n; i++, bitmap_reader.Next()) {\n-      p_vec[i] = bitmap_reader.IsNotSet()\n-                     ? NA_REAL\n-                     : std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  } else {\n-    for (size_t i = 0; i < n; i++) {\n-      p_vec[i] = std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  }\n+  // TODO: deal with NA\n+  std::copy_n(p_values, n, p_vec);\n \n Review comment:\n   Ah, this only applies to POD-like classes. If you have a base class with data members, then subclasses have the base members first in their memory layout\r\n   \r\n   so\r\n   \r\n   ```\r\n   struct Foo {\r\n     int32_t a;\r\n     int32_t b;\r\n   };\r\n   \r\n   struct Bar : public Foo {\r\n     int32_t c;\r\n   };\r\n   ```\r\n   \r\n   Then the first 8 bytes of a Bar is the Foo members\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-10T00:55:09.601+0000",
                    "updated": "2018-11-10T00:55:09.601+0000",
                    "started": "2018-11-10T00:55:09.600+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164589",
                    "issueId": "13194471"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471/worklog/164590",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2845: ARROW-3628: [R] Expose Decimal128Array using vctrs\nURL: https://github.com/apache/arrow/pull/2845#discussion_r232432711\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -828,36 +849,21 @@ SEXP TimeArray_to_Vector(const std::shared_ptr<Array>& array, int32_t multiplier\n \n SEXP DecimalArray(const std::shared_ptr<Array>& array) {\n   auto n = array->length();\n-  NumericVector vec(no_init(n));\n-\n-  if (n == 0) return vec;\n-\n-  auto null_count = array->null_count();\n-  if (null_count == n) {\n-    std::fill(vec.begin(), vec.end(), NA_REAL);\n-    return vec;\n-  }\n+  ComplexVector vec(no_init(n));\n \n-  auto p_vec = reinterpret_cast<double*>(vec.begin());\n-  const auto& decimals_arr =\n-      internal::checked_cast<const arrow::Decimal128Array&>(*array);\n-\n-  if (array->null_count()) {\n-    internal::BitmapReader bitmap_reader(array->null_bitmap()->data(), array->offset(),\n-                                         n);\n+  auto p_vec = reinterpret_cast<arrow::Decimal128*>(vec.begin());\n+  auto p_values = GetValuesSafely<arrow::Decimal128>(array->data(), 1, array->offset());\n \n-    for (size_t i = 0; i < n; i++, bitmap_reader.Next()) {\n-      p_vec[i] = bitmap_reader.IsNotSet()\n-                     ? NA_REAL\n-                     : std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  } else {\n-    for (size_t i = 0; i < n; i++) {\n-      p_vec[i] = std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  }\n+  // TODO: deal with NA\n+  std::copy_n(p_values, n, p_vec);\n \n Review comment:\n   Ah, this only applies to POD-like classes. If you have a base class with data members, then subclasses have the base members first in their memory layout\r\n   \r\n   so\r\n   \r\n   ```c++\r\n   struct Foo {\r\n     int32_t a;\r\n     int32_t b;\r\n   };\r\n   \r\n   struct Bar : public Foo {\r\n     int32_t c;\r\n   };\r\n   ```\r\n   \r\n   Then the first 8 bytes of a Bar is the Foo members\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-10T00:55:14.426+0000",
                    "updated": "2018-11-10T00:55:14.426+0000",
                    "started": "2018-11-10T00:55:14.425+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164590",
                    "issueId": "13194471"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471/worklog/164591",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2845: ARROW-3628: [R] Expose Decimal128Array using vctrs\nURL: https://github.com/apache/arrow/pull/2845#discussion_r232432809\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -828,36 +849,21 @@ SEXP TimeArray_to_Vector(const std::shared_ptr<Array>& array, int32_t multiplier\n \n SEXP DecimalArray(const std::shared_ptr<Array>& array) {\n   auto n = array->length();\n-  NumericVector vec(no_init(n));\n-\n-  if (n == 0) return vec;\n-\n-  auto null_count = array->null_count();\n-  if (null_count == n) {\n-    std::fill(vec.begin(), vec.end(), NA_REAL);\n-    return vec;\n-  }\n+  ComplexVector vec(no_init(n));\n \n-  auto p_vec = reinterpret_cast<double*>(vec.begin());\n-  const auto& decimals_arr =\n-      internal::checked_cast<const arrow::Decimal128Array&>(*array);\n-\n-  if (array->null_count()) {\n-    internal::BitmapReader bitmap_reader(array->null_bitmap()->data(), array->offset(),\n-                                         n);\n+  auto p_vec = reinterpret_cast<arrow::Decimal128*>(vec.begin());\n+  auto p_values = GetValuesSafely<arrow::Decimal128>(array->data(), 1, array->offset());\n \n-    for (size_t i = 0; i < n; i++, bitmap_reader.Next()) {\n-      p_vec[i] = bitmap_reader.IsNotSet()\n-                     ? NA_REAL\n-                     : std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  } else {\n-    for (size_t i = 0; i < n; i++) {\n-      p_vec[i] = std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  }\n+  // TODO: deal with NA\n+  std::copy_n(p_values, n, p_vec);\n \n Review comment:\n   The vtable isn't part of the object's memory layout; calls into the vtable are dealt with during compilation, and the vtable is stored elsewhere\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-10T00:56:11.909+0000",
                    "updated": "2018-11-10T00:56:11.909+0000",
                    "started": "2018-11-10T00:56:11.909+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164591",
                    "issueId": "13194471"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471/worklog/164592",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2845: ARROW-3628: [R] Expose Decimal128Array using vctrs\nURL: https://github.com/apache/arrow/pull/2845#discussion_r232432809\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -828,36 +849,21 @@ SEXP TimeArray_to_Vector(const std::shared_ptr<Array>& array, int32_t multiplier\n \n SEXP DecimalArray(const std::shared_ptr<Array>& array) {\n   auto n = array->length();\n-  NumericVector vec(no_init(n));\n-\n-  if (n == 0) return vec;\n-\n-  auto null_count = array->null_count();\n-  if (null_count == n) {\n-    std::fill(vec.begin(), vec.end(), NA_REAL);\n-    return vec;\n-  }\n+  ComplexVector vec(no_init(n));\n \n-  auto p_vec = reinterpret_cast<double*>(vec.begin());\n-  const auto& decimals_arr =\n-      internal::checked_cast<const arrow::Decimal128Array&>(*array);\n-\n-  if (array->null_count()) {\n-    internal::BitmapReader bitmap_reader(array->null_bitmap()->data(), array->offset(),\n-                                         n);\n+  auto p_vec = reinterpret_cast<arrow::Decimal128*>(vec.begin());\n+  auto p_values = GetValuesSafely<arrow::Decimal128>(array->data(), 1, array->offset());\n \n-    for (size_t i = 0; i < n; i++, bitmap_reader.Next()) {\n-      p_vec[i] = bitmap_reader.IsNotSet()\n-                     ? NA_REAL\n-                     : std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  } else {\n-    for (size_t i = 0; i < n; i++) {\n-      p_vec[i] = std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  }\n+  // TODO: deal with NA\n+  std::copy_n(p_values, n, p_vec);\n \n Review comment:\n   I'm actually not 100% sure about instances with virtual methods\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-10T00:56:51.341+0000",
                    "updated": "2018-11-10T00:56:51.341+0000",
                    "started": "2018-11-10T00:56:51.340+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164592",
                    "issueId": "13194471"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471/worklog/164593",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cpcloud commented on a change in pull request #2845: ARROW-3628: [R] Expose Decimal128Array using vctrs\nURL: https://github.com/apache/arrow/pull/2845#discussion_r232432968\n \n \n\n ##########\n File path: r/src/array.cpp\n ##########\n @@ -828,36 +849,21 @@ SEXP TimeArray_to_Vector(const std::shared_ptr<Array>& array, int32_t multiplier\n \n SEXP DecimalArray(const std::shared_ptr<Array>& array) {\n   auto n = array->length();\n-  NumericVector vec(no_init(n));\n-\n-  if (n == 0) return vec;\n-\n-  auto null_count = array->null_count();\n-  if (null_count == n) {\n-    std::fill(vec.begin(), vec.end(), NA_REAL);\n-    return vec;\n-  }\n+  ComplexVector vec(no_init(n));\n \n-  auto p_vec = reinterpret_cast<double*>(vec.begin());\n-  const auto& decimals_arr =\n-      internal::checked_cast<const arrow::Decimal128Array&>(*array);\n-\n-  if (array->null_count()) {\n-    internal::BitmapReader bitmap_reader(array->null_bitmap()->data(), array->offset(),\n-                                         n);\n+  auto p_vec = reinterpret_cast<arrow::Decimal128*>(vec.begin());\n+  auto p_values = GetValuesSafely<arrow::Decimal128>(array->data(), 1, array->offset());\n \n-    for (size_t i = 0; i < n; i++, bitmap_reader.Next()) {\n-      p_vec[i] = bitmap_reader.IsNotSet()\n-                     ? NA_REAL\n-                     : std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  } else {\n-    for (size_t i = 0; i < n; i++) {\n-      p_vec[i] = std::stod(decimals_arr.FormatValue(i).c_str());\n-    }\n-  }\n+  // TODO: deal with NA\n+  std::copy_n(p_values, n, p_vec);\n \n Review comment:\n   In this particular case, there aren't any so it should be okay.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-10T00:57:23.442+0000",
                    "updated": "2018-11-10T00:57:23.442+0000",
                    "started": "2018-11-10T00:57:23.441+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164593",
                    "issueId": "13194471"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471/worklog/164653",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2845: ARROW-3628: [R] Expose Decimal128Array using vctrs\nURL: https://github.com/apache/arrow/pull/2845#issuecomment-437559842\n \n \n   I opened https://issues.apache.org/jira/browse/ARROW-3747, we should probably go ahead and do that if it causes no problem as it will make things easier here\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-10T05:28:40.693+0000",
                    "updated": "2018-11-10T05:28:40.693+0000",
                    "started": "2018-11-10T05:28:40.692+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164653",
                    "issueId": "13194471"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471/worklog/164670",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on issue #2845: ARROW-3628: [R] Expose Decimal128Array using vctrs\nURL: https://github.com/apache/arrow/pull/2845#issuecomment-437567809\n \n \n   Please yes. This was very confusing that i could not just use the 16bytes of an Rcomplex or an arrow::Decimal128 interchangeably. \r\n   \r\n   The ComplexVector is indeed used as a host for a contiguous array of things that occupy 16 bytes. \r\n   \r\n   That\u2019s the same workaround as the bit64 \ud83d\udce6 uses for representing 64 bits integers hosted in a double vector. \r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-10T08:29:09.997+0000",
                    "updated": "2018-11-10T08:29:09.997+0000",
                    "started": "2018-11-10T08:29:09.996+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164670",
                    "issueId": "13194471"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471/worklog/164724",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2845: ARROW-3628: [R] Expose Decimal128Array using vctrs\nURL: https://github.com/apache/arrow/pull/2845#issuecomment-437619626\n \n \n   OK if you rebase then things ought to work better\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-10T20:39:06.260+0000",
                    "updated": "2018-11-10T20:39:06.260+0000",
                    "started": "2018-11-10T20:39:06.259+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164724",
                    "issueId": "13194471"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471/worklog/164725",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2845: ARROW-3628: [R] Expose Decimal128Array using vctrs\nURL: https://github.com/apache/arrow/pull/2845#issuecomment-437621550\n \n \n   sorry, you'll need to wait for https://github.com/apache/arrow/pull/2940 to be merged\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-10T21:10:35.206+0000",
                    "updated": "2018-11-10T21:10:35.206+0000",
                    "started": "2018-11-10T21:10:35.206+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164725",
                    "issueId": "13194471"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 22200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@73d19880[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3abc90e5[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@794dab48[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@27a8273c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@a4c9d03[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@35600958[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2163f357[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4714a180[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29de98e4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1cc16e4e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2206cfca[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@407c62ab[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 22200,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Aug 04 12:32:36 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-08-04T12:32:46.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3628/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2018-10-26T17:33:44.000+0000",
        "updated": "2021-08-04T12:32:46.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 22200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Make decimal128 data available in R without requiring lossy conversions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471/comment/17392924",
                    "id": "17392924",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "[~romainfrancois] Do you still plan to work on this?\r\n\r\ncc [~npr]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-08-04T09:32:40.560+0000",
                    "updated": "2021-08-04T09:32:40.560+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194471/comment/17393099",
                    "id": "17393099",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "There's still no (to my knowledge) real way to represent and manipulate Decimal128 data in R. We have the lossy conversion (to float64) implemented from Arrow to R. If you want lossless handling of Decimal* data, there's now the option to do all of the manipulation in Arrow with its richer type system, driving it from R. \r\n\r\nI'll close this but we can revisit if/whenever a native R implementation for Decimal data appears. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-08-04T12:32:36.777+0000",
                    "updated": "2021-08-04T12:32:36.777+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|i3zov3:",
        "customfield_12314139": null
    }
}