{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13123305",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123305",
    "key": "ARROW-1896",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1896/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 43,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123305/worklog/198445",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3642: ARROW-1896: [C++] Do not allocate memory inside CastKernel. Clean up template instantiation to not generate dead identity cast code\nURL: https://github.com/apache/arrow/pull/3642\n \n \n   Also resolves ARROW-4110, which has been on my list for some time.\r\n   \r\n   This ended up being a huge pain. \r\n   \r\n   * `detail::PrimitiveAllocatingUnaryKernel` can now allocate memory for any kind of fixed width type. \r\n   * I factored out simple bitmap propagation into `detail::PropagateNulls`\r\n   * I moved the null count resolution code one level down into `ArrayData`, since there are cases where it may be set to `kUnknownNullCount` (e.g. after a slice) and you need to know what it is. This isn't tested but I suggest addressing this in a follow up patch\r\n   \r\n   I also moved hand-maintained macro spaghetti for instantiating CastFunctors into a Python code-generation script. This might be the most controversial change in this patch, but the problem here is that we needed to exclude 1 macro case for each numeric type -- currently they were relying on `NUMERIC_CASES`. This means the list of generated types is slightly different for each type, lending to poor code reuse. Rather than maintaining this code by hand, it is _so much simpler_ to generate it with a script. \r\n   \r\n   Speaking of code generation, I think we should continue to invest in code generation scripts to make generating mundane C++ code for pre-compiled kernels simpler. I checked the file in but I'm not opposed to auto-generating the files as part of the CMake build -- we could do that in a follow up PR. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T03:42:44.091+0000",
                    "updated": "2019-02-14T03:42:44.091+0000",
                    "started": "2019-02-14T03:42:44.091+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198445",
                    "issueId": "13123305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123305/worklog/198446",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3642: ARROW-1896: [C++] Do not allocate memory inside CastKernel. Clean up template instantiation to not generate dead identity cast code\nURL: https://github.com/apache/arrow/pull/3642#discussion_r256681698\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -1374,10 +1139,35 @@ Status GetListCastFunc(const DataType& in_type, const std::shared_ptr<DataType>&\n \n }  // namespace\n \n+inline bool IsZeroCopyCast(Type::type in_type, Type::type out_type) {\n+  switch (in_type) {\n+    case Type::INT32:\n+      return (out_type == Type::DATE32) || (out_type == Type::TIME32);\n+    case Type::INT64:\n+      return ((out_type == Type::DATE64) || (out_type == Type::TIME64) ||\n+              (out_type == Type::TIMESTAMP));\n+    case Type::DATE32:\n+    case Type::TIME32:\n+      return out_type == Type::INT32;\n+    case Type::DATE64:\n+    case Type::TIME64:\n+    case Type::TIMESTAMP:\n+      return out_type == Type::INT64;\n+    default:\n+      break;\n+  }\n+  return false;\n+}\n \n Review comment:\n   This was being maintained with templates before... that was overly elaborate. If this gets too complicated, we can easily code-generate it\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T03:44:47.190+0000",
                    "updated": "2019-02-14T03:44:47.190+0000",
                    "started": "2019-02-14T03:44:47.189+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198446",
                    "issueId": "13123305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123305/worklog/198447",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3642: ARROW-1896: [C++] Do not allocate memory inside CastKernel. Clean up template instantiation to not generate dead identity cast code\nURL: https://github.com/apache/arrow/pull/3642#discussion_r256681538\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -78,83 +78,9 @@ namespace compute {\n \n constexpr int64_t kMillisecondsInDay = 86400000;\n \n-template <typename O, typename I, typename Enable = void>\n-struct is_binary_to_string {\n-  static constexpr bool value = false;\n-};\n-\n-template <typename O, typename I>\n-struct is_binary_to_string<\n-    O, I,\n-    typename std::enable_if<std::is_same<BinaryType, I>::value &&\n-                            std::is_base_of<StringType, O>::value>::type> {\n-  static constexpr bool value = true;\n-};\n-\n-// ----------------------------------------------------------------------\n-// Zero copy casts\n-\n-template <typename O, typename I, typename Enable = void>\n-struct is_zero_copy_cast {\n-  static constexpr bool value = false;\n-};\n-\n-// TODO(wesm): ARROW-4110; this is no longer needed, but may be useful if we\n-// ever _do_ want to generate identity cast kernels at compile time\n-template <typename O, typename I>\n-struct is_zero_copy_cast<\n-    O, I,\n-    typename std::enable_if<std::is_same<I, O>::value &&\n-                            // Parametric types contains runtime data which\n-                            // differentiate them, it cannot be checked statically.\n-                            !std::is_base_of<ParametricType, O>::value>::type> {\n-  static constexpr bool value = true;\n-};\n-\n-// From integers to date/time types with zero copy\n-template <typename O, typename I>\n-struct is_zero_copy_cast<\n-    O, I,\n-    typename std::enable_if<\n-        (std::is_base_of<Integer, I>::value &&\n-         (std::is_base_of<TimeType, O>::value || std::is_base_of<DateType, O>::value ||\n-          std::is_base_of<TimestampType, O>::value)) ||\n-        (std::is_base_of<Integer, O>::value &&\n-         (std::is_base_of<TimeType, I>::value || std::is_base_of<DateType, I>::value ||\n-          std::is_base_of<TimestampType, I>::value))>::type> {\n-  using O_T = typename O::c_type;\n-  using I_T = typename I::c_type;\n-\n-  static constexpr bool value = sizeof(O_T) == sizeof(I_T);\n-};\n-\n-// Binary to String doesn't require copying, the payload only needs to be\n-// validated.\n-template <typename O, typename I>\n-struct is_zero_copy_cast<\n-    O, I,\n-    typename std::enable_if<!std::is_same<I, O>::value &&\n-                            is_binary_to_string<O, I>::value>::type> {\n-  static constexpr bool value = true;\n-};\n-\n \n Review comment:\n   Deleting this stuff felt sooooo good\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T03:44:47.192+0000",
                    "updated": "2019-02-14T03:44:47.192+0000",
                    "started": "2019-02-14T03:44:47.191+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198447",
                    "issueId": "13123305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123305/worklog/198448",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3642: ARROW-1896: [C++] Do not allocate memory inside CastKernel. Clean up template instantiation to not generate dead identity cast code\nURL: https://github.com/apache/arrow/pull/3642#discussion_r256681553\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -78,83 +78,9 @@ namespace compute {\n \n constexpr int64_t kMillisecondsInDay = 86400000;\n \n-template <typename O, typename I, typename Enable = void>\n-struct is_binary_to_string {\n-  static constexpr bool value = false;\n-};\n-\n-template <typename O, typename I>\n-struct is_binary_to_string<\n-    O, I,\n-    typename std::enable_if<std::is_same<BinaryType, I>::value &&\n-                            std::is_base_of<StringType, O>::value>::type> {\n-  static constexpr bool value = true;\n-};\n-\n-// ----------------------------------------------------------------------\n-// Zero copy casts\n-\n-template <typename O, typename I, typename Enable = void>\n-struct is_zero_copy_cast {\n-  static constexpr bool value = false;\n-};\n-\n-// TODO(wesm): ARROW-4110; this is no longer needed, but may be useful if we\n-// ever _do_ want to generate identity cast kernels at compile time\n-template <typename O, typename I>\n-struct is_zero_copy_cast<\n-    O, I,\n-    typename std::enable_if<std::is_same<I, O>::value &&\n-                            // Parametric types contains runtime data which\n-                            // differentiate them, it cannot be checked statically.\n-                            !std::is_base_of<ParametricType, O>::value>::type> {\n-  static constexpr bool value = true;\n-};\n-\n-// From integers to date/time types with zero copy\n-template <typename O, typename I>\n-struct is_zero_copy_cast<\n-    O, I,\n-    typename std::enable_if<\n-        (std::is_base_of<Integer, I>::value &&\n-         (std::is_base_of<TimeType, O>::value || std::is_base_of<DateType, O>::value ||\n-          std::is_base_of<TimestampType, O>::value)) ||\n-        (std::is_base_of<Integer, O>::value &&\n-         (std::is_base_of<TimeType, I>::value || std::is_base_of<DateType, I>::value ||\n-          std::is_base_of<TimestampType, I>::value))>::type> {\n-  using O_T = typename O::c_type;\n-  using I_T = typename I::c_type;\n-\n-  static constexpr bool value = sizeof(O_T) == sizeof(I_T);\n-};\n-\n-// Binary to String doesn't require copying, the payload only needs to be\n-// validated.\n-template <typename O, typename I>\n-struct is_zero_copy_cast<\n-    O, I,\n-    typename std::enable_if<!std::is_same<I, O>::value &&\n-                            is_binary_to_string<O, I>::value>::type> {\n-  static constexpr bool value = true;\n-};\n-\n template <typename OutType, typename InType, typename Enable = void>\n struct CastFunctor {};\n \n-// Indicated no computation required\n-//\n-// The case BinaryType -> StringType is special cased due to validation\n-// requirements.\n-template <typename O, typename I>\n-struct CastFunctor<O, I,\n-                   typename std::enable_if<is_zero_copy_cast<O, I>::value &&\n-                                           !is_binary_to_string<O, I>::value>::type> {\n-  void operator()(FunctionContext* ctx, const CastOptions& options,\n-                  const ArrayData& input, ArrayData* output) {\n-    ZeroCopyData(input, output);\n-  }\n-};\n-\n \n Review comment:\n   Yesssss. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T03:44:47.210+0000",
                    "updated": "2019-02-14T03:44:47.210+0000",
                    "started": "2019-02-14T03:44:47.209+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198448",
                    "issueId": "13123305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123305/worklog/198449",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3642: ARROW-1896: [C++] Do not allocate memory inside CastKernel. Clean up template instantiation to not generate dead identity cast code\nURL: https://github.com/apache/arrow/pull/3642#issuecomment-463476941\n \n \n   @emkornfield @xhochy @fsaintjacques for your comments...\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T03:45:06.706+0000",
                    "updated": "2019-02-14T03:45:06.706+0000",
                    "started": "2019-02-14T03:45:06.705+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198449",
                    "issueId": "13123305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123305/worklog/198470",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3642: ARROW-1896: [C++] Do not allocate memory inside CastKernel. Clean up template instantiation to not generate dead identity cast code\nURL: https://github.com/apache/arrow/pull/3642#discussion_r256689006\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -690,11 +616,38 @@ struct CastFunctor<Date32Type, Date64Type> {\n // ----------------------------------------------------------------------\n // List to List\n \n-class ListCastKernel : public UnaryKernel {\n+class CastKernelBase : public UnaryKernel {\n+ public:\n+  explicit CastKernelBase(const std::shared_ptr<DataType>& out_type)\n \n Review comment:\n   style nit: I know this is the convention in the code base if we pass in parameters that are going to be copied anyways, we might consider passing by value and using std::move inside the method instead.  This allows for passing one time use parameters with std::move as well, which can avoid a copy.  The performance benefits (especially for shared_ptrs) aren't clear\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T05:13:28.088+0000",
                    "updated": "2019-02-14T05:13:28.088+0000",
                    "started": "2019-02-14T05:13:28.087+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198470",
                    "issueId": "13123305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123305/worklog/198471",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3642: ARROW-1896: [C++] Do not allocate memory inside CastKernel. Clean up template instantiation to not generate dead identity cast code\nURL: https://github.com/apache/arrow/pull/3642#discussion_r256687769\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/util-internal.cc\n ##########\n @@ -165,46 +171,96 @@ Datum WrapDatumsLike(const Datum& value, const std::vector<Datum>& datums) {\n }\n \n PrimitiveAllocatingUnaryKernel::PrimitiveAllocatingUnaryKernel(\n-    std::unique_ptr<UnaryKernel> delegate)\n-    : delegate_(std::move(delegate)) {}\n+    UnaryKernel* delegate, const std::shared_ptr<DataType>& out_type)\n+    : delegate_(delegate), out_type_(out_type) {}\n+\n+PrimitiveAllocatingUnaryKernel::PrimitiveAllocatingUnaryKernel(\n+    std::unique_ptr<UnaryKernel> delegate, const std::shared_ptr<DataType>& out_type)\n+    : PrimitiveAllocatingUnaryKernel(delegate.get(), out_type) {\n+  owned_delegate_ = std::move(delegate);\n+}\n \n inline void ZeroLastByte(Buffer* buffer) {\n   *(buffer->mutable_data() + (buffer->size() - 1)) = 0;\n }\n \n-Status PrimitiveAllocatingUnaryKernel::Call(FunctionContext* ctx, const Datum& input,\n-                                            Datum* out) {\n-  std::vector<std::shared_ptr<Buffer>> data_buffers;\n-  const ArrayData& in_data = *input.array();\n-  MemoryPool* pool = ctx->memory_pool();\n+Status PropagateNulls(FunctionContext* ctx, const ArrayData& input, ArrayData* output) {\n+  const int64_t length = input.length;\n \n-  // Handle the validity buffer.\n-  if (in_data.offset == 0 || in_data.null_count <= 0) {\n-    // Validity bitmap will be zero copied (or allocated when buffer is known).\n-    data_buffers.emplace_back();\n-  } else {\n+  if (output->buffers.size() == 0) {\n+    // Ensure we can assign a buffer\n+    output->buffers.resize(1);\n+  }\n+\n+  // Handle validity bitmap\n+  output->null_count = input.GetNullCount();\n+  if (input.offset != 0 && output->null_count > 0) {\n+    DCHECK(input.buffers[0]);\n+    const Buffer& validity_bitmap = *input.buffers[0];\n     std::shared_ptr<Buffer> buffer;\n-    RETURN_NOT_OK(AllocateBitmap(pool, in_data.length, &buffer));\n+    RETURN_NOT_OK(ctx->Allocate(BitUtil::BytesForBits(length), &buffer));\n     // Per spec all trailing bits should indicate nullness, since\n     // the last byte might only be partially set, we ensure the\n     // remaining bit is set.\n     ZeroLastByte(buffer.get());\n     buffer->ZeroPadding();\n-    data_buffers.push_back(buffer);\n+    internal::CopyBitmap(validity_bitmap.data(), input.offset, length,\n+                         buffer->mutable_data(), 0 /* destination offset */);\n+    output->buffers[0] = std::move(buffer);\n+  } else {\n+    output->buffers[0] = input.buffers[0];\n   }\n-  // Allocate the boolean value buffer.\n+  return Status::OK();\n+}\n+\n+Status PrimitiveAllocatingUnaryKernel::Call(FunctionContext* ctx, const Datum& input,\n+                                            Datum* out) {\n+  std::vector<std::shared_ptr<Buffer>> data_buffers;\n+  const ArrayData& in_data = *input.array();\n+\n+  DCHECK_EQ(out->kind(), Datum::ARRAY);\n+\n+  ArrayData* result = out->array().get();\n+\n+  result->buffers.resize(2);\n+\n+  const int64_t length = in_data.length;\n+\n+  // Allocate the value buffer\n   std::shared_ptr<Buffer> buffer;\n-  RETURN_NOT_OK(AllocateBitmap(pool, in_data.length, &buffer));\n-  // Some utility methods access the last byte before it might be\n-  // initialized this makes valgrind/asan unhappy, so we proactively\n-  // zero it.\n-  ZeroLastByte(buffer.get());\n-  data_buffers.push_back(buffer);\n-  out->value = ArrayData::Make(null(), in_data.length, data_buffers);\n+  if (out_type_->id() != Type::NA) {\n+    const auto& fw_type = checked_cast<const FixedWidthType&>(*out_type_);\n+\n+    int bit_width = fw_type.bit_width();\n+    int64_t buffer_size = 0;\n \n+    if (bit_width == 1) {\n+      buffer_size = BitUtil::BytesForBits(length);\n+    } else if (bit_width % 8 == 0) {\n+      buffer_size = length * fw_type.bit_width() / 8;\n+    } else {\n+      DCHECK(false);\n+    }\n+    RETURN_NOT_OK(ctx->Allocate(buffer_size, &buffer));\n+    buffer->ZeroPadding();\n+\n+    if (bit_width == 1) {\n+      // Some utility methods access the last byte before it might be\n+      // initialized this makes valgrind/asan unhappy, so we proactively\n+      // zero it.\n+      ZeroLastByte(buffer.get());\n+    }\n+\n+    memset(buffer->mutable_data(), 0, buffer_size);\n \n Review comment:\n   why the memset?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T05:13:28.095+0000",
                    "updated": "2019-02-14T05:13:28.095+0000",
                    "started": "2019-02-14T05:13:28.095+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198471",
                    "issueId": "13123305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123305/worklog/198472",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3642: ARROW-1896: [C++] Do not allocate memory inside CastKernel. Clean up template instantiation to not generate dead identity cast code\nURL: https://github.com/apache/arrow/pull/3642#discussion_r256689158\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast-codegen-internal.h\n ##########\n @@ -0,0 +1,266 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n \n Review comment:\n   is it possible to indicate what script generated the file?  (I know grep/directory structure would make it not too hard to find but still might be useful).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T05:13:28.111+0000",
                    "updated": "2019-02-14T05:13:28.111+0000",
                    "started": "2019-02-14T05:13:28.110+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198472",
                    "issueId": "13123305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123305/worklog/198473",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3642: ARROW-1896: [C++] Do not allocate memory inside CastKernel. Clean up template instantiation to not generate dead identity cast code\nURL: https://github.com/apache/arrow/pull/3642#discussion_r256687654\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/util-internal.cc\n ##########\n @@ -165,46 +171,96 @@ Datum WrapDatumsLike(const Datum& value, const std::vector<Datum>& datums) {\n }\n \n PrimitiveAllocatingUnaryKernel::PrimitiveAllocatingUnaryKernel(\n-    std::unique_ptr<UnaryKernel> delegate)\n-    : delegate_(std::move(delegate)) {}\n+    UnaryKernel* delegate, const std::shared_ptr<DataType>& out_type)\n+    : delegate_(delegate), out_type_(out_type) {}\n+\n+PrimitiveAllocatingUnaryKernel::PrimitiveAllocatingUnaryKernel(\n+    std::unique_ptr<UnaryKernel> delegate, const std::shared_ptr<DataType>& out_type)\n+    : PrimitiveAllocatingUnaryKernel(delegate.get(), out_type) {\n+  owned_delegate_ = std::move(delegate);\n+}\n \n inline void ZeroLastByte(Buffer* buffer) {\n   *(buffer->mutable_data() + (buffer->size() - 1)) = 0;\n }\n \n-Status PrimitiveAllocatingUnaryKernel::Call(FunctionContext* ctx, const Datum& input,\n-                                            Datum* out) {\n-  std::vector<std::shared_ptr<Buffer>> data_buffers;\n-  const ArrayData& in_data = *input.array();\n-  MemoryPool* pool = ctx->memory_pool();\n+Status PropagateNulls(FunctionContext* ctx, const ArrayData& input, ArrayData* output) {\n+  const int64_t length = input.length;\n \n-  // Handle the validity buffer.\n-  if (in_data.offset == 0 || in_data.null_count <= 0) {\n-    // Validity bitmap will be zero copied (or allocated when buffer is known).\n-    data_buffers.emplace_back();\n-  } else {\n+  if (output->buffers.size() == 0) {\n+    // Ensure we can assign a buffer\n+    output->buffers.resize(1);\n+  }\n+\n+  // Handle validity bitmap\n+  output->null_count = input.GetNullCount();\n+  if (input.offset != 0 && output->null_count > 0) {\n+    DCHECK(input.buffers[0]);\n+    const Buffer& validity_bitmap = *input.buffers[0];\n     std::shared_ptr<Buffer> buffer;\n-    RETURN_NOT_OK(AllocateBitmap(pool, in_data.length, &buffer));\n+    RETURN_NOT_OK(ctx->Allocate(BitUtil::BytesForBits(length), &buffer));\n     // Per spec all trailing bits should indicate nullness, since\n     // the last byte might only be partially set, we ensure the\n     // remaining bit is set.\n     ZeroLastByte(buffer.get());\n     buffer->ZeroPadding();\n-    data_buffers.push_back(buffer);\n+    internal::CopyBitmap(validity_bitmap.data(), input.offset, length,\n+                         buffer->mutable_data(), 0 /* destination offset */);\n+    output->buffers[0] = std::move(buffer);\n+  } else {\n+    output->buffers[0] = input.buffers[0];\n   }\n-  // Allocate the boolean value buffer.\n+  return Status::OK();\n+}\n+\n+Status PrimitiveAllocatingUnaryKernel::Call(FunctionContext* ctx, const Datum& input,\n+                                            Datum* out) {\n+  std::vector<std::shared_ptr<Buffer>> data_buffers;\n+  const ArrayData& in_data = *input.array();\n+\n+  DCHECK_EQ(out->kind(), Datum::ARRAY);\n+\n+  ArrayData* result = out->array().get();\n+\n+  result->buffers.resize(2);\n+\n+  const int64_t length = in_data.length;\n+\n+  // Allocate the value buffer\n   std::shared_ptr<Buffer> buffer;\n-  RETURN_NOT_OK(AllocateBitmap(pool, in_data.length, &buffer));\n-  // Some utility methods access the last byte before it might be\n-  // initialized this makes valgrind/asan unhappy, so we proactively\n-  // zero it.\n-  ZeroLastByte(buffer.get());\n-  data_buffers.push_back(buffer);\n-  out->value = ArrayData::Make(null(), in_data.length, data_buffers);\n+  if (out_type_->id() != Type::NA) {\n+    const auto& fw_type = checked_cast<const FixedWidthType&>(*out_type_);\n+\n+    int bit_width = fw_type.bit_width();\n+    int64_t buffer_size = 0;\n \n+    if (bit_width == 1) {\n+      buffer_size = BitUtil::BytesForBits(length);\n+    } else if (bit_width % 8 == 0) {\n+      buffer_size = length * fw_type.bit_width() / 8;\n+    } else {\n+      DCHECK(false);\n \n Review comment:\n   do DCHECKS support a message?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T05:13:28.180+0000",
                    "updated": "2019-02-14T05:13:28.180+0000",
                    "started": "2019-02-14T05:13:28.179+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198473",
                    "issueId": "13123305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123305/worklog/198474",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3642: ARROW-1896: [C++] Do not allocate memory inside CastKernel. Clean up template instantiation to not generate dead identity cast code\nURL: https://github.com/apache/arrow/pull/3642#discussion_r256689449\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -1085,269 +1036,83 @@ typedef std::function<void(FunctionContext*, const CastOptions& options, const A\n                            ArrayData*)>\n     CastFunction;\n \n-static Status AllocateIfNotPreallocated(FunctionContext* ctx, const ArrayData& input,\n-                                        bool can_pre_allocate_values, ArrayData* out) {\n-  const int64_t length = input.length;\n-  out->null_count = input.null_count;\n-\n-  // Propagate bitmap unless we are null type\n-  std::shared_ptr<Buffer> validity_bitmap = input.buffers[0];\n-  if (input.type->id() == Type::NA) {\n-    int64_t bitmap_size = BitUtil::BytesForBits(length);\n-    RETURN_NOT_OK(ctx->Allocate(bitmap_size, &validity_bitmap));\n-    memset(validity_bitmap->mutable_data(), 0, bitmap_size);\n-  } else if (input.offset != 0) {\n-    RETURN_NOT_OK(CopyBitmap(ctx->memory_pool(), validity_bitmap->data(), input.offset,\n-                             length, &validity_bitmap));\n-  }\n+class IdentityCast : public CastKernelBase {\n+ public:\n+  using CastKernelBase::CastKernelBase;\n \n-  if (out->buffers.size() == 2) {\n-    // Assuming preallocated, propagage bitmap and move on\n-    out->buffers[0] = validity_bitmap;\n+  Status Call(FunctionContext* ctx, const Datum& input, Datum* out) override {\n+    DCHECK_EQ(input.kind(), Datum::ARRAY);\n+    out->value = input.array()->Copy();\n     return Status::OK();\n-  } else {\n-    DCHECK_EQ(0, out->buffers.size());\n   }\n \n-  out->buffers.push_back(validity_bitmap);\n-\n-  if (can_pre_allocate_values) {\n-    std::shared_ptr<Buffer> out_data;\n-\n-    const Type::type type_id = out->type->id();\n-\n-    if (!(is_primitive(type_id) || type_id == Type::FIXED_SIZE_BINARY ||\n-          type_id == Type::DECIMAL)) {\n-      return Status::NotImplemented(\"Cannot pre-allocate memory for type: \",\n-                                    out->type->ToString());\n-    }\n-\n-    if (type_id != Type::NA) {\n-      const auto& fw_type = checked_cast<const FixedWidthType&>(*out->type);\n-\n-      int bit_width = fw_type.bit_width();\n-      int64_t buffer_size = 0;\n-\n-      if (bit_width == 1) {\n-        buffer_size = BitUtil::BytesForBits(length);\n-      } else if (bit_width % 8 == 0) {\n-        buffer_size = length * fw_type.bit_width() / 8;\n-      } else {\n-        DCHECK(false);\n-      }\n-\n-      RETURN_NOT_OK(ctx->Allocate(buffer_size, &out_data));\n-      memset(out_data->mutable_data(), 0, buffer_size);\n-\n-      out->buffers.push_back(out_data);\n-    }\n-  }\n-\n-  return Status::OK();\n-}\n+ private:\n+  std::shared_ptr<DataType> out_type_;\n+};\n \n-class IdentityCast : public UnaryKernel {\n+class ZeroCopyCast : public CastKernelBase {\n  public:\n-  IdentityCast() {}\n+  using CastKernelBase::CastKernelBase;\n \n   Status Call(FunctionContext* ctx, const Datum& input, Datum* out) override {\n     DCHECK_EQ(input.kind(), Datum::ARRAY);\n-    out->value = input.array()->Copy();\n+    auto result = input.array()->Copy();\n+    result->type = out_type_;\n+    out->value = result;\n     return Status::OK();\n   }\n };\n \n-class CastKernel : public UnaryKernel {\n+class CastKernel : public CastKernelBase {\n  public:\n-  CastKernel(const CastOptions& options, const CastFunction& func, bool is_zero_copy,\n-             bool can_pre_allocate_values, const std::shared_ptr<DataType>& out_type)\n-      : options_(options),\n-        func_(func),\n-        is_zero_copy_(is_zero_copy),\n-        can_pre_allocate_values_(can_pre_allocate_values),\n-        out_type_(out_type) {}\n+  CastKernel(const CastOptions& options, const CastFunction& func,\n+             const std::shared_ptr<DataType>& out_type)\n+      : CastKernelBase(out_type), options_(options), func_(func) {}\n \n   Status Call(FunctionContext* ctx, const Datum& input, Datum* out) override {\n-    if (input.kind() != Datum::ARRAY)\n-      return Status::NotImplemented(\"CastKernel only supports Datum::ARRAY input\");\n+    DCHECK_EQ(input.kind(), Datum::ARRAY);\n+    DCHECK_EQ(out->kind(), Datum::ARRAY);\n \n     const ArrayData& in_data = *input.array();\n+    ArrayData* result = out->array().get();\n \n-    switch (out->kind()) {\n-      case Datum::NONE:\n-        out->value = ArrayData::Make(out_type_, in_data.length);\n-        break;\n-      case Datum::ARRAY:\n-        break;\n-      default:\n-        return Status::NotImplemented(\"CastKernel only supports Datum::ARRAY output\");\n-    }\n+    RETURN_NOT_OK(detail::PropagateNulls(ctx, in_data, result));\n \n-    ArrayData* result = out->array().get();\n-    if (!is_zero_copy_) {\n-      RETURN_NOT_OK(\n-          AllocateIfNotPreallocated(ctx, in_data, can_pre_allocate_values_, result));\n-    }\n     func_(ctx, options_, in_data, result);\n-\n     RETURN_IF_ERROR(ctx);\n     return Status::OK();\n   }\n \n  private:\n   CastOptions options_;\n   CastFunction func_;\n-  bool is_zero_copy_;\n-  bool can_pre_allocate_values_;\n-  std::shared_ptr<DataType> out_type_;\n };\n \n-// TODO(wesm): ARROW-4110 Do not generate cases that could return IdentityCast\n-\n #define CAST_CASE(InType, OutType)                                                      \\\n   case OutType::type_id:                                                                \\\n-    is_zero_copy = is_zero_copy_cast<OutType, InType>::value;                           \\\n-    can_pre_allocate_values =                                                           \\\n-        !(!is_binary_like(InType::type_id) && is_binary_like(OutType::type_id));        \\\n     func = [](FunctionContext* ctx, const CastOptions& options, const ArrayData& input, \\\n               ArrayData* out) {                                                         \\\n       CastFunctor<OutType, InType> func;                                                \\\n       func(ctx, options, input, out);                                                   \\\n     };                                                                                  \\\n     break;\n \n-#define NUMERIC_CASES(FN, IN_TYPE) \\\n-  FN(IN_TYPE, BooleanType);        \\\n-  FN(IN_TYPE, UInt8Type);          \\\n-  FN(IN_TYPE, Int8Type);           \\\n-  FN(IN_TYPE, UInt16Type);         \\\n-  FN(IN_TYPE, Int16Type);          \\\n-  FN(IN_TYPE, UInt32Type);         \\\n-  FN(IN_TYPE, Int32Type);          \\\n-  FN(IN_TYPE, UInt64Type);         \\\n-  FN(IN_TYPE, Int64Type);          \\\n-  FN(IN_TYPE, FloatType);          \\\n-  FN(IN_TYPE, DoubleType);\n-\n-#define NULL_CASES(FN, IN_TYPE) \\\n-  NUMERIC_CASES(FN, IN_TYPE)    \\\n-  FN(NullType, Time32Type);     \\\n-  FN(NullType, Date32Type);     \\\n-  FN(NullType, TimestampType);  \\\n-  FN(NullType, Time64Type);     \\\n-  FN(NullType, Date64Type);\n-\n-#define INT32_CASES(FN, IN_TYPE) \\\n-  NUMERIC_CASES(FN, IN_TYPE)     \\\n-  FN(Int32Type, Time32Type);     \\\n-  FN(Int32Type, Date32Type);\n-\n-#define INT64_CASES(FN, IN_TYPE) \\\n-  NUMERIC_CASES(FN, IN_TYPE)     \\\n-  FN(Int64Type, TimestampType);  \\\n-  FN(Int64Type, Time64Type);     \\\n-  FN(Int64Type, Date64Type);\n-\n-#define DATE32_CASES(FN, IN_TYPE) \\\n-  FN(Date32Type, Date64Type);     \\\n-  FN(Date32Type, Int32Type);\n-\n-#define DATE64_CASES(FN, IN_TYPE) \\\n-  FN(Date64Type, Date32Type);     \\\n-  FN(Date64Type, Int64Type);\n-\n-#define TIME32_CASES(FN, IN_TYPE) \\\n-  FN(Time32Type, Time32Type);     \\\n-  FN(Time32Type, Time64Type);     \\\n-  FN(Time32Type, Int32Type);\n-\n-#define TIME64_CASES(FN, IN_TYPE) \\\n-  FN(Time64Type, Time32Type);     \\\n-  FN(Time64Type, Time64Type);     \\\n-  FN(Time64Type, Int64Type);\n-\n-#define TIMESTAMP_CASES(FN, IN_TYPE) \\\n-  FN(TimestampType, TimestampType);  \\\n-  FN(TimestampType, Date32Type);     \\\n-  FN(TimestampType, Date64Type);     \\\n-  FN(TimestampType, Int64Type);\n-\n-#define BINARY_CASES(FN, IN_TYPE) FN(BinaryType, StringType);\n-\n-#define STRING_CASES(FN, IN_TYPE) \\\n-  FN(StringType, BooleanType);    \\\n-  FN(StringType, UInt8Type);      \\\n-  FN(StringType, Int8Type);       \\\n-  FN(StringType, UInt16Type);     \\\n-  FN(StringType, Int16Type);      \\\n-  FN(StringType, UInt32Type);     \\\n-  FN(StringType, Int32Type);      \\\n-  FN(StringType, UInt64Type);     \\\n-  FN(StringType, Int64Type);      \\\n-  FN(StringType, FloatType);      \\\n-  FN(StringType, DoubleType);     \\\n-  FN(StringType, TimestampType);\n-\n-#define DICTIONARY_CASES(FN, IN_TYPE) \\\n-  FN(IN_TYPE, NullType);              \\\n-  FN(IN_TYPE, Time32Type);            \\\n-  FN(IN_TYPE, Date32Type);            \\\n-  FN(IN_TYPE, TimestampType);         \\\n-  FN(IN_TYPE, Time64Type);            \\\n-  FN(IN_TYPE, Date64Type);            \\\n-  FN(IN_TYPE, UInt8Type);             \\\n-  FN(IN_TYPE, Int8Type);              \\\n-  FN(IN_TYPE, UInt16Type);            \\\n-  FN(IN_TYPE, Int16Type);             \\\n-  FN(IN_TYPE, UInt32Type);            \\\n-  FN(IN_TYPE, Int32Type);             \\\n-  FN(IN_TYPE, UInt64Type);            \\\n-  FN(IN_TYPE, Int64Type);             \\\n-  FN(IN_TYPE, FloatType);             \\\n-  FN(IN_TYPE, DoubleType);            \\\n-  FN(IN_TYPE, FixedSizeBinaryType);   \\\n-  FN(IN_TYPE, Decimal128Type);        \\\n-  FN(IN_TYPE, BinaryType);            \\\n-  FN(IN_TYPE, StringType);\n-\n-#define GET_CAST_FUNCTION(CASE_GENERATOR, InType)                              \\\n-  static std::unique_ptr<UnaryKernel> Get##InType##CastFunc(                   \\\n-      const std::shared_ptr<DataType>& out_type, const CastOptions& options) { \\\n-    CastFunction func;                                                         \\\n-    bool is_zero_copy = false;                                                 \\\n-    bool can_pre_allocate_values = true;                                       \\\n-    switch (out_type->id()) {                                                  \\\n-      CASE_GENERATOR(CAST_CASE, InType);                                       \\\n-      default:                                                                 \\\n-        break;                                                                 \\\n-    }                                                                          \\\n-    if (func != nullptr) {                                                     \\\n-      return std::unique_ptr<UnaryKernel>(new CastKernel(                      \\\n-          options, func, is_zero_copy, can_pre_allocate_values, out_type));    \\\n-    }                                                                          \\\n-    return nullptr;                                                            \\\n+#define GET_CAST_FUNCTION(CASE_GENERATOR, InType)                                   \\\n+  static std::unique_ptr<UnaryKernel> Get##InType##CastFunc(                        \\\n+      const std::shared_ptr<DataType>& out_type, const CastOptions& options) {      \\\n+    CastFunction func;                                                              \\\n+    switch (out_type->id()) {                                                       \\\n+      CASE_GENERATOR(CAST_CASE);                                                    \\\n+      default:                                                                      \\\n+        break;                                                                      \\\n+    }                                                                               \\\n+    if (func != nullptr) {                                                          \\\n \n Review comment:\n   NULLPTR?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T05:13:28.182+0000",
                    "updated": "2019-02-14T05:13:28.182+0000",
                    "started": "2019-02-14T05:13:28.182+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198474",
                    "issueId": "13123305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123305/worklog/198475",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3642: ARROW-1896: [C++] Do not allocate memory inside CastKernel. Clean up template instantiation to not generate dead identity cast code\nURL: https://github.com/apache/arrow/pull/3642#discussion_r256690579\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/util-internal.h\n ##########\n @@ -72,21 +75,20 @@ Datum WrapDatumsLike(const Datum& value, const std::vector<Datum>& datums);\n /// \\brief Kernel used to preallocate outputs for primitive types.\n class PrimitiveAllocatingUnaryKernel : public UnaryKernel {\n \n Review comment:\n   it would be nice to add a test for this (one of the reasons I added gmock...\r\n   \r\n   I didn't on the first pass because I figured I would add it as part of the TODO\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T05:13:28.261+0000",
                    "updated": "2019-02-14T05:13:28.261+0000",
                    "started": "2019-02-14T05:13:28.260+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198475",
                    "issueId": "13123305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123305/worklog/198476",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3642: ARROW-1896: [C++] Do not allocate memory inside CastKernel. Clean up template instantiation to not generate dead identity cast code\nURL: https://github.com/apache/arrow/pull/3642#discussion_r256690403\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/util-internal.h\n ##########\n @@ -72,21 +75,20 @@ Datum WrapDatumsLike(const Datum& value, const std::vector<Datum>& datums);\n /// \\brief Kernel used to preallocate outputs for primitive types.\n class PrimitiveAllocatingUnaryKernel : public UnaryKernel {\n  public:\n-  explicit PrimitiveAllocatingUnaryKernel(std::unique_ptr<UnaryKernel> delegate);\n-  /// \\brief Sets out to be of type ArrayData with the necessary\n-  /// data buffers prepopulated.\n-  ///\n-  /// This method does not populate types on arrays and sets type to null.\n-  ///\n-  /// The current implementation only supports primitive boolean outputs and\n-  /// assumes validity bitmaps that are not sliced will be zero copied (i.e.\n-  /// no allocation happens for them).\n-  ///\n-  /// TODO(ARROW-1896): Make this generic enough to support casts.\n+  PrimitiveAllocatingUnaryKernel(std::unique_ptr<UnaryKernel> delegate,\n+                                 const std::shared_ptr<DataType>& out_type);\n+  PrimitiveAllocatingUnaryKernel(UnaryKernel* delegate,\n+                                 const std::shared_ptr<DataType>& out_type);\n+  /// \\brief Allocates ArrayData with the necessary data buffers allocated and\n+  /// then written into by the kernel\n \n Review comment:\n   delegate or delegate kernel\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T05:13:28.282+0000",
                    "updated": "2019-02-14T05:13:28.282+0000",
                    "started": "2019-02-14T05:13:28.281+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198476",
                    "issueId": "13123305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123305/worklog/198477",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3642: ARROW-1896: [C++] Do not allocate memory inside CastKernel. Clean up template instantiation to not generate dead identity cast code\nURL: https://github.com/apache/arrow/pull/3642#discussion_r256689747\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast-codegen-internal.h\n ##########\n @@ -0,0 +1,266 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT\n+\n+#define NULL_CASES(TEMPLATE) \\\n+  TEMPLATE(NullType, BooleanType) \\\n+  TEMPLATE(NullType, UInt8Type) \\\n+  TEMPLATE(NullType, Int8Type) \\\n+  TEMPLATE(NullType, UInt16Type) \\\n+  TEMPLATE(NullType, Int16Type) \\\n+  TEMPLATE(NullType, UInt32Type) \\\n+  TEMPLATE(NullType, Int32Type) \\\n+  TEMPLATE(NullType, UInt64Type) \\\n+  TEMPLATE(NullType, Int64Type) \\\n+  TEMPLATE(NullType, FloatType) \\\n+  TEMPLATE(NullType, DoubleType) \\\n+  TEMPLATE(NullType, Date32Type) \\\n+  TEMPLATE(NullType, Date64Type) \\\n+  TEMPLATE(NullType, Time32Type) \\\n+  TEMPLATE(NullType, Time64Type) \\\n+  TEMPLATE(NullType, TimestampType) \\\n+\n+GET_CAST_FUNCTION(NULL_CASES, NullType)\n \n Review comment:\n   I don't know that I like generated code depending on non-generated code.  If at all possible can these be moved to the .cc file?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T05:13:28.303+0000",
                    "updated": "2019-02-14T05:13:28.303+0000",
                    "started": "2019-02-14T05:13:28.302+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198477",
                    "issueId": "13123305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123305/worklog/198478",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3642: ARROW-1896: [C++] Do not allocate memory inside CastKernel. Clean up template instantiation to not generate dead identity cast code\nURL: https://github.com/apache/arrow/pull/3642#discussion_r256691400\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernel.h\n ##########\n @@ -188,6 +188,8 @@ class ARROW_EXPORT UnaryKernel : public OpKernel {\n   /// there will be a more generic mechansim for understanding the necessary\n   /// contracts.\n   virtual Status Call(FunctionContext* ctx, const Datum& input, Datum* out) = 0;\n+\n+  virtual std::shared_ptr<DataType> out_type() const = 0;\n \n Review comment:\n   documentation?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T05:13:28.329+0000",
                    "updated": "2019-02-14T05:13:28.329+0000",
                    "started": "2019-02-14T05:13:28.328+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198478",
                    "issueId": "13123305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123305/worklog/198479",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3642: ARROW-1896: [C++] Do not allocate memory inside CastKernel. Clean up template instantiation to not generate dead identity cast code\nURL: https://github.com/apache/arrow/pull/3642#discussion_r256690433\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/util-internal.h\n ##########\n @@ -62,6 +62,9 @@ ARROW_EXPORT\n Status InvokeBinaryArrayKernel(FunctionContext* ctx, BinaryKernel* kernel,\n                                const Datum& left, const Datum& right, Datum* output);\n \n+ARROW_EXPORT\n \n Review comment:\n   Please document.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T05:13:28.339+0000",
                    "updated": "2019-02-14T05:13:28.339+0000",
                    "started": "2019-02-14T05:13:28.338+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198479",
                    "issueId": "13123305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123305/worklog/198480",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3642: ARROW-1896: [C++] Do not allocate memory inside CastKernel. Clean up template instantiation to not generate dead identity cast code\nURL: https://github.com/apache/arrow/pull/3642#discussion_r256690795\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -76,22 +76,23 @@ std::shared_ptr<ArrayData> ArrayData::Make(const std::shared_ptr<DataType>& type\n   return std::make_shared<ArrayData>(type, length, null_count, offset);\n }\n \n-// ----------------------------------------------------------------------\n-// Base array class\n-\n-int64_t Array::null_count() const {\n-  if (ARROW_PREDICT_FALSE(data_->null_count < 0)) {\n-    if (data_->buffers[0]) {\n-      data_->null_count =\n-          data_->length - CountSetBits(null_bitmap_data_, data_->offset, data_->length);\n-\n+int64_t ArrayData::GetNullCount() const {\n+  if (ARROW_PREDICT_FALSE(this->null_count < 0)) {\n \n Review comment:\n   not your change but can we use the unknown null count constant here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T05:13:28.427+0000",
                    "updated": "2019-02-14T05:13:28.427+0000",
                    "started": "2019-02-14T05:13:28.426+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198480",
                    "issueId": "13123305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123305/worklog/198481",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3642: ARROW-1896: [C++] Do not allocate memory inside CastKernel. Clean up template instantiation to not generate dead identity cast code\nURL: https://github.com/apache/arrow/pull/3642#discussion_r256692130\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/util-internal.cc\n ##########\n @@ -165,46 +171,96 @@ Datum WrapDatumsLike(const Datum& value, const std::vector<Datum>& datums) {\n }\n \n PrimitiveAllocatingUnaryKernel::PrimitiveAllocatingUnaryKernel(\n-    std::unique_ptr<UnaryKernel> delegate)\n-    : delegate_(std::move(delegate)) {}\n+    UnaryKernel* delegate, const std::shared_ptr<DataType>& out_type)\n+    : delegate_(delegate), out_type_(out_type) {}\n+\n+PrimitiveAllocatingUnaryKernel::PrimitiveAllocatingUnaryKernel(\n+    std::unique_ptr<UnaryKernel> delegate, const std::shared_ptr<DataType>& out_type)\n+    : PrimitiveAllocatingUnaryKernel(delegate.get(), out_type) {\n+  owned_delegate_ = std::move(delegate);\n+}\n \n inline void ZeroLastByte(Buffer* buffer) {\n   *(buffer->mutable_data() + (buffer->size() - 1)) = 0;\n }\n \n-Status PrimitiveAllocatingUnaryKernel::Call(FunctionContext* ctx, const Datum& input,\n-                                            Datum* out) {\n-  std::vector<std::shared_ptr<Buffer>> data_buffers;\n-  const ArrayData& in_data = *input.array();\n-  MemoryPool* pool = ctx->memory_pool();\n+Status PropagateNulls(FunctionContext* ctx, const ArrayData& input, ArrayData* output) {\n+  const int64_t length = input.length;\n \n-  // Handle the validity buffer.\n-  if (in_data.offset == 0 || in_data.null_count <= 0) {\n-    // Validity bitmap will be zero copied (or allocated when buffer is known).\n-    data_buffers.emplace_back();\n-  } else {\n+  if (output->buffers.size() == 0) {\n+    // Ensure we can assign a buffer\n+    output->buffers.resize(1);\n+  }\n+\n+  // Handle validity bitmap\n+  output->null_count = input.GetNullCount();\n+  if (input.offset != 0 && output->null_count > 0) {\n+    DCHECK(input.buffers[0]);\n+    const Buffer& validity_bitmap = *input.buffers[0];\n     std::shared_ptr<Buffer> buffer;\n-    RETURN_NOT_OK(AllocateBitmap(pool, in_data.length, &buffer));\n+    RETURN_NOT_OK(ctx->Allocate(BitUtil::BytesForBits(length), &buffer));\n \n Review comment:\n   just curious why the preference for this form vs the original?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T05:13:28.503+0000",
                    "updated": "2019-02-14T05:13:28.503+0000",
                    "started": "2019-02-14T05:13:28.502+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198481",
                    "issueId": "13123305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123305/worklog/198482",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3642: ARROW-1896: [C++] Do not allocate memory inside CastKernel. Clean up template instantiation to not generate dead identity cast code\nURL: https://github.com/apache/arrow/pull/3642#discussion_r256690634\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/hash.cc\n ##########\n @@ -64,14 +64,26 @@ namespace {\n // ----------------------------------------------------------------------\n // Unique implementation\n \n-class UniqueAction {\n+class ActionBase {\n  public:\n-  UniqueAction(const std::shared_ptr<DataType>& type, MemoryPool* pool) {}\n+  ActionBase(const std::shared_ptr<DataType>& type, MemoryPool* pool)\n+      : type_(type), pool_(pool) {}\n+\n+ protected:\n+  std::shared_ptr<DataType> type_;\n+  MemoryPool* pool_;\n+};\n+\n+class UniqueAction : public ActionBase {\n \n Review comment:\n   I should have pushed harder to get ValueCounts done :(\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T05:13:28.511+0000",
                    "updated": "2019-02-14T05:13:28.511+0000",
                    "started": "2019-02-14T05:13:28.510+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198482",
                    "issueId": "13123305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123305/worklog/198487",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3642: ARROW-1896: [C++] Do not allocate memory inside CastKernel. Clean up template instantiation to not generate dead identity cast code\nURL: https://github.com/apache/arrow/pull/3642#discussion_r256694897\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/util-internal.cc\n ##########\n @@ -165,46 +171,96 @@ Datum WrapDatumsLike(const Datum& value, const std::vector<Datum>& datums) {\n }\n \n PrimitiveAllocatingUnaryKernel::PrimitiveAllocatingUnaryKernel(\n-    std::unique_ptr<UnaryKernel> delegate)\n-    : delegate_(std::move(delegate)) {}\n+    UnaryKernel* delegate, const std::shared_ptr<DataType>& out_type)\n+    : delegate_(delegate), out_type_(out_type) {}\n+\n+PrimitiveAllocatingUnaryKernel::PrimitiveAllocatingUnaryKernel(\n+    std::unique_ptr<UnaryKernel> delegate, const std::shared_ptr<DataType>& out_type)\n+    : PrimitiveAllocatingUnaryKernel(delegate.get(), out_type) {\n+  owned_delegate_ = std::move(delegate);\n+}\n \n inline void ZeroLastByte(Buffer* buffer) {\n   *(buffer->mutable_data() + (buffer->size() - 1)) = 0;\n }\n \n-Status PrimitiveAllocatingUnaryKernel::Call(FunctionContext* ctx, const Datum& input,\n-                                            Datum* out) {\n-  std::vector<std::shared_ptr<Buffer>> data_buffers;\n-  const ArrayData& in_data = *input.array();\n-  MemoryPool* pool = ctx->memory_pool();\n+Status PropagateNulls(FunctionContext* ctx, const ArrayData& input, ArrayData* output) {\n+  const int64_t length = input.length;\n \n-  // Handle the validity buffer.\n-  if (in_data.offset == 0 || in_data.null_count <= 0) {\n-    // Validity bitmap will be zero copied (or allocated when buffer is known).\n-    data_buffers.emplace_back();\n-  } else {\n+  if (output->buffers.size() == 0) {\n+    // Ensure we can assign a buffer\n+    output->buffers.resize(1);\n+  }\n+\n+  // Handle validity bitmap\n+  output->null_count = input.GetNullCount();\n+  if (input.offset != 0 && output->null_count > 0) {\n+    DCHECK(input.buffers[0]);\n+    const Buffer& validity_bitmap = *input.buffers[0];\n     std::shared_ptr<Buffer> buffer;\n-    RETURN_NOT_OK(AllocateBitmap(pool, in_data.length, &buffer));\n+    RETURN_NOT_OK(ctx->Allocate(BitUtil::BytesForBits(length), &buffer));\n     // Per spec all trailing bits should indicate nullness, since\n     // the last byte might only be partially set, we ensure the\n     // remaining bit is set.\n     ZeroLastByte(buffer.get());\n     buffer->ZeroPadding();\n-    data_buffers.push_back(buffer);\n+    internal::CopyBitmap(validity_bitmap.data(), input.offset, length,\n+                         buffer->mutable_data(), 0 /* destination offset */);\n+    output->buffers[0] = std::move(buffer);\n+  } else {\n+    output->buffers[0] = input.buffers[0];\n   }\n-  // Allocate the boolean value buffer.\n+  return Status::OK();\n+}\n+\n+Status PrimitiveAllocatingUnaryKernel::Call(FunctionContext* ctx, const Datum& input,\n+                                            Datum* out) {\n+  std::vector<std::shared_ptr<Buffer>> data_buffers;\n+  const ArrayData& in_data = *input.array();\n+\n+  DCHECK_EQ(out->kind(), Datum::ARRAY);\n+\n+  ArrayData* result = out->array().get();\n+\n+  result->buffers.resize(2);\n+\n+  const int64_t length = in_data.length;\n+\n+  // Allocate the value buffer\n   std::shared_ptr<Buffer> buffer;\n-  RETURN_NOT_OK(AllocateBitmap(pool, in_data.length, &buffer));\n-  // Some utility methods access the last byte before it might be\n-  // initialized this makes valgrind/asan unhappy, so we proactively\n-  // zero it.\n-  ZeroLastByte(buffer.get());\n-  data_buffers.push_back(buffer);\n-  out->value = ArrayData::Make(null(), in_data.length, data_buffers);\n+  if (out_type_->id() != Type::NA) {\n+    const auto& fw_type = checked_cast<const FixedWidthType&>(*out_type_);\n+\n+    int bit_width = fw_type.bit_width();\n+    int64_t buffer_size = 0;\n \n+    if (bit_width == 1) {\n+      buffer_size = BitUtil::BytesForBits(length);\n+    } else if (bit_width % 8 == 0) {\n+      buffer_size = length * fw_type.bit_width() / 8;\n+    } else {\n+      DCHECK(false);\n+    }\n+    RETURN_NOT_OK(ctx->Allocate(buffer_size, &buffer));\n+    buffer->ZeroPadding();\n+\n+    if (bit_width == 1) {\n+      // Some utility methods access the last byte before it might be\n+      // initialized this makes valgrind/asan unhappy, so we proactively\n+      // zero it.\n+      ZeroLastByte(buffer.get());\n+    }\n+\n+    memset(buffer->mutable_data(), 0, buffer_size);\n \n Review comment:\n   This was in the original version, so I left it\r\n   \r\n   https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/cast.cc#L1140\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T05:26:55.309+0000",
                    "updated": "2019-02-14T05:26:55.309+0000",
                    "started": "2019-02-14T05:26:55.309+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198487",
                    "issueId": "13123305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123305/worklog/198488",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3642: ARROW-1896: [C++] Do not allocate memory inside CastKernel. Clean up template instantiation to not generate dead identity cast code\nURL: https://github.com/apache/arrow/pull/3642#discussion_r256694939\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/util-internal.cc\n ##########\n @@ -165,46 +171,96 @@ Datum WrapDatumsLike(const Datum& value, const std::vector<Datum>& datums) {\n }\n \n PrimitiveAllocatingUnaryKernel::PrimitiveAllocatingUnaryKernel(\n-    std::unique_ptr<UnaryKernel> delegate)\n-    : delegate_(std::move(delegate)) {}\n+    UnaryKernel* delegate, const std::shared_ptr<DataType>& out_type)\n+    : delegate_(delegate), out_type_(out_type) {}\n+\n+PrimitiveAllocatingUnaryKernel::PrimitiveAllocatingUnaryKernel(\n+    std::unique_ptr<UnaryKernel> delegate, const std::shared_ptr<DataType>& out_type)\n+    : PrimitiveAllocatingUnaryKernel(delegate.get(), out_type) {\n+  owned_delegate_ = std::move(delegate);\n+}\n \n inline void ZeroLastByte(Buffer* buffer) {\n   *(buffer->mutable_data() + (buffer->size() - 1)) = 0;\n }\n \n-Status PrimitiveAllocatingUnaryKernel::Call(FunctionContext* ctx, const Datum& input,\n-                                            Datum* out) {\n-  std::vector<std::shared_ptr<Buffer>> data_buffers;\n-  const ArrayData& in_data = *input.array();\n-  MemoryPool* pool = ctx->memory_pool();\n+Status PropagateNulls(FunctionContext* ctx, const ArrayData& input, ArrayData* output) {\n+  const int64_t length = input.length;\n \n-  // Handle the validity buffer.\n-  if (in_data.offset == 0 || in_data.null_count <= 0) {\n-    // Validity bitmap will be zero copied (or allocated when buffer is known).\n-    data_buffers.emplace_back();\n-  } else {\n+  if (output->buffers.size() == 0) {\n+    // Ensure we can assign a buffer\n+    output->buffers.resize(1);\n+  }\n+\n+  // Handle validity bitmap\n+  output->null_count = input.GetNullCount();\n+  if (input.offset != 0 && output->null_count > 0) {\n+    DCHECK(input.buffers[0]);\n+    const Buffer& validity_bitmap = *input.buffers[0];\n     std::shared_ptr<Buffer> buffer;\n-    RETURN_NOT_OK(AllocateBitmap(pool, in_data.length, &buffer));\n+    RETURN_NOT_OK(ctx->Allocate(BitUtil::BytesForBits(length), &buffer));\n     // Per spec all trailing bits should indicate nullness, since\n     // the last byte might only be partially set, we ensure the\n     // remaining bit is set.\n     ZeroLastByte(buffer.get());\n     buffer->ZeroPadding();\n-    data_buffers.push_back(buffer);\n+    internal::CopyBitmap(validity_bitmap.data(), input.offset, length,\n+                         buffer->mutable_data(), 0 /* destination offset */);\n+    output->buffers[0] = std::move(buffer);\n+  } else {\n+    output->buffers[0] = input.buffers[0];\n   }\n-  // Allocate the boolean value buffer.\n+  return Status::OK();\n+}\n+\n+Status PrimitiveAllocatingUnaryKernel::Call(FunctionContext* ctx, const Datum& input,\n+                                            Datum* out) {\n+  std::vector<std::shared_ptr<Buffer>> data_buffers;\n+  const ArrayData& in_data = *input.array();\n+\n+  DCHECK_EQ(out->kind(), Datum::ARRAY);\n+\n+  ArrayData* result = out->array().get();\n+\n+  result->buffers.resize(2);\n+\n+  const int64_t length = in_data.length;\n+\n+  // Allocate the value buffer\n   std::shared_ptr<Buffer> buffer;\n-  RETURN_NOT_OK(AllocateBitmap(pool, in_data.length, &buffer));\n-  // Some utility methods access the last byte before it might be\n-  // initialized this makes valgrind/asan unhappy, so we proactively\n-  // zero it.\n-  ZeroLastByte(buffer.get());\n-  data_buffers.push_back(buffer);\n-  out->value = ArrayData::Make(null(), in_data.length, data_buffers);\n+  if (out_type_->id() != Type::NA) {\n+    const auto& fw_type = checked_cast<const FixedWidthType&>(*out_type_);\n+\n+    int bit_width = fw_type.bit_width();\n+    int64_t buffer_size = 0;\n \n+    if (bit_width == 1) {\n+      buffer_size = BitUtil::BytesForBits(length);\n+    } else if (bit_width % 8 == 0) {\n+      buffer_size = length * fw_type.bit_width() / 8;\n+    } else {\n+      DCHECK(false);\n \n Review comment:\n   This is copy-pasta. I'll add a message\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T05:27:13.010+0000",
                    "updated": "2019-02-14T05:27:13.010+0000",
                    "started": "2019-02-14T05:27:13.010+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198488",
                    "issueId": "13123305"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 19800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@103144e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@60712fba[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37c40498[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5ea1e125[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b01a9da[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3316d57b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2461e745[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@75188225[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@321aa25[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6990a37[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2de98e6e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1cd1385c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 19800,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Feb 15 04:56:34 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-02-15T04:56:34.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1896/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2017-12-06T21:44:13.000+0000",
        "updated": "2019-02-15T04:56:36.000+0000",
        "timeoriginalestimate": null,
        "description": "This is some refactoring / tidying. Unless an output of cast has a non-determinate size (e.g. is Binary or something else), the {{CastKernel::Call}} implementation should assume that it is writing into pre-allocated memory. The corresponding memory allocation can be lifted into the {{arrow::compute::Cast}} API",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 19800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Do not allocate memory for primitive outputs in CastKernel::Call implementation",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123305/comment/16768937",
                    "id": "16768937",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3642\n[https://github.com/apache/arrow/pull/3642]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-02-15T04:56:34.961+0000",
                    "updated": "2019-02-15T04:56:34.961+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3nmfr:",
        "customfield_12314139": null
    }
}