{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13398596",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398596",
    "key": "ARROW-13826",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jpedroantunes",
            "name": "jpedroantunes",
            "key": "jpedroantunes",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34060",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34060",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34060",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34060"
            },
            "displayName": "Jo\u00e3o Pedro Antunes Ferreira",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334626",
                "id": "12334626",
                "name": "C++ - Gandiva"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jpedroantunes",
            "name": "jpedroantunes",
            "key": "jpedroantunes",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34060",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34060",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34060",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34060"
            },
            "displayName": "Jo\u00e3o Pedro Antunes Ferreira",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jpedroantunes",
            "name": "jpedroantunes",
            "key": "jpedroantunes",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34060",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34060",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34060",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34060"
            },
            "displayName": "Jo\u00e3o Pedro Antunes Ferreira",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 11400,
            "total": 11400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 11400,
            "total": 11400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13826/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 19,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398596/worklog/644795",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jpedroantunes opened a new pull request #11049:\nURL: https://github.com/apache/arrow/pull/11049\n\n\n   Implement QUOTE Hive functions on Gandiva\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-01T07:35:10.998+0000",
                    "updated": "2021-09-01T07:35:10.998+0000",
                    "started": "2021-09-01T07:35:10.997+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "644795",
                    "issueId": "13398596"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398596/worklog/644796",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11049:\nURL: https://github.com/apache/arrow/pull/11049#issuecomment-910020513\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-01T07:35:35.713+0000",
                    "updated": "2021-09-01T07:35:35.713+0000",
                    "started": "2021-09-01T07:35:35.713+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "644796",
                    "issueId": "13398596"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398596/worklog/644955",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jpedroantunes opened a new pull request #11049:\nURL: https://github.com/apache/arrow/pull/11049\n\n\n   Implement QUOTE Hive functions on Gandiva\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-01T09:20:57.511+0000",
                    "updated": "2021-09-01T09:20:57.511+0000",
                    "started": "2021-09-01T09:20:57.511+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "644955",
                    "issueId": "13398596"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398596/worklog/645175",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11049:\nURL: https://github.com/apache/arrow/pull/11049#issuecomment-910020513\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-01T09:46:51.444+0000",
                    "updated": "2021-09-01T09:46:51.444+0000",
                    "started": "2021-09-01T09:46:51.444+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "645175",
                    "issueId": "13398596"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398596/worklog/673199",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rkavanap commented on a change in pull request #11049:\nURL: https://github.com/apache/arrow/pull/11049#discussion_r741133878\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1762,6 +1762,41 @@ const char* replace_utf8_utf8_utf8(gdv_int64 context, const char* text,\n                                              out_len);\n }\n \n+// Returns the quoted string (Includes escape character for any single quotes)\n+// E.g. DONT  -> 'DONT'\n+//      DON'T -> 'DON\\'T'\n+FORCE_INLINE\n+const char* quote_utf8(gdv_int64 context, const char* in, gdv_int32 in_len,\n+                       gdv_int32* out_len) {\n+  if (in_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // try to allocate double size output string (worst case)\n+  auto out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len * 2));\n\nReview comment:\n       shouldn't this be in_len * 2 + 1 for the worst case of the loop?\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops_test.cc\n##########\n@@ -912,6 +912,33 @@ TEST(TestStringOps, TestReverse) {\n   ctx.Reset();\n }\n \n+TEST(TestStringOps, TestQuote) {\n+  gandiva::ExecutionContext ctx;\n+  uint64_t ctx_ptr = reinterpret_cast<gdv_int64>(&ctx);\n+  gdv_int32 out_len = 0;\n+  const char* out_str;\n+\n+  out_str = quote_utf8(ctx_ptr, \"dont\", 4, &out_len);\n+  EXPECT_EQ(std::string(out_str, out_len), \"\\'dont\\'\");\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  out_str = quote_utf8(ctx_ptr, \"abc\", 3, &out_len);\n+  EXPECT_EQ(std::string(out_str, out_len), \"\\'abc\\'\");\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  out_str = quote_utf8(ctx_ptr, \"don't\", 5, &out_len);\n+  EXPECT_EQ(std::string(out_str, out_len), \"\\'don\\\\'t\\'\");\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  out_str = quote_utf8(ctx_ptr, \"\", 0, &out_len);\n+  EXPECT_EQ(std::string(out_str, out_len), \"\");\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  out_str = quote_utf8(ctx_ptr, \"'\", 1, &out_len);\n\nReview comment:\n       this is a good test. Maybe another one like this \"''''''''''''''''''''''\" with more quotes?\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1762,6 +1762,41 @@ const char* replace_utf8_utf8_utf8(gdv_int64 context, const char* text,\n                                              out_len);\n }\n \n+// Returns the quoted string (Includes escape character for any single quotes)\n+// E.g. DONT  -> 'DONT'\n+//      DON'T -> 'DON\\'T'\n+FORCE_INLINE\n+const char* quote_utf8(gdv_int64 context, const char* in, gdv_int32 in_len,\n+                       gdv_int32* out_len) {\n+  if (in_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // try to allocate double size output string (worst case)\n+  auto out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len * 2));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // The output string should start with a single quote\n+  out[0] = '\\'';\n+  gdv_int32 counter = 1;\n+  for (int i = 0; i < in_len; i++) {\n+    if (memcmp(in + i, \"'\", 1) == 0) {\n+      out[counter] = '\\\\';\n+      counter++;\n+      out[counter] = '\\'';\n+    } else {\n+      out[counter] = in[i];\n+    }\n+    counter++;\n+  }\n+  out[counter] = '\\'';\n\nReview comment:\n       won't this overflow for the case we have all quotes. Say we have 2 quotes and in_len is 2.. we allocate only 4 bytes, but this logic may need 5 bytes as follows '\\'\\'' which is 5 chars and not 4.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T14:43:39.922+0000",
                    "updated": "2021-11-02T14:43:39.922+0000",
                    "started": "2021-11-02T14:43:39.921+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673199",
                    "issueId": "13398596"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398596/worklog/673216",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rkavanap commented on a change in pull request #11049:\nURL: https://github.com/apache/arrow/pull/11049#discussion_r741133878\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1762,6 +1762,41 @@ const char* replace_utf8_utf8_utf8(gdv_int64 context, const char* text,\n                                              out_len);\n }\n \n+// Returns the quoted string (Includes escape character for any single quotes)\n+// E.g. DONT  -> 'DONT'\n+//      DON'T -> 'DON\\'T'\n+FORCE_INLINE\n+const char* quote_utf8(gdv_int64 context, const char* in, gdv_int32 in_len,\n+                       gdv_int32* out_len) {\n+  if (in_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // try to allocate double size output string (worst case)\n+  auto out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len * 2));\n\nReview comment:\n       shouldn't this be in_len * 2 + 2 for the worst case of the loop? or does in_len include the null termination of the string?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T15:15:17.976+0000",
                    "updated": "2021-11-02T15:15:17.976+0000",
                    "started": "2021-11-02T15:15:17.976+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673216",
                    "issueId": "13398596"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398596/worklog/673218",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rkavanap commented on a change in pull request #11049:\nURL: https://github.com/apache/arrow/pull/11049#discussion_r741133183\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1762,6 +1762,41 @@ const char* replace_utf8_utf8_utf8(gdv_int64 context, const char* text,\n                                              out_len);\n }\n \n+// Returns the quoted string (Includes escape character for any single quotes)\n+// E.g. DONT  -> 'DONT'\n+//      DON'T -> 'DON\\'T'\n+FORCE_INLINE\n+const char* quote_utf8(gdv_int64 context, const char* in, gdv_int32 in_len,\n+                       gdv_int32* out_len) {\n+  if (in_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // try to allocate double size output string (worst case)\n+  auto out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len * 2));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // The output string should start with a single quote\n+  out[0] = '\\'';\n+  gdv_int32 counter = 1;\n+  for (int i = 0; i < in_len; i++) {\n+    if (memcmp(in + i, \"'\", 1) == 0) {\n+      out[counter] = '\\\\';\n+      counter++;\n+      out[counter] = '\\'';\n+    } else {\n+      out[counter] = in[i];\n+    }\n+    counter++;\n+  }\n+  out[counter] = '\\'';\n\nReview comment:\n       won't this overflow for the case we have all quotes. Say we have 2 quotes and in_len is 2.. we allocate only 4 bytes, but this logic may need 5 bytes as follows '\\'\\'' which is 5 chars and not 4.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T15:15:36.838+0000",
                    "updated": "2021-11-02T15:15:36.838+0000",
                    "started": "2021-11-02T15:15:36.837+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673218",
                    "issueId": "13398596"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398596/worklog/673220",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rkavanap commented on a change in pull request #11049:\nURL: https://github.com/apache/arrow/pull/11049#discussion_r741133878\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1762,6 +1762,41 @@ const char* replace_utf8_utf8_utf8(gdv_int64 context, const char* text,\n                                              out_len);\n }\n \n+// Returns the quoted string (Includes escape character for any single quotes)\n+// E.g. DONT  -> 'DONT'\n+//      DON'T -> 'DON\\'T'\n+FORCE_INLINE\n+const char* quote_utf8(gdv_int64 context, const char* in, gdv_int32 in_len,\n+                       gdv_int32* out_len) {\n+  if (in_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // try to allocate double size output string (worst case)\n+  auto out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len * 2));\n\nReview comment:\n       shouldn't this be in_len * 2 + 2 for the worst case of the loop? or does in_len include the null termination of the string? Actually I see at least in the unit test that in_len does not include the null_termination of the string.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T15:17:16.584+0000",
                    "updated": "2021-11-02T15:17:16.584+0000",
                    "started": "2021-11-02T15:17:16.584+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673220",
                    "issueId": "13398596"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398596/worklog/673223",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rkavanap commented on a change in pull request #11049:\nURL: https://github.com/apache/arrow/pull/11049#discussion_r741185922\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1762,6 +1762,41 @@ const char* replace_utf8_utf8_utf8(gdv_int64 context, const char* text,\n                                              out_len);\n }\n \n+// Returns the quoted string (Includes escape character for any single quotes)\n+// E.g. DONT  -> 'DONT'\n+//      DON'T -> 'DON\\'T'\n+FORCE_INLINE\n+const char* quote_utf8(gdv_int64 context, const char* in, gdv_int32 in_len,\n+                       gdv_int32* out_len) {\n+  if (in_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // try to allocate double size output string (worst case)\n+  auto out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len * 2));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // The output string should start with a single quote\n+  out[0] = '\\'';\n+  gdv_int32 counter = 1;\n+  for (int i = 0; i < in_len; i++) {\n+    if (memcmp(in + i, \"'\", 1) == 0) {\n+      out[counter] = '\\\\';\n+      counter++;\n+      out[counter] = '\\'';\n+    } else {\n+      out[counter] = in[i];\n+    }\n+    counter++;\n+  }\n+  out[counter] = '\\'';\n\nReview comment:\n       won't this overflow for a quote only string. let us say we have a string with single quote of len 1,, then out is of len 2, but counter could be 3.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T15:20:15.151+0000",
                    "updated": "2021-11-02T15:20:15.151+0000",
                    "started": "2021-11-02T15:20:15.151+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673223",
                    "issueId": "13398596"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398596/worklog/673315",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rkavanap commented on a change in pull request #11049:\nURL: https://github.com/apache/arrow/pull/11049#discussion_r741133878\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1762,6 +1762,41 @@ const char* replace_utf8_utf8_utf8(gdv_int64 context, const char* text,\n                                              out_len);\n }\n \n+// Returns the quoted string (Includes escape character for any single quotes)\n+// E.g. DONT  -> 'DONT'\n+//      DON'T -> 'DON\\'T'\n+FORCE_INLINE\n+const char* quote_utf8(gdv_int64 context, const char* in, gdv_int32 in_len,\n+                       gdv_int32* out_len) {\n+  if (in_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // try to allocate double size output string (worst case)\n+  auto out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len * 2));\n\nReview comment:\n       shouldn't this be in_len * 2 + 1 for the worst case of the loop?\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops_test.cc\n##########\n@@ -912,6 +912,33 @@ TEST(TestStringOps, TestReverse) {\n   ctx.Reset();\n }\n \n+TEST(TestStringOps, TestQuote) {\n+  gandiva::ExecutionContext ctx;\n+  uint64_t ctx_ptr = reinterpret_cast<gdv_int64>(&ctx);\n+  gdv_int32 out_len = 0;\n+  const char* out_str;\n+\n+  out_str = quote_utf8(ctx_ptr, \"dont\", 4, &out_len);\n+  EXPECT_EQ(std::string(out_str, out_len), \"\\'dont\\'\");\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  out_str = quote_utf8(ctx_ptr, \"abc\", 3, &out_len);\n+  EXPECT_EQ(std::string(out_str, out_len), \"\\'abc\\'\");\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  out_str = quote_utf8(ctx_ptr, \"don't\", 5, &out_len);\n+  EXPECT_EQ(std::string(out_str, out_len), \"\\'don\\\\'t\\'\");\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  out_str = quote_utf8(ctx_ptr, \"\", 0, &out_len);\n+  EXPECT_EQ(std::string(out_str, out_len), \"\");\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  out_str = quote_utf8(ctx_ptr, \"'\", 1, &out_len);\n\nReview comment:\n       this is a good test. Maybe another one like this \"''''''''''''''''''''''\" with more quotes?\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1762,6 +1762,41 @@ const char* replace_utf8_utf8_utf8(gdv_int64 context, const char* text,\n                                              out_len);\n }\n \n+// Returns the quoted string (Includes escape character for any single quotes)\n+// E.g. DONT  -> 'DONT'\n+//      DON'T -> 'DON\\'T'\n+FORCE_INLINE\n+const char* quote_utf8(gdv_int64 context, const char* in, gdv_int32 in_len,\n+                       gdv_int32* out_len) {\n+  if (in_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // try to allocate double size output string (worst case)\n+  auto out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len * 2));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // The output string should start with a single quote\n+  out[0] = '\\'';\n+  gdv_int32 counter = 1;\n+  for (int i = 0; i < in_len; i++) {\n+    if (memcmp(in + i, \"'\", 1) == 0) {\n+      out[counter] = '\\\\';\n+      counter++;\n+      out[counter] = '\\'';\n+    } else {\n+      out[counter] = in[i];\n+    }\n+    counter++;\n+  }\n+  out[counter] = '\\'';\n\nReview comment:\n       won't this overflow for the case we have all quotes. Say we have 2 quotes and in_len is 2.. we allocate only 4 bytes, but this logic may need 5 bytes as follows '\\'\\'' which is 5 chars and not 4.\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1762,6 +1762,41 @@ const char* replace_utf8_utf8_utf8(gdv_int64 context, const char* text,\n                                              out_len);\n }\n \n+// Returns the quoted string (Includes escape character for any single quotes)\n+// E.g. DONT  -> 'DONT'\n+//      DON'T -> 'DON\\'T'\n+FORCE_INLINE\n+const char* quote_utf8(gdv_int64 context, const char* in, gdv_int32 in_len,\n+                       gdv_int32* out_len) {\n+  if (in_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // try to allocate double size output string (worst case)\n+  auto out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len * 2));\n\nReview comment:\n       shouldn't this be in_len * 2 + 2 for the worst case of the loop? or does in_len include the null termination of the string?\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1762,6 +1762,41 @@ const char* replace_utf8_utf8_utf8(gdv_int64 context, const char* text,\n                                              out_len);\n }\n \n+// Returns the quoted string (Includes escape character for any single quotes)\n+// E.g. DONT  -> 'DONT'\n+//      DON'T -> 'DON\\'T'\n+FORCE_INLINE\n+const char* quote_utf8(gdv_int64 context, const char* in, gdv_int32 in_len,\n+                       gdv_int32* out_len) {\n+  if (in_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // try to allocate double size output string (worst case)\n+  auto out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len * 2));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // The output string should start with a single quote\n+  out[0] = '\\'';\n+  gdv_int32 counter = 1;\n+  for (int i = 0; i < in_len; i++) {\n+    if (memcmp(in + i, \"'\", 1) == 0) {\n+      out[counter] = '\\\\';\n+      counter++;\n+      out[counter] = '\\'';\n+    } else {\n+      out[counter] = in[i];\n+    }\n+    counter++;\n+  }\n+  out[counter] = '\\'';\n\nReview comment:\n       won't this overflow for the case we have all quotes. Say we have 2 quotes and in_len is 2.. we allocate only 4 bytes, but this logic may need 5 bytes as follows '\\'\\'' which is 5 chars and not 4.\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1762,6 +1762,41 @@ const char* replace_utf8_utf8_utf8(gdv_int64 context, const char* text,\n                                              out_len);\n }\n \n+// Returns the quoted string (Includes escape character for any single quotes)\n+// E.g. DONT  -> 'DONT'\n+//      DON'T -> 'DON\\'T'\n+FORCE_INLINE\n+const char* quote_utf8(gdv_int64 context, const char* in, gdv_int32 in_len,\n+                       gdv_int32* out_len) {\n+  if (in_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // try to allocate double size output string (worst case)\n+  auto out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len * 2));\n\nReview comment:\n       shouldn't this be in_len * 2 + 2 for the worst case of the loop? or does in_len include the null termination of the string? Actually I see at least in the unit test that in_len does not include the null_termination of the string.\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1762,6 +1762,41 @@ const char* replace_utf8_utf8_utf8(gdv_int64 context, const char* text,\n                                              out_len);\n }\n \n+// Returns the quoted string (Includes escape character for any single quotes)\n+// E.g. DONT  -> 'DONT'\n+//      DON'T -> 'DON\\'T'\n+FORCE_INLINE\n+const char* quote_utf8(gdv_int64 context, const char* in, gdv_int32 in_len,\n+                       gdv_int32* out_len) {\n+  if (in_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // try to allocate double size output string (worst case)\n+  auto out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len * 2));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // The output string should start with a single quote\n+  out[0] = '\\'';\n+  gdv_int32 counter = 1;\n+  for (int i = 0; i < in_len; i++) {\n+    if (memcmp(in + i, \"'\", 1) == 0) {\n+      out[counter] = '\\\\';\n+      counter++;\n+      out[counter] = '\\'';\n+    } else {\n+      out[counter] = in[i];\n+    }\n+    counter++;\n+  }\n+  out[counter] = '\\'';\n\nReview comment:\n       won't this overflow for a quote only string. let us say we have a string with single quote of len 1,, then out is of len 2, but counter could be 3.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T17:45:07.399+0000",
                    "updated": "2021-11-02T17:45:07.399+0000",
                    "started": "2021-11-02T17:45:07.398+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673315",
                    "issueId": "13398596"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398596/worklog/673900",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rkavanap commented on a change in pull request #11049:\nURL: https://github.com/apache/arrow/pull/11049#discussion_r741133878\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1762,6 +1762,41 @@ const char* replace_utf8_utf8_utf8(gdv_int64 context, const char* text,\n                                              out_len);\n }\n \n+// Returns the quoted string (Includes escape character for any single quotes)\n+// E.g. DONT  -> 'DONT'\n+//      DON'T -> 'DON\\'T'\n+FORCE_INLINE\n+const char* quote_utf8(gdv_int64 context, const char* in, gdv_int32 in_len,\n+                       gdv_int32* out_len) {\n+  if (in_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // try to allocate double size output string (worst case)\n+  auto out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len * 2));\n\nReview comment:\n       shouldn't this be in_len * 2 + 1 for the worst case of the loop?\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops_test.cc\n##########\n@@ -912,6 +912,33 @@ TEST(TestStringOps, TestReverse) {\n   ctx.Reset();\n }\n \n+TEST(TestStringOps, TestQuote) {\n+  gandiva::ExecutionContext ctx;\n+  uint64_t ctx_ptr = reinterpret_cast<gdv_int64>(&ctx);\n+  gdv_int32 out_len = 0;\n+  const char* out_str;\n+\n+  out_str = quote_utf8(ctx_ptr, \"dont\", 4, &out_len);\n+  EXPECT_EQ(std::string(out_str, out_len), \"\\'dont\\'\");\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  out_str = quote_utf8(ctx_ptr, \"abc\", 3, &out_len);\n+  EXPECT_EQ(std::string(out_str, out_len), \"\\'abc\\'\");\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  out_str = quote_utf8(ctx_ptr, \"don't\", 5, &out_len);\n+  EXPECT_EQ(std::string(out_str, out_len), \"\\'don\\\\'t\\'\");\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  out_str = quote_utf8(ctx_ptr, \"\", 0, &out_len);\n+  EXPECT_EQ(std::string(out_str, out_len), \"\");\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  out_str = quote_utf8(ctx_ptr, \"'\", 1, &out_len);\n\nReview comment:\n       this is a good test. Maybe another one like this \"''''''''''''''''''''''\" with more quotes?\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1762,6 +1762,41 @@ const char* replace_utf8_utf8_utf8(gdv_int64 context, const char* text,\n                                              out_len);\n }\n \n+// Returns the quoted string (Includes escape character for any single quotes)\n+// E.g. DONT  -> 'DONT'\n+//      DON'T -> 'DON\\'T'\n+FORCE_INLINE\n+const char* quote_utf8(gdv_int64 context, const char* in, gdv_int32 in_len,\n+                       gdv_int32* out_len) {\n+  if (in_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // try to allocate double size output string (worst case)\n+  auto out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len * 2));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // The output string should start with a single quote\n+  out[0] = '\\'';\n+  gdv_int32 counter = 1;\n+  for (int i = 0; i < in_len; i++) {\n+    if (memcmp(in + i, \"'\", 1) == 0) {\n+      out[counter] = '\\\\';\n+      counter++;\n+      out[counter] = '\\'';\n+    } else {\n+      out[counter] = in[i];\n+    }\n+    counter++;\n+  }\n+  out[counter] = '\\'';\n\nReview comment:\n       won't this overflow for the case we have all quotes. Say we have 2 quotes and in_len is 2.. we allocate only 4 bytes, but this logic may need 5 bytes as follows '\\'\\'' which is 5 chars and not 4.\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1762,6 +1762,41 @@ const char* replace_utf8_utf8_utf8(gdv_int64 context, const char* text,\n                                              out_len);\n }\n \n+// Returns the quoted string (Includes escape character for any single quotes)\n+// E.g. DONT  -> 'DONT'\n+//      DON'T -> 'DON\\'T'\n+FORCE_INLINE\n+const char* quote_utf8(gdv_int64 context, const char* in, gdv_int32 in_len,\n+                       gdv_int32* out_len) {\n+  if (in_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // try to allocate double size output string (worst case)\n+  auto out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len * 2));\n\nReview comment:\n       shouldn't this be in_len * 2 + 2 for the worst case of the loop? or does in_len include the null termination of the string?\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1762,6 +1762,41 @@ const char* replace_utf8_utf8_utf8(gdv_int64 context, const char* text,\n                                              out_len);\n }\n \n+// Returns the quoted string (Includes escape character for any single quotes)\n+// E.g. DONT  -> 'DONT'\n+//      DON'T -> 'DON\\'T'\n+FORCE_INLINE\n+const char* quote_utf8(gdv_int64 context, const char* in, gdv_int32 in_len,\n+                       gdv_int32* out_len) {\n+  if (in_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // try to allocate double size output string (worst case)\n+  auto out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len * 2));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // The output string should start with a single quote\n+  out[0] = '\\'';\n+  gdv_int32 counter = 1;\n+  for (int i = 0; i < in_len; i++) {\n+    if (memcmp(in + i, \"'\", 1) == 0) {\n+      out[counter] = '\\\\';\n+      counter++;\n+      out[counter] = '\\'';\n+    } else {\n+      out[counter] = in[i];\n+    }\n+    counter++;\n+  }\n+  out[counter] = '\\'';\n\nReview comment:\n       won't this overflow for the case we have all quotes. Say we have 2 quotes and in_len is 2.. we allocate only 4 bytes, but this logic may need 5 bytes as follows '\\'\\'' which is 5 chars and not 4.\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1762,6 +1762,41 @@ const char* replace_utf8_utf8_utf8(gdv_int64 context, const char* text,\n                                              out_len);\n }\n \n+// Returns the quoted string (Includes escape character for any single quotes)\n+// E.g. DONT  -> 'DONT'\n+//      DON'T -> 'DON\\'T'\n+FORCE_INLINE\n+const char* quote_utf8(gdv_int64 context, const char* in, gdv_int32 in_len,\n+                       gdv_int32* out_len) {\n+  if (in_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // try to allocate double size output string (worst case)\n+  auto out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len * 2));\n\nReview comment:\n       shouldn't this be in_len * 2 + 2 for the worst case of the loop? or does in_len include the null termination of the string? Actually I see at least in the unit test that in_len does not include the null_termination of the string.\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1762,6 +1762,41 @@ const char* replace_utf8_utf8_utf8(gdv_int64 context, const char* text,\n                                              out_len);\n }\n \n+// Returns the quoted string (Includes escape character for any single quotes)\n+// E.g. DONT  -> 'DONT'\n+//      DON'T -> 'DON\\'T'\n+FORCE_INLINE\n+const char* quote_utf8(gdv_int64 context, const char* in, gdv_int32 in_len,\n+                       gdv_int32* out_len) {\n+  if (in_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // try to allocate double size output string (worst case)\n+  auto out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len * 2));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // The output string should start with a single quote\n+  out[0] = '\\'';\n+  gdv_int32 counter = 1;\n+  for (int i = 0; i < in_len; i++) {\n+    if (memcmp(in + i, \"'\", 1) == 0) {\n+      out[counter] = '\\\\';\n+      counter++;\n+      out[counter] = '\\'';\n+    } else {\n+      out[counter] = in[i];\n+    }\n+    counter++;\n+  }\n+  out[counter] = '\\'';\n\nReview comment:\n       won't this overflow for a quote only string. let us say we have a string with single quote of len 1,, then out is of len 2, but counter could be 3.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T21:18:28.616+0000",
                    "updated": "2021-11-02T21:18:28.616+0000",
                    "started": "2021-11-02T21:18:28.615+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673900",
                    "issueId": "13398596"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398596/worklog/680765",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #11049:\nURL: https://github.com/apache/arrow/pull/11049#discussion_r748171799\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops_test.cc\n##########\n@@ -912,6 +912,33 @@ TEST(TestStringOps, TestReverse) {\n   ctx.Reset();\n }\n \n+TEST(TestStringOps, TestQuote) {\n+  gandiva::ExecutionContext ctx;\n+  uint64_t ctx_ptr = reinterpret_cast<gdv_int64>(&ctx);\n+  gdv_int32 out_len = 0;\n+  const char* out_str;\n+\n+  out_str = quote_utf8(ctx_ptr, \"dont\", 4, &out_len);\n+  EXPECT_EQ(std::string(out_str, out_len), \"\\'dont\\'\");\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  out_str = quote_utf8(ctx_ptr, \"abc\", 3, &out_len);\n+  EXPECT_EQ(std::string(out_str, out_len), \"\\'abc\\'\");\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  out_str = quote_utf8(ctx_ptr, \"don't\", 5, &out_len);\n+  EXPECT_EQ(std::string(out_str, out_len), \"\\'don\\\\'t\\'\");\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  out_str = quote_utf8(ctx_ptr, \"\", 0, &out_len);\n+  EXPECT_EQ(std::string(out_str, out_len), \"\");\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  out_str = quote_utf8(ctx_ptr, \"'\", 1, &out_len);\n\nReview comment:\n       Added a test with more quotes\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-12T11:16:33.876+0000",
                    "updated": "2021-11-12T11:16:33.876+0000",
                    "started": "2021-11-12T11:16:33.876+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "680765",
                    "issueId": "13398596"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398596/worklog/680767",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #11049:\nURL: https://github.com/apache/arrow/pull/11049#discussion_r748173559\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1762,6 +1762,41 @@ const char* replace_utf8_utf8_utf8(gdv_int64 context, const char* text,\n                                              out_len);\n }\n \n+// Returns the quoted string (Includes escape character for any single quotes)\n+// E.g. DONT  -> 'DONT'\n+//      DON'T -> 'DON\\'T'\n+FORCE_INLINE\n+const char* quote_utf8(gdv_int64 context, const char* in, gdv_int32 in_len,\n+                       gdv_int32* out_len) {\n+  if (in_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // try to allocate double size output string (worst case)\n+  auto out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len * 2));\n\nReview comment:\n       Yes, it makes sense, added the +2 for the worst case of the loop\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-12T11:18:32.733+0000",
                    "updated": "2021-11-12T11:18:32.733+0000",
                    "started": "2021-11-12T11:18:32.732+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "680767",
                    "issueId": "13398596"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398596/worklog/680773",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "augustoasilva commented on a change in pull request #11049:\nURL: https://github.com/apache/arrow/pull/11049#discussion_r748195963\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1762,6 +1762,41 @@ const char* replace_utf8_utf8_utf8(gdv_int64 context, const char* text,\n                                              out_len);\n }\n \n+// Returns the quoted string (Includes escape character for any single quotes)\n+// E.g. DONT  -> 'DONT'\n+//      DON'T -> 'DON\\'T'\n+FORCE_INLINE\n+const char* quote_utf8(gdv_int64 context, const char* in, gdv_int32 in_len,\n+                       gdv_int32* out_len) {\n+  if (in_len <= 0) {\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // try to allocate double size output string (worst case)\n+  auto out = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len * 2));\n+  if (out == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n+  // The output string should start with a single quote\n+  out[0] = '\\'';\n+  gdv_int32 counter = 1;\n+  for (int i = 0; i < in_len; i++) {\n+    if (memcmp(in + i, \"'\", 1) == 0) {\n+      out[counter] = '\\\\';\n+      counter++;\n+      out[counter] = '\\'';\n+    } else {\n+      out[counter] = in[i];\n+    }\n+    counter++;\n+  }\n+  out[counter] = '\\'';\n\nReview comment:\n       Out len should be three as the out string will be 3 quotes, as the input single quote should be quoted\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-12T11:38:33.090+0000",
                    "updated": "2021-11-12T11:38:33.090+0000",
                    "started": "2021-11-12T11:38:33.090+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "680773",
                    "issueId": "13398596"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398596/worklog/685846",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra closed pull request #11049:\nURL: https://github.com/apache/arrow/pull/11049\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-24T13:45:36.654+0000",
                    "updated": "2021-11-24T13:45:36.654+0000",
                    "started": "2021-11-24T13:45:36.654+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685846",
                    "issueId": "13398596"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398596/worklog/685848",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #11049:\nURL: https://github.com/apache/arrow/pull/11049#issuecomment-977893783\n\n\n   Benchmark runs are scheduled for baseline = ad61fe293c0a9550964e4d1a0461c5d6e62ce127 and contender = c0f68a4f3ed9465aa336d3d4120edc81c4f4f91b. c0f68a4f3ed9465aa336d3d4120edc81c4f4f91b is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Scheduled] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/6971b922dd8b43e1a20e19e2fd33c809...797e95ef4adc4f889f8e72914f64c17f/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/2633e831b8a247229d599be4af922edb...bea8fa6f529a496f8eb23a6f101724aa/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/a6bf8fa8a87549dabb135449b03d772f...0f56963e9ea24f30ba99697b4c1a646e/)\n   Supported benchmarks:\n   ursa-i9-9960x: langs = Python, R, JavaScript\n   ursa-thinkcentre-m75q: langs = C++, Java\n   ec2-t3-xlarge-us-east-2: cloud = True\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-24T13:46:22.744+0000",
                    "updated": "2021-11-24T13:46:22.744+0000",
                    "started": "2021-11-24T13:46:22.744+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685848",
                    "issueId": "13398596"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398596/worklog/685868",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #11049:\nURL: https://github.com/apache/arrow/pull/11049#issuecomment-977893783\n\n\n   Benchmark runs are scheduled for baseline = ad61fe293c0a9550964e4d1a0461c5d6e62ce127 and contender = c0f68a4f3ed9465aa336d3d4120edc81c4f4f91b. c0f68a4f3ed9465aa336d3d4120edc81c4f4f91b is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/6971b922dd8b43e1a20e19e2fd33c809...797e95ef4adc4f889f8e72914f64c17f/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/2633e831b8a247229d599be4af922edb...bea8fa6f529a496f8eb23a6f101724aa/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/a6bf8fa8a87549dabb135449b03d772f...0f56963e9ea24f30ba99697b4c1a646e/)\n   Supported benchmarks:\n   ursa-i9-9960x: langs = Python, R, JavaScript\n   ursa-thinkcentre-m75q: langs = C++, Java\n   ec2-t3-xlarge-us-east-2: cloud = True\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-24T14:19:24.403+0000",
                    "updated": "2021-11-24T14:19:24.403+0000",
                    "started": "2021-11-24T14:19:24.403+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "685868",
                    "issueId": "13398596"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398596/worklog/686163",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #11049:\nURL: https://github.com/apache/arrow/pull/11049#issuecomment-977893783\n\n\n   Benchmark runs are scheduled for baseline = ad61fe293c0a9550964e4d1a0461c5d6e62ce127 and contender = c0f68a4f3ed9465aa336d3d4120edc81c4f4f91b. c0f68a4f3ed9465aa336d3d4120edc81c4f4f91b is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/6971b922dd8b43e1a20e19e2fd33c809...797e95ef4adc4f889f8e72914f64c17f/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/2633e831b8a247229d599be4af922edb...bea8fa6f529a496f8eb23a6f101724aa/)\n   [Finished :arrow_down:0.04% :arrow_up:0.09%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/a6bf8fa8a87549dabb135449b03d772f...0f56963e9ea24f30ba99697b4c1a646e/)\n   Supported benchmarks:\n   ursa-i9-9960x: langs = Python, R, JavaScript\n   ursa-thinkcentre-m75q: langs = C++, Java\n   ec2-t3-xlarge-us-east-2: cloud = True\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-25T00:14:25.162+0000",
                    "updated": "2021-11-25T00:14:25.162+0000",
                    "started": "2021-11-25T00:14:25.162+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "686163",
                    "issueId": "13398596"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398596/worklog/686187",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #11049:\nURL: https://github.com/apache/arrow/pull/11049#issuecomment-977893783\n\n\n   Benchmark runs are scheduled for baseline = ad61fe293c0a9550964e4d1a0461c5d6e62ce127 and contender = c0f68a4f3ed9465aa336d3d4120edc81c4f4f91b. c0f68a4f3ed9465aa336d3d4120edc81c4f4f91b is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/6971b922dd8b43e1a20e19e2fd33c809...797e95ef4adc4f889f8e72914f64c17f/)\n   [Failed :arrow_down:0.0% :arrow_up:0.47%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/2633e831b8a247229d599be4af922edb...bea8fa6f529a496f8eb23a6f101724aa/)\n   [Finished :arrow_down:0.04% :arrow_up:0.09%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/a6bf8fa8a87549dabb135449b03d772f...0f56963e9ea24f30ba99697b4c1a646e/)\n   Supported benchmarks:\n   ursa-i9-9960x: langs = Python, R, JavaScript\n   ursa-thinkcentre-m75q: langs = C++, Java\n   ec2-t3-xlarge-us-east-2: cloud = True\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-25T02:34:23.212+0000",
                    "updated": "2021-11-25T02:34:23.212+0000",
                    "started": "2021-11-25T02:34:23.212+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "686187",
                    "issueId": "13398596"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 11400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@38db698e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@38150e27[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@12629280[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@296d2dd[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@49310a55[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@8f7ae7c[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e87cb70[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3a33e047[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b9126f6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4ea0f3b6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7ecc6d59[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5b589b1f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 11400,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Nov 24 13:45:28 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-11-24T13:45:28.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13826/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-09-01T07:34:00.000+0000",
        "updated": "2021-11-25T02:34:24.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 11400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Gandiva] Implement QUOTE Hive function on Gandiva",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398596/comment/17448617",
                    "id": "17448617",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "body": "Issue resolved by pull request 11049\n[https://github.com/apache/arrow/pull/11049]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "created": "2021-11-24T13:45:28.837+0000",
                    "updated": "2021-11-24T13:45:28.837+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0uhc0:",
        "customfield_12314139": null
    }
}