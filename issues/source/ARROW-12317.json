{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13370713",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370713",
    "key": "ARROW-12317",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12612578",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12612578",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13370164",
                    "key": "ARROW-12267",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370164",
                    "fields": {
                        "summary": "[Rust] JSON writer does not support timestamp types",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=houqp",
            "name": "houqp",
            "key": "houqp",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "QP Hou",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12317/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 10,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370713/worklog/580781",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp opened a new pull request #9993:\nURL: https://github.com/apache/arrow/pull/9993\n\n\n   This PR adds support for Time and Date date types in Rust arrow JSON writer module.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T05:47:25.301+0000",
                    "updated": "2021-04-12T05:47:25.301+0000",
                    "started": "2021-04-12T05:47:25.300+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "580781",
                    "issueId": "13370713"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370713/worklog/580782",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp commented on pull request #9993:\nURL: https://github.com/apache/arrow/pull/9993#issuecomment-817501688\n\n\n   cc @alamb \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T05:47:38.794+0000",
                    "updated": "2021-04-12T05:47:38.794+0000",
                    "started": "2021-04-12T05:47:38.793+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "580782",
                    "issueId": "13370713"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370713/worklog/580783",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9993:\nURL: https://github.com/apache/arrow/pull/9993#issuecomment-817501699\n\n\n   https://issues.apache.org/jira/browse/ARROW-12317\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-12T05:47:41.660+0000",
                    "updated": "2021-04-12T05:47:41.660+0000",
                    "started": "2021-04-12T05:47:41.660+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "580783",
                    "issueId": "13370713"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370713/worklog/582410",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9993:\nURL: https://github.com/apache/arrow/pull/9993#discussion_r613173769\n\n\n\n##########\nFile path: rust/arrow/src/json/writer.rs\n##########\n@@ -660,6 +765,138 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn write_dates() {\n+        let ts_string = \"2018-11-13T17:11:10.011375885995\";\n+        let ts_millis = ts_string\n+            .parse::<chrono::NaiveDateTime>()\n+            .unwrap()\n+            .timestamp_millis();\n+\n+        let arr_date32 = Date32Array::from(vec![\n+            Some(i32::try_from(ts_millis / 1000 / (60 * 60 * 24)).unwrap()),\n+            None,\n+        ]);\n+        let arr_date64 = Date64Array::from(vec![Some(ts_millis), None]);\n+        let arr_names = StringArray::from(vec![Some(\"a\"), Some(\"b\")]);\n+\n+        let schema = Schema::new(vec![\n+            Field::new(\"date32\", arr_date32.data_type().clone(), false),\n+            Field::new(\"date64\", arr_date64.data_type().clone(), false),\n+            Field::new(\"name\", arr_names.data_type().clone(), false),\n+        ]);\n+        let schema = Arc::new(schema);\n+\n+        let batch = RecordBatch::try_new(\n+            schema,\n+            vec![\n+                Arc::new(arr_date32),\n+                Arc::new(arr_date64),\n+                Arc::new(arr_names),\n+            ],\n+        )\n+        .unwrap();\n+\n+        let mut buf = Vec::new();\n+        {\n+            let mut writer = LineDelimitedWriter::new(&mut buf);\n+            writer.write_batches(&[batch]).unwrap();\n+        }\n+\n+        assert_eq!(\n+            String::from_utf8(buf).unwrap(),\n+            r#\"{\"date32\":\"2018-11-13\",\"date64\":\"2018-11-13\",\"name\":\"a\"}\n+{\"name\":\"b\"}\n+\"#\n+        );\n+    }\n+\n+    #[test]\n+    fn write_times() {\n+        let arr_time32sec = Time32SecondArray::from(vec![Some(120), None]);\n+        let arr_time32msec = Time32MillisecondArray::from(vec![Some(120), None]);\n+        let arr_time64usec = Time64MicrosecondArray::from(vec![Some(120), None]);\n+        let arr_time64nsec = Time64NanosecondArray::from(vec![Some(120), None]);\n+        let arr_names = StringArray::from(vec![Some(\"a\"), Some(\"b\")]);\n+\n+        let schema = Schema::new(vec![\n+            Field::new(\"time32sec\", arr_time32sec.data_type().clone(), false),\n+            Field::new(\"time32msec\", arr_time32msec.data_type().clone(), false),\n+            Field::new(\"time64usec\", arr_time64usec.data_type().clone(), false),\n+            Field::new(\"time64nsec\", arr_time64nsec.data_type().clone(), false),\n+            Field::new(\"name\", arr_names.data_type().clone(), false),\n+        ]);\n+        let schema = Arc::new(schema);\n+\n+        let batch = RecordBatch::try_new(\n+            schema,\n+            vec![\n+                Arc::new(arr_time32sec),\n+                Arc::new(arr_time32msec),\n+                Arc::new(arr_time64usec),\n+                Arc::new(arr_time64nsec),\n+                Arc::new(arr_names),\n+            ],\n+        )\n+        .unwrap();\n+\n+        let mut buf = Vec::new();\n+        {\n+            let mut writer = LineDelimitedWriter::new(&mut buf);\n+            writer.write_batches(&[batch]).unwrap();\n+        }\n+\n+        assert_eq!(\n+            String::from_utf8(buf).unwrap(),\n+            r#\"{\"time32sec\":\"00:02:00\",\"time32msec\":\"00:00:00.120\",\"time64usec\":\"00:00:00.000120\",\"time64nsec\":\"00:00:00.000000120\",\"name\":\"a\"}\n+{\"name\":\"b\"}\n+\"#\n+        );\n+    }\n+\n+    #[test]\n+    fn write_durations() {\n+        let arr_durationsec = DurationSecondArray::from(vec![Some(120), None]);\n+        let arr_durationmsec = DurationMillisecondArray::from(vec![Some(120), None]);\n+        let arr_durationusec = DurationMicrosecondArray::from(vec![Some(120), None]);\n+        let arr_durationnsec = DurationNanosecondArray::from(vec![Some(120), None]);\n+        let arr_names = StringArray::from(vec![Some(\"a\"), Some(\"b\")]);\n+\n+        let schema = Schema::new(vec![\n+            Field::new(\"duration_sec\", arr_durationsec.data_type().clone(), false),\n+            Field::new(\"duration_msec\", arr_durationmsec.data_type().clone(), false),\n+            Field::new(\"duration_usec\", arr_durationusec.data_type().clone(), false),\n+            Field::new(\"duration_nsec\", arr_durationnsec.data_type().clone(), false),\n+            Field::new(\"name\", arr_names.data_type().clone(), false),\n+        ]);\n+        let schema = Arc::new(schema);\n+\n+        let batch = RecordBatch::try_new(\n+            schema,\n+            vec![\n+                Arc::new(arr_durationsec),\n+                Arc::new(arr_durationmsec),\n+                Arc::new(arr_durationusec),\n+                Arc::new(arr_durationnsec),\n+                Arc::new(arr_names),\n+            ],\n+        )\n+        .unwrap();\n+\n+        let mut buf = Vec::new();\n+        {\n+            let mut writer = LineDelimitedWriter::new(&mut buf);\n+            writer.write_batches(&[batch]).unwrap();\n+        }\n+\n+        assert_eq!(\n+            String::from_utf8(buf).unwrap(),\n+            r#\"{\"duration_sec\":\"PT120S\",\"duration_msec\":\"PT0.120S\",\"duration_usec\":\"PT0.000120S\",\"duration_nsec\":\"PT0.000000120S\",\"name\":\"a\"}\n\nReview comment:\n       I am not familiar with the `\"PT120S\"` string representation of a duration (perhaps this is some Chrono thing)?\r\n   \r\n   I would have expected durations to have the same format as Time (probably) so instead of `PT120S` something more like `00:02:00` and instead of `PT0.120S` it would be `00:00:00.120`\r\n   \r\n   What do you think?\r\n   \n\n##########\nFile path: rust/arrow/src/array/array_primitive.rs\n##########\n@@ -227,6 +245,13 @@ where\n     pub fn value_as_time(&self, i: usize) -> Option<NaiveTime> {\n         as_time::<T>(i64::from(self.value(i)))\n     }\n+\n+    /// Returns a value as a chrono `Duration`\n+    ///\n+    /// If a data type cannot be converted to `Duration`, a `None` is returned\n\nReview comment:\n       \ud83d\udc4d \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-14T11:45:58.910+0000",
                    "updated": "2021-04-14T11:45:58.910+0000",
                    "started": "2021-04-14T11:45:58.909+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "582410",
                    "issueId": "13370713"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370713/worklog/582716",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp commented on a change in pull request #9993:\nURL: https://github.com/apache/arrow/pull/9993#discussion_r613437506\n\n\n\n##########\nFile path: rust/arrow/src/json/writer.rs\n##########\n@@ -660,6 +765,138 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn write_dates() {\n+        let ts_string = \"2018-11-13T17:11:10.011375885995\";\n+        let ts_millis = ts_string\n+            .parse::<chrono::NaiveDateTime>()\n+            .unwrap()\n+            .timestamp_millis();\n+\n+        let arr_date32 = Date32Array::from(vec![\n+            Some(i32::try_from(ts_millis / 1000 / (60 * 60 * 24)).unwrap()),\n+            None,\n+        ]);\n+        let arr_date64 = Date64Array::from(vec![Some(ts_millis), None]);\n+        let arr_names = StringArray::from(vec![Some(\"a\"), Some(\"b\")]);\n+\n+        let schema = Schema::new(vec![\n+            Field::new(\"date32\", arr_date32.data_type().clone(), false),\n+            Field::new(\"date64\", arr_date64.data_type().clone(), false),\n+            Field::new(\"name\", arr_names.data_type().clone(), false),\n+        ]);\n+        let schema = Arc::new(schema);\n+\n+        let batch = RecordBatch::try_new(\n+            schema,\n+            vec![\n+                Arc::new(arr_date32),\n+                Arc::new(arr_date64),\n+                Arc::new(arr_names),\n+            ],\n+        )\n+        .unwrap();\n+\n+        let mut buf = Vec::new();\n+        {\n+            let mut writer = LineDelimitedWriter::new(&mut buf);\n+            writer.write_batches(&[batch]).unwrap();\n+        }\n+\n+        assert_eq!(\n+            String::from_utf8(buf).unwrap(),\n+            r#\"{\"date32\":\"2018-11-13\",\"date64\":\"2018-11-13\",\"name\":\"a\"}\n+{\"name\":\"b\"}\n+\"#\n+        );\n+    }\n+\n+    #[test]\n+    fn write_times() {\n+        let arr_time32sec = Time32SecondArray::from(vec![Some(120), None]);\n+        let arr_time32msec = Time32MillisecondArray::from(vec![Some(120), None]);\n+        let arr_time64usec = Time64MicrosecondArray::from(vec![Some(120), None]);\n+        let arr_time64nsec = Time64NanosecondArray::from(vec![Some(120), None]);\n+        let arr_names = StringArray::from(vec![Some(\"a\"), Some(\"b\")]);\n+\n+        let schema = Schema::new(vec![\n+            Field::new(\"time32sec\", arr_time32sec.data_type().clone(), false),\n+            Field::new(\"time32msec\", arr_time32msec.data_type().clone(), false),\n+            Field::new(\"time64usec\", arr_time64usec.data_type().clone(), false),\n+            Field::new(\"time64nsec\", arr_time64nsec.data_type().clone(), false),\n+            Field::new(\"name\", arr_names.data_type().clone(), false),\n+        ]);\n+        let schema = Arc::new(schema);\n+\n+        let batch = RecordBatch::try_new(\n+            schema,\n+            vec![\n+                Arc::new(arr_time32sec),\n+                Arc::new(arr_time32msec),\n+                Arc::new(arr_time64usec),\n+                Arc::new(arr_time64nsec),\n+                Arc::new(arr_names),\n+            ],\n+        )\n+        .unwrap();\n+\n+        let mut buf = Vec::new();\n+        {\n+            let mut writer = LineDelimitedWriter::new(&mut buf);\n+            writer.write_batches(&[batch]).unwrap();\n+        }\n+\n+        assert_eq!(\n+            String::from_utf8(buf).unwrap(),\n+            r#\"{\"time32sec\":\"00:02:00\",\"time32msec\":\"00:00:00.120\",\"time64usec\":\"00:00:00.000120\",\"time64nsec\":\"00:00:00.000000120\",\"name\":\"a\"}\n+{\"name\":\"b\"}\n+\"#\n+        );\n+    }\n+\n+    #[test]\n+    fn write_durations() {\n+        let arr_durationsec = DurationSecondArray::from(vec![Some(120), None]);\n+        let arr_durationmsec = DurationMillisecondArray::from(vec![Some(120), None]);\n+        let arr_durationusec = DurationMicrosecondArray::from(vec![Some(120), None]);\n+        let arr_durationnsec = DurationNanosecondArray::from(vec![Some(120), None]);\n+        let arr_names = StringArray::from(vec![Some(\"a\"), Some(\"b\")]);\n+\n+        let schema = Schema::new(vec![\n+            Field::new(\"duration_sec\", arr_durationsec.data_type().clone(), false),\n+            Field::new(\"duration_msec\", arr_durationmsec.data_type().clone(), false),\n+            Field::new(\"duration_usec\", arr_durationusec.data_type().clone(), false),\n+            Field::new(\"duration_nsec\", arr_durationnsec.data_type().clone(), false),\n+            Field::new(\"name\", arr_names.data_type().clone(), false),\n+        ]);\n+        let schema = Arc::new(schema);\n+\n+        let batch = RecordBatch::try_new(\n+            schema,\n+            vec![\n+                Arc::new(arr_durationsec),\n+                Arc::new(arr_durationmsec),\n+                Arc::new(arr_durationusec),\n+                Arc::new(arr_durationnsec),\n+                Arc::new(arr_names),\n+            ],\n+        )\n+        .unwrap();\n+\n+        let mut buf = Vec::new();\n+        {\n+            let mut writer = LineDelimitedWriter::new(&mut buf);\n+            writer.write_batches(&[batch]).unwrap();\n+        }\n+\n+        assert_eq!(\n+            String::from_utf8(buf).unwrap(),\n+            r#\"{\"duration_sec\":\"PT120S\",\"duration_msec\":\"PT0.120S\",\"duration_usec\":\"PT0.000120S\",\"duration_nsec\":\"PT0.000000120S\",\"name\":\"a\"}\n\nReview comment:\n       Yeah, this is a Chrono default. I don't have a preference on how duration should be formatted. the time format you mentioned is what I expected initially as well. Let me do some research on this to see if there is any particular reason why chrono went with the `PT` notation.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-14T17:24:12.418+0000",
                    "updated": "2021-04-14T17:24:12.418+0000",
                    "started": "2021-04-14T17:24:12.418+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "582716",
                    "issueId": "13370713"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370713/worklog/583114",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #9993:\nURL: https://github.com/apache/arrow/pull/9993#discussion_r613735914\n\n\n\n##########\nFile path: rust/arrow/src/json/writer.rs\n##########\n@@ -660,6 +765,138 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn write_dates() {\n+        let ts_string = \"2018-11-13T17:11:10.011375885995\";\n+        let ts_millis = ts_string\n+            .parse::<chrono::NaiveDateTime>()\n+            .unwrap()\n+            .timestamp_millis();\n+\n+        let arr_date32 = Date32Array::from(vec![\n+            Some(i32::try_from(ts_millis / 1000 / (60 * 60 * 24)).unwrap()),\n+            None,\n+        ]);\n+        let arr_date64 = Date64Array::from(vec![Some(ts_millis), None]);\n+        let arr_names = StringArray::from(vec![Some(\"a\"), Some(\"b\")]);\n+\n+        let schema = Schema::new(vec![\n+            Field::new(\"date32\", arr_date32.data_type().clone(), false),\n+            Field::new(\"date64\", arr_date64.data_type().clone(), false),\n+            Field::new(\"name\", arr_names.data_type().clone(), false),\n+        ]);\n+        let schema = Arc::new(schema);\n+\n+        let batch = RecordBatch::try_new(\n+            schema,\n+            vec![\n+                Arc::new(arr_date32),\n+                Arc::new(arr_date64),\n+                Arc::new(arr_names),\n+            ],\n+        )\n+        .unwrap();\n+\n+        let mut buf = Vec::new();\n+        {\n+            let mut writer = LineDelimitedWriter::new(&mut buf);\n+            writer.write_batches(&[batch]).unwrap();\n+        }\n+\n+        assert_eq!(\n+            String::from_utf8(buf).unwrap(),\n+            r#\"{\"date32\":\"2018-11-13\",\"date64\":\"2018-11-13\",\"name\":\"a\"}\n+{\"name\":\"b\"}\n+\"#\n+        );\n+    }\n+\n+    #[test]\n+    fn write_times() {\n+        let arr_time32sec = Time32SecondArray::from(vec![Some(120), None]);\n+        let arr_time32msec = Time32MillisecondArray::from(vec![Some(120), None]);\n+        let arr_time64usec = Time64MicrosecondArray::from(vec![Some(120), None]);\n+        let arr_time64nsec = Time64NanosecondArray::from(vec![Some(120), None]);\n+        let arr_names = StringArray::from(vec![Some(\"a\"), Some(\"b\")]);\n+\n+        let schema = Schema::new(vec![\n+            Field::new(\"time32sec\", arr_time32sec.data_type().clone(), false),\n+            Field::new(\"time32msec\", arr_time32msec.data_type().clone(), false),\n+            Field::new(\"time64usec\", arr_time64usec.data_type().clone(), false),\n+            Field::new(\"time64nsec\", arr_time64nsec.data_type().clone(), false),\n+            Field::new(\"name\", arr_names.data_type().clone(), false),\n+        ]);\n+        let schema = Arc::new(schema);\n+\n+        let batch = RecordBatch::try_new(\n+            schema,\n+            vec![\n+                Arc::new(arr_time32sec),\n+                Arc::new(arr_time32msec),\n+                Arc::new(arr_time64usec),\n+                Arc::new(arr_time64nsec),\n+                Arc::new(arr_names),\n+            ],\n+        )\n+        .unwrap();\n+\n+        let mut buf = Vec::new();\n+        {\n+            let mut writer = LineDelimitedWriter::new(&mut buf);\n+            writer.write_batches(&[batch]).unwrap();\n+        }\n+\n+        assert_eq!(\n+            String::from_utf8(buf).unwrap(),\n+            r#\"{\"time32sec\":\"00:02:00\",\"time32msec\":\"00:00:00.120\",\"time64usec\":\"00:00:00.000120\",\"time64nsec\":\"00:00:00.000000120\",\"name\":\"a\"}\n+{\"name\":\"b\"}\n+\"#\n+        );\n+    }\n+\n+    #[test]\n+    fn write_durations() {\n+        let arr_durationsec = DurationSecondArray::from(vec![Some(120), None]);\n+        let arr_durationmsec = DurationMillisecondArray::from(vec![Some(120), None]);\n+        let arr_durationusec = DurationMicrosecondArray::from(vec![Some(120), None]);\n+        let arr_durationnsec = DurationNanosecondArray::from(vec![Some(120), None]);\n+        let arr_names = StringArray::from(vec![Some(\"a\"), Some(\"b\")]);\n+\n+        let schema = Schema::new(vec![\n+            Field::new(\"duration_sec\", arr_durationsec.data_type().clone(), false),\n+            Field::new(\"duration_msec\", arr_durationmsec.data_type().clone(), false),\n+            Field::new(\"duration_usec\", arr_durationusec.data_type().clone(), false),\n+            Field::new(\"duration_nsec\", arr_durationnsec.data_type().clone(), false),\n+            Field::new(\"name\", arr_names.data_type().clone(), false),\n+        ]);\n+        let schema = Arc::new(schema);\n+\n+        let batch = RecordBatch::try_new(\n+            schema,\n+            vec![\n+                Arc::new(arr_durationsec),\n+                Arc::new(arr_durationmsec),\n+                Arc::new(arr_durationusec),\n+                Arc::new(arr_durationnsec),\n+                Arc::new(arr_names),\n+            ],\n+        )\n+        .unwrap();\n+\n+        let mut buf = Vec::new();\n+        {\n+            let mut writer = LineDelimitedWriter::new(&mut buf);\n+            writer.write_batches(&[batch]).unwrap();\n+        }\n+\n+        assert_eq!(\n+            String::from_utf8(buf).unwrap(),\n+            r#\"{\"duration_sec\":\"PT120S\",\"duration_msec\":\"PT0.120S\",\"duration_usec\":\"PT0.000120S\",\"duration_nsec\":\"PT0.000000120S\",\"name\":\"a\"}\n\nReview comment:\n       I don't have experience with working with durations, but I'm also now curious. I'll do some research too\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-15T03:44:27.034+0000",
                    "updated": "2021-04-15T03:44:27.034+0000",
                    "started": "2021-04-15T03:44:27.034+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "583114",
                    "issueId": "13370713"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370713/worklog/583157",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "houqp commented on a change in pull request #9993:\nURL: https://github.com/apache/arrow/pull/9993#discussion_r613777974\n\n\n\n##########\nFile path: rust/arrow/src/json/writer.rs\n##########\n@@ -660,6 +765,138 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn write_dates() {\n+        let ts_string = \"2018-11-13T17:11:10.011375885995\";\n+        let ts_millis = ts_string\n+            .parse::<chrono::NaiveDateTime>()\n+            .unwrap()\n+            .timestamp_millis();\n+\n+        let arr_date32 = Date32Array::from(vec![\n+            Some(i32::try_from(ts_millis / 1000 / (60 * 60 * 24)).unwrap()),\n+            None,\n+        ]);\n+        let arr_date64 = Date64Array::from(vec![Some(ts_millis), None]);\n+        let arr_names = StringArray::from(vec![Some(\"a\"), Some(\"b\")]);\n+\n+        let schema = Schema::new(vec![\n+            Field::new(\"date32\", arr_date32.data_type().clone(), false),\n+            Field::new(\"date64\", arr_date64.data_type().clone(), false),\n+            Field::new(\"name\", arr_names.data_type().clone(), false),\n+        ]);\n+        let schema = Arc::new(schema);\n+\n+        let batch = RecordBatch::try_new(\n+            schema,\n+            vec![\n+                Arc::new(arr_date32),\n+                Arc::new(arr_date64),\n+                Arc::new(arr_names),\n+            ],\n+        )\n+        .unwrap();\n+\n+        let mut buf = Vec::new();\n+        {\n+            let mut writer = LineDelimitedWriter::new(&mut buf);\n+            writer.write_batches(&[batch]).unwrap();\n+        }\n+\n+        assert_eq!(\n+            String::from_utf8(buf).unwrap(),\n+            r#\"{\"date32\":\"2018-11-13\",\"date64\":\"2018-11-13\",\"name\":\"a\"}\n+{\"name\":\"b\"}\n+\"#\n+        );\n+    }\n+\n+    #[test]\n+    fn write_times() {\n+        let arr_time32sec = Time32SecondArray::from(vec![Some(120), None]);\n+        let arr_time32msec = Time32MillisecondArray::from(vec![Some(120), None]);\n+        let arr_time64usec = Time64MicrosecondArray::from(vec![Some(120), None]);\n+        let arr_time64nsec = Time64NanosecondArray::from(vec![Some(120), None]);\n+        let arr_names = StringArray::from(vec![Some(\"a\"), Some(\"b\")]);\n+\n+        let schema = Schema::new(vec![\n+            Field::new(\"time32sec\", arr_time32sec.data_type().clone(), false),\n+            Field::new(\"time32msec\", arr_time32msec.data_type().clone(), false),\n+            Field::new(\"time64usec\", arr_time64usec.data_type().clone(), false),\n+            Field::new(\"time64nsec\", arr_time64nsec.data_type().clone(), false),\n+            Field::new(\"name\", arr_names.data_type().clone(), false),\n+        ]);\n+        let schema = Arc::new(schema);\n+\n+        let batch = RecordBatch::try_new(\n+            schema,\n+            vec![\n+                Arc::new(arr_time32sec),\n+                Arc::new(arr_time32msec),\n+                Arc::new(arr_time64usec),\n+                Arc::new(arr_time64nsec),\n+                Arc::new(arr_names),\n+            ],\n+        )\n+        .unwrap();\n+\n+        let mut buf = Vec::new();\n+        {\n+            let mut writer = LineDelimitedWriter::new(&mut buf);\n+            writer.write_batches(&[batch]).unwrap();\n+        }\n+\n+        assert_eq!(\n+            String::from_utf8(buf).unwrap(),\n+            r#\"{\"time32sec\":\"00:02:00\",\"time32msec\":\"00:00:00.120\",\"time64usec\":\"00:00:00.000120\",\"time64nsec\":\"00:00:00.000000120\",\"name\":\"a\"}\n+{\"name\":\"b\"}\n+\"#\n+        );\n+    }\n+\n+    #[test]\n+    fn write_durations() {\n+        let arr_durationsec = DurationSecondArray::from(vec![Some(120), None]);\n+        let arr_durationmsec = DurationMillisecondArray::from(vec![Some(120), None]);\n+        let arr_durationusec = DurationMicrosecondArray::from(vec![Some(120), None]);\n+        let arr_durationnsec = DurationNanosecondArray::from(vec![Some(120), None]);\n+        let arr_names = StringArray::from(vec![Some(\"a\"), Some(\"b\")]);\n+\n+        let schema = Schema::new(vec![\n+            Field::new(\"duration_sec\", arr_durationsec.data_type().clone(), false),\n+            Field::new(\"duration_msec\", arr_durationmsec.data_type().clone(), false),\n+            Field::new(\"duration_usec\", arr_durationusec.data_type().clone(), false),\n+            Field::new(\"duration_nsec\", arr_durationnsec.data_type().clone(), false),\n+            Field::new(\"name\", arr_names.data_type().clone(), false),\n+        ]);\n+        let schema = Arc::new(schema);\n+\n+        let batch = RecordBatch::try_new(\n+            schema,\n+            vec![\n+                Arc::new(arr_durationsec),\n+                Arc::new(arr_durationmsec),\n+                Arc::new(arr_durationusec),\n+                Arc::new(arr_durationnsec),\n+                Arc::new(arr_names),\n+            ],\n+        )\n+        .unwrap();\n+\n+        let mut buf = Vec::new();\n+        {\n+            let mut writer = LineDelimitedWriter::new(&mut buf);\n+            writer.write_batches(&[batch]).unwrap();\n+        }\n+\n+        assert_eq!(\n+            String::from_utf8(buf).unwrap(),\n+            r#\"{\"duration_sec\":\"PT120S\",\"duration_msec\":\"PT0.120S\",\"duration_usec\":\"PT0.000120S\",\"duration_nsec\":\"PT0.000000120S\",\"name\":\"a\"}\n\nReview comment:\n       Turns out this is a part of https://en.wikipedia.org/wiki/ISO_8601#Durations\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-15T06:01:49.859+0000",
                    "updated": "2021-04-15T06:01:49.859+0000",
                    "started": "2021-04-15T06:01:49.859+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "583157",
                    "issueId": "13370713"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370713/worklog/583296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9993:\nURL: https://github.com/apache/arrow/pull/9993#discussion_r613968091\n\n\n\n##########\nFile path: rust/arrow/src/json/writer.rs\n##########\n@@ -660,6 +765,138 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn write_dates() {\n+        let ts_string = \"2018-11-13T17:11:10.011375885995\";\n+        let ts_millis = ts_string\n+            .parse::<chrono::NaiveDateTime>()\n+            .unwrap()\n+            .timestamp_millis();\n+\n+        let arr_date32 = Date32Array::from(vec![\n+            Some(i32::try_from(ts_millis / 1000 / (60 * 60 * 24)).unwrap()),\n+            None,\n+        ]);\n+        let arr_date64 = Date64Array::from(vec![Some(ts_millis), None]);\n+        let arr_names = StringArray::from(vec![Some(\"a\"), Some(\"b\")]);\n+\n+        let schema = Schema::new(vec![\n+            Field::new(\"date32\", arr_date32.data_type().clone(), false),\n+            Field::new(\"date64\", arr_date64.data_type().clone(), false),\n+            Field::new(\"name\", arr_names.data_type().clone(), false),\n+        ]);\n+        let schema = Arc::new(schema);\n+\n+        let batch = RecordBatch::try_new(\n+            schema,\n+            vec![\n+                Arc::new(arr_date32),\n+                Arc::new(arr_date64),\n+                Arc::new(arr_names),\n+            ],\n+        )\n+        .unwrap();\n+\n+        let mut buf = Vec::new();\n+        {\n+            let mut writer = LineDelimitedWriter::new(&mut buf);\n+            writer.write_batches(&[batch]).unwrap();\n+        }\n+\n+        assert_eq!(\n+            String::from_utf8(buf).unwrap(),\n+            r#\"{\"date32\":\"2018-11-13\",\"date64\":\"2018-11-13\",\"name\":\"a\"}\n+{\"name\":\"b\"}\n+\"#\n+        );\n+    }\n+\n+    #[test]\n+    fn write_times() {\n+        let arr_time32sec = Time32SecondArray::from(vec![Some(120), None]);\n+        let arr_time32msec = Time32MillisecondArray::from(vec![Some(120), None]);\n+        let arr_time64usec = Time64MicrosecondArray::from(vec![Some(120), None]);\n+        let arr_time64nsec = Time64NanosecondArray::from(vec![Some(120), None]);\n+        let arr_names = StringArray::from(vec![Some(\"a\"), Some(\"b\")]);\n+\n+        let schema = Schema::new(vec![\n+            Field::new(\"time32sec\", arr_time32sec.data_type().clone(), false),\n+            Field::new(\"time32msec\", arr_time32msec.data_type().clone(), false),\n+            Field::new(\"time64usec\", arr_time64usec.data_type().clone(), false),\n+            Field::new(\"time64nsec\", arr_time64nsec.data_type().clone(), false),\n+            Field::new(\"name\", arr_names.data_type().clone(), false),\n+        ]);\n+        let schema = Arc::new(schema);\n+\n+        let batch = RecordBatch::try_new(\n+            schema,\n+            vec![\n+                Arc::new(arr_time32sec),\n+                Arc::new(arr_time32msec),\n+                Arc::new(arr_time64usec),\n+                Arc::new(arr_time64nsec),\n+                Arc::new(arr_names),\n+            ],\n+        )\n+        .unwrap();\n+\n+        let mut buf = Vec::new();\n+        {\n+            let mut writer = LineDelimitedWriter::new(&mut buf);\n+            writer.write_batches(&[batch]).unwrap();\n+        }\n+\n+        assert_eq!(\n+            String::from_utf8(buf).unwrap(),\n+            r#\"{\"time32sec\":\"00:02:00\",\"time32msec\":\"00:00:00.120\",\"time64usec\":\"00:00:00.000120\",\"time64nsec\":\"00:00:00.000000120\",\"name\":\"a\"}\n+{\"name\":\"b\"}\n+\"#\n+        );\n+    }\n+\n+    #[test]\n+    fn write_durations() {\n+        let arr_durationsec = DurationSecondArray::from(vec![Some(120), None]);\n+        let arr_durationmsec = DurationMillisecondArray::from(vec![Some(120), None]);\n+        let arr_durationusec = DurationMicrosecondArray::from(vec![Some(120), None]);\n+        let arr_durationnsec = DurationNanosecondArray::from(vec![Some(120), None]);\n+        let arr_names = StringArray::from(vec![Some(\"a\"), Some(\"b\")]);\n+\n+        let schema = Schema::new(vec![\n+            Field::new(\"duration_sec\", arr_durationsec.data_type().clone(), false),\n+            Field::new(\"duration_msec\", arr_durationmsec.data_type().clone(), false),\n+            Field::new(\"duration_usec\", arr_durationusec.data_type().clone(), false),\n+            Field::new(\"duration_nsec\", arr_durationnsec.data_type().clone(), false),\n+            Field::new(\"name\", arr_names.data_type().clone(), false),\n+        ]);\n+        let schema = Arc::new(schema);\n+\n+        let batch = RecordBatch::try_new(\n+            schema,\n+            vec![\n+                Arc::new(arr_durationsec),\n+                Arc::new(arr_durationmsec),\n+                Arc::new(arr_durationusec),\n+                Arc::new(arr_durationnsec),\n+                Arc::new(arr_names),\n+            ],\n+        )\n+        .unwrap();\n+\n+        let mut buf = Vec::new();\n+        {\n+            let mut writer = LineDelimitedWriter::new(&mut buf);\n+            writer.write_batches(&[batch]).unwrap();\n+        }\n+\n+        assert_eq!(\n+            String::from_utf8(buf).unwrap(),\n+            r#\"{\"duration_sec\":\"PT120S\",\"duration_msec\":\"PT0.120S\",\"duration_usec\":\"PT0.000120S\",\"duration_nsec\":\"PT0.000000120S\",\"name\":\"a\"}\n\nReview comment:\n       ISO standard is good enough for me \ud83d\udc4d \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-15T10:55:57.379+0000",
                    "updated": "2021-04-15T10:55:57.379+0000",
                    "started": "2021-04-15T10:55:57.378+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "583296",
                    "issueId": "13370713"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370713/worklog/583297",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb closed pull request #9993:\nURL: https://github.com/apache/arrow/pull/9993\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-15T10:56:52.309+0000",
                    "updated": "2021-04-15T10:56:52.309+0000",
                    "started": "2021-04-15T10:56:52.309+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "583297",
                    "issueId": "13370713"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370713/worklog/583298",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9993:\nURL: https://github.com/apache/arrow/pull/9993#issuecomment-820332546\n\n\n   Thanks @houqp !\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-15T10:57:05.211+0000",
                    "updated": "2021-04-15T10:57:05.211+0000",
                    "started": "2021-04-15T10:57:05.210+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "583298",
                    "issueId": "13370713"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 6000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@df9af35[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1adf1d33[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@676872df[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5bcdd84[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@33f6fdf8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@53b66abf[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@77ec149c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@145fa718[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@10428156[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7041f273[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@679e5013[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@e105c9f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6000,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Apr 15 10:56:39 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-04-15T10:56:39.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12317/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-04-09T17:58:32.000+0000",
        "updated": "2021-04-15T10:57:06.000+0000",
        "timeoriginalestimate": null,
        "description": "While working on https://issues.apache.org/jira/browse/ARROW-12267 , adding support for writing Timestamp types, I noticed we were also lacking support for other time types. Specifically, if you try to write an array with any of the following types as JSON it will panic:\r\n\r\nAn example of adding support for timestamps is on https://github.com/apache/arrow/pull/9968\r\n\r\n```\r\npub type Date32Array = PrimitiveArray<Date32Type>;\r\npub type Date64Array = PrimitiveArray<Date64Type>;\r\npub type Time32SecondArray = PrimitiveArray<Time32SecondType>;\r\npub type Time32MillisecondArray = PrimitiveArray<Time32MillisecondType>;\r\npub type Time64MicrosecondArray = PrimitiveArray<Time64MicrosecondType>;\r\npub type Time64NanosecondArray = PrimitiveArray<Time64NanosecondType>;\r\npub type IntervalYearMonthArray = PrimitiveArray<IntervalYearMonthType>;\r\npub type IntervalDayTimeArray = PrimitiveArray<IntervalDayTimeType>;\r\npub type DurationSecondArray = PrimitiveArray<DurationSecondType>;\r\npub type DurationMillisecondArray = PrimitiveArray<DurationMillisecondType>;\r\npub type DurationMicrosecondArray = PrimitiveArray<DurationMicrosecondType>;\r\npub type DurationNanosecondArray = PrimitiveArray<DurationNanosecondType>;\r\n```\r\n\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] JSON writer does not support time, date or interval types",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370713/comment/17322083",
                    "id": "17322083",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 9993\n[https://github.com/apache/arrow/pull/9993]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-04-15T10:56:39.965+0000",
                    "updated": "2021-04-15T10:56:39.965+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0pq6o:",
        "customfield_12314139": null
    }
}