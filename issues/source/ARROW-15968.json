{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13434484",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434484",
    "key": "ARROW-15968",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15968/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 28,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434484/worklog/743570",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12662:\nURL: https://github.com/apache/arrow/pull/12662#issuecomment-1072007466\n\n\n   https://issues.apache.org/jira/browse/ARROW-15968\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T03:57:38.872+0000",
                    "updated": "2022-03-18T03:57:38.872+0000",
                    "started": "2022-03-18T03:57:38.872+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743570",
                    "issueId": "13434484"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434484/worklog/743572",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace edited a comment on pull request #12662:\nURL: https://github.com/apache/arrow/pull/12662#issuecomment-1072007080\n\n\n   Not sure if this helps but here is a rough diagram of the change\r\n   ![Blank diagram(2)](https://user-images.githubusercontent.com/1696093/158935255-bd09cbc8-16ab-4238-9dda-b5addd18dbdd.png)\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T04:03:13.088+0000",
                    "updated": "2022-03-18T04:03:13.088+0000",
                    "started": "2022-03-18T04:03:13.088+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743572",
                    "issueId": "13434484"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434484/worklog/743866",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace edited a comment on pull request #12662:\nURL: https://github.com/apache/arrow/pull/12662#issuecomment-1072007080\n\n\n   Not sure if this helps but here is a rough diagram of the change\r\n   ![Blank diagram(2)](https://user-images.githubusercontent.com/1696093/158935255-bd09cbc8-16ab-4238-9dda-b5addd18dbdd.png)\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T14:43:18.325+0000",
                    "updated": "2022-03-18T14:43:18.325+0000",
                    "started": "2022-03-18T14:43:18.325+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743866",
                    "issueId": "13434484"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434484/worklog/744307",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12662:\nURL: https://github.com/apache/arrow/pull/12662#discussion_r830244406\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -60,6 +60,9 @@ namespace arrow {\n // Readahead operators, and some other operators, may introduce queueing.  Any operators\n // that introduce buffering should detail the amount of buffering they introduce in their\n // MakeXYZ function comments.\n+//\n+// A generator should always be fully consumed before it is destroyed.\n+// A generator should not emit a terminal item until it has finished all ongoing futures.\n\nReview comment:\n       Here, \"emit a terminal item\" is more like \"let a future terminate with an error or an end-of-stream marker\"? or i guess \"item (future) that will terminate the stream when resolved\". The wording reads a little oddly to me because it feels like the generator can see the future\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -775,6 +791,7 @@ class ReadaheadGenerator {\n     if (state_->finished.load()) {\n       state_->readahead_queue.push(AsyncGeneratorEnd<T>());\n     } else {\n+      state_->num_running.fetch_add(1);\n\nReview comment:\n       Though I guess we're comparing with 1 instead of 0 up above\u2026'num_running' doesn't sound like quite the right name to me but it's also unclear how exactly to articulate what exactly this counter represents.\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -775,6 +791,7 @@ class ReadaheadGenerator {\n     if (state_->finished.load()) {\n       state_->readahead_queue.push(AsyncGeneratorEnd<T>());\n     } else {\n+      state_->num_running.fetch_add(1);\n\nReview comment:\n       This seems off; that means on the initial call, we'll set num_running to max_readahead + 1?\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1058,18 +1109,73 @@ class MergedGenerator {\n       return source();\n     }\n \n+    void SignalErrorUnlocked() {\n+      broken = true;\n+      // Empty any results that have arrived but not asked for.\n+      while (!delivered_jobs.empty()) {\n+        delivered_jobs.pop_front();\n+      }\n+    }\n+\n+    void Purge() {\n+      while (!waiting_jobs.empty()) {\n+        waiting_jobs.front()->MarkFinished(IterationEnd<T>());\n+        waiting_jobs.pop_front();\n+      }\n+    }\n+\n+    void MarkFinished() {\n+      all_finished.MarkFinished();\n+      Purge();\n+    }\n+\n+    // This is called outside the mutex but it is only ever called\n+    // once and Future<>::AddCallback is thread-safe\n+    void MarkFinalError(const Status& err, Future<T> maybe_sink) {\n+      if (maybe_sink.is_valid()) {\n+        // Someone is waiting for this error so lets mark it complete when\n+        // all the work is done\n+        // all_finished will get called by something with a strong pointer to state\n+        // so we can safely capture this\n+        all_finished.AddCallback([maybe_sink, err](const Status& status) mutable {\n+          maybe_sink.MarkFinished(err);\n+        });\n+      } else {\n+        // No one is waiting for this error right now so it will be delivered\n+        // next.\n+        final_error = err;\n+      }\n+    }\n+\n+    bool IsComplete() {\n+      return outstanding_requests == 0 &&\n+             (broken || (source_exhausted && num_running_subscriptions == 0 &&\n+                         delivered_jobs.empty()));\n+    }\n+\n+    bool MarkTaskFinishedUnlocked() {\n+      --outstanding_requests;\n+      return IsComplete();\n+    }\n+\n     AsyncGenerator<AsyncGenerator<T>> source;\n\nReview comment:\n       I think for the sake of future readers we should give each of these fields a description and invariant (and probably each of the structs too)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T18:29:09.728+0000",
                    "updated": "2022-03-18T18:29:09.728+0000",
                    "started": "2022-03-18T18:29:09.728+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744307",
                    "issueId": "13434484"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434484/worklog/744380",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12662:\nURL: https://github.com/apache/arrow/pull/12662#discussion_r830312415\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -60,6 +60,9 @@ namespace arrow {\n // Readahead operators, and some other operators, may introduce queueing.  Any operators\n // that introduce buffering should detail the amount of buffering they introduce in their\n // MakeXYZ function comments.\n+//\n+// A generator should always be fully consumed before it is destroyed.\n+// A generator should not emit a terminal item until it has finished all ongoing futures.\n\nReview comment:\n       Well I hope the generator can see the future because it returned it ;)\r\n   \r\n   I can try and fix up the warning.  I agree there is probably some ambiguity whether `emit` means \"returning the future\" or \"completing a future\" (this statement assumes it means the latter).\r\n   \r\n   Something like:\r\n   \r\n   ```\r\n   A generator should ensure that all ongoing futures have completed before it completes a future with a terminal (error or end-of-stream) result.  All futures completed after that result should be the end-of-stream result.\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T19:56:21.654+0000",
                    "updated": "2022-03-18T19:56:21.654+0000",
                    "started": "2022-03-18T19:56:21.653+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744380",
                    "issueId": "13434484"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434484/worklog/744381",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12662:\nURL: https://github.com/apache/arrow/pull/12662#discussion_r830312415\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -60,6 +60,9 @@ namespace arrow {\n // Readahead operators, and some other operators, may introduce queueing.  Any operators\n // that introduce buffering should detail the amount of buffering they introduce in their\n // MakeXYZ function comments.\n+//\n+// A generator should always be fully consumed before it is destroyed.\n+// A generator should not emit a terminal item until it has finished all ongoing futures.\n\nReview comment:\n       Well I hope the generator can see the future because it returned it ;)\r\n   \r\n   I can try and fix up the warning.  I agree there is probably some ambiguity whether `emit` means \"returning the future\" or \"completing a future\" (this statement assumes it means the latter).\r\n   \r\n   Something like:\r\n   \r\n   ```\r\n   A generator should ensure that all ongoing futures have completed before it completes\r\n   a future with a terminal (error or end-of-stream) result.  All futures completed after that\r\n   result should be the end-of-stream result.\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T19:56:34.245+0000",
                    "updated": "2022-03-18T19:56:34.245+0000",
                    "started": "2022-03-18T19:56:34.245+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744381",
                    "issueId": "13434484"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434484/worklog/744400",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12662:\nURL: https://github.com/apache/arrow/pull/12662#discussion_r830326024\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -60,6 +60,9 @@ namespace arrow {\n // Readahead operators, and some other operators, may introduce queueing.  Any operators\n // that introduce buffering should detail the amount of buffering they introduce in their\n // MakeXYZ function comments.\n+//\n+// A generator should always be fully consumed before it is destroyed.\n+// A generator should not emit a terminal item until it has finished all ongoing futures.\n\nReview comment:\n       Yeah, that makes sense to me. \r\n   \r\n   I meant 'seeing the future (of whether the future will complete)' which\u2026I'll stop there before I get more confused.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T20:20:50.688+0000",
                    "updated": "2022-03-18T20:20:50.688+0000",
                    "started": "2022-03-18T20:20:50.688+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744400",
                    "issueId": "13434484"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434484/worklog/744625",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12662:\nURL: https://github.com/apache/arrow/pull/12662#discussion_r830484780\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator_test.cc\n##########\n@@ -553,9 +553,137 @@ TEST_P(MergedGeneratorTestFixture, Merged) {\n \n TEST_P(MergedGeneratorTestFixture, MergedInnerFail) {\n   auto gen = AsyncVectorIt<AsyncGenerator<TestInt>>(\n-      {MakeSource({1, 2, 3}), MakeFailingSource()});\n+      {MakeSource({1, 2, 3}), FailsAt(MakeSource({1, 2, 3}), 1), MakeSource({1, 2, 3})});\n   auto merged_gen = MakeMergedGenerator(gen, 10);\n-  ASSERT_FINISHES_AND_RAISES(Invalid, CollectAsyncGenerator(merged_gen));\n+  // Merged generator can be pulled async-reentrantly and we need to make\n+  // sure, if it is, that all futures are marked complete, even if there is an error\n+  std::vector<Future<TestInt>> futures;\n+  for (int i = 0; i < 20; i++) {\n+    futures.push_back(merged_gen());\n+  }\n+  // Items could come in any order so the only guarantee is that we see at least\n+  // one item before the failure.  After the failure the behavior is undefined\n+  // except that we know the futures must complete.\n+  bool error_seen = false;\n+  for (int i = 0; i < 20; i++) {\n+    Future<TestInt> fut = futures[i];\n+    ASSERT_TRUE(fut.Wait(arrow::kDefaultAssertFinishesWaitSeconds));\n+    Status status = futures[i].status();\n+    if (!status.ok()) {\n+      ASSERT_GT(i, 0);\n+      if (!error_seen) {\n+        error_seen = true;\n+        ASSERT_TRUE(status.IsInvalid());\n+      }\n+    }\n+  }\n+}\n+\n+TEST_P(MergedGeneratorTestFixture, MergedInnerFailCleanup) {\n+  // The purpose of this test is to ensure we do not emit an error until all outstanding\n+  // futures have completed.  This is part of the AsyncGenerator contract\n+  std::shared_ptr<GatingTask> failing_task_gate = GatingTask::Make();\n+  std::shared_ptr<GatingTask> passing_task_gate = GatingTask::Make();\n+  // A passing inner source emits one item and then waits on a gate and then\n+  // emits a terminal item.\n+  //\n+  // A failing inner source emits one item and then waits on a gate and then\n+  // emits an error.\n+  auto make_source = [&](bool fails) -> AsyncGenerator<TestInt> {\n+    std::shared_ptr<std::atomic<int>> count = std::make_shared<std::atomic<int>>(0);\n+    if (fails) {\n+      return [&, count]() -> Future<TestInt> {\n+        int my_count = (*count)++;\n+        // std::cout << \"Fail:\" + std::to_string(my_count) + \"\\n\";\n+        if (my_count == 1) {\n+          // std::cout << \"Waiting on fail gate\\n\";\n+          failing_task_gate->Task()();\n+          // std::cout << \"returning error from fail\\n\";\n+          return Status::Invalid(\"XYZ\");\n+        } else {\n+          return SleepABitAsync().Then([] {\n+            // std::cout << \"returning value from fail\\n\";\n+            return TestInt(0);\n+          });\n+        }\n+      };\n+    } else {\n+      return [&, count]() -> Future<TestInt> {\n+        int my_count = (*count)++;\n+        // std::cout << \"Pass:\" + std::to_string(my_count) + \"\\n\";\n\nReview comment:\n       nit: commented code?\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1058,18 +1109,73 @@ class MergedGenerator {\n       return source();\n     }\n \n+    void SignalErrorUnlocked() {\n+      broken = true;\n+      // Empty any results that have arrived but not asked for.\n+      while (!delivered_jobs.empty()) {\n+        delivered_jobs.pop_front();\n+      }\n+    }\n+\n+    void Purge() {\n+      while (!waiting_jobs.empty()) {\n+        waiting_jobs.front()->MarkFinished(IterationEnd<T>());\n+        waiting_jobs.pop_front();\n+      }\n+    }\n+\n+    void MarkFinished() {\n+      all_finished.MarkFinished();\n+      Purge();\n+    }\n+\n+    // This is called outside the mutex but it is only ever called\n+    // once and Future<>::AddCallback is thread-safe\n+    void MarkFinalError(const Status& err, Future<T> maybe_sink) {\n+      if (maybe_sink.is_valid()) {\n+        // Someone is waiting for this error so lets mark it complete when\n+        // all the work is done\n+        // all_finished will get called by something with a strong pointer to state\n+        // so we can safely capture this\n\nReview comment:\n       It doesn't look like we're capturing `this` here, though.\n\n##########\nFile path: cpp/src/arrow/util/async_generator_test.cc\n##########\n@@ -1376,6 +1521,59 @@ TEST(TestAsyncUtil, ReadaheadFailed) {\n   }\n }\n \n+TEST(TestAsyncUtil, ReadaheadFailedWaitForInFlight) {\n+  ASSERT_OK_AND_ASSIGN(auto thread_pool, internal::ThreadPool::Make(20));\n+  // If a failure causes an early end then we should not emit that failure\n+  // until all in-flight futures have completed.  This is to prevent tasks from\n+  // outliving the generator\n+  std::atomic<int32_t> counter(0);\n+  auto failure_gating_task = GatingTask::Make();\n+  auto in_flight_gating_task = GatingTask::Make();\n+  auto source = [&]() -> Future<TestInt> {\n+    auto count = counter++;\n+    return DeferNotOk(thread_pool->Submit([&, count]() -> Result<TestInt> {\n+      if (count == 0) {\n+        failure_gating_task->Task()();\n+        return Status::Invalid(\"X\");\n+      }\n+      in_flight_gating_task->Task()();\n+      // These are our in-flight tasks\n+      return TestInt(0);\n+    }));\n+  };\n+  auto readahead = MakeReadaheadGenerator<TestInt>(source, 10);\n+  auto should_be_invalid = readahead();\n+  ASSERT_OK(in_flight_gating_task->WaitForRunning(10));\n+  ASSERT_OK(failure_gating_task->Unlock());\n+  SleepABit();\n+  // Can't be finished because in-flight tasks are still running\n+  AssertNotFinished(should_be_invalid);\n+  ASSERT_OK(in_flight_gating_task->Unlock());\n+}\n\nReview comment:\n       should we validate that `should_be_invalid` is indeed invalid?\n\n##########\nFile path: cpp/src/arrow/util/async_generator_test.cc\n##########\n@@ -553,9 +553,137 @@ TEST_P(MergedGeneratorTestFixture, Merged) {\n \n TEST_P(MergedGeneratorTestFixture, MergedInnerFail) {\n   auto gen = AsyncVectorIt<AsyncGenerator<TestInt>>(\n-      {MakeSource({1, 2, 3}), MakeFailingSource()});\n+      {MakeSource({1, 2, 3}), FailsAt(MakeSource({1, 2, 3}), 1), MakeSource({1, 2, 3})});\n   auto merged_gen = MakeMergedGenerator(gen, 10);\n-  ASSERT_FINISHES_AND_RAISES(Invalid, CollectAsyncGenerator(merged_gen));\n+  // Merged generator can be pulled async-reentrantly and we need to make\n+  // sure, if it is, that all futures are marked complete, even if there is an error\n+  std::vector<Future<TestInt>> futures;\n+  for (int i = 0; i < 20; i++) {\n+    futures.push_back(merged_gen());\n+  }\n+  // Items could come in any order so the only guarantee is that we see at least\n+  // one item before the failure.  After the failure the behavior is undefined\n+  // except that we know the futures must complete.\n+  bool error_seen = false;\n+  for (int i = 0; i < 20; i++) {\n+    Future<TestInt> fut = futures[i];\n+    ASSERT_TRUE(fut.Wait(arrow::kDefaultAssertFinishesWaitSeconds));\n+    Status status = futures[i].status();\n+    if (!status.ok()) {\n+      ASSERT_GT(i, 0);\n+      if (!error_seen) {\n+        error_seen = true;\n+        ASSERT_TRUE(status.IsInvalid());\n+      }\n+    }\n+  }\n+}\n+\n+TEST_P(MergedGeneratorTestFixture, MergedInnerFailCleanup) {\n+  // The purpose of this test is to ensure we do not emit an error until all outstanding\n+  // futures have completed.  This is part of the AsyncGenerator contract\n+  std::shared_ptr<GatingTask> failing_task_gate = GatingTask::Make();\n+  std::shared_ptr<GatingTask> passing_task_gate = GatingTask::Make();\n+  // A passing inner source emits one item and then waits on a gate and then\n+  // emits a terminal item.\n+  //\n+  // A failing inner source emits one item and then waits on a gate and then\n+  // emits an error.\n+  auto make_source = [&](bool fails) -> AsyncGenerator<TestInt> {\n+    std::shared_ptr<std::atomic<int>> count = std::make_shared<std::atomic<int>>(0);\n+    if (fails) {\n\nReview comment:\n       nit: it seems the branches could be consolidated if `fails` were captured by the lambda instead\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-19T13:40:28.892+0000",
                    "updated": "2022-03-19T13:40:28.892+0000",
                    "started": "2022-03-19T13:40:28.892+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744625",
                    "issueId": "13434484"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434484/worklog/744737",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12662:\nURL: https://github.com/apache/arrow/pull/12662#discussion_r830647715\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1058,18 +1109,73 @@ class MergedGenerator {\n       return source();\n     }\n \n+    void SignalErrorUnlocked() {\n+      broken = true;\n+      // Empty any results that have arrived but not asked for.\n+      while (!delivered_jobs.empty()) {\n+        delivered_jobs.pop_front();\n+      }\n+    }\n+\n+    void Purge() {\n+      while (!waiting_jobs.empty()) {\n+        waiting_jobs.front()->MarkFinished(IterationEnd<T>());\n+        waiting_jobs.pop_front();\n+      }\n+    }\n+\n+    void MarkFinished() {\n\nReview comment:\n       it seems sometimes we MarkFinished directly, and other times we use this function - maybe this should be renamed `MarkFinishedAndPurge` or something to make it clear why they're different?\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1058,18 +1109,73 @@ class MergedGenerator {\n       return source();\n     }\n \n+    void SignalErrorUnlocked() {\n+      broken = true;\n+      // Empty any results that have arrived but not asked for.\n+      while (!delivered_jobs.empty()) {\n+        delivered_jobs.pop_front();\n+      }\n+    }\n+\n+    void Purge() {\n+      while (!waiting_jobs.empty()) {\n+        waiting_jobs.front()->MarkFinished(IterationEnd<T>());\n+        waiting_jobs.pop_front();\n+      }\n+    }\n+\n+    void MarkFinished() {\n+      all_finished.MarkFinished();\n+      Purge();\n+    }\n+\n+    // This is called outside the mutex but it is only ever called\n+    // once and Future<>::AddCallback is thread-safe\n+    void MarkFinalError(const Status& err, Future<T> maybe_sink) {\n+      if (maybe_sink.is_valid()) {\n+        // Someone is waiting for this error so lets mark it complete when\n+        // all the work is done\n+        // all_finished will get called by something with a strong pointer to state\n+        // so we can safely capture this\n+        all_finished.AddCallback([maybe_sink, err](const Status& status) mutable {\n+          maybe_sink.MarkFinished(err);\n+        });\n+      } else {\n+        // No one is waiting for this error right now so it will be delivered\n+        // next.\n+        final_error = err;\n+      }\n+    }\n+\n+    bool IsComplete() {\n+      return outstanding_requests == 0 &&\n+             (broken || (source_exhausted && num_running_subscriptions == 0 &&\n+                         delivered_jobs.empty()));\n+    }\n+\n+    bool MarkTaskFinishedUnlocked() {\n+      --outstanding_requests;\n+      return IsComplete();\n+    }\n+\n     AsyncGenerator<AsyncGenerator<T>> source;\n     // active_subscriptions and delivered_jobs will be bounded by max_subscriptions\n     std::vector<AsyncGenerator<T>> active_subscriptions;\n     std::deque<std::shared_ptr<DeliveredJob>> delivered_jobs;\n     // waiting_jobs is unbounded, reentrant pulls (e.g. AddReadahead) will provide the\n     // backpressure\n     std::deque<std::shared_ptr<Future<T>>> waiting_jobs;\n+    // A future that will be marked complete when the terminal item has arrived and all\n+    // outstanding futures have completed.  It is used to hold off emission of an error\n+    // until all outstanding work is done.\n+    Future<> all_finished = Future<>::Make();\n     util::Mutex mutex;\n     bool first;\n+    bool broken;\n     bool source_exhausted;\n\nReview comment:\n       But with multiple boolean flags it's also already hard to reason about behavior in different situations\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1058,18 +1109,73 @@ class MergedGenerator {\n       return source();\n     }\n \n+    void SignalErrorUnlocked() {\n+      broken = true;\n+      // Empty any results that have arrived but not asked for.\n+      while (!delivered_jobs.empty()) {\n+        delivered_jobs.pop_front();\n+      }\n+    }\n+\n+    void Purge() {\n\nReview comment:\n       nit: it appears Purge() can be inlined into MarkFinished()\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1058,18 +1109,73 @@ class MergedGenerator {\n       return source();\n     }\n \n+    void SignalErrorUnlocked() {\n\nReview comment:\n       nit, but it seems inconsistent which ones are explicitly tagged `Unlocked`; it seems all except `PullSource` and `MarkFinalError` assume the mutex is currently held (maybe taking a `const GuardType&` would be more explicit about this precondition)\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1058,18 +1109,73 @@ class MergedGenerator {\n       return source();\n     }\n \n+    void SignalErrorUnlocked() {\n+      broken = true;\n+      // Empty any results that have arrived but not asked for.\n+      while (!delivered_jobs.empty()) {\n+        delivered_jobs.pop_front();\n+      }\n+    }\n+\n+    void Purge() {\n+      while (!waiting_jobs.empty()) {\n+        waiting_jobs.front()->MarkFinished(IterationEnd<T>());\n+        waiting_jobs.pop_front();\n+      }\n+    }\n+\n+    void MarkFinished() {\n+      all_finished.MarkFinished();\n+      Purge();\n+    }\n+\n+    // This is called outside the mutex but it is only ever called\n+    // once and Future<>::AddCallback is thread-safe\n+    void MarkFinalError(const Status& err, Future<T> maybe_sink) {\n+      if (maybe_sink.is_valid()) {\n+        // Someone is waiting for this error so lets mark it complete when\n+        // all the work is done\n+        // all_finished will get called by something with a strong pointer to state\n+        // so we can safely capture this\n+        all_finished.AddCallback([maybe_sink, err](const Status& status) mutable {\n+          maybe_sink.MarkFinished(err);\n+        });\n+      } else {\n+        // No one is waiting for this error right now so it will be delivered\n+        // next.\n+        final_error = err;\n+      }\n+    }\n+\n+    bool IsComplete() {\n+      return outstanding_requests == 0 &&\n+             (broken || (source_exhausted && num_running_subscriptions == 0 &&\n+                         delivered_jobs.empty()));\n+    }\n+\n+    bool MarkTaskFinishedUnlocked() {\n+      --outstanding_requests;\n+      return IsComplete();\n+    }\n+\n     AsyncGenerator<AsyncGenerator<T>> source;\n     // active_subscriptions and delivered_jobs will be bounded by max_subscriptions\n     std::vector<AsyncGenerator<T>> active_subscriptions;\n     std::deque<std::shared_ptr<DeliveredJob>> delivered_jobs;\n     // waiting_jobs is unbounded, reentrant pulls (e.g. AddReadahead) will provide the\n     // backpressure\n     std::deque<std::shared_ptr<Future<T>>> waiting_jobs;\n+    // A future that will be marked complete when the terminal item has arrived and all\n+    // outstanding futures have completed.  It is used to hold off emission of an error\n+    // until all outstanding work is done.\n+    Future<> all_finished = Future<>::Make();\n     util::Mutex mutex;\n     bool first;\n+    bool broken;\n     bool source_exhausted;\n\nReview comment:\n       It feels like there's a state machine we're moving through but the number of possible states also seems quite large\u2026so I'm not sure if that'd actually make things clearer\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1120,43 +1272,44 @@ class MergedGenerator {\n \n   struct OuterCallback {\n     void operator()(const Result<AsyncGenerator<T>>& maybe_next) {\n-      bool should_purge = false;\n       bool should_continue = false;\n+      bool should_mark_gen_complete = false;\n\nReview comment:\n       this is actually something like `all_requests_fulfilled`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-20T17:38:01.367+0000",
                    "updated": "2022-03-20T17:38:01.367+0000",
                    "started": "2022-03-20T17:38:01.367+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744737",
                    "issueId": "13434484"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434484/worklog/746219",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12662:\nURL: https://github.com/apache/arrow/pull/12662#discussion_r832681496\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -775,6 +791,7 @@ class ReadaheadGenerator {\n     if (state_->finished.load()) {\n       state_->readahead_queue.push(AsyncGeneratorEnd<T>());\n     } else {\n+      state_->num_running.fetch_add(1);\n\nReview comment:\n       The comparison with `1` is a little misleading.  `fetch_sub` returns the value before the modification so we are testing whether we were the one to set it to 0.\r\n   \r\n   `max_readahead + 1` seems right to me.  `max_readahead` is the number of \"extra spots\" so if a user asks for 1 item and they have 4 readahead we need to start 5 requests, one to go straight to the caller and the other 4 to fill up the readahead spots.\r\n   \r\n   Why does `num_running` seem like the wrong name?  If this is, for example, file readahead, and num_running is 5 then we are reading from 5 different files.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T22:31:56.438+0000",
                    "updated": "2022-03-22T22:31:56.438+0000",
                    "started": "2022-03-22T22:31:56.438+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746219",
                    "issueId": "13434484"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434484/worklog/746251",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12662:\nURL: https://github.com/apache/arrow/pull/12662#discussion_r832725386\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -775,6 +791,7 @@ class ReadaheadGenerator {\n     if (state_->finished.load()) {\n       state_->readahead_queue.push(AsyncGeneratorEnd<T>());\n     } else {\n+      state_->num_running.fetch_add(1);\n\nReview comment:\n       Ah, ok, I missed the fact that `max_readahead` is extra spots so I got confused.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T23:59:40.137+0000",
                    "updated": "2022-03-22T23:59:40.137+0000",
                    "started": "2022-03-22T23:59:40.137+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746251",
                    "issueId": "13434484"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434484/worklog/746255",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12662:\nURL: https://github.com/apache/arrow/pull/12662#discussion_r832732700\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -60,6 +60,9 @@ namespace arrow {\n // Readahead operators, and some other operators, may introduce queueing.  Any operators\n // that introduce buffering should detail the amount of buffering they introduce in their\n // MakeXYZ function comments.\n+//\n+// A generator should always be fully consumed before it is destroyed.\n+// A generator should not emit a terminal item until it has finished all ongoing futures.\n\nReview comment:\n       I ended up with:\r\n   ```\r\n   // A generator should not mark a future complete with an error status or a terminal value\r\n   //   until all outstanding futures have completed.  Generators that spawn multiple\r\n   //   concurrent futures may need to hold onto an error while other concurrent futures wrap\r\n   //   up.\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-23T00:17:11.095+0000",
                    "updated": "2022-03-23T00:17:11.095+0000",
                    "started": "2022-03-23T00:17:11.094+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746255",
                    "issueId": "13434484"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434484/worklog/746256",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12662:\nURL: https://github.com/apache/arrow/pull/12662#discussion_r832733081\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1058,18 +1109,73 @@ class MergedGenerator {\n       return source();\n     }\n \n+    void SignalErrorUnlocked() {\n+      broken = true;\n+      // Empty any results that have arrived but not asked for.\n+      while (!delivered_jobs.empty()) {\n+        delivered_jobs.pop_front();\n+      }\n+    }\n+\n+    void Purge() {\n+      while (!waiting_jobs.empty()) {\n+        waiting_jobs.front()->MarkFinished(IterationEnd<T>());\n+        waiting_jobs.pop_front();\n+      }\n+    }\n+\n+    void MarkFinished() {\n+      all_finished.MarkFinished();\n+      Purge();\n+    }\n+\n+    // This is called outside the mutex but it is only ever called\n+    // once and Future<>::AddCallback is thread-safe\n+    void MarkFinalError(const Status& err, Future<T> maybe_sink) {\n+      if (maybe_sink.is_valid()) {\n+        // Someone is waiting for this error so lets mark it complete when\n+        // all the work is done\n+        // all_finished will get called by something with a strong pointer to state\n+        // so we can safely capture this\n+        all_finished.AddCallback([maybe_sink, err](const Status& status) mutable {\n+          maybe_sink.MarkFinished(err);\n+        });\n+      } else {\n+        // No one is waiting for this error right now so it will be delivered\n+        // next.\n+        final_error = err;\n+      }\n+    }\n+\n+    bool IsComplete() {\n+      return outstanding_requests == 0 &&\n+             (broken || (source_exhausted && num_running_subscriptions == 0 &&\n+                         delivered_jobs.empty()));\n+    }\n+\n+    bool MarkTaskFinishedUnlocked() {\n+      --outstanding_requests;\n+      return IsComplete();\n+    }\n+\n     AsyncGenerator<AsyncGenerator<T>> source;\n\nReview comment:\n       Done.  I also added some extra comments and a (somewhat lengthy) general description of the algorithm.  Let me know if it was over the top.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-23T00:18:03.763+0000",
                    "updated": "2022-03-23T00:18:03.763+0000",
                    "started": "2022-03-23T00:18:03.763+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746256",
                    "issueId": "13434484"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434484/worklog/746257",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12662:\nURL: https://github.com/apache/arrow/pull/12662#discussion_r832733241\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1058,18 +1109,73 @@ class MergedGenerator {\n       return source();\n     }\n \n+    void SignalErrorUnlocked() {\n+      broken = true;\n+      // Empty any results that have arrived but not asked for.\n+      while (!delivered_jobs.empty()) {\n+        delivered_jobs.pop_front();\n+      }\n+    }\n+\n+    void Purge() {\n+      while (!waiting_jobs.empty()) {\n+        waiting_jobs.front()->MarkFinished(IterationEnd<T>());\n+        waiting_jobs.pop_front();\n+      }\n+    }\n+\n+    void MarkFinished() {\n+      all_finished.MarkFinished();\n+      Purge();\n+    }\n+\n+    // This is called outside the mutex but it is only ever called\n+    // once and Future<>::AddCallback is thread-safe\n+    void MarkFinalError(const Status& err, Future<T> maybe_sink) {\n+      if (maybe_sink.is_valid()) {\n+        // Someone is waiting for this error so lets mark it complete when\n+        // all the work is done\n+        // all_finished will get called by something with a strong pointer to state\n+        // so we can safely capture this\n\nReview comment:\n       Good catch, must've been an earlier iteration.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-23T00:18:36.339+0000",
                    "updated": "2022-03-23T00:18:36.339+0000",
                    "started": "2022-03-23T00:18:36.339+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746257",
                    "issueId": "13434484"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434484/worklog/746258",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12662:\nURL: https://github.com/apache/arrow/pull/12662#discussion_r832733327\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator_test.cc\n##########\n@@ -553,9 +553,137 @@ TEST_P(MergedGeneratorTestFixture, Merged) {\n \n TEST_P(MergedGeneratorTestFixture, MergedInnerFail) {\n   auto gen = AsyncVectorIt<AsyncGenerator<TestInt>>(\n-      {MakeSource({1, 2, 3}), MakeFailingSource()});\n+      {MakeSource({1, 2, 3}), FailsAt(MakeSource({1, 2, 3}), 1), MakeSource({1, 2, 3})});\n   auto merged_gen = MakeMergedGenerator(gen, 10);\n-  ASSERT_FINISHES_AND_RAISES(Invalid, CollectAsyncGenerator(merged_gen));\n+  // Merged generator can be pulled async-reentrantly and we need to make\n+  // sure, if it is, that all futures are marked complete, even if there is an error\n+  std::vector<Future<TestInt>> futures;\n+  for (int i = 0; i < 20; i++) {\n+    futures.push_back(merged_gen());\n+  }\n+  // Items could come in any order so the only guarantee is that we see at least\n+  // one item before the failure.  After the failure the behavior is undefined\n+  // except that we know the futures must complete.\n+  bool error_seen = false;\n+  for (int i = 0; i < 20; i++) {\n+    Future<TestInt> fut = futures[i];\n+    ASSERT_TRUE(fut.Wait(arrow::kDefaultAssertFinishesWaitSeconds));\n+    Status status = futures[i].status();\n+    if (!status.ok()) {\n+      ASSERT_GT(i, 0);\n+      if (!error_seen) {\n+        error_seen = true;\n+        ASSERT_TRUE(status.IsInvalid());\n+      }\n+    }\n+  }\n+}\n+\n+TEST_P(MergedGeneratorTestFixture, MergedInnerFailCleanup) {\n+  // The purpose of this test is to ensure we do not emit an error until all outstanding\n+  // futures have completed.  This is part of the AsyncGenerator contract\n+  std::shared_ptr<GatingTask> failing_task_gate = GatingTask::Make();\n+  std::shared_ptr<GatingTask> passing_task_gate = GatingTask::Make();\n+  // A passing inner source emits one item and then waits on a gate and then\n+  // emits a terminal item.\n+  //\n+  // A failing inner source emits one item and then waits on a gate and then\n+  // emits an error.\n+  auto make_source = [&](bool fails) -> AsyncGenerator<TestInt> {\n+    std::shared_ptr<std::atomic<int>> count = std::make_shared<std::atomic<int>>(0);\n+    if (fails) {\n+      return [&, count]() -> Future<TestInt> {\n+        int my_count = (*count)++;\n+        // std::cout << \"Fail:\" + std::to_string(my_count) + \"\\n\";\n+        if (my_count == 1) {\n+          // std::cout << \"Waiting on fail gate\\n\";\n+          failing_task_gate->Task()();\n+          // std::cout << \"returning error from fail\\n\";\n+          return Status::Invalid(\"XYZ\");\n+        } else {\n+          return SleepABitAsync().Then([] {\n+            // std::cout << \"returning value from fail\\n\";\n+            return TestInt(0);\n+          });\n+        }\n+      };\n+    } else {\n+      return [&, count]() -> Future<TestInt> {\n+        int my_count = (*count)++;\n+        // std::cout << \"Pass:\" + std::to_string(my_count) + \"\\n\";\n\nReview comment:\n       Thanks.  Can't go releasing all my debugging secrets.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-23T00:18:49.141+0000",
                    "updated": "2022-03-23T00:18:49.141+0000",
                    "started": "2022-03-23T00:18:49.140+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746258",
                    "issueId": "13434484"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434484/worklog/746259",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12662:\nURL: https://github.com/apache/arrow/pull/12662#discussion_r832733448\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator_test.cc\n##########\n@@ -553,9 +553,137 @@ TEST_P(MergedGeneratorTestFixture, Merged) {\n \n TEST_P(MergedGeneratorTestFixture, MergedInnerFail) {\n   auto gen = AsyncVectorIt<AsyncGenerator<TestInt>>(\n-      {MakeSource({1, 2, 3}), MakeFailingSource()});\n+      {MakeSource({1, 2, 3}), FailsAt(MakeSource({1, 2, 3}), 1), MakeSource({1, 2, 3})});\n   auto merged_gen = MakeMergedGenerator(gen, 10);\n-  ASSERT_FINISHES_AND_RAISES(Invalid, CollectAsyncGenerator(merged_gen));\n+  // Merged generator can be pulled async-reentrantly and we need to make\n+  // sure, if it is, that all futures are marked complete, even if there is an error\n+  std::vector<Future<TestInt>> futures;\n+  for (int i = 0; i < 20; i++) {\n+    futures.push_back(merged_gen());\n+  }\n+  // Items could come in any order so the only guarantee is that we see at least\n+  // one item before the failure.  After the failure the behavior is undefined\n+  // except that we know the futures must complete.\n+  bool error_seen = false;\n+  for (int i = 0; i < 20; i++) {\n+    Future<TestInt> fut = futures[i];\n+    ASSERT_TRUE(fut.Wait(arrow::kDefaultAssertFinishesWaitSeconds));\n+    Status status = futures[i].status();\n+    if (!status.ok()) {\n+      ASSERT_GT(i, 0);\n+      if (!error_seen) {\n+        error_seen = true;\n+        ASSERT_TRUE(status.IsInvalid());\n+      }\n+    }\n+  }\n+}\n+\n+TEST_P(MergedGeneratorTestFixture, MergedInnerFailCleanup) {\n+  // The purpose of this test is to ensure we do not emit an error until all outstanding\n+  // futures have completed.  This is part of the AsyncGenerator contract\n+  std::shared_ptr<GatingTask> failing_task_gate = GatingTask::Make();\n+  std::shared_ptr<GatingTask> passing_task_gate = GatingTask::Make();\n+  // A passing inner source emits one item and then waits on a gate and then\n+  // emits a terminal item.\n+  //\n+  // A failing inner source emits one item and then waits on a gate and then\n+  // emits an error.\n+  auto make_source = [&](bool fails) -> AsyncGenerator<TestInt> {\n+    std::shared_ptr<std::atomic<int>> count = std::make_shared<std::atomic<int>>(0);\n+    if (fails) {\n\nReview comment:\n       Done.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-23T00:19:01.704+0000",
                    "updated": "2022-03-23T00:19:01.704+0000",
                    "started": "2022-03-23T00:19:01.704+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746259",
                    "issueId": "13434484"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434484/worklog/746260",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12662:\nURL: https://github.com/apache/arrow/pull/12662#discussion_r832733512\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator_test.cc\n##########\n@@ -1376,6 +1521,59 @@ TEST(TestAsyncUtil, ReadaheadFailed) {\n   }\n }\n \n+TEST(TestAsyncUtil, ReadaheadFailedWaitForInFlight) {\n+  ASSERT_OK_AND_ASSIGN(auto thread_pool, internal::ThreadPool::Make(20));\n+  // If a failure causes an early end then we should not emit that failure\n+  // until all in-flight futures have completed.  This is to prevent tasks from\n+  // outliving the generator\n+  std::atomic<int32_t> counter(0);\n+  auto failure_gating_task = GatingTask::Make();\n+  auto in_flight_gating_task = GatingTask::Make();\n+  auto source = [&]() -> Future<TestInt> {\n+    auto count = counter++;\n+    return DeferNotOk(thread_pool->Submit([&, count]() -> Result<TestInt> {\n+      if (count == 0) {\n+        failure_gating_task->Task()();\n+        return Status::Invalid(\"X\");\n+      }\n+      in_flight_gating_task->Task()();\n+      // These are our in-flight tasks\n+      return TestInt(0);\n+    }));\n+  };\n+  auto readahead = MakeReadaheadGenerator<TestInt>(source, 10);\n+  auto should_be_invalid = readahead();\n+  ASSERT_OK(in_flight_gating_task->WaitForRunning(10));\n+  ASSERT_OK(failure_gating_task->Unlock());\n+  SleepABit();\n+  // Can't be finished because in-flight tasks are still running\n+  AssertNotFinished(should_be_invalid);\n+  ASSERT_OK(in_flight_gating_task->Unlock());\n+}\n\nReview comment:\n       We should (and now do)\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1058,18 +1109,73 @@ class MergedGenerator {\n       return source();\n     }\n \n+    void SignalErrorUnlocked() {\n+      broken = true;\n+      // Empty any results that have arrived but not asked for.\n+      while (!delivered_jobs.empty()) {\n+        delivered_jobs.pop_front();\n+      }\n+    }\n+\n+    void Purge() {\n\nReview comment:\n       Done.\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1058,18 +1109,73 @@ class MergedGenerator {\n       return source();\n     }\n \n+    void SignalErrorUnlocked() {\n+      broken = true;\n+      // Empty any results that have arrived but not asked for.\n+      while (!delivered_jobs.empty()) {\n+        delivered_jobs.pop_front();\n+      }\n+    }\n+\n+    void Purge() {\n+      while (!waiting_jobs.empty()) {\n+        waiting_jobs.front()->MarkFinished(IterationEnd<T>());\n+        waiting_jobs.pop_front();\n+      }\n+    }\n+\n+    void MarkFinished() {\n\nReview comment:\n       Done.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-23T00:19:25.854+0000",
                    "updated": "2022-03-23T00:19:25.854+0000",
                    "started": "2022-03-23T00:19:25.854+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746260",
                    "issueId": "13434484"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434484/worklog/746261",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12662:\nURL: https://github.com/apache/arrow/pull/12662#discussion_r832733827\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1058,18 +1109,73 @@ class MergedGenerator {\n       return source();\n     }\n \n+    void SignalErrorUnlocked() {\n\nReview comment:\n       Good idea.  I added the const& and made sure the names were consistent.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-23T00:20:00.030+0000",
                    "updated": "2022-03-23T00:20:00.030+0000",
                    "started": "2022-03-23T00:20:00.029+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746261",
                    "issueId": "13434484"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434484/worklog/746266",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12662:\nURL: https://github.com/apache/arrow/pull/12662#discussion_r832734848\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1058,18 +1109,73 @@ class MergedGenerator {\n       return source();\n     }\n \n+    void SignalErrorUnlocked() {\n+      broken = true;\n+      // Empty any results that have arrived but not asked for.\n+      while (!delivered_jobs.empty()) {\n+        delivered_jobs.pop_front();\n+      }\n+    }\n+\n+    void Purge() {\n+      while (!waiting_jobs.empty()) {\n+        waiting_jobs.front()->MarkFinished(IterationEnd<T>());\n+        waiting_jobs.pop_front();\n+      }\n+    }\n+\n+    void MarkFinished() {\n+      all_finished.MarkFinished();\n+      Purge();\n+    }\n+\n+    // This is called outside the mutex but it is only ever called\n+    // once and Future<>::AddCallback is thread-safe\n+    void MarkFinalError(const Status& err, Future<T> maybe_sink) {\n+      if (maybe_sink.is_valid()) {\n+        // Someone is waiting for this error so lets mark it complete when\n+        // all the work is done\n+        // all_finished will get called by something with a strong pointer to state\n+        // so we can safely capture this\n+        all_finished.AddCallback([maybe_sink, err](const Status& status) mutable {\n+          maybe_sink.MarkFinished(err);\n+        });\n+      } else {\n+        // No one is waiting for this error right now so it will be delivered\n+        // next.\n+        final_error = err;\n+      }\n+    }\n+\n+    bool IsComplete() {\n+      return outstanding_requests == 0 &&\n+             (broken || (source_exhausted && num_running_subscriptions == 0 &&\n+                         delivered_jobs.empty()));\n+    }\n+\n+    bool MarkTaskFinishedUnlocked() {\n+      --outstanding_requests;\n+      return IsComplete();\n+    }\n+\n     AsyncGenerator<AsyncGenerator<T>> source;\n     // active_subscriptions and delivered_jobs will be bounded by max_subscriptions\n     std::vector<AsyncGenerator<T>> active_subscriptions;\n     std::deque<std::shared_ptr<DeliveredJob>> delivered_jobs;\n     // waiting_jobs is unbounded, reentrant pulls (e.g. AddReadahead) will provide the\n     // backpressure\n     std::deque<std::shared_ptr<Future<T>>> waiting_jobs;\n+    // A future that will be marked complete when the terminal item has arrived and all\n+    // outstanding futures have completed.  It is used to hold off emission of an error\n+    // until all outstanding work is done.\n+    Future<> all_finished = Future<>::Make();\n     util::Mutex mutex;\n     bool first;\n+    bool broken;\n     bool source_exhausted;\n\nReview comment:\n       There are probably a few coarse grained states:\r\n   `Unstarted` -> `Priming` -> `Running` -> `Winding Down` -> `Completed`.  And any of those middle three can branch into `Broken` (which then eventually goes to `Completed`)\r\n   \r\n   But I'm not sure how to use this information to make anything cleaner.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-23T00:22:55.235+0000",
                    "updated": "2022-03-23T00:22:55.235+0000",
                    "started": "2022-03-23T00:22:55.235+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746266",
                    "issueId": "13434484"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434484/worklog/746267",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12662:\nURL: https://github.com/apache/arrow/pull/12662#discussion_r832734848\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1058,18 +1109,73 @@ class MergedGenerator {\n       return source();\n     }\n \n+    void SignalErrorUnlocked() {\n+      broken = true;\n+      // Empty any results that have arrived but not asked for.\n+      while (!delivered_jobs.empty()) {\n+        delivered_jobs.pop_front();\n+      }\n+    }\n+\n+    void Purge() {\n+      while (!waiting_jobs.empty()) {\n+        waiting_jobs.front()->MarkFinished(IterationEnd<T>());\n+        waiting_jobs.pop_front();\n+      }\n+    }\n+\n+    void MarkFinished() {\n+      all_finished.MarkFinished();\n+      Purge();\n+    }\n+\n+    // This is called outside the mutex but it is only ever called\n+    // once and Future<>::AddCallback is thread-safe\n+    void MarkFinalError(const Status& err, Future<T> maybe_sink) {\n+      if (maybe_sink.is_valid()) {\n+        // Someone is waiting for this error so lets mark it complete when\n+        // all the work is done\n+        // all_finished will get called by something with a strong pointer to state\n+        // so we can safely capture this\n+        all_finished.AddCallback([maybe_sink, err](const Status& status) mutable {\n+          maybe_sink.MarkFinished(err);\n+        });\n+      } else {\n+        // No one is waiting for this error right now so it will be delivered\n+        // next.\n+        final_error = err;\n+      }\n+    }\n+\n+    bool IsComplete() {\n+      return outstanding_requests == 0 &&\n+             (broken || (source_exhausted && num_running_subscriptions == 0 &&\n+                         delivered_jobs.empty()));\n+    }\n+\n+    bool MarkTaskFinishedUnlocked() {\n+      --outstanding_requests;\n+      return IsComplete();\n+    }\n+\n     AsyncGenerator<AsyncGenerator<T>> source;\n     // active_subscriptions and delivered_jobs will be bounded by max_subscriptions\n     std::vector<AsyncGenerator<T>> active_subscriptions;\n     std::deque<std::shared_ptr<DeliveredJob>> delivered_jobs;\n     // waiting_jobs is unbounded, reentrant pulls (e.g. AddReadahead) will provide the\n     // backpressure\n     std::deque<std::shared_ptr<Future<T>>> waiting_jobs;\n+    // A future that will be marked complete when the terminal item has arrived and all\n+    // outstanding futures have completed.  It is used to hold off emission of an error\n+    // until all outstanding work is done.\n+    Future<> all_finished = Future<>::Make();\n     util::Mutex mutex;\n     bool first;\n+    bool broken;\n     bool source_exhausted;\n\nReview comment:\n       There are probably a few coarse grained semantic states:\r\n   `Unstarted` -> `Priming` -> `Running` -> `Winding Down` -> `Completed`.  And any of those middle three can branch into `Broken` (which then eventually goes to `Completed`)\r\n   \r\n   But I'm not sure how to use this information to make anything cleaner.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-23T00:23:07.833+0000",
                    "updated": "2022-03-23T00:23:07.833+0000",
                    "started": "2022-03-23T00:23:07.833+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746267",
                    "issueId": "13434484"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 16800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5af382f5[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6a758f2b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6d73ddf5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2b390ba7[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@722d210b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@51edca88[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@22822935[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@41056af1[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5abb3ea3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@653d16f6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@564540e5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3c7dfa3e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16800,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Mar 25 13:15:22 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-03-25T13:15:22.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15968/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-03-18T03:34:08.000+0000",
        "updated": "2022-03-28T19:53:24.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently, when an error occurs, we emit the error immediately.  Once an error is emitted from the generator we typically discard it and all related state.  Unfortunately, in readahead situations, there may be outstanding tasks, and these may be referencing that related state.\r\n\r\nCurrently, we avoid errors in this situation through the copious use of shared_ptr.  This has led to excess complexity and potential performance issues.\r\n\r\nInstead, we can update the rules for async generators to only emit a terminal item once all outstanding tasks have completed.  At this point we should be able to safely tear down all of the state.  Furthermore, if we can ensure consumers drain an async generator before they destroy it (this can be done in a follow-up issue), we can get rid of a lot of our shared_ptr and simplify some of the complexity of the async reader code.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Update AsyncGenerator semantics to emit a terminal item only after all outstanding futures have completed",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13434484/comment/17512373",
                    "id": "17512373",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 12662\n[https://github.com/apache/arrow/pull/12662]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-03-25T13:15:22.703+0000",
                    "updated": "2022-03-25T13:15:22.703+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z10ln4:",
        "customfield_12314139": null
    }
}