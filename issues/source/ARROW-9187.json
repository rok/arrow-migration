{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13312511",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312511",
    "key": "ARROW-9187",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12593092",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12593092",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13309169",
                    "key": "ARROW-9022",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309169",
                    "fields": {
                        "summary": "[C++] Add/Sub/Mul arithmetic kernels with overflow check",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            },
            {
                "id": "12593091",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12593091",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13315947",
                    "key": "ARROW-9388",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315947",
                    "fields": {
                        "summary": "[C++] Division kernels",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
            "name": "jonkeane",
            "key": "jonkeane",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
            },
            "displayName": "Jonathan Keane",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9187/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 16,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312511/worklog/455707",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson opened a new pull request #7668:\nURL: https://github.com/apache/arrow/pull/7668\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-07T20:34:14.899+0000",
                    "updated": "2020-07-07T20:34:14.899+0000",
                    "started": "2020-07-07T20:34:14.898+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "455707",
                    "issueId": "13312511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312511/worklog/455720",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7668:\nURL: https://github.com/apache/arrow/pull/7668#issuecomment-655124179\n\n\n   <!--\n     Licensed to the Apache Software Foundation (ASF) under one\n     or more contributor license agreements.  See the NOTICE file\n     distributed with this work for additional information\n     regarding copyright ownership.  The ASF licenses this file\n     to you under the Apache License, Version 2.0 (the\n     \"License\"); you may not use this file except in compliance\n     with the License.  You may obtain a copy of the License at\n   \n       http://www.apache.org/licenses/LICENSE-2.0\n   \n     Unless required by applicable law or agreed to in writing,\n     software distributed under the License is distributed on an\n     \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n     KIND, either express or implied.  See the License for the\n     specific language governing permissions and limitations\n     under the License.\n   -->\n   \n   Thanks for opening a pull request!\n   \n   Could you open an issue for this pull request on JIRA?\n   https://issues.apache.org/jira/browse/ARROW\n   \n   Then could you also rename pull request title in the following format?\n   \n       ARROW-${JIRA_ID}: [${COMPONENT}] ${SUMMARY}\n   \n   See also:\n   \n     * [Other pull requests](https://github.com/apache/arrow/pulls/)\n     * [Contribution Guidelines - How to contribute patches](https://arrow.apache.org/docs/developers/contributing.html#how-to-contribute-patches)\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-07T20:46:39.979+0000",
                    "updated": "2020-07-07T20:46:39.979+0000",
                    "started": "2020-07-07T20:46:39.979+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "455720",
                    "issueId": "13312511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312511/worklog/525326",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson opened a new pull request #8947:\nURL: https://github.com/apache/arrow/pull/8947\n\n\n   Based on ARROW-10322\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-17T00:11:02.595+0000",
                    "updated": "2020-12-17T00:11:02.595+0000",
                    "started": "2020-12-17T00:11:02.594+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "525326",
                    "issueId": "13312511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312511/worklog/525334",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8947:\nURL: https://github.com/apache/arrow/pull/8947#issuecomment-747128831\n\n\n   https://issues.apache.org/jira/browse/ARROW-9187\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-17T00:42:11.133+0000",
                    "updated": "2020-12-17T00:42:11.133+0000",
                    "started": "2020-12-17T00:42:11.132+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "525334",
                    "issueId": "13312511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312511/worklog/529246",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #8947:\nURL: https://github.com/apache/arrow/pull/8947#discussion_r549807276\n\n\n\n##########\nFile path: r/R/expression.R\n##########\n@@ -91,9 +122,20 @@ build_array_expression <- function(.Generic, e1, e2, ...) {\n   \"<=\" = \"less_equal\",\n   \"&\" = \"and_kleene\",\n   \"|\" = \"or_kleene\",\n-  \"%in%\" = \"is_in_meta_binary\"\n+  \"+\" = \"add_checked\",\n+  \"-\" = \"subtract_checked\",\n+  \"*\" = \"multiply_checked\",\n+  \"/\" = \"divide_checked\",\n+  \"%/%\" = \"divide_checked\",\n+  \"%in%\" = \"is_in_meta_binary\",\n+  \"%%\" = \"divide_checked\"\n\nReview comment:\n       maybe add a comment that we don't actually use \"divide_checked\" with `%%`\n\n##########\nFile path: r/R/expression.R\n##########\n@@ -173,84 +205,84 @@ Expression <- R6Class(\"Expression\", inherit = ArrowObject,\n     ToString = function() dataset___expr__ToString(self)\n   )\n )\n-\n+Expression$create <- function(function_name,\n+                              ...,\n+                              args = list(...),\n+                              options = empty_named_list()) {\n+  assert_that(is.string(function_name))\n+  dataset___expr__call(function_name, args, options)\n+}\n Expression$field_ref <- function(name) {\n-  assert_is(name, \"character\")\n-  assert_that(length(name) == 1)\n+  assert_that(is.string(name))\n   dataset___expr__field_ref(name)\n }\n Expression$scalar <- function(x) {\n   dataset___expr__scalar(Scalar$create(x))\n }\n-Expression$compare <- function(OP, e1, e2) {\n-  comp_func <- comparison_function_map[[OP]]\n-  if (is.null(comp_func)) {\n-    stop(OP, \" is not a supported comparison function\", call. = FALSE)\n-  }\n-  comp_func(e1, e2)\n-}\n \n-comparison_function_map <- list(\n-  \"==\" = dataset___expr__equal,\n-  \"!=\" = dataset___expr__not_equal,\n-  \">\" = dataset___expr__greater,\n-  \">=\" = dataset___expr__greater_equal,\n-  \"<\" = dataset___expr__less,\n-  \"<=\" = dataset___expr__less_equal\n-)\n-Expression$in_ <- function(x, set) {\n-  dataset___expr__in(x, Array$create(set))\n-}\n-Expression$and <- function(e1, e2) {\n-  dataset___expr__and(e1, e2)\n-}\n-Expression$or <- function(e1, e2) {\n-  dataset___expr__or(e1, e2)\n-}\n-Expression$not <- function(e1) {\n-  dataset___expr__not(e1)\n-}\n-Expression$is_valid <- function(e1) {\n-  dataset___expr__is_valid(e1)\n+build_dataset_expression <- function(.Generic, e1, e2, ...) {\n+  if (.Generic %in% names(.unary_function_map)) {\n+    expr <- Expression$create(.unary_function_map[[.Generic]], e1)\n+  } else if (.Generic == \"%in%\") {\n+    # Special-case %in%, which is different from the Array function name\n+    expr <- Expression$create(\"is_in\", e1,\n+      options = list(\n+        value_set = Array$create(e2),\n+        skip_nulls = TRUE\n+      )\n+    )\n+  } else {\n+    if (!inherits(e1, \"Expression\")) {\n+      e1 <- Expression$scalar(e1)\n+    }\n+    if (!inherits(e2, \"Expression\")) {\n+      e2 <- Expression$scalar(e2)\n+    }\n+\n+    # In Arrow, \"divide\" is one function, which does integer division on\n+    # integer inputs and floating-point division on floats\n+    if (.Generic == \"/\") {\n+      # TODO: omg so many ways it's wrong to assume these types\n+      e1 <- Expression$create(\"cast\", e1, options = list(to_type = float64()))\n+      e2 <- Expression$create(\"cast\", e2, options = list(to_type = float64()))\n+    } else if (.Generic == \"%/%\") {\n+      e1 <- Expression$create(\"cast\", e1, options = list(to_type = float64()))\n+      e2 <- Expression$create(\"cast\", e2, options = list(to_type = float64()))\n+      return(Expression$create(\"cast\", Expression$create(.binary_function_map[[.Generic]], e1, e2, ...), options = list(to_type = int32(), allow_float_truncate = TRUE)))\n+    } else if (.Generic == \"%%\") {\n+      # {e1 - e2 * ( e1 %/% e2 )}\n+      # TODO: there has to be a way to use the form ^^^ instead of this.\n\nReview comment:\n       That should work: `Ops.Expression` should dispatch correctly because e1 and e2 are both Expressions. What happens when you do it?\n\n##########\nFile path: r/R/expression.R\n##########\n@@ -91,9 +122,20 @@ build_array_expression <- function(.Generic, e1, e2, ...) {\n   \"<=\" = \"less_equal\",\n   \"&\" = \"and_kleene\",\n   \"|\" = \"or_kleene\",\n-  \"%in%\" = \"is_in_meta_binary\"\n+  \"+\" = \"add_checked\",\n+  \"-\" = \"subtract_checked\",\n+  \"*\" = \"multiply_checked\",\n+  \"/\" = \"divide_checked\",\n+  \"%/%\" = \"divide_checked\",\n+  \"%in%\" = \"is_in_meta_binary\",\n+  \"%%\" = \"divide_checked\"\n )\n \n+\n+# \u2018\"^\"\u2019\n\nReview comment:\n       I'd move this up into the map above (commented out of course) and add next to it the JIRA number you create\n\n##########\nFile path: r/tests/testthat/test-compute-arith.R\n##########\n@@ -0,0 +1,77 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+# TODO:\n\nReview comment:\n       Are these TODOs done? Can you delete this?\n\n##########\nFile path: r/tests/testthat/test-dplyr.R\n##########\n@@ -133,6 +133,42 @@ test_that(\"filtering with expression\", {\n   )\n })\n \n+test_that(\"filtering with arithmetic\", {\n+  expect_dplyr_equal(\n+    input %>%\n+      filter(dbl + 1 > 3) %>%\n+      select(string = chr, int, dbl) %>%\n+      collect(),\n+    tbl\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      filter(dbl / 2 > 3) %>%\n+      select(string = chr, int, dbl) %>%\n+      collect(),\n+    tbl\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      filter(dbl / 2L > 3) %>%\n+      select(string = chr, int, dbl) %>%\n+      collect(),\n+    tbl\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      filter(dbl %/% 2 > 3) %>%\n\nReview comment:\n       All these test are with `dbl`; should we add some with `int` or other columns? Or do you think the other types are better tested elsewhere (test-compute-arith.R) and this is really just testing the dplyr NSE?\n\n##########\nFile path: r/tests/testthat/test-dplyr.R\n##########\n@@ -133,6 +133,42 @@ test_that(\"filtering with expression\", {\n   )\n })\n \n+test_that(\"filtering with arithmetic\", {\n+  expect_dplyr_equal(\n+    input %>%\n+      filter(dbl + 1 > 3) %>%\n+      select(string = chr, int, dbl) %>%\n+      collect(),\n+    tbl\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      filter(dbl / 2 > 3) %>%\n+      select(string = chr, int, dbl) %>%\n+      collect(),\n+    tbl\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      filter(dbl / 2L > 3) %>%\n+      select(string = chr, int, dbl) %>%\n+      collect(),\n+    tbl\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      filter(dbl %/% 2 > 3) %>%\n+      select(string = chr, int, dbl) %>%\n+      collect(),\n+    tbl,\n+    # TODO: why are record batched versions problematic?\n\nReview comment:\n       We should resolve this\n\n##########\nFile path: r/R/expression.R\n##########\n@@ -173,84 +205,84 @@ Expression <- R6Class(\"Expression\", inherit = ArrowObject,\n     ToString = function() dataset___expr__ToString(self)\n   )\n )\n-\n+Expression$create <- function(function_name,\n+                              ...,\n+                              args = list(...),\n+                              options = empty_named_list()) {\n+  assert_that(is.string(function_name))\n+  dataset___expr__call(function_name, args, options)\n+}\n Expression$field_ref <- function(name) {\n-  assert_is(name, \"character\")\n-  assert_that(length(name) == 1)\n+  assert_that(is.string(name))\n   dataset___expr__field_ref(name)\n }\n Expression$scalar <- function(x) {\n   dataset___expr__scalar(Scalar$create(x))\n }\n-Expression$compare <- function(OP, e1, e2) {\n-  comp_func <- comparison_function_map[[OP]]\n-  if (is.null(comp_func)) {\n-    stop(OP, \" is not a supported comparison function\", call. = FALSE)\n-  }\n-  comp_func(e1, e2)\n-}\n \n-comparison_function_map <- list(\n-  \"==\" = dataset___expr__equal,\n-  \"!=\" = dataset___expr__not_equal,\n-  \">\" = dataset___expr__greater,\n-  \">=\" = dataset___expr__greater_equal,\n-  \"<\" = dataset___expr__less,\n-  \"<=\" = dataset___expr__less_equal\n-)\n-Expression$in_ <- function(x, set) {\n-  dataset___expr__in(x, Array$create(set))\n-}\n-Expression$and <- function(e1, e2) {\n-  dataset___expr__and(e1, e2)\n-}\n-Expression$or <- function(e1, e2) {\n-  dataset___expr__or(e1, e2)\n-}\n-Expression$not <- function(e1) {\n-  dataset___expr__not(e1)\n-}\n-Expression$is_valid <- function(e1) {\n-  dataset___expr__is_valid(e1)\n+build_dataset_expression <- function(.Generic, e1, e2, ...) {\n+  if (.Generic %in% names(.unary_function_map)) {\n+    expr <- Expression$create(.unary_function_map[[.Generic]], e1)\n+  } else if (.Generic == \"%in%\") {\n+    # Special-case %in%, which is different from the Array function name\n+    expr <- Expression$create(\"is_in\", e1,\n+      options = list(\n+        value_set = Array$create(e2),\n+        skip_nulls = TRUE\n+      )\n+    )\n+  } else {\n+    if (!inherits(e1, \"Expression\")) {\n+      e1 <- Expression$scalar(e1)\n+    }\n+    if (!inherits(e2, \"Expression\")) {\n+      e2 <- Expression$scalar(e2)\n+    }\n+\n+    # In Arrow, \"divide\" is one function, which does integer division on\n+    # integer inputs and floating-point division on floats\n+    if (.Generic == \"/\") {\n+      # TODO: omg so many ways it's wrong to assume these types\n+      e1 <- Expression$create(\"cast\", e1, options = list(to_type = float64()))\n\nReview comment:\n       You could define a `cast` method on Expression, `function(to_type, ...)`, and then you could rewrite these as `e1 <- e1$cast(float64())`, which I think reads nicer \n\n##########\nFile path: r/tests/testthat/test-compute-arith.R\n##########\n@@ -0,0 +1,77 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+# TODO:\n+# * More tests for edge cases, esp. with division; add test helpers here?\n+# * Is there a better \"autocasting\" solution? See what rules C++ Datasets do\n+# * test-dplyr tests (Added one addition, and one summarize, but check to see if\n+# we can make summarize route through arrow need more?)\n+# * then, dataset tests, special casing for division\n+\n+test_that(\"Addition\", {\n+  a <- Array$create(c(1:4, NA_integer_))\n+  expect_type_equal(a, int32())\n+  expect_type_equal(a + 4, int32())\n+  expect_equal(a + 4, Array$create(c(5:8, NA_integer_)))\n+  expect_identical(as.vector(a + 4), c(5:8, NA_integer_))\n+  expect_equal(a + 4L, Array$create(c(5:8, NA_integer_)))\n+  expect_vector(a + 4L, c(5:8, NA_integer_))\n+  expect_equal(a + NA_integer_, Array$create(rep(NA_integer_, 5)))\n+\n+  # overflow errors \u2014 this is slightly different from R's `NA` coercion when\n+  # overflowing, but better than the alternative of silently restarting\n+  casted <- a$cast(int8())\n+  expect_error(casted + 257)\n+\n+  skip(\"autocasting should happen in compute kernels; R workaround fails on this\")\n\nReview comment:\n       From what you showed me in the dataset cpp code, the implicit casting it does (cast scalar to type of the column) also wouldn't promote as expected here. Might be worth making a dataset test that shows that, skipping it, and reporting a JIRA for Ben.\n\n##########\nFile path: r/R/expression.R\n##########\n@@ -173,84 +205,84 @@ Expression <- R6Class(\"Expression\", inherit = ArrowObject,\n     ToString = function() dataset___expr__ToString(self)\n   )\n )\n-\n+Expression$create <- function(function_name,\n+                              ...,\n+                              args = list(...),\n+                              options = empty_named_list()) {\n+  assert_that(is.string(function_name))\n+  dataset___expr__call(function_name, args, options)\n+}\n Expression$field_ref <- function(name) {\n-  assert_is(name, \"character\")\n-  assert_that(length(name) == 1)\n+  assert_that(is.string(name))\n   dataset___expr__field_ref(name)\n }\n Expression$scalar <- function(x) {\n   dataset___expr__scalar(Scalar$create(x))\n }\n-Expression$compare <- function(OP, e1, e2) {\n-  comp_func <- comparison_function_map[[OP]]\n-  if (is.null(comp_func)) {\n-    stop(OP, \" is not a supported comparison function\", call. = FALSE)\n-  }\n-  comp_func(e1, e2)\n-}\n \n-comparison_function_map <- list(\n-  \"==\" = dataset___expr__equal,\n-  \"!=\" = dataset___expr__not_equal,\n-  \">\" = dataset___expr__greater,\n-  \">=\" = dataset___expr__greater_equal,\n-  \"<\" = dataset___expr__less,\n-  \"<=\" = dataset___expr__less_equal\n-)\n-Expression$in_ <- function(x, set) {\n-  dataset___expr__in(x, Array$create(set))\n-}\n-Expression$and <- function(e1, e2) {\n-  dataset___expr__and(e1, e2)\n-}\n-Expression$or <- function(e1, e2) {\n-  dataset___expr__or(e1, e2)\n-}\n-Expression$not <- function(e1) {\n-  dataset___expr__not(e1)\n-}\n-Expression$is_valid <- function(e1) {\n-  dataset___expr__is_valid(e1)\n+build_dataset_expression <- function(.Generic, e1, e2, ...) {\n+  if (.Generic %in% names(.unary_function_map)) {\n+    expr <- Expression$create(.unary_function_map[[.Generic]], e1)\n+  } else if (.Generic == \"%in%\") {\n+    # Special-case %in%, which is different from the Array function name\n+    expr <- Expression$create(\"is_in\", e1,\n+      options = list(\n+        value_set = Array$create(e2),\n+        skip_nulls = TRUE\n+      )\n+    )\n+  } else {\n+    if (!inherits(e1, \"Expression\")) {\n+      e1 <- Expression$scalar(e1)\n+    }\n+    if (!inherits(e2, \"Expression\")) {\n+      e2 <- Expression$scalar(e2)\n+    }\n+\n+    # In Arrow, \"divide\" is one function, which does integer division on\n+    # integer inputs and floating-point division on floats\n+    if (.Generic == \"/\") {\n+      # TODO: omg so many ways it's wrong to assume these types\n+      e1 <- Expression$create(\"cast\", e1, options = list(to_type = float64()))\n+      e2 <- Expression$create(\"cast\", e2, options = list(to_type = float64()))\n+    } else if (.Generic == \"%/%\") {\n+      e1 <- Expression$create(\"cast\", e1, options = list(to_type = float64()))\n+      e2 <- Expression$create(\"cast\", e2, options = list(to_type = float64()))\n+      return(Expression$create(\"cast\", Expression$create(.binary_function_map[[.Generic]], e1, e2, ...), options = list(to_type = int32(), allow_float_truncate = TRUE)))\n\nReview comment:\n       ```suggestion\r\n         # In R, integer division works like floor(float division)\r\n         out <- build_dataset_expression(\"/\", e1, e2)\r\n         return(out$cast(int32(), allow_float_truncate = TRUE))\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T19:52:44.088+0000",
                    "updated": "2020-12-29T19:52:44.088+0000",
                    "started": "2020-12-29T19:52:44.088+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529246",
                    "issueId": "13312511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312511/worklog/529255",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #8947:\nURL: https://github.com/apache/arrow/pull/8947#discussion_r549834792\n\n\n\n##########\nFile path: r/R/expression.R\n##########\n@@ -173,84 +205,84 @@ Expression <- R6Class(\"Expression\", inherit = ArrowObject,\n     ToString = function() dataset___expr__ToString(self)\n   )\n )\n-\n+Expression$create <- function(function_name,\n+                              ...,\n+                              args = list(...),\n+                              options = empty_named_list()) {\n+  assert_that(is.string(function_name))\n+  dataset___expr__call(function_name, args, options)\n+}\n Expression$field_ref <- function(name) {\n-  assert_is(name, \"character\")\n-  assert_that(length(name) == 1)\n+  assert_that(is.string(name))\n   dataset___expr__field_ref(name)\n }\n Expression$scalar <- function(x) {\n   dataset___expr__scalar(Scalar$create(x))\n }\n-Expression$compare <- function(OP, e1, e2) {\n-  comp_func <- comparison_function_map[[OP]]\n-  if (is.null(comp_func)) {\n-    stop(OP, \" is not a supported comparison function\", call. = FALSE)\n-  }\n-  comp_func(e1, e2)\n-}\n \n-comparison_function_map <- list(\n-  \"==\" = dataset___expr__equal,\n-  \"!=\" = dataset___expr__not_equal,\n-  \">\" = dataset___expr__greater,\n-  \">=\" = dataset___expr__greater_equal,\n-  \"<\" = dataset___expr__less,\n-  \"<=\" = dataset___expr__less_equal\n-)\n-Expression$in_ <- function(x, set) {\n-  dataset___expr__in(x, Array$create(set))\n-}\n-Expression$and <- function(e1, e2) {\n-  dataset___expr__and(e1, e2)\n-}\n-Expression$or <- function(e1, e2) {\n-  dataset___expr__or(e1, e2)\n-}\n-Expression$not <- function(e1) {\n-  dataset___expr__not(e1)\n-}\n-Expression$is_valid <- function(e1) {\n-  dataset___expr__is_valid(e1)\n+build_dataset_expression <- function(.Generic, e1, e2, ...) {\n+  if (.Generic %in% names(.unary_function_map)) {\n+    expr <- Expression$create(.unary_function_map[[.Generic]], e1)\n+  } else if (.Generic == \"%in%\") {\n+    # Special-case %in%, which is different from the Array function name\n+    expr <- Expression$create(\"is_in\", e1,\n+      options = list(\n+        value_set = Array$create(e2),\n+        skip_nulls = TRUE\n+      )\n+    )\n+  } else {\n+    if (!inherits(e1, \"Expression\")) {\n+      e1 <- Expression$scalar(e1)\n+    }\n+    if (!inherits(e2, \"Expression\")) {\n+      e2 <- Expression$scalar(e2)\n+    }\n+\n+    # In Arrow, \"divide\" is one function, which does integer division on\n+    # integer inputs and floating-point division on floats\n+    if (.Generic == \"/\") {\n+      # TODO: omg so many ways it's wrong to assume these types\n+      e1 <- Expression$create(\"cast\", e1, options = list(to_type = float64()))\n\nReview comment:\n       Oh, right, of course. That's nice\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T20:18:46.760+0000",
                    "updated": "2020-12-29T20:18:46.760+0000",
                    "started": "2020-12-29T20:18:46.760+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529255",
                    "issueId": "13312511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312511/worklog/529288",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #8947:\nURL: https://github.com/apache/arrow/pull/8947#discussion_r549861998\n\n\n\n##########\nFile path: r/R/expression.R\n##########\n@@ -173,84 +205,84 @@ Expression <- R6Class(\"Expression\", inherit = ArrowObject,\n     ToString = function() dataset___expr__ToString(self)\n   )\n )\n-\n+Expression$create <- function(function_name,\n+                              ...,\n+                              args = list(...),\n+                              options = empty_named_list()) {\n+  assert_that(is.string(function_name))\n+  dataset___expr__call(function_name, args, options)\n+}\n Expression$field_ref <- function(name) {\n-  assert_is(name, \"character\")\n-  assert_that(length(name) == 1)\n+  assert_that(is.string(name))\n   dataset___expr__field_ref(name)\n }\n Expression$scalar <- function(x) {\n   dataset___expr__scalar(Scalar$create(x))\n }\n-Expression$compare <- function(OP, e1, e2) {\n-  comp_func <- comparison_function_map[[OP]]\n-  if (is.null(comp_func)) {\n-    stop(OP, \" is not a supported comparison function\", call. = FALSE)\n-  }\n-  comp_func(e1, e2)\n-}\n \n-comparison_function_map <- list(\n-  \"==\" = dataset___expr__equal,\n-  \"!=\" = dataset___expr__not_equal,\n-  \">\" = dataset___expr__greater,\n-  \">=\" = dataset___expr__greater_equal,\n-  \"<\" = dataset___expr__less,\n-  \"<=\" = dataset___expr__less_equal\n-)\n-Expression$in_ <- function(x, set) {\n-  dataset___expr__in(x, Array$create(set))\n-}\n-Expression$and <- function(e1, e2) {\n-  dataset___expr__and(e1, e2)\n-}\n-Expression$or <- function(e1, e2) {\n-  dataset___expr__or(e1, e2)\n-}\n-Expression$not <- function(e1) {\n-  dataset___expr__not(e1)\n-}\n-Expression$is_valid <- function(e1) {\n-  dataset___expr__is_valid(e1)\n+build_dataset_expression <- function(.Generic, e1, e2, ...) {\n+  if (.Generic %in% names(.unary_function_map)) {\n+    expr <- Expression$create(.unary_function_map[[.Generic]], e1)\n+  } else if (.Generic == \"%in%\") {\n+    # Special-case %in%, which is different from the Array function name\n+    expr <- Expression$create(\"is_in\", e1,\n+      options = list(\n+        value_set = Array$create(e2),\n+        skip_nulls = TRUE\n+      )\n+    )\n+  } else {\n+    if (!inherits(e1, \"Expression\")) {\n+      e1 <- Expression$scalar(e1)\n+    }\n+    if (!inherits(e2, \"Expression\")) {\n+      e2 <- Expression$scalar(e2)\n+    }\n+\n+    # In Arrow, \"divide\" is one function, which does integer division on\n+    # integer inputs and floating-point division on floats\n+    if (.Generic == \"/\") {\n+      # TODO: omg so many ways it's wrong to assume these types\n+      e1 <- Expression$create(\"cast\", e1, options = list(to_type = float64()))\n+      e2 <- Expression$create(\"cast\", e2, options = list(to_type = float64()))\n+    } else if (.Generic == \"%/%\") {\n+      e1 <- Expression$create(\"cast\", e1, options = list(to_type = float64()))\n+      e2 <- Expression$create(\"cast\", e2, options = list(to_type = float64()))\n+      return(Expression$create(\"cast\", Expression$create(.binary_function_map[[.Generic]], e1, e2, ...), options = list(to_type = int32(), allow_float_truncate = TRUE)))\n+    } else if (.Generic == \"%%\") {\n+      # {e1 - e2 * ( e1 %/% e2 )}\n+      # TODO: there has to be a way to use the form ^^^ instead of this.\n\nReview comment:\n       Ah that works fine (though casting all of the operands to be right here doesn't quite work (the previous hack didn't work in this case, but I failed to have a test).\r\n   \r\n   With array expressions, I get \"cannot add bindings to a locked environment\" (I'm pushing a commit that will have this in a comment in a sec)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T21:52:17.076+0000",
                    "updated": "2020-12-29T21:52:17.076+0000",
                    "started": "2020-12-29T21:52:17.075+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529288",
                    "issueId": "13312511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312511/worklog/529567",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #8947:\nURL: https://github.com/apache/arrow/pull/8947#discussion_r550266972\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr.R\n##########\n@@ -133,6 +133,42 @@ test_that(\"filtering with expression\", {\n   )\n })\n \n+test_that(\"filtering with arithmetic\", {\n+  expect_dplyr_equal(\n+    input %>%\n+      filter(dbl + 1 > 3) %>%\n+      select(string = chr, int, dbl) %>%\n+      collect(),\n+    tbl\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      filter(dbl / 2 > 3) %>%\n+      select(string = chr, int, dbl) %>%\n+      collect(),\n+    tbl\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      filter(dbl / 2L > 3) %>%\n+      select(string = chr, int, dbl) %>%\n+      collect(),\n+    tbl\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      filter(dbl %/% 2 > 3) %>%\n+      select(string = chr, int, dbl) %>%\n+      collect(),\n+    tbl,\n+    # TODO: why are record batched versions problematic?\n\nReview comment:\n       _turns out_ this works in neither tables nor record batches (I misunderstood the control flow of `expect_dplyr_equal()` that specifying `skip_record_batch` would actually skip both record batch and table tests. I've updated `expect_dplyr_equal()` to prevent that mistake/misunderstanding in the future.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-30T17:17:41.722+0000",
                    "updated": "2020-12-30T17:17:41.722+0000",
                    "started": "2020-12-30T17:17:41.721+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529567",
                    "issueId": "13312511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312511/worklog/529598",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #8947:\nURL: https://github.com/apache/arrow/pull/8947#discussion_r550293049\n\n\n\n##########\nFile path: r/R/expression.R\n##########\n@@ -59,6 +59,44 @@ build_array_expression <- function(.Generic, e1, e2, ...) {\n   } else {\n     e1 <- .wrap_arrow(e1, .Generic, e2$type)\n     e2 <- .wrap_arrow(e2, .Generic, e1$type)\n+\n+    # In Arrow, \"divide\" is one function, which does integer division on\n+    # integer inputs and floating-point division on floats\n+    if (.Generic == \"/\") {\n+      # TODO: omg so many ways it's wrong to assume these types\n+      e1 <- e1$cast(float64())\n\nReview comment:\n       Don't `$cast()` here because that evaluates. This should still be `array_expression(...)`, though you could write a `cast_array_expression()` helper that is like `Expression$cast()` if you want.\n\n##########\nFile path: r/R/expression.R\n##########\n@@ -153,104 +200,82 @@ print.array_expression <- function(x, ...) {\n #' `Expression$field_ref(name)` is used to construct an `Expression` which\n #' evaluates to the named column in the `Dataset` against which it is evaluated.\n #'\n-#' `Expression$compare(OP, e1, e2)` takes two `Expression` operands, constructing\n-#' an `Expression` which will evaluate these operands then compare them with the\n-#' relation specified by OP (e.g. \"==\", \"!=\", \">\", etc.) For example, to filter\n-#' down to rows where the column named \"alpha\" is less than 5:\n-#' `Expression$compare(\"<\", Expression$field_ref(\"alpha\"), Expression$scalar(5))`\n-#'\n-#' `Expression$and(e1, e2)`, `Expression$or(e1, e2)`, and `Expression$not(e1)`\n-#' construct an `Expression` combining their arguments with Boolean operators.\n-#'\n-#' `Expression$is_valid(x)` is essentially (an inversion of) `is.na()` for `Expression`s.\n-#'\n-#' `Expression$in_(x, set)` evaluates x and returns whether or not it is a member of the set.\n+#' `Expression$create(function_name, ..., options)` builds a function-call\n+#' `Expression` containing one or more `Expression`s.\n #' @name Expression\n #' @rdname Expression\n #' @export\n Expression <- R6Class(\"Expression\", inherit = ArrowObject,\n   public = list(\n-    ToString = function() dataset___expr__ToString(self)\n+    ToString = function() dataset___expr__ToString(self),\n+    cast = function(to_type, ...) {\n+      Expression$create(\"cast\", self, options = list(to_type = to_type, ...))\n+    }\n   )\n )\n-\n+Expression$create <- function(function_name,\n+                              ...,\n+                              args = list(...),\n+                              options = empty_named_list()) {\n+  assert_that(is.string(function_name))\n+  dataset___expr__call(function_name, args, options)\n+}\n Expression$field_ref <- function(name) {\n-  assert_is(name, \"character\")\n-  assert_that(length(name) == 1)\n+  assert_that(is.string(name))\n   dataset___expr__field_ref(name)\n }\n Expression$scalar <- function(x) {\n   dataset___expr__scalar(Scalar$create(x))\n }\n-Expression$compare <- function(OP, e1, e2) {\n-  comp_func <- comparison_function_map[[OP]]\n-  if (is.null(comp_func)) {\n-    stop(OP, \" is not a supported comparison function\", call. = FALSE)\n-  }\n-  comp_func(e1, e2)\n-}\n \n-comparison_function_map <- list(\n-  \"==\" = dataset___expr__equal,\n-  \"!=\" = dataset___expr__not_equal,\n-  \">\" = dataset___expr__greater,\n-  \">=\" = dataset___expr__greater_equal,\n-  \"<\" = dataset___expr__less,\n-  \"<=\" = dataset___expr__less_equal\n-)\n-Expression$in_ <- function(x, set) {\n-  dataset___expr__in(x, Array$create(set))\n-}\n-Expression$and <- function(e1, e2) {\n-  dataset___expr__and(e1, e2)\n-}\n-Expression$or <- function(e1, e2) {\n-  dataset___expr__or(e1, e2)\n-}\n-Expression$not <- function(e1) {\n-  dataset___expr__not(e1)\n-}\n-Expression$is_valid <- function(e1) {\n-  dataset___expr__is_valid(e1)\n+build_dataset_expression <- function(.Generic, e1, e2, ...) {\n+  if (.Generic %in% names(.unary_function_map)) {\n+    expr <- Expression$create(.unary_function_map[[.Generic]], e1)\n+  } else if (.Generic == \"%in%\") {\n+    # Special-case %in%, which is different from the Array function name\n+    expr <- Expression$create(\"is_in\", e1,\n+      options = list(\n+        value_set = Array$create(e2),\n+        skip_nulls = TRUE\n+      )\n+    )\n+  } else {\n+    if (!inherits(e1, \"Expression\")) {\n+      e1 <- Expression$scalar(e1)\n+    }\n+    if (!inherits(e2, \"Expression\")) {\n+      e2 <- Expression$scalar(e2)\n+    }\n+\n+    # In Arrow, \"divide\" is one function, which does integer division on\n+    # integer inputs and floating-point division on floats\n+    if (.Generic == \"/\") {\n+      # TODO: omg so many ways it's wrong to assume these types\n+      e1 <- e1$cast(float64())\n+      e2 <- e2$cast(float64())\n+    } else if (.Generic == \"%/%\") {\n+      # In R, integer division works like floor(float division)\n+      out <- build_dataset_expression(\"/\", e1, e2)\n+      return(out$cast(int32(), allow_float_truncate = TRUE))\n+    } else if (.Generic == \"%%\") {\n+      # TODO: need to do something with types to ensure that e2 is compatible\n\nReview comment:\n       Is this TODO valid?\n\n##########\nFile path: r/R/expression.R\n##########\n@@ -59,6 +59,44 @@ build_array_expression <- function(.Generic, e1, e2, ...) {\n   } else {\n     e1 <- .wrap_arrow(e1, .Generic, e2$type)\n     e2 <- .wrap_arrow(e2, .Generic, e1$type)\n+\n+    # In Arrow, \"divide\" is one function, which does integer division on\n+    # integer inputs and floating-point division on floats\n+    if (.Generic == \"/\") {\n+      # TODO: omg so many ways it's wrong to assume these types\n+      e1 <- e1$cast(float64())\n+      e2 <- e2$cast(float64())\n+    } else if (.Generic == \"%/%\") {\n+      return(array_expression(\"cast\", array_expression(.binary_function_map[[.Generic]], e1, e2, ...), options = list(to_type = int32(), allow_float_truncate = TRUE)))\n+    } else if (.Generic == \"%%\") {\n+      # {e1 - e2 * ( e1 %/% e2 )}\n+      # TODO: there has to be a way to use the form ^^^ instead of this.\n+      # with return(e1 - e2 * (e1 %/% e2)) we get:\n+      # \"cannot add bindings to a locked environment\"\n+      out <- array_expression(\n+        \"subtract_checked\", e1, array_expression(\n+          \"multiply_checked\", e2, array_expression(\n+            # this outer cast is to ensure that the result of this and the\n+            # result of multiply are the same\n+            \"cast\",\n+            array_expression(\n+              \"cast\",\n+              array_expression(.binary_function_map[[.Generic]], e1, e2, ...),\n+              options = list(to_type = int32(), allow_float_truncate = TRUE)\n+            ),\n+            options = list(to_type = e2$type, allow_float_truncate = TRUE)\n+          )\n+        )\n+      )\n+      return(out)\n+    }\n+\n+    # hack to use subtract instead of subtract_checked for timestamps\n\nReview comment:\n       Why only subtract?\r\n   \r\n   And technically this could also be `else if` from above\n\n##########\nFile path: r/R/expression.R\n##########\n@@ -59,6 +59,44 @@ build_array_expression <- function(.Generic, e1, e2, ...) {\n   } else {\n     e1 <- .wrap_arrow(e1, .Generic, e2$type)\n     e2 <- .wrap_arrow(e2, .Generic, e1$type)\n+\n+    # In Arrow, \"divide\" is one function, which does integer division on\n+    # integer inputs and floating-point division on floats\n+    if (.Generic == \"/\") {\n+      # TODO: omg so many ways it's wrong to assume these types\n+      e1 <- e1$cast(float64())\n+      e2 <- e2$cast(float64())\n+    } else if (.Generic == \"%/%\") {\n+      return(array_expression(\"cast\", array_expression(.binary_function_map[[.Generic]], e1, e2, ...), options = list(to_type = int32(), allow_float_truncate = TRUE)))\n+    } else if (.Generic == \"%%\") {\n+      # {e1 - e2 * ( e1 %/% e2 )}\n+      # TODO: there has to be a way to use the form ^^^ instead of this.\n+      # with return(e1 - e2 * (e1 %/% e2)) we get:\n+      # \"cannot add bindings to a locked environment\"\n\nReview comment:\n       I'll pull and see if I can figure out why this is problematic, though maybe it's solved by removing `$cast()` above\n\n##########\nFile path: r/tests/testthat/test-dplyr.R\n##########\n@@ -133,6 +139,76 @@ test_that(\"filtering with expression\", {\n   )\n })\n \n+test_that(\"filtering with arithmetic\", {\n+  expect_dplyr_equal(\n+    input %>%\n+      filter(dbl + 1 > 3) %>%\n+      select(string = chr, int, dbl) %>%\n+      collect(),\n+    tbl\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      filter(dbl / 2 > 3) %>%\n+      select(string = chr, int, dbl) %>%\n+      collect(),\n+    tbl\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      filter(dbl / 2L > 3) %>%\n+      select(string = chr, int, dbl) %>%\n+      collect(),\n+    tbl\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      filter(int / 2 > 3) %>%\n+      select(string = chr, int, dbl) %>%\n+      collect(),\n+    tbl\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      filter(int / 2L > 3) %>%\n+      select(string = chr, int, dbl) %>%\n+      collect(),\n+    tbl\n+  )\n+\n+  skip(\"autocasting should happen in compute kernels; R workaround fails on this ARROW-11078\")\n\nReview comment:\n       Does this fail for the same reason that the comparisons below fail? `int / 2L` is an integer but the `array_expression` doesn't know the resulting type, so it can't cast `3` to it?\r\n   \r\n   How does it fail? Gracefully or not?\r\n   \r\n   We could work around this either by tracking/guessing the resulting type and sticking it in the array_expression object or by deferring the autocasting until the expressions are evaluated (so we'll know the type of `int > 2L` when we evaluate `that > 3`), but it's probably not worth it now. Maybe make a jira for us to come back to?\n\n##########\nFile path: r/tests/testthat/test-dataset.R\n##########\n@@ -494,12 +494,104 @@ test_that(\"filter() on date32 columns\", {\n   )\n })\n \n+test_that(\"filter() with expressions\", {\n+  ds <- open_dataset(dataset_dir, partitioning = schema(part = uint8()))\n+  expect_is(ds$format, \"ParquetFileFormat\")\n+  expect_is(ds$filesystem, \"LocalFileSystem\")\n+  expect_is(ds, \"Dataset\")\n+  expect_equivalent(\n+    ds %>%\n+      select(chr, dbl) %>%\n+      filter(dbl * 2 > 14 & dbl - 50 < 3L) %>%\n+      collect() %>%\n+      arrange(dbl),\n+    rbind(\n+      df1[8:10, c(\"chr\", \"dbl\")],\n+      df2[1:2, c(\"chr\", \"dbl\")]\n+    )\n+  )\n+\n+  # check division's special casing.\n+  expect_equivalent(\n+    ds %>%\n+      select(chr, dbl) %>%\n+      filter(dbl / 2 > 3.5 & dbl < 53) %>%\n+      collect() %>%\n+      arrange(dbl),\n+    rbind(\n+      df1[8:10, c(\"chr\", \"dbl\")],\n+      df2[1:2, c(\"chr\", \"dbl\")]\n+    )\n+  )\n+\n+  expect_equivalent(\n+    ds %>%\n+      select(chr, dbl, int) %>%\n+      filter(int %/% 2L > 3 & dbl < 53) %>%\n+      collect() %>%\n+      arrange(dbl),\n+    rbind(\n+      df1[8:10, c(\"chr\", \"dbl\", \"int\")],\n+      df2[1:2, c(\"chr\", \"dbl\", \"int\")]\n+    )\n+  )\n+\n+  expect_equivalent(\n+    ds %>%\n+      select(chr, dbl, int) %>%\n+      filter(int %/% 2 > 3 & dbl < 53) %>%\n+      collect() %>%\n+      arrange(dbl),\n+    rbind(\n+      df1[8:10, c(\"chr\", \"dbl\", \"int\")],\n+      df2[1:2, c(\"chr\", \"dbl\", \"int\")]\n+    )\n+  )\n+\n+  expect_equivalent(\n+    ds %>%\n+      select(chr, dbl, int) %>%\n+      filter(int %% 2L > 0 & dbl < 53) %>%\n+      collect() %>%\n+      arrange(dbl),\n+    rbind(\n+      df1[c(1, 3, 5, 7, 9), c(\"chr\", \"dbl\", \"int\")],\n+      df2[1, c(\"chr\", \"dbl\", \"int\")]\n+    )\n+  )\n+\n+  skip(\"autocasting should happen in compute kernels; R workaround fails on this ARROW-11078\")\n\nReview comment:\n       But datasets do have autocasting, so this should work, and if it doesn't, sounds like a different JIRA\n\n##########\nFile path: r/tests/testthat/test-compute-arith.R\n##########\n@@ -0,0 +1,85 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+test_that(\"Addition\", {\n+  a <- Array$create(c(1:4, NA_integer_))\n+  expect_type_equal(a, int32())\n+  expect_type_equal(a + 4, int32())\n+  expect_equal(a + 4, Array$create(c(5:8, NA_integer_)))\n+  expect_identical(as.vector(a + 4), c(5:8, NA_integer_))\n+  expect_equal(a + 4L, Array$create(c(5:8, NA_integer_)))\n+  expect_vector(a + 4L, c(5:8, NA_integer_))\n+  expect_equal(a + NA_integer_, Array$create(rep(NA_integer_, 5)))\n+\n+  # overflow errors \u2014 this is slightly different from R's `NA` coercion when\n+  # overflowing, but better than the alternative of silently restarting\n+  casted <- a$cast(int8())\n+  expect_error(casted + 257)\n+\n+  skip(\"autocasting should happen in compute kernels; R workaround fails on this ARROW-11078\")\n+  expect_type_equal(a + 4.1, float64())\n+  expect_equal(a + 4.1, Array$create(c(5.1, 6.1, 7.1, 8.1, NA_real_)))\n+})\n+\n+test_that(\"Subtraction\", {\n+  a <- Array$create(c(1:4, NA_integer_))\n+  expect_equal(a - 3, Array$create(c(-2:1, NA_integer_)))\n+})\n+\n+test_that(\"Multiplication\", {\n+  a <- Array$create(c(1:4, NA_integer_))\n+  expect_equal(a * 2, Array$create(c(1:4 * 2L, NA_integer_)))\n+})\n+\n+test_that(\"Division\", {\n+  a <- Array$create(c(1:4, NA_integer_))\n+  expect_equal(a / 2, Array$create(c(1:4 / 2, NA_real_)))\n+  expect_equal(a %/% 2, Array$create(c(0L, 1L, 1L, 2L, NA_integer_)))\n+  expect_equal(a / 2 / 2, Array$create(c(1:4 / 2 / 2, NA_real_)))\n+  expect_equal(a %/% 2 %/% 2, Array$create(c(0L, 0L, 0L, 1L, NA_integer_)))\n+\n+  b <- a$cast(float64())\n+  expect_equal(b / 2, Array$create(c(1:4 / 2, NA_real_)))\n+  expect_equal(b %/% 2, Array$create(c(0L, 1L, 1L, 2L, NA_integer_)))\n+\n+  # the behavior of %/% matches R's (i.e. the integer of the quotient, not\n+  # simply dividing two integers)\n+  expect_equal(b / 2.2, Array$create(c(1:4 / 2.2, NA_real_)))\n+  # c(1:4) %/% 2.2 != c(1:4) %/% as.integer(2.2)\n+  # c(1:4) %/% 2.2             == c(0L, 0L, 1L, 1L)\n+  # c(1:4) %/% as.integer(2.2) == c(0L, 1L, 1L, 2L)\n+  expect_equal(b %/% 2.2, Array$create(c(0L, 0L, 1L, 1L, NA_integer_)))\n+\n+  expect_equal(a %% 2, Array$create(c(1L, 0L, 1L, 0L, NA_integer_)))\n+\n+  expect_equal(b %% 2, Array$create(c(1:4 %% 2, NA_real_)))\n+})\n+\n+test_that(\"Dates casting\", {\n+  a <- Array$create(c(Sys.Date() + 1:4, NA_integer_))\n+\n+  skip(\"autocasting should happen in compute kernels; R workaround fails on this ARROW-11078\")\n+  expect_equal(a + 2, Array$create(c((Sys.Date() + 1:4 ) + 2), NA_integer_))\n+})\n+\n+test_that(\"Datetimes\", {\n+  a <- Array$create(c(Sys.time() + 1:4, NA_integer_))\n+  b <- Scalar$create(Sys.time())\n+  result <- a - b\n+  expect_is(result$type, \"DataType\")\n+  expect_identical(result$type$ToString(), \"duration[us]\")\n\nReview comment:\n       (1) I don't think this is right. timestamp + integer = timestamp, but because integer is cast to timestamp, you get duration. \r\n   (1b) Maybe you could support that by casting the integer to duration (same units as the timestamp), but this is a bunch of stuff that should probably get handled in C++\r\n   (2) According to https://arrow.apache.org/docs/r/articles/arrow.html#arrow-to-r, we don't support converting duration types to R. \r\n   \r\n   Given this, I think arithmetic with dates/times/timestamps should be punted to its own JIRA.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-30T19:08:39.592+0000",
                    "updated": "2020-12-30T19:08:39.592+0000",
                    "started": "2020-12-30T19:08:39.592+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529598",
                    "issueId": "13312511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312511/worklog/529830",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on a change in pull request #8947:\nURL: https://github.com/apache/arrow/pull/8947#discussion_r550505455\n\n\n\n##########\nFile path: r/tests/testthat/test-compute-arith.R\n##########\n@@ -0,0 +1,85 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+test_that(\"Addition\", {\n+  a <- Array$create(c(1:4, NA_integer_))\n+  expect_type_equal(a, int32())\n+  expect_type_equal(a + 4, int32())\n+  expect_equal(a + 4, Array$create(c(5:8, NA_integer_)))\n+  expect_identical(as.vector(a + 4), c(5:8, NA_integer_))\n+  expect_equal(a + 4L, Array$create(c(5:8, NA_integer_)))\n+  expect_vector(a + 4L, c(5:8, NA_integer_))\n+  expect_equal(a + NA_integer_, Array$create(rep(NA_integer_, 5)))\n+\n+  # overflow errors \u2014 this is slightly different from R's `NA` coercion when\n+  # overflowing, but better than the alternative of silently restarting\n+  casted <- a$cast(int8())\n+  expect_error(casted + 257)\n+\n+  skip(\"autocasting should happen in compute kernels; R workaround fails on this ARROW-11078\")\n+  expect_type_equal(a + 4.1, float64())\n+  expect_equal(a + 4.1, Array$create(c(5.1, 6.1, 7.1, 8.1, NA_real_)))\n+})\n+\n+test_that(\"Subtraction\", {\n+  a <- Array$create(c(1:4, NA_integer_))\n+  expect_equal(a - 3, Array$create(c(-2:1, NA_integer_)))\n+})\n+\n+test_that(\"Multiplication\", {\n+  a <- Array$create(c(1:4, NA_integer_))\n+  expect_equal(a * 2, Array$create(c(1:4 * 2L, NA_integer_)))\n+})\n+\n+test_that(\"Division\", {\n+  a <- Array$create(c(1:4, NA_integer_))\n+  expect_equal(a / 2, Array$create(c(1:4 / 2, NA_real_)))\n+  expect_equal(a %/% 2, Array$create(c(0L, 1L, 1L, 2L, NA_integer_)))\n+  expect_equal(a / 2 / 2, Array$create(c(1:4 / 2 / 2, NA_real_)))\n+  expect_equal(a %/% 2 %/% 2, Array$create(c(0L, 0L, 0L, 1L, NA_integer_)))\n+\n+  b <- a$cast(float64())\n+  expect_equal(b / 2, Array$create(c(1:4 / 2, NA_real_)))\n+  expect_equal(b %/% 2, Array$create(c(0L, 1L, 1L, 2L, NA_integer_)))\n+\n+  # the behavior of %/% matches R's (i.e. the integer of the quotient, not\n+  # simply dividing two integers)\n+  expect_equal(b / 2.2, Array$create(c(1:4 / 2.2, NA_real_)))\n+  # c(1:4) %/% 2.2 != c(1:4) %/% as.integer(2.2)\n+  # c(1:4) %/% 2.2             == c(0L, 0L, 1L, 1L)\n+  # c(1:4) %/% as.integer(2.2) == c(0L, 1L, 1L, 2L)\n+  expect_equal(b %/% 2.2, Array$create(c(0L, 0L, 1L, 1L, NA_integer_)))\n+\n+  expect_equal(a %% 2, Array$create(c(1L, 0L, 1L, 0L, NA_integer_)))\n+\n+  expect_equal(b %% 2, Array$create(c(1:4 %% 2, NA_real_)))\n+})\n+\n+test_that(\"Dates casting\", {\n+  a <- Array$create(c(Sys.Date() + 1:4, NA_integer_))\n+\n+  skip(\"autocasting should happen in compute kernels; R workaround fails on this ARROW-11078\")\n+  expect_equal(a + 2, Array$create(c((Sys.Date() + 1:4 ) + 2), NA_integer_))\n+})\n+\n+test_that(\"Datetimes\", {\n+  a <- Array$create(c(Sys.time() + 1:4, NA_integer_))\n+  b <- Scalar$create(Sys.time())\n+  result <- a - b\n+  expect_is(result$type, \"DataType\")\n+  expect_identical(result$type$ToString(), \"duration[us]\")\n\nReview comment:\n       Ok, I've made ARROW-11090 \u2014 I'm honestly not sure these tests are even worth keeping + skipping with that since we will almost certainly make better support for durations (and other time-related types that don't have as much support) arrow > R at that point.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-31T15:31:33.151+0000",
                    "updated": "2020-12-31T15:31:33.151+0000",
                    "started": "2020-12-31T15:31:33.151+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529830",
                    "issueId": "13312511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312511/worklog/532173",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson opened a new pull request #9117:\nURL: https://github.com/apache/arrow/pull/9117\n\n\n   Replaces #8947\r\n   \r\n   @jonkeane \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-06T22:39:26.448+0000",
                    "updated": "2021-01-06T22:39:26.448+0000",
                    "started": "2021-01-06T22:39:26.448+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "532173",
                    "issueId": "13312511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312511/worklog/532179",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #8947:\nURL: https://github.com/apache/arrow/pull/8947#issuecomment-755762668\n\n\n   Rebase wasn't clean so I opened #9117 with the commits cherry-picked.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-06T22:45:19.659+0000",
                    "updated": "2021-01-06T22:45:19.659+0000",
                    "started": "2021-01-06T22:45:19.658+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "532179",
                    "issueId": "13312511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312511/worklog/532180",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson closed pull request #8947:\nURL: https://github.com/apache/arrow/pull/8947\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-06T22:45:22.866+0000",
                    "updated": "2021-01-06T22:45:22.866+0000",
                    "started": "2021-01-06T22:45:22.865+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "532180",
                    "issueId": "13312511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312511/worklog/532215",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9117:\nURL: https://github.com/apache/arrow/pull/9117#issuecomment-755810799\n\n\n   https://issues.apache.org/jira/browse/ARROW-9187\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-07T00:48:40.068+0000",
                    "updated": "2021-01-07T00:48:40.068+0000",
                    "started": "2021-01-07T00:48:40.067+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "532215",
                    "issueId": "13312511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312511/worklog/532597",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #9117:\nURL: https://github.com/apache/arrow/pull/9117#issuecomment-756223046\n\n\n   Passing windows builds on my fork: https://github.com/nealrichardson/arrow/actions/runs/467337342\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-07T16:27:07.687+0000",
                    "updated": "2021-01-07T16:27:07.687+0000",
                    "started": "2021-01-07T16:27:07.687+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "532597",
                    "issueId": "13312511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312511/worklog/532602",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson closed pull request #9117:\nURL: https://github.com/apache/arrow/pull/9117\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-07T16:30:22.610+0000",
                    "updated": "2021-01-07T16:30:22.610+0000",
                    "started": "2021-01-07T16:30:22.610+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "532602",
                    "issueId": "13312511"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 9600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@72aad891[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@379d0dbe[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3f307a83[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@601f6026[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4f3e1372[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6b4f687[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a6c60b0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@21e9398b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1e731b47[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3f52d6c0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@66e2587a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@eaf004c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9600,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jan 07 16:30:16 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-01-07T16:30:16.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9187/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-06-19T16:02:03.000+0000",
        "updated": "2021-01-07T16:30:23.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Add bindings for arithmetic kernels",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312511/comment/17260622",
                    "id": "17260622",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 9117\n[https://github.com/apache/arrow/pull/9117]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-01-07T16:30:16.477+0000",
                    "updated": "2021-01-07T16:30:16.477+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0g17s:",
        "customfield_12314139": null
    }
}