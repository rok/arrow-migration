{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13100662",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662",
    "key": "ARROW-1491",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12514163",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12514163",
                "type": {
                    "id": "12310060",
                    "name": "Container",
                    "inward": "Is contained by",
                    "outward": "contains",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310060"
                },
                "inwardIssue": {
                    "id": "13100663",
                    "key": "ARROW-1492",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100663",
                    "fields": {
                        "summary": "[C++] Type casting function kernel suite",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=Licht-T",
            "name": "Licht-T",
            "key": "licht-t",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=licht-t&avatarId=33236",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=licht-t&avatarId=33236",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=licht-t&avatarId=33236",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=licht-t&avatarId=33236"
            },
            "displayName": "Licht Takeuchi",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1491/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 17,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/worklog/130224",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2362: ARROW-1491: [C++] Add casting from strings to numbers and booleans\nURL: https://github.com/apache/arrow/pull/2362\n \n \n   The implementation for numbers uses the C standard strto* functions.\r\n   This makes casting a bit lenient (it will accept whitespace), and unfortunately relies on the current C locale.\r\n   \r\n   This is a rewrite of https://github.com/apache/arrow/pull/1387\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-02T12:12:01.816+0000",
                    "updated": "2018-08-02T12:12:01.816+0000",
                    "started": "2018-08-02T12:12:01.815+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "130224",
                    "issueId": "13100662"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/worklog/130248",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2362: ARROW-1491: [C++] Add casting from strings to numbers and booleans\nURL: https://github.com/apache/arrow/pull/2362#issuecomment-409935107\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=h1) Report\n   > Merging [#2362](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/d48dce2cfebdbd044a8260d0a77f5fe3d89a4a2d?src=pr&el=desc) will **increase** coverage by `2.4%`.\n   > The diff coverage is `100%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2362/graphs/tree.svg?height=150&width=650&token=LpTCFbqVT1&src=pr)](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##           master    #2362     +/-   ##\n   =========================================\n   + Coverage   84.48%   86.89%   +2.4%     \n   =========================================\n     Files         293      237     -56     \n     Lines       45220    42606   -2614     \n   =========================================\n   - Hits        38205    37023   -1182     \n   + Misses       6984     5583   -1401     \n   + Partials       31        0     -31\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/compute/compute-test.cc](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2NvbXB1dGUtdGVzdC5jYw==) | `99.55% <100%> (+0.05%)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/cast.cc](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvY2FzdC5jYw==) | `91.54% <100%> (+1.67%)` | :arrow_up: |\n   | [rust/src/bitmap.rs](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-cnVzdC9zcmMvYml0bWFwLnJz) | | |\n   | [go/arrow/math/float64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X3NzZTRfYW1kNjQuZ28=) | | |\n   | [go/arrow/array/data.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvZGF0YS5nbw==) | | |\n   | [go/arrow/memory/buffer.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L2J1ZmZlci5nbw==) | | |\n   | [go/arrow/array/numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpYy5nZW4uZ28=) | | |\n   | [go/arrow/memory/checked\\_allocator.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L2NoZWNrZWRfYWxsb2NhdG9yLmdv) | | |\n   | [go/arrow/math/int64.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NC5nbw==) | | |\n   | [go/arrow/memory/go\\_allocator.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L2dvX2FsbG9jYXRvci5nbw==) | | |\n   | ... and [48 more](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=footer). Last update [d48dce2...433f513](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-02T13:56:50.591+0000",
                    "updated": "2018-08-02T13:56:50.591+0000",
                    "started": "2018-08-02T13:56:50.590+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "130248",
                    "issueId": "13100662"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/worklog/130268",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2362: ARROW-1491: [C++] Add casting from strings to numbers and booleans\nURL: https://github.com/apache/arrow/pull/2362#issuecomment-409935107\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=h1) Report\n   > Merging [#2362](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/d48dce2cfebdbd044a8260d0a77f5fe3d89a4a2d?src=pr&el=desc) will **increase** coverage by `2.4%`.\n   > The diff coverage is `100%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2362/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##           master    #2362     +/-   ##\n   =========================================\n   + Coverage   84.48%   86.89%   +2.4%     \n   =========================================\n     Files         293      237     -56     \n     Lines       45220    42606   -2614     \n   =========================================\n   - Hits        38205    37023   -1182     \n   + Misses       6984     5583   -1401     \n   + Partials       31        0     -31\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/compute/compute-test.cc](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2NvbXB1dGUtdGVzdC5jYw==) | `99.55% <100%> (+0.05%)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/cast.cc](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvY2FzdC5jYw==) | `91.54% <100%> (+1.67%)` | :arrow_up: |\n   | [go/arrow/memory/buffer.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L2J1ZmZlci5nbw==) | | |\n   | [rust/src/datatypes.rs](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-cnVzdC9zcmMvZGF0YXR5cGVzLnJz) | | |\n   | [go/arrow/array/booleanbuilder.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYm9vbGVhbmJ1aWxkZXIuZ28=) | | |\n   | [go/arrow/math/uint64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfc3NlNF9hbWQ2NC5nbw==) | | |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [go/arrow/math/math\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9tYXRoX2FtZDY0Lmdv) | | |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | | |\n   | [go/arrow/array/builder.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVpbGRlci5nbw==) | | |\n   | ... and [48 more](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=footer). Last update [d48dce2...79cc17a](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-02T14:44:17.209+0000",
                    "updated": "2018-08-02T14:44:17.209+0000",
                    "started": "2018-08-02T14:44:17.208+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "130268",
                    "issueId": "13100662"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/worklog/130536",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cpcloud commented on a change in pull request #2362: ARROW-1491: [C++] Add casting from strings to numbers and booleans\nURL: https://github.com/apache/arrow/pull/2362#discussion_r207317126\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -727,6 +729,178 @@ struct CastFunctor<T, DictionaryType,\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// String to Number\n+\n+// Cast a string to a number.  Returns true on success, false on error.\n+// We rely on C++ istringstream for locale-independent parsing, which might\n+// not be the fastest option.\n+\n+template <typename T>\n+typename std::enable_if<std::is_floating_point<T>::value,\n+                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n+                                                              T* out) {\n+  ibuf >> *out;\n+  return !ibuf.fail() && ibuf.eof();\n+}\n+\n+// For integers, not all integer widths are handled by the C++ stdlib, so\n+// we check for limits outselves.\n+\n+template <typename T>\n+typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value,\n+                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n+                                                              T* out) {\n+  static constexpr bool need_long_long = sizeof(T) > sizeof(long);  // NOLINT\n+  static constexpr T min_value = std::numeric_limits<T>::min();\n+  static constexpr T max_value = std::numeric_limits<T>::max();\n+\n+  if (need_long_long) {\n+    long long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res < min_value || res > max_value) {\n+      return false;\n+    }\n+  } else {\n+    long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res < min_value || res > max_value) {\n+      return false;\n+    }\n+  }\n+  return !ibuf.fail() && ibuf.eof();\n+}\n+\n+template <typename T>\n+typename std::enable_if<std::is_integral<T>::value && std::is_unsigned<T>::value,\n+                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n+                                                              T* out) {\n+  static constexpr bool need_long_long = sizeof(T) > sizeof(unsigned long);  // NOLINT\n+  static constexpr T max_value = std::numeric_limits<T>::max();\n+\n+  if (need_long_long) {\n+    unsigned long long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res > max_value) {\n+      return false;\n+    }\n+  } else {\n+    unsigned long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res > max_value) {\n+      return false;\n+    }\n+  }\n+  return !ibuf.fail() && ibuf.eof();\n+}\n+\n+template <typename O>\n+struct CastFunctor<O, StringType, typename std::enable_if<is_number<O>::value>::type> {\n+  void operator()(FunctionContext* ctx, const CastOptions& options,\n+                  const ArrayData& input, ArrayData* output) {\n+    using out_type = typename O::c_type;\n+\n+    StringArray input_array(input.Copy());\n+    auto out_data = GetMutableValues<out_type>(output, 1);\n+    errno = 0;\n+    // Instantiate the stringstream outside of the loop\n+    std::istringstream ibuf;\n+    ibuf.imbue(std::locale::classic());\n \n Review comment:\n   I sometimes wonder what the meeting was like that decided names like this.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-02T17:52:23.470+0000",
                    "updated": "2018-08-02T17:52:23.470+0000",
                    "started": "2018-08-02T17:52:23.469+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "130536",
                    "issueId": "13100662"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/worklog/130538",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2362: ARROW-1491: [C++] Add casting from strings to numbers and booleans\nURL: https://github.com/apache/arrow/pull/2362#discussion_r207317405\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -727,6 +729,178 @@ struct CastFunctor<T, DictionaryType,\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// String to Number\n+\n+// Cast a string to a number.  Returns true on success, false on error.\n+// We rely on C++ istringstream for locale-independent parsing, which might\n+// not be the fastest option.\n+\n+template <typename T>\n+typename std::enable_if<std::is_floating_point<T>::value,\n+                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n+                                                              T* out) {\n+  ibuf >> *out;\n+  return !ibuf.fail() && ibuf.eof();\n+}\n+\n+// For integers, not all integer widths are handled by the C++ stdlib, so\n+// we check for limits outselves.\n+\n+template <typename T>\n+typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value,\n+                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n+                                                              T* out) {\n+  static constexpr bool need_long_long = sizeof(T) > sizeof(long);  // NOLINT\n+  static constexpr T min_value = std::numeric_limits<T>::min();\n+  static constexpr T max_value = std::numeric_limits<T>::max();\n+\n+  if (need_long_long) {\n+    long long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res < min_value || res > max_value) {\n+      return false;\n+    }\n+  } else {\n+    long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res < min_value || res > max_value) {\n+      return false;\n+    }\n+  }\n+  return !ibuf.fail() && ibuf.eof();\n+}\n+\n+template <typename T>\n+typename std::enable_if<std::is_integral<T>::value && std::is_unsigned<T>::value,\n+                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n+                                                              T* out) {\n+  static constexpr bool need_long_long = sizeof(T) > sizeof(unsigned long);  // NOLINT\n+  static constexpr T max_value = std::numeric_limits<T>::max();\n+\n+  if (need_long_long) {\n+    unsigned long long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res > max_value) {\n+      return false;\n+    }\n+  } else {\n+    unsigned long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res > max_value) {\n+      return false;\n+    }\n+  }\n+  return !ibuf.fail() && ibuf.eof();\n+}\n+\n+template <typename O>\n+struct CastFunctor<O, StringType, typename std::enable_if<is_number<O>::value>::type> {\n+  void operator()(FunctionContext* ctx, const CastOptions& options,\n+                  const ArrayData& input, ArrayData* output) {\n+    using out_type = typename O::c_type;\n+\n+    StringArray input_array(input.Copy());\n+    auto out_data = GetMutableValues<out_type>(output, 1);\n+    errno = 0;\n+    // Instantiate the stringstream outside of the loop\n+    std::istringstream ibuf;\n+    ibuf.imbue(std::locale::classic());\n \n Review comment:\n   I had the same thought :-)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-02T17:53:10.923+0000",
                    "updated": "2018-08-02T17:53:10.923+0000",
                    "started": "2018-08-02T17:53:10.922+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "130538",
                    "issueId": "13100662"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/worklog/130539",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cpcloud commented on a change in pull request #2362: ARROW-1491: [C++] Add casting from strings to numbers and booleans\nURL: https://github.com/apache/arrow/pull/2362#discussion_r207317955\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -727,6 +729,178 @@ struct CastFunctor<T, DictionaryType,\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// String to Number\n+\n+// Cast a string to a number.  Returns true on success, false on error.\n+// We rely on C++ istringstream for locale-independent parsing, which might\n+// not be the fastest option.\n+\n+template <typename T>\n+typename std::enable_if<std::is_floating_point<T>::value,\n+                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n+                                                              T* out) {\n+  ibuf >> *out;\n+  return !ibuf.fail() && ibuf.eof();\n+}\n+\n+// For integers, not all integer widths are handled by the C++ stdlib, so\n+// we check for limits outselves.\n+\n+template <typename T>\n+typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value,\n+                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n+                                                              T* out) {\n+  static constexpr bool need_long_long = sizeof(T) > sizeof(long);  // NOLINT\n+  static constexpr T min_value = std::numeric_limits<T>::min();\n+  static constexpr T max_value = std::numeric_limits<T>::max();\n+\n+  if (need_long_long) {\n+    long long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res < min_value || res > max_value) {\n+      return false;\n+    }\n+  } else {\n+    long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res < min_value || res > max_value) {\n+      return false;\n+    }\n+  }\n+  return !ibuf.fail() && ibuf.eof();\n+}\n+\n+template <typename T>\n+typename std::enable_if<std::is_integral<T>::value && std::is_unsigned<T>::value,\n+                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n+                                                              T* out) {\n+  static constexpr bool need_long_long = sizeof(T) > sizeof(unsigned long);  // NOLINT\n+  static constexpr T max_value = std::numeric_limits<T>::max();\n+\n+  if (need_long_long) {\n+    unsigned long long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res > max_value) {\n+      return false;\n+    }\n+  } else {\n+    unsigned long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res > max_value) {\n+      return false;\n+    }\n+  }\n+  return !ibuf.fail() && ibuf.eof();\n+}\n+\n+template <typename O>\n+struct CastFunctor<O, StringType, typename std::enable_if<is_number<O>::value>::type> {\n+  void operator()(FunctionContext* ctx, const CastOptions& options,\n+                  const ArrayData& input, ArrayData* output) {\n+    using out_type = typename O::c_type;\n+\n+    StringArray input_array(input.Copy());\n+    auto out_data = GetMutableValues<out_type>(output, 1);\n+    errno = 0;\n+    // Instantiate the stringstream outside of the loop\n+    std::istringstream ibuf;\n+    ibuf.imbue(std::locale::classic());\n+\n+    for (int64_t i = 0; i < input.length; ++i, ++out_data) {\n+      if (input_array.IsNull(i)) {\n+        continue;\n+      }\n+      auto str = input_array.GetString(i);\n+      ibuf.clear();\n+      ibuf.str(str);\n+      if (!CastStringToNumber(ibuf, out_data)) {\n+        std::stringstream ss;\n+        ss << \"Failed to cast String '\" << str << \"' into \" << output->type->ToString();\n+        ctx->SetStatus(Status(StatusCode::Invalid, ss.str()));\n+        return;\n+      }\n+    }\n+  }\n+};\n+\n+// ----------------------------------------------------------------------\n+// String to Boolean\n+\n+// Helper function to cast a C string to a boolean.  Returns true on success,\n+// false on error.\n+\n+static bool CastStringtoBoolean(const char* s, size_t length, bool* out) {\n+  if (length == 1) {\n+    // \"0\" or \"1\"?\n+    if (s[0] == '0') {\n+      *out = false;\n+      return true;\n+    }\n+    if (s[0] == '1') {\n+      *out = true;\n+      return true;\n+    }\n+    return false;\n+  }\n+  if (length == 4) {\n+    // \"true\"?\n+    *out = true;\n+    return ((s[0] == 't' || s[0] == 'T') && (s[1] == 'r' || s[1] == 'R') &&\n+            (s[2] == 'u' || s[2] == 'U') && (s[3] == 'e' || s[3] == 'E'));\n \n Review comment:\n   Can we make this a little more readable by use `tolower`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-02T17:54:46.758+0000",
                    "updated": "2018-08-02T17:54:46.758+0000",
                    "started": "2018-08-02T17:54:46.757+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "130539",
                    "issueId": "13100662"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/worklog/130540",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2362: ARROW-1491: [C++] Add casting from strings to numbers and booleans\nURL: https://github.com/apache/arrow/pull/2362#discussion_r207318217\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -727,6 +729,178 @@ struct CastFunctor<T, DictionaryType,\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// String to Number\n+\n+// Cast a string to a number.  Returns true on success, false on error.\n+// We rely on C++ istringstream for locale-independent parsing, which might\n+// not be the fastest option.\n+\n+template <typename T>\n+typename std::enable_if<std::is_floating_point<T>::value,\n+                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n+                                                              T* out) {\n+  ibuf >> *out;\n+  return !ibuf.fail() && ibuf.eof();\n+}\n+\n+// For integers, not all integer widths are handled by the C++ stdlib, so\n+// we check for limits outselves.\n+\n+template <typename T>\n+typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value,\n+                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n+                                                              T* out) {\n+  static constexpr bool need_long_long = sizeof(T) > sizeof(long);  // NOLINT\n+  static constexpr T min_value = std::numeric_limits<T>::min();\n+  static constexpr T max_value = std::numeric_limits<T>::max();\n+\n+  if (need_long_long) {\n+    long long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res < min_value || res > max_value) {\n+      return false;\n+    }\n+  } else {\n+    long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res < min_value || res > max_value) {\n+      return false;\n+    }\n+  }\n+  return !ibuf.fail() && ibuf.eof();\n+}\n+\n+template <typename T>\n+typename std::enable_if<std::is_integral<T>::value && std::is_unsigned<T>::value,\n+                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n+                                                              T* out) {\n+  static constexpr bool need_long_long = sizeof(T) > sizeof(unsigned long);  // NOLINT\n+  static constexpr T max_value = std::numeric_limits<T>::max();\n+\n+  if (need_long_long) {\n+    unsigned long long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res > max_value) {\n+      return false;\n+    }\n+  } else {\n+    unsigned long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res > max_value) {\n+      return false;\n+    }\n+  }\n+  return !ibuf.fail() && ibuf.eof();\n+}\n+\n+template <typename O>\n+struct CastFunctor<O, StringType, typename std::enable_if<is_number<O>::value>::type> {\n+  void operator()(FunctionContext* ctx, const CastOptions& options,\n+                  const ArrayData& input, ArrayData* output) {\n+    using out_type = typename O::c_type;\n+\n+    StringArray input_array(input.Copy());\n+    auto out_data = GetMutableValues<out_type>(output, 1);\n+    errno = 0;\n+    // Instantiate the stringstream outside of the loop\n+    std::istringstream ibuf;\n+    ibuf.imbue(std::locale::classic());\n+\n+    for (int64_t i = 0; i < input.length; ++i, ++out_data) {\n+      if (input_array.IsNull(i)) {\n+        continue;\n+      }\n+      auto str = input_array.GetString(i);\n+      ibuf.clear();\n+      ibuf.str(str);\n+      if (!CastStringToNumber(ibuf, out_data)) {\n+        std::stringstream ss;\n+        ss << \"Failed to cast String '\" << str << \"' into \" << output->type->ToString();\n+        ctx->SetStatus(Status(StatusCode::Invalid, ss.str()));\n+        return;\n+      }\n+    }\n+  }\n+};\n+\n+// ----------------------------------------------------------------------\n+// String to Boolean\n+\n+// Helper function to cast a C string to a boolean.  Returns true on success,\n+// false on error.\n+\n+static bool CastStringtoBoolean(const char* s, size_t length, bool* out) {\n+  if (length == 1) {\n+    // \"0\" or \"1\"?\n+    if (s[0] == '0') {\n+      *out = false;\n+      return true;\n+    }\n+    if (s[0] == '1') {\n+      *out = true;\n+      return true;\n+    }\n+    return false;\n+  }\n+  if (length == 4) {\n+    // \"true\"?\n+    *out = true;\n+    return ((s[0] == 't' || s[0] == 'T') && (s[1] == 'r' || s[1] == 'R') &&\n+            (s[2] == 'u' || s[2] == 'U') && (s[3] == 'e' || s[3] == 'E'));\n \n Review comment:\n   `tolower` is locale-dependent.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-02T17:55:32.464+0000",
                    "updated": "2018-08-02T17:55:32.464+0000",
                    "started": "2018-08-02T17:55:32.463+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "130540",
                    "issueId": "13100662"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/worklog/131216",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2362: ARROW-1491: [C++] Add casting from strings to numbers and booleans\nURL: https://github.com/apache/arrow/pull/2362#discussion_r207719377\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -727,6 +729,178 @@ struct CastFunctor<T, DictionaryType,\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// String to Number\n+\n+// Cast a string to a number.  Returns true on success, false on error.\n+// We rely on C++ istringstream for locale-independent parsing, which might\n+// not be the fastest option.\n+\n+template <typename T>\n+typename std::enable_if<std::is_floating_point<T>::value,\n+                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n+                                                              T* out) {\n+  ibuf >> *out;\n+  return !ibuf.fail() && ibuf.eof();\n+}\n+\n+// For integers, not all integer widths are handled by the C++ stdlib, so\n+// we check for limits outselves.\n+\n+template <typename T>\n+typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value,\n+                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n+                                                              T* out) {\n+  static constexpr bool need_long_long = sizeof(T) > sizeof(long);  // NOLINT\n+  static constexpr T min_value = std::numeric_limits<T>::min();\n+  static constexpr T max_value = std::numeric_limits<T>::max();\n+\n+  if (need_long_long) {\n+    long long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res < min_value || res > max_value) {\n+      return false;\n+    }\n+  } else {\n+    long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res < min_value || res > max_value) {\n+      return false;\n+    }\n+  }\n+  return !ibuf.fail() && ibuf.eof();\n+}\n+\n+template <typename T>\n+typename std::enable_if<std::is_integral<T>::value && std::is_unsigned<T>::value,\n+                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n+                                                              T* out) {\n+  static constexpr bool need_long_long = sizeof(T) > sizeof(unsigned long);  // NOLINT\n+  static constexpr T max_value = std::numeric_limits<T>::max();\n+\n+  if (need_long_long) {\n+    unsigned long long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res > max_value) {\n+      return false;\n+    }\n+  } else {\n+    unsigned long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res > max_value) {\n+      return false;\n+    }\n+  }\n+  return !ibuf.fail() && ibuf.eof();\n+}\n+\n+template <typename O>\n+struct CastFunctor<O, StringType, typename std::enable_if<is_number<O>::value>::type> {\n \n Review comment:\n   You could use `enable_if_number<O>` here from arrow/type_traits.h\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-04T21:09:40.387+0000",
                    "updated": "2018-08-04T21:09:40.387+0000",
                    "started": "2018-08-04T21:09:40.386+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "131216",
                    "issueId": "13100662"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/worklog/131347",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2362: ARROW-1491: [C++] Add casting from strings to numbers and booleans\nURL: https://github.com/apache/arrow/pull/2362#discussion_r207829108\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -727,6 +729,178 @@ struct CastFunctor<T, DictionaryType,\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// String to Number\n+\n+// Cast a string to a number.  Returns true on success, false on error.\n+// We rely on C++ istringstream for locale-independent parsing, which might\n+// not be the fastest option.\n+\n+template <typename T>\n+typename std::enable_if<std::is_floating_point<T>::value,\n+                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n+                                                              T* out) {\n+  ibuf >> *out;\n+  return !ibuf.fail() && ibuf.eof();\n+}\n+\n+// For integers, not all integer widths are handled by the C++ stdlib, so\n+// we check for limits outselves.\n+\n+template <typename T>\n+typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value,\n+                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n+                                                              T* out) {\n+  static constexpr bool need_long_long = sizeof(T) > sizeof(long);  // NOLINT\n+  static constexpr T min_value = std::numeric_limits<T>::min();\n+  static constexpr T max_value = std::numeric_limits<T>::max();\n+\n+  if (need_long_long) {\n+    long long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res < min_value || res > max_value) {\n+      return false;\n+    }\n+  } else {\n+    long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res < min_value || res > max_value) {\n+      return false;\n+    }\n+  }\n+  return !ibuf.fail() && ibuf.eof();\n+}\n+\n+template <typename T>\n+typename std::enable_if<std::is_integral<T>::value && std::is_unsigned<T>::value,\n+                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n+                                                              T* out) {\n+  static constexpr bool need_long_long = sizeof(T) > sizeof(unsigned long);  // NOLINT\n+  static constexpr T max_value = std::numeric_limits<T>::max();\n+\n+  if (need_long_long) {\n+    unsigned long long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res > max_value) {\n+      return false;\n+    }\n+  } else {\n+    unsigned long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res > max_value) {\n+      return false;\n+    }\n+  }\n+  return !ibuf.fail() && ibuf.eof();\n+}\n+\n+template <typename O>\n+struct CastFunctor<O, StringType, typename std::enable_if<is_number<O>::value>::type> {\n \n Review comment:\n   Done.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-06T09:36:11.222+0000",
                    "updated": "2018-08-06T09:36:11.222+0000",
                    "started": "2018-08-06T09:36:11.221+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "131347",
                    "issueId": "13100662"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/worklog/131363",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2362: ARROW-1491: [C++] Add casting from strings to numbers and booleans\nURL: https://github.com/apache/arrow/pull/2362#issuecomment-410674269\n \n \n   Some weird failure occurred on the AppVeyor build that didn't occur on my AppVeyor account:\r\n   https://ci.appveyor.com/project/pitrou/arrow/build/1.0.570\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-06T11:13:45.631+0000",
                    "updated": "2018-08-06T11:13:45.631+0000",
                    "started": "2018-08-06T11:13:45.630+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "131363",
                    "issueId": "13100662"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/worklog/131370",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2362: ARROW-1491: [C++] Add casting from strings to numbers and booleans\nURL: https://github.com/apache/arrow/pull/2362#issuecomment-410685448\n \n \n   I want to make sure the AppVeyor failure was sporadic so I've triggered another build by pushing again.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-06T12:04:35.980+0000",
                    "updated": "2018-08-06T12:04:35.980+0000",
                    "started": "2018-08-06T12:04:35.979+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "131370",
                    "issueId": "13100662"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/worklog/131392",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2362: ARROW-1491: [C++] Add casting from strings to numbers and booleans\nURL: https://github.com/apache/arrow/pull/2362#issuecomment-409935107\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=h1) Report\n   > Merging [#2362](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/f8ba33d6711b2d995d7438ede0cd384c6bcb9494?src=pr&el=desc) will **increase** coverage by `2.4%`.\n   > The diff coverage is `100%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2362/graphs/tree.svg?src=pr&width=650&token=LpTCFbqVT1&height=150)](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##           master    #2362     +/-   ##\n   =========================================\n   + Coverage   84.49%   86.89%   +2.4%     \n   =========================================\n     Files         293      237     -56     \n     Lines       45329    42716   -2613     \n   =========================================\n   - Hits        38301    37120   -1181     \n   + Misses       6997     5596   -1401     \n   + Partials       31        0     -31\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/compute/compute-test.cc](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2NvbXB1dGUtdGVzdC5jYw==) | `99.55% <100%> (+0.05%)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/cast.cc](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvY2FzdC5jYw==) | `91.54% <100%> (+1.67%)` | :arrow_up: |\n   | [rust/src/buffer.rs](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-cnVzdC9zcmMvYnVmZmVyLnJz) | | |\n   | [go/arrow/internal/testing/tools/bits.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvdGVzdGluZy90b29scy9iaXRzLmdv) | | |\n   | [go/arrow/type\\_string.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdHlwZV9zdHJpbmcuZ28=) | | |\n   | [go/arrow/array/data.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvZGF0YS5nbw==) | | |\n   | [go/arrow/math/float64.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0Lmdv) | | |\n   | [go/arrow/memory/buffer.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L2J1ZmZlci5nbw==) | | |\n   | [go/arrow/array/util.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdXRpbC5nbw==) | | |\n   | [rust/src/bitmap.rs](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-cnVzdC9zcmMvYml0bWFwLnJz) | | |\n   | ... and [48 more](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=footer). Last update [f8ba33d...3297aa1](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-06T12:51:07.950+0000",
                    "updated": "2018-08-06T12:51:07.950+0000",
                    "started": "2018-08-06T12:51:07.949+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "131392",
                    "issueId": "13100662"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/worklog/131540",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2362: ARROW-1491: [C++] Add casting from strings to numbers and booleans\nURL: https://github.com/apache/arrow/pull/2362#issuecomment-410830184\n \n \n   rebased\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-06T19:45:08.843+0000",
                    "updated": "2018-08-06T19:45:08.843+0000",
                    "started": "2018-08-06T19:45:08.843+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "131540",
                    "issueId": "13100662"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/worklog/131612",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2362: ARROW-1491: [C++] Add casting from strings to numbers and booleans\nURL: https://github.com/apache/arrow/pull/2362#issuecomment-409935107\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=h1) Report\n   > Merging [#2362](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/edfbf84beb6c8e7ac7036b0164bb4a2c5411512e?src=pr&el=desc) will **increase** coverage by `2.21%`.\n   > The diff coverage is `100%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2362/graphs/tree.svg?token=LpTCFbqVT1&width=650&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2362      +/-   ##\n   ==========================================\n   + Coverage   84.66%   86.87%   +2.21%     \n   ==========================================\n     Files         293      237      -56     \n     Lines       45324    42705    -2619     \n   ==========================================\n   - Hits        38372    37099    -1273     \n   + Misses       6911     5606    -1305     \n   + Partials       41        0      -41\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/compute/kernels/cast.cc](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvY2FzdC5jYw==) | `91.54% <100%> (+1.67%)` | :arrow_up: |\n   | [cpp/src/arrow/compute/compute-test.cc](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2NvbXB1dGUtdGVzdC5jYw==) | `99.54% <100%> (+0.05%)` | :arrow_up: |\n   | [rust/src/buffer.rs](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-cnVzdC9zcmMvYnVmZmVyLnJz) | | |\n   | [rust/src/memory\\_pool.rs](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-cnVzdC9zcmMvbWVtb3J5X3Bvb2wucnM=) | | |\n   | [go/arrow/type\\_traits\\_boolean.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdHlwZV90cmFpdHNfYm9vbGVhbi5nbw==) | | |\n   | [go/arrow/math/int64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9zc2U0X2FtZDY0Lmdv) | | |\n   | [go/arrow/array/boolean.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYm9vbGVhbi5nbw==) | | |\n   | [go/arrow/math/int64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9hdngyX2FtZDY0Lmdv) | | |\n   | [go/arrow/math/int64.go](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NC5nbw==) | | |\n   | [rust/src/error.rs](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree#diff-cnVzdC9zcmMvZXJyb3IucnM=) | | |\n   | ... and [48 more](https://codecov.io/gh/apache/arrow/pull/2362/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=footer). Last update [edfbf84...c7db1b0](https://codecov.io/gh/apache/arrow/pull/2362?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-06T21:46:10.626+0000",
                    "updated": "2018-08-06T21:46:10.626+0000",
                    "started": "2018-08-06T21:46:10.625+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "131612",
                    "issueId": "13100662"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/worklog/131659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2362: ARROW-1491: [C++] Add casting from strings to numbers and booleans\nURL: https://github.com/apache/arrow/pull/2362\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/compute/compute-test.cc b/cpp/src/arrow/compute/compute-test.cc\nindex ba5c93546a..cd4b2bb30e 100644\n--- a/cpp/src/arrow/compute/compute-test.cc\n+++ b/cpp/src/arrow/compute/compute-test.cc\n@@ -17,6 +17,7 @@\n \n #include <cstdint>\n #include <cstdlib>\n+#include <locale>\n #include <memory>\n #include <numeric>\n #include <sstream>\n@@ -769,6 +770,123 @@ TEST_F(TestCast, OffsetOutputBuffer) {\n                                                                 int16(), e3);\n }\n \n+TEST_F(TestCast, StringToBoolean) {\n+  CastOptions options;\n+\n+  vector<bool> is_valid = {true, false, true, true, true};\n+\n+  vector<std::string> v1 = {\"False\", \"true\", \"true\", \"True\", \"false\"};\n+  vector<std::string> v2 = {\"0\", \"1\", \"1\", \"1\", \"0\"};\n+  vector<bool> e = {false, true, true, true, false};\n+  CheckCase<StringType, std::string, BooleanType, bool>(utf8(), v1, is_valid, boolean(),\n+                                                        e, options);\n+  CheckCase<StringType, std::string, BooleanType, bool>(utf8(), v2, is_valid, boolean(),\n+                                                        e, options);\n+}\n+\n+TEST_F(TestCast, StringToBooleanErrors) {\n+  CastOptions options;\n+\n+  vector<bool> is_valid = {true};\n+\n+  CheckFails<StringType, std::string>(utf8(), {\"false \"}, is_valid, boolean(), options);\n+  CheckFails<StringType, std::string>(utf8(), {\"T\"}, is_valid, boolean(), options);\n+}\n+\n+TEST_F(TestCast, StringToNumber) {\n+  CastOptions options;\n+\n+  vector<bool> is_valid = {true, false, true, true, true};\n+\n+  // string to int\n+  vector<std::string> v_int = {\"0\", \"1\", \"127\", \"-1\", \"0\"};\n+  vector<int8_t> e_int8 = {0, 1, 127, -1, 0};\n+  vector<int16_t> e_int16 = {0, 1, 127, -1, 0};\n+  vector<int32_t> e_int32 = {0, 1, 127, -1, 0};\n+  vector<int64_t> e_int64 = {0, 1, 127, -1, 0};\n+  CheckCase<StringType, std::string, Int8Type, int8_t>(utf8(), v_int, is_valid, int8(),\n+                                                       e_int8, options);\n+  CheckCase<StringType, std::string, Int16Type, int16_t>(utf8(), v_int, is_valid, int16(),\n+                                                         e_int16, options);\n+  CheckCase<StringType, std::string, Int32Type, int32_t>(utf8(), v_int, is_valid, int32(),\n+                                                         e_int32, options);\n+  CheckCase<StringType, std::string, Int64Type, int64_t>(utf8(), v_int, is_valid, int64(),\n+                                                         e_int64, options);\n+\n+  v_int = {\"2147483647\", \"0\", \"-2147483648\", \"0\", \"0\"};\n+  e_int32 = {2147483647, 0, -2147483648LL, 0, 0};\n+  CheckCase<StringType, std::string, Int32Type, int32_t>(utf8(), v_int, is_valid, int32(),\n+                                                         e_int32, options);\n+  v_int = {\"9223372036854775807\", \"0\", \"-9223372036854775808\", \"0\", \"0\"};\n+  e_int64 = {9223372036854775807LL, 0, (-9223372036854775807LL - 1), 0, 0};\n+  CheckCase<StringType, std::string, Int64Type, int64_t>(utf8(), v_int, is_valid, int64(),\n+                                                         e_int64, options);\n+\n+  // string to uint\n+  vector<std::string> v_uint = {\"0\", \"1\", \"127\", \"255\", \"0\"};\n+  vector<uint8_t> e_uint8 = {0, 1, 127, 255, 0};\n+  vector<uint16_t> e_uint16 = {0, 1, 127, 255, 0};\n+  vector<uint32_t> e_uint32 = {0, 1, 127, 255, 0};\n+  vector<uint64_t> e_uint64 = {0, 1, 127, 255, 0};\n+  CheckCase<StringType, std::string, UInt8Type, uint8_t>(utf8(), v_uint, is_valid,\n+                                                         uint8(), e_uint8, options);\n+  CheckCase<StringType, std::string, UInt16Type, uint16_t>(utf8(), v_uint, is_valid,\n+                                                           uint16(), e_uint16, options);\n+  CheckCase<StringType, std::string, UInt32Type, uint32_t>(utf8(), v_uint, is_valid,\n+                                                           uint32(), e_uint32, options);\n+  CheckCase<StringType, std::string, UInt64Type, uint64_t>(utf8(), v_uint, is_valid,\n+                                                           uint64(), e_uint64, options);\n+\n+  v_uint = {\"4294967295\", \"0\", \"0\", \"0\", \"0\"};\n+  e_uint32 = {4294967295, 0, 0, 0, 0};\n+  CheckCase<StringType, std::string, UInt32Type, uint32_t>(utf8(), v_uint, is_valid,\n+                                                           uint32(), e_uint32, options);\n+  v_uint = {\"18446744073709551615\", \"0\", \"0\", \"0\", \"0\"};\n+  e_uint64 = {18446744073709551615ULL, 0, 0, 0, 0};\n+  CheckCase<StringType, std::string, UInt64Type, uint64_t>(utf8(), v_uint, is_valid,\n+                                                           uint64(), e_uint64, options);\n+\n+  // string to float\n+  vector<std::string> v_float = {\"0.1\", \"1.2\", \"127.3\", \"200.4\", \"0.5\"};\n+  vector<float> e_float = {0.1f, 1.2f, 127.3f, 200.4f, 0.5f};\n+  vector<double> e_double = {0.1, 1.2, 127.3, 200.4, 0.5};\n+  CheckCase<StringType, std::string, FloatType, float>(utf8(), v_float, is_valid,\n+                                                       float32(), e_float, options);\n+  CheckCase<StringType, std::string, DoubleType, double>(utf8(), v_float, is_valid,\n+                                                         float64(), e_double, options);\n+\n+  // Test that casting is locale-independent\n+  auto global_locale = std::locale();\n+  try {\n+    // French locale uses the comma as decimal point\n+    std::locale::global(std::locale(\"fr_FR.UTF-8\"));\n+  } catch (std::runtime_error) {\n+    // Locale unavailable, ignore\n+  }\n+  CheckCase<StringType, std::string, FloatType, float>(utf8(), v_float, is_valid,\n+                                                       float32(), e_float, options);\n+  CheckCase<StringType, std::string, DoubleType, double>(utf8(), v_float, is_valid,\n+                                                         float64(), e_double, options);\n+  std::locale::global(global_locale);\n+}\n+\n+TEST_F(TestCast, StringToNumberErrors) {\n+  CastOptions options;\n+\n+  vector<bool> is_valid = {true};\n+\n+  CheckFails<StringType, std::string>(utf8(), {\"z\"}, is_valid, int8(), options);\n+  CheckFails<StringType, std::string>(utf8(), {\"12 z\"}, is_valid, int8(), options);\n+  CheckFails<StringType, std::string>(utf8(), {\"128\"}, is_valid, int8(), options);\n+  CheckFails<StringType, std::string>(utf8(), {\"-129\"}, is_valid, int8(), options);\n+  CheckFails<StringType, std::string>(utf8(), {\"0.5\"}, is_valid, int8(), options);\n+\n+  CheckFails<StringType, std::string>(utf8(), {\"256\"}, is_valid, uint8(), options);\n+  CheckFails<StringType, std::string>(utf8(), {\"-1\"}, is_valid, uint8(), options);\n+\n+  CheckFails<StringType, std::string>(utf8(), {\"z\"}, is_valid, float32(), options);\n+}\n+\n template <typename TestType>\n class TestDictionaryCast : public TestCast {};\n \ndiff --git a/cpp/src/arrow/compute/kernels/cast.cc b/cpp/src/arrow/compute/kernels/cast.cc\nindex 39925d7835..8b14b7b566 100644\n--- a/cpp/src/arrow/compute/kernels/cast.cc\n+++ b/cpp/src/arrow/compute/kernels/cast.cc\n@@ -17,10 +17,12 @@\n \n #include \"arrow/compute/kernels/cast.h\"\n \n+#include <cerrno>\n #include <cstdint>\n #include <cstring>\n #include <functional>\n #include <limits>\n+#include <locale>\n #include <memory>\n #include <sstream>\n #include <string>\n@@ -727,6 +729,178 @@ struct CastFunctor<T, DictionaryType,\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// String to Number\n+\n+// Cast a string to a number.  Returns true on success, false on error.\n+// We rely on C++ istringstream for locale-independent parsing, which might\n+// not be the fastest option.\n+\n+template <typename T>\n+typename std::enable_if<std::is_floating_point<T>::value,\n+                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n+                                                              T* out) {\n+  ibuf >> *out;\n+  return !ibuf.fail() && ibuf.eof();\n+}\n+\n+// For integers, not all integer widths are handled by the C++ stdlib, so\n+// we check for limits outselves.\n+\n+template <typename T>\n+typename std::enable_if<std::is_integral<T>::value && std::is_signed<T>::value,\n+                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n+                                                              T* out) {\n+  static constexpr bool need_long_long = sizeof(T) > sizeof(long);  // NOLINT\n+  static constexpr T min_value = std::numeric_limits<T>::min();\n+  static constexpr T max_value = std::numeric_limits<T>::max();\n+\n+  if (need_long_long) {\n+    long long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res < min_value || res > max_value) {\n+      return false;\n+    }\n+  } else {\n+    long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res < min_value || res > max_value) {\n+      return false;\n+    }\n+  }\n+  return !ibuf.fail() && ibuf.eof();\n+}\n+\n+template <typename T>\n+typename std::enable_if<std::is_integral<T>::value && std::is_unsigned<T>::value,\n+                        bool>::type static CastStringToNumber(std::istringstream& ibuf,\n+                                                              T* out) {\n+  static constexpr bool need_long_long = sizeof(T) > sizeof(unsigned long);  // NOLINT\n+  static constexpr T max_value = std::numeric_limits<T>::max();\n+\n+  if (need_long_long) {\n+    unsigned long long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res > max_value) {\n+      return false;\n+    }\n+  } else {\n+    unsigned long res;  // NOLINT\n+    ibuf >> res;\n+    *out = static_cast<T>(res);  // may downcast\n+    if (res > max_value) {\n+      return false;\n+    }\n+  }\n+  return !ibuf.fail() && ibuf.eof();\n+}\n+\n+template <typename O>\n+struct CastFunctor<O, StringType, enable_if_number<O>> {\n+  void operator()(FunctionContext* ctx, const CastOptions& options,\n+                  const ArrayData& input, ArrayData* output) {\n+    using out_type = typename O::c_type;\n+\n+    StringArray input_array(input.Copy());\n+    auto out_data = GetMutableValues<out_type>(output, 1);\n+    errno = 0;\n+    // Instantiate the stringstream outside of the loop\n+    std::istringstream ibuf;\n+    ibuf.imbue(std::locale::classic());\n+\n+    for (int64_t i = 0; i < input.length; ++i, ++out_data) {\n+      if (input_array.IsNull(i)) {\n+        continue;\n+      }\n+      auto str = input_array.GetString(i);\n+      ibuf.clear();\n+      ibuf.str(str);\n+      if (!CastStringToNumber(ibuf, out_data)) {\n+        std::stringstream ss;\n+        ss << \"Failed to cast String '\" << str << \"' into \" << output->type->ToString();\n+        ctx->SetStatus(Status(StatusCode::Invalid, ss.str()));\n+        return;\n+      }\n+    }\n+  }\n+};\n+\n+// ----------------------------------------------------------------------\n+// String to Boolean\n+\n+// Helper function to cast a C string to a boolean.  Returns true on success,\n+// false on error.\n+\n+static bool CastStringtoBoolean(const char* s, size_t length, bool* out) {\n+  if (length == 1) {\n+    // \"0\" or \"1\"?\n+    if (s[0] == '0') {\n+      *out = false;\n+      return true;\n+    }\n+    if (s[0] == '1') {\n+      *out = true;\n+      return true;\n+    }\n+    return false;\n+  }\n+  if (length == 4) {\n+    // \"true\"?\n+    *out = true;\n+    return ((s[0] == 't' || s[0] == 'T') && (s[1] == 'r' || s[1] == 'R') &&\n+            (s[2] == 'u' || s[2] == 'U') && (s[3] == 'e' || s[3] == 'E'));\n+  }\n+  if (length == 5) {\n+    // \"false\"?\n+    *out = false;\n+    return ((s[0] == 'f' || s[0] == 'F') && (s[1] == 'a' || s[1] == 'A') &&\n+            (s[2] == 'l' || s[2] == 'L') && (s[3] == 's' || s[3] == 'S') &&\n+            (s[4] == 'e' || s[4] == 'E'));\n+  }\n+  return false;\n+}\n+\n+template <typename O>\n+struct CastFunctor<O, StringType,\n+                   typename std::enable_if<std::is_same<BooleanType, O>::value>::type> {\n+  void operator()(FunctionContext* ctx, const CastOptions& options,\n+                  const ArrayData& input, ArrayData* output) {\n+    StringArray input_array(input.Copy());\n+    internal::FirstTimeBitmapWriter writer(output->buffers[1]->mutable_data(),\n+                                           output->offset, input.length);\n+\n+    for (int64_t i = 0; i < input.length; ++i) {\n+      if (input_array.IsNull(i)) {\n+        writer.Next();\n+        continue;\n+      }\n+\n+      int32_t length = -1;\n+      auto str = input_array.GetValue(i, &length);\n+      bool value;\n+      if (!CastStringtoBoolean(reinterpret_cast<const char*>(str),\n+                               static_cast<size_t>(length), &value)) {\n+        std::stringstream ss;\n+        ss << \"Failed to cast String '\" << input_array.GetString(i) << \"' into \"\n+           << output->type->ToString();\n+        ctx->SetStatus(Status(StatusCode::Invalid, ss.str()));\n+        return;\n+      }\n+\n+      if (value) {\n+        writer.Set();\n+      } else {\n+        writer.Clear();\n+      }\n+      writer.Next();\n+    }\n+    writer.Finish();\n+  }\n+};\n+\n // ----------------------------------------------------------------------\n \n typedef std::function<void(FunctionContext*, const CastOptions& options, const ArrayData&,\n@@ -905,6 +1079,20 @@ class CastKernel : public UnaryKernel {\n   FN(TimestampType, Date64Type);     \\\n   FN(TimestampType, Int64Type);\n \n+#define STRING_CASES(FN, IN_TYPE) \\\n+  FN(StringType, StringType);     \\\n+  FN(StringType, BooleanType);    \\\n+  FN(StringType, UInt8Type);      \\\n+  FN(StringType, Int8Type);       \\\n+  FN(StringType, UInt16Type);     \\\n+  FN(StringType, Int16Type);      \\\n+  FN(StringType, UInt32Type);     \\\n+  FN(StringType, Int32Type);      \\\n+  FN(StringType, UInt64Type);     \\\n+  FN(StringType, Int64Type);      \\\n+  FN(StringType, FloatType);      \\\n+  FN(StringType, DoubleType);\n+\n #define DICTIONARY_CASES(FN, IN_TYPE) \\\n   FN(IN_TYPE, NullType);              \\\n   FN(IN_TYPE, Time32Type);            \\\n@@ -962,6 +1150,7 @@ GET_CAST_FUNCTION(DATE64_CASES, Date64Type);\n GET_CAST_FUNCTION(TIME32_CASES, Time32Type);\n GET_CAST_FUNCTION(TIME64_CASES, Time64Type);\n GET_CAST_FUNCTION(TIMESTAMP_CASES, TimestampType);\n+GET_CAST_FUNCTION(STRING_CASES, StringType);\n GET_CAST_FUNCTION(DICTIONARY_CASES, DictionaryType);\n \n #define CAST_FUNCTION_CASE(InType)                      \\\n@@ -1009,6 +1198,7 @@ Status GetCastFunction(const DataType& in_type, const std::shared_ptr<DataType>&\n     CAST_FUNCTION_CASE(Time32Type);\n     CAST_FUNCTION_CASE(Time64Type);\n     CAST_FUNCTION_CASE(TimestampType);\n+    CAST_FUNCTION_CASE(StringType);\n     CAST_FUNCTION_CASE(DictionaryType);\n     case Type::LIST:\n       RETURN_NOT_OK(GetListCastFunc(in_type, out_type, options, kernel));\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-06T23:20:38.408+0000",
                    "updated": "2018-08-06T23:20:38.408+0000",
                    "started": "2018-08-06T23:20:38.408+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "131659",
                    "issueId": "13100662"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/worklog/131662",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#issuecomment-410884086\n \n \n   Superseded by #2362 \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-06T23:26:09.833+0000",
                    "updated": "2018-08-06T23:26:09.833+0000",
                    "started": "2018-08-06T23:26:09.832+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "131662",
                    "issueId": "13100662"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/worklog/131663",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt\nindex 52a843a7df..80bdf15828 100644\n--- a/cpp/CMakeLists.txt\n+++ b/cpp/CMakeLists.txt\n@@ -308,6 +308,10 @@ include(ThirdpartyToolchain)\n set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${CXX_COMMON_FLAGS}\")\n set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${ARROW_CXXFLAGS}\")\n \n+if (MSVC)\n+  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /bigobj\")\n+endif()\n+\n if (\"${COMPILER_FAMILY}\" STREQUAL \"clang\")\n   # Using Clang with ccache causes a bunch of spurious warnings that are\n   # purportedly fixed in the next version of ccache. See the following for details:\ndiff --git a/cpp/src/arrow/compute/compute-test.cc b/cpp/src/arrow/compute/compute-test.cc\nindex e8dc2bca83..ea92799294 100644\n--- a/cpp/src/arrow/compute/compute-test.cc\n+++ b/cpp/src/arrow/compute/compute-test.cc\n@@ -769,6 +769,65 @@ TEST_F(TestCast, OffsetOutputBuffer) {\n                                                                 int16(), e3);\n }\n \n+TEST_F(TestCast, StringToBoolean) {\n+  CastOptions options;\n+\n+  vector<bool> is_valid = {true, false, true, true, true};\n+\n+  vector<std::string> v1 = {\"False\", \"true\", \"true\", \"True\", \"false\"};\n+  vector<std::string> v2 = {\"0\", \"1\", \"1\", \"1\", \"0\"};\n+  vector<bool> e = {false, true, true, true, false};\n+  CheckCase<StringType, std::string, BooleanType, bool>(utf8(), v1, is_valid, boolean(),\n+                                                        e, options);\n+  CheckCase<StringType, std::string, BooleanType, bool>(utf8(), v2, is_valid, boolean(),\n+                                                        e, options);\n+}\n+\n+TEST_F(TestCast, StringToNumber) {\n+  CastOptions options;\n+\n+  vector<bool> is_valid = {true, false, true, true, true};\n+\n+  // string to int\n+  vector<std::string> v_int = {\"0\", \"1\", \"127\", \"-1\", \"0\"};\n+  vector<int8_t> e_int8 = {0, 1, 127, -1, 0};\n+  vector<int16_t> e_int16 = {0, 1, 127, -1, 0};\n+  vector<int32_t> e_int32 = {0, 1, 127, -1, 0};\n+  vector<int64_t> e_int64 = {0, 1, 127, -1, 0};\n+  CheckCase<StringType, std::string, Int8Type, int8_t>(utf8(), v_int, is_valid, int8(),\n+                                                       e_int8, options);\n+  CheckCase<StringType, std::string, Int16Type, int16_t>(utf8(), v_int, is_valid, int16(),\n+                                                         e_int16, options);\n+  CheckCase<StringType, std::string, Int32Type, int32_t>(utf8(), v_int, is_valid, int32(),\n+                                                         e_int32, options);\n+  CheckCase<StringType, std::string, Int64Type, int64_t>(utf8(), v_int, is_valid, int64(),\n+                                                         e_int64, options);\n+\n+  // string to uint\n+  vector<std::string> v_uint = {\"0\", \"1\", \"127\", \"255\", \"0\"};\n+  vector<uint8_t> e_uint8 = {0, 1, 127, 255, 0};\n+  vector<uint16_t> e_uint16 = {0, 1, 127, 255, 0};\n+  vector<uint32_t> e_uint32 = {0, 1, 127, 255, 0};\n+  vector<uint64_t> e_uint64 = {0, 1, 127, 255, 0};\n+  CheckCase<StringType, std::string, UInt8Type, uint8_t>(utf8(), v_uint, is_valid,\n+                                                         uint8(), e_uint8, options);\n+  CheckCase<StringType, std::string, UInt16Type, uint16_t>(utf8(), v_uint, is_valid,\n+                                                           uint16(), e_uint16, options);\n+  CheckCase<StringType, std::string, UInt32Type, uint32_t>(utf8(), v_uint, is_valid,\n+                                                           uint32(), e_uint32, options);\n+  CheckCase<StringType, std::string, UInt64Type, uint64_t>(utf8(), v_uint, is_valid,\n+                                                           uint64(), e_uint64, options);\n+\n+  // string to float\n+  vector<std::string> v_float = {\"0.1\", \"1.2\", \"127.3\", \"200.4\", \"0.5\"};\n+  vector<float> e_float = {0.1f, 1.2f, 127.3f, 200.4f, 0.5f};\n+  vector<double> e_double = {0.1, 1.2, 127.3, 200.4, 0.5};\n+  CheckCase<StringType, std::string, FloatType, float>(utf8(), v_float, is_valid,\n+                                                       float32(), e_float, options);\n+  CheckCase<StringType, std::string, DoubleType, double>(utf8(), v_float, is_valid,\n+                                                         float64(), e_double, options);\n+}\n+\n template <typename TestType>\n class TestDictionaryCast : public TestCast {};\n \ndiff --git a/cpp/src/arrow/compute/kernels/cast.cc b/cpp/src/arrow/compute/kernels/cast.cc\nindex 185a966cd9..138d7e0138 100644\n--- a/cpp/src/arrow/compute/kernels/cast.cc\n+++ b/cpp/src/arrow/compute/kernels/cast.cc\n@@ -17,6 +17,9 @@\n \n #include \"arrow/compute/kernels/cast.h\"\n \n+#include <boost/algorithm/string.hpp>\n+#include <boost/lexical_cast.hpp>\n+#include <boost/numeric/conversion/cast.hpp>\n #include <cstdint>\n #include <cstring>\n #include <functional>\n@@ -735,6 +738,104 @@ struct CastFunctor<T, DictionaryType,\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// String to Number\n+\n+template <typename T>\n+typename std::enable_if<std::is_arithmetic<T>::value && !std::is_same<T, int8_t>::value &&\n+                            !std::is_same<T, uint8_t>::value,\n+                        T>::type\n+CastStringToNumeric(const std::string& s) {\n+  return boost::lexical_cast<T>(s);\n+}\n+\n+template <typename T>\n+typename std::enable_if<std::is_same<T, int8_t>::value || std::is_same<T, uint8_t>::value,\n+                        T>::type\n+CastStringToNumeric(const std::string& s) {\n+  // Convert to int before casting to T\n+  // because boost::lexical_cast does not support 8bit int/uint.\n+  return boost::numeric_cast<T>(boost::lexical_cast<int>(s));\n+}\n+\n+template <typename O>\n+struct CastFunctor<O, StringType,\n+                   typename std::enable_if<std::is_base_of<Number, O>::value>::type> {\n+  void operator()(FunctionContext* ctx, const CastOptions& options,\n+                  const ArrayData& input, ArrayData* output) {\n+    using out_type = typename O::c_type;\n+    StringArray input_array(input.Copy());\n+\n+    auto out_data = GetMutableValues<out_type>(output, 1);\n+\n+    for (int64_t i = 0; i < input.length; ++i) {\n+      if (input_array.IsNull(i)) {\n+        out_data++;\n+        continue;\n+      }\n+\n+      std::string s = input_array.GetString(i);\n+\n+      try {\n+        *out_data++ = CastStringToNumeric<out_type>(s);\n+      } catch (...) {\n+        std::stringstream ss;\n+        ss << \"Failed to cast String '\" << s << \"' into \" << output->type->ToString();\n+        ctx->SetStatus(Status(StatusCode::SerializationError, ss.str()));\n+        return;\n+      }\n+    }\n+  }\n+};\n+\n+// ----------------------------------------------------------------------\n+// String to Boolean\n+\n+template <typename O>\n+struct CastFunctor<O, StringType,\n+                   typename std::enable_if<std::is_same<BooleanType, O>::value>::type> {\n+  void operator()(FunctionContext* ctx, const CastOptions& options,\n+                  const ArrayData& input, ArrayData* output) {\n+    StringArray input_array(input.Copy());\n+    internal::BitmapWriter writer(output->buffers[1]->mutable_data(), output->offset,\n+                                  input.length);\n+\n+    for (int64_t i = 0; i < input.length; ++i) {\n+      if (input_array.IsNull(i)) {\n+        writer.Next();\n+        continue;\n+      }\n+\n+      auto s = input_array.GetString(i);\n+      auto s_lower = boost::algorithm::to_lower_copy(s);\n+      bool flag;\n+\n+      if (s_lower == \"true\") {\n+        flag = true;\n+      } else if (s_lower == \"false\") {\n+        flag = false;\n+      } else {\n+        try {\n+          flag = boost::lexical_cast<bool>(s);\n+        } catch (...) {\n+          std::stringstream ss;\n+          ss << \"Failed to cast String '\" << s << \"' into \" << output->type->ToString();\n+          ctx->SetStatus(Status(StatusCode::SerializationError, ss.str()));\n+          return;\n+        }\n+      }\n+\n+      if (flag) {\n+        writer.Set();\n+      } else {\n+        writer.Clear();\n+      }\n+      writer.Next();\n+    }\n+    writer.Finish();\n+  }\n+};\n+\n // ----------------------------------------------------------------------\n \n typedef std::function<void(FunctionContext*, const CastOptions& options, const ArrayData&,\n@@ -913,6 +1014,20 @@ class CastKernel : public UnaryKernel {\n   FN(TimestampType, Date64Type);     \\\n   FN(TimestampType, Int64Type);\n \n+#define STRING_CASES(FN, IN_TYPE) \\\n+  FN(StringType, StringType);     \\\n+  FN(StringType, BooleanType);    \\\n+  FN(StringType, UInt8Type);      \\\n+  FN(StringType, Int8Type);       \\\n+  FN(StringType, UInt16Type);     \\\n+  FN(StringType, Int16Type);      \\\n+  FN(StringType, UInt32Type);     \\\n+  FN(StringType, Int32Type);      \\\n+  FN(StringType, UInt64Type);     \\\n+  FN(StringType, Int64Type);      \\\n+  FN(StringType, FloatType);      \\\n+  FN(StringType, DoubleType);\n+\n #define DICTIONARY_CASES(FN, IN_TYPE) \\\n   FN(IN_TYPE, NullType);              \\\n   FN(IN_TYPE, Time32Type);            \\\n@@ -970,6 +1085,7 @@ GET_CAST_FUNCTION(DATE64_CASES, Date64Type);\n GET_CAST_FUNCTION(TIME32_CASES, Time32Type);\n GET_CAST_FUNCTION(TIME64_CASES, Time64Type);\n GET_CAST_FUNCTION(TIMESTAMP_CASES, TimestampType);\n+GET_CAST_FUNCTION(STRING_CASES, StringType);\n GET_CAST_FUNCTION(DICTIONARY_CASES, DictionaryType);\n \n #define CAST_FUNCTION_CASE(InType)                      \\\n@@ -1017,6 +1133,7 @@ Status GetCastFunction(const DataType& in_type, const std::shared_ptr<DataType>&\n     CAST_FUNCTION_CASE(Time32Type);\n     CAST_FUNCTION_CASE(Time64Type);\n     CAST_FUNCTION_CASE(TimestampType);\n+    CAST_FUNCTION_CASE(StringType);\n     CAST_FUNCTION_CASE(DictionaryType);\n     case Type::LIST:\n       RETURN_NOT_OK(GetListCastFunc(in_type, out_type, options, kernel));\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-06T23:26:10.156+0000",
                    "updated": "2018-08-06T23:26:10.156+0000",
                    "started": "2018-08-06T23:26:10.155+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "131663",
                    "issueId": "13100662"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 10200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5d075afb[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1c15d8f3[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3461e8d7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6816ce8[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6837f479[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@e8139ab[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@351d5ffc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3876939b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6fb52cd0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@687e1cec[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37434ca0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3ba5fb98[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10200,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Aug 06 23:20:40 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-08-06T23:20:40.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1491/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2017-09-08T02:32:12.000+0000",
        "updated": "2018-08-06T23:26:10.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add casting implementations from strings to numbers or boolean",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16219398",
                    "id": "16219398",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "While this would be nice, it's not immediately urgent. Some help would be appreciated",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-10-25T19:47:11.249+0000",
                    "updated": "2017-10-25T19:47:11.249+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16276798",
                    "id": "16276798",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Licht-T opened a new pull request #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387\n \n \n   This closes [ARROW-1491](https://issues.apache.org/jira/browse/ARROW-1491).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-04T13:49:33.220+0000",
                    "updated": "2017-12-04T13:49:33.220+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16278494",
                    "id": "16278494",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy commented on a change in pull request #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#discussion_r154934826\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -660,6 +663,100 @@ struct CastFunctor<T, DictionaryType,\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// String to Number\n+\n+template <typename O>\n+struct CastFunctor<O, StringType,\n+                   typename std::enable_if<std::is_base_of<Number, O>::value>::type> {\n+  void operator()(FunctionContext* ctx, const CastOptions& options,\n+                  const ArrayData& input, ArrayData* output) {\n+    using out_type = typename O::c_type;\n+    StringArray input_array(input.Copy());\n+\n+    if (input_array.null_count() > 0) {\n+      std::stringstream ss;\n+      ss << \"Failed to cast NA into \" << output->type->ToString();\n+      ctx->SetStatus(Status(StatusCode::SerializationError, ss.str()));\n+      return;\n+    }\n+\n+    auto out_data = GetMutableValues<out_type>(output, 1);\n+\n+    std::function<out_type(const std::string&)> cast_func;\n+    if (output->type->id() == Type::INT8 || output->type->id() == Type::UINT8) {\n+      cast_func = [](const std::string& s) {\n+        return boost::numeric_cast<out_type>(boost::lexical_cast<int>(s));\n \n Review comment:\n   Can you add a comment why this special case is needed?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-05T12:53:15.892+0000",
                    "updated": "2017-12-05T12:53:15.892+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16279051",
                    "id": "16279051",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#discussion_r155044277\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -17,6 +17,9 @@\n \n #include \"arrow/compute/kernels/cast.h\"\n \n+#include <boost/algorithm/string.hpp>\n+#include <boost/lexical_cast.hpp>\n+#include <boost/numeric/conversion/cast.hpp>\n \n Review comment:\n   Is it possible to not rely on Boost for this, e.g. are there some alternatives in the STL or that we can access otherwise? I will review the rest in more detail later\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-05T19:02:27.484+0000",
                    "updated": "2017-12-05T19:02:27.484+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16279236",
                    "id": "16279236",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Licht-T commented on a change in pull request #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#discussion_r155086307\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -17,6 +17,9 @@\n \n #include \"arrow/compute/kernels/cast.h\"\n \n+#include <boost/algorithm/string.hpp>\n+#include <boost/lexical_cast.hpp>\n+#include <boost/numeric/conversion/cast.hpp>\n \n Review comment:\n   Seems that `boost::numeric_cast` and `boost::lexical_cast` are not replaceable by STL.\r\n   STL has `std::to_string`, but it does not support small size ints.\r\n   http://en.cppreference.com/w/cpp/string/basic_string/to_string\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-05T21:49:43.301+0000",
                    "updated": "2017-12-05T21:49:43.301+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16280621",
                    "id": "16280621",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#discussion_r155317738\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -660,6 +663,100 @@ struct CastFunctor<T, DictionaryType,\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// String to Number\n+\n+template <typename O>\n+struct CastFunctor<O, StringType,\n+                   typename std::enable_if<std::is_base_of<Number, O>::value>::type> {\n+  void operator()(FunctionContext* ctx, const CastOptions& options,\n+                  const ArrayData& input, ArrayData* output) {\n+    using out_type = typename O::c_type;\n+    StringArray input_array(input.Copy());\n+\n+    if (input_array.null_count() > 0) {\n+      std::stringstream ss;\n+      ss << \"Failed to cast NA into \" << output->type->ToString();\n+      ctx->SetStatus(Status(StatusCode::SerializationError, ss.str()));\n+      return;\n+    }\n+\n+    auto out_data = GetMutableValues<out_type>(output, 1);\n+\n+    std::function<out_type(const std::string&)> cast_func;\n+    if (output->type->id() == Type::INT8 || output->type->id() == Type::UINT8) {\n+      cast_func = [](const std::string& s) {\n+        return boost::numeric_cast<out_type>(boost::lexical_cast<int>(s));\n+      };\n+    } else {\n+      cast_func = [](const std::string& s) { return boost::lexical_cast<out_type>(s); };\n \n Review comment:\n   I think C++11 Lambdas actually incur more overhead than an inlined function. We should instead introduce an auxiliary numeric cast functor that does this switch at compile-time (resulting in an inlined function in the inner loop for all possible types) rather than runtime\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-06T18:23:04.447+0000",
                    "updated": "2017-12-06T18:23:04.447+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16280622",
                    "id": "16280622",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#discussion_r155319018\n \n \n\n ##########\n File path: cpp/src/arrow/compute/compute-test.cc\n ##########\n @@ -769,6 +769,65 @@ TEST_F(TestCast, OffsetOutputBuffer) {\n                                                                 int16(), e3);\n }\n \n+TEST_F(TestCast, StringToBoolean) {\n+  CastOptions options;\n+\n+  vector<bool> is_valid = {true, true, true, true, true};\n+\n+  vector<std::string> v1 = {\"False\", \"true\", \"true\", \"True\", \"false\"};\n+  vector<std::string> v2 = {\"0\", \"1\", \"1\", \"1\", \"0\"};\n+  vector<bool> e = {false, true, true, true, false};\n+  CheckCase<StringType, std::string, BooleanType, bool>(utf8(), v1, is_valid, boolean(),\n+                                                        e, options);\n+  CheckCase<StringType, std::string, BooleanType, bool>(utf8(), v2, is_valid, boolean(),\n+                                                        e, options);\n+}\n+\n+TEST_F(TestCast, StringToNumber) {\n+  CastOptions options;\n+\n+  vector<bool> is_valid = {true, true, true, true, true};\n+\n+  // string to int\n+  vector<std::string> v_int = {\"0\", \"1\", \"127\", \"-1\", \"0\"};\n+  vector<int8_t> e_int8 = {0, 1, 127, -1, 0};\n+  vector<int16_t> e_int16 = {0, 1, 127, -1, 0};\n+  vector<int32_t> e_int32 = {0, 1, 127, -1, 0};\n+  vector<int64_t> e_int64 = {0, 1, 127, -1, 0};\n+  CheckCase<StringType, std::string, Int8Type, int8_t>(utf8(), v_int, is_valid, int8(),\n+                                                       e_int8, options);\n+  CheckCase<StringType, std::string, Int16Type, int16_t>(utf8(), v_int, is_valid, int16(),\n+                                                         e_int16, options);\n+  CheckCase<StringType, std::string, Int32Type, int32_t>(utf8(), v_int, is_valid, int32(),\n+                                                         e_int32, options);\n+  CheckCase<StringType, std::string, Int64Type, int64_t>(utf8(), v_int, is_valid, int64(),\n+                                                         e_int64, options);\n+\n+  // string to uint\n+  vector<std::string> v_uint = {\"0\", \"1\", \"127\", \"255\", \"0\"};\n+  vector<uint8_t> e_uint8 = {0, 1, 127, 255, 0};\n+  vector<uint16_t> e_uint16 = {0, 1, 127, 255, 0};\n+  vector<uint32_t> e_uint32 = {0, 1, 127, 255, 0};\n+  vector<uint64_t> e_uint64 = {0, 1, 127, 255, 0};\n+  CheckCase<StringType, std::string, UInt8Type, uint8_t>(utf8(), v_uint, is_valid,\n+                                                         uint8(), e_uint8, options);\n+  CheckCase<StringType, std::string, UInt16Type, uint16_t>(utf8(), v_uint, is_valid,\n+                                                           uint16(), e_uint16, options);\n+  CheckCase<StringType, std::string, UInt32Type, uint32_t>(utf8(), v_uint, is_valid,\n+                                                           uint32(), e_uint32, options);\n+  CheckCase<StringType, std::string, UInt64Type, uint64_t>(utf8(), v_uint, is_valid,\n+                                                           uint64(), e_uint64, options);\n+\n+  // string to float\n+  vector<std::string> v_float = {\"0.1\", \"1.2\", \"127.3\", \"200.4\", \"0.5\"};\n+  vector<float> e_float = {0.1f, 1.2f, 127.3f, 200.4f, 0.5f};\n+  vector<double> e_double = {0.1, 1.2, 127.3, 200.4, 0.5};\n+  CheckCase<StringType, std::string, FloatType, float>(utf8(), v_float, is_valid,\n+                                                       float32(), e_float, options);\n+  CheckCase<StringType, std::string, DoubleType, double>(utf8(), v_float, is_valid,\n+                                                         float64(), e_double, options);\n \n Review comment:\n   Can you test with a non-zero offset (e.g. `foo->Slice(2)`)?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-06T18:23:04.501+0000",
                    "updated": "2017-12-06T18:23:04.501+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16280623",
                    "id": "16280623",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#discussion_r155318929\n \n \n\n ##########\n File path: cpp/src/arrow/compute/compute-test.cc\n ##########\n @@ -769,6 +769,65 @@ TEST_F(TestCast, OffsetOutputBuffer) {\n                                                                 int16(), e3);\n }\n \n+TEST_F(TestCast, StringToBoolean) {\n+  CastOptions options;\n+\n+  vector<bool> is_valid = {true, true, true, true, true};\n+\n+  vector<std::string> v1 = {\"False\", \"true\", \"true\", \"True\", \"false\"};\n+  vector<std::string> v2 = {\"0\", \"1\", \"1\", \"1\", \"0\"};\n+  vector<bool> e = {false, true, true, true, false};\n+  CheckCase<StringType, std::string, BooleanType, bool>(utf8(), v1, is_valid, boolean(),\n+                                                        e, options);\n+  CheckCase<StringType, std::string, BooleanType, bool>(utf8(), v2, is_valid, boolean(),\n+                                                        e, options);\n+}\n+\n+TEST_F(TestCast, StringToNumber) {\n+  CastOptions options;\n+\n+  vector<bool> is_valid = {true, true, true, true, true};\n \n Review comment:\n   Can you modify the unit tests to propagate nulls? \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-06T18:23:04.531+0000",
                    "updated": "2017-12-06T18:23:04.531+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16280624",
                    "id": "16280624",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#discussion_r155318397\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -660,6 +663,100 @@ struct CastFunctor<T, DictionaryType,\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// String to Number\n+\n+template <typename O>\n+struct CastFunctor<O, StringType,\n+                   typename std::enable_if<std::is_base_of<Number, O>::value>::type> {\n+  void operator()(FunctionContext* ctx, const CastOptions& options,\n+                  const ArrayData& input, ArrayData* output) {\n+    using out_type = typename O::c_type;\n+    StringArray input_array(input.Copy());\n+\n+    if (input_array.null_count() > 0) {\n+      std::stringstream ss;\n+      ss << \"Failed to cast NA into \" << output->type->ToString();\n+      ctx->SetStatus(Status(StatusCode::SerializationError, ss.str()));\n+      return;\n+    }\n \n Review comment:\n   If the input has nulls, then the output should have nulls in the same locations (like the other cast functions)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-06T18:23:04.565+0000",
                    "updated": "2017-12-06T18:23:04.565+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16280625",
                    "id": "16280625",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#discussion_r155318269\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -660,6 +663,100 @@ struct CastFunctor<T, DictionaryType,\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// String to Number\n+\n+template <typename O>\n+struct CastFunctor<O, StringType,\n+                   typename std::enable_if<std::is_base_of<Number, O>::value>::type> {\n+  void operator()(FunctionContext* ctx, const CastOptions& options,\n+                  const ArrayData& input, ArrayData* output) {\n+    using out_type = typename O::c_type;\n+    StringArray input_array(input.Copy());\n+\n+    if (input_array.null_count() > 0) {\n+      std::stringstream ss;\n+      ss << \"Failed to cast NA into \" << output->type->ToString();\n+      ctx->SetStatus(Status(StatusCode::SerializationError, ss.str()));\n+      return;\n+    }\n+\n+    auto out_data = GetMutableValues<out_type>(output, 1);\n+\n+    std::function<out_type(const std::string&)> cast_func;\n+    if (output->type->id() == Type::INT8 || output->type->id() == Type::UINT8) {\n+      cast_func = [](const std::string& s) {\n+        return boost::numeric_cast<out_type>(boost::lexical_cast<int>(s));\n+      };\n+    } else {\n+      cast_func = [](const std::string& s) { return boost::lexical_cast<out_type>(s); };\n+    }\n+\n+    for (int64_t i = 0; i < input.length; ++i) {\n+      std::string s = input_array.GetString(i);\n+\n+      try {\n+        *out_data++ = cast_func(s);\n+      } catch (...) {\n+        std::stringstream ss;\n+        ss << \"Failed to cast String '\" << s << \"' into \" << output->type->ToString();\n+        ctx->SetStatus(Status(StatusCode::SerializationError, ss.str()));\n+        return;\n+      }\n+    }\n+  }\n+};\n+\n+// ----------------------------------------------------------------------\n+// String to Boolean\n+\n+template <typename O>\n+struct CastFunctor<O, StringType,\n+                   typename std::enable_if<std::is_same<BooleanType, O>::value>::type> {\n+  void operator()(FunctionContext* ctx, const CastOptions& options,\n+                  const ArrayData& input, ArrayData* output) {\n+    StringArray input_array(input.Copy());\n+    internal::BitmapWriter writer(output->buffers[1]->mutable_data(), output->offset,\n+                                  input.length);\n+\n+    if (input_array.null_count() > 0) {\n+      std::stringstream ss;\n+      ss << \"Failed to cast NA into \" << output->type->ToString();\n+      ctx->SetStatus(Status(StatusCode::SerializationError, ss.str()));\n \n Review comment:\n   If the input has nulls, then the output should have nulls in the same locations\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-06T18:23:04.705+0000",
                    "updated": "2017-12-06T18:23:04.705+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16299145",
                    "id": "16299145",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#issuecomment-353190250\n \n \n   @Licht-T I will do a bit of work on this patch tomorrow or Friday for further review\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-20T21:41:05.558+0000",
                    "updated": "2017-12-20T21:41:05.558+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16302974",
                    "id": "16302974",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Licht-T commented on issue #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#issuecomment-353809606\n \n \n   Thanks @wesm! I was busy but now I am okay. Would you mind if I help?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-25T00:32:30.332+0000",
                    "updated": "2017-12-25T00:32:30.332+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16302987",
                    "id": "16302987",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#issuecomment-353811452\n \n \n   Sure please go ahead \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-25T01:09:57.059+0000",
                    "updated": "2017-12-25T01:09:57.059+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16306687",
                    "id": "16306687",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Licht-T commented on a change in pull request #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#discussion_r159118929\n \n \n\n ##########\n File path: cpp/src/arrow/compute/compute-test.cc\n ##########\n @@ -769,6 +769,65 @@ TEST_F(TestCast, OffsetOutputBuffer) {\n                                                                 int16(), e3);\n }\n \n+TEST_F(TestCast, StringToBoolean) {\n+  CastOptions options;\n+\n+  vector<bool> is_valid = {true, true, true, true, true};\n+\n+  vector<std::string> v1 = {\"False\", \"true\", \"true\", \"True\", \"false\"};\n+  vector<std::string> v2 = {\"0\", \"1\", \"1\", \"1\", \"0\"};\n+  vector<bool> e = {false, true, true, true, false};\n+  CheckCase<StringType, std::string, BooleanType, bool>(utf8(), v1, is_valid, boolean(),\n+                                                        e, options);\n+  CheckCase<StringType, std::string, BooleanType, bool>(utf8(), v2, is_valid, boolean(),\n+                                                        e, options);\n+}\n+\n+TEST_F(TestCast, StringToNumber) {\n+  CastOptions options;\n+\n+  vector<bool> is_valid = {true, true, true, true, true};\n+\n+  // string to int\n+  vector<std::string> v_int = {\"0\", \"1\", \"127\", \"-1\", \"0\"};\n+  vector<int8_t> e_int8 = {0, 1, 127, -1, 0};\n+  vector<int16_t> e_int16 = {0, 1, 127, -1, 0};\n+  vector<int32_t> e_int32 = {0, 1, 127, -1, 0};\n+  vector<int64_t> e_int64 = {0, 1, 127, -1, 0};\n+  CheckCase<StringType, std::string, Int8Type, int8_t>(utf8(), v_int, is_valid, int8(),\n+                                                       e_int8, options);\n+  CheckCase<StringType, std::string, Int16Type, int16_t>(utf8(), v_int, is_valid, int16(),\n+                                                         e_int16, options);\n+  CheckCase<StringType, std::string, Int32Type, int32_t>(utf8(), v_int, is_valid, int32(),\n+                                                         e_int32, options);\n+  CheckCase<StringType, std::string, Int64Type, int64_t>(utf8(), v_int, is_valid, int64(),\n+                                                         e_int64, options);\n+\n+  // string to uint\n+  vector<std::string> v_uint = {\"0\", \"1\", \"127\", \"255\", \"0\"};\n+  vector<uint8_t> e_uint8 = {0, 1, 127, 255, 0};\n+  vector<uint16_t> e_uint16 = {0, 1, 127, 255, 0};\n+  vector<uint32_t> e_uint32 = {0, 1, 127, 255, 0};\n+  vector<uint64_t> e_uint64 = {0, 1, 127, 255, 0};\n+  CheckCase<StringType, std::string, UInt8Type, uint8_t>(utf8(), v_uint, is_valid,\n+                                                         uint8(), e_uint8, options);\n+  CheckCase<StringType, std::string, UInt16Type, uint16_t>(utf8(), v_uint, is_valid,\n+                                                           uint16(), e_uint16, options);\n+  CheckCase<StringType, std::string, UInt32Type, uint32_t>(utf8(), v_uint, is_valid,\n+                                                           uint32(), e_uint32, options);\n+  CheckCase<StringType, std::string, UInt64Type, uint64_t>(utf8(), v_uint, is_valid,\n+                                                           uint64(), e_uint64, options);\n+\n+  // string to float\n+  vector<std::string> v_float = {\"0.1\", \"1.2\", \"127.3\", \"200.4\", \"0.5\"};\n+  vector<float> e_float = {0.1f, 1.2f, 127.3f, 200.4f, 0.5f};\n+  vector<double> e_double = {0.1, 1.2, 127.3, 200.4, 0.5};\n+  CheckCase<StringType, std::string, FloatType, float>(utf8(), v_float, is_valid,\n+                                                       float32(), e_float, options);\n+  CheckCase<StringType, std::string, DoubleType, double>(utf8(), v_float, is_valid,\n+                                                         float64(), e_double, options);\n \n Review comment:\n   @wesm It seems that the sliced pattern is already tested in `CheckCase` method.\r\n   https://github.com/Licht-T/arrow/blob/master/cpp/src/arrow/compute/compute-test.cc#L123\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-30T08:08:01.571+0000",
                    "updated": "2017-12-30T08:08:01.571+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16320262",
                    "id": "16320262",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Licht-T commented on issue #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#issuecomment-356607776\n \n \n   @wesm Now, all fixed.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-10T13:51:52.221+0000",
                    "updated": "2018-01-10T13:51:52.221+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16321227",
                    "id": "16321227",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#issuecomment-356755296\n \n \n   I will review again when I can\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-10T22:15:18.240+0000",
                    "updated": "2018-01-10T22:15:18.240+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16325562",
                    "id": "16325562",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy commented on a change in pull request #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#discussion_r161396841\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -17,6 +17,9 @@\n \n #include \"arrow/compute/kernels/cast.h\"\n \n+#include <boost/algorithm/string.hpp>\n+#include <boost/lexical_cast.hpp>\n+#include <boost/numeric/conversion/cast.hpp>\n \n Review comment:\n   Wouldn't it be ok in the of small size ints just to upcast them? This should not affect performance as it's a small temporary.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-14T13:00:52.908+0000",
                    "updated": "2018-01-14T13:00:52.908+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16325563",
                    "id": "16325563",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy commented on issue #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#issuecomment-357510384\n \n \n   This PR looks good besides the dependency on Boost. Probably we need this to get it working but in the longterm, we should get rid of it again.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-14T13:01:37.292+0000",
                    "updated": "2018-01-14T13:01:37.292+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16348889",
                    "id": "16348889",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#discussion_r165416431\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -703,6 +706,106 @@ struct CastFunctor<T, DictionaryType,\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// String to Number\n+\n+template <typename T>\n+typename std::enable_if<std::is_arithmetic<T>::value && !std::is_same<T, int8_t>::value &&\n+                            !std::is_same<T, uint8_t>::value,\n+                        T>::type\n+castStringToNumeric(const std::string& s) {\n \n Review comment:\n   Capitalize this function.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T16:53:05.715+0000",
                    "updated": "2018-02-01T16:53:05.715+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16348890",
                    "id": "16348890",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#discussion_r165417551\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -703,6 +706,106 @@ struct CastFunctor<T, DictionaryType,\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// String to Number\n+\n+template <typename T>\n+typename std::enable_if<std::is_arithmetic<T>::value && !std::is_same<T, int8_t>::value &&\n+                            !std::is_same<T, uint8_t>::value,\n+                        T>::type\n+castStringToNumeric(const std::string& s) {\n+  return boost::lexical_cast<T>(s);\n+}\n+\n+template <typename T>\n+typename std::enable_if<std::is_same<T, int8_t>::value || std::is_same<T, uint8_t>::value,\n+                        T>::type\n+castStringToNumeric(const std::string& s) {\n+  // Convert to int before casting to T\n+  // because boost::lexical_cast does not support 8bit int/uint.\n+  return boost::numeric_cast<T>(boost::lexical_cast<int>(s));\n+}\n+\n+template <typename O>\n+struct CastFunctor<O, StringType,\n+                   typename std::enable_if<std::is_base_of<Number, O>::value>::type> {\n+  void operator()(FunctionContext* ctx, const CastOptions& options,\n+                  const ArrayData& input, ArrayData* output) {\n+    using out_type = typename O::c_type;\n+    StringArray input_array(input.Copy());\n+\n+    auto out_data = GetMutableValues<out_type>(output, 1);\n+\n+    std::function<out_type(const std::string&)> cast_func;\n+\n+    for (int64_t i = 0; i < input.length; ++i) {\n+      if (input_array.IsNull(i)) {\n+        out_data++;\n+        continue;\n+      }\n+\n+      std::string s = input_array.GetString(i);\n+\n+      try {\n+        *out_data++ = castStringToNumeric<out_type>(s);\n+      } catch (...) {\n \n Review comment:\n   I'm concerned about propagating the actual error message instead of just saying \"Cast from X to Y failed\".\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T16:53:05.742+0000",
                    "updated": "2018-02-01T16:53:05.742+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16348891",
                    "id": "16348891",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#discussion_r165417094\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -703,6 +706,106 @@ struct CastFunctor<T, DictionaryType,\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// String to Number\n+\n+template <typename T>\n+typename std::enable_if<std::is_arithmetic<T>::value && !std::is_same<T, int8_t>::value &&\n+                            !std::is_same<T, uint8_t>::value,\n+                        T>::type\n+castStringToNumeric(const std::string& s) {\n+  return boost::lexical_cast<T>(s);\n+}\n+\n+template <typename T>\n+typename std::enable_if<std::is_same<T, int8_t>::value || std::is_same<T, uint8_t>::value,\n+                        T>::type\n+castStringToNumeric(const std::string& s) {\n+  // Convert to int before casting to T\n+  // because boost::lexical_cast does not support 8bit int/uint.\n+  return boost::numeric_cast<T>(boost::lexical_cast<int>(s));\n+}\n+\n+template <typename O>\n+struct CastFunctor<O, StringType,\n+                   typename std::enable_if<std::is_base_of<Number, O>::value>::type> {\n+  void operator()(FunctionContext* ctx, const CastOptions& options,\n+                  const ArrayData& input, ArrayData* output) {\n+    using out_type = typename O::c_type;\n+    StringArray input_array(input.Copy());\n+\n+    auto out_data = GetMutableValues<out_type>(output, 1);\n+\n+    std::function<out_type(const std::string&)> cast_func;\n \n Review comment:\n   Is this variable used anywhere? It looks like you might've replaced it with the `castStringToNumeric` function.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T16:53:05.750+0000",
                    "updated": "2018-02-01T16:53:05.750+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16348892",
                    "id": "16348892",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#discussion_r165416478\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -703,6 +706,106 @@ struct CastFunctor<T, DictionaryType,\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// String to Number\n+\n+template <typename T>\n+typename std::enable_if<std::is_arithmetic<T>::value && !std::is_same<T, int8_t>::value &&\n+                            !std::is_same<T, uint8_t>::value,\n+                        T>::type\n+castStringToNumeric(const std::string& s) {\n+  return boost::lexical_cast<T>(s);\n+}\n+\n+template <typename T>\n+typename std::enable_if<std::is_same<T, int8_t>::value || std::is_same<T, uint8_t>::value,\n+                        T>::type\n+castStringToNumeric(const std::string& s) {\n \n Review comment:\n   Capitalize.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T16:53:05.758+0000",
                    "updated": "2018-02-01T16:53:05.758+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16348893",
                    "id": "16348893",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#discussion_r165417268\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -703,6 +706,106 @@ struct CastFunctor<T, DictionaryType,\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// String to Number\n+\n+template <typename T>\n+typename std::enable_if<std::is_arithmetic<T>::value && !std::is_same<T, int8_t>::value &&\n+                            !std::is_same<T, uint8_t>::value,\n+                        T>::type\n+castStringToNumeric(const std::string& s) {\n+  return boost::lexical_cast<T>(s);\n+}\n+\n+template <typename T>\n+typename std::enable_if<std::is_same<T, int8_t>::value || std::is_same<T, uint8_t>::value,\n+                        T>::type\n+castStringToNumeric(const std::string& s) {\n+  // Convert to int before casting to T\n+  // because boost::lexical_cast does not support 8bit int/uint.\n+  return boost::numeric_cast<T>(boost::lexical_cast<int>(s));\n+}\n+\n+template <typename O>\n+struct CastFunctor<O, StringType,\n+                   typename std::enable_if<std::is_base_of<Number, O>::value>::type> {\n+  void operator()(FunctionContext* ctx, const CastOptions& options,\n+                  const ArrayData& input, ArrayData* output) {\n+    using out_type = typename O::c_type;\n+    StringArray input_array(input.Copy());\n+\n+    auto out_data = GetMutableValues<out_type>(output, 1);\n+\n+    std::function<out_type(const std::string&)> cast_func;\n+\n+    for (int64_t i = 0; i < input.length; ++i) {\n+      if (input_array.IsNull(i)) {\n+        out_data++;\n+        continue;\n+      }\n+\n+      std::string s = input_array.GetString(i);\n+\n+      try {\n+        *out_data++ = castStringToNumeric<out_type>(s);\n+      } catch (...) {\n \n Review comment:\n   Is there a specific exception that can be caught here?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T16:53:05.765+0000",
                    "updated": "2018-02-01T16:53:05.765+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16367850",
                    "id": "16367850",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1387: ARROW-1491: [C++] Add casting implementations from strings to numbers or boolean\nURL: https://github.com/apache/arrow/pull/1387#issuecomment-366351431\n \n \n   I'm taking over this PR, will put up a new one based on this one.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-16T20:37:25.163+0000",
                    "updated": "2018-02-16T20:37:25.163+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16385353",
                    "id": "16385353",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~cpcloud] this would be nice to have, but relative to the bug backlog for 0.9.0 we could also defer this to the next release",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-03-04T20:26:32.142+0000",
                    "updated": "2018-03-04T20:26:32.142+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16393516",
                    "id": "16393516",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Moving to 0.10.0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-03-09T20:38:52.782+0000",
                    "updated": "2018-03-09T20:38:52.782+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13100662/comment/16570912",
                    "id": "16570912",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2362\n[https://github.com/apache/arrow/pull/2362]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-08-06T23:20:40.293+0000",
                    "updated": "2018-08-06T23:20:40.293+0000"
                }
            ],
            "maxResults": 27,
            "total": 27,
            "startAt": 0
        },
        "customfield_12311820": "0|i3jspr:",
        "customfield_12314139": null
    }
}